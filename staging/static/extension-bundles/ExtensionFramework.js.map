{"version":3,"file":"ExtensionFramework.js","sources":["../../../../extensions/src/common/types/enums.ts","../../../../extensions/src/common/utils.ts","../../../../extensions/src/common/globals.ts","../../../../extensions/src/common/ui.ts","../../../../extensions/src/common/IDs.ts","../../../../extensions/src/common/extension/mixins/optional/customSaveData.ts","../../../scratch-vm/src/util/color.js","../../../scratch-vm/src/util/cast.js","../../../../extensions/src/common/cast.ts","../../../../extensions/src/common/customArguments/CustomArgumentManager.ts","../../../../extensions/src/common/customArguments/dropdownOverride.ts","../../../../extensions/src/common/extension/mixins/optional/customArguments.ts","../../../../extensions/src/common/extension/mixins/index.ts","../../../../extensions/src/common/extension/mixins/optional/ui.ts","../../../../extensions/src/common/extension/ExtensionBase.ts","../../../../extensions/src/common/extension/mixins/required/scratchInfo/menus.ts","../../../../extensions/src/common/extension/mixins/required/scratchInfo/util.ts","../../../../extensions/src/common/extension/mixins/required/scratchInfo/handlers.ts","../../../../extensions/src/common/extension/mixins/required/scratchInfo/args.ts","../../../../extensions/src/common/extension/mixins/required/scratchInfo/text.ts","../../../../extensions/src/common/extension/mixins/required/scratchInfo/index.ts","../../../../extensions/src/common/extension/index.ts","../../../../extensions/src/common/extension/mixins/required/supported.ts","../../../../extensions/src/common/extension/GenericExtension.ts","../../../../extensions/src/common/extension/decorators/blocks.ts","../../../../extensions/src/common/extension/mixins/optional/legacySupport.ts","../../../../extensions/src/common/extension/decorators/legacySupport/index.ts"],"sourcesContent":["import { ValueOf } from \"../types\";\n\n/**\n * The different kind of blocks that an extension can define\n */\nexport const BlockType = {\n  /**\n   * Boolean reporter with hexagonal shape\n   */\n  Boolean: 'Boolean',\n\n  /**\n   * A button (not an actual block) for some special action, like making a variable\n   */\n  Button: 'button',\n\n  /**\n   * Command block\n   */\n  Command: 'command',\n\n  /**\n   * Specialized command block which may or may not run a child branch\n   * The thread continues with the next block whether or not a child branch ran.\n   */\n  Conditional: 'conditional',\n\n  /**\n   * Specialized hat block with no implementation function\n   * This stack only runs if the corresponding event is emitted by other code.\n   */\n  Event: 'event',\n\n  /**\n   * Hat block which conditionally starts a block stack\n   */\n  Hat: 'hat',\n\n  /**\n   * Specialized command block which may or may not run a child branch\n   * If a child branch runs, the thread evaluates the loop block again.\n   */\n  Loop: 'loop',\n\n  /**\n   * General reporter with numeric or string value\n   */\n  Reporter: 'reporter'\n} as const;\n\nexport const ArgumentType = {\n  /** Numeric value with angle picker. */\n  Angle: \"angle\",\n\n  /** Boolean value with hexagonal placeholder. */\n  Boolean: \"Boolean\",\n\n  /** Numeric value with color picker. */\n  Color: \"color\",\n\n  /** Numeric value with text field. */\n  Number: \"number\",\n\n  /** String value with text field. */\n  String: \"string\",\n\n  /** String value with matrix field. */\n  Matrix: \"matrix\",\n\n  /** MIDI note number with note picker (piano) field. */\n  Note: \"note\",\n\n  /** Inline image on block (as part of the label). */\n  Image: \"image\",\n\n  /** Type added by PRG to support custom arguments */\n  Custom: \"custom\"\n} as const;\n\n/**\n * Default types of Target supported by the VM\n * @enum {string} as const;\n */\nexport const TargetType = {\n  /**\n   * Rendered target which can move, change costumes, etc.\n   */\n  Sprite: 'sprite',\n\n  /**\n   * Rendered target which cannot move but can change backdrops\n   */\n  Stage: 'stage'\n} as const;\n\n/**\n * These constants are copied from scratch-blocks/core/constants.js\n * @TODO find a way to require() these straight from scratch-blocks... maybe make a scratch-blocks/dist/constants.js?\n * @readonly\n * @enum {int} as const;\n */\nexport const ScratchBlocksConstants = {\n  /**\n   * ENUM for output shape: hexagonal (booleans/predicates).\n   * @const\n   */\n  OutputShapeHexagonal: 1,\n\n  /**\n   * ENUM for output shape: rounded (numbers).\n   * @const\n   */\n  OutputShapeRound: 2,\n\n  /**\n   * ENUM for output shape: squared (any/all values; strings).\n   * @const\n   */\n  OutputShapeSquare: 3\n} as const;\n\nexport const StageLayering = {\n  BackgroundLayer: 'background',\n  VideoLayer: 'video',\n  PenLayer: 'pen',\n  SpriteLayer: 'sprite',\n} as const;\n\nexport const LayerGroups: readonly ValueOf<typeof StageLayering>[] = [\n  StageLayering.VideoLayer,\n  StageLayering.SpriteLayer,\n  StageLayering.BackgroundLayer,\n  StageLayering.PenLayer,\n] as const;\n\nexport const VariableType = {\n  /**\n   * Type representation for scalar variables.\n   * This is currently represented as ''\n   * for compatibility with blockly.\n   */\n  Scalar: '',\n  /**\n   * Type representation for list variables.\n   */\n  List: 'list',\n\n  BrooadcastMessage: 'broadcast_msg'\n} as const;\n\nexport const Branch = {\n  Exit: 0,\n  Enter: 1,\n  First: 1,\n  Second: 2,\n  Third: 3,\n  Fourth: 4,\n  Fifth: 5,\n  Sixth: 6,\n  Seventh: 7\n} as const;\n\nexport const Language = {\n  Аҧсшәа: 'ab',\n  العربية: 'ar',\n  አማርኛ: 'am',\n  Azeri: 'az',\n  Bahasa_Indonesia: 'id',\n  Беларуская: 'be',\n  Български: 'bg',\n  Català: 'ca',\n  Česky: 'cs',\n  Cymraeg: 'cy',\n  Dansk: 'da',\n  Deutsch: 'de',\n  Eesti: 'et',\n  Ελληνικά: 'el',\n  English: 'en',\n  Español: 'es',\n  Español_Latinoamericano: 'es-419',\n  Euskara: 'eu',\n  فارسی: 'fa',\n  Français: 'fr',\n  Gaeilge: 'ga',\n  Gàidhlig: 'gd',\n  Galego: 'gl',\n  한국어: 'ko',\n  עִבְרִית: 'he',\n  Hrvatski: 'hr',\n  isiZulu: 'zu',\n  Íslenska: 'is',\n  Italiano: 'it',\n  ქართული_ენა: 'ka',\n  Kiswahili: 'sw',\n  Kreyòl_ayisyen: 'ht',\n  کوردیی_ناوەندی: 'ckb',\n  Latviešu: 'lv',\n  Lietuvių: 'lt',\n  Magyar: 'hu',\n  Māori: 'mi',\n  Nederlands: 'nl',\n  日本語: 'ja',\n  にほんご: 'ja-Hira',\n  Norsk_Bokmål: 'nb',\n  Norsk_Nynorsk: 'nn',\n  Oʻzbekcha: 'uz',\n  ไทย: 'th',\n  ភាសាខ្មែរ: 'km',\n  Polski: 'pl',\n  Português: 'pt',\n  Português_Brasileiro: 'pt-br',\n  Rapa_Nui: 'rap',\n  Română: 'ro',\n  Русский: 'ru',\n  Српски: 'sr',\n  Slovenčina: 'sk',\n  Slovenščina: 'sl',\n  Suomi: 'fi',\n  Svenska: 'sv',\n  Tiếng_Việt: 'vi',\n  Türkçe: 'tr',\n  Українська: 'uk',\n  简体中文: 'zh-cn',\n  繁體中文: 'zh-tw'\n} as const;\n\nexport const LanguageKeys = Object.keys(Language);\n\nexport const RuntimeEvent = {\n  /**\n   * Event name for glowing a script.\n   */\n  ScriptGlowOn: 'SCRIPT_GLOW_ON',\n  /**\n   * Event name for unglowing a script.\n   */\n  ScriptGlowOff: 'SCRIPT_GLOW_OFF',\n  /**\n   * Event name for glowing a block.\n   */\n  BlockGlowOn: 'BLOCK_GLOW_ON',\n  /**\n   * Event name for unglowing a block.\n   */\n  BlockGlowOff: 'BLOCK_GLOW_OFF',\n  /**\n   * Event name for a cloud data update to this project.\n   */\n  HasCloudDataUpdate: 'HAS_CLOUD_DATA_UPDATE',\n  /**\n   * Event name for turning on turbo mode.\n   */\n  TurboModeOn: 'TURBO_MODE_ON',\n  /**\n   * Event name for turning off turbo mode.\n   */\n  TurboModeOff: 'TURBO_MODE_OFF',\n  /**\n   * Event name for turning on turbo mode.\n   */\n  RecordingOn: 'RECORDING_ON',\n  /**\n   * Event name for turning off turbo mode.\n   */\n  RecordingOff: 'RECORDING_OFF',\n  /**\n   * Event name when the project is started (threads may not necessarily be running).\n   */\n  ProjectStart: 'PROJECT_START',\n  /**\n   * Event name when threads start running.\n   * Used by the UI to indicate running status.\n   */\n  ProjectRunStart: 'PROJECT_RUN_START',\n  /**\n   * Event name when threads stop running\n   * Used by the UI to indicate not-running status.\n   */\n  ProjectRunStop: 'PROJECT_RUN_STOP',\n  /**\n   * Event name for project being stopped or restarted by the user.\n   * Used by blocks that need to reset state.\n   */\n  ProjectStopAll: 'PROJECT_STOP_ALL',\n  /**\n   * Event name for target being stopped by a stop for target call.\n   * Used by blocks that need to stop individual targets.\n   */\n  StopForTarget: 'STOP_FOR_TARGET',\n  /**\n   * Event name for visual value report.\n   */\n  VisualReport: 'VISUAL_REPORT',\n  /**\n   * Event name for project loaded report.\n   */\n  ProjectLoaded: 'PROJECT_LOADED',\n  /**\n   * Event name for report that a change was made that can be saved\n   */\n  ProjectChanged: 'PROJECT_CHANGED',\n  /**\n   * Event name for report that a change was made to an extension in the toolbox.\n   */\n  ToolboxExtensionsNeedUpdate: 'TOOLBOX_EXTENSIONS_NEED_UPDATE',\n  /**\n   * Event name for targets update report.\n   */\n  TargetsUpdate: 'TARGETS_UPDATE',\n  /**\n   * Event name for monitors update.\n   */\n  MonitorsUpdate: 'MONITORS_UPDATE',\n  /**\n   * Event name for block drag update.\n   */\n  BlockDragUpdate: 'BLOCK_DRAG_UPDATE',\n  /**\n   * Event name for block drag end.\n   */\n  BlockDragEnd: 'BLOCK_DRAG_END',\n  /**\n   * Event name for reporting that an extension was added.\n   */\n  ExtensionAdded: 'EXTENSION_ADDED',\n  /**\n   * Event name for reporting that an extension as asked for a custom field to be added\n   */\n  ExtensionFieldAdded: 'EXTENSION_FIELD_ADDED',\n  /**\n   * Event name for updating the available set of peripheral devices.\n   * This causes the peripheral connection modal to update a list of available peripherals.\n   */\n  PeripheralListUpdate: 'PERIPHERAL_LIST_UPDATE',\n  /**\n   * Event name for reporting that a peripheral has connected.\n   * This causes the status button in the blocks menu to indicate 'connected'.\n   */\n  PeripheralConnected: 'PERIPHERAL_CONNECTED',\n  /**\n   * Event name for reporting that a peripheral has been intentionally disconnected.\n   * This causes the status button in the blocks menu to indicate 'disconnected'.\n   */\n  PeripheralDisconnected: 'PERIPHERAL_DISCONNECTED',\n  /**\n   * Event name for reporting that a peripheral has encountered a request error.\n   * This causes the peripheral connection modal to switch to an error state.\n   */\n  PeripheralRequestError: 'PERIPHERAL_REQUEST_ERROR',\n  /**\n   * Event name for reporting that a peripheral connection has been lost.\n   * This causes a 'peripheral connection lost' error alert to display.\n   */\n  PeripheralConnectionLostError: 'PERIPHERAL_CONNECTION_LOST_ERROR',\n  /**\n   * Event name for reporting that a peripheral has not been discovered.\n   * This causes the peripheral connection modal to show a timeout state.\n   */\n  PeripheralScanTimeout: 'PERIPHERAL_SCAN_TIMEOUT',\n  /**\n   * Event name to indicate that the microphone is being used to stream audio.\n   */\n  MicListening: 'MIC_LISTENING',\n  /**\n   * Event name for reporting that blocksInfo was updated.\n   */\n  BlocksInfoUpdate: 'BLOCKSINFO_UPDATE',\n  /**\n   * Event name when the runtime tick loop has been started.\n   */\n  RuntimeStarted: 'RUNTIME_STARTED',\n  /**\n   * Event name when the runtime dispose has been called.\n   */\n  RuntimeDisposed: 'RUNTIME_DISPOSED',\n  /**\n   * Event name for reporting that a block was updated and needs to be rerendered.\n   */\n  BlocksNeedUpdate: 'BLOCKS_NEED_UPDATE',\n} as const;\n","import { MenuItem, Primitive } from \"./types\"\n\ntype FetchParams = {\n  request: Parameters<typeof fetch>[0],\n  options: Parameters<typeof fetch>[1]\n}\n\nexport const getValueFromMenuItem = <T>(item: MenuItem<T>) => typeof item === \"object\" ? (item as { value: T }).value : item;\n\nexport const getTextFromMenuItem = <T>(item: MenuItem<T>) => typeof item === \"object\" ? (item as { text: string }).text : item;\n\nexport async function fetchWithTimeout(\n  resource: FetchParams[\"request\"],\n  options: FetchParams[\"options\"] & { timeout: number }\n) {\n  const { timeout } = options;\n\n  const controller = new AbortController();\n  const id = setTimeout(() => controller.abort(), timeout);\n\n  const response = await fetch(resource, {\n    ...options,\n    signal: controller.signal\n  });\n\n  clearTimeout(id);\n\n  return response;\n}\n\nexport async function untilObject<T>(getter: () => T, delay: number = 100): Promise<T> {\n  let timeout: NodeJS.Timeout;\n  let value: T = getter();\n  while (!value) {\n    await new Promise(resolve => {\n      clearTimeout(timeout);\n      timeout = setTimeout(resolve, delay);\n    });\n    value = getter();\n  }\n  clearTimeout(timeout);\n  return value;\n}\n\nexport async function untilCondition(condition: () => boolean, delay: number = 100): Promise<void> {\n  let timeout: NodeJS.Timeout;\n  while (!condition()) {\n    await new Promise(resolve => {\n      clearTimeout(timeout);\n      timeout = setTimeout(resolve, delay);\n    });\n  }\n  clearTimeout(timeout);\n};\n\nexport async function untilReady<T extends { ready: boolean }>(obj: T, delay: number = 100): Promise<void> {\n  let timeout: NodeJS.Timeout;\n  while (!obj.ready) {\n    await new Promise(resolve => {\n      clearTimeout(timeout);\n      timeout = setTimeout(resolve, delay);\n    });\n  }\n  clearTimeout(timeout);\n};\n\nexport const isString = (query: any): query is string => typeof query === 'string' || query instanceof String;\n\nexport const isFunction = (query: any): query is (...args: any[]) => any =>\n  Object.prototype.toString.call(query) === \"[object Function]\"\n  || \"function\" === typeof query\n  || query instanceof Function;\n\nexport const isPrimitive = (query: any): query is Primitive => query !== Object(query);\n\nexport const splitOnCapitals = (query: string) => query.split(/(?=[A-Z])/);\n\n/**\n * A type safe utility function for copy values from one object to another\n * @param param0 object containing the target to copy values to and the source of the values to copy\n */\nexport const copyTo = <TTarget extends object, TSource extends { [k in keyof TTarget]?: TTarget[k] }>({ target, source }: { target: TTarget, source: TSource }) => {\n  for (const key in source) {\n    if (!(key in target)) continue;\n    // @ts-ignore -- the types of the function should ensure this is valid TS\n    target[key] = source[key]\n  }\n}\n\nexport const identity = (x: any) => x;\n\nexport const loadExternalScript = (url: string, onLoad: () => void, onError?: () => void) => {\n  const script = document.createElement('script');\n\n  script.onload = onLoad;\n\n  script.onerror = onError ?? (() => {\n    throw new Error(`Error loading endpoint: ${url}`)\n  });\n\n  script.src = url;\n  script.async = true;\n\n  document.body.appendChild(script);\n}\n\n/**\n * \n * @param url \n * @returns \n */\nexport const untilExternalScriptLoaded = async (url: string): Promise<void> => {\n  const scriptLoaded = new Promise((resolve, reject) => {\n    const script = document.createElement('script');\n    script.onload = resolve;\n    script.onerror = reject;\n    script.async = true;\n    script.src = url;\n    document.body.appendChild(script);\n  });\n  await scriptLoaded;\n  return;\n}\n\n/**\n * \n * @param url \n * @param globalVariableName \n * @returns \n */\nexport const untilExternalGlobalVariableLoaded = async <T>(url: string, globalVariableName: string): Promise<T> => {\n  if (window[globalVariableName]) return window[globalVariableName];\n  await untilExternalScriptLoaded(url);\n  return window[globalVariableName];\n}\n\n/**\n * Utilize javascript's \"call\" method (on Function.prototype) in a typesafe manner\n * @param fn \n * @param _this \n * @param args \n * @returns \n */\nexport const typesafeCall = <Args extends any[], Return, This, Fn extends (this: This, ...args: Args) => Return>(fn: Fn, _this: This, ...args: Args) => fn.call(_this, ...args) as Return;\n\nexport const set = <T extends object, K extends keyof T>(container: T, key: K, value: T[K]) => {\n  container[key] = value;\n  return container;\n}\n\nexport const assertSameLength = (...collections: any[][]) => {\n  const { size } = collections.reduce((set, { length }) => set.add(length), new Set<number>());\n  if (size !== 1) throw new Error(\"Zip failed because collections weren't equal length\");\n}","export const openUIEvent = \"OPEN_UI_FROM_EXTENSION\";\nexport const registerButtonCallbackEvent = \"REGISTER_BUTTON_CALLBACK_FROM_EXTENSION\";\nexport const FrameworkID = \"ExtensionFramework\";\n\nexport const customArgumentFlag = \"internal_IsCustomArgument\";\nexport const customArgumentCheck = \"isCustomArgumentHack\";\nexport const dropdownStateFlag = \"dropdownState\";\nexport const dropdownEntryFlag = \"dropdownEntry\";\nexport const initDropdownState = \"init\";\nexport const openDropdownState = \"open\";\nexport const closeDropdownState = \"close\"; ","import Runtime from \"$scratch-vm/engine/runtime\";\nimport { Extension as BaseExtension } from \"./extension/GenericExtension\";\nimport { openUIEvent, registerButtonCallbackEvent } from \"./globals\";\n\nexport type ReactivityDependency = any | any[];\n\nexport const activeClass = true;\n\nexport const px = (numberOf: number) => `${numberOf}px`;\n\ntype UniqueKeys<Extension> = Exclude<keyof Extension, keyof BaseExtension<any, any>>;\ntype Methods<Extension> = { [K in UniqueKeys<Extension>]-?: Extension[K] extends (...args: any) => any ? K : never };\ntype Properties<Extension> = { [K in UniqueKeys<Extension>]-?: Extension[K] extends (...args: any) => any ? never : K };\ntype MethodParams<Extension> = { [Key in UniqueKeys<Extension>]: Extension[Key] extends (...args: any) => any ? Parameters<Extension[Key]> : never };\ntype MethodReturns<Extension> = { [Key in UniqueKeys<Extension>]: Extension[Key] extends (...args: any) => any ? ReturnType<Extension[Key]> : never };\n\nexport type ReactiveInvoke<Extension> = <T extends keyof Methods<Extension>>(funcName: Methods<Extension>[T] extends never ? never : T, ...args: MethodParams<Extension>[T]) => MethodReturns<Extension>[T];\nexport type ReactiveSet<Extension> = <T extends keyof Properties<Extension>>(propertyName: Properties<Extension>[T] extends never ? never : T, value: Extension[T]) => void;\n\nexport type ReactiveMethods<Extension> = {\n  invoke: ReactiveInvoke<Extension>;\n  set: ReactiveSet<Extension>;\n}\n\nexport const reactiveInvoke = <Extension, T extends keyof Methods<Extension>>(extensionAssignment: Extension, funcName: T, args: MethodParams<Extension>[T]): MethodReturns<Extension>[T] => {\n  return (extensionAssignment[funcName] as Function)(...args as []);\n}\n\nexport const reactiveSet = <Extension, T extends keyof Properties<Extension>>(extensionAssignment: Extension, propertyName: T, value: Extension[T]): void => {\n  extensionAssignment[propertyName] = value;\n}\n\nexport const openUI = (runtime: Runtime, details: { id: string, name: string, component: string, label?: string }) => runtime.emit(openUIEvent, details);\n\nexport const registerButtonCallback = (runtime: Runtime, buttonID: string, callback: (...args: any[]) => void) => {\n  runtime.emit(registerButtonCallbackEvent, buttonID);\n  runtime.on(buttonID, callback);\n}\n\nconst enum Color {\n  ui = \"ui\",\n  text = \"text\",\n  motion = \"motion\",\n  red = \"red\",\n  sound = \"sound\",\n  control = \"control\",\n  data = \"data\",\n  pen = \"pen\",\n  error = \"error\",\n  extensions = \"extensions\",\n  drop = \"drop\"\n}\n\n/**\n * Makes it easier to reference the css color variables defined in prg-extension-boilerplate/packages/scratch-gui/src/components/programmatic-modal/programmatic-modal.jsx\n */\nclass CssVar {\n  root: Color;\n\n  constructor(root: Color) { this.root = root }\n\n  get(...parts: string[]) { return `var(--${this.root}-${parts.join(\"-\")})` }\n  primary(...parts: string[]) { return this.get(\"primary\", ...parts) }\n  secondary(...parts: string[]) { return this.get(\"secondary\", ...parts) }\n  tertiary(...parts: string[]) { return this.get(\"tertiary\", ...parts) }\n  transparent(...parts: string[]) { return this.get(\"transparent\", ...parts) }\n  light(...parts: string[]) { return this.get(\"light\", ...parts) }\n}\n\nconst ui = new CssVar(Color.ui);\nconst text = new CssVar(Color.text);\nconst motion = new CssVar(Color.motion);\nconst red = new CssVar(Color.red);\nconst sound = new CssVar(Color.sound);\nconst control = new CssVar(Color.control);\nconst data = new CssVar(Color.data);\nconst pen = new CssVar(Color.pen);\nconst error = new CssVar(Color.error);\nconst extensions = new CssVar(Color.extensions);\nconst drop = new CssVar(Color.extensions);\n\n/**\n * Color variable references corresponding to the css variables defined in prg-extension-boilerplate/packages/scratch-gui/src/components/programmatic-modal/programmatic-modal.jsx\n */\nexport const color = {\n  \"ui\": {\n    primary: ui.primary(),\n    secondary: ui.secondary(),\n    tertiary: ui.tertiary(),\n    modalOverlay: ui.get(\"modal\", \"overlay\"),\n    white: ui.get(\"white\"),\n    whiteDim: ui.get(\"white\", \"dim\"),\n    whiteTransparent: ui.get(\"white\", \"transparent\"),\n    transparent: ui.transparent(),\n    blackTransparent: ui.get(\"black\", \"transparent\"),\n  },\n  \"text\": {\n    primary: text.primary(),\n    primaryTransparent: text.transparent(),\n  },\n  \"motion\": {\n    primary: motion.primary(),\n    tertiary: motion.tertiary(),\n    transparent: motion.get(\"transparent\"),\n    lightTansparent: motion.light(\"transparent\"),\n  },\n  \"red\": {\n    primary: red.primary(),\n    tertiary: red.tertiary(),\n  },\n  \"sound\": {\n    primary: sound.primary(),\n    tertiary: sound.tertiary(),\n  },\n  \"control\": {\n    primary: control.primary(),\n  },\n  \"data\": {\n    primary: data.primary(),\n  },\n  \"pen\": {\n    primary: pen.primary(),\n    transparent: pen.transparent(),\n  },\n  \"error\": {\n    primary: error.primary(),\n    light: error.light(),\n    transparent: error.transparent(),\n  },\n  \"extensions\": {\n    primary: extensions.primary(),\n    tertiary: extensions.tertiary(),\n    light: extensions.light(),\n    transparent: extensions.transparent(),\n  },\n  \"drop\": {\n    highlight: drop.get(\"highlight\")\n  }\n}","const validRegEx = new RegExp('^[a-z0-9]+$', 'i');\nconst invalidRegEx = new RegExp('[^a-z0-9]+', 'gi');\n\nexport const isValidID = (id) => validRegEx.test(id);\n\nconst guard = 'prg';\nconst guards = [guard, guard.split(\"\").reverse().join(\"\")];\n\nconst guardsRegEx = new RegExp(`${guards[0]}([0-9]+)${guards[1]}`, 'g');\n\nconst wrap = (str) => `${guards[0]}${str}${guards[1]}`;\n\nconst replaceAll = (query, current, desired) => query.replaceAll(current, desired);\n\nexport const encode = (query: string): string => {\n  const matches = [...query.matchAll(invalidRegEx)];\n  const invalidCharacters = matches.reduce((set, current) => {\n    current[0].split(\"\").forEach(char => set.add(char));\n    return set;\n  }, new Set<string>());\n  const replacements = [...invalidCharacters].map(char => ({ char, code: char.charCodeAt(0) }));\n  return replacements.reduce((modified, { char, code }) => replaceAll(modified, char, wrap(code)), `${query}`);\n}\n\nexport const decode = (query: string): string => {\n  const matches = [...query.matchAll(guardsRegEx)];\n  const replacements = matches.reduce((replacements, match) => {\n    const [key, code] = match;\n    return replacements.set(key, String.fromCharCode(code as any as number));\n  }, new Map());\n  return [...replacements].reduce((modified, [current, desired]) => replaceAll(modified, current, desired), `${query}`);\n}","import { ExtensionBaseConstructor } from \"$common/extension/ExtensionBase\";\nimport { ExtensionBase } from \"../../ExtensionBase\";\nimport { NonAbstractConstructor } from \"$common/types\";\nimport { MinimalExtensionConstructor } from \"../required\";\n\n/**\n * WARNING! If you change this key, it will affect already saved projects.\n * Do not rename this without first developing a mechanism for searching for previously used keys.\n */\nconst saveDataKey = \"customSaveDataPerExtension\" as const;\n\n/**\n * @summary Utility class to assist in creating a (typesafe) object that, for a given Extension type, handles both:\n * - writing out data on save\n * - doing something with save data on load\n * \n * @description This class's constructor takes an object with both an `onSave` and an `onLoad` method\n * (and the `onSave`'s return type must match `onLoad`'s argument type)\n * @example\n * new SaveDataHandler({\n *    Extension: MyExtension,\n *    onSave: () => ({x: 0, y: 3}),\n *    onLoad: (data) => {\n *       const sum = data.x + data.y; // do something with saved data\n *    }\n * })\n */\nexport class SaveDataHandler<T extends ExtensionBase, TData> {\n  constructor(public hooks: {\n    // @ts-ignore\n    Extension: NonAbstractConstructor<T>,\n    onSave: (self: T) => TData,\n    onLoad: (self: T, data: TData) => void,\n  }) { }\n}\n\n/**\n * Mixin the ability for extensions to save and reload custom data (including any data related to custom arguments)\n * @param Ctor \n * @returns \n * @see https://www.typescriptlang.org/docs/handbook/mixins.html\n */\nexport default function mixin<T extends MinimalExtensionConstructor>(Ctor: T) {\n  abstract class _ extends Ctor {\n    /**\n     * Optional field that can be defined if you need to save custom data for an extension \n     * (like some extension specific variable, or an API endpoint).\n     * @example\n     * class Example extends Extension<..., ...> {\n     *    someValue = 5;\n     *    ...\n     *    saveDataHandler = new SaveDataHandler({\n     *      Extension: Example,\n     *      // NOTE: The type info for 'instance' could be left off in the line below\n     *      onSave: (instance: Example) => ({ valueToSave: instance.someValue }),\n     *      onLoad: (instance, data) => instance.someValue = data.valueToSave\n     *    })\n     * }\n     * @see Extension.MakeSaveDataHandler\n     */\n    protected saveDataHandler: SaveDataHandler<_, any> = undefined;\n\n    /**\n     * Save function called 'internally' by the VM when serializing a project.\n     * @param toSave \n     * @param extensionIDs \n     * @returns \n     */\n    private save(toSave: { [saveDataKey]: Record<string, any> }, extensionIDs: Set<string>) {\n      const { saveDataHandler, id } = this;\n      const argumentManager = this.supports(\"customArguments\") ? this.customArgumentManager : null;\n      const saveData = saveDataHandler?.hooks.onSave(this) ?? {};\n      argumentManager?.saveTo(saveData);\n      if (Object.keys(saveData).length === 0) return;\n      const container = toSave[saveDataKey];\n      container ? (container[id] = saveData) : (toSave[saveDataKey] = { [id]: saveData });\n      extensionIDs.add(id);\n    }\n\n    /**\n     * Load function called 'internally' by the VM when loading a project.\n     * Will be invoked on an extension immediately after it is constructed.\n     * @param saved \n     * @returns \n     */\n    private load(saved: { [saveDataKey]: Record<string, any> }) {\n      if (!saved) return;\n      const { saveDataHandler, id } = this;\n      const saveData = saveDataKey in saved ? saved[saveDataKey][id] : null;\n      if (!saveData) return;\n      saveDataHandler?.hooks.onLoad(this, saveData);\n\n      if (this.supports(\"customArguments\")) this.getOrCreateCustomArgumentManager().loadFrom(saveData);\n    }\n  }\n  return _;\n}","class Color {\n    /**\n     * @typedef {object} RGBObject - An object representing a color in RGB format.\n     * @property {number} r - the red component, in the range [0, 255].\n     * @property {number} g - the green component, in the range [0, 255].\n     * @property {number} b - the blue component, in the range [0, 255].\n     */\n\n    /**\n     * @typedef {object} HSVObject - An object representing a color in HSV format.\n     * @property {number} h - hue, in the range [0-359).\n     * @property {number} s - saturation, in the range [0,1].\n     * @property {number} v - value, in the range [0,1].\n     */\n\n    /** @type {RGBObject} */\n    static get RGB_BLACK () {\n        return {r: 0, g: 0, b: 0};\n    }\n\n    /** @type {RGBObject} */\n    static get RGB_WHITE () {\n        return {r: 255, g: 255, b: 255};\n    }\n\n    /**\n     * Convert a Scratch decimal color to a hex string, #RRGGBB.\n     * @param {number} decimal RGB color as a decimal.\n     * @return {string} RGB color as #RRGGBB hex string.\n     */\n    static decimalToHex (decimal) {\n        if (decimal < 0) {\n            decimal += 0xFFFFFF + 1;\n        }\n        let hex = Number(decimal).toString(16);\n        hex = `#${'000000'.substr(0, 6 - hex.length)}${hex}`;\n        return hex;\n    }\n\n    /**\n     * Convert a Scratch decimal color to an RGB color object.\n     * @param {number} decimal RGB color as decimal.\n     * @return {RGBObject} rgb - {r: red [0,255], g: green [0,255], b: blue [0,255]}.\n     */\n    static decimalToRgb (decimal) {\n        const a = (decimal >> 24) & 0xFF;\n        const r = (decimal >> 16) & 0xFF;\n        const g = (decimal >> 8) & 0xFF;\n        const b = decimal & 0xFF;\n        return {r: r, g: g, b: b, a: a > 0 ? a : 255};\n    }\n\n    /**\n     * Convert a hex color (e.g., F00, #03F, #0033FF) to an RGB color object.\n     * CC-BY-SA Tim Down:\n     * https://stackoverflow.com/questions/5623838/rgb-to-hex-and-hex-to-rgb\n     * @param {!string} hex Hex representation of the color.\n     * @return {RGBObject} null on failure, or rgb: {r: red [0,255], g: green [0,255], b: blue [0,255]}.\n     */\n    static hexToRgb (hex) {\n        const shorthandRegex = /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i;\n        hex = hex.replace(shorthandRegex, (m, r, g, b) => r + r + g + g + b + b);\n        const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n        return result ? {\n            r: parseInt(result[1], 16),\n            g: parseInt(result[2], 16),\n            b: parseInt(result[3], 16)\n        } : null;\n    }\n\n    /**\n     * Convert an RGB color object to a hex color.\n     * @param {RGBObject} rgb - {r: red [0,255], g: green [0,255], b: blue [0,255]}.\n     * @return {!string} Hex representation of the color.\n     */\n    static rgbToHex (rgb) {\n        return Color.decimalToHex(Color.rgbToDecimal(rgb));\n    }\n\n    /**\n     * Convert an RGB color object to a Scratch decimal color.\n     * @param {RGBObject} rgb - {r: red [0,255], g: green [0,255], b: blue [0,255]}.\n     * @return {!number} Number representing the color.\n     */\n    static rgbToDecimal (rgb) {\n        return (rgb.r << 16) + (rgb.g << 8) + rgb.b;\n    }\n\n    /**\n    * Convert a hex color (e.g., F00, #03F, #0033FF) to a decimal color number.\n    * @param {!string} hex Hex representation of the color.\n    * @return {!number} Number representing the color.\n    */\n    static hexToDecimal (hex) {\n        return Color.rgbToDecimal(Color.hexToRgb(hex));\n    }\n\n    /**\n     * Convert an HSV color to RGB format.\n     * @param {HSVObject} hsv - {h: hue [0,360), s: saturation [0,1], v: value [0,1]}\n     * @return {RGBObject} rgb - {r: red [0,255], g: green [0,255], b: blue [0,255]}.\n     */\n    static hsvToRgb (hsv) {\n        let h = hsv.h % 360;\n        if (h < 0) h += 360;\n        const s = Math.max(0, Math.min(hsv.s, 1));\n        const v = Math.max(0, Math.min(hsv.v, 1));\n\n        const i = Math.floor(h / 60);\n        const f = (h / 60) - i;\n        const p = v * (1 - s);\n        const q = v * (1 - (s * f));\n        const t = v * (1 - (s * (1 - f)));\n\n        let r;\n        let g;\n        let b;\n\n        switch (i) {\n        default:\n        case 0:\n            r = v;\n            g = t;\n            b = p;\n            break;\n        case 1:\n            r = q;\n            g = v;\n            b = p;\n            break;\n        case 2:\n            r = p;\n            g = v;\n            b = t;\n            break;\n        case 3:\n            r = p;\n            g = q;\n            b = v;\n            break;\n        case 4:\n            r = t;\n            g = p;\n            b = v;\n            break;\n        case 5:\n            r = v;\n            g = p;\n            b = q;\n            break;\n        }\n\n        return {\n            r: Math.floor(r * 255),\n            g: Math.floor(g * 255),\n            b: Math.floor(b * 255)\n        };\n    }\n\n    /**\n     * Convert an RGB color to HSV format.\n     * @param {RGBObject} rgb - {r: red [0,255], g: green [0,255], b: blue [0,255]}.\n     * @return {HSVObject} hsv - {h: hue [0,360), s: saturation [0,1], v: value [0,1]}\n     */\n    static rgbToHsv (rgb) {\n        const r = rgb.r / 255;\n        const g = rgb.g / 255;\n        const b = rgb.b / 255;\n        const x = Math.min(Math.min(r, g), b);\n        const v = Math.max(Math.max(r, g), b);\n\n        // For grays, hue will be arbitrarily reported as zero. Otherwise, calculate\n        let h = 0;\n        let s = 0;\n        if (x !== v) {\n            const f = (r === x) ? g - b : ((g === x) ? b - r : r - g);\n            const i = (r === x) ? 3 : ((g === x) ? 5 : 1);\n            h = ((i - (f / (v - x))) * 60) % 360;\n            s = (v - x) / v;\n        }\n\n        return {h: h, s: s, v: v};\n    }\n\n    /**\n     * Linear interpolation between rgb0 and rgb1.\n     * @param {RGBObject} rgb0 - the color corresponding to fraction1 <= 0.\n     * @param {RGBObject} rgb1 - the color corresponding to fraction1 >= 1.\n     * @param {number} fraction1 - the interpolation parameter. If this is 0.5, for example, mix the two colors equally.\n     * @return {RGBObject} the interpolated color.\n     */\n    static mixRgb (rgb0, rgb1, fraction1) {\n        if (fraction1 <= 0) return rgb0;\n        if (fraction1 >= 1) return rgb1;\n        const fraction0 = 1 - fraction1;\n        return {\n            r: (fraction0 * rgb0.r) + (fraction1 * rgb1.r),\n            g: (fraction0 * rgb0.g) + (fraction1 * rgb1.g),\n            b: (fraction0 * rgb0.b) + (fraction1 * rgb1.b)\n        };\n    }\n}\n\nmodule.exports = Color;\n","const Color = require('../util/color');\n\n/**\n * @fileoverview\n * Utilities for casting and comparing Scratch data-types.\n * Scratch behaves slightly differently from JavaScript in many respects,\n * and these differences should be encapsulated below.\n * For example, in Scratch, add(1, join(\"hello\", world\")) -> 1.\n * This is because \"hello world\" is cast to 0.\n * In JavaScript, 1 + Number(\"hello\" + \"world\") would give you NaN.\n * Use when coercing a value before computation.\n */\n\nclass Cast {\n    /**\n     * Scratch cast to number.\n     * Treats NaN as 0.\n     * In Scratch 2.0, this is captured by `interp.numArg.`\n     * @param {*} value Value to cast to number.\n     * @return {number} The Scratch-casted number value.\n     */\n    static toNumber (value) {\n        // If value is already a number we don't need to coerce it with\n        // Number().\n        if (typeof value === 'number') {\n            // Scratch treats NaN as 0, when needed as a number.\n            // E.g., 0 + NaN -> 0.\n            if (Number.isNaN(value)) {\n                return 0;\n            }\n            return value;\n        }\n        const n = Number(value);\n        if (Number.isNaN(n)) {\n            // Scratch treats NaN as 0, when needed as a number.\n            // E.g., 0 + NaN -> 0.\n            return 0;\n        }\n        return n;\n    }\n\n    /**\n     * Scratch cast to boolean.\n     * In Scratch 2.0, this is captured by `interp.boolArg.`\n     * Treats some string values differently from JavaScript.\n     * @param {*} value Value to cast to boolean.\n     * @return {boolean} The Scratch-casted boolean value.\n     */\n    static toBoolean (value) {\n        // Already a boolean?\n        if (typeof value === 'boolean') {\n            return value;\n        }\n        if (typeof value === 'string') {\n            // These specific strings are treated as false in Scratch.\n            if ((value === '') ||\n                (value === '0') ||\n                (value.toLowerCase() === 'false')) {\n                return false;\n            }\n            // All other strings treated as true.\n            return true;\n        }\n        // Coerce other values and numbers.\n        return Boolean(value);\n    }\n\n    /**\n     * Scratch cast to string.\n     * @param {*} value Value to cast to string.\n     * @return {string} The Scratch-casted string value.\n     */\n    static toString (value) {\n        return String(value);\n    }\n\n    /**\n     * Cast any Scratch argument to an RGB color array to be used for the renderer.\n     * @param {*} value Value to convert to RGB color array.\n     * @return {Array.<number>} [r,g,b], values between 0-255.\n     */\n    static toRgbColorList (value) {\n        const color = Cast.toRgbColorObject(value);\n        return [color.r, color.g, color.b];\n    }\n\n    /**\n     * Cast any Scratch argument to an RGB color object to be used for the renderer.\n     * @param {*} value Value to convert to RGB color object.\n     * @return {import(\"../typescript-support/types\").RGBObject} [r,g,b], values between 0-255.\n     */\n    static toRgbColorObject (value) {\n        let color;\n        if (typeof value === 'string' && value.substring(0, 1) === '#') {\n            color = Color.hexToRgb(value);\n            // If the color wasn't *actually* a hex color, cast to black\n            if (!color) color = {r: 0, g: 0, b: 0, a: 255};\n        } else {\n            color = Color.decimalToRgb(Cast.toNumber(value));\n        }\n        return color;\n    }\n\n    /**\n     * Determine if a Scratch argument is a white space string (or null / empty).\n     * @param {*} val value to check.\n     * @return {boolean} True if the argument is all white spaces or null / empty.\n     */\n    static isWhiteSpace (val) {\n        return val === null || (typeof val === 'string' && val.trim().length === 0);\n    }\n\n    /**\n     * Compare two values, using Scratch cast, case-insensitive string compare, etc.\n     * In Scratch 2.0, this is captured by `interp.compare.`\n     * @param {*} v1 First value to compare.\n     * @param {*} v2 Second value to compare.\n     * @returns {number} Negative number if v1 < v2; 0 if equal; positive otherwise.\n     */\n    static compare (v1, v2) {\n        let n1 = Number(v1);\n        let n2 = Number(v2);\n        if (n1 === 0 && Cast.isWhiteSpace(v1)) {\n            n1 = NaN;\n        } else if (n2 === 0 && Cast.isWhiteSpace(v2)) {\n            n2 = NaN;\n        }\n        if (isNaN(n1) || isNaN(n2)) {\n            // At least one argument can't be converted to a number.\n            // Scratch compares strings as case insensitive.\n            const s1 = String(v1).toLowerCase();\n            const s2 = String(v2).toLowerCase();\n            if (s1 < s2) {\n                return -1;\n            } else if (s1 > s2) {\n                return 1;\n            }\n            return 0;\n        }\n        // Handle the special case of Infinity\n        if (\n            (n1 === Infinity && n2 === Infinity) ||\n            (n1 === -Infinity && n2 === -Infinity)\n        ) {\n            return 0;\n        }\n        // Compare as numbers.\n        return n1 - n2;\n    }\n\n    /**\n     * Determine if a Scratch argument number represents a round integer.\n     * @param {*} val Value to check.\n     * @return {boolean} True if number looks like an integer.\n     */\n    static isInt (val) {\n        // Values that are already numbers.\n        if (typeof val === 'number') {\n            if (isNaN(val)) { // NaN is considered an integer.\n                return true;\n            }\n            // True if it's \"round\" (e.g., 2.0 and 2).\n            return val === parseInt(val, 10);\n        } else if (typeof val === 'boolean') {\n            // `True` and `false` always represent integer after Scratch cast.\n            return true;\n        } else if (typeof val === 'string') {\n            // If it contains a decimal point, don't consider it an int.\n            return val.indexOf('.') < 0;\n        }\n        return false;\n    }\n\n    static get LIST_INVALID () {\n        return 'INVALID';\n    }\n\n    static get LIST_ALL () {\n        return 'ALL';\n    }\n\n    /**\n     * Compute a 1-based index into a list, based on a Scratch argument.\n     * Two special cases may be returned:\n     * LIST_ALL: if the block is referring to all of the items in the list.\n     * LIST_INVALID: if the index was invalid in any way.\n     * @param {*} index Scratch arg, including 1-based numbers or special cases.\n     * @param {number} length Length of the list.\n     * @param {boolean} acceptAll Whether it should accept \"all\" or not.\n     * @return {(number|string)} 1-based index for list, LIST_ALL, or LIST_INVALID.\n     */\n    static toListIndex (index, length, acceptAll) {\n        if (typeof index !== 'number') {\n            if (index === 'all') {\n                return acceptAll ? Cast.LIST_ALL : Cast.LIST_INVALID;\n            }\n            if (index === 'last') {\n                if (length > 0) {\n                    return length;\n                }\n                return Cast.LIST_INVALID;\n            } else if (index === 'random' || index === 'any') {\n                if (length > 0) {\n                    return 1 + Math.floor(Math.random() * length);\n                }\n                return Cast.LIST_INVALID;\n            }\n        }\n        index = Math.floor(Cast.toNumber(index));\n        if (index < 1 || index > length) {\n            return Cast.LIST_INVALID;\n        }\n        return index;\n    }\n}\n\nmodule.exports = Cast;\n","import { ArgumentType } from \"./types/enums\";\nimport { RGBObject, TypeByArgumentType, ValueOf } from \"./types\";\nimport Cast from '$scratch-vm/util/cast';\n\nexport const castToType = (argumentType: ValueOf<typeof ArgumentType>, value: any) => {\n  switch (argumentType) {\n    case ArgumentType.String:\n      return `${value}`;\n    case ArgumentType.Number:\n      return parseFloat(value);\n    case ArgumentType.Boolean:\n      return JSON.parse(value);\n    case ArgumentType.Note:\n      return parseInt(value);\n    case ArgumentType.Angle:\n      return parseInt(value);\n    case ArgumentType.Matrix:\n      return toMatrix(value);\n    case ArgumentType.Color:\n      return Cast.toRgbColorObject(value) as RGBObject;\n    default:\n      throw new Error(`Method not implemented for value of ${value} and type ${argumentType}`);\n  }\n}\n\nexport const tryCastToArgumentType = <T extends ValueOf<typeof ArgumentType>>(\n  argumentType: T,\n  value: any,\n  onFailure: (value: any) => TypeByArgumentType<T>\n): TypeByArgumentType<T> => {\n  try {\n    const casted = castToType(argumentType, value);\n    return casted as TypeByArgumentType<T>;\n  }\n  catch {\n    return onFailure(value);\n  }\n}\n\nconst toFlag = (value: string): boolean => parseInt(value) === 1;\n\nconst toMatrix = (matrixString: string): boolean[][] => {\n  if (matrixString.length !== 25) return new Array(5).fill(new Array(5).fill(false));\n\n  const entries = matrixString.split('');\n  const matrix = entries.map(toFlag).reduce((matrix, flag, index) => {\n    const row = Math.floor(index / 5);\n    const column = index % 5;\n    (column === 0) ? matrix[row] = [flag] : matrix[row].push(flag);\n    return matrix;\n  }, new Array<boolean[]>(5));\n\n  return matrix;\n}","export type ArgumentEntry<T> = { text: string, value: T };\nexport type ArgumentEntrySetter<T> = (entry: ArgumentEntry<T>) => void;\n\nexport default class CustomArgumentManager {\n  map: Map<string, ArgumentEntry<any>> = new Map();\n  pending: { id: string, entry: ArgumentEntry<any> } = null;\n\n  clearPending() { this.pending = null }\n  setPending(update: typeof this.pending) { this.pending = update }\n\n  add<T>(entry: ArgumentEntry<T>): string {\n    const id = CustomArgumentManager.GetIdentifier();\n    this.map.set(id, entry);\n    this.clearPending();\n    return id;\n  }\n\n  insert<T>(id: string, entry: ArgumentEntry<T>): string {\n    this.map.set(id, entry);\n    this.clearPending();\n    return id;\n  }\n\n  request<T>(): [string, ArgumentEntrySetter<T>] {\n    this.clearPending();\n    const id = CustomArgumentManager.GetIdentifier();\n    return [id, (entry) => this.setPending({ id, entry })];\n  }\n\n  tryResolve() {\n    if (!this.pending) return;\n    const { pending: { entry, id } } = this;\n    this.map.set(id, entry);\n    this.clearPending();\n    return { entry, id };\n  }\n\n  getCurrentEntries() {\n    return Array.from(this.map.entries())\n      .filter(([_, entry]) => entry !== null)\n      .map(([id, { text }]) => [text, id] as const);\n  }\n\n  getEntry(id: string) { return this.map.get(id) }\n\n  static SaveKey = \"internal_customArgumentsSaveData\" as const;\n\n  requiresSave() { this.map.size > 0 }\n\n  saveTo(obj: object) {\n    const entries = Array.from(this.map.entries())\n      .filter(([_, entry]) => entry !== null)\n      .map(([id, entry]) => ({ id, entry }));\n    if (entries.length === 0) return;\n    obj[CustomArgumentManager.SaveKey] = entries;\n  }\n\n  loadFrom(obj: Record<typeof CustomArgumentManager[\"SaveKey\"], { id: string, entry: ArgumentEntry<any> }[]>) {\n    obj[CustomArgumentManager.SaveKey]?.forEach(({ id, entry }) => {\n      this.map.set(id, entry);\n    });\n  }\n\n  /**\n   * @todo Implement this if it becomes necessary (i.e the every growing size of this.map becomes an issue)\n   */\n  private purgeStaleIDs() {\n    // Somehow, tap into blockly to loop through all current blocks & their field dropdowns.\n    // Collect all field dropdowns values. \n    // Then, loop over entries in this.map -- if the values don't appear in the collected in-use values, drop those items.\n    // NOTE: The blocks in the 'pallette' do not show up in a target's \"blocks\" object, which makes this tricky.\n  }\n\n  static IsIdentifier = (query: string) => query.startsWith(CustomArgumentManager.IdentifierPrefix);\n  private static GetIdentifier = () => CustomArgumentManager.IdentifierPrefix + new Date().getTime().toString();\n  private static IdentifierPrefix = \"__customArg__\";\n}","import { ExtensionInstance } from \"$common/extension\";\nimport { untilObject } from \"$common/utils\";\nimport { ArgumentEntry, ArgumentEntrySetter } from \"./CustomArgumentManager\";\n\n/** Constructed based on Svelte documentation: https://svelte.dev/docs#run-time-client-side-component-api-creating-a-component */\ntype CreateComponentOptions = {\n  target: Element | HTMLElement;\n  anchor?: Element | HTMLElement;\n  props: {};\n}\n\nexport type CustomArgumentUIConstructor = (options: CreateComponentOptions) => void;\n\nexport const renderToDropdown = async <T>(\n  compononentConstructor: CustomArgumentUIConstructor,\n  props: {\n    extension: ExtensionInstance,\n    setter: ArgumentEntrySetter<T>,\n    current: ArgumentEntry<T>\n  }\n) => {\n  const dropdownContainerClass = \"blocklyDropDownContent\";\n  const elements = document.getElementsByClassName(dropdownContainerClass);\n  if (elements.length !== 1) return console.error(`Uh oh! Expected 1 element with class '${dropdownContainerClass}', but found ${elements.length}`);\n  const [target] = elements;\n  const anchor = await untilObject(() => target.children[0]);\n  const component = new compononentConstructor({ target, anchor, props });\n  centerDropdownButton(anchor);\n}\n\nconst centerDropdownButton = (container: Element) => {\n  type ClassAndStyleModification = [string, (syle: CSSStyleDeclaration) => void];\n\n  const findElementAndModifyStyle = ([className, styleMod]: ClassAndStyleModification) => {\n    const elements = container.getElementsByClassName(className);\n    console.assert(elements.length === 1, `Incorrect number of elements found with class: ${className}`);\n    styleMod((elements[0] as HTMLElement).style);\n  };\n\n  const elements = [\n    [\n      \"goog-menuitem goog-option\",\n      (style) => {\n        style.margin = \"auto\";\n        style.paddingLeft = style.paddingRight = \"0px\";\n      }\n    ],\n    [\n      \"goog-menuitem-content\",\n      (style) => style.textAlign = \"center\"\n    ]\n  ] satisfies ClassAndStyleModification[];\n\n  elements.forEach(findElementAndModifyStyle);\n}","import type Runtime from \"$scratch-vm/engine/runtime\";\nimport CustomArgumentManager, { ArgumentEntry } from \"$common/customArguments/CustomArgumentManager\";\nimport { CustomArgumentUIConstructor, renderToDropdown } from \"$common/customArguments/dropdownOverride\";\nimport { ArgumentType } from \"$common/types/enums\";\nimport { openDropdownState, closeDropdownState, initDropdownState, customArgumentFlag, customArgumentCheck, dropdownStateFlag, dropdownEntryFlag } from \"$common/globals\";\nimport { Argument, BaseGenericExtension } from \"$common/types\";\nimport { MinimalExtensionConstructor } from \"../required\";\n\ntype ComponentGetter = (id: string, componentName: string) => CustomArgumentUIConstructor;\n\nconst callingContext = {\n  DrowpdownOpen: openDropdownState,\n  DropdownClose: closeDropdownState,\n  Init: initDropdownState,\n} as const;\n\n/**\n * Mixin the ability for extensions to create custom argument types with their own specific UIs\n * @param Ctor \n * @returns \n * @see https://www.typescriptlang.org/docs/handbook/mixins.html\n */\nexport default function mixin<T extends MinimalExtensionConstructor>(Ctor: T) {\n  abstract class _ extends Ctor {\n\n    /**\n     * Create a custom argument for one of this block's arguments\n     * @param param0 \n     * - component: The svelte component to render the custom argument UI\n     * - initial: The starting value of the the custom argument (including both its value and text representation)\n     * - acceptReportersHandler: A function that must be defined if you'd like for your custom argument to accept reporters\n     * @returns \n     */\n    protected makeCustomArgument = <T>({ component, initial, acceptReportersHandler: handler }: { component: string, initial: ArgumentEntry<T>, acceptReportersHandler?: (x: any) => ArgumentEntry<T> }): Argument<T> => {\n      this.argumentManager ??= new CustomArgumentManager();\n      const id = this.argumentManager.add(initial);\n      const getItems = () => [{ text: customArgumentFlag, value: JSON.stringify({ component, id }) }];\n      return {\n        type: ArgumentType.Custom,\n        defaultValue: id,\n        options: handler === undefined ? getItems : { acceptsReports: true, getItems, handler },\n      } as Argument<T>\n    }\n\n    protected argumentManager: CustomArgumentManager = null;\n\n    public get customArgumentManager(): CustomArgumentManager {\n      return this.argumentManager\n    }\n\n    public getOrCreateCustomArgumentManager(): CustomArgumentManager {\n      this.argumentManager ??= new CustomArgumentManager();\n      return this.argumentManager;\n    }\n\n    /**\n     * Utilized externally by scratch-vm to check if a given argument should be treated as a 'custom argument'.\n     * Checks if the value returned by a dyanmic menu indicates that it should be treated as a 'custom argument'\n     */\n    private [customArgumentCheck](arr: Array<string | { text: string }>) {\n      if (arr.length !== 1) return false;\n      const item = arr[0];\n      if (typeof item !== \"object\") return false;\n      const { text } = item;\n      return text === customArgumentFlag;\n    };\n\n    /**\n     * Utilized externally by scratch-vm to process custom arguments\n     * @param runtime NOTE: once we switch to V2, we can remove this and instead use the extension's runtime\n     * @param param1 \n     * @param getComponent \n     * @returns \n     */\n    private processCustomArgumentHack(runtime: Runtime, [{ value }]: { value: string }[], getComponent: ComponentGetter): (readonly [string, string])[] {\n\n      const { id: extensionID, customArgumentManager: argumentManager } = this;\n      const { component, id: initialID } = JSON.parse(value) as { component: string, id: string };\n      const context = runtime[dropdownStateFlag];\n\n      switch (context) {\n        case callingContext.Init:\n          return argumentManager.getCurrentEntries();\n        case callingContext.DropdownClose: {\n          const result = argumentManager.tryResolve();\n          return result ? [[result.entry.text, result.id]] : argumentManager.getCurrentEntries();\n        }\n        case callingContext.DrowpdownOpen: {\n          const currentEntry = runtime[dropdownEntryFlag] as ArgumentEntry<any>;\n          const prevID = currentEntry?.value ?? initialID;\n          const current = argumentManager.getEntry(prevID);\n          const [id, setEntry] = argumentManager.request();\n          renderToDropdown(getComponent(extensionID, component), { setter: setEntry, current, extension: this as any as BaseGenericExtension });\n          return [[\"Apply\", id]];\n        }\n      }\n\n      throw new Error(\"Error during processing -- Context:\" + callingContext);\n    };\n\n  }\n\n  return _;\n}","import customArguments from \"./optional/customArguments\";\nimport customSaveData from \"./optional/customSaveData\";\nimport ui from \"./optional/ui\";\nimport { MinimalExtensionConstructor } from \"./required\";\n\nexport const optionalMixins = {\n  customArguments,\n  ui,\n  customSaveData,\n} as const satisfies OptionalMixins;\n\nexport type OptionalMixins<T extends MinimalExtensionConstructor = MinimalExtensionConstructor> = {\n  ui: typeof ui<T>;\n  customArguments: typeof customArguments<T>,\n  customSaveData: typeof customSaveData<T>,\n}\n\nexport type MixinName = keyof typeof optionalMixins;\n\nexport type ExtensionWithFunctionality<TSupported extends MixinName[], TBase extends MinimalExtensionConstructor = MinimalExtensionConstructor> = TSupported extends [infer Head, ...infer Tail]\n  /** Use `extends` to enable typescript to infer desired characteristics */\n  ? Head extends keyof OptionalMixins ? Tail extends (keyof OptionalMixins)[] ? TBase extends MinimalExtensionConstructor\n  /** Accumalate the TBase parameter */\n  ? ExtensionWithFunctionality<Tail, ReturnType<OptionalMixins<TBase>[Head]>>\n  /** Return never as Head, Tail, and TBase should never not meet the above type requirements */\n  : never : never : never\n  /** Base case */\n  : TBase;\n\nexport type ExtensionIntanceWithFunctionality<TSupported extends MixinName[]> = InstanceType<ExtensionWithFunctionality<TSupported>>;","import { openUI } from \"$common/ui\";\nimport { MinimalExtensionConstructor } from \"../required\";\n\n/**\n * Mixin the ability for extensions to open up UI at-will\n * @param Ctor \n * @returns \n * @see https://www.typescriptlang.org/docs/handbook/mixins.html\n */\nexport default function <T extends MinimalExtensionConstructor>(Ctor: T) {\n  abstract class _ extends Ctor {\n\n    /**\n     * Open a UI in a modal window \n     * @param component The name of the svelte component / file to open (which should be stored within the same folder as your extension's `index.ts` file). \n     * You can optionally leave off the `.svelte` extension.\n     * @param label What to title the modal window that pops up (defaults to your extension's name if left blank)\n     */\n    openUI(component: string, label?: string) {\n      const { id, name, runtime } = this;\n      openUI(runtime, { id, name, component: component.replace(\".svelte\", \"\"), label });\n    }\n\n  }\n\n  return _;\n}\n","import Runtime from \"$scratch-vm/engine/runtime\";\nimport { AbstractConstructor, Environment, ExlcudeFirst } from \"$common/types\";\n\nexport type ExtensionConstructorParams = ConstructorParameters<typeof ConstructableExtension>;\nexport type CodeGenParams = ExlcudeFirst<ExtensionConstructorParams>;\nexport type ExtensionBaseConstructor = AbstractConstructor<ExtensionBase>;\n\nexport abstract class ConstructableExtension {\n  /**\n   * @summary This member function (or 'method') will be called when a user adds your extension via the Extensions Menu (i.e. when your extension is instantiated)\n   * @example\n   * // Initialize class field(s)\n   * private count: number;\n   *\n   * init() {\n   *  count = 0;\n   * }\n   * @example\n   * // Interact with environment's runtime\n   * init(env: Environment) {\n   *  env.runtime.emit(RuntimeEvent.ProjectStart);\n   * }\n   * @example\n   * // Nothing to initialize\n   * init() {}\n   * @description This function is intended to behave exactly like a constructor, used to initialize the state of your extension.\n   *\n   * The reason we use this function INSTEAD of a constructor is so that the base Extension class can manage the construction of this class.\n   * @param {Environment} env An object that allows your Extension to interact with the Scratch Environment. Currently is a little bare, but will be expanded soon.\n   * Can be ommitted if not needed.\n   *\n   * For Scratch developers: The `runtime` property on env is the same as the runtime passed to non-Typescript-Framework Extension constructors\n   */\n  abstract init(env: Environment): void;\n\n  protected internal_init() {\n    this.init({\n      runtime: this.runtime,\n      videoFeed: this.runtime.ioDevices?.video,\n      get extensionManager() { return this.runtime.getExtensionManager().provider; }\n    });\n  }\n\n  /**\n   *\n   * @param runtime The 'runtime' connected to the scratch-vm that enables your extension to interact with the scratch workspace\n   * @param name The name of this extension.\n   * @param id The ID of this extension.\n   * @param blockIconURI\n   */\n  constructor(readonly runtime: Runtime, readonly name: string, readonly id: string, readonly blockIconURI: string) {\n  }\n}\n\nexport const extensionsMap = new Map<string, ExtensionBase>();\n\nexport abstract class ExtensionBase extends ConstructableExtension {\n  constructor(FORBIDDEN: never) {\n    // @ts-ignore\n    super(...arguments);\n    extensionsMap.set(this.id, this);\n  }\n}","import { MenuThatAcceptsReporters, DynamicMenuThatAcceptsReporters, Menu, MenuItem, DynamicMenu, ExtensionMenuMetadata, ExtensionArgumentMetadata } from \"$common/types\";\nimport { isFunction, isPrimitive } from \"$common/utils\";\n\nconst reporterItemsKey: keyof MenuThatAcceptsReporters<any> = \"items\";\nconst reporterItemsGetterKey: keyof DynamicMenuThatAcceptsReporters<any> = \"getItems\";\n\nexport const menuProbe = {\n  isSimpleStatic: (menu: Menu<any>): menu is any[] | MenuItem<any>[] => Array.isArray(menu),\n  isSimpleDynamic: (menu: Menu<any>): menu is DynamicMenu<any> => isFunction(menu),\n  isStaticWithReporters: (menu: Menu<any>): menu is MenuThatAcceptsReporters<any> => reporterItemsKey in menu,\n  isDynamicWithReporters: (menu: Menu<any>): menu is DynamicMenuThatAcceptsReporters<any> => reporterItemsGetterKey in menu,\n}\n\nexport const getMenuName = (index: number) => `${index}`;\n\nexport const convertMenuItemsToString = (item: any | MenuItem<any>) =>\n  isPrimitive(item) ? `${item}` : { ...item, value: `${item.value}` };\n\nexport const asStaticMenu = (items: MenuItem<any>[], acceptReporters: boolean) => ({\n  acceptReporters,\n  items: items\n    .map(item => item /**TODO figure out how to format */)\n    .map(convertMenuItemsToString)\n} satisfies ExtensionMenuMetadata);\n\nexport const addOptionsAndGetMenuName = (options: Menu<any>, menus: Menu<any>[],) => {\n  const alreadyAddedIndex = menus.indexOf(options);\n  const menuIndex = alreadyAddedIndex >= 0 ? alreadyAddedIndex : menus.push(options) - 1;\n  return `${getMenuName(menuIndex)}`;\n}\n\nexport const setMenu = (entry: ExtensionArgumentMetadata, options: Menu<any>, menus: Menu<any>[]) =>\n  options ? entry.menu = addOptionsAndGetMenuName(options, menus) : null;","import { BlockMetadata, BlockOperation } from \"$common/types\";\nimport { isFunction } from \"$common/utils\";\n\nexport const format = (text: string, identifier: string, description: string): string => {\n  return text; // make use of formatMessage in the future\n}\n\nexport type BlockGetter<This, Fn extends BlockOperation> = (this: This, self: This) => BlockMetadata<Fn>;\nexport type BlockDefinition<T, Fn extends BlockOperation> = BlockMetadata<Fn> | BlockGetter<T, Fn>;\n\nexport const isBlockGetter = <T, Fn extends BlockOperation>(details: BlockDefinition<any, Fn>): details is BlockGetter<T, Fn> => isFunction(details);\n\nexport const getButtonID = (id: string, opcode: string) => `${id}_${opcode}`;\n\nexport const extractArgNamesFromText = (text: string): string[] => {\n  const textAndNumbersInBrackets = /\\[([A-Za-z0-9]+)\\]/gm;\n  const argNames: string[] = [];\n  for (const [_, result] of text.matchAll(textAndNumbersInBrackets)) {\n    argNames.push(result);\n  }\n  return argNames;\n}","import { Argument, DynamicMenuThatAcceptsReporters, Menu, MenuThatAcceptsReporters, VerboseArgument } from \"$common/types\";\nimport { isPrimitive, identity } from \"$common/utils\";\n\nexport type Handler = (MenuThatAcceptsReporters<any>['handler']);\nconst isVerbose = (arg: Argument<any>): arg is VerboseArgument<any> => !isPrimitive(arg);\nconst handlerKey: keyof MenuThatAcceptsReporters<any> = 'handler';\nconst hasHandler = (options: Menu<any>): options is MenuThatAcceptsReporters<any> | DynamicMenuThatAcceptsReporters<any> => options && handlerKey in options;\n\nexport const extractHandlers = (args: Argument<any>[]): Handler[] => args.map(element => {\n  if (!isVerbose(element)) return identity;\n  const { options } = element;\n  if (!hasHandler(options)) return identity;\n  return options.handler;\n});","import { Argument, ArgumentType, BlockMetadata, BlockOperation, ExtensionArgumentMetadata, Menu, MultipleArgsBlock, OneArgBlock, ValidKey, ValueOf, VerboseArgument } from \"$common/types\";\nimport { assertSameLength, isPrimitive, isString } from \"$common/utils\";\nimport { extractHandlers } from \"./handlers\";\nimport { setMenu } from \"./menus\";\nimport { format } from \"./util\";\n\nexport const getArgName = (index: number) => `${index}`;\n\nconst getArgumentType = <T>(arg: Argument<T>): ValueOf<typeof ArgumentType> =>\n  isPrimitive(arg) ? arg as ValueOf<typeof ArgumentType> : (arg as VerboseArgument<T>).type;\n\n/**\n * Extract an array of args tied to a block \n * @param block \n * @returns An array of 0, 1, or 2+ args\n */\nexport const extractArgs = (block: BlockMetadata<BlockOperation>) => {\n  const argKey: ValidKey<OneArgBlock> = \"arg\";\n  const argsKey: ValidKey<MultipleArgsBlock> = \"args\";\n  if (argKey in block && block[argKey]) return [(block as OneArgBlock).arg];\n  if (argsKey in block && (block[argsKey]?.length ?? 0) > 0) return (block as MultipleArgsBlock).args;\n  return [];\n}\n\n/**\n * Combine arguments' type, name, and handler information into a single structure\n * @param args \n * @param names \n * @returns \n */\nexport const zipArgs = (args: Argument<any>[], names?: string[]) => {\n  const types = args.map(getArgumentType);\n  const handlers = extractHandlers(args);\n  names ??= types.map((_, index) => getArgName(index));\n  assertSameLength(types, handlers, names);\n  return types.map((type, index) => ({ type, name: names[index], handler: handlers[index] }));\n}\n\nexport const convertToArgumentInfo = (opcode: string, args: Argument<any>[], menus: Menu<any>[]) => {\n  if (!args || args.length === 0) return undefined;\n\n  return Object.fromEntries(\n    args\n      .map((element, index) => {\n        const entry = {} as ExtensionArgumentMetadata;\n        entry.type = getArgumentType(element);\n\n        if (isPrimitive(element)) return entry;\n\n        const { defaultValue, options } = element as VerboseArgument<any>;\n\n        setDefaultValue(entry, opcode, index, defaultValue);\n        setMenu(entry, options, menus);\n\n        return entry;\n      })\n      .reduce(\n        (accumulation, entry, index) => accumulation.set(getArgName(index), entry),\n        new Map<string, ExtensionArgumentMetadata>\n      )\n  );\n}\n\nconst getArgTranslationID = (blockname: string, index: number) => `${blockname}-arg${index}-default`;\n\nconst getDefaultValue = (defaultValue: any, opcode: string, index: number) => isString(defaultValue)\n  ? format(defaultValue, getArgTranslationID(opcode, index), `Default value for arg ${index + 1} of ${opcode} block`)\n  : defaultValue;\n\nconst setDefaultValue = (entry: ExtensionArgumentMetadata, opcode: string, index: number, defaultValue: any,) => {\n  if (defaultValue === undefined) return;\n  entry.defaultValue = getDefaultValue(defaultValue, opcode, index)\n}","import { AnyBlock, OneArgBlock, MultipleArgsBlock, Argument } from \"$common/types\";\nimport { isString } from \"$common/utils\";\nimport { getArgName } from \"./args\";\nimport { format } from \"./util\";\n\nconst isDynamicText = (text: AnyBlock[\"text\"]): text is (OneArgBlock[\"text\"] | MultipleArgsBlock[\"text\"]) => !isString(text);\n\nexport const convertToDisplayText = (opcode: string, text: AnyBlock[\"text\"], args: Argument<any>[]) => {\n  if (!args || args.length === 0) return text as string;\n\n  if (!isDynamicText(text)) return format(text, opcode, `Block text for '${opcode}'`);\n\n  const textFunc: (...args: any[]) => string = text;\n  const argPlaceholders = args.map((_, index) => `[${getArgName(index)}]`);\n  return format(textFunc(...argPlaceholders), opcode, `Block text for '${opcode}'`);\n}","import { castToType } from \"$common/cast\";\nimport CustomArgumentManager from \"$common/customArguments/CustomArgumentManager\";\nimport { ArgumentType, BlockType } from \"$common/types/enums\";\nimport { BlockOperation, ValueOf, Menu, ExtensionMetadata, ExtensionBlockMetadata, ExtensionMenuMetadata, DynamicMenu, BlockMetadata, } from \"$common/types\";\nimport { registerButtonCallback } from \"$common/ui\";\nimport { isString, typesafeCall, } from \"$common/utils\";\nimport type BlockUtility from \"$root/packages/scratch-vm/src/engine/block-utility\";\nimport { menuProbe, asStaticMenu, getMenuName, convertMenuItemsToString } from \"./menus\";\nimport { Handler } from \"./handlers\";\nimport { BlockDefinition, getButtonID, isBlockGetter } from \"./util\";\nimport { convertToArgumentInfo, extractArgs, zipArgs } from \"./args\";\nimport { convertToDisplayText } from \"./text\";\nimport { CustomizableExtensionConstructor, MinimalExtensionInstance, } from \"..\";\nimport { ExtensionIntanceWithFunctionality } from \"../..\";\n\nexport const getImplementationName = (opcode: string) => `internal_${opcode}`;\n\n/**\n * Wraps a blocks operation so that the arguments passed from Scratch are first extracted and then passed as indices in a parameter array.\n * @param _this What will be bound to the 'this' context of the underlying operation\n * @param operation The operation (function) to wrap\n * @param args The args that must be parsed before being passed to the underlying operation \n * @returns \n */\nexport const wrapOperation = <T extends MinimalExtensionInstance>(\n  _this: T,\n  operation: BlockOperation,\n  args: { name: string, type: ValueOf<typeof ArgumentType>, handler: Handler }[]\n) => _this.supports(\"customArguments\")\n    ? function (this: ExtensionIntanceWithFunctionality<[\"customArguments\"]>, argsFromScratch: Record<string, any>, blockUtility: BlockUtility) {\n      const castedArguments = args.map(({ name, type, handler }) => {\n        const param = argsFromScratch[name];\n        switch (type) {\n          case ArgumentType.Custom:\n            const isIdentifier = isString(param) && CustomArgumentManager.IsIdentifier(param);\n            const value = isIdentifier ? this.customArgumentManager.getEntry(param).value : param;\n            return handler.call(_this, value);\n          default:\n            return castToType(type, handler.call(_this, param));\n        }\n      });\n      return operation.call(_this, ...castedArguments, blockUtility);\n    }\n    : function (this: T, argsFromScratch: Record<string, any>, blockUtility: BlockUtility) {\n      const castedArguments = args.map(({ name, type, handler }) =>\n        castToType(type, handler.call(_this, argsFromScratch[name]))\n      );\n      return operation.call(_this, ...castedArguments, blockUtility);\n    }\n\n/**\n * Mixin the ability for extension's to:\n * - build up block definitions incrementally (through the use of `pushBlock`)\n * - implement a valid `getInfo` method that interacts with the scratch-vm correctly  \n * @param Ctor \n * @returns \n * @see https://www.typescriptlang.org/docs/handbook/mixins.html\n */\nexport default function (Ctor: CustomizableExtensionConstructor) {\n  type BlockEntry = { definition: BlockDefinition<_, BlockOperation>, operation: BlockOperation };\n  type BlockMap = Map<string, BlockEntry>;\n  abstract class _ extends Ctor {\n    private readonly blockMap: BlockMap = new Map();\n\n    private readonly menus: Menu<any>[] = [];\n    private info: ExtensionMetadata;\n\n    /**\n     * Add a block \n     * @param opcode \n     * @param definition \n     * @param operation \n     */\n    pushBlock<Fn extends BlockOperation>(opcode: string, definition: BlockDefinition<any, Fn>, operation: BlockOperation) {\n      if (this.blockMap.has(opcode)) throw new Error(`Attempt to push block with opcode ${opcode}, but it was already set. This is assumed to be a mistake.`)\n      this.blockMap.set(opcode, { definition, operation });\n    }\n\n    protected getInfo(): ExtensionMetadata {\n      if (!this.info) {\n        const { id, name, blockIconURI } = this;\n        const blocks = Array.from(this.blockMap.entries()).map(entry => this.convertToInfo(entry));\n        this.info = { id, blocks, name, blockIconURI, menus: this.collectMenus() };\n      }\n      return this.info;\n    }\n\n    private convertToInfo(details: [opcode: string, entry: BlockEntry]) {\n      const [opcode, entry] = details;\n      const { definition, operation } = entry;\n\n      // Utilize explicit casting to appease test framework's typechecker\n      const block = isBlockGetter(definition)\n        ? typesafeCall(definition, this, this) as BlockMetadata<BlockOperation>\n        : definition as BlockMetadata<BlockOperation>;\n\n      const { type, text } = block;\n\n      const args = extractArgs(block);\n\n      const { id, runtime, menus } = this;\n\n      const displayText = convertToDisplayText(opcode, text, args);\n      const argumentsInfo = convertToArgumentInfo(opcode, args, menus);\n\n      const info: ExtensionBlockMetadata = { opcode, text: displayText, blockType: type, arguments: argumentsInfo };\n\n      if (type === BlockType.Button) {\n        const buttonID = getButtonID(id, opcode);\n        registerButtonCallback(runtime, buttonID, operation.bind(this));\n        info.func = buttonID;\n      } else {\n        const implementationName = getImplementationName(opcode);\n        this[implementationName] = wrapOperation(this as MinimalExtensionInstance, operation, zipArgs(args));\n      }\n\n      return info;\n    }\n\n    private collectMenus() {\n      const { isSimpleStatic, isSimpleDynamic, isStaticWithReporters, isDynamicWithReporters } = menuProbe;\n      return Object.fromEntries(\n        this.menus\n          .map((menu, index) => {\n            if (isSimpleStatic(menu)) return asStaticMenu(menu, false);\n            if (isSimpleDynamic(menu)) return this.registerDynamicMenu(menu, false, index);\n            if (isStaticWithReporters(menu)) return asStaticMenu(menu.items, true);\n            if (isDynamicWithReporters(menu)) return this.registerDynamicMenu(menu.getItems, true, index);\n            throw new Error(\"Unable to process menu\");\n          })\n          .reduce((map, menu, index) => map.set(getMenuName(index), menu), new Map<string, ExtensionMenuMetadata>())\n      );\n    }\n\n    private registerDynamicMenu(getItems: DynamicMenu<any>, acceptReporters: boolean, menuIndex: number) {\n      const key = `internal_dynamic_${menuIndex}`; // legacy support?\n      this[key] = () => getItems.call(this).map(item => item).map(convertMenuItemsToString);\n      return { acceptReporters, items: key } satisfies ExtensionMenuMetadata\n    }\n  }\n\n  return _;\n}","import { ExtensionWithFunctionality, MixinName, optionalMixins } from \"./mixins/index\";\nimport { MinimalExtensionConstructor } from \"./mixins/required\";\nimport { ExtensionBase } from \"./ExtensionBase\";\nimport scratchInfo from \"./mixins/required/scratchInfo\";\nimport supported from \"./mixins/required/supported\";\nimport { ExtensionMenuDisplayDetails, Writeable } from \"$common/types\";\n\nconst registerDetailsIdentifier = \"__registerMenuDetials\";\n\nconst tryAnnounceDetails = (details: ExtensionMenuDisplayDetails) => {\n  const isNode = typeof window === 'undefined';\n  if (isNode) global?.[registerDetailsIdentifier]?.(details);\n}\n\nexport const extension = <const TSupported extends readonly MixinName[]>(\n  details: ExtensionMenuDisplayDetails,\n  ...addOns: Writeable<TSupported>\n): ExtensionWithFunctionality<[...TSupported]> & typeof ExtensionBase => {\n  tryAnnounceDetails(details);\n\n  const Base: MinimalExtensionConstructor = scratchInfo(supported(ExtensionBase, addOns));\n\n  if (!addOns) return Base as ExtensionWithFunctionality<[...TSupported]>;\n\n  if (addOns.includes(\"customArguments\")) addOns.push(\"customSaveData\");\n\n  return Array.from(new Set(addOns))\n    .sort() // Ensure same order always\n    .map(key => optionalMixins[key])\n    .reduce(\n      (acc, mixin) => mixin(acc),\n      Base as ExtensionWithFunctionality<[...TSupported]>\n    )\n}\n\nexport const registerExtensionDefinitionCallback = (callback: (details: ExtensionMenuDisplayDetails) => void) =>\n  global[registerDetailsIdentifier] = (details) => {\n    if (!details) return;\n    callback(details);\n    delete global[registerDetailsIdentifier];\n  };\n\nexport type ExtensionConstructor<TSupported extends MixinName[] = []> = ReturnType<typeof extension<TSupported>>;\nexport type ExtensionInstance<TSupported extends MixinName[] = []> = InstanceType<ExtensionConstructor<TSupported>>;","import { ExtensionIntanceWithFunctionality, MixinName, optionalMixins } from \"..\";\nimport { ExtensionBaseConstructor } from \"../../ExtensionBase\";\n\n/**\n * Mixin the ability for extensions to check which optional mixins they support\n * @param Ctor \n * @returns \n * @see https://www.typescriptlang.org/docs/handbook/mixins.html\n */\nexport default function (Ctor: ExtensionBaseConstructor, supported: string[]) {\n  abstract class _ extends Ctor {\n\n    supports<const TKey extends MixinName>(mixinName: TKey): this is typeof this & ExtensionIntanceWithFunctionality<[TKey]> {\n      return supported.includes(mixinName);\n    }\n\n  }\n\n  return _;\n}","import { ExtensionMenuDisplayDetails, ExtensionBlocks, BlockDefinitions, Translations } from \"$common/types\";\nimport { isFunction } from \"$common/utils\";\nimport { extension } from \"./index\";\nimport { getImplementationName } from \"./mixins/required/scratchInfo/index\";\n\nexport const getAlternativeOpcodeName = (opcode: string) => `__block_${opcode}`;\n\n/**\n * @summary Base class for all extensions implemented via the Typescript Extension Framework.\n * @example\n * class MyExtension extends Extension<\n *  { // Display details\n *    name: \"My Extension\",\n *    description: \"This is my extension\",\n *    iconURL: \"example.png\",\n *    insetIconURL: \"example.svg\"\n *  },\n *  { // Blocks\n *    myBlock: (someArg: number) => void;\n *  }\n * > {\n *  init(env: Environment): { ... };\n *  defineBlocks(): MyExtension[\"BlockDefinitions\"] { return ... }\n * }\n * @description Extension developers will create Typescript classes that `extend` (or 'inherit', or 'implement') this `Extension` class.\n *\n * In order to `extend` this class, you must first specify 2 generic type arguments, which effectively describe what kind of Extension you're implementing.\n *\n * More specifically, the 2 generic type arguments describe how this extension is presented to the user (by specifyng the details displayed in the Extensions Menu),\n * and what this Extension actually does (by specifying the blocks it will define).\n *\n * By declaring that we're extending an `Extension` with our specific generic type arguments,\n * Typescript holds us accountable to implement exactly what we said we would (all in order to make a working extension).\n *\n * This includes:\n * * Defining an `init` method, which is used INSTEAD of a constructor\n * * Defining a `defineBlocks` method that does just that: defines this extension's blocks\n * @template MenuDetails How the extension should display in the extensions menu\n * @template Blocks What kind of blocks this extension implements\n * @link https://www.typescriptlang.org/docs/handbook/2/generics.html Learn more about generics!\n */\n\nexport abstract class Extension<\n  MenuDetails extends ExtensionMenuDisplayDetails,\n  Blocks extends ExtensionBlocks\n> extends extension(undefined, \"ui\", \"customSaveData\", \"customArguments\") {\n\n  readonly BlockFunctions: Blocks;\n  readonly BlockDefinitions: BlockDefinitions<typeof this>;\n  readonly Translations: Translations<typeof this>;\n\n  /**\n   * @summary Extension member method that returns an object defining all blocks that belong to the extension.\n   * @description Every block your extension implements (defined by the second generic argument of the Extension class), will have an entry in the object return by this function.\n   * Each entry will either be an object or a function that returns an object that provides the:\n   * - type: the type of block\n   * - text: what is displayed on the block\n   * - arg or args: the arguments the block accepts\n   * - operation: the function that is called when the blocked is executed\n   * @example\n   * // Returning an object with two block definition function for 'someBlock'\n   * defineBlocks(): ExampleExtension[\"BlockDefinitions\"] {\n   *  return {\n   *    // Using object syntax\n   *    someBlock: {\n   *      type: BlockType.Reporter,\n   *      arg: ArgumentType.String,\n   *      text: (argument) => `Some text about ${argument}`,\n   *      operation: (argument) => {\n   *        // do something\n   *      }\n   *    },\n   *    // Using arrow function syntax\n   *    someBlock: (self: MyExtension) => ({\n   *      type: BlockType.Reporter,\n   *      arg: ArgumentType.String,\n   *      text: (argument) => `Some text about ${argument}`,\n   *      operation: (argument) => {\n   *        // do something\n   *      }\n   *    }),\n   *    // Using method function syntax\n   *    someOtherBlock(self: MyExtension) {\n   *      const type = BlockType.Reporter;\n   *      const arg = ArgumentType.String;\n   *      return {\n   *        arg, type,\n   *        text: (argument) => `Some text about ${argument}`,\n   *        operation: (argument) => {\n   *          // do something\n   *        }\n   *      }\n   *    }\n   *  }\n   * }\n   * @see BlockDefinitions\n   * @returns {BlockDefinitions<Blocks>} An object defining 'block definition' objects / functions for each block associated with this Extension.\n   */\n  abstract defineBlocks(): BlockDefinitions<Extension<MenuDetails, Blocks>>;\n\n  protected internal_init(): void {\n    super.internal_init();\n    const blocks = this.defineBlocks();\n    const self = this;\n    for (const opcode in blocks) {\n      const block = blocks[opcode];\n      const validOpcode = opcode in this ? getAlternativeOpcodeName(opcode) : opcode;\n      const { operation, text, arg, args, type } = isFunction(block) ? block.call(this, this) : block;;\n      this.pushBlock(validOpcode, { text, arg, args, type }, operation);\n      const internalFuncName = getImplementationName(validOpcode);\n      (this as any)[validOpcode] = function () { return self[internalFuncName].call(self, ...arguments); };\n    }\n  }\n}\n","import type BlockUtility from \"$scratch-vm/engine/block-utility\";\nimport { TypedMethodDecorator } from \".\";\nimport { BlockType } from \"$common/types/enums\";\nimport { BlockMetadata } from \"$common/types\";\nimport { getImplementationName } from \"../mixins/required/scratchInfo/index\";\nimport { ExtensionInstance } from \"..\";\n\ntype BlockFromArgsAndReturn<Args extends any[], Return> = Args extends [...infer R extends any[], BlockUtility]\n  ? BlockMetadata<(...args: R) => Return> : BlockMetadata<(...args: Args) => Return>;\n\nexport function block<\n  This extends ExtensionInstance,\n  const Args extends any[],\n  const Return,\n  const Fn extends (...args: Args) => Return,\n  BlockFunction extends BlockMetadata<Fn>\n>\n  (blockInfoOrGetter: BlockFunction | ((this: This, self: This) => BlockFunction)): TypedMethodDecorator<This, Args, Return, (...args: Args) => Return> {\n\n  return function (this: This, target: (this: This, ...args: Args) => Return, context: ClassMethodDecoratorContext<This, Fn>) {\n    const opcode = target.name;\n    const internalFuncName = getImplementationName(opcode);\n    context.addInitializer(function () { this.pushBlock(opcode, blockInfoOrGetter, target) });\n    return (function () { return this[internalFuncName].call(this, ...arguments) }) as Function as Fn;\n  };\n}\n\nexport function buttonBlock<\n  This extends ExtensionInstance,\n>(text: string): TypedMethodDecorator<This, [], void, () => void> {\n  type Args = [] | [BlockUtility];\n  type Return = void;\n  type Fn = (...args: Args) => Return;\n\n  return block<This, Args, Return, Fn, BlockFromArgsAndReturn<Args, Return>>({\n    text,\n    type: BlockType.Button\n  });\n}","import { ExtensionInstance } from \"$common/extension\";\nimport { AbstractConstructor, ExtensionArgumentMetadata, ExtensionBlockMetadata, ExtensionMenuMetadata, ExtensionMetadata } from \"$common/types\";\nimport { isString, set } from \"$common/utils\";\nimport { isDynamicMenu, parseText } from \"../../decorators/legacySupport/index\";\nimport { getImplementationName, wrapOperation } from \"../required/scratchInfo/index\";\n\ntype WrappedOperation = ReturnType<typeof wrapOperation>;\ntype WrappedOperationParams = Parameters<WrappedOperation>;\ntype WithLegacySupport = InstanceType<ReturnType<typeof mixin>>;\ntype BlockMap = Map<string, Omit<ExtensionBlockMetadata, \"opcode\"> & { index: number }>;\n\nexport const isLegacy = (extension: ExtensionInstance | WithLegacySupport): extension is WithLegacySupport => {\n  const key: keyof WithLegacySupport = \"__isLegacy\";\n  return key in extension;\n}\n\nconst validBlock = (legacyBlock: string | ExtensionBlockMetadata, blockMap: BlockMap): legacyBlock is ExtensionBlockMetadata => {\n  if (isString(legacyBlock)) throw new Error(\"Block was unexpectedly a string: \" + legacyBlock);\n  if (!blockMap.has(legacyBlock.opcode)) {\n    console.error(`Could not find legacy opcode ${legacyBlock.opcode} within currently defined blocks`);\n    return false;\n  };\n  return true;\n}\n\nconst validArg = (pair: { legacy: ExtensionArgumentMetadata, modern: ExtensionArgumentMetadata }): typeof pair => {\n  if (typeof pair.legacy.menu !== typeof pair.modern.menu) throw new Error(\"Menus don't match\")\n  return pair;\n}\n\nconst getDynamicMenuName = (menu: ExtensionMenuMetadata): string => {\n  if (isDynamicMenu(menu)) return menu;\n  if (isDynamicMenu(menu.items)) return menu.items;\n  throw new Error(\"Menu is not dynamic: \" + menu);\n}\n\n/**\n * Mixin the ability for extensions to make use of 'legacy' `getInfo` json, \n * so that extensions ported to the framework can support old, serialized projects\n * @param Ctor \n * @param legacyInfo \n * @returns \n */\nexport default function mixin<T extends AbstractConstructor<ExtensionInstance>>(Ctor: T, legacyInfo: ExtensionMetadata) {\n  abstract class _ extends Ctor {\n    private validatedInfo: ExtensionMetadata;\n\n    public __isLegacy = true;\n    public orderArgumentNamesByBlock: Map<string, string[]> = new Map();\n\n    protected getInfo(): ExtensionMetadata {\n      if (!this.validatedInfo) {\n        const info = super.getInfo();\n        this.validatedInfo = this.validateAndAttach(info);\n      }\n\n      return this.validatedInfo;\n    }\n\n    private getArgNames = (legacyBlock: ExtensionBlockMetadata) => {\n      const { opcode } = legacyBlock;\n\n      if (!this.orderArgumentNamesByBlock.has(opcode)) {\n        const { orderedNames } = parseText(legacyBlock);\n        this.orderArgumentNamesByBlock.set(opcode, orderedNames);\n      }\n\n      return this.orderArgumentNamesByBlock.get(opcode);\n    }\n\n    private validateAndAttach({ id, blocks, menus, ...metaData }: ExtensionMetadata): ExtensionMetadata {\n      const { id: legacyID, blocks: legacyBlocks, menus: legacyMenus } = legacyInfo;\n      const mutableBlocks = [...blocks as ExtensionBlockMetadata[]];\n\n      if (id !== legacyID) throw new Error(`ID mismatch! Legacy id: ${legacyID} vs. current id: ${id}`);\n\n      const blockMap = mutableBlocks.reduce(\n        (map, { opcode, ...block }, index) => map.set(opcode, { ...block, index }),\n        new Map() as BlockMap\n      );\n\n      const self = this;\n\n      const updates = legacyBlocks\n        .map(legacyBlock => validBlock(legacyBlock, blockMap) ? legacyBlock : undefined)\n        .filter(Boolean)\n        .map(legacyBlock => {\n          const { opcode, arguments: legacyArgs } = legacyBlock;\n          const { index, arguments: modernArgs } = blockMap.get(opcode);\n          const argNames = this.getArgNames(legacyBlock);\n\n          if (!argNames) return { replaceAt: { index, block: legacyBlock } };\n\n          const remapper = (args: Record<string, any>) => argNames.reduce(\n            (remap, current, index) => set(remap, index, args[current]),\n            {} as Record<number, any>);\n\n          const implementation: WrappedOperation = this[getImplementationName(opcode)];\n\n          this[opcode] = (\n            (...[args, util]: WrappedOperationParams) => implementation.call(self, remapper(args), util)\n          ).bind(self);\n\n          const menuUpdates = argNames\n            .map((legacyName, index) => ({ legacy: legacyArgs[legacyName], modern: modernArgs[index] }))\n            .map(validArg)\n            .map(({ legacy: { menu: legacyName }, modern: { menu: modernName } }) => ({ legacyName, modernName }))\n            .filter(menus => menus.legacyName && menus.modernName)\n            .map(({ legacyName, modernName }) =>\n              ({ legacyName, modernName, legacy: legacyMenus[legacyName], modern: menus[modernName] }))\n            .map(({ legacy, modern, legacyName, modernName }) => !isDynamicMenu(legacy) && !isDynamicMenu(legacy.items)\n              ? { type: \"static\" as const, legacy: legacyName, modern: modernName }\n              : { type: \"dynamic\" as const, legacy: legacyName, modern: modernName, methods: { legacy: getDynamicMenuName(legacy), modern: getDynamicMenuName(modern) } }\n            );\n\n          return { menuUpdates, replaceAt: { index, block: legacyBlock } };\n        });\n\n      updates.forEach(({ replaceAt: { index, block } }) => mutableBlocks[index] = block);\n\n      updates\n        .map(({ menuUpdates }) => menuUpdates)\n        .flat()\n        .filter(Boolean)\n        .map(menu => {\n          const { legacy } = menu;\n          if (legacy in menus) throw new Error(`Somehow, there was already a menu called ${legacy}, which will cause issues in the next step.`);\n          return menu;\n        })\n        .forEach(({ type, legacy, methods }) => {\n          menus[legacy] = legacyMenus[legacy];\n          if (type === \"dynamic\") self[methods.legacy] = () => self[methods.modern]();\n        });\n\n      return {\n        id, blocks: mutableBlocks, menus, ...metaData\n      };\n    }\n  }\n  return _\n}","import legacySupport from \"$common/extension/mixins/optional/legacySupport\";\nimport { ExtensionMetadata, ExtensionBlockMetadata, ExtensionMenuItems, BlockOperation, Argument, ExtensionMenuMetadata, ExtensionDynamicMenu, Menu, DynamicMenuThatAcceptsReporters, BaseGenericExtension, VerboseArgument, DefineBlock, AbstractConstructor, NonAbstractConstructor } from \"$common/types\";\nimport { isFunction, isString } from \"$common/utils\";\nimport { block } from \"../blocks\";\nimport { ArgumentMethods, BlockDecorators, BlockDefinitions, BlockEntry, BlockMap, LegacyExtension, LegacyExtensionDecorator, LegacySupport, ObjectOrGetter } from \"./types\";\nimport { ExtensionInstance } from \"$common/extension\";\n\n/**\n * \n * @param info \n * @param flags \n * @returns \n */\nexport const legacy = <\n  const TInfo extends ExtensionMetadata,\n  TFlags extends { incrementalDevelopment: boolean } = undefined,\n  const TStrict extends boolean = TFlags extends { incrementalDevelopment: false } | undefined ? true : false\n>(info: TInfo, flags?: TFlags): LegacySupport<TInfo, TStrict> => ({\n\n  for<TExtension extends LegacyExtension<TInfo, TStrict>>() {\n\n    const legacyExtension = (): LegacyExtensionDecorator<TExtension> => (value, context) => {\n      abstract class LegacySupport extends legacySupport(value as AbstractConstructor<ExtensionInstance>, info) {\n        readonly originalClassName = context.name;\n      };\n\n      return LegacySupport as AbstractConstructor<ExtensionInstance> as NonAbstractConstructor<TExtension>;\n    };\n\n    const blockMethodBroker = getBlockMetaData(info).map(([opcode, entry]) => {\n      const key = opcode as keyof BlockDefinitions<TInfo, TExtension>;\n      return {\n        key,\n        definer: createBlockDefiner<TExtension & BaseGenericExtension>(entry),\n        decorator: createBlockDecorator<TExtension & ExtensionInstance>(entry)\n      }\n    });\n\n    const legacyDefinition = blockMethodBroker.reduce((definitions, { key, definer }) => {\n      definitions[key] = definer as any; // TODO: See if we can get this type to work\n      return definitions;\n    }, {} as BlockDefinitions<TInfo, TExtension>);\n\n\n    const legacyBlock = blockMethodBroker.reduce((decorators, { key, decorator }) => {\n      decorators[key] = decorator as any; // TODO: See if we can get this type to work\n      return decorators;\n    }, {} as BlockDecorators<TInfo>);\n\n    const throwTypeOnlyError = () => {\n      throw new Error(\"This property is not meant to be accessed, and is instead solely for type inference / documentation purposes.\")\n    };\n\n    return {\n      legacyExtension, legacyDefinition, legacyBlock,\n      ReservedNames: {\n        get Menus(): any { return throwTypeOnlyError() },\n        get Blocks(): any { return throwTypeOnlyError() },\n        get ArgumentNamesByBlock(): any { return throwTypeOnlyError() },\n      },\n    };\n  }\n})\n\n/**\n * Creates a function that returns a function that acts as a block definition for the 'entry' block metadata.\n * @param entry \n * @returns \n */\nconst createBlockDefiner = <TExtension extends ExtensionInstance & BaseGenericExtension>(entry: BlockEntry) =>\n  (objOrGetter: ObjectOrGetter<{ opertation: BlockOperation } & Partial<ArgumentMethods<any, any>>, TExtension>) =>\n    ((extension: TExtension) => {\n      const { operation, argumentMethods } = isFunction(objOrGetter) ? objOrGetter.call(extension, extension) : objOrGetter;\n      if (argumentMethods) attachArgumentMethods(entry, argumentMethods, extension);\n      return { ...entry, operation }\n    }) as DefineBlock<TExtension, BlockOperation>;\n\n/**\n * Creates a function that returns a decorator function that wraps the data contained within 'entry'.\n * @param entry \n * @returns \n */\nconst createBlockDecorator = <TExtension extends ExtensionInstance>(entry: BlockEntry) =>\n  (...params: ([ObjectOrGetter<ArgumentMethods<any, any>, TExtension>] | [])) => {\n    if (params.length === 0 || !params[0]) return block<TExtension, any[], any, any, any>(entry);\n    const objOrGetter = params[0];\n    return block<TExtension, any[], any, any, any>((extension: TExtension) => {\n      const { argumentMethods } = isFunction(objOrGetter)\n        ? objOrGetter.call(extension, extension) : objOrGetter;\n\n      attachArgumentMethods(entry, argumentMethods, extension);\n      return entry;\n    });\n  }\n\nconst attachArgumentMethods = (\n  block: ReturnType<BlockMap[\"get\"]>,\n  argumentMethods: Record<number, Partial<DynamicMenuThatAcceptsReporters<unknown>>>,\n  extension: ExtensionInstance\n) => {\n  const args = block.args ? block.args : block.arg ? [block.arg] : [];\n\n  Object.entries(argumentMethods)\n    .map(([indexKey, { handler, getItems }]) => {\n      const arg = args[parseInt(indexKey)] as VerboseArgument<any>;\n      return { arg, methods: { handler, getItems } }\n    })\n    .forEach(({ arg, methods }) =>\n      Object.entries(methods)\n        .filter(([_, method]) => method)\n        .map(([key, method]) => [key, method.bind(extension)])\n        .forEach(([key, method]) => tryUpdateKey(arg.options, key, method)));\n}\n\nconst tryUpdateKey = <T>(obj, key: string, value: T) => {\n  obj[key] = value;\n}\n\nconst asBlockMetaData = (block: ExtensionBlockMetadata | string) => {\n  if (isString(block)) throw new Error(`Block defined as string, unexpected! ${block}`)\n  return block as ExtensionBlockMetadata;\n}\n\nconst convertAndInsertBlock = (map: BlockMap, block: ExtensionBlockMetadata, metadata: ExtensionMetadata) => {\n  const { opcode, arguments: _arguments, blockType: type } = block;\n  const { text, orderedNames } = parseText(block);\n\n  if (!_arguments) return map.set(opcode, { type, text });\n\n  const args = Object.entries(_arguments ?? {})\n    .map(([name, { menu, ...rest }]) => ({ options: extractMenuOptions(metadata, menu), name, menu, ...rest }))\n    .sort(({ name: a }, { name: b }) => orderedNames.indexOf(a) < orderedNames.indexOf(b) ? -1 : 1)\n    .map(({ name, ...details }) => details satisfies Argument<any> as Argument<unknown>);\n\n  const { length } = args;\n  const argsEntry = length >= 2 ? { args: args as [Argument<unknown>] } : { arg: args[0] };\n\n  return map.set(opcode, { type, text, ...argsEntry });\n}\n\nconst getBlockMetaData = (metadata: ExtensionMetadata) => Array.from(\n  metadata.blocks\n    .map(asBlockMetaData)\n    .reduce((map, block) => convertAndInsertBlock(map, block, metadata), new Map() as BlockMap)\n    .entries()\n);\n\nexport const parseText = ({ arguments: _arguments, text }: ExtensionBlockMetadata) => {\n  const placeholder = \"Error: This should have been overridden by legacy support\";\n\n  if (!_arguments) return { orderedNames: null as null, text: placeholder };\n\n  const args = Object.keys(_arguments)\n    .map(name => ({ name, template: `[${name}]` }))\n    .sort(({ template: a }, { template: b }) => text.indexOf(a) < text.indexOf(b) ? -1 : 1);\n\n  return args.length === 0\n    ? { orderedNames: null as null, text: placeholder }\n    : { orderedNames: args.map(({ name }) => name), text: () => placeholder }\n}\n\nconst getItemsPlaceholder = { getItems: () => (\"Error: This should have been filled in.\" as any) };\nconst handlerPlaceholder = { handler: () => (\"Error: This should have been filled in.\" as any) };\n\nexport const isDynamicMenu = (menu: ExtensionMenuMetadata | ExtensionMenuItems[\"items\"]): menu is ExtensionDynamicMenu => isString(menu);\n\nconst extractMenuOptions = (data: ExtensionMetadata, menuName: string): Menu<any> => {\n  const menu = menuName ? data.menus[menuName] : undefined;\n\n  if (!menu) return undefined;\n  if (isDynamicMenu(menu)) return getItemsPlaceholder.getItems;\n\n  const { items, acceptReporters: acceptsReporters } = menu;\n\n  if (!isDynamicMenu(items)) return acceptsReporters ? { acceptsReporters, items: [...items], ...handlerPlaceholder } : [...items];\n\n  return acceptsReporters ? { acceptsReporters, ...handlerPlaceholder, ...getItemsPlaceholder } : getItemsPlaceholder.getItems;\n}"],"names":["ExtensionFramework","exports","BlockType","Boolean","Button","Command","Conditional","Event","Hat","Loop","Reporter","ArgumentType","Angle","Color","Number","String","Matrix","Note","Image","Custom","StageLayering","BackgroundLayer","VideoLayer","PenLayer","SpriteLayer","LayerGroups","Language","Azeri","Bahasa_Indonesia","Cymraeg","Dansk","Deutsch","Eesti","English","Euskara","Gaeilge","Galego","Hrvatski","isiZulu","Italiano","Kiswahili","Magyar","Nederlands","Norsk_Nynorsk","Polski","Rapa_Nui","Suomi","Svenska","LanguageKeys","Object","keys","async","untilObject","getter","delay","timeout","value","Promise","resolve","clearTimeout","setTimeout","isString","query","isFunction","prototype","toString","call","Function","isPrimitive","identity","x","untilExternalScriptLoaded","url","scriptLoaded","reject","script","document","createElement","onload","onerror","src","body","appendChild","typesafeCall","fn","_this","args","set","container","key","assertSameLength","collections","size","reduce","length","add","Set","Error","openUIEvent","registerButtonCallbackEvent","customArgumentFlag","customArgumentCheck","dropdownStateFlag","dropdownEntryFlag","initDropdownState","openDropdownState","closeDropdownState","openUI","runtime","details","emit","registerButtonCallback","buttonID","callback","on","CssVar","constructor","root","this","get","parts","join","primary","secondary","tertiary","transparent","light","ui","text","motion","red","sound","control","data","pen","error","extensions","drop","color","modalOverlay","white","whiteDim","whiteTransparent","blackTransparent","primaryTransparent","lightTansparent","highlight","validRegEx","RegExp","invalidRegEx","guards","split","reverse","guardsRegEx","replaceAll","current","desired","saveDataKey","RGB_BLACK","r","g","b","RGB_WHITE","static","decimal","hex","substr","a","replace","m","result","exec","parseInt","rgb","decimalToHex","rgbToDecimal","hexToRgb","hsv","h","s","Math","max","min","v","i","floor","f","p","q","t","rgb0","rgb1","fraction1","fraction0","Cast","isNaN","n","toLowerCase","toRgbColorObject","substring","decimalToRgb","toNumber","val","trim","v1","v2","n1","n2","isWhiteSpace","NaN","s1","s2","Infinity","indexOf","LIST_INVALID","LIST_ALL","index","acceptAll","random","cast","castToType","argumentType","parseFloat","JSON","parse","toMatrix","toFlag","matrixString","Array","fill","map","matrix","flag","row","push","CustomArgumentManager","Map","pending","clearPending","setPending","update","entry","id","GetIdentifier","insert","request","tryResolve","getCurrentEntries","from","entries","filter","_","getEntry","requiresSave","saveTo","obj","SaveKey","loadFrom","forEach","purgeStaleIDs","IsIdentifier","startsWith","IdentifierPrefix","Date","getTime","renderToDropdown","compononentConstructor","props","dropdownContainerClass","elements","getElementsByClassName","console","target","anchor","children","centerDropdownButton","style","margin","paddingLeft","paddingRight","textAlign","className","styleMod","assert","callingContext","DrowpdownOpen","DropdownClose","Init","optionalMixins","Ctor","makeCustomArgument","component","initial","acceptReportersHandler","handler","argumentManager","getItems","stringify","type","defaultValue","options","undefined","acceptsReports","customArgumentManager","getOrCreateCustomArgumentManager","arr","item","processCustomArgumentHack","getComponent","extensionID","initialID","currentEntry","prevID","setEntry","setter","extension","label","name","saveDataHandler","save","toSave","extensionIDs","supports","saveData","hooks","onSave","load","saved","onLoad","ConstructableExtension","internal_init","init","videoFeed","ioDevices","video","extensionManager","getExtensionManager","provider","blockIconURI","extensionsMap","ExtensionBase","FORBIDDEN","super","arguments","menuProbe","isSimpleStatic","menu","isArray","isSimpleDynamic","isStaticWithReporters","isDynamicWithReporters","getMenuName","convertMenuItemsToString","asStaticMenu","items","acceptReporters","setMenu","menus","alreadyAddedIndex","menuIndex","addOptionsAndGetMenuName","format","identifier","description","isBlockGetter","getButtonID","opcode","extractHandlers","element","hasHandler","getArgName","getArgumentType","arg","extractArgs","block","argsKey","zipArgs","names","types","handlers","convertToArgumentInfo","fromEntries","setDefaultValue","accumulation","getDefaultValue","convertToDisplayText","isDynamicText","textFunc","argPlaceholders","getImplementationName","wrapOperation","operation","argsFromScratch","blockUtility","castedArguments","param","registerDetailsIdentifier","addOns","window","global","tryAnnounceDetails","Base","supported","mixinName","includes","blockMap","pushBlock","definition","has","getInfo","info","blocks","convertToInfo","collectMenus","blockType","bind","func","registerDynamicMenu","sort","acc","mixin","getAlternativeOpcodeName","Extension","defineBlocks","self","validOpcode","internalFuncName","blockInfoOrGetter","context","addInitializer","validBlock","legacyBlock","validArg","pair","legacy","modern","getDynamicMenuName","isDynamicMenu","legacyInfo","__isLegacy","orderArgumentNamesByBlock","getArgNames","orderedNames","parseText","validatedInfo","validateAndAttach","metaData","legacyID","legacyBlocks","legacyMenus","mutableBlocks","updates","legacyArgs","modernArgs","argNames","replaceAt","implementation","util","remap","remapper","menuUpdates","legacyName","modernName","methods","flat","createBlockDefiner","objOrGetter","argumentMethods","attachArgumentMethods","createBlockDecorator","params","indexKey","method","tryUpdateKey","asBlockMetaData","getBlockMetaData","metadata","_arguments","rest","extractMenuOptions","argsEntry","convertAndInsertBlock","placeholder","template","getItemsPlaceholder","handlerPlaceholder","menuName","acceptsReporters","Branch","Exit","Enter","First","Second","Third","Fourth","Fifth","Sixth","Seventh","FrameworkID","RuntimeEvent","ScriptGlowOn","ScriptGlowOff","BlockGlowOn","BlockGlowOff","HasCloudDataUpdate","TurboModeOn","TurboModeOff","RecordingOn","RecordingOff","ProjectStart","ProjectRunStart","ProjectRunStop","ProjectStopAll","StopForTarget","VisualReport","ProjectLoaded","ProjectChanged","ToolboxExtensionsNeedUpdate","TargetsUpdate","MonitorsUpdate","BlockDragUpdate","BlockDragEnd","ExtensionAdded","ExtensionFieldAdded","PeripheralListUpdate","PeripheralConnected","PeripheralDisconnected","PeripheralRequestError","PeripheralConnectionLostError","PeripheralScanTimeout","MicListening","BlocksInfoUpdate","RuntimeStarted","RuntimeDisposed","BlocksNeedUpdate","SaveDataHandler","ScratchBlocksConstants","OutputShapeHexagonal","OutputShapeRound","OutputShapeSquare","TargetType","Sprite","Stage","VariableType","Scalar","List","BrooadcastMessage","activeClass","buttonBlock","color$1","copyTo","source","decode","matchAll","replacements","match","code","fromCharCode","modified","encode","invalidCharacters","char","charCodeAt","fetchWithTimeout","resource","controller","AbortController","abort","response","fetch","signal","getTextFromMenuItem","getValueFromMenuItem","isValidID","test","flags","for","blockMethodBroker","definer","decorator","legacyDefinition","definitions","decorators","throwTypeOnlyError","legacyExtension","LegacySupport","legacySupport","originalClassName","ReservedNames","Menus","Blocks","ArgumentNamesByBlock","loadExternalScript","onError","px","numberOf","reactiveInvoke","extensionAssignment","funcName","reactiveSet","propertyName","registerExtensionDefinitionCallback","splitOnCapitals","tryCastToArgumentType","onFailure","untilCondition","condition","untilExternalGlobalVariableLoaded","globalVariableName","untilReady","ready","defineProperty"],"mappings":"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"}