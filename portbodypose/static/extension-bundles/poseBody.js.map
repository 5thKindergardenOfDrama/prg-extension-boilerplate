{"version":3,"file":"poseBody.js","sources":["../../../../extensions/src/poseBody/legacy.ts","../../../../extensions/src/poseBody/node_modules/@tensorflow/tfjs-core/dist/tf-core.esm.js","../../../../extensions/src/poseBody/node_modules/@tensorflow/tfjs-converter/dist/tf-converter.esm.js","../../../../extensions/src/poseBody/node_modules/@tensorflow-models/posenet/dist/posenet.esm.js","../../../../extensions/src/poseBody/index.ts"],"sourcesContent":["import { Extension, ArgumentType, BlockType, Environment, extractLegacySupportFromOldGetInfo } from \"$common\";\nimport { mockFormatMessage as formatMessage } from \"$common\";\n\n\n/**\n * Copy and paste over the of the object returned by the old extension's 'getInfo' method \n * (making the necessary changes outlined below, and note that only the 'blocks' and 'menus' fields are required)\n * and pass it as an argument to the 'extractLegacySupportFromOldGetInfo' function.\n * If you're doing this in a seperate file from your Extension, make sure to export the return value.\n * NOTE: The object makes use of the 'as const' assertion applied to the argument object \n * (see below, at the end of the function call).\n * @see https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-4.html#const-assertions\n */\nexport default extractLegacySupportFromOldGetInfo({\n  blocks: [\n    {\n      opcode: 'goToPart',\n      text: 'go to [PART]',\n      blockType: BlockType.Command,\n      isTerminal: false,\n      arguments: {\n        PART: {\n          type: ArgumentType.String,\n          defaultValue: 'rightShoulder',\n          menu: 'PART'\n        },\n      },\n    },\n    //'---',\n    {\n      opcode: 'videoToggle',\n      blockType: BlockType.Command,\n      text: formatMessage({\n        id: 'videoSensing.videoToggle',\n        default: 'turn video [VIDEO_STATE]',\n        description: 'Controls display of the video preview layer'\n      }),\n      arguments: {\n        VIDEO_STATE: {\n          type: ArgumentType.Number,\n          menu: 'VIDEO_STATE',\n          defaultValue: 0\n        }\n      }\n    },\n    {\n      opcode: 'setVideoTransparency',\n      blockType: BlockType.Command,\n      text: formatMessage({\n        id: 'videoSensing.setVideoTransparency',\n        default: 'set video transparency to [TRANSPARENCY]',\n        description: 'Controls transparency of the video preview layer'\n      }),\n      arguments: {\n        TRANSPARENCY: {\n          type: ArgumentType.Number,\n          defaultValue: 50\n        }\n      }\n    },\n  ],\n  menus: {\n    PART: {\n      acceptReporters: true,\n      items: [\n        { text: 'nose', value: 'nose' },\n        { text: 'right eye', value: 'leftEye' },\n        { text: 'left eye', value: 'rightEye' },\n        { text: 'right ear', value: 'leftEar' },\n        { text: 'left ear', value: 'rightEar' },\n        { text: 'right shoulder', value: 'leftShoulder' },\n        { text: 'left shoulder', value: 'rightShoulder' },\n        { text: 'right elbow', value: 'leftElbow' },\n        { text: 'left elbow', value: 'rightElbow' },\n        { text: 'right wrist', value: 'leftWrist' },\n        { text: 'left wrist', value: 'rightWrist' },\n        { text: 'right hip', value: 'leftHip' },\n        { text: 'left hip', value: 'rightHip' },\n        { text: 'right knee', value: 'leftKnee' },\n        { text: 'left knee', value: 'rightKnee' },\n        { text: 'right ankle', value: 'leftAnkle' },\n        { text: 'left ankle', value: 'rightAnkle' },\n      ]\n    },\n    ATTRIBUTE: {\n      acceptReporters: true,\n      items: [\n        {\n          text: formatMessage({\n            id: 'videoSensing.motion',\n            default: 'motion',\n            description: 'Attribute for the \"video [ATTRIBUTE] on [SUBJECT]\" block'\n          }),\n          value: 'motion'\n        },\n        {\n          text: formatMessage({\n            id: 'videoSensing.direction',\n            default: 'direction',\n            description: 'Attribute for the \"video [ATTRIBUTE] on [SUBJECT]\" block'\n          }),\n          value: 'direction'\n        }\n\n      ]\n    },\n    SUBJECT: {\n      acceptReporters: true,\n      items: [\n        {\n          text: formatMessage({\n            id: 'videoSensing.sprite',\n            default: 'sprite',\n            description: 'Subject for the \"video [ATTRIBUTE] on [SUBJECT]\" block'\n          }),\n          value: 'this sprite'\n        },\n        {\n          text: formatMessage({\n            id: 'videoSensing.stage',\n            default: 'stage',\n            description: 'Subject for the \"video [ATTRIBUTE] on [SUBJECT]\" block'\n          }),\n          value: 'Stage'\n        }\n      ]\n    },\n\n    VIDEO_STATE: {\n      acceptReporters: true,\n      items: [\n        {\n          text: formatMessage({\n            id: 'videoSensing.off',\n            default: 'off',\n            description: 'Option for the \"turn video [STATE]\" block'\n          }),\n          value: 0\n        },\n        {\n          text: formatMessage({\n            id: 'videoSensing.on',\n            default: 'on',\n            description: 'Option for the \"turn video [STATE]\" block'\n          }),\n          value: 1\n        },\n        {\n          text: formatMessage({\n            id: 'videoSensing.onFlipped',\n            default: 'on and flipped',\n            description: 'Option for the \"turn video [STATE]\" block that causes the video to be flipped' +\n              ' horizontally (reversed as in a mirror)'\n          }),\n          value: 2\n        }\n      ]\n    }\n  },\n} as const); // VERY IMPORTANT! Note the use of 'as const' on the object passed to the function\n\n/**\n * By using 'as const', \n * we ensure typescript is able to extract as much information from the old getInfo object as possible\n */","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nvar t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};function e(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}function n(t,e,n,r){return new(n||(n=Promise))((function(o,a){function i(t){try{u(r.next(t))}catch(t){a(t)}}function s(t){try{u(r.throw(t))}catch(t){a(t)}}function u(t){t.done?o(t.value):new n((function(e){e(t.value)})).then(i,s)}u((r=r.apply(t,e||[])).next())}))}function r(t,e){var n,r,o,a,i={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return a={next:s(0),throw:s(1),return:s(2)},\"function\"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function s(a){return function(s){return function(a){if(n)throw new TypeError(\"Generator is already executing.\");for(;i;)try{if(n=1,r&&(o=2&a[0]?r.return:a[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,a[1])).done)return o;switch(r=0,o&&(a=[2&a[0],o.value]),a[0]){case 0:case 1:o=a;break;case 4:return i.label++,{value:a[1],done:!1};case 5:i.label++,r=a[1],a=[0];continue;case 7:a=i.ops.pop(),i.trys.pop();continue;default:if(!(o=(o=i.trys).length>0&&o[o.length-1])&&(6===a[0]||2===a[0])){i=0;continue}if(3===a[0]&&(!o||a[1]>o[0]&&a[1]<o[3])){i.label=a[1];break}if(6===a[0]&&i.label<o[1]){i.label=o[1],o=a;break}if(o&&i.label<o[2]){i.label=o[2],i.ops.push(a);break}o[2]&&i.ops.pop(),i.trys.pop();continue}a=e.call(t,i)}catch(t){a=[6,t],r=0}finally{n=o=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,s])}}}var o=function(){function t(t){this.global=t,this.flags={},this.flagRegistry={},this.urlFlags={},this.populateURLFlags()}return t.prototype.setPlatform=function(t,e){null!=this.platform&&console.warn(\"Platform \"+this.platformName+\" has already been set. Overwriting the platform with \"+e+\".\"),this.platformName=t,this.platform=e},t.prototype.registerFlag=function(t,e,n){if(this.flagRegistry[t]={evaluationFn:e,setHook:n},null!=this.urlFlags[t]){var r=this.urlFlags[t];console.warn(\"Setting feature override from URL \"+t+\": \"+r+\".\"),this.set(t,r)}},t.prototype.get=function(t){return t in this.flags?this.flags[t]:(this.flags[t]=this.evaluateFlag(t),this.flags[t])},t.prototype.getNumber=function(t){return this.get(t)},t.prototype.getBool=function(t){return this.get(t)},t.prototype.getFlags=function(){return this.flags},Object.defineProperty(t.prototype,\"features\",{get:function(){return this.flags},enumerable:!0,configurable:!0}),t.prototype.set=function(t,e){if(null==this.flagRegistry[t])throw new Error(\"Cannot set flag \"+t+\" as it has not been registered.\");this.flags[t]=e,null!=this.flagRegistry[t].setHook&&this.flagRegistry[t].setHook(e)},t.prototype.evaluateFlag=function(t){if(null==this.flagRegistry[t])throw new Error(\"Cannot evaluate flag '\"+t+\"': no evaluation function found.\");return this.flagRegistry[t].evaluationFn()},t.prototype.setFlags=function(t){this.flags=Object.assign({},t)},t.prototype.reset=function(){this.flags={},this.urlFlags={},this.populateURLFlags()},t.prototype.populateURLFlags=function(){var t=this;if(void 0!==this.global&&void 0!==this.global.location&&void 0!==this.global.location.search){var e,n,r=(e=this.global.location.search,n={},e.replace(/[?&]([^=?&]+)(?:=([^&]*))?/g,(function(t){for(var e=[],r=1;r<arguments.length;r++)e[r-1]=arguments[r];return a(n,e[0],e[1]),e.join(\"=\")})),n);if(\"tfjsflags\"in r)r.tfjsflags.split(\",\").forEach((function(e){var n=e.split(\":\"),r=n[0],o=n[1];t.urlFlags[r]=function(t,e){if(\"true\"===(e=e.toLowerCase())||\"false\"===e)return\"true\"===e;if(\"\"+ +e===e)return+e;throw new Error(\"Could not parse value flag value \"+e+\" for flag \"+t+\".\")}(r,o)}))}},t}();function a(t,e,n){t[decodeURIComponent(e)]=decodeURIComponent(n||\"\")}function i(){return s}var s=null;var u=new Map,c=new Map;function l(t,e){var n=m(t,e);return u.get(n)}function h(t){return c.get(t)}function f(t){for(var e=u.entries(),n=[];;){var r=e.next(),o=r.done,a=r.value;if(o)break;var i=a[0],s=a[1];i.split(\"_\")[0]===t&&n.push(s)}return n}function d(t){var e=t.kernelName,n=t.backendName,r=m(e,n);if(u.has(r))throw new Error(\"The kernel '\"+e+\"' for backend '\"+n+\"' is already registered\");u.set(r,t)}function p(t){var e=t.kernelName;c.has(e)&&console.warn(\"Overriding the gradient for '\"+e+\"'\"),c.set(e,t)}function v(t,e){var n=m(t,e);if(!u.has(n))throw new Error(\"The kernel '\"+t+\"' for backend '\"+e+\"' is not registered\");u.delete(n)}function g(t){if(!c.has(t))throw new Error(\"The gradient '\"+t+\"' for backend is not registered\");c.delete(t)}function m(t,e){return e+\"_\"+t}function y(t){for(var e=t.length,n=0,r=0;e>0;)r=Math.random()*e|0,n=t[--e],t[e]=t[r],t[r]=n}function x(t,e,n){return Math.max(t,Math.min(e,n))}function b(t){return t%2==0?t:t+1}function w(t){for(var e=0,n=0;n<t.length;n++)e+=t[n];return e}function C(t,e){if(!t)throw new Error(\"string\"==typeof e?e:e())}function E(t,e,n){void 0===n&&(n=\"\"),C(S(t,e),(function(){return n+\" Shapes \"+t+\" and \"+e+\" must match\"}))}function R(t){C(null!=t,(function(){return\"The input to the tensor constructor must be a non-null value.\"}))}function I(t,e,n){if(void 0===e&&(e=[]),void 0===n&&(n=!1),null==e&&(e=[]),Array.isArray(t)||V(t)&&!n)for(var r=0;r<t.length;++r)I(t[r],e,n);else e.push(t);return e}function k(t){if(0===t.length)return 1;for(var e=t[0],n=1;n<t.length;n++)e*=t[n];return e}function S(t,e){if(t===e)return!0;if(null==t||null==e)return!1;if(t.length!==e.length)return!1;for(var n=0;n<t.length;n++)if(t[n]!==e[n])return!1;return!0}function A(t){return t%1==0}function T(t){if(null!=Math.tanh)return Math.tanh(t);if(t===1/0)return 1;if(t===-1/0)return-1;var e=Math.exp(2*t);return(e-1)/(e+1)}function D(t){var e=Math.ceil(Math.sqrt(t));return[e,Math.ceil(t/e)]}function N(t,e){return e<=t.length?t:t+\" \".repeat(e-t.length)}function F(t,e,n){return void 0===e&&(e=function(t){return 0}),new Promise((function(r,o){var a=0,i=function(){if(t())r();else{a++;var s=e(a);null!=n&&a>=n?o():setTimeout(i,s)}};i()}))}function _(t,e){for(var n=1,r=-1,o=0;o<t.length;++o)if(t[o]>=0)n*=t[o];else if(-1===t[o]){if(-1!==r)throw Error(\"Shapes can only have 1 implicit size. Found -1 at dim \"+r+\" and dim \"+o);r=o}else if(t[o]<0)throw Error(\"Shapes can not be < 0. Found \"+t[o]+\" at dim \"+o);if(-1===r){if(e>0&&e!==n)throw Error(\"Size(\"+e+\") must match the product of shape \"+t);return t}if(0===n)throw Error(\"Cannot infer the missing size in [\"+t+\"] when there are 0 elements\");if(e%n!=0)throw Error(\"The implicit shape can't be a fractional number. Got \"+e+\" / \"+n);var a=t.slice();return a[r]=e/n,a}function O(t,e){var n=e.length;return C((t=null==t?e.map((function(t,e){return e})):[].concat(t)).every((function(t){return t>=-n&&t<n})),(function(){return\"All values in axis param must be in range [-\"+n+\", \"+n+\") but got axis \"+t})),C(t.every((function(t){return A(t)})),(function(){return\"All values in axis param must be integers but got axis \"+t})),t.map((function(t){return t<0?n+t:t}))}function M(t,e){for(var n=[],r=[],o=null!=e&&Array.isArray(e)&&0===e.length,a=null==e||o?null:O(e,t).sort(),i=0,s=0;s<t.length;++s){if(null!=a){if(a[i]===s&&1!==t[s])throw new Error(\"Can't squeeze axis \"+s+\" since its dim '\"+t[s]+\"' is not 1\");(null==a[i]||a[i]>s)&&1===t[s]&&(n.push(t[s]),r.push(s)),a[i]<=s&&i++}1!==t[s]&&(n.push(t[s]),r.push(s))}return{newShape:n,keptDims:r}}function B(t,e){var n=null;if(null==t||\"float32\"===t)n=new Float32Array(e);else if(\"int32\"===t)n=new Int32Array(e);else{if(\"bool\"!==t)throw new Error(\"Unknown data type \"+t);n=new Uint8Array(e)}return n}function P(t,e){var n=null;if(null==t||\"float32\"===t)n=new Float32Array(e);else if(\"int32\"===t)n=new Int32Array(e);else if(\"bool\"===t)n=new Uint8Array(e);else{if(\"string\"!==t)throw new Error(\"Unknown data type \"+t);n=new Array(e)}return n}function L(t,e){for(var n=0;n<t.length;n++){var r=t[n];if(isNaN(r)||!isFinite(r))throw Error(\"A tensor of type \"+e+\" being uploaded contains \"+r+\".\")}}function W(t){return\"bool\"===t||\"complex64\"===t||\"float32\"===t||\"int32\"===t||\"string\"===t}function U(t,e){return\"complex64\"!==e&&((\"float32\"!==e||\"complex64\"===t)&&((\"int32\"!==e||\"float32\"===t||\"complex64\"===t)&&(\"bool\"!==e||\"bool\"!==t)))}function V(t){return t instanceof Float32Array||t instanceof Int32Array||t instanceof Uint8Array}function z(t){if(\"float32\"===t||\"int32\"===t)return 4;if(\"complex64\"===t)return 8;if(\"bool\"===t)return 1;throw new Error(\"Unknown dtype \"+t)}function G(t){if(null==t)return 0;var e=0;return t.forEach((function(t){return e+=t.length})),e}function H(t){return\"string\"==typeof t||t instanceof String}function q(t){return\"boolean\"==typeof t}function K(t){return\"number\"==typeof t}function j(t){return Array.isArray(t)?j(t[0]):t instanceof Float32Array?\"float32\":t instanceof Int32Array||t instanceof Uint8Array?\"int32\":K(t)?\"float32\":H(t)?\"string\":q(t)?\"bool\":\"float32\"}function X(t){return!!(t&&t.constructor&&t.call&&t.apply)}function Y(t,e){for(var n=e;n<t;++n)if(t%n==0)return n;return t}function $(t){var e=t.length;if(e<2)return[];var n=new Array(e-1);n[e-2]=t[e-1];for(var r=e-3;r>=0;--r)n[r]=n[r+1]*t[r+1];return n}function Q(t,e,n){if(\"string\"===e)throw new Error(\"Cannot convert a string[] to a TypedArray\");if(Array.isArray(t)&&(t=I(t)),n&&L(t,e),function(t,e){return t instanceof Float32Array&&\"float32\"===e||t instanceof Int32Array&&\"int32\"===e||t instanceof Uint8Array&&\"bool\"===e}(t,e))return t;if(null==e||\"float32\"===e||\"complex64\"===e)return new Float32Array(t);if(\"int32\"===e)return new Int32Array(t);if(\"bool\"===e){for(var r=new Uint8Array(t.length),o=0;o<r.length;++o)0!==Math.round(t[o])&&(r[o]=1);return r}throw new Error(\"Unknown data type \"+e)}function J(t,e){if(0===t.length)return e[0];var n=t.reduce((function(t,e){return t*e}));if(0===n)return[];if(n!==e.length)throw new Error(\"[\"+t+\"] does not match the input size.\");return function t(e,n,r){var o=new Array;if(1===n.length)for(var a=n[0],i=0;i<a;i++)o[i]=r[e+i];else{a=n[0];var s=n.slice(1),u=s.reduce((function(t,e){return t*e}));for(i=0;i<a;i++)o[i]=t(e+i*u,s,r)}return o}(0,t,e)}function Z(t,e){for(var n=tt(t,e),r=0;r<n.length;r++)n[r]=1;return n}function tt(t,e){if(null==e||\"float32\"===e||\"complex64\"===e)return new Float32Array(t);if(\"int32\"===e)return new Int32Array(t);if(\"bool\"===e)return new Uint8Array(t);throw new Error(\"Unknown data type \"+e)}function et(){return i().platform.now()}function nt(t){t.forEach((function(e){C(Number.isInteger(e)&&e>=0,(function(){return\"Tensor must have a shape comprised of positive integers but got shape [\"+t+\"].\"}))}))}function rt(t,e){return void 0===e&&(e=\"utf-8\"),e=e||\"utf-8\",i().platform.encode(t,e)}function ot(t,e){return void 0===e&&(e=\"utf-8\"),e=e||\"utf-8\",i().platform.decode(t,e)}function at(t,e,n){if(0===e)return 0;if(1===e)return t[0];for(var r=t[t.length-1],o=0;o<t.length-1;++o)r+=n[o]*t[o];return r}function it(t,e,n){if(0===e)return[];if(1===e)return[t];for(var r=new Array(e),o=0;o<r.length-1;++o)r[o]=Math.floor(t/n[o]),t-=r[o]*n[o];return r[r.length-1]=t,r}var st=Object.freeze({shuffle:y,clamp:x,nearestLargerEven:b,sum:w,randUniform:function(t,e){var n=Math.random();return e*n+(1-n)*t},distSquared:function(t,e){for(var n=0,r=0;r<t.length;r++){var o=Number(t[r])-Number(e[r]);n+=o*o}return n},assert:C,assertShapesMatch:E,assertNonNull:R,flatten:I,sizeFromShape:k,isScalarShape:function(t){return 0===t.length},arraysEqual:S,isInt:A,tanh:T,sizeToSquarishShape:D,createShuffledIndices:function(t){for(var e=new Uint32Array(t),n=0;n<t;++n)e[n]=n;return y(e),e},rightPad:N,repeatedTry:F,inferFromImplicitShape:_,parseAxisParam:O,squeezeShape:M,getTypedArrayFromDType:B,getArrayFromDType:P,checkConversionForErrors:L,isValidDtype:W,hasEncodingLoss:U,isTypedArray:V,bytesPerElement:z,bytesFromStringArray:G,isString:H,isBoolean:q,isNumber:K,inferDtype:j,isFunction:X,nearestDivisor:Y,computeStrides:$,toTypedArray:Q,toNestedArray:J,makeOnesTypedArray:Z,makeZerosTypedArray:tt,now:et,assertNonNegativeIntegerDimensions:nt,fetch:function(t,e){return i().platform.fetch(t,e)},encodeString:rt,decodeString:ot,locToIndex:at,indexToLoc:it}),ut=function(){function t(t,e){this.backendTimer=t,this.logger=e,null==e&&(this.logger=new ct)}return t.prototype.profileKernel=function(t,e,n){var r,o=this,a=this.backendTimer.time((function(){r=n()}));return r.forEach((function(n){n.data().then((function(r){!function(t,e,n){if(\"float32\"!==e)return!1;for(var r=0;r<t.length;r++){var o=t[r];if(isNaN(o)||!isFinite(o))return console.warn(\"Found \"+o+\" in the result of '\"+n+\"'\"),!0}}(r,n.dtype,t),a.then((function(a){var i=\"\";null!=a.getExtraProfileInfo&&(i=a.getExtraProfileInfo()),o.logger.logKernelProfile(t,n,r,a.kernelMs,e,i)}))}))})),r},t}();var ct=function(){function t(){}return t.prototype.logKernelProfile=function(t,e,n,r,o,a){var i=\"number\"==typeof r?N(r+\"ms\",9):r.error,s=N(t,25),u=e.rank,c=e.size,l=N(e.shape.toString(),14),h=\"\";for(var f in o){var d=o[f].shape||e.shape,p=d.length;h+=f+\": \"+p+\"D \"+(p>0?d:\"\")+\" \"}console.log(\"%c\"+s+\"\\t%c\"+i+\"\\t%c\"+u+\"D \"+l+\"\\t%c\"+c+\"\\t%c\"+h+\"\\t%c\"+a,\"font-weight:bold\",\"color:red\",\"color:blue\",\"color: orange\",\"color: green\",\"color: steelblue\")},t}();var lt=20,ht=3,ft=7;function dt(t,e,n,r){var o=$(e),a=function(t,e,n,r){var o=k(e),a=r[r.length-1],i=new Array(a).fill(0),s=e.length,u=\"complex64\"===n?gt(t):t;if(s>1)for(var c=0;c<o/a;c++)for(var l=c*a,h=0;h<a;h++)i[h]=Math.max(i[h],pt(u[l+h],0,n).length);return i}(t,e,n,o),i=e.length,s=function t(e,n,r,o,a,i){void 0===i&&(i=!0);var s=\"complex64\"===r?2:1,u=n[0],c=n.length;if(0===c){return\"complex64\"===r?[pt(gt(e)[0],0,r)]:\"bool\"===r?[vt(e[0])]:[e[0].toString()]}if(1===c){if(u>lt){var l=ht*s,h=Array.from(e.slice(0,l)),f=Array.from(e.slice((u-ht)*s,u*s));return\"complex64\"===r&&(h=gt(h),f=gt(f)),[\"[\"+h.map((function(t,e){return pt(t,a[e],r)})).join(\", \")+\", ..., \"+f.map((function(t,e){return pt(t,a[u-ht+e],r)})).join(\", \")+\"]\"]}return[\"[\"+(\"complex64\"===r?gt(e):Array.from(e)).map((function(t,e){return pt(t,a[e],r)})).join(\", \")+\"]\"]}var d=n.slice(1),p=o.slice(1),v=o[0]*s,g=[];if(u>lt){for(var m=0;m<ht;m++){var y=(x=m*v)+v;g.push.apply(g,t(e.slice(x,y),d,r,p,a,!1))}g.push(\"...\");for(m=u-ht;m<u;m++){y=(x=m*v)+v;g.push.apply(g,t(e.slice(x,y),d,r,p,a,m===u-1))}}else for(m=0;m<u;m++){var x;y=(x=m*v)+v;g.push.apply(g,t(e.slice(x,y),d,r,p,a,m===u-1))}var b=2===c?\",\":\"\";g[0]=\"[\"+g[0]+b;for(m=1;m<g.length-1;m++)g[m]=\" \"+g[m]+b;var w=\",\\n\";for(m=2;m<c;m++)w+=\"\\n\";return g[g.length-1]=\" \"+g[g.length-1]+\"]\"+(i?\"\":w),g}(t,e,n,o,a),u=[\"Tensor\"];return r&&(u.push(\"  dtype: \"+n),u.push(\"  rank: \"+i),u.push(\"  shape: [\"+e+\"]\"),u.push(\"  values:\")),u.push(s.map((function(t){return\"    \"+t})).join(\"\\n\")),u.join(\"\\n\")}function pt(t,e,n){return N(Array.isArray(t)?parseFloat(t[0].toFixed(ft))+\" + \"+parseFloat(t[1].toFixed(ft))+\"j\":H(t)?\"'\"+t+\"'\":\"bool\"===n?vt(t):parseFloat(t.toFixed(ft)).toString(),e)}function vt(t){return 0===t?\"false\":\"true\"}function gt(t){for(var e=[],n=0;n<t.length;n+=2)e.push([t[n],t[n+1]]);return e}var mt=function(){function t(t,e,n){var r=this;if(this.dtype=e,this.shape=t.slice(),this.size=k(t),null!=n){var o=n.length;C(o===this.size,(function(){return\"Length of values '\"+o+\"' does not match the size inferred by the shape '\"+r.size+\"'.\"}))}if(\"complex64\"===e)throw new Error(\"complex64 dtype TensorBuffers are not supported. Please create a TensorBuffer for the real and imaginary parts separately and call tf.complex(real, imag).\");this.values=n||P(e,this.size),this.strides=$(t)}return t.prototype.set=function(t){for(var e=this,n=[],r=1;r<arguments.length;r++)n[r-1]=arguments[r];0===n.length&&(n=[0]),C(n.length===this.rank,(function(){return\"The number of provided coordinates (\"+n.length+\") must match the rank (\"+e.rank+\")\"}));var o=this.locToIndex(n);this.values[o]=t},t.prototype.get=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];0===t.length&&(t=[0]);for(var n=0,r=0,o=t;r<o.length;r++){var a=o[r];if(a<0||a>=this.shape[n]){var i=\"Requested out of range element at \"+t+\".   Buffer shape=\"+this.shape;throw new Error(i)}n++}for(var s=t[t.length-1],u=0;u<t.length-1;++u)s+=this.strides[u]*t[u];return this.values[s]},t.prototype.locToIndex=function(t){if(0===this.rank)return 0;if(1===this.rank)return t[0];for(var e=t[t.length-1],n=0;n<t.length-1;++n)e+=this.strides[n]*t[n];return e},t.prototype.indexToLoc=function(t){if(0===this.rank)return[];if(1===this.rank)return[t];for(var e=new Array(this.shape.length),n=0;n<e.length-1;++n)e[n]=Math.floor(t/this.strides[n]),t-=e[n]*this.strides[n];return e[e.length-1]=t,e},Object.defineProperty(t.prototype,\"rank\",{get:function(){return this.shape.length},enumerable:!0,configurable:!0}),t.prototype.toTensor=function(){return yt().makeTensor(this.values,this.shape,this.dtype)},t}(),yt=null,xt=null,bt=null;var wt=function(){function t(t,e,n,r){this.kept=!1,this.isDisposedInternal=!1,this.shape=t.slice(),this.dtype=e||\"float32\",this.size=k(t),this.strides=$(t),this.dataId=n,this.id=r,this.rankType=this.rank<5?this.rank.toString():\"higher\"}return t.prototype.flatten=function(){return this.throwIfDisposed(),this.as1D()},t.prototype.asScalar=function(){return this.throwIfDisposed(),C(1===this.size,(function(){return\"The array must have only 1 element.\"})),this.reshape([])},t.prototype.as1D=function(){return this.throwIfDisposed(),this.reshape([this.size])},t.prototype.as2D=function(t,e){return this.throwIfDisposed(),this.reshape([t,e])},t.prototype.as3D=function(t,e,n){return this.throwIfDisposed(),this.reshape([t,e,n])},t.prototype.as4D=function(t,e,n,r){return this.throwIfDisposed(),this.reshape([t,e,n,r])},t.prototype.as5D=function(t,e,n,r,o){return this.throwIfDisposed(),this.reshape([t,e,n,r,o])},t.prototype.asType=function(t){return this.throwIfDisposed(),xt.cast(this,t)},Object.defineProperty(t.prototype,\"rank\",{get:function(){return this.shape.length},enumerable:!0,configurable:!0}),t.prototype.buffer=function(){return n(this,void 0,void 0,(function(){var t;return r(this,(function(e){switch(e.label){case 0:return[4,this.data()];case 1:return t=e.sent(),[2,xt.buffer(this.shape,this.dtype,t)]}}))}))},t.prototype.bufferSync=function(){return xt.buffer(this.shape,this.dtype,this.dataSync())},t.prototype.array=function(){return n(this,void 0,void 0,(function(){var t;return r(this,(function(e){switch(e.label){case 0:return[4,this.data()];case 1:return t=e.sent(),[2,J(this.shape,t)]}}))}))},t.prototype.arraySync=function(){return J(this.shape,this.dataSync())},t.prototype.data=function(){return n(this,void 0,void 0,(function(){var t,e;return r(this,(function(n){switch(n.label){case 0:return this.throwIfDisposed(),t=yt().read(this.dataId),\"string\"!==this.dtype?[3,2]:[4,t];case 1:e=n.sent();try{return[2,e.map((function(t){return ot(t)}))]}catch(t){throw new Error(\"Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().\")}n.label=2;case 2:return[2,t]}}))}))},t.prototype.dataSync=function(){this.throwIfDisposed();var t=yt().readSync(this.dataId);if(\"string\"===this.dtype)try{return t.map((function(t){return ot(t)}))}catch(t){throw new Error(\"Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().\")}return t},t.prototype.bytes=function(){return n(this,void 0,void 0,(function(){var t;return r(this,(function(e){switch(e.label){case 0:return this.throwIfDisposed(),[4,yt().read(this.dataId)];case 1:return t=e.sent(),\"string\"===this.dtype?[2,t]:[2,new Uint8Array(t.buffer)]}}))}))},t.prototype.dispose=function(){this.isDisposed||(yt().disposeTensor(this),this.isDisposedInternal=!0)},Object.defineProperty(t.prototype,\"isDisposed\",{get:function(){return this.isDisposedInternal},enumerable:!0,configurable:!0}),t.prototype.throwIfDisposed=function(){if(this.isDisposed)throw new Error(\"Tensor is disposed.\")},t.prototype.toFloat=function(){return this.asType(\"float32\")},t.prototype.toInt=function(){return this.asType(\"int32\")},t.prototype.toBool=function(){return this.asType(\"bool\")},t.prototype.print=function(t){return void 0===t&&(t=!1),xt.print(this,t)},t.prototype.reshape=function(t){return this.throwIfDisposed(),xt.reshape(this,t)},t.prototype.reshapeAs=function(t){return this.throwIfDisposed(),this.reshape(t.shape)},t.prototype.expandDims=function(t){return void 0===t&&(t=0),xt.expandDims(this,t)},t.prototype.cumsum=function(t,e,n){return void 0===t&&(t=0),void 0===e&&(e=!1),void 0===n&&(n=!1),xt.cumsum(this,t,e,n)},t.prototype.squeeze=function(t){return this.throwIfDisposed(),xt.squeeze(this,t)},t.prototype.clone=function(){return this.throwIfDisposed(),xt.clone(this)},t.prototype.toString=function(t){return void 0===t&&(t=!1),dt(this.dataSync(),this.shape,this.dtype,t)},t.prototype.gather=function(t,e){return void 0===e&&(e=0),this.throwIfDisposed(),xt.gather(this,t,e)},t.prototype.matMul=function(t,e,n){return void 0===e&&(e=!1),void 0===n&&(n=!1),this.throwIfDisposed(),xt.matMul(this,t,e,n)},t.prototype.dot=function(t){return this.throwIfDisposed(),xt.dot(this,t)},t.prototype.norm=function(t,e,n){return void 0===t&&(t=\"euclidean\"),void 0===e&&(e=null),void 0===n&&(n=!1),this.throwIfDisposed(),xt.norm(this,t,e,n)},t.prototype.slice=function(t,e){return this.throwIfDisposed(),xt.slice(this,t,e)},t.prototype.reverse=function(t){return this.throwIfDisposed(),xt.reverse(this,t)},t.prototype.concat=function(e,n){return void 0===n&&(n=0),this.throwIfDisposed(),e instanceof t&&(e=[e]),xt.concat([this].concat(e),n)},t.prototype.split=function(t,e){return void 0===e&&(e=0),this.throwIfDisposed(),xt.split(this,t,e)},t.prototype.stack=function(t,e){return void 0===e&&(e=0),xt.stack([this,t],e)},t.prototype.unstack=function(t){return void 0===t&&(t=0),xt.unstack(this,t)},t.prototype.batchNormalization=function(t,e,n,r,o){return void 0===n&&(n=.001),bt(\"tf.batchNormalization() is going away. Use tf.batchNorm() instead, and note the positional argument change of scale, offset, and varianceEpsilon\"),this.batchNorm(t,e,o,r,n)},t.prototype.all=function(t,e){return void 0===t&&(t=null),void 0===e&&(e=!1),this.throwIfDisposed(),xt.all(this,t,e)},t.prototype.any=function(t,e){return void 0===t&&(t=null),void 0===e&&(e=!1),this.throwIfDisposed(),xt.any(this,t,e)},t.prototype.logSumExp=function(t,e){return void 0===t&&(t=null),void 0===e&&(e=!1),this.throwIfDisposed(),xt.logSumExp(this,t,e)},t.prototype.sum=function(t,e){return void 0===t&&(t=null),void 0===e&&(e=!1),this.throwIfDisposed(),xt.sum(this,t,e)},t.prototype.prod=function(t,e){return void 0===t&&(t=null),void 0===e&&(e=!1),this.throwIfDisposed(),xt.prod(this,t,e)},t.prototype.mean=function(t,e){return void 0===t&&(t=null),void 0===e&&(e=!1),this.throwIfDisposed(),xt.mean(this,t,e)},t.prototype.min=function(t,e){return void 0===t&&(t=null),void 0===e&&(e=!1),this.throwIfDisposed(),xt.min(this,t,e)},t.prototype.max=function(t,e){return void 0===t&&(t=null),void 0===e&&(e=!1),this.throwIfDisposed(),xt.max(this,t,e)},t.prototype.argMin=function(t){return void 0===t&&(t=null),this.throwIfDisposed(),xt.argMin(this,t)},t.prototype.argMax=function(t){return void 0===t&&(t=null),this.throwIfDisposed(),xt.argMax(this,t)},t.prototype.cast=function(t){return this.throwIfDisposed(),xt.cast(this,t)},t.prototype.addStrict=function(t){return this.throwIfDisposed(),xt.addStrict(this,t)},t.prototype.atan2=function(t){return this.throwIfDisposed(),xt.atan2(this,t)},t.prototype.sub=function(t){return this.throwIfDisposed(),xt.sub(this,t)},t.prototype.subStrict=function(t){return this.throwIfDisposed(),xt.subStrict(this,t)},t.prototype.pow=function(t){return this.throwIfDisposed(),xt.pow(this,t)},t.prototype.powStrict=function(t){return this.throwIfDisposed(),xt.powStrict(this,t)},t.prototype.mul=function(t){return this.throwIfDisposed(),xt.mul(this,t)},t.prototype.mulStrict=function(t){return this.throwIfDisposed(),xt.mulStrict(this,t)},t.prototype.floorDiv=function(t){return this.throwIfDisposed(),xt.floorDiv(this,t)},t.prototype.divStrict=function(t){return this.throwIfDisposed(),xt.divStrict(this,t)},t.prototype.minimum=function(t){return this.throwIfDisposed(),xt.minimum(this,t)},t.prototype.minimumStrict=function(t){return this.throwIfDisposed(),xt.minimumStrict(this,t)},t.prototype.maximum=function(t){return this.throwIfDisposed(),xt.maximum(this,t)},t.prototype.maximumStrict=function(t){return this.throwIfDisposed(),xt.maximumStrict(this,t)},t.prototype.mod=function(t){return this.throwIfDisposed(),xt.mod(this,t)},t.prototype.modStrict=function(t){return this.throwIfDisposed(),xt.modStrict(this,t)},t.prototype.squaredDifferenceStrict=function(t){return this.throwIfDisposed(),xt.squaredDifferenceStrict(this,t)},t.prototype.notEqual=function(t){return this.throwIfDisposed(),xt.notEqual(this,t)},t.prototype.notEqualStrict=function(t){return this.throwIfDisposed(),xt.notEqualStrict(this,t)},t.prototype.less=function(t){return this.throwIfDisposed(),xt.less(this,t)},t.prototype.lessStrict=function(t){return this.throwIfDisposed(),xt.lessStrict(this,t)},t.prototype.equal=function(t){return this.throwIfDisposed(),xt.equal(this,t)},t.prototype.equalStrict=function(t){return this.throwIfDisposed(),xt.equalStrict(this,t)},t.prototype.lessEqual=function(t){return this.throwIfDisposed(),xt.lessEqual(this,t)},t.prototype.lessEqualStrict=function(t){return this.throwIfDisposed(),xt.lessEqualStrict(this,t)},t.prototype.greater=function(t){return this.throwIfDisposed(),xt.greater(this,t)},t.prototype.greaterStrict=function(t){return this.throwIfDisposed(),xt.greaterStrict(this,t)},t.prototype.greaterEqual=function(t){return this.throwIfDisposed(),xt.greaterEqual(this,t)},t.prototype.greaterEqualStrict=function(t){return this.throwIfDisposed(),xt.greaterEqualStrict(this,t)},t.prototype.logicalAnd=function(t){return this.throwIfDisposed(),xt.logicalAnd(this,t)},t.prototype.logicalOr=function(t){return this.throwIfDisposed(),xt.logicalOr(this,t)},t.prototype.logicalNot=function(){return this.throwIfDisposed(),xt.logicalNot(this)},t.prototype.logicalXor=function(t){return this.throwIfDisposed(),xt.logicalXor(this,t)},t.prototype.where=function(t,e){return this.throwIfDisposed(),xt.where(t,this,e)},t.prototype.neg=function(){return this.throwIfDisposed(),xt.neg(this)},t.prototype.ceil=function(){return this.throwIfDisposed(),xt.ceil(this)},t.prototype.floor=function(){return this.throwIfDisposed(),xt.floor(this)},t.prototype.sign=function(){return this.throwIfDisposed(),xt.sign(this)},t.prototype.isNaN=function(){return this.throwIfDisposed(),xt.isNaN(this)},t.prototype.isInf=function(){return this.throwIfDisposed(),xt.isInf(this)},t.prototype.isFinite=function(){return this.throwIfDisposed(),xt.isFinite(this)},t.prototype.exp=function(){return this.throwIfDisposed(),xt.exp(this)},t.prototype.expm1=function(){return this.throwIfDisposed(),xt.expm1(this)},t.prototype.log=function(){return this.throwIfDisposed(),xt.log(this)},t.prototype.log1p=function(){return this.throwIfDisposed(),xt.log1p(this)},t.prototype.sqrt=function(){return this.throwIfDisposed(),xt.sqrt(this)},t.prototype.rsqrt=function(){return this.throwIfDisposed(),xt.rsqrt(this)},t.prototype.square=function(){return this.throwIfDisposed(),xt.square(this)},t.prototype.reciprocal=function(){return this.throwIfDisposed(),xt.reciprocal(this)},t.prototype.abs=function(){return this.throwIfDisposed(),xt.abs(this)},t.prototype.clipByValue=function(t,e){return this.throwIfDisposed(),xt.clipByValue(this,t,e)},t.prototype.relu=function(){return this.throwIfDisposed(),xt.relu(this)},t.prototype.relu6=function(){return this.throwIfDisposed(),xt.relu6(this)},t.prototype.elu=function(){return this.throwIfDisposed(),xt.elu(this)},t.prototype.selu=function(){return this.throwIfDisposed(),xt.selu(this)},t.prototype.leakyRelu=function(t){return void 0===t&&(t=.2),this.throwIfDisposed(),xt.leakyRelu(this,t)},t.prototype.prelu=function(t){return this.throwIfDisposed(),xt.prelu(this,t)},t.prototype.sigmoid=function(){return this.throwIfDisposed(),xt.sigmoid(this)},t.prototype.logSigmoid=function(){return this.throwIfDisposed(),xt.logSigmoid(this)},t.prototype.softplus=function(){return this.throwIfDisposed(),xt.softplus(this)},t.prototype.zerosLike=function(){return this.throwIfDisposed(),xt.zerosLike(this)},t.prototype.onesLike=function(){return this.throwIfDisposed(),xt.onesLike(this)},t.prototype.sin=function(){return this.throwIfDisposed(),xt.sin(this)},t.prototype.cos=function(){return this.throwIfDisposed(),xt.cos(this)},t.prototype.tan=function(){return this.throwIfDisposed(),xt.tan(this)},t.prototype.asin=function(){return this.throwIfDisposed(),xt.asin(this)},t.prototype.acos=function(){return this.throwIfDisposed(),xt.acos(this)},t.prototype.atan=function(){return this.throwIfDisposed(),xt.atan(this)},t.prototype.sinh=function(){return this.throwIfDisposed(),xt.sinh(this)},t.prototype.cosh=function(){return this.throwIfDisposed(),xt.cosh(this)},t.prototype.tanh=function(){return this.throwIfDisposed(),xt.tanh(this)},t.prototype.asinh=function(){return this.throwIfDisposed(),xt.asinh(this)},t.prototype.acosh=function(){return this.throwIfDisposed(),xt.acosh(this)},t.prototype.atanh=function(){return this.throwIfDisposed(),xt.atanh(this)},t.prototype.erf=function(){return this.throwIfDisposed(),xt.erf(this)},t.prototype.round=function(){return this.throwIfDisposed(),xt.round(this)},t.prototype.step=function(t){return void 0===t&&(t=0),this.throwIfDisposed(),xt.step(this,t)},t.prototype.softmax=function(t){return void 0===t&&(t=-1),this.throwIfDisposed(),xt.softmax(this,t)},t.prototype.logSoftmax=function(t){return void 0===t&&(t=-1),this.throwIfDisposed(),xt.logSoftmax(this,t)},t.prototype.resizeBilinear=function(t,e){return void 0===e&&(e=!1),this.throwIfDisposed(),xt.image.resizeBilinear(this,t,e)},t.prototype.resizeNearestNeighbor=function(t,e){return void 0===e&&(e=!1),this.throwIfDisposed(),xt.image.resizeNearestNeighbor(this,t,e)},t.prototype.conv1d=function(t,e,n,r,o,a){return void 0===r&&(r=\"NWC\"),void 0===o&&(o=1),this.throwIfDisposed(),xt.conv1d(this,t,e,n,r,o,a)},t.prototype.conv2d=function(t,e,n,r,o,a){return void 0===r&&(r=\"NHWC\"),void 0===o&&(o=[1,1]),this.throwIfDisposed(),xt.conv2d(this,t,e,n,r,o,a)},t.prototype.conv2dTranspose=function(t,e,n,r,o){return this.throwIfDisposed(),xt.conv2dTranspose(this,t,e,n,r,o)},t.prototype.depthwiseConv2D=function(t,e,n,r,o,a){return void 0===r&&(r=\"NHWC\"),void 0===o&&(o=[1,1]),this.throwIfDisposed(),xt.depthwiseConv2d(this,t,e,n,r,o,a)},t.prototype.separableConv2d=function(t,e,n,r,o,a){return void 0===o&&(o=[1,1]),void 0===a&&(a=\"NHWC\"),this.throwIfDisposed(),xt.separableConv2d(this,t,e,n,r,o,a)},t.prototype.avgPool=function(t,e,n,r){return this.throwIfDisposed(),xt.avgPool(this,t,e,n,r)},t.prototype.maxPool=function(t,e,n,r){return this.throwIfDisposed(),xt.maxPool(this,t,e,n,r)},t.prototype.localResponseNormalization=function(t,e,n,r){return void 0===t&&(t=5),void 0===e&&(e=1),void 0===n&&(n=1),void 0===r&&(r=.5),xt.localResponseNormalization(this,t,e,n,r)},t.prototype.pool=function(t,e,n,r,o){return this.throwIfDisposed(),xt.pool(this,t,e,n,r,o)},t.prototype.variable=function(t,e,n){return void 0===t&&(t=!0),this.throwIfDisposed(),yt().makeVariable(this,t,e,n)},t.prototype.unsortedSegmentSum=function(t,e){return this.throwIfDisposed(),xt.unsortedSegmentSum(this,t,e)},t.prototype.batchToSpaceND=function(t,e){return this.throwIfDisposed(),xt.batchToSpaceND(this,t,e)},t.prototype.spaceToBatchND=function(t,e){return this.throwIfDisposed(),xt.spaceToBatchND(this,t,e)},t.prototype.topk=function(t,e){return void 0===t&&(t=1),void 0===e&&(e=!0),this.throwIfDisposed(),xt.topk(this,t,e)},t.prototype.stridedSlice=function(t,e,n,r,o,a,i,s){return void 0===r&&(r=0),void 0===o&&(o=0),void 0===a&&(a=0),void 0===i&&(i=0),void 0===s&&(s=0),this.throwIfDisposed(),xt.stridedSlice(this,t,e,n,r,o,a,i,s)},t.prototype.depthToSpace=function(t,e){return this.throwIfDisposed(),xt.depthToSpace(this,t,e)},t.prototype.fft=function(){return this.throwIfDisposed(),xt.spectral.fft(this)},t.prototype.ifft=function(){return this.throwIfDisposed(),xt.spectral.ifft(this)},t.prototype.rfft=function(){return this.throwIfDisposed(),xt.spectral.rfft(this)},t.prototype.irfft=function(){return this.throwIfDisposed(),xt.spectral.irfft(this)},t}();Object.defineProperty(wt,Symbol.hasInstance,{value:function(t){return!!t&&null!=t.dataId&&null!=t.shape&&null!=t.dtype}});var Ct,Et,Rt,It,kt,St=function(t){function n(e,n,r,o){var a=t.call(this,e.shape,e.dtype,e.dataId,o)||this;return a.trainable=n,a.name=r,a}return e(n,t),n.prototype.assign=function(t){if(t.dtype!==this.dtype)throw new Error(\"dtype of the new value (\"+t.dtype+\") and previous value (\"+this.dtype+\") must match\");if(!S(t.shape,this.shape))throw new Error(\"shape of the new value (\"+t.shape+\") and previous value (\"+this.shape+\") must match\");yt().disposeTensor(this),this.dataId=t.dataId,yt().incRef(this,null)},n.prototype.dispose=function(){yt().disposeVariable(this),this.isDisposedInternal=!0},n}(wt);Object.defineProperty(St,Symbol.hasInstance,{value:function(t){return t instanceof wt&&null!=t.assign&&t.assign instanceof Function}}),function(t){t.R0=\"R0\",t.R1=\"R1\",t.R2=\"R2\",t.R3=\"R3\",t.R4=\"R4\",t.R5=\"R5\",t.R6=\"R6\"}(Ct||(Ct={})),function(t){t.float32=\"float32\",t.int32=\"int32\",t.bool=\"int32\",t.complex64=\"complex64\"}(Et||(Et={})),function(t){t.float32=\"float32\",t.int32=\"int32\",t.bool=\"bool\",t.complex64=\"complex64\"}(Rt||(Rt={})),function(t){t.float32=\"float32\",t.int32=\"float32\",t.bool=\"float32\",t.complex64=\"complex64\"}(It||(It={})),function(t){t.float32=\"complex64\",t.int32=\"complex64\",t.bool=\"complex64\",t.complex64=\"complex64\"}(kt||(kt={}));var At={float32:It,int32:Et,bool:Rt,complex64:kt};function Tt(t,e){if(\"string\"===t||\"string\"===e){if(\"string\"===t&&\"string\"===e)return\"string\";throw new Error(\"Can not upcast \"+t+\" with \"+e)}return At[t][e]}function Dt(t){return Tt(t,\"int32\")}function Nt(t,e){if(t.dtype===e.dtype)return[t,e];var n=Tt(t.dtype,e.dtype);return[t.cast(n),e.cast(n)]}function Ft(t,e){C(t.dtype===e.dtype,(function(){return\"The dtypes of the first(\"+t.dtype+\") and second(\"+e.dtype+\") input must match\"}))}function _t(t){var e=[];return function t(e,n,r){if(null==e)return;if(e instanceof wt)return void n.push(e);if(o=e,!Array.isArray(o)&&\"object\"!=typeof o)return;var o;var a=e;for(var i in a){var s=a[i];r.has(s)||(r.add(s),t(s,n,r))}}(t,e,new Set),e}var Ot,Mt=Object.freeze({makeTypesMatch:Nt,assertTypesMatch:Ft,isTensorInList:function(t,e){return e.some((function(e){return e.id===t.id}))},getTensorsInContainer:_t}),Bt=function(){function t(){this.registeredVariables={},this.nextTapeNodeId=0,this.numBytes=0,this.numTensors=0,this.numStringTensors=0,this.numDataBuffers=0,this.gradientDepth=0,this.kernelDepth=0,this.scopeStack=[],this.numDataMovesStack=[],this.nextScopeId=0,this.tensorInfo=new WeakMap,this.profiling=!1,this.activeProfile={newBytes:0,newTensors:0,peakBytes:0,kernels:[],result:null}}return t.prototype.dispose=function(){for(var t in this.registeredVariables)this.registeredVariables[t].dispose()},t}(),Pt=function(){function t(t){this.ENV=t,this.registry={},this.registryFactory={},this.pendingBackendInitId=0,this.state=new Bt}return t.prototype.ready=function(){return n(this,void 0,void 0,(function(){var t,e,n;return r(this,(function(r){switch(r.label){case 0:if(null!=this.pendingBackendInit)return[2,this.pendingBackendInit.then((function(){}))];if(null!=this.backendInstance)return[2];t=this.getSortedBackends(),e=0,r.label=1;case 1:return e<t.length?(n=t[e],[4,this.initializeBackend(n).success]):[3,5];case 2:return r.sent()?[4,this.setBackend(n)]:[3,4];case 3:return r.sent(),[2];case 4:return e++,[3,1];case 5:throw new Error(\"Could not initialize any backends, all backend initializations failed.\")}}))}))},Object.defineProperty(t.prototype,\"backend\",{get:function(){if(null!=this.pendingBackendInit)throw new Error(\"Backend '\"+this.backendName+\"' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods\");if(null==this.backendInstance){var t=this.initializeBackendsAndReturnBest(),e=t.name;if(t.asyncInit)throw new Error(\"The highest priority backend '\"+e+\"' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods\");this.setBackend(e)}return this.backendInstance},enumerable:!0,configurable:!0}),t.prototype.backendNames=function(){return Object.keys(this.registryFactory)},t.prototype.findBackend=function(t){if(!(t in this.registry)){if(!(t in this.registryFactory))return null;if(this.initializeBackend(t).asyncInit)return null}return this.registry[t]},t.prototype.findBackendFactory=function(t){return t in this.registryFactory?this.registryFactory[t].factory:null},t.prototype.registerBackend=function(t,e,n){return void 0===n&&(n=1),t in this.registryFactory?(console.warn(t+\" backend was already registered. Reusing existing backend factory.\"),!1):(this.registryFactory[t]={factory:e,priority:n},!0)},t.prototype.setBackend=function(t){return n(this,void 0,void 0,(function(){var e,n,o;return r(this,(function(r){switch(r.label){case 0:if(null==this.registryFactory[t])throw new Error(\"Backend name '\"+t+\"' not found in registry\");return this.backendName=t,null!=this.registry[t]?[3,4]:(this.backendInstance=null,e=this.initializeBackend(t),n=e.success,e.asyncInit?[4,n]:[3,2]);case 1:return o=r.sent(),[3,3];case 2:o=n,r.label=3;case 3:if(!o)return[2,!1];r.label=4;case 4:return this.backendInstance=this.registry[t],this.setupRegisteredKernels(),this.profiler=new ut(this.backendInstance),[2,!0]}}))}))},t.prototype.setupRegisteredKernels=function(){var t=this;f(this.backendName).forEach((function(e){null!=e.setupFunc&&e.setupFunc(t.backendInstance)}))},t.prototype.disposeRegisteredKernels=function(t){var e=this;f(t).forEach((function(n){null!=n.disposeFunc&&n.disposeFunc(e.registry[t])}))},t.prototype.initializeBackend=function(t){var e=this,n=this.registryFactory[t];if(null==n)throw new Error(\"Cannot initialize backend \"+t+\", no registration found.\");try{var r=n.factory();if(Promise.resolve(r)===r){var o=++this.pendingBackendInitId,a=r.then((function(n){return!(o<e.pendingBackendInitId)&&(e.registry[t]=n,e.pendingBackendInit=null,!0)})).catch((function(n){return!(o<e.pendingBackendInitId)&&(e.pendingBackendInit=null,console.warn(\"Initialization of backend \"+t+\" failed\"),console.warn(n.stack||n.message),!1)}));return this.pendingBackendInit=a,{success:a,asyncInit:!0}}return this.registry[t]=r,{success:!0,asyncInit:!1}}catch(e){return console.warn(\"Initialization of backend \"+t+\" failed\"),console.warn(e.stack||e.message),{success:!1,asyncInit:!1}}},t.prototype.removeBackend=function(t){if(!(t in this.registryFactory))throw new Error(t+\" backend not found in registry\");this.backendName===t&&null!=this.pendingBackendInit&&this.pendingBackendInitId++,t in this.registry&&(this.disposeRegisteredKernels(t),this.registry[t].dispose(),delete this.registry[t]),delete this.registryFactory[t],this.backendName===t&&(this.pendingBackendInit=null,this.backendName=null,this.backendInstance=null)},t.prototype.getSortedBackends=function(){var t=this;if(0===Object.keys(this.registryFactory).length)throw new Error(\"No backend found in registry.\");return Object.keys(this.registryFactory).sort((function(e,n){return t.registryFactory[n].priority-t.registryFactory[e].priority}))},t.prototype.initializeBackendsAndReturnBest=function(){for(var t=this.getSortedBackends(),e=0;e<t.length;e++){var n=t[e],r=this.initializeBackend(n),o=r.success,a=r.asyncInit;if(a||o)return{name:n,asyncInit:a}}throw new Error(\"Could not initialize any backends, all backend initializations failed.\")},t.prototype.moveData=function(t,e){var n=this.state.tensorInfo.get(e),r=n.backend,o=this.readSync(e);r.disposeData(e),n.backend=t,t.move(e,o,n.shape,n.dtype),this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack[this.state.numDataMovesStack.length-1]++},t.prototype.tidy=function(t,e){var n,r=this,o=null;if(null==e){if(\"function\"!=typeof t)throw new Error(\"Please provide a function to tidy()\");e=t}else{if(\"string\"!=typeof t&&!(t instanceof String))throw new Error(\"When calling with two arguments, the first argument to tidy() must be a string\");if(\"function\"!=typeof e)throw new Error(\"When calling with two arguments, the 2nd argument to tidy() must be a function\");o=t}return this.scopedRun((function(){return r.startScope(o)}),(function(){return r.endScope(n)}),(function(){return(n=e())instanceof Promise&&console.error(\"Cannot return a Promise inside of tidy.\"),n}))},t.prototype.scopedRun=function(t,e,n){t();try{var r=n();return e(),r}catch(t){throw e(),t}},t.prototype.nextTensorId=function(){return t.nextTensorId++},t.prototype.nextVariableId=function(){return t.nextVariableId++},t.prototype.clone=function(t){var e=this.makeTensorFromDataId(t.dataId,t.shape,t.dtype),n={x:t};return this.addTapeNode(this.state.activeScope.name,n,[e],(function(t){return{x:function(){return t.toFloat()}}}),[],{}),e},t.prototype.runKernel=function(t,e,n,r,o){return this.runKernelFunc(null,e,null,t,n,r,o)},t.prototype.shouldCheckForMemLeaks=function(){return this.ENV.getBool(\"IS_TEST\")},t.prototype.checkKernelForMemLeak=function(t,e,n){var r=this.backend.numDataIds(),o=0;n.forEach((function(t){o+=\"complex64\"===t.dtype?3:1}));var a=this.state.numDataMovesStack[this.state.numDataMovesStack.length-1],i=r-e-o-a;if(i>0)throw new Error(\"Backend '\"+this.backendName+\"' has an internal memory leak (\"+i+\" data ids) after running '\"+t+\"'\")},t.prototype.runKernelFunc=function(t,e,n,r,o,a,i){var s,u=this,c=[],h=this.isTapeOn();null==r&&(r=null!=this.state.activeScope?this.state.activeScope.name:\"\");var f,d=this.state.numBytes,p=this.state.numTensors;this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack.push(0);var v,g=l(r,this.backendName);if(null!=g)f=function(){var t=u.backend.numDataIds();v=g.kernelFunc({inputs:e,attrs:o,backend:u.backend});var n=Array.isArray(v)?v:[v];u.shouldCheckForMemLeaks()&&u.checkKernelForMemLeak(r,t,n);var s=n.map((function(t){var e=t.dataId,n=t.shape,r=t.dtype;return u.makeTensorFromDataId(e,n,r)}));if(h){var l=u.getTensorsForGradient(r,e,s);if(null==l){null==i&&(i=[]);var f=s.filter((function(t,e){return i[e]}));l=(a||[]).slice().concat(f)}c=u.saveTensorsForBackwardMode(l)}return s};else{var m=function(t){h&&(c=t.map((function(t){return u.keep(u.clone(t))})))};f=function(){var e=u.backend.numDataIds();v=u.tidy((function(){return t(u.backend,m)}));var n=Array.isArray(v)?v:[v];return u.shouldCheckForMemLeaks()&&u.checkKernelForMemLeak(r,e,n),n}}return this.scopedRun((function(){return u.state.kernelDepth++}),(function(){return u.state.kernelDepth--}),(function(){s=u.ENV.getBool(\"DEBUG\")?u.profiler.profileKernel(r,e,(function(){return f()})):f()})),h&&this.addTapeNode(r,e,s,n,c,o),this.state.profiling&&this.state.activeProfile.kernels.push({name:r,bytesAdded:this.state.numBytes-d,totalBytesSnapshot:this.state.numBytes,tensorsAdded:this.state.numTensors-p,totalTensorsSnapshot:this.state.numTensors,inputShapes:Object.keys(e).map((function(t){return e[t].shape})),outputShapes:s.map((function(t){return t.shape}))}),Array.isArray(v)?s:s[0]},t.prototype.saveTensorsForBackwardMode=function(t){var e=this;return t.map((function(t){return e.keep(e.clone(t))}))},t.prototype.getTensorsForGradient=function(t,e,n){var r=h(t);if(null!=r){var o=r.inputsToSave||[],a=r.outputsToSave||[],i=void 0;r.saveAllInputs?(C(Array.isArray(e),(function(){return\"saveAllInputs is true, expected inputs to be an array.\"})),i=Object.keys(e).map((function(t){return e[t]}))):i=o.map((function(t){return e[t]}));var s=n.filter((function(t,e){return a[e]}));return i.concat(s)}return null},t.prototype.makeTensor=function(t,e,n,r){if(null==t)throw new Error(\"Values passed to engine.makeTensor() are null\");n=n||\"float32\",r=r||this.backend;var o=t;\"string\"===n&&H(t[0])&&(o=t.map((function(t){return rt(t)})));var a=r.write(o,e,n),i=new wt(e,n,a,this.nextTensorId());if(this.incRef(i,r),\"string\"===n){var s=this.state.tensorInfo.get(a),u=G(o);this.state.numBytes+=u-s.bytes,s.bytes=u}return i},t.prototype.makeTensorFromDataId=function(t,e,n,r){var o=new wt(e,n=n||\"float32\",t,this.nextTensorId());return this.incRef(o,r),o},t.prototype.makeVariable=function(t,e,n,r){void 0===e&&(e=!0),n=n||this.nextVariableId().toString(),null!=r&&r!==t.dtype&&(t=t.asType(r));var o=new St(t,e,n,this.nextTensorId());if(null!=this.state.registeredVariables[o.name])throw new Error(\"Variable with name \"+o.name+\" was already registered\");return this.state.registeredVariables[o.name]=o,this.incRef(o,this.backend),o},t.prototype.incRef=function(t,e){var n=this.state.tensorInfo.has(t.dataId)?this.state.tensorInfo.get(t.dataId).refCount:0;if(this.state.numTensors++,\"string\"===t.dtype&&this.state.numStringTensors++,0===n){this.state.numDataBuffers++;var r=0;\"complex64\"!==t.dtype&&\"string\"!==t.dtype&&(r=t.size*z(t.dtype)),this.state.tensorInfo.set(t.dataId,{backend:e||this.backend,dtype:t.dtype,shape:t.shape,bytes:r,refCount:0}),this.state.numBytes+=r}this.state.tensorInfo.get(t.dataId).refCount++,t instanceof St||this.track(t)},t.prototype.disposeTensor=function(t){if(this.state.tensorInfo.has(t.dataId)){this.state.numTensors--,\"string\"===t.dtype&&this.state.numStringTensors--;var e=this.state.tensorInfo.get(t.dataId);e.refCount<=1?(\"complex64\"!==t.dtype&&(this.state.numBytes-=e.bytes),this.state.numDataBuffers--,e.backend.disposeData(t.dataId),this.state.tensorInfo.delete(t.dataId)):this.state.tensorInfo.get(t.dataId).refCount--}},t.prototype.disposeVariables=function(){for(var t in this.state.registeredVariables){var e=this.state.registeredVariables[t];this.disposeVariable(e)}},t.prototype.disposeVariable=function(t){this.disposeTensor(t),null!=this.state.registeredVariables[t.name]&&delete this.state.registeredVariables[t.name]},t.prototype.memory=function(){var t=this.backend.memory();return t.numTensors=this.state.numTensors,t.numDataBuffers=this.state.numDataBuffers,t.numBytes=this.state.numBytes,this.state.numStringTensors>0&&(t.unreliable=!0,null==t.reasons&&(t.reasons=[]),t.reasons.push(\"Memory usage by string tensors is approximate (2 bytes per character)\")),t},t.prototype.profile=function(t){return n(this,void 0,void 0,(function(){var e,n;return r(this,(function(r){return this.state.profiling=!0,e=this.state.numBytes,n=this.state.numTensors,this.state.activeProfile.kernels=[],this.state.activeProfile.result=t(),this.state.profiling=!1,this.state.activeProfile.peakBytes=Math.max.apply(Math,this.state.activeProfile.kernels.map((function(t){return t.totalBytesSnapshot}))),this.state.activeProfile.newBytes=this.state.numBytes-e,this.state.activeProfile.newTensors=this.state.numTensors-n,[2,this.state.activeProfile]}))}))},t.prototype.isTapeOn=function(){return this.state.gradientDepth>0&&0===this.state.kernelDepth},t.prototype.addTapeNode=function(t,e,n,r,o,a){var i=this,s={id:this.state.nextTapeNodeId++,kernelName:t,inputs:e,outputs:n,saved:o},u=h(t);null!=u&&(r=u.gradFunc),null!=r&&(s.gradient=function(t){return t=t.map((function(t,e){if(null==t){var r=n[e],o=tt(r.size,r.dtype);return i.makeTensor(o,r.shape,r.dtype)}return t})),r(t.length>1?t:t[0],o,a)}),this.state.activeTape.push(s)},t.prototype.keep=function(t){return t.kept=!0,t},t.prototype.startTape=function(){0===this.state.gradientDepth&&(this.state.activeTape=[]),this.state.gradientDepth++},t.prototype.endTape=function(){this.state.gradientDepth--},t.prototype.startScope=function(t){var e={track:[],name:\"unnamed scope\",id:this.state.nextScopeId++};t&&(e.name=t),this.state.scopeStack.push(e),this.state.activeScope=e},t.prototype.endScope=function(t){for(var e=this,n=_t(t),r=new Set(n.map((function(t){return t.id}))),o=0;o<this.state.activeScope.track.length;o++){var a=this.state.activeScope.track[o];a.kept||r.has(a.id)||a.dispose()}var i=this.state.scopeStack.pop();this.state.activeScope=0===this.state.scopeStack.length?null:this.state.scopeStack[this.state.scopeStack.length-1],n.forEach((function(t){t.kept||t.scopeId!==i.id||e.track(t)}))},t.prototype.gradients=function(t,e,n,r){var o=this;if(void 0===r&&(r=!1),C(e.length>0,(function(){return\"gradients() received an empty list of xs.\"})),null!=n&&\"float32\"!==n.dtype)throw new Error(\"dy must have 'float32' dtype, but has '\"+n.dtype+\"'\");var a=this.scopedRun((function(){return o.startTape()}),(function(){return o.endTape()}),(function(){return o.tidy(\"forward\",t)}));C(a instanceof wt,(function(){return\"The result y returned by f() must be a tensor.\"}));var i=function(t,e,n){for(var r={},o={},a=0;a<e.length;a++)r[e[a].id]=!0;for(a=0;a<t.length;a++){var i=(p=t[a]).inputs;for(var s in i){for(var u=i[s],c=!1,l=0;l<e.length;l++)if(r[u.id]){p.outputs.forEach((function(t){return r[t.id]=!0})),c=!0,o[p.id]=!0;break}if(c)break}}var h={};h[n.id]=!0;var f={};for(a=t.length-1;a>=0;a--)for(i=(p=t[a]).inputs,l=0;l<p.outputs.length;l++)if(h[p.outputs[l].id]){for(var s in i)h[i[s].id]=!0,f[p.id]=!0;break}var d=[];for(a=0;a<t.length;a++){var p;if(o[(p=t[a]).id]&&f[p.id]){var v={};for(var s in p.inputs){var g=p.inputs[s];r[g.id]&&(v[s]=g)}var m=Object.assign({},p);m.inputs=v,m.outputs=p.outputs,d.push(m)}}return d}(this.state.activeTape,e,a);if(!r&&0===i.length&&e.length>0)throw new Error(\"Cannot compute gradient of y=f(x) with respect to x. Make sure that the f you passed encloses all operations that lead from x to y.\");return this.tidy(\"backward\",(function(){var t,r,s={};s[a.id]=null==n?(t=a.shape,r=Z(k(t),\"float32\"),Lt.makeTensor(r,t,\"float32\")):n,function(t,e,n){for(var r=function(r){var o=e[r],a=[];if(o.outputs.forEach((function(e){var n=t[e.id];null!=n?a.push(n):a.push(null)})),null==o.gradient)throw new Error(\"Cannot compute gradient: gradient function not found for \"+o.kernelName+\".\");var i=o.gradient(a),s=function(e){if(!(e in i))throw new Error(\"Cannot backprop through input \"+e+\". Available gradients found: \"+Object.keys(i)+\".\");var r=n((function(){return i[e]()}));if(\"float32\"!==r.dtype)throw new Error(\"Error in gradient for op \"+o.kernelName+\". The gradient of input \"+e+\" must have 'float32' dtype, but has '\"+r.dtype+\"'\");var a=o.inputs[e];if(!S(r.shape,a.shape))throw new Error(\"Error in gradient for op \"+o.kernelName+\". The gradient of input '\"+e+\"' has shape '\"+r.shape+\"', which does not match the shape of the input '\"+a.shape+\"'\");if(null==t[a.id])t[a.id]=r;else{var s=t[a.id];t[a.id]=s.add(r),s.dispose()}};for(var u in o.inputs)s(u)},o=e.length-1;o>=0;o--)r(o)}(s,i,(function(t){return o.tidy(t)}));var u=e.map((function(t){return s[t.id]}));return 0===o.state.gradientDepth&&(o.state.activeTape.forEach((function(t){for(var e=0,n=t.saved;e<n.length;e++){n[e].dispose()}})),o.state.activeTape=null),{value:a,grads:u}}))},t.prototype.customGrad=function(t){var e=this;return C(X(t),(function(){return\"The f passed in customGrad(f) must be a function.\"})),function(){for(var n,r=[],o=0;o<arguments.length;o++)r[o]=arguments[o];C(r.every((function(t){return t instanceof wt})),(function(){return\"The args passed in customGrad(f)(x1, x2,...) must all be tensors\"}));var a={};return r.forEach((function(t,e){a[e]=t})),e.runKernelFunc((function(e,o){return C((n=t.apply(void 0,r.concat([o]))).value instanceof wt,(function(){return\"The function f passed in customGrad(f) must return an object where `obj.value` is a tensor\"})),C(X(n.gradFunc),(function(){return\"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function.\"})),n.value}),a,(function(t,e){var o=n.gradFunc(t,e),a=Array.isArray(o)?o:[o];C(a.length===r.length,(function(){return\"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns the same number of tensors as inputs passed to f(...).\"})),C(a.every((function(t){return t instanceof wt})),(function(){return\"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns a list of only tensors.\"}));var i={};return a.forEach((function(t,e){i[e]=function(){return t}})),i}))}},t.prototype.readSync=function(t){return this.state.tensorInfo.get(t).backend.readSync(t)},t.prototype.read=function(t){return this.state.tensorInfo.get(t).backend.read(t)},t.prototype.time=function(t){return n(this,void 0,void 0,(function(){var e,n;return r(this,(function(r){switch(r.label){case 0:return e=et(),[4,this.backend.time(t)];case 1:return(n=r.sent()).wallMs=et()-e,[2,n]}}))}))},t.prototype.track=function(t){return null!=this.state.activeScope&&(t.scopeId=this.state.activeScope.id,this.state.activeScope.track.push(t)),t},Object.defineProperty(t.prototype,\"registeredVariables\",{get:function(){return this.state.registeredVariables},enumerable:!0,configurable:!0}),t.prototype.reset=function(){for(var t in this.pendingBackendInitId++,this.state.dispose(),this.ENV.reset(),this.state=new Bt,this.registry)this.disposeRegisteredKernels(t),this.registry[t].dispose(),delete this.registry[t];this.backendName=null,this.backendInstance=null,this.pendingBackendInit=null},t.nextTensorId=0,t.nextVariableId=0,t}();var Lt=function(){var t=function(){if(null==Ot){var t=void 0;if(\"undefined\"!=typeof window)t=window;else if(\"undefined\"!=typeof global)t=global;else if(\"undefined\"!=typeof process)t=process;else{if(\"undefined\"==typeof self)throw new Error(\"Could not find a global object\");t=self}Ot=t}return Ot}();if(null==t._tfengine){var e=new o(t);t._tfengine=new Pt(e)}return function(t){s=t}(t._tfengine.ENV),yt=function(){return t._tfengine},t._tfengine}();function Wt(){return\"undefined\"!=typeof window&&null!=window.document||\"undefined\"!=typeof WorkerGlobalScope}var Ut=i();Ut.registerFlag(\"DEBUG\",(function(){return!1}),(function(t){t&&console.warn(\"Debugging mode is ON. The output of every math call will be downloaded to CPU and checked for NaNs. This significantly impacts performance.\")})),Ut.registerFlag(\"IS_BROWSER\",(function(){return Wt()})),Ut.registerFlag(\"IS_NODE\",(function(){return\"undefined\"!=typeof process&&void 0!==process.versions&&void 0!==process.versions.node})),Ut.registerFlag(\"IS_CHROME\",(function(){return\"undefined\"!=typeof navigator&&null!=navigator&&null!=navigator.userAgent&&/Chrome/.test(navigator.userAgent)&&/Google Inc/.test(navigator.vendor)})),Ut.registerFlag(\"PROD\",(function(){return!1})),Ut.registerFlag(\"TENSORLIKE_CHECK_SHAPE_CONSISTENCY\",(function(){return Ut.getBool(\"DEBUG\")})),Ut.registerFlag(\"DEPRECATION_WARNINGS_ENABLED\",(function(){return!0})),Ut.registerFlag(\"IS_TEST\",(function(){return!1}));var Vt,zt,Gt,Ht={},qt={alpha:!1,antialias:!1,premultipliedAlpha:!1,preserveDrawingBuffer:!1,depth:!1,stencil:!1,failIfMajorPerformanceCaveat:!0};function Kt(t,e){Ht[t]=e}function jt(t){t in Ht||(Ht[t]=function(t){if(1!==t&&2!==t)throw new Error(\"Cannot get WebGL rendering context, WebGL is disabled.\");var e=function(t){if(\"undefined\"!=typeof OffscreenCanvas&&2===t)return new OffscreenCanvas(300,150);if(\"undefined\"!=typeof document)return document.createElement(\"canvas\");throw new Error(\"Cannot create a canvas in this context\")}(t);if(e.addEventListener(\"webglcontextlost\",(function(e){e.preventDefault(),delete Ht[t]}),!1),1===t)return e.getContext(\"webgl\",qt)||e.getContext(\"experimental-webgl\",qt);return e.getContext(\"webgl2\",qt)}(t));var e=Ht[t];return e.isContextLost()?(delete Ht[t],jt(t)):(e.disable(e.DEPTH_TEST),e.disable(e.STENCIL_TEST),e.disable(e.BLEND),e.disable(e.DITHER),e.disable(e.POLYGON_OFFSET_FILL),e.disable(e.SAMPLE_COVERAGE),e.enable(e.SCISSOR_TEST),e.enable(e.CULL_FACE),e.cullFace(e.BACK),Ht[t])}function Xt(t,e){return[e,t]}function Yt(t){var e=k(t);return D(Math.ceil(e/4))}function $t(t,e){return[Math.max(1,Math.ceil(e/2)),Math.max(1,Math.ceil(t/2))]}function Qt(t,e){var n,r,o,a,s,u,c,l,h,f=t;return 2===i().getNumber(\"WEBGL_VERSION\")?(n=f.R32F,r=f.R16F,o=f.RGBA16F,a=f.RGBA32F,s=f.RED,u=4,c=1,l=f.HALF_FLOAT,h=f.FLOAT):(n=t.RGBA,r=t.RGBA,o=t.RGBA,a=f.RGBA,s=t.RGBA,u=4,c=4,l=null!=e?e.HALF_FLOAT_OES:null,h=t.FLOAT),{internalFormatFloat:n,internalFormatHalfFloat:r,internalFormatPackedHalfFloat:o,internalFormatPackedFloat:a,textureFormatFloat:s,downloadTextureFormat:t.RGBA,downloadUnpackNumChannels:u,defaultNumChannels:c,textureTypeHalfFloat:l,textureTypeFloat:h}}function Jt(t,e,n){var r=n();return e&&function(t){var e=t.getError();if(e!==t.NO_ERROR)throw new Error(\"WebGL Error: \"+ne(t,e))}(t),r}!function(t){t[t.DENSE=0]=\"DENSE\",t[t.SHARED_BATCH=1]=\"SHARED_BATCH\"}(Vt||(Vt={})),function(t){t[t.RENDER=0]=\"RENDER\",t[t.UPLOAD=1]=\"UPLOAD\",t[t.PIXELS=2]=\"PIXELS\",t[t.DOWNLOAD=3]=\"DOWNLOAD\"}(zt||(zt={})),function(t){t[t.UNPACKED_FLOAT16=0]=\"UNPACKED_FLOAT16\",t[t.UNPACKED_FLOAT32=1]=\"UNPACKED_FLOAT32\",t[t.PACKED_4X1_UNSIGNED_BYTE=2]=\"PACKED_4X1_UNSIGNED_BYTE\",t[t.PACKED_2X2_FLOAT32=3]=\"PACKED_2X2_FLOAT32\",t[t.PACKED_2X2_FLOAT16=4]=\"PACKED_2X2_FLOAT16\"}(Gt||(Gt={}));var Zt=5.96e-8,te=65504;function ee(t){return!!(i().getBool(\"WEBGL_RENDER_FLOAT32_ENABLED\")||0===t||Zt<Math.abs(t)&&Math.abs(t)<te)}function ne(t,e){switch(e){case t.NO_ERROR:return\"NO_ERROR\";case t.INVALID_ENUM:return\"INVALID_ENUM\";case t.INVALID_VALUE:return\"INVALID_VALUE\";case t.INVALID_OPERATION:return\"INVALID_OPERATION\";case t.INVALID_FRAMEBUFFER_OPERATION:return\"INVALID_FRAMEBUFFER_OPERATION\";case t.OUT_OF_MEMORY:return\"OUT_OF_MEMORY\";case t.CONTEXT_LOST_WEBGL:return\"CONTEXT_LOST_WEBGL\";default:return\"Unknown error code \"+e}}function re(t,e,n){return ke(t,e,(function(){return t.getExtension(n)}),'Extension \"'+n+'\" not supported on this browser.')}function oe(t,e,n){var r=ke(t,e,(function(){return t.createShader(t.VERTEX_SHADER)}),\"Unable to create vertex WebGLShader.\");if(Jt(t,e,(function(){return t.shaderSource(r,n)})),Jt(t,e,(function(){return t.compileShader(r)})),!1===t.getShaderParameter(r,t.COMPILE_STATUS))throw console.log(t.getShaderInfoLog(r)),new Error(\"Failed to compile vertex shader.\");return r}function ae(t,e,n){var r=ke(t,e,(function(){return t.createShader(t.FRAGMENT_SHADER)}),\"Unable to create fragment WebGLShader.\");if(Jt(t,e,(function(){return t.shaderSource(r,n)})),Jt(t,e,(function(){return t.compileShader(r)})),!1===t.getShaderParameter(r,t.COMPILE_STATUS))throw function(t,e){var n=ue.exec(e);if(null==n)return console.log(\"Couldn't parse line number in error: \"+e),void console.log(t);for(var r=+n[1],o=t.split(\"\\n\"),a=o.length.toString().length+2,i=o.map((function(t,e){return N((e+1).toString(),a)+t})),s=0,u=0;u<i.length;u++)s=Math.max(i[u].length,s);var c=i.slice(0,r-1),l=i.slice(r-1,r),h=i.slice(r);console.log(c.join(\"\\n\")),console.log(e.split(\"\\n\")[0]),console.log(\"%c \"+N(l[0],s),\"border:1px solid red; background-color:#e3d2d2; color:#a61717\"),console.log(h.join(\"\\n\"))}(n,t.getShaderInfoLog(r)),new Error(\"Failed to compile fragment shader.\");return r}var ie,se,ue=/ERROR: [0-9]+:([0-9]+):/g;function ce(t,e){return ke(t,e,(function(){return t.createProgram()}),\"Unable to create WebGLProgram.\")}function le(t,e,n){if(Jt(t,e,(function(){return t.linkProgram(n)})),!1===t.getProgramParameter(n,t.LINK_STATUS))throw console.log(t.getProgramInfoLog(n)),new Error(\"Failed to link vertex and fragment shaders.\")}function he(t,e,n){if(Jt(t,e,(function(){return t.validateProgram(n)})),!1===t.getProgramParameter(n,t.VALIDATE_STATUS))throw console.log(t.getProgramInfoLog(n)),new Error(\"Shader program validation failed.\")}function fe(t,e,n){var r=ke(t,e,(function(){return t.createBuffer()}),\"Unable to create WebGLBuffer\");return Jt(t,e,(function(){return t.bindBuffer(t.ARRAY_BUFFER,r)})),Jt(t,e,(function(){return t.bufferData(t.ARRAY_BUFFER,n,t.STATIC_DRAW)})),r}function de(t,e,n){var r=ke(t,e,(function(){return t.createBuffer()}),\"Unable to create WebGLBuffer\");return Jt(t,e,(function(){return t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,r)})),Jt(t,e,(function(){return t.bufferData(t.ELEMENT_ARRAY_BUFFER,n,t.STATIC_DRAW)})),r}function pe(t,e){return ke(t,e,(function(){return t.createTexture()}),\"Unable to create WebGLTexture.\")}function ve(t,e){var n=i().getNumber(\"WEBGL_MAX_TEXTURE_SIZE\");if(t<=0||e<=0){var r=\"[\"+t+\"x\"+e+\"]\";throw new Error(\"Requested texture size \"+r+\" is invalid.\")}if(t>n||e>n){r=\"[\"+t+\"x\"+e+\"]\";throw new Error(\"Requested texture size \"+r+\" greater than WebGL maximum on this browser / GPU \"+(\"[\"+n+\"x\"+n+\"]\")+\".\")}}function ge(t,e){return ke(t,e,(function(){return t.createFramebuffer()}),\"Unable to create WebGLFramebuffer.\")}function me(t,e,n,r,o,a,i,s){var u=t.getAttribLocation(n,r);return-1!==u&&(Jt(t,e,(function(){return t.bindBuffer(t.ARRAY_BUFFER,o)})),Jt(t,e,(function(){return t.vertexAttribPointer(u,a,t.FLOAT,!1,i,s)})),Jt(t,e,(function(){return t.enableVertexAttribArray(u)})),!0)}function ye(t,e,n,r){Se(t,r),Jt(t,e,(function(){return t.activeTexture(t.TEXTURE0+r)})),Jt(t,e,(function(){return t.bindTexture(t.TEXTURE_2D,n)}))}function xe(t,e,n,r){return ke(t,e,(function(){return t.getUniformLocation(n,r)}),'uniform \"'+r+'\" not present in program.')}function be(t,e,n){return t.getUniformLocation(e,n)}function we(t,e,n,r,o,a){Jt(t,e,(function(){return ye(t,e,r,a)})),Jt(t,e,(function(){return t.uniform1i(o,a)}))}function Ce(t,e,n,r){Jt(t,e,(function(){return t.bindFramebuffer(t.FRAMEBUFFER,r)})),Jt(t,e,(function(){return t.framebufferTexture2D(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.TEXTURE_2D,n,0)}))}function Ee(t,e,n){Jt(t,e,(function(){return t.bindFramebuffer(t.FRAMEBUFFER,n)})),Jt(t,e,(function(){return t.framebufferTexture2D(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.TEXTURE_2D,null,0)}))}function Re(t){var e=t.checkFramebufferStatus(t.FRAMEBUFFER);if(e!==t.FRAMEBUFFER_COMPLETE)throw new Error(\"Error binding framebuffer: \"+Ie(t,e))}function Ie(t,e){switch(e){case t.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:return\"FRAMEBUFFER_INCOMPLETE_ATTACHMENT\";case t.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:return\"FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT\";case t.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:return\"FRAMEBUFFER_INCOMPLETE_DIMENSIONS\";case t.FRAMEBUFFER_UNSUPPORTED:return\"FRAMEBUFFER_UNSUPPORTED\";default:return\"unknown error \"+e}}function ke(t,e,n,r){var o=Jt(t,e,(function(){return n()}));if(null==o)throw new Error(r);return o}function Se(t,e){var n=t.MAX_COMBINED_TEXTURE_IMAGE_UNITS-1,r=e+t.TEXTURE0;if(r<t.TEXTURE0||r>n)throw new Error(\"textureUnit must be in \"+(\"[gl.TEXTURE0, gl.TEXTURE\"+n+\"]\")+\".\")}function Ae(t,e){return void 0===e&&(e=2),k(t.slice(0,t.length-e))}function Te(t){if(0===t.length)throw Error(\"Cannot get rows and columns of an empty shape array.\");return[t.length>1?t[t.length-2]:1,t[t.length-1]]}function De(t){var e=[1,1,1];return 0===t.length||1===t.length&&1===t[0]||(e=[Ae(t)].concat(Te(t))),e}function Ne(t,e){var n;void 0===e&&(e=!1);var r=i().getNumber(\"WEBGL_MAX_TEXTURE_SIZE\");if(e&&(r*=2,1===(t=t.map((function(e,n){return n>=t.length-2?b(t[n]):t[n]}))).length&&(t=[2,t[0]])),2!==t.length){var o=M(t);t=o.newShape}var a=k(t);if(t.length<=1&&a<=r)return[1,a];if(2===t.length&&t[0]<=r&&t[1]<=r)return t;if(3===t.length&&t[0]*t[1]<=r&&t[2]<=r)return[t[0]*t[1],t[2]];if(3===t.length&&t[0]<=r&&t[1]*t[2]<=r)return[t[0],t[1]*t[2]];if(4===t.length&&t[0]*t[1]*t[2]<=r&&t[3]<=r)return[t[0]*t[1]*t[2],t[3]];if(4===t.length&&t[0]<=r&&t[1]*t[2]*t[3]<=r)return[t[0],t[1]*t[2]*t[3]];if(e){var s=Ae(t),u=2,c=2;return t.length&&(u=(n=Te(t))[0],c=n[1]),D(a=s*(u/2)*(c/2)).map((function(t){return 2*t}))}return D(a)}function Fe(t){return t%2==0}function _e(t,e){if(S(t=t.slice(-2),e=e.slice(-2)))return!0;if(!t.length||!e.length)return!0;if(0===t[0]||0===t[1]||0===e[0]||0===e[1])return!0;if(t.length!==e.length){var n=t.slice(-1)[0],r=e.slice(-1)[0];if(n===r)return!0;if(Fe(n)&&Fe(r)&&(1===t[0]||1===e[0]))return!0}return t[1]===e[1]&&Fe(t[0])&&Fe(e[0])}function Oe(t){if(null==ie){var e=jt(t);ie=e.getParameter(e.MAX_TEXTURE_SIZE)}return ie}function Me(t){if(null==se){var e=jt(t);se=e.getParameter(e.MAX_TEXTURE_IMAGE_UNITS)}return Math.min(16,se)}function Be(t){if(0===t)return 0;var e=jt(t);return Pe(e,\"EXT_disjoint_timer_query_webgl2\")&&2===t?2:Pe(e,\"EXT_disjoint_timer_query\")?1:0}function Pe(t,e){return null!=t.getExtension(e)}function Le(t){try{if(null!=jt(t))return!0}catch(t){return!1}return!1}function We(t){if(0===t)return!1;var e=jt(t);if(1===t){if(!Pe(e,\"OES_texture_float\"))return!1}else if(!Pe(e,\"EXT_color_buffer_float\"))return!1;return Ve(e)}function Ue(t){if(0===t)return!1;var e=jt(t);if(1!==t){if(Pe(e,\"EXT_color_buffer_float\"))return Ve(e);if(Pe(e,\"EXT_color_buffer_half_float\")){var n=e.getExtension(\"EXT_color_buffer_half_float\");return function(t,e){var n=Qt(t,e),r=t.createTexture();t.bindTexture(t.TEXTURE_2D,r);t.texImage2D(t.TEXTURE_2D,0,n.internalFormatHalfFloat,1,1,0,n.textureFormatFloat,n.textureTypeHalfFloat,null);var o=t.createFramebuffer();t.bindFramebuffer(t.FRAMEBUFFER,o),t.framebufferTexture2D(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.TEXTURE_2D,r,0);var a=t.checkFramebufferStatus(t.FRAMEBUFFER)===t.FRAMEBUFFER_COMPLETE;return t.bindTexture(t.TEXTURE_2D,null),t.bindFramebuffer(t.FRAMEBUFFER,null),t.deleteTexture(r),t.deleteFramebuffer(o),a}(e,n)}return!1}return!!Pe(e,\"OES_texture_float\")&&(!!Pe(e,\"WEBGL_color_buffer_float\")&&Ve(e))}function Ve(t){var e=Qt(t),n=t.createTexture();t.bindTexture(t.TEXTURE_2D,n);t.texImage2D(t.TEXTURE_2D,0,e.internalFormatFloat,1,1,0,e.textureFormatFloat,e.textureTypeFloat,null);var r=t.createFramebuffer();t.bindFramebuffer(t.FRAMEBUFFER,r),t.framebufferTexture2D(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.TEXTURE_2D,n,0);var o=t.checkFramebufferStatus(t.FRAMEBUFFER)===t.FRAMEBUFFER_COMPLETE;return t.bindTexture(t.TEXTURE_2D,null),t.bindFramebuffer(t.FRAMEBUFFER,null),t.deleteTexture(n),t.deleteFramebuffer(r),o}function ze(t){return 2===t&&null!=jt(t).fenceSync}var Ge=Object.freeze({callAndCheck:Jt,canBeRepresented:ee,getWebGLErrorMessage:ne,getExtensionOrThrow:re,createVertexShader:oe,createFragmentShader:ae,createProgram:ce,linkProgram:le,validateProgram:he,createStaticVertexBuffer:fe,createStaticIndexBuffer:de,getNumChannels:function(){return 2===i().getNumber(\"WEBGL_VERSION\")?1:4},createTexture:pe,validateTextureSize:ve,createFramebuffer:ge,bindVertexBufferToProgramAttribute:me,bindTextureUnit:ye,unbindTextureUnit:function(t,e,n){Se(t,n),Jt(t,e,(function(){return t.activeTexture(t.TEXTURE0+n)})),Jt(t,e,(function(){return t.bindTexture(t.TEXTURE_2D,null)}))},getProgramUniformLocationOrThrow:xe,getProgramUniformLocation:be,bindTextureToProgramUniformSampler:we,bindCanvasToFramebuffer:function(t,e){Jt(t,e,(function(){return t.bindFramebuffer(t.FRAMEBUFFER,null)})),Jt(t,e,(function(){return t.viewport(0,0,t.canvas.width,t.canvas.height)})),Jt(t,e,(function(){return t.scissor(0,0,t.canvas.width,t.canvas.height)}))},bindColorTextureToFramebuffer:Ce,unbindColorTextureFromFramebuffer:Ee,validateFramebuffer:Re,getFramebufferErrorMessage:Ie,getBatchDim:Ae,getRowsCols:Te,getShapeAs3D:De,getTextureShapeFromLogicalShape:Ne,isReshapeFree:_e,getWebGLMaxTextureSize:Oe,resetMaxTextureSize:function(){ie=null},resetMaxTexturesInShader:function(){se=null},getMaxTexturesInShader:Me,getWebGLDisjointQueryTimerVersion:Be,hasExtension:Pe,isWebGLVersionEnabled:Le,isCapableOfRenderingToFloatTexture:We,isDownloadFloatTextureEnabled:Ue,isWebGLFenceEnabled:ze}),He=i();function qe(){i().set(\"PROD\",!0)}function Ke(){i().set(\"DEBUG\",!0)}function je(){i().set(\"DEPRECATION_WARNINGS_ENABLED\",!1),console.warn(\"TensorFlow.js deprecation warnings have been disabled.\")}function Xe(t){i().getBool(\"DEPRECATION_WARNINGS_ENABLED\")&&console.warn(t+\" You can disable deprecation warnings with tf.disableDeprecationWarnings().\")}function Ye(){Lt.disposeVariables()}function $e(){return Lt}function Qe(){return Lt.memory()}function Je(t){return Lt.profile(t)}function Ze(t,e){return Lt.tidy(t,e)}function tn(t){_t(t).forEach((function(t){return t.dispose()}))}function en(t){return Lt.keep(t)}function nn(t){return Lt.time(t)}function rn(t){return Lt.setBackend(t)}function on(){return Lt.ready()}function an(){return Lt.backendName}function sn(t){Lt.removeBackend(t)}function un(t){return Lt.findBackend(t)}function cn(t){return Lt.findBackendFactory(t)}function ln(t,e,n){return void 0===n&&(n=1),Lt.registerBackend(t,e,n)}function hn(){return Lt.backend}function fn(t,e){i().setPlatform(t,e)}function dn(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];i().getBool(\"IS_TEST\")||console.warn.apply(console,t)}function pn(t,e){var n=t;if(V(t))return\"string\"===e?[]:[t.length];if(!Array.isArray(t))return[];for(var r=[];Array.isArray(n)||V(n)&&\"string\"!==e;)r.push(n.length),n=n[0];return Array.isArray(t)&&i().getBool(\"TENSORLIKE_CHECK_SHAPE_CONSISTENCY\")&&function t(e,n,r){if(r=r||[],!Array.isArray(e)&&!V(e))return void C(0===n.length,(function(){return\"Element arr[\"+r.join(\"][\")+\"] is a primitive, but should be an array/TypedArray of \"+n[0]+\" elements\"}));C(n.length>0,(function(){return\"Element arr[\"+r.join(\"][\")+\"] should be a primitive, but is an array of \"+e.length+\" elements\"})),C(e.length===n[0],(function(){return\"Element arr[\"+r.join(\"][\")+\"] should have \"+n[0]+\" elements, but has \"+e.length+\" elements\"}));for(var o=n.slice(1),a=0;a<e.length;++a)t(e[a],o,r.concat(a))}(t,r,[]),r}function vn(t,e,n,r){if(null!=t&&(\"numeric\"!==t&&t!==e||\"numeric\"===t&&\"string\"===e))throw new Error(\"Argument '\"+n+\"' passed to '\"+r+\"' must be \"+t+\" tensor, but got \"+e+\" tensor\")}function gn(t,e,n,r){if(void 0===r&&(r=\"numeric\"),t instanceof wt)return vn(r,t.dtype,e,n),t;var o=j(t);if(\"string\"!==o&&[\"bool\",\"int32\",\"float32\"].indexOf(r)>=0&&(o=r),vn(r,o,e,n),null==t||!V(t)&&!Array.isArray(t)&&\"number\"!=typeof t&&\"boolean\"!=typeof t&&\"string\"!=typeof t){var a=null==t?\"null\":t.constructor.name;throw new Error(\"Argument '\"+e+\"' passed to '\"+n+\"' must be a Tensor or TensorLike, but got '\"+a+\"'\")}var s=pn(t,o);V(t)||Array.isArray(t)||(t=[t]);var u=\"string\"!==o?Q(t,o,i().getBool(\"DEBUG\")):I(t,[],!0);return Lt.makeTensor(u,s,o)}function mn(t,e,n,r){if(void 0===r&&(r=\"numeric\"),!Array.isArray(t))throw new Error(\"Argument \"+e+\" passed to \"+n+\" must be a `Tensor[]` or `TensorLike[]`\");return t.map((function(t,r){return gn(t,e+\"[\"+r+\"]\",n)}),r)}function yn(t,e){for(var n=0;n<t.length;++n)if(t[t.length-n-1]!==e-1-n)return!1;return!0}function xn(t,e,n){for(var r=t.length+e.length,o=[],a=0,i=0,s=0;s<r;s++)-1===n.indexOf(s)?o.push(t[a++]):o.push(e[i++]);return o}function bn(t,e){for(var n=[],r=t.length,o=0;o<r;o++)-1===e.indexOf(o)&&n.push(t[o]);return[n,e.map((function(e){return t[e]}))]}function wn(t,e){return xn(t,e.map((function(t){return 1})),e)}function Cn(t,e,n){C(yn(e,n),(function(){return t+\" supports only inner-most axes for now. Got axes \"+e+\" and rank-\"+n+\" input.\"}))}function En(t,e){if(yn(t,e))return null;for(var n=[],r=0;r<e;++r)-1===t.indexOf(r)&&n.push(r);return t.forEach((function(t){return n.push(t)})),n}function Rn(t){return t.map((function(t,e){return[e,t]})).sort((function(t,e){return t[1]-e[1]})).map((function(t){return t[0]}))}function In(t,e){for(var n=[],r=e-t;r<e;++r)n.push(r);return n}function kn(t,e){var n=t[0].length;t.forEach((function(t,e){C(t.length===n,(function(){return\"Error in concat\"+n+\"D: rank of tensors[\"+e+\"] must be the same as the rank of the rest (\"+n+\")\"}))})),C(e>=0&&e<n,(function(){return\"Error in concat\"+n+\"D: axis must be between 0 and \"+(n-1)+\".\"}));var r=t[0];t.forEach((function(t,o){for(var a=0;a<n;a++)C(a===e||t[a]===r[a],(function(){return\"Error in concat\"+n+\"D: Shape of tensors[\"+o+\"] (\"+t+\") does not match the shape of the rest (\"+r+\") along the non-concatenated axis \"+o+\".\"}))}))}function Sn(t,e){for(var n=t[0].slice(),r=1;r<t.length;r++)n[e]+=t[r][e];return n}function An(t){var e=Object.keys(t);if(1!==e.length)throw new Error(\"Please provide an object with a single key (operation name) mapping to a function. Got an object with \"+e.length+\" keys.\");var n=e[0],r=t[n];n.endsWith(\"_\")&&(n=n.substring(0,n.length-1));var o=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];Lt.startScope(n);try{var o=r.apply(void 0,t);return o instanceof Promise&&console.error(\"Cannot return a Promise inside of tidy.\"),Lt.endScope(o),o}catch(t){throw Lt.endScope(null),t}};return Object.defineProperty(o,\"name\",{value:n,configurable:!0}),o}He.registerFlag(\"HAS_WEBGL\",(function(){return He.getNumber(\"WEBGL_VERSION\")>0})),He.registerFlag(\"WEBGL_VERSION\",(function(){return Le(2)?2:Le(1)?1:0})),He.registerFlag(\"WEBGL_BUFFER_SUPPORTED\",(function(){return 2===He.get(\"WEBGL_VERSION\")})),He.registerFlag(\"WEBGL_CPU_FORWARD\",(function(){return!0})),He.registerFlag(\"WEBGL_FORCE_F16_TEXTURES\",(function(){return!1})),He.registerFlag(\"WEBGL_PACK\",(function(){return He.getBool(\"HAS_WEBGL\")})),He.registerFlag(\"WEBGL_PACK_NORMALIZATION\",(function(){return He.getBool(\"WEBGL_PACK\")})),He.registerFlag(\"WEBGL_PACK_CLIP\",(function(){return He.getBool(\"WEBGL_PACK\")})),He.registerFlag(\"WEBGL_PACK_DEPTHWISECONV\",(function(){return!1})),He.registerFlag(\"WEBGL_PACK_BINARY_OPERATIONS\",(function(){return He.getBool(\"WEBGL_PACK\")})),He.registerFlag(\"WEBGL_PACK_UNARY_OPERATIONS\",(function(){return He.getBool(\"WEBGL_PACK\")})),He.registerFlag(\"WEBGL_PACK_ARRAY_OPERATIONS\",(function(){return He.getBool(\"WEBGL_PACK\")})),He.registerFlag(\"WEBGL_PACK_IMAGE_OPERATIONS\",(function(){return He.getBool(\"WEBGL_PACK\")})),He.registerFlag(\"WEBGL_PACK_REDUCE\",(function(){return He.getBool(\"WEBGL_PACK\")})),He.registerFlag(\"WEBGL_LAZILY_UNPACK\",(function(){return He.getBool(\"WEBGL_PACK\")})),He.registerFlag(\"WEBGL_CONV_IM2COL\",(function(){return He.getBool(\"WEBGL_PACK\")})),He.registerFlag(\"WEBGL_MAX_TEXTURE_SIZE\",(function(){return Oe(He.getNumber(\"WEBGL_VERSION\"))})),He.registerFlag(\"WEBGL_MAX_TEXTURES_IN_SHADER\",(function(){return Me(He.getNumber(\"WEBGL_VERSION\"))})),He.registerFlag(\"WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION\",(function(){var t=He.getNumber(\"WEBGL_VERSION\");return 0===t?0:Be(t)})),He.registerFlag(\"WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE\",(function(){return He.getNumber(\"WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION\")>0&&(t=navigator.userAgent||navigator.vendor||window.opera,!(/(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(t)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\\-(n|u)|c55\\/|capi|ccwa|cdm\\-|cell|chtm|cldc|cmd\\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\\-s|devi|dica|dmob|do(c|p)o|ds(12|\\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\\-|_)|g1 u|g560|gene|gf\\-5|g\\-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd\\-(m|p|t)|hei\\-|hi(pt|ta)|hp( i|ip)|hs\\-c|ht(c(\\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\\-(20|go|ma)|i230|iac( |\\-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc\\-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|\\-[a-w])|libw|lynx|m1\\-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m\\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\\-2|po(ck|rt|se)|prox|psio|pt\\-g|qa\\-a|qc(07|12|21|32|60|\\-[2-7]|i\\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\\-|oo|p\\-)|sdk\\/|se(c(\\-|0|1)|47|mc|nd|ri)|sgh\\-|shar|sie(\\-|m)|sk\\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\\-|v\\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\\-|tdg\\-|tel(i|m)|tim\\-|t\\-mo|to(pl|sh)|ts(70|m\\-|m3|m5)|tx\\-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\\-|your|zeto|zte\\-/i.test(t.substr(0,4))));var t})),He.registerFlag(\"WEBGL_RENDER_FLOAT32_CAPABLE\",(function(){return We(He.getNumber(\"WEBGL_VERSION\"))})),He.registerFlag(\"WEBGL_RENDER_FLOAT32_ENABLED\",(function(){return!He.getBool(\"WEBGL_FORCE_F16_TEXTURES\")&&He.getBool(\"WEBGL_RENDER_FLOAT32_CAPABLE\")})),He.registerFlag(\"WEBGL_DOWNLOAD_FLOAT_ENABLED\",(function(){return Ue(He.getNumber(\"WEBGL_VERSION\"))})),He.registerFlag(\"WEBGL_FENCE_API_ENABLED\",(function(){return ze(He.getNumber(\"WEBGL_VERSION\"))})),He.registerFlag(\"WEBGL_SIZE_UPLOAD_UNIFORM\",(function(){return He.getBool(\"WEBGL_RENDER_FLOAT32_ENABLED\")?4:0})),bt=Xe;var Tn=An({complex_:function(t,e){var n=gn(t,\"real\",\"complex\"),r=gn(e,\"imag\",\"complex\");return E(n.shape,r.shape,\"real and imag shapes, \"+n.shape+\" and \"+r.shape+\", must match in call to tf.complex().\"),Lt.runKernelFunc((function(t){return t.complex(n,r)}),{$real:n,$imag:r})}}),Dn=An({real_:function(t){var e=gn(t,\"input\",\"real\");return Lt.runKernelFunc((function(t){return t.real(e)}),{$input:e})}}),Nn=An({imag_:function(t){var e=gn(t,\"input\",\"imag\");return Lt.runKernelFunc((function(t){return t.imag(e)}),{$input:e})}});function Fn(t,e,n){return _n(t,e,pn(t,n),n)}function _n(t,e,n,r){if(null==r&&(r=j(t)),\"complex64\"===r)throw new Error(\"Cannot construct a complex64 tensor directly. Please use tf.complex(real, imag).\");if(!V(t)&&!Array.isArray(t)&&\"number\"!=typeof t&&\"boolean\"!=typeof t&&\"string\"!=typeof t)throw new Error(\"values passed to tensor(values) must be a number/boolean/string or an array of numbers/booleans/strings, or a TypedArray\");if(null!=e){nt(e);var o=k(e),a=k(n);C(o===a,(function(){return\"Based on the provided shape, [\"+e+\"], the tensor should have \"+o+\" values but has \"+a}));for(var s=0;s<n.length;++s){var u=n[s],c=s!==n.length-1||u!==k(e.slice(s));C(n[s]===e[s]||!c,(function(){return\"Error creating a new Tensor. Inferred shape (\"+n+\") does not match the provided shape (\"+e+\"). \"}))}}return V(t)||Array.isArray(t)||(t=[t]),e=e||n,t=\"string\"!==r?Q(t,r,i().getBool(\"DEBUG\")):I(t,[],!0),Lt.makeTensor(t,e,r)}function On(t,e){if((V(t)&&\"string\"!==e||Array.isArray(t))&&\"complex64\"!==e)throw new Error(\"Error creating a new Scalar: value must be a primitive (number|boolean|string)\");if(\"string\"===e&&V(t)&&!(t instanceof Uint8Array))throw new Error(\"When making a scalar from encoded string, the value must be `Uint8Array`.\");return _n(t,[],[],e)}function Mn(t,e){R(t);var n=pn(t,e);if(1!==n.length)throw new Error(\"tensor1d() requires values to be a flat/TypedArray\");return _n(t,null,n,e)}function Bn(t,e,n){if(R(t),null!=e&&2!==e.length)throw new Error(\"tensor2d() requires shape to have two numbers\");var r=pn(t,n);if(2!==r.length&&1!==r.length)throw new Error(\"tensor2d() requires values to be number[][] or flat/TypedArray\");if(1===r.length&&null==e)throw new Error(\"tensor2d() requires shape to be provided when `values` are a flat/TypedArray\");return _n(t,e,r,n)}function Pn(t,e,n){if(R(t),null!=e&&3!==e.length)throw new Error(\"tensor3d() requires shape to have three numbers\");var r=pn(t,n);if(3!==r.length&&1!==r.length)throw new Error(\"tensor3d() requires values to be number[][][] or flat/TypedArray\");if(1===r.length&&null==e)throw new Error(\"tensor3d() requires shape to be provided when `values` are a flat array\");return _n(t,e,r,n)}function Ln(t,e,n){if(R(t),null!=e&&4!==e.length)throw new Error(\"tensor4d() requires shape to have four numbers\");var r=pn(t,n);if(4!==r.length&&1!==r.length)throw new Error(\"tensor4d() requires values to be number[][][][] or flat/TypedArray\");if(1===r.length&&null==e)throw new Error(\"tensor4d() requires shape to be provided when `values` are a flat array\");return _n(t,e,r,n)}function Wn(t,e,n){if(R(t),null!=e&&5!==e.length)throw new Error(\"tensor5d() requires shape to have five numbers\");var r=pn(t,n);if(5!==r.length&&1!==r.length)throw new Error(\"tensor5d() requires values to be number[][][][][] or flat/TypedArray\");if(1===r.length&&null==e)throw new Error(\"tensor5d() requires shape to be provided when `values` are a flat array\");return _n(t,e,r,n)}function Un(t,e,n){if(R(t),null!=e&&6!==e.length)throw new Error(\"tensor6d() requires shape to have six numbers\");var r=pn(t,n);if(6!==r.length&&1!==r.length)throw new Error(\"tensor6d() requires values to be number[][][][][][] or flat/TypedArray\");if(1===r.length&&null==e)throw new Error(\"tensor6d() requires shape to be provided when `values` are a flat array\");return _n(t,e=e||r,r,n)}function Vn(t,e,n,r){return void 0===e&&(e=!0),Lt.makeVariable(t,e,n,r)}function zn(t,e){if(void 0===e&&(e=\"float32\"),\"complex64\"===e){var n=zn(t,\"float32\"),r=Gn(t,\"float32\");return Tn(n,r)}var o=Z(k(t),e);return Lt.makeTensor(o,t,e)}function Gn(t,e){if(void 0===e&&(e=\"float32\"),\"complex64\"===e){var n=Gn(t,\"float32\"),r=Gn(t,\"float32\");return Tn(n,r)}var o=tt(k(t),e);return Lt.makeTensor(o,t,e)}function Hn(t,e,n){return Lt.runKernelFunc((function(r){return r.fill(t,e,n)}),{})}function qn(t,e,n){if(n<=0)throw new Error(\"The number of values should be positive.\");return Lt.runKernelFunc((function(r){return r.linspace(t,e,n)}),{})}function Kn(t,e,n,r){if(void 0===n&&(n=1),void 0===r&&(r=\"float32\"),0===n)throw new Error(\"Cannot have a step of zero\");if(t===e||t<e&&n<0||e<t&&n>1)return Gn([0],r);var o=tt(Math.abs(Math.ceil((e-t)/n)),r);e<t&&1===n&&(n=-1),o[0]=t;for(var a=1;a<o.length;a++)o[a]=o[a-1]+n;return Mn(o,r)}var jn=An({onesLike_:function(t){var e=gn(t,\"x\",\"onesLike\");if(\"complex64\"===e.dtype){var n=jn(Dn(e)),r=Xn(Nn(e));return Tn(n,r)}return Lt.runKernelFunc((function(t){return t.onesLike(e)}),{x:e},(function(t,e){return{x:function(){return Xn(t)}}}),\"OnesLike\")}}),Xn=An({zerosLike_:function(t){var e=gn(t,\"x\",\"zerosLike\");return Lt.runKernelFunc((function(t){return t.zerosLike(e)}),{x:e},(function(t,e){return{x:function(){return Xn(t)}}}),\"ZerosLike\")}});var Yn=An({concat_:function(t,e){void 0===e&&(e=0),C(t.length>=1,(function(){return\"Pass at least one tensor to concat\"}));var n=mn(t,\"tensors\",\"concat\");\"complex64\"===n[0].dtype&&n.forEach((function(t){if(\"complex64\"!==t.dtype)throw new Error(\"Cannot concatenate complex64 tensors with a tensor\\n          with dtype \"+t.dtype+\". \")})),e=O(e,n[0].shape)[0];var r=Sn(n.map((function(t){return t.shape})),e);if(0===k(r))return Fn([],r);if(1===(n=n.filter((function(t){return t.size>0}))).length)return n[0];var o=n.map((function(t){return t.shape}));kn(o,e);var a=n,i={axis:e};return Lt.runKernelFunc((function(t){return t.concat(n,e)}),a,(function(t){var n=o.map((function(t){return t[e]}));return tr(t,n,e).map((function(t){return function(){return t}}))}),\"Concat\",i)}}),$n=An({concat1d_:function(t){return Yn(t,0)}}),Qn=An({concat2d_:function(t,e){return Yn(t,e)}}),Jn=An({concat3d_:function(t,e){return Yn(t,e)}}),Zn=An({concat4d_:function(t,e){return Yn(t,e)}}),tr=An({split_:function(t,e,n){void 0===n&&(n=0);var r,o=gn(t,\"x\",\"split\");return n=O(n,o.shape)[0],\"number\"==typeof e?(C(o.shape[n]%e==0,(function(){return\"Number of splits must evenly divide the axis.\"})),r=new Array(e).fill(o.shape[n]/e)):(C(o.shape[n]===e.reduce((function(t,e){return t+e})),(function(){return\"The sum of sizes must match the size of the axis dimension.\"})),r=e),Lt.runKernelFunc((function(t){return t.split(o,r,n)}),{$x:o},(function(t){return{$x:function(){return Yn(t,n)}}}))}});function er(t,e,n){return void 0===e&&(e=\"float32\"),e=e||\"float32\",nt(t),new mt(t,e,n)}function nr(t,e){void 0===e&&(e=!1),console.log(t.toString(e))}var rr=An({batchToSpaceND_:function(t,e,n){var r=gn(t,\"x\",\"batchToSpaceND\"),o=e.reduce((function(t,e){return t*e}));return C(r.rank>=1+e.length,(function(){return\"input rank is \"+r.rank+\" but should be > than blockShape.length \"+e.length})),C(n.length===e.length,(function(){return\"crops.length is \"+n.length+\" but should be equal to blockShape.length  \"+e.length})),C(r.shape[0]%o==0,(function(){return\"input tensor batch is \"+r.shape[0]+\" but is not divisible by the product of the elements of blockShape \"+e.join(\" * \")+\" === \"+o})),Lt.runKernelFunc((function(t){return t.batchToSpaceND(r,e,n)}),{$x:r},(function(t){return{$x:function(){return t.spaceToBatchND(e,n)}}}))}}),or=An({cast_:function(t,e){var n=gn(t,\"x\",\"cast\");if(!W(e))throw new Error(\"Failed to cast to unknown dtype \"+e);if(\"string\"===e&&\"string\"!==n.dtype||\"string\"!==e&&\"string\"===n.dtype)throw new Error(\"Only strings can be casted to strings\");var r={dtype:e};return Lt.runKernelFunc((function(t){return t.cast(n,e)}),{x:n},(function(t){return{x:function(){return t.clone()}}}),\"Cast\",r)}}),ar=An({cumsum_:function(t,e,n,r){void 0===e&&(e=0),void 0===n&&(n=!1),void 0===r&&(r=!1);var o=gn(t,\"x\",\"cumsum\"),a=En([e|=0],o.rank),i=o;null!=a&&(i=o.transpose(a));var s=In(1,o.rank)[0],u=Lt.runKernelFunc((function(t){return t.cumsum(i,s,n,r)}),{permutedX:i},(function(t){return{permutedX:function(){return t.cumsum(e,n,!r)}}}));return null!=a&&(u=u.transpose(a)),u}}),ir=An({depthToSpace_:function(t,e,n){void 0===n&&(n=\"NHWC\");var r=gn(t,\"x\",\"depthToSpace\"),o=\"NHWC\"===n?r.shape[1]:r.shape[2],a=\"NHWC\"===n?r.shape[2]:r.shape[3],i=\"NHWC\"===n?r.shape[3]:r.shape[1];return C(o*e>=0,(function(){return\"Negative dimension size caused by overflow when multiplying\\n      \"+o+\" and \"+e+\"  for depthToSpace with input shape\\n      \"+r.shape})),C(a*e>=0,(function(){return\"Negative dimension size caused by overflow when multiplying\\n      \"+a+\" and \"+e+\" for depthToSpace with input shape\\n          \"+r.shape})),C(i%(e*e)==0,(function(){return\"Dimension size must be evenly divisible by \"+e*e+\" but is \"+i+\" for depthToSpace with input shape \"+r.shape})),Lt.runKernelFunc((function(t){return t.depthToSpace(r,e,n)}),{$x:r})}}),sr=An({expandDims_:function(t,e){void 0===e&&(e=0);var n=gn(t,\"x\",\"expandDims\",null);C(e<=n.rank,(function(){return\"Axis must be <= rank of the tensor\"}));var r=n.shape.slice();return e<0&&(C(-(n.rank+1)<=e,(function(){return\"Axis must be in the interval [\"+-(n.rank+1)+\", \"+n.rank+\"]\"})),e=n.rank+e+1),r.splice(e,0,1),ur(n,r)}}),ur=An({reshape_:function(t,e){var n=gn(t,\"x\",\"reshape\",null);e=_(e,n.size),C(n.size===k(e),(function(){return\"new shape and old shape must have the same number of elements.\"}));var r={shape:e};return Lt.runKernelFunc((function(t){return t.reshape(n,e)}),{x:n},(function(t){return{x:function(){return t.reshape(n.shape)}}}),\"Reshape\",r)}}),cr=An({spaceToBatchND_:function(t,e,n){var r=gn(t,\"x\",\"spaceToBatchND\");return C(r.rank>=1+e.length,(function(){return\"input rank \"+r.rank+\" should be > than [blockShape] \"+e.length})),C(n.length===e.length,(function(){return\"paddings.shape[0] \"+n.length+\" must be equal to [blockShape] \"+e.length})),C(r.shape.reduce((function(t,r,o){return o>0&&o<=e.length?t&&(r+n[o-1][0]+n[o-1][1])%e[o-1]==0:t}),!0),(function(){return\"input spatial dimensions \"+r.shape.slice(1)+\" with paddings \"+n.toString()+\" must be divisible by blockShapes \"+e.toString()})),Lt.runKernelFunc((function(t){return t.spaceToBatchND(r,e,n)}),{$x:r},(function(t){return{$x:function(){return t.batchToSpaceND(e,n)}}}))}}),lr=An({squeeze_:function(t,e){var n=gn(t,\"x\",\"squeeze\");return ur(n,M(n.shape,e).newShape)}}),hr=An({stack_:function(t,e){void 0===e&&(e=0);var n=mn(t,\"tensors\",\"stack\");if(C(n.length>=1,(function(){return\"Pass at least one tensor to tf.stack\"})),1===n.length)return n[0].expandDims(e);var r=n[0].rank,o=n[0].shape,a=n[0].dtype;C(e<=r,(function(){return\"Axis must be <= rank of the tensor\"})),n.forEach((function(t){E(o,t.shape,\"All tensors passed to stack must have matching shapes\")})),n.forEach((function(t){C(a===t.dtype,(function(){return\"All tensors passed to stack must have matching dtypes\"}))}));var i=n.map((function(t){return t.expandDims(e)}));return Yn(i,e)}}),fr=An({unstack_:function(t,e){void 0===e&&(e=0),e=e||0;var n=gn(t,\"x\",\"unstack\");C(e>=-n.shape.length&&e<n.shape.length,(function(){return\"Axis = \"+e+\" is not in [-\"+n.shape.length+\", \"+n.shape.length+\")\"})),e<0&&(e+=n.shape.length);var r={axis:e};return Lt.runKernelFunc((function(t){return t.unstack(n,e)}),{x:n},(function(t){return{x:function(){return hr(t,e)}}}),\"Unpack\",r)}}),dr=function(t,e){return n(this,void 0,void 0,(function(){var n,o,a,i,s,u,c,l,h,f;return r(this,(function(r){switch(r.label){case 0:return n=gn(t,\"x\",\"setdiff1d\"),o=gn(e,\"y\",\"setdiff1d\"),C(n.dtype===o.dtype,(function(){return\"x and y should have the same dtype, but got x (\"+n.dtype+\") and y (\"+o.dtype+\").\"})),C(1===n.rank,(function(){return\"x should be 1D tensor, but got x (\"+n.shape+\").\"})),C(1===o.rank,(function(){return\"y should be 1D tensor, but got y (\"+o.shape+\").\"})),[4,n.data()];case 1:return a=r.sent(),[4,o.data()];case 2:for(i=r.sent(),s=new Set(i),u=0,h=0;h<a.length;h++)s.has(a[h])||u++;for(c=new mt([u],n.dtype),l=new mt([u],\"int32\"),h=0,f=0;h<a.length;h++)s.has(a[h])||(c.values[f]=a[h],l.values[f]=h,f++);return[2,[c.toTensor(),l.toTensor()]]}}))}))};function pr(t,e,n,r){void 0===r&&(r=!0);var o=[];if(r)(o=o.concat(e.slice(0))).push(t[0]/n),o=o.concat(t.slice(1));else{o=o.concat(t[0]);for(var a=e.length,i=0;i<a;++i)o=o.concat([t[i+1]/e[i],e[i]]);o=o.concat(t.slice(a+1))}return o}function vr(t,e,n){void 0===n&&(n=!0);var r=[];if(n){r.push(e);for(var o=e+1;o<t;++o)o<=2*e?(r.push(o),r.push(o-(e+1))):r.push(o)}else{var a=[],i=[];for(o=1;o<t;++o)o>=2*e+1||o%2==1?i.push(o):a.push(o);r.push.apply(r,a),r.push(0),r.push.apply(r,i)}return r}function gr(t,e,n,r){void 0===r&&(r=!0);var o=[];r?o.push(t[0]/n):o.push(t[0]*n);for(var a=1;a<t.length;++a)a<=e.length?r?o.push(e[a-1]*t[a]):o.push(t[a]/e[a-1]):o.push(t[a]);return o}function mr(t,e){for(var n=[0],r=0;r<e;++r)n.push(t[r][0]);return n}function yr(t,e,n){for(var r=t.slice(0,1),o=0;o<n;++o)r.push(t[o+1]-e[o][0]-e[o][1]);return r}var xr=\"Add\",br=\"AddN\",wr=\"Div\",Cr=\"FusedBatchNorm\",Er=\"SquaredDifference\",Rr=\"Square\",Ir=\"Transpose\",kr=\"NonMaxSuppressionV5\",Sr=\"BroadcastTo\",Ar=\"OneHot\",Tr=\"Identity\",Dr=\"Tile\",Nr=\"PadV2\",Fr=\"FromPixels\",_r=\"MaxPoolWithArgmax\";var Or=An({add_:function(t,e){var n,r=gn(t,\"a\",\"add\"),o=gn(e,\"b\",\"add\");n=Nt(r,o),r=n[0],o=n[1];var a={a:r,b:o};return Lt.runKernelFunc((function(t,e){var n=t.add(r,o);return e([r,o]),n}),a,null,xr)}});function Mr(t,e){for(var n=t.length,r=[],o=0;o<n;o++){var a=n-1-o,i=t[a]||1;(e[e.length-1-o]||1)>1&&1===i&&r.unshift(a)}return r}function Br(t,e){for(var n=[],r=0;r<e.length;r++){var o=t[t.length-r-1],a=e.length-r-1,i=e[a];(null==o||1===o&&i>1)&&n.unshift(a)}return n}function Pr(t,e){for(var n=[],r=Math.max(t.length,e.length),o=0;o<r;o++){var a=t[t.length-o-1];null==a&&(a=1);var i=e[e.length-o-1];if(null==i&&(i=1),1===a)n.unshift(i);else if(1===i)n.unshift(a);else{if(a!==i)throw Error(\"Operands could not be broadcast together with shapes \"+t+\" and \"+e+\".\");n.unshift(a)}}return n}var Lr=An({abs_:function(t){var e=gn(t,\"x\",\"abs\");return\"complex64\"===e.dtype?Lt.runKernelFunc((function(t){return t.complexAbs(e)}),{$x:e}):Lt.runKernelFunc((function(t,n){var r=t.abs(e);return n([e]),r}),{x:e},(function(t,e){var n=e[0];return{x:function(){return t.mul(n.toFloat().step(-1))}}}),\"Abs\")}}),Wr=An({acos_:function(t){var e=gn(t,\"x\",\"acos\");return Lt.runKernelFunc((function(t,n){var r=t.acos(e);return n([e]),r}),{$x:e},(function(t,e){var n=e[0];return{$x:function(){return t.divStrict(On(1).sub(n.toFloat().square()).sqrt()).neg()}}}))}}),Ur=An({acosh_:function(t){var e=gn(t,\"x\",\"acosh\");return Lt.runKernelFunc((function(t,n){var r=t.acosh(e);return n([e]),r}),{$x:e},(function(t,e){var n=e[0];return{$x:function(){return t.divStrict(n.toFloat().square().sub(1).sqrt())}}}))}}),Vr=An({asin_:function(t){var e=gn(t,\"x\",\"asin\");return Lt.runKernelFunc((function(t,n){var r=t.asin(e);return n([e]),r}),{$x:e},(function(t,e){var n=e[0];return{$x:function(){return t.divStrict(On(1).sub(n.toFloat().square()).sqrt())}}}))}}),zr=An({asinh_:function(t){var e=gn(t,\"x\",\"asinh\");return Lt.runKernelFunc((function(t,n){var r=t.asinh(e);return n([e]),r}),{$x:e},(function(t,e){var n=e[0];return{$x:function(){return t.divStrict(On(1).add(n.toFloat().square()).sqrt())}}}))}}),Gr=An({atan_:function(t){var e=gn(t,\"x\",\"atan\");return Lt.runKernelFunc((function(t,n){var r=t.atan(e);return n([e]),r}),{$x:e},(function(t,e){var n=e[0];return{$x:function(){return t.div(n.toFloat().square().add(1))}}}))}}),Hr=An({atanh_:function(t){var e=gn(t,\"x\",\"atanh\");return Lt.runKernelFunc((function(t,n){var r=t.atanh(e);return n([e]),r}),{$x:e},(function(t,e){var n=e[0];return{$x:function(){return t.div(On(1).sub(n.toFloat().square()))}}}))}}),qr=An({ceil_:function(t){var e=gn(t,\"x\",\"ceil\");return Lt.runKernelFunc((function(t){return t.ceil(e)}),{$x:e},(function(t){return{$x:function(){return Xn(t)}}}))}}),Kr=An({clipByValue_:function(t,e,n){var r=gn(t,\"x\",\"clipByValue\");C(e<=n,(function(){return\"Error in clip: min (\"+e+\") must be less than or equal to max (\"+n+\").\"}));var o=[r],a={min:e,max:n};return Lt.runKernelFunc((function(t,o){var a=t.clip(r,e,n);return o([r]),a}),{x:r},(function(t,r){var o=r[0];return{x:function(){return t.where(o.greaterEqual(e).logicalAnd(o.lessEqual(n)),Xn(t))}}}),\"ClipByValue\",a,o)}}),jr=An({cos_:function(t){var e=gn(t,\"x\",\"cos\"),n=[e];return Lt.runKernelFunc((function(t,n){var r=t.cos(e);return n([e]),r}),{x:e},(function(t,e){var n=e[0];return{x:function(){return n.toFloat().sin().neg().mul(t)}}}),\"Cos\",{},n)}}),Xr=An({cosh_:function(t){var e=gn(t,\"x\",\"cosh\");return Lt.runKernelFunc((function(t,n){var r=t.cosh(e);return n([e]),r}),{$x:e},(function(t,e){var n=e[0];return{$x:function(){return n.toFloat().sinh().mulStrict(t)}}}))}}),Yr=An({erf_:function(t){var e=gn(t,\"x\",\"erf\");return C(\"int32\"===e.dtype||\"float32\"===e.dtype,(function(){return\"Input dtype must be `int32` or `float32`.\"})),\"int32\"===e.dtype&&(e=e.toFloat()),Lt.runKernelFunc((function(t,n){var r=t.erf(e);return n([e]),r}),{$x:e},(function(t,e){var n=e[0];return{$x:function(){return t.mul(n.square().neg().exp().mul(2/Math.sqrt(Math.PI)))}}}))}}),$r=An({exp_:function(t){var e=gn(t,\"x\",\"exp\");return Lt.runKernelFunc((function(t,n){var r=t.exp(e);return n([r]),r}),{x:e},(function(t,e){return{x:function(){return t.mulStrict(e[0])}}}),\"Exp\",{},[],[!0])}}),Qr=An({expm1_:function(t){var e=gn(t,\"x\",\"expm1\");return Lt.runKernelFunc((function(t,n){var r=t.expm1(e);return n([e]),r}),{$x:e},(function(t,e){var n=e[0];return{$x:function(){return t.mul(n.exp())}}}))}}),Jr=An({floor_:function(t){var e=gn(t,\"x\",\"floor\");return Lt.runKernelFunc((function(t){return t.floor(e)}),{$x:e},(function(t){return{$x:function(){return Xn(t)}}}))}}),Zr=An({log_:function(t){var e=gn(t,\"x\",\"log\"),n=[e];return Lt.runKernelFunc((function(t,n){var r=t.log(e);return n([e]),r}),{x:e},(function(t,e){var n=e[0];return{x:function(){return t.div(n.toFloat())}}}),\"Log\",{},n)}}),to=An({log1p_:function(t){var e=gn(t,\"x\",\"log1p\");return Lt.runKernelFunc((function(t,n){var r=t.log1p(e);return n([e]),r}),{$x:e},(function(t,e){var n=e[0];return{$x:function(){return t.div(n.add(1))}}}))}}),eo=An({logSigmoid_:function(t){var e=gn(t,\"x\",\"logSigmoid\");return Lt.runKernelFunc((function(t,n){var r=t.softplus(e.neg()).neg();return n([e]),r}),{$x:e},(function(t,e){var n=e[0];return{$x:function(){return t.mul(n.neg().sigmoid())}}}))}}),no=An({neg_:function(t){var e=gn(t,\"x\",\"neg\"),n=[e];return Lt.runKernelFunc((function(t){return t.neg(e)}),{x:e},(function(t){return{x:function(){return t.neg()}}}),\"Neg\",{},n)}}),ro=An({reciprocal_:function(t){var e=gn(t,\"x\",\"reciprocal\");return Lt.runKernelFunc((function(t,n){var r=t.reciprocal(e);return n([e]),r}),{$x:e},(function(t,e){var n=e[0];return{$x:function(){return t.div(n.square().neg())}}}))}}),oo=An({round_:function(t){var e=gn(t,\"x\",\"round\");return Lt.runKernelFunc((function(t){return t.round(e)}),{$x:e},(function(t){return{$x:function(){return Xn(t)}}}))}}),ao=An({rsqrt_:function(t){var e=gn(t,\"x\",\"rsqrt\"),n=[e];return Lt.runKernelFunc((function(t,n){var r=t.rsqrt(e);return n([e]),r}),{x:e},(function(t,e){var n=e[0];return{x:function(){return t.div(n.pow(1.5).mul(2)).neg()}}}),\"Rsqrt\",{},n)}}),io=An({sigmoid_:function(t){var e=gn(t,\"x\",\"sigmoid\");return Lt.runKernelFunc((function(t,n){var r=t.sigmoid(e);return n([r]),r}),{x:e},(function(t,e){var n=e[0];return{x:function(){return t.mul(n.mul(On(1).sub(n)))}}}),\"Sigmoid\")}}),so=An({sign_:function(t){var e=gn(t,\"x\",\"sign\");return Lt.runKernelFunc((function(t){return t.sign(e)}),{$x:e},(function(t){return{$x:function(){return Xn(t)}}}))}}),uo=An({isNaN_:function(t){var e=gn(t,\"x\",\"isNaN\");return Lt.runKernelFunc((function(t){return t.isNaN(e)}),{$x:e},(function(t){return{$x:function(){return Xn(t)}}}))}}),co=An({isInf_:function(t){var e=gn(t,\"x\",\"isInf\");return Lt.runKernelFunc((function(t){return t.isInf(e)}),{$x:e},(function(t){return{$x:function(){return Xn(t)}}}))}}),lo=An({isFinite_:function(t){var e=gn(t,\"x\",\"isFinite\");return Lt.runKernelFunc((function(t){return t.isFinite(e)}),{$x:e},(function(t){return{$x:function(){return Xn(t)}}}))}}),ho=An({sin_:function(t){var e=gn(t,\"x\",\"sin\"),n=[e];return Lt.runKernelFunc((function(t,n){var r=t.sin(e);return n([e]),r}),{x:e},(function(t,e){var n=e[0];return{x:function(){return n.toFloat().cos().mul(t)}}}),\"Sin\",{},n)}}),fo=An({sinh_:function(t){var e=gn(t,\"x\",\"sinh\");return Lt.runKernelFunc((function(t,n){var r=t.sinh(e);return n([e]),r}),{$x:e},(function(t,e){var n=e[0];return{$x:function(){return n.toFloat().cosh().mulStrict(t)}}}))}}),po=An({softplus_:function(t){var e=gn(t,\"x\",\"softplus\");return Lt.runKernelFunc((function(t,n){var r=t.softplus(e);return n([e]),r}),{$x:e},(function(t,e){var n=e[0];return{$x:function(){return t.mul(n.sigmoid())}}}))}}),vo=An({sqrt_:function(t){var e=gn(t,\"x\",\"sqrt\");return Lt.runKernelFunc((function(t,n){var r=t.sqrt(e);return n([e]),r}),{$x:e},(function(t,e){var n=e[0];return{$x:function(){return t.div(n.toFloat().sqrt().mul(2))}}}))}}),go=An({step_:function(t,e){void 0===e&&(e=0);var n=gn(t,\"x\",\"step\");return Lt.runKernelFunc((function(t){return t.step(n,e)}),{$x:n},(function(t){return{$x:function(){return Xn(t)}}}))}}),mo=An({tan_:function(t){var e=gn(t,\"x\",\"tan\");return Lt.runKernelFunc((function(t,n){var r=t.tan(e);return n([e]),r}),{$x:e},(function(t,e){var n=e[0];return{$x:function(){return t.div(n.cos().square())}}}))}}),yo=An({tanh_:function(t){var e=gn(t,\"x\",\"tanh\");return Lt.runKernelFunc((function(t,n){var r=t.tanh(e);return n([r]),r}),{x:e},(function(t,e){var n=e[0];return{x:function(){return On(1).sub(n.square()).mulStrict(t)}}}),\"Tanh\",{},null,[!0])}});var xo=An({addStrict_:function(t,e){var n=gn(t,\"a\",\"addStrict\"),r=gn(e,\"b\",\"addStrict\");return E(n.shape,r.shape,\"Error in addStrict: \"),n.add(r)}}),bo=An({atan2_:function(t,e){var n,r=gn(t,\"a\",\"atan2\"),o=gn(e,\"b\",\"atan2\");n=Nt(r,o),r=n[0],o=n[1];var a=Pr(r.shape,o.shape);return Lt.runKernelFunc((function(t,e){var n=t.atan2(r,o);return e([r,o]),n}),{$a:r,$b:o},(function(t,e){var n=e[0],r=e[1];return{$a:function(){var e=Or(n.square(),r.square()),o=t.mul(r.div(e)),i=Br(n.shape,a);return i.length>0&&(o=o.sum(i)),o.reshape(n.shape)},$b:function(){var e=Or(n.square(),r.square()),o=no(t.mul(n.div(e))),i=Br(r.shape,a);return i.length>0&&(o=o.sum(i)),o.reshape(r.shape)}}}))}}),wo=An({divStrict_:function(t,e){var n=gn(t,\"a\",\"div\"),r=gn(e,\"b\",\"div\");return E(n.shape,r.shape,\"Error in divideStrict: \"),n.div(r)}}),Co=An({floorDiv_:function(t,e){var n,r=gn(t,\"a\",\"floorDiv\"),o=gn(e,\"b\",\"floorDiv\");n=Nt(r,o),r=n[0],o=n[1];var a=Pr(r.shape,o.shape);return Lt.runKernelFunc((function(t,e){var n=t.floorDiv(r,o);return e([r,o]),n}),{a:r,b:o},(function(t,e){var n=e[0],r=e[1];return{a:function(){var e=t.div(r.toFloat()),o=Br(n.shape,a);return o.length>0?e.sum(o).reshape(n.shape):e},b:function(){var e=t.mul(n.toFloat()),o=Br(r.shape,a);o.length>0&&(e=e.sum(o).reshape(r.shape));var i=r.square();return e.div(i.toFloat()).neg()}}}),\"FloorDiv\")}}),Eo=An({maximum_:function(t,e){var n,r=gn(t,\"a\",\"maximum\"),o=gn(e,\"b\",\"maximum\");return n=Nt(r,o),r=n[0],o=n[1],\"bool\"===r.dtype&&(r=r.toInt(),o=o.toInt()),Pr(r.shape,o.shape),Lt.runKernelFunc((function(t,e){var n=t.maximum(r,o);return e([r,o]),n}),{a:r,b:o},(function(t,e){var n=e[0],r=e[1];return{a:function(){return t.mul(n.greaterEqual(r).toFloat())},b:function(){return t.mul(n.less(r).toFloat())}}}),\"Maximum\")}}),Ro=An({maximumStrict_:function(t,e){var n=gn(t,\"a\",\"maximumStrict\"),r=gn(e,\"b\",\"maximumStrict\");return E(n.shape,r.shape,\"Error in maximumStrict: \"),n.maximum(r)}}),Io=An({minimum_:function(t,e){var n,r=gn(t,\"a\",\"minimum\"),o=gn(e,\"b\",\"minimum\");return n=Nt(r,o),r=n[0],o=n[1],\"bool\"===r.dtype&&(r=r.toInt(),o=o.toInt()),Pr(r.shape,o.shape),Lt.runKernelFunc((function(t,e){var n=t.minimum(r,o);return e([r,o]),n}),{a:r,b:o},(function(t,e){var n=e[0],r=e[1];return{a:function(){return t.mul(n.lessEqual(r).toFloat())},b:function(){return t.mul(n.greater(r).toFloat())}}}),\"Minimum\")}}),ko=An({minimumStrict_:function(t,e){var n=gn(t,\"a\",\"minimumStrict\"),r=gn(e,\"b\",\"minimumStrict\");return E(n.shape,r.shape,\"Error in minimumStrict: \"),n.minimum(r)}}),So=An({mod_:function(t,e){var n,r=gn(t,\"a\",\"mod\"),o=gn(e,\"b\",\"mod\");n=Nt(r,o),r=n[0],o=n[1];var a=Pr(r.shape,o.shape);return Lt.runKernelFunc((function(t,e){var n=t.mod(r,o);return e([r,o]),n}),{$a:r,$b:o},(function(t,e){var n=e[0],r=e[1];return{$a:function(){var e=Br(n.shape,a);return e.length>0?t.sum(e).reshape(n.shape):t},$b:function(){var e=t.mul(n.div(r).floor().neg()),o=Br(r.shape,a);return o.length>0?e.sum(o).reshape(r.shape):e}}}))}}),Ao=An({modStrict_:function(t,e){var n=gn(t,\"a\",\"modStrict\"),r=gn(e,\"b\",\"modStrict\");return E(n.shape,r.shape,\"Error in modStrict: \"),n.mod(r)}}),To=An({mul_:function(t,e){var n,r=gn(t,\"a\",\"mul\"),o=gn(e,\"b\",\"mul\");n=Nt(r,o),r=n[0],o=n[1];var a=Pr(r.shape,o.shape);return Lt.runKernelFunc((function(t,e){var n=t.multiply(r,o);return e([r,o]),n}),{a:r,b:o},(function(t,e){var n=e[0],r=e[1];return{a:function(){var e=t.mul(r.toFloat()),o=Br(n.shape,a);return o.length>0?e.sum(o).reshape(n.shape):e},b:function(){var e=t.mul(n.toFloat()),o=Br(r.shape,a);return o.length>0?e.sum(o).reshape(r.shape):e}}}),\"Mul\")}}),Do=An({mulStrict_:function(t,e){var n=gn(t,\"a\",\"mul\"),r=gn(e,\"b\",\"mul\");return E(n.shape,r.shape,\"Error in multiplyStrict: \"),n.mul(r)}}),No=An({pow_:function(t,e){var n,r=gn(t,\"base\",\"pow\"),o=gn(e,\"exp\",\"pow\");n=Nt(r,o),r=n[0],o=n[1];var a=Pr(r.shape,o.shape),i=[r,o];return Lt.runKernelFunc((function(t,e){var n=t.pow(r,o);return e([r,o,n]),n}),{a:r,b:o},(function(t,e){var n=e[0],r=e[1],o=e[2];return{a:function(){var e=r.toFloat(),o=t.mul(e.mul(n.pow(e.sub(On(1))))),i=Br(n.shape,a);return i.length>0&&(o=o.sum(i)),o.reshape(n.shape)},b:function(){var e=n.greater(0),i=n.log().where(e,Xn(n)),s=t.mul(o.mul(i)),u=Br(r.shape,a);return u.length>0&&(s=s.sum(u)),s.reshape(r.shape)}}}),\"Pow\",{},i,[!0])}}),Fo=An({powStrict_:function(t,e){return E(t.shape,e.shape,\"Error in powStrict: \"),t.pow(e)}}),_o=An({squaredDifferenceStrict_:function(t,e){var n=gn(t,\"a\",\"squaredDifferenceStrict\"),r=gn(e,\"b\",\"squaredDifferenceStrict\");return E(n.shape,r.shape,\"Error in squaredDifferenceStrict: \"),n.squaredDifference(r)}}),Oo=An({sub_:function(t,e){var n,r=gn(t,\"a\",\"sub\"),o=gn(e,\"b\",\"sub\");n=Nt(r,o),r=n[0],o=n[1];var a=Pr(r.shape,o.shape);return Lt.runKernelFunc((function(t){return t.subtract(r,o)}),{a:r,b:o},(function(t){return{a:function(){var e=t,n=Br(r.shape,a);return n.length>0&&(e=e.sum(n)),e.reshape(r.shape)},b:function(){var e=t,n=Br(o.shape,a);return n.length>0&&(e=e.sum(n)),e.neg().reshape(o.shape)}}}),\"Sub\")}}),Mo=An({subStrict_:function(t,e){var n=gn(t,\"a\",\"subStrict\"),r=gn(e,\"b\",\"subStrict\");return E(n.shape,r.shape,\"Error in subStrict: \"),n.sub(r)}});var Bo=An({div_:function(t,e){var n,r=gn(t,\"a\",\"div\"),o=gn(e,\"b\",\"div\");if(n=Nt(r,o),r=n[0],o=n[1],\"int32\"===r.dtype&&\"int32\"===o.dtype)return Co(r,o);var a={a:r,b:o};return Lt.runKernelFunc((function(t,e){var n=t.realDivide(r,o);return e([r,o]),n}),a,null,wr,{})}});function Po(t,e){if(t.rank<1)throw new Error(\"tf.gatherND() expects the input to be rank 1 or higher, but the rank was \"+t.rank+\".\");if(e.rank<1)throw new Error(\"tf.gatherND() expects the indices to be rank 1 or higher, but the rank was \"+e.rank+\".\");if(\"int32\"!==e.dtype)throw new Error(\"tf.gatherND() expects the indices to be int32 type, but the dtype was \"+e.dtype+\".\");if(e.shape[e.rank-1]>t.rank)throw new Error(\"index innermost dimension length must be <= tensor rank; saw: \"+e.shape[e.rank-1]+\" vs. \"+t.rank);if(0===t.size)throw new Error(\"Requested more than 0 entries, but input is empty. Input shape: \"+t.shape+\".\");for(var n=e.shape,r=n[n.length-1],o=1,a=0;a<n.length-1;++a)o*=n[a];var i=t.shape,s=n.slice();s.pop();var u=1;for(a=r;a<t.rank;++a)u*=i[a],s.push(i[a]);var c=$(t.shape).map((function(t){return t/u})).concat([1]).slice(0,r);return[s,o,u,c]}var Lo=Object.freeze({prepareAndValidate:Po}),Wo=30;function Uo(t){return t<=Wo?t:Y(t,Math.floor(Math.sqrt(t)))}function Vo(t,e,n){var r=e.rank>1?e.shape[e.rank-1]:1,o=e.rank>1?e.rank-1:1,a=\"Must have updates.shape = indices.shape[:batchDim] + shape[sliceDim:], got updates.shape: \"+n.shape+\", indices.shape: \"+e.shape+\", shape: \"+t+\", sliceDim: \"+r+\", and batchDim: \"+o+\".\";if(n.rank<o)throw new Error(a+\" update.rank < \"+o+\". \");if(t.length<r+(n.rank-o))throw new Error(a+\" Output shape length < \"+(r+(n.rank-o)));if(n.rank!==o+t.length-r)throw new Error(a+\" update.rank != \"+(o+t.length-r));for(var i=0;i<o;++i)if(n.shape[i]!==e.shape[i])throw new Error(a+\" updates.shape[\"+i+\"] (\"+n.shape[i]+\") != indices.shape[\"+i+\"] (\"+e.shape[i]+\").\");for(i=0;i<n.rank-o;++i)if(n.shape[i+o]!==t[i+r])throw new Error(a+\" updates.shape[\"+(i+o)+\"] (\"+n.shape[i+o]+\") != shape[\"+(i+o)+\"] (\"+t[i+o]+\")\")}function zo(t,e,n){if(e.rank<1)throw new Error(\"tf.scatterND() expects the indices to be rank 1 or higher, but the rank was \"+e.rank+\".\");if(t.rank<1)throw new Error(\"tf.scatterND() expects the updates to be rank 1 or higher, but the rank was \"+t.rank+\".\");if(\"int32\"!==e.dtype)throw new Error(\"The dtype of 'indices' should be int32, but got dtype: \"+e.dtype);if(n.length<1)throw new Error(\"Output rank must be greater or equal to 1, but got shape: \"+n);if(0===n.length){if(0===e.size)throw new Error(\"Indices specified for empty output. indices shape: \"+e.shape);if(0===t.size)throw new Error(\"Updates specified for empty output. updates shape: \"+t.shape)}Vo(n,e,t)}function Go(t,e,n){for(var r=e.shape.length,o=r>1?e.shape[r-1]:1,a=n.length,i=1,s=o;s<a;++s)i*=n[s];var u=o<1?1:o;return{sliceRank:o,numUpdates:k(e.shape)/u,sliceSize:i,strides:$(n.slice(0,o)).concat([1]),outputSize:k(n)}}var Ho=Object.freeze({validateUpdateShape:Vo,validateInput:zo,calculateShapes:Go});function qo(t,e,n){C(t.rank===e.length,(function(){return\"Error in slice\"+t.rank+\"D: Length of begin \"+e+\" must match the rank of the array (\"+t.rank+\").\"})),C(t.rank===n.length,(function(){return\"Error in slice\"+t.rank+\"D: Length of size \"+n+\" must match the rank of the array (\"+t.rank+\").\"}));for(var r=function(r){C(e[r]+n[r]<=t.shape[r],(function(){return\"Error in slice\"+t.rank+\"D: begin[\"+r+\"] + size[\"+r+\"] (\"+(e[r]+n[r])+\") would overflow input.shape[\"+r+\"] (\"+t.shape[r]+\")\"}))},o=0;o<t.rank;++o)r(o)}function Ko(t){for(var e=[],n=0;t>0;)1&t&&e.push(n),t/=2,n++;return e}function jo(t,e,n){for(var r=[],o=0;o<t.length;o++)r[o]=Math.ceil((e[o]-t[o])/n[o]);return r}function Xo(t,e,n,r,o){var a=e[o],i=n[o]||1;(t&1<<o||null==a)&&(a=i>0?Number.MIN_SAFE_INTEGER:Number.MAX_SAFE_INTEGER);var s=r[o];return a<0&&(a+=s),a=x(0,a,s-1)}function Yo(t,e,n,r,o){var a=e[o],i=n[o]||1;(t&1<<o||null==a)&&(a=i>0?Number.MAX_SAFE_INTEGER:Number.MIN_SAFE_INTEGER);var s=r[o];return a<0&&(a+=s),a=i>0?x(0,a,s):x(-1,a,s-1)}function $o(t,e,n){for(var r=n.length,o=0;o<n.length;o++)if(n[o]>1){r=o;break}for(o=r+1;o<n.length;o++)if(e[o]>0||n[o]!==t[o])return!1;return!0}function Qo(t,e){for(var n=t.length>0?t[t.length-1]:1,r=0;r<t.length-1;r++)n+=t[r]*e[r];return n}var Jo=Object.freeze({assertParamsValid:qo,maskToAxes:Ko,computeOutShape:jo,startForAxis:Xo,stopForAxis:Yo,isSliceContinous:$o,computeFlatOffset:Qo});function Zo(t){return C(X(t),(function(){return\"The f passed in grad(f) must be a function\"})),function(e,n){var r=gn(e,\"x\",\"tf.grad\",null),o=null!=n?gn(n,\"dy\",\"tf.grad\"):null;return Lt.tidy((function(){var e=Lt.gradients((function(){return t(r)}),[r],o),n=e.value,a=e.grads;return null!=o&&E(n.shape,o.shape,\"The shape of dy passed in grad(f)(x, dy) must match the shape returned by f(x)\"),aa(a),a[0]}))}}function ta(t){return C(X(t),(function(){return\"The f passed in grads(f) must be a function\"})),function(e,n){C(Array.isArray(e),(function(){return\"The args passed in grads(f)(args) must be an array of `Tensor`s or `TensorLike`s\"}));var r=mn(e,\"args\",\"tf.grads\",null),o=null!=n?gn(n,\"dy\",\"tf.grads\"):null;return Lt.tidy((function(){var e=Lt.gradients((function(){return t.apply(void 0,r)}),r,o),n=e.value,a=e.grads;return null!=o&&E(n.shape,o.shape,\"The shape of dy passed in grads(f)([x1,...], dy) must match the shape returned by f([x1,...])\"),aa(a),a}))}}function ea(t){return C(X(t),(function(){return\"The f passed in valueAndGrad(f) must be a function\"})),function(e,n){C(e instanceof wt,(function(){return\"The x passed in valueAndGrad(f)(x) must be a tensor\"})),C(null==n||n instanceof wt,(function(){return\"The dy passed in valueAndGrad(f)(x, dy) must be a tensor\"}));var r=Lt.gradients((function(){return t(e)}),[e],n),o=r.grads,a=r.value;return aa(o),{grad:o[0],value:a}}}function na(t){return C(X(t),(function(){return\"The f passed in valueAndGrads(f) must be a function\"})),function(e,n){C(Array.isArray(e)&&e.every((function(t){return t instanceof wt})),(function(){return\"The args passed in valueAndGrads(f)(args) must be array of tensors\"})),C(null==n||n instanceof wt,(function(){return\"The dy passed in valueAndGrads(f)(args, dy) must be a tensor\"}));var r=Lt.gradients((function(){return t.apply(void 0,e)}),e,n);return null!=n&&E(r.value.shape,n.shape,\"The shape of dy passed in valueAndGrads(f)([x1,...], dy) must match the shape returned by f([x1,...])\"),aa(r.grads),r}}function ra(t,e){C(X(t),(function(){return\"The f passed in variableGrads(f) must be a function\"})),C(null==e||Array.isArray(e)&&e.every((function(t){return t instanceof St})),(function(){return\"The varList passed in variableGrads(f, varList) must be an array of variables\"}));var n=null!=e;if(!n)for(var r in e=[],Lt.registeredVariables)e.push(Lt.registeredVariables[r]);var o=n?e.filter((function(t){return!t.trainable})):null,a=e.length;C((e=e.filter((function(t){return t.trainable}))).length>0,(function(){return\"variableGrads() expects at least one of the input variables to be trainable, but none of the \"+a+\" variables is trainable.\"}));var i=Lt.gradients(t,e,null,!0),s=i.value,u=i.grads;C(u.some((function(t){return null!=t})),(function(){return\"Cannot find a connection between any variable and the result of the loss function y=f(x). Please make sure the operations that use variables are inside the function f passed to minimize().\"})),C(0===s.rank,(function(){return\"The f passed in variableGrads(f) must return a scalar, but it returned a rank-\"+s.rank+\" tensor\"}));var c={};return e.forEach((function(t,e){null!=u[e]&&(c[t.name]=u[e])})),null!=o&&o.forEach((function(t){return c[t.name]=null})),{value:s,grads:c}}function oa(t){return Lt.customGrad(t)}function aa(t){if(t.filter((function(t){return null==t})).length>0)throw new Error(\"Cannot compute gradient of y=f(x) with respect to x. Make sure that\\n    the f you passed encloses all operations that lead from x to y.\")}var ia=An({softmax_:function(t,e){void 0===e&&(e=-1);var n=gn(t,\"logits\",\"softmax\",\"float32\");if(-1===e&&(e=n.rank-1),e!==n.rank-1)throw Error(\"Softmax along a non-last dimension is not yet supported. Logits was rank \"+n.rank+\" and dim was \"+e);return Lt.runKernelFunc((function(t,r){var o=t.softmax(n,e);return r([o]),o}),{logits:n},(function(t,n){var r=n[0],o=t.mul(r);return{logits:function(){return o.sub(o.sum([e],!0).mul(r))}}}),\"Softmax\",{dim:e},[],[!0])}}),sa=An({logSoftmax_:function(t,e){void 0===e&&(e=-1);var n=gn(t,\"logits\",\"logSoftmax\");if(-1===e&&(e=n.rank-1),e!==n.rank-1)throw Error(\"Log Softmax along a non-last dimension is not yet supported. Logits was rank \"+n.rank+\" and axis was \"+e);return oa((function(t,n){var r=t.max(e,!0),o=t.sub(r),a=o.toFloat().sub(o.exp().sum(e,!0).log());n([a]);return{value:a,gradFunc:function(t,n){var r=n[0].exp();return t.sub(t.sum(e,!0).mul(r))}}}))(n)}});var ua=An({transpose_:function(t,e){var n=gn(t,\"x\",\"transpose\");if(null==e&&(e=n.shape.map((function(t,e){return e})).reverse()),C(n.rank===e.length,(function(){return\"Error in transpose: rank of input \"+n.rank+\" must match length of perm \"+e+\".\"})),e.forEach((function(t){C(t>=0&&t<n.rank,(function(){return\"All entries in 'perm' must be between 0 and \"+(n.rank-1)+\" but got \"+e}))})),n.rank<=1)return n.clone();var r={perm:e};return Lt.runKernelFunc((function(t){return t.transpose(n,e)}),{x:n},null,\"Transpose\",r)}}),ca=function(){function t(t,e){this.backend=t,this.dataMover=e,this.data=new WeakMap,this.dataIdsCount=0}return t.prototype.get=function(t){return this.data.has(t)||this.dataMover.moveData(this.backend,t),this.data.get(t)},t.prototype.set=function(t,e){this.dataIdsCount++,this.data.set(t,e)},t.prototype.has=function(t){return this.data.has(t)},t.prototype.delete=function(t){return this.dataIdsCount--,this.data.delete(t)},t.prototype.numDataIds=function(){return this.dataIdsCount},t}(),la=function(){function t(){}return t.prototype.time=function(t){return ha(\"time\")},t.prototype.read=function(t){return ha(\"read\")},t.prototype.readSync=function(t){return ha(\"readSync\")},t.prototype.numDataIds=function(){return ha(\"numDataIds\")},t.prototype.disposeData=function(t){return ha(\"disposeData\")},t.prototype.write=function(t,e,n){return ha(\"write\")},t.prototype.move=function(t,e,n,r){return ha(\"move\")},t.prototype.memory=function(){return ha(\"memory\")},t.prototype.floatPrecision=function(){return ha(\"floatPrecision\")},t.prototype.epsilon=function(){return 32===this.floatPrecision()?1e-7:1e-4},t.prototype.batchMatMul=function(t,e,n,r){return ha(\"batchMatMul\")},t.prototype.fusedBatchMatMul=function(t){t.a,t.b,t.transposeA,t.transposeB,t.bias,t.activation,t.preluActivationWeights;return ha(\"fusedBatchMatMul\")},t.prototype.slice=function(t,e,n){return ha(\"slice\")},t.prototype.stridedSlice=function(t,e,n,r){return ha(\"stridedSlice\")},t.prototype.unstack=function(t,e){return ha(\"unstack\")},t.prototype.reverse=function(t,e){return ha(\"reverse\")},t.prototype.concat=function(t,e){return ha(\"concat\")},t.prototype.neg=function(t){return ha(\"neg\")},t.prototype.add=function(t,e){return ha(\"add\")},t.prototype.addN=function(t){return ha(\"addN\")},t.prototype.subtract=function(t,e){return ha(\"subtract\")},t.prototype.multiply=function(t,e){return ha(\"multiply\")},t.prototype.realDivide=function(t,e){return ha(\"realDivide\")},t.prototype.floorDiv=function(t,e){return ha(\"floorDiv\")},t.prototype.sum=function(t,e){return ha(\"sum\")},t.prototype.prod=function(t,e){return ha(\"prod\")},t.prototype.unsortedSegmentSum=function(t,e,n){return ha(\"unsortedSegmentSum\")},t.prototype.argMin=function(t,e){return ha(\"argMin\")},t.prototype.argMax=function(t,e){return ha(\"argMax\")},t.prototype.equal=function(t,e){return ha(\"equal\")},t.prototype.notEqual=function(t,e){return ha(\"notEqual\")},t.prototype.less=function(t,e){return ha(\"less\")},t.prototype.lessEqual=function(t,e){return ha(\"lessEqual\")},t.prototype.greater=function(t,e){return ha(\"greater\")},t.prototype.greaterEqual=function(t,e){return ha(\"greaterEqual\")},t.prototype.logicalNot=function(t){return ha(\"logicalNot\")},t.prototype.logicalAnd=function(t,e){return ha(\"logicalAnd\")},t.prototype.logicalOr=function(t,e){return ha(\"logicalOr\")},t.prototype.where=function(t){return ha(\"where\")},t.prototype.select=function(t,e,n){return ha(\"select\")},t.prototype.topk=function(t,e,n){return ha(\"topk\")},t.prototype.min=function(t,e){return ha(\"min\")},t.prototype.minimum=function(t,e){return ha(\"minimum\")},t.prototype.mod=function(t,e){return ha(\"mod\")},t.prototype.max=function(t,e){return ha(\"max\")},t.prototype.maximum=function(t,e){return ha(\"maximum\")},t.prototype.all=function(t,e){return ha(\"all\")},t.prototype.any=function(t,e){return ha(\"any\")},t.prototype.squaredDifference=function(t,e){return ha(\"squaredDifference\")},t.prototype.ceil=function(t){return ha(\"ceil\")},t.prototype.floor=function(t){return ha(\"floor\")},t.prototype.round=function(t){return ha(\"round\")},t.prototype.sign=function(t){return ha(\"sign\")},t.prototype.isNaN=function(t){return ha(\"isNaN\")},t.prototype.isInf=function(t){return ha(\"isInf\")},t.prototype.isFinite=function(t){return ha(\"isFinite\")},t.prototype.pow=function(t,e){return ha(\"pow\")},t.prototype.exp=function(t){return ha(\"exp\")},t.prototype.expm1=function(t){return ha(\"expm1\")},t.prototype.softmax=function(t,e){return ha(\"softmax\")},t.prototype.log=function(t){return ha(\"log\")},t.prototype.log1p=function(t){return ha(\"log1p\")},t.prototype.sqrt=function(t){return ha(\"sqrt\")},t.prototype.rsqrt=function(t){return ha(\"rsqrt\")},t.prototype.square=function(t){return ha(\"square\")},t.prototype.reciprocal=function(t){return ha(\"reciprocal\")},t.prototype.relu=function(t){return ha(\"relu\")},t.prototype.relu6=function(t){return ha(\"relu6\")},t.prototype.prelu=function(t,e){return ha(\"prelu\")},t.prototype.elu=function(t){return ha(\"elu\")},t.prototype.eluDer=function(t,e){return ha(\"eluDer\")},t.prototype.selu=function(t){return ha(\"selu\")},t.prototype.int=function(t){return ha(\"int\")},t.prototype.clip=function(t,e,n){return ha(\"clip\")},t.prototype.abs=function(t){return ha(\"abs\")},t.prototype.complexAbs=function(t){return ha(\"complexAbs\")},t.prototype.sigmoid=function(t){return ha(\"sigmoid\")},t.prototype.softplus=function(t){return ha(\"softplus\")},t.prototype.sin=function(t){return ha(\"sin\")},t.prototype.cos=function(t){return ha(\"cos\")},t.prototype.tan=function(t){return ha(\"tan\")},t.prototype.asin=function(t){return ha(\"asin\")},t.prototype.acos=function(t){return ha(\"acos\")},t.prototype.atan=function(t){return ha(\"atan\")},t.prototype.atan2=function(t,e){return ha(\"atan2\")},t.prototype.sinh=function(t){return ha(\"sinh\")},t.prototype.cosh=function(t){return ha(\"cosh\")},t.prototype.tanh=function(t){return ha(\"tanh\")},t.prototype.asinh=function(t){return ha(\"asinh\")},t.prototype.acosh=function(t){return ha(\"acosh\")},t.prototype.atanh=function(t){return ha(\"atanh\")},t.prototype.erf=function(t){return ha(\"erf\")},t.prototype.step=function(t,e){return ha(\"step\")},t.prototype.fusedConv2d=function(t){t.input,t.filter,t.convInfo,t.bias,t.activation,t.preluActivationWeights;return ha(\"fusedConv2d\")},t.prototype.conv2d=function(t,e,n){return ha(\"conv2d\")},t.prototype.conv2dDerInput=function(t,e,n){return ha(\"conv2dDerInput\")},t.prototype.conv2dDerFilter=function(t,e,n){return ha(\"conv2dDerFilter\")},t.prototype.fusedDepthwiseConv2D=function(t){t.input,t.filter,t.convInfo,t.bias,t.activation,t.preluActivationWeights;return ha(\"fusedDepthwiseConv2D\")},t.prototype.depthwiseConv2D=function(t,e,n){return ha(\"depthwiseConv2D\")},t.prototype.depthwiseConv2DDerInput=function(t,e,n){return ha(\"depthwiseConv2DDerInput\")},t.prototype.depthwiseConv2DDerFilter=function(t,e,n){return ha(\"depthwiseConv2DDerFilter\")},t.prototype.conv3d=function(t,e,n){return ha(\"conv3d\")},t.prototype.conv3dDerInput=function(t,e,n){return ha(\"conv3dDerInput\")},t.prototype.conv3dDerFilter=function(t,e,n){return ha(\"conv3dDerFilter\")},t.prototype.maxPool=function(t,e){return ha(\"maxPool\")},t.prototype.maxPoolBackprop=function(t,e,n,r){return ha(\"maxPoolBackprop\")},t.prototype.avgPool=function(t,e){return ha(\"avgPool\")},t.prototype.avgPoolBackprop=function(t,e,n){return ha(\"avgPoolBackprop\")},t.prototype.avgPool3d=function(t,e){return ha(\"avgPool3d\")},t.prototype.avgPool3dBackprop=function(t,e,n){return ha(\"avgPool3dBackprop\")},t.prototype.maxPool3d=function(t,e){return ha(\"maxPool3d\")},t.prototype.maxPool3dBackprop=function(t,e,n,r){return ha(\"maxPool3dBackprop\")},t.prototype.reshape=function(t,e){return ha(\"reshape\")},t.prototype.cast=function(t,e){return ha(\"cast\")},t.prototype.tile=function(t,e){return ha(\"tile\")},t.prototype.pad=function(t,e,n){return ha(\"pad\")},t.prototype.transpose=function(t,e){return ha(\"transpose\")},t.prototype.gather=function(t,e,n){return ha(\"gather\")},t.prototype.gatherND=function(t,e){return ha(\"gatherND\")},t.prototype.scatterND=function(t,e,n){return ha(\"scatterND\")},t.prototype.batchToSpaceND=function(t,e,n){return ha(\"batchToSpaceND\")},t.prototype.spaceToBatchND=function(t,e,n){return ha(\"spaceToBatchND\")},t.prototype.resizeBilinear=function(t,e,n,r){return ha(\"resizeBilinear\")},t.prototype.resizeBilinearBackprop=function(t,e,n){return ha(\"resizeBilinearBackprop\")},t.prototype.resizeNearestNeighbor=function(t,e,n,r){return ha(\"resizeNearestNeighbor\")},t.prototype.resizeNearestNeighborBackprop=function(t,e,n){return ha(\"resizeNearestNeighborBackprop\")},t.prototype.batchNormalization=function(t,e,n,r,o,a){return ha(\"batchNormalization\")},t.prototype.localResponseNormalization4D=function(t,e,n,r,o){return ha(\"localResponseNormalization4D\")},t.prototype.LRNGrad=function(t,e,n,r,o,a,i){return ha(\"LRNGrad\")},t.prototype.multinomial=function(t,e,n,r){return ha(\"multinomial\")},t.prototype.oneHot=function(t,e,n,r){return ha(\"oneHot\")},t.prototype.cumsum=function(t,e,n,r){return ha(\"cumsum\")},t.prototype.nonMaxSuppression=function(t,e,n,r,o){return ha(\"nonMaxSuppression\")},t.prototype.fft=function(t){return ha(\"fft\")},t.prototype.ifft=function(t){return ha(\"ifft\")},t.prototype.complex=function(t,e){return ha(\"complex\")},t.prototype.real=function(t){return ha(\"real\")},t.prototype.imag=function(t){return ha(\"imag\")},t.prototype.cropAndResize=function(t,e,n,r,o,a){return ha(\"cropAndResize\")},t.prototype.depthToSpace=function(t,e,n){return ha(\"depthToSpace\")},t.prototype.split=function(t,e,n){return ha(\"split\")},t.prototype.sparseToDense=function(t,e,n,r){return ha(\"sparseToDense\")},t.prototype.diag=function(t){return ha(\"diag\")},t.prototype.fill=function(t,e,n){return ha(\"fill\")},t.prototype.onesLike=function(t){return ha(\"onesLike\")},t.prototype.zerosLike=function(t){return ha(\"zerosLike\")},t.prototype.linspace=function(t,e,n){return ha(\"linspace\")},t.prototype.dispose=function(){return ha(\"dispose\")},t}();function ha(t){throw new Error(\"'\"+t+\"' not yet implemented or not found in the registry. Did you forget to import the kernel?\")}function fa(t,e,n,r,o,a,i){void 0===i&&(i=\"channelsLast\");var s,u=ma(e),c=u[0],l=u[1];if(\"channelsLast\"===i)s=[c,l,t[3],t[3]];else{if(\"channelsFirst\"!==i)throw new Error(\"Unknown dataFormat \"+i);s=[c,l,t[1],t[1]]}return pa(t,s,n,r,o,a,!1,i)}function da(t,e,n,r,o,a,i){void 0===i&&(i=\"NDHWC\");var s,u,c=ya(e),l=c[0],h=c[1],f=c[2];if(\"NDHWC\"===i)u=\"channelsLast\",s=[l,h,f,t[4],t[4]];else{if(\"NCDHW\"!==i)throw new Error(\"Unknown dataFormat \"+i);u=\"channelsFirst\",s=[l,h,f,t[1],t[1]]}return va(t,s,n,r,o,!1,u,a)}function pa(t,e,n,r,o,a,i,s){void 0===i&&(i=!1),void 0===s&&(s=\"channelsLast\");var u=[-1,-1,-1,-1],c=u[0],l=u[1],h=u[2],f=u[3];if(\"channelsLast\"===s)c=t[0],l=t[1],h=t[2],f=t[3];else{if(\"channelsFirst\"!==s)throw new Error(\"Unknown dataFormat \"+s);c=t[0],f=t[1],l=t[2],h=t[3]}var d,p=e[0],v=e[1],g=e[3],m=ma(n),y=m[0],x=m[1],b=ma(r),w=b[0],E=b[1],R=xa(p,w),I=xa(v,E),k=function(t,e,n,r,o,a,i,s){var u,c,l;if(\"number\"==typeof t){u={top:t,bottom:t,left:t,right:t,type:0===t?\"VALID\":\"NUMBER\"};var h=function(t,e,n,r,o){null==r&&(r=ga(t,e,n));var a=t[0],i=t[1],s=ba((a-e+2*r)/n+1,o);C(A(s),(function(){return\"The output # of rows (\"+s+\") must be an integer. Change the stride and/or zero pad parameters\"}));var u=ba((i-e+2*r)/n+1,o);return C(A(u),(function(){return\"The output # of columns (\"+u+\") must be an integer. Change the stride and/or zero pad parameters\"})),[s,u]}([e,n],a,r,t,s);c=h[0],l=h[1]}else if(\"same\"===t){c=Math.ceil(e/r),l=Math.ceil(n/o);var f=Math.max(0,(c-1)*r+a-e),d=Math.max(0,(l-1)*o+i-n),p=Math.floor(f/2),v=f-p,g=Math.floor(d/2);u={top:p,bottom:v,left:g,right:d-g,type:\"SAME\"}}else{if(\"valid\"!==t)throw Error(\"Unknown padding parameter: \"+t);u={top:0,bottom:0,left:0,right:0,type:\"VALID\"},c=Math.ceil((e-a+1)/r),l=Math.ceil((n-i+1)/o)}return{padInfo:u,outHeight:c,outWidth:l}}(o,l,h,y,x,R,I,a),S=k.padInfo,T=k.outHeight,D=k.outWidth,N=i?g*f:g;return\"channelsFirst\"===s?d=[c,N,T,D]:\"channelsLast\"===s&&(d=[c,T,D,N]),{batchSize:c,dataFormat:s,inHeight:l,inWidth:h,inChannels:f,outHeight:T,outWidth:D,outChannels:N,padInfo:S,strideHeight:y,strideWidth:x,filterHeight:p,filterWidth:v,effectiveFilterHeight:R,effectiveFilterWidth:I,dilationHeight:w,dilationWidth:E,inShape:t,outShape:d,filterShape:e}}function va(t,e,n,r,o,a,i,s){void 0===a&&(a=!1),void 0===i&&(i=\"channelsLast\");var u=[-1,-1,-1,-1,-1],c=u[0],l=u[1],h=u[2],f=u[3],d=u[4];if(\"channelsLast\"===i)c=t[0],l=t[1],h=t[2],f=t[3],d=t[4];else{if(\"channelsFirst\"!==i)throw new Error(\"Unknown dataFormat \"+i);c=t[0],d=t[1],l=t[2],h=t[3],f=t[4]}var p,v=e[0],g=e[1],m=e[2],y=e[4],x=ya(n),b=x[0],w=x[1],E=x[2],R=ya(r),I=R[0],k=R[1],S=R[2],T=xa(v,I),D=xa(g,k),N=xa(m,S),F=function(t,e,n,r,o,a,i,s,u,c,l){var h,f,d,p;if(\"number\"==typeof t){h={top:t,bottom:t,left:t,right:t,front:t,back:t,type:0===t?\"VALID\":\"NUMBER\"};var v=function(t,e,n,r,o,a){null==o&&(o=ga(t,e,r));var i=t[0],s=t[1],u=t[2],c=ba((i-e+2*o)/r+1,a);C(A(c),(function(){return\"The output # of depths (\"+c+\") must be an integer. Change the stride and/or zero pad parameters\"}));var l=ba((s-e+2*o)/r+1,a);C(A(l),(function(){return\"The output # of rows (\"+l+\") must be an integer. Change the stride and/or zero pad parameters\"}));var h=ba((u-e+2*o)/r+1,a);return C(A(h),(function(){return\"The output # of columns (\"+h+\") must be an integer. Change the stride and/or zero pad parameters\"})),[c,l,h,n]}([e,n,r,1],s,1,o,t,l);f=v[0],d=v[1],p=v[2]}else if(\"same\"===t){f=Math.ceil(e/o),d=Math.ceil(n/a),p=Math.ceil(r/i);var g=(f-1)*o+s-e,m=(d-1)*a+u-n,y=(p-1)*i+c-r,x=Math.floor(g/2),b=g-x,w=Math.floor(m/2),E=m-w,R=Math.floor(y/2);h={top:w,bottom:E,left:R,right:y-R,front:x,back:b,type:\"SAME\"}}else{if(\"valid\"!==t)throw Error(\"Unknown padding parameter: \"+t);h={top:0,bottom:0,left:0,right:0,front:0,back:0,type:\"VALID\"},f=Math.ceil((e-s+1)/o),d=Math.ceil((n-u+1)/a),p=Math.ceil((r-c+1)/i)}return{padInfo:h,outDepth:f,outHeight:d,outWidth:p}}(o,l,h,f,b,w,E,T,D,N,s),_=F.padInfo,O=F.outDepth,M=F.outHeight,B=F.outWidth,P=a?y*d:y;return\"channelsFirst\"===i?p=[c,P,O,M,B]:\"channelsLast\"===i&&(p=[c,O,M,B,P]),{batchSize:c,dataFormat:i,inDepth:l,inHeight:h,inWidth:f,inChannels:d,outDepth:O,outHeight:M,outWidth:B,outChannels:P,padInfo:_,strideDepth:b,strideHeight:w,strideWidth:E,filterDepth:v,filterHeight:g,filterWidth:m,effectiveFilterDepth:T,effectiveFilterHeight:D,effectiveFilterWidth:N,dilationDepth:I,dilationHeight:k,dilationWidth:S,inShape:t,outShape:p,filterShape:e}}function ga(t,e,n,r){void 0===r&&(r=1);var o=xa(e,r);return Math.floor((t[0]*(n-1)-n+o)/2)}function ma(t){return\"number\"==typeof t?[t,t,t]:2===t.length?[t[0],t[1],1]:t}function ya(t){return\"number\"==typeof t?[t,t,t]:t}function xa(t,e){return e<=1?t:t+(t-1)*(e-1)}function ba(t,e){if(!e)return t;switch(e){case\"round\":return Math.round(t);case\"ceil\":return Math.ceil(t);case\"floor\":return Math.floor(t);default:throw new Error(\"Unknown roundingMode \"+e)}}function wa(t){var e=ma(t),n=e[0],r=e[1],o=e[2];return 1===n&&1===r&&1===o}function Ca(t,e){return wa(t)||wa(e)}function Ea(t){if(\"NHWC\"===t)return\"channelsLast\";if(\"NCHW\"===t)return\"channelsFirst\";throw new Error(\"Unknown dataFormat \"+t)}function Ra(t,e,n){if(\"complex64\"===e){if(\"complex64\"===t.dtype)return t.clone();var r=Gn(t.shape),o=t.toFloat(),a=n.complex(o,r);return r.dispose(),o.dispose(),a}if(!U(t.dtype,e))return Lt.makeTensorFromDataId(t.dataId,t.shape,e);if(\"complex64\"===t.dtype){var i=n.real(t);a=i.cast(e);return i.dispose(),a}if(\"int32\"===e)return n.int(t);if(\"bool\"===e){var s=On(0,t.dtype);a=n.notEqual(t,s);return s.dispose(),a}throw new Error(\"Error in Cast: failed to cast \"+t.dtype+\" to \"+e)}function Ia(t,e){return Lt.makeTensorFromDataId(t.dataId,e,t.dtype)}function ka(t,e,n){var r=(e-t)/(n-1),o=tt(n,\"float32\");o[0]=t;for(var a=1;a<o.length;a++)o[a]=o[a-1]+r;return Mn(o,\"float32\")}var Sa=Object.freeze({castTensor:Ra,reshapeTensor:Ia,linspaceImpl:ka,upcastType:Tt,axesAreInnerMostDims:yn,combineLocations:xn,computeOutAndReduceShapes:bn,expandShapeToKeepDim:wn,assertAxesAreInnerMostDims:Cn,getAxesPermutation:En,getUndoAxesPermutation:Rn,getInnerMostAxes:In,getBroadcastDims:Mr,getReductionAxes:Br,assertAndGetBroadcastShape:Pr,assertParamsConsistent:kn,computeOutShape:Sn,computePool2DInfo:fa,computePool3DInfo:da,computeConv2DInfo:pa,computeConv3DInfo:va,computeDefaultPad:ga,tupleValuesAreOne:wa,eitherStridesOrDilationsAreOne:Ca,convertConv2DDataFormat:Ea,PARALLELIZE_THRESHOLD:Wo,computeOptimalWindowSize:Uo});function Aa(t,e){if(t.length!==e.length)throw new Error(\"Cannot merge real and imag arrays of different lengths. real:\"+t.length+\", imag: \"+e.length+\".\");for(var n=new Float32Array(2*t.length),r=0;r<n.length;r+=2)n[r]=t[r/2],n[r+1]=e[r/2];return n}function Ta(t,e){return{real:t[2*e],imag:t[2*e+1]}}function Da(t,e,n,r){t[2*r]=e,t[2*r+1]=n}function Na(t,e,n){var r=(n?2:-2)*Math.PI*(t/e);return{real:Math.cos(r),imag:Math.sin(r)}}function Fa(t,e,n){var r=function(t,e,n){return function(t,e,n){var r=0,o=t.length,a=0,i=!1;for(;r<o;){var s=n(e,t[a=r+(o-r>>>1)]);s>0?r=a+1:(o=a,i=!s)}return i?r:-r-1}(t,e,n||_a)}(t,e,n),o=r<0?-(r+1):r;t.splice(o,0,e)}function _a(t,e){return t>e?1:t<e?-1:0}function Oa(t,e,n,r,o){return Ba(t,e,n,r,o,0).selectedIndices}function Ma(t,e,n,r,o,a){var i=Ba(t,e,n,r,o,a,!0);return i.numValidOutputs.dispose(),{selectedIndices:i.selectedIndices,selectedScores:i.selectedScores}}function Ba(t,e,n,r,o,a,i,s){void 0===i&&(i=!1),void 0===s&&(s=!1);for(var u=Array.from(e).map((function(t,e){return{score:t,boxIndex:e,suppressBeginIndex:0}})).filter((function(t){return t.score>o})).sort(Wa),c=a>0?-.5/a:0,l=[],h=[];l.length<n&&u.length>0;){var f=u.pop(),d=f.score,p=f.boxIndex,v=f.suppressBeginIndex;if(d<o)break;for(var g=!1,m=l.length-1;m>=v;--m){var y=Pa(t,p,l[m]);if(y>=r){g=!0;break}if(f.score=f.score*La(r,c,y),f.score<=o)break}f.suppressBeginIndex=l.length,g||(f.score===d?(l.push(p),h.push(f.score)):f.score>o&&Fa(u,f,Wa))}var x=l.length;return s&&(l.fill(0,x),h.fill(0,x)),{selectedIndices:Mn(l,\"int32\"),selectedScores:Mn(h,\"float32\"),numValidOutputs:On(x,\"int32\")}}function Pa(t,e,n){var r=t.subarray(4*e,4*e+4),o=t.subarray(4*n,4*n+4),a=Math.min(r[0],r[2]),i=Math.min(r[1],r[3]),s=Math.max(r[0],r[2]),u=Math.max(r[1],r[3]),c=Math.min(o[0],o[2]),l=Math.min(o[1],o[3]),h=Math.max(o[0],o[2]),f=Math.max(o[1],o[3]),d=(s-a)*(u-i),p=(h-c)*(f-l);if(d<=0||p<=0)return 0;var v=Math.max(a,c),g=Math.max(i,l),m=Math.min(s,h),y=Math.min(u,f),x=Math.max(m-v,0)*Math.max(y-g,0);return x/(d+p-x)}function La(t,e,n){var r=Math.exp(e*n*n);return n<=t?r:0}function Wa(t,e){return t.score-e.score||t.score===e.score&&e.boxIndex-t.boxIndex}function Ua(t,e,n){var r=new Array(t.rank).fill(0),o=t.shape.slice();return e.map((function(e){o[n]=e;var a=t.slice(r,o);return r[n]+=e,a}))}function Va(t,e){for(var n=new Array(t.rank),r=0;r<n.length;r++)n[r]=t.shape[r]*e[r];var o=er(n,t.dtype);for(r=0;r<o.values.length;++r){for(var a=o.indexToLoc(r),i=new Array(t.rank),s=0;s<i.length;s++)i[s]=a[s]%t.shape[s];var u=t.locToIndex(i);o.values[r]=t.values[u]}return o.toTensor()}function za(t,e,n,r,o){for(var a=e[e.length-1],i=[t.length/a,a],s=i[0],u=i[1],c=B(n,s*r),l=B(\"int32\",s*r),h=0;h<s;h++){for(var f=h*u,d=t.subarray(f,f+u),p=[],v=0;v<d.length;v++)p.push({value:d[v],index:v});p.sort((function(t,e){return e.value-t.value}));var g=h*r,m=c.subarray(g,g+r),y=l.subarray(g,g+r);for(v=0;v<r;v++)m[v]=p[v].value,y[v]=p[v].index}var x=e.slice();return x[x.length-1]=r,[Fn(c,x,n),Fn(l,x,\"int32\")]}function Ga(t,e){for(var n=[],r=0;r<e.length;r++)e[r]&&n.push(r);var o=er(t,\"int32\"),a=er([n.length,t.length],\"int32\");for(r=0;r<n.length;r++){var i=o.indexToLoc(n[r]),s=r*t.length;a.values.set(i,s)}return a.toTensor()}var Ha=function(t,e){this.outputShape=[],this.outputShape=t,this.variableNames=e.map((function(t,e){return\"T\"+e}));var n=[];this.variableNames.forEach((function(t){n.push(\"float v\"+t+\" = get\"+t+\"AtOutCoords();\")}));var r=this.variableNames.map((function(t){return\"v\"+t})).join(\" + \");this.userCode=\"\\n      void main() {\\n        \"+n.join(\"\\n        \")+\"\\n\\n        float result = \"+r+\";\\n        setOutput(result);\\n      }\\n    \"},qa=function(t,e){this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t,this.variableNames=e.map((function(t,e){return\"T\"+e}));var n=[];this.variableNames.forEach((function(t){n.push(\"vec4 v\"+t+\" = get\"+t+\"AtOutCoords();\")}));var r=this.variableNames.map((function(t){return\"v\"+t})).join(\" + \");this.userCode=\"\\n      void main() {\\n        \"+n.join(\"\\n        \")+\"\\n\\n        vec4 result = \"+r+\";\\n        setOutput(result);\\n      }\\n    \"},Ka=function(t,e,n){this.variableNames=[\"A\"];var r=t.windowSize,o=t.batchSize,a=t.inSize,i=Math.ceil(a/r);n||this.variableNames.push(\"bestIndicesA\"),this.outputShape=[o,i];var s=\"max\"===e?\">\":\"<\",u=n?\"inOffset + i;\":\"round(getBestIndicesA(batch, inOffset + i));\";this.userCode=\"\\n      void main() {\\n        ivec2 coords = getOutputCoords();\\n        int batch = coords[0];\\n        int outIdx = coords[1];\\n        int inOffset = outIdx * \"+r+\";\\n\\n        int bestIndex = inOffset;\\n        float bestValue = getA(batch, bestIndex);\\n\\n        for (int i = 0; i < \"+r+\"; i++) {\\n          int inIdx = \"+u+\";\\n          float candidate = getA(batch, inIdx);\\n          if (candidate \"+s+\" bestValue) {\\n            bestValue = candidate;\\n            bestIndex = inIdx;\\n          }\\n        }\\n        setOutput(float(bestIndex));\\n      }\\n    \"};function ja(t,e){return[\"x\",\"y\",\"z\",\"w\",\"u\",\"v\"].slice(0,e).map((function(e){return t+\".\"+e}))}function Xa(t,e){return 1===e?[t]:ja(t,e)}function Ya(){var t,e,n,r,o,a,s,u,c,l;return 2===i().getNumber(\"WEBGL_VERSION\")?(t=\"#version 300 es\",e=\"in\",n=\"out\",r=\"in\",o=\"texture\",a=\"outputColor\",s=\"out vec4 outputColor;\",u=\"\\n      bool isnan_custom(float val) {\\n        return (val > 0.0 || val < 0.0) ? false : val != 0.0;\\n      }\\n\\n      bvec4 isnan_custom(vec4 val) {\\n        return bvec4(isnan_custom(val.x),\\n          isnan_custom(val.y), isnan_custom(val.z), isnan_custom(val.w));\\n      }\\n\\n      #define isnan(value) isnan_custom(value)\\n    \",c=\"\",l=\"\\n      #define round(value) newRound(value)\\n      int newRound(float value) {\\n        return int(floor(value + 0.5));\\n      }\\n\\n      ivec4 newRound(vec4 value) {\\n        return ivec4(floor(value + vec4(0.5)));\\n      }\\n    \"):(t=\"\",e=\"attribute\",n=\"varying\",r=\"varying\",o=\"texture2D\",a=\"gl_FragColor\",s=\"\",u=\"\\n      #define isnan(value) isnan_custom(value)\\n      bool isnan_custom(float val) {\\n        return (val > 0. || val < 1. || val == 0.) ? false : true;\\n      }\\n      bvec4 isnan_custom(vec4 val) {\\n        return bvec4(isnan(val.x), isnan(val.y), isnan(val.z), isnan(val.w));\\n      }\\n    \",c=\"\\n      uniform float INFINITY;\\n\\n      bool isinf(float val) {\\n        return abs(val) == INFINITY;\\n      }\\n      bvec4 isinf(vec4 val) {\\n        return equal(abs(val), vec4(INFINITY));\\n      }\\n    \",l=\"\\n      int round(float value) {\\n        return int(floor(value + 0.5));\\n      }\\n\\n      ivec4 round(vec4 value) {\\n        return ivec4(floor(value + vec4(0.5)));\\n      }\\n    \"),{version:t,attribute:e,varyingVs:n,varyingFs:r,texture2D:o,output:a,defineOutput:s,defineSpecialNaN:u,defineSpecialInf:c,defineRound:l}}function $a(t,e,n){void 0===n&&(n=\"index\");var r=$(e);return r.map((function(e,o){return\"int \"+t[o]+\" = \"+n+\" / \"+e+\"; \"+(o===r.length-1?\"int \"+t[o+1]+\" = \"+n+\" - \"+t[o]+\" * \"+e:\"index -= \"+t[o]+\" * \"+e)+\";\"})).join(\"\")}function Qa(t){var e=$(t).map((function(t){return t.toString()}));return\"\\n  int getFlatIndex(ivec3 coords) {\\n    return coords.x * \"+e[0]+\" + coords.y * \"+e[1]+\" + coords.z;\\n  }\\n\"}var Ja=\"\\n  const float FLOAT_MAX = 1.70141184e38;\\n  const float FLOAT_MIN = 1.17549435e-38;\\n\\n  lowp vec4 encode_float(highp float v) {\\n    if (isnan(v)) {\\n      return vec4(255, 255, 255, 255);\\n    }\\n\\n    highp float av = abs(v);\\n\\n    if(av < FLOAT_MIN) {\\n      return vec4(0.0, 0.0, 0.0, 0.0);\\n    } else if(v > FLOAT_MAX) {\\n      return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;\\n    } else if(v < -FLOAT_MAX) {\\n      return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;\\n    }\\n\\n    highp vec4 c = vec4(0,0,0,0);\\n\\n    highp float e = floor(log2(av));\\n    highp float m = exp2(fract(log2(av))) - 1.0;\\n\\n    c[2] = floor(128.0 * m);\\n    m -= c[2] / 128.0;\\n    c[1] = floor(32768.0 * m);\\n    m -= c[1] / 32768.0;\\n    c[0] = floor(8388608.0 * m);\\n\\n    highp float ebias = e + 127.0;\\n    c[3] = floor(ebias / 2.0);\\n    ebias -= c[3] * 2.0;\\n    c[2] += floor(ebias) * 128.0;\\n\\n    c[3] += 128.0 * step(0.0, -v);\\n\\n    return c / 255.0;\\n  }\\n\";function Za(t,e,n,r){var o=[];t.forEach((function(t){var e=k(t.shapeInfo.logicalShape);t.shapeInfo.isUniform?o.push(\"uniform float \"+t.name+(e>1?\"[\"+e+\"]\":\"\")+\";\"):(o.push(\"uniform sampler2D \"+t.name+\";\"),o.push(\"uniform int offset\"+t.name+\";\"))}));var a,i,s=o.join(\"\\n\"),u=t.map((function(t){return function(t,e,n){void 0===n&&(n=!1);var r=\"\";r+=n?ei(t):ti(t);var o=t.shapeInfo.logicalShape,a=e.logicalShape;o.length<=a.length&&(r+=n?function(t,e){var n,r=t.name,o=r.charAt(0).toUpperCase()+r.slice(1),a=\"get\"+o+\"AtOutCoords\",i=t.shapeInfo.logicalShape.length,s=e.logicalShape.length,u=Mr(t.shapeInfo.logicalShape,e.logicalShape),c=ui(s),l=s-i,h=[\"x\",\"y\",\"z\",\"w\",\"u\",\"v\"];n=0===i?\"\":s<2&&u.length>=1?\"coords = 0;\":u.map((function(t){return\"coords.\"+h[t+l]+\" = 0;\"})).join(\"\\n\");var f=\"\";f=s<2&&i>0?\"coords\":t.shapeInfo.logicalShape.map((function(t,e){return\"coords.\"+h[e+l]})).join(\", \");var d=\"return outputValue;\",p=1===k(t.shapeInfo.logicalShape),v=1===k(e.logicalShape);if(1!==i||p||v){if(p&&!v)d=1===s?\"\\n        return vec4(outputValue.x, outputValue.x, 0., 0.);\\n      \":\"\\n        return vec4(outputValue.x);\\n      \";else if(u.length){var g=i-2,m=i-1;u.indexOf(g)>-1&&u.indexOf(m)>-1?d=\"return vec4(outputValue.x);\":u.indexOf(g)>-1?d=\"return vec4(outputValue.x, outputValue.y, outputValue.x, outputValue.y);\":u.indexOf(m)>-1&&(d=\"return vec4(outputValue.xx, outputValue.zz);\")}}else d=\"\\n      return vec4(outputValue.xy, outputValue.xy);\\n    \";return\"\\n    vec4 \"+a+\"() {\\n      \"+c+\" coords = getOutputCoords();\\n      \"+n+\"\\n      vec4 outputValue = get\"+o+\"(\"+f+\");\\n      \"+d+\"\\n    }\\n  \"}(t,e):function(t,e){var n=t.name,r=n.charAt(0).toUpperCase()+n.slice(1),o=\"get\"+r+\"AtOutCoords\",a=e.texShape,i=t.shapeInfo.texShape,s=t.shapeInfo.logicalShape.length,u=e.logicalShape.length;if(!t.shapeInfo.isUniform&&s===u&&null==t.shapeInfo.flatOffset&&S(i,a))return\"\\n      float \"+o+\"() {\\n        return sampleTexture(\"+n+\", resultUV);\\n      }\\n    \";var c,l=ui(u),h=Mr(t.shapeInfo.logicalShape,e.logicalShape),f=u-s,d=[\"x\",\"y\",\"z\",\"w\",\"u\",\"v\"];c=0===s?\"\":u<2&&h.length>=1?\"coords = 0;\":h.map((function(t){return\"coords.\"+d[t+f]+\" = 0;\"})).join(\"\\n\");var p=\"\";p=u<2&&s>0?\"coords\":t.shapeInfo.logicalShape.map((function(t,e){return\"coords.\"+d[e+f]})).join(\", \");return\"\\n    float \"+o+\"() {\\n      \"+l+\" coords = getOutputCoords();\\n      \"+c+\"\\n      return get\"+r+\"(\"+p+\");\\n    }\\n  \"}(t,e));return r}(t,e,r)})).join(\"\\n\"),c=e.texShape,l=Ya(),h=function(t){return\"\\n    float sampleTexture(sampler2D textureSampler, vec2 uv) {\\n      return \"+t.texture2D+\"(textureSampler, uv).r;\\n    }\\n  \"}(l),f=function(t){return t.version+\"\\n    precision highp float;\\n    precision highp int;\\n    precision highp sampler2D;\\n    \"+t.varyingFs+\" vec2 resultUV;\\n    \"+t.defineOutput+\"\\n    const vec2 halfCR = vec2(0.5, 0.5);\\n\\n    struct ivec5\\n    {\\n      int x;\\n      int y;\\n      int z;\\n      int w;\\n      int u;\\n    };\\n\\n    struct ivec6\\n    {\\n      int x;\\n      int y;\\n      int z;\\n      int w;\\n      int u;\\n      int v;\\n    };\\n\\n    uniform float NAN;\\n    \"+t.defineSpecialNaN+\"\\n    \"+t.defineSpecialInf+\"\\n    \"+t.defineRound+\"\\n\\n    int imod(int x, int y) {\\n      return x - y * (x / y);\\n    }\\n\\n    int idiv(int a, int b, float sign) {\\n      int res = a / b;\\n      int mod = imod(a, b);\\n      if (sign < 0. && mod != 0) {\\n        res -= 1;\\n      }\\n      return res;\\n    }\\n\\n    //Based on the work of Dave Hoskins\\n    //https://www.shadertoy.com/view/4djSRW\\n    #define HASHSCALE1 443.8975\\n    float random(float seed){\\n      vec2 p = resultUV * seed;\\n      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);\\n      p3 += dot(p3, p3.yzx + 19.19);\\n      return fract((p3.x + p3.y) * p3.z);\\n    }\\n\\n    \"+ni+\"\\n    \"+ri+\"\\n    \"+oi+\"\\n  \"}(l);return e.isPacked?(a=function(t,e){switch(t.length){case 0:return\"\\n    int getOutputCoords() {\\n      return 0;\\n    }\\n  \";case 1:return function(t,e){var n=[Math.ceil(e[0]/2),Math.ceil(e[1]/2)];if(1===n[0])return\"\\n      int getOutputCoords() {\\n        return 2 * int(resultUV.x * \"+n[1]+\".0);\\n      }\\n    \";if(1===n[1])return\"\\n      int getOutputCoords() {\\n        return 2 * int(resultUV.y * \"+n[0]+\".0);\\n      }\\n    \";return\"\\n    int getOutputCoords() {\\n      ivec2 resTexRC = ivec2(resultUV.yx *\\n                             vec2(\"+n[0]+\", \"+n[1]+\"));\\n      return 2 * (resTexRC.x * \"+n[1]+\" + resTexRC.y);\\n    }\\n  \"}(0,e);case 2:return function(t,e){var n=[Math.ceil(e[0]/2),Math.ceil(e[1]/2)];if(S(t,e))return\"\\n      ivec2 getOutputCoords() {\\n        return 2 * ivec2(resultUV.yx * vec2(\"+n[0]+\", \"+n[1]+\"));\\n      }\\n    \";var r=Math.ceil(t[1]/2);return\"\\n    ivec2 getOutputCoords() {\\n      ivec2 resTexRC = ivec2(resultUV.yx *\\n                             vec2(\"+n[0]+\", \"+n[1]+\"));\\n\\n      int index = resTexRC.x * \"+n[1]+\" + resTexRC.y;\\n      int r = 2 * (index / \"+r+\");\\n      int c = imod(index, \"+r+\") * 2;\\n\\n      return ivec2(r, c);\\n    }\\n  \"}(t,e);case 3:return n=t,r=e,o=[Math.ceil(r[0]/2),Math.ceil(r[1]/2)],a=Math.ceil(n[2]/2),i=a*Math.ceil(n[1]/2),\"\\n    ivec3 getOutputCoords() {\\n      ivec2 resTexRC = ivec2(resultUV.yx *\\n                             vec2(\"+o[0]+\", \"+o[1]+\"));\\n      int index = resTexRC.x * \"+o[1]+\" + resTexRC.y;\\n\\n      int b = index / \"+i+\";\\n      index -= b * \"+i+\";\\n\\n      int r = 2 * (index / \"+a+\");\\n      int c = imod(index, \"+a+\") * 2;\\n\\n      return ivec3(b, r, c);\\n    }\\n  \";default:return function(t,e){for(var n=[Math.ceil(e[0]/2),Math.ceil(e[1]/2)],r=Math.ceil(t[t.length-1]/2),o=r*Math.ceil(t[t.length-2]/2),a=o,i=\"\",s=\"b, r, c\",u=2;u<t.length-1;u++)a*=t[t.length-u-1],i=\"\\n      int b\"+u+\" = index / \"+a+\";\\n      index -= b\"+u+\" * \"+a+\";\\n    \"+i,s=\"b\"+u+\", \"+s;return\"\\n    ivec\"+t.length+\" getOutputCoords() {\\n      ivec2 resTexRC = ivec2(resultUV.yx *\\n                             vec2(\"+n[0]+\", \"+n[1]+\"));\\n      int index = resTexRC.x * \"+n[1]+\" + resTexRC.y;\\n\\n      \"+i+\"\\n\\n      int b = index / \"+o+\";\\n      index -= b * \"+o+\";\\n\\n      int r = 2 * (index / \"+r+\");\\n      int c = imod(index, \"+r+\") * 2;\\n\\n      return ivec\"+t.length+\"(\"+s+\");\\n    }\\n  \"}(t,e)}var n,r,o,a,i}(e.logicalShape,c),i=function(t){return\"\\n    void setOutput(vec4 val) {\\n      \"+t.output+\" = val;\\n    }\\n  \"}(l)):(a=function(t,e){switch(t.length){case 0:return\"\\n    int getOutputCoords() {\\n      return 0;\\n    }\\n  \";case 1:return function(t,e){if(1===e[0])return\"\\n      int getOutputCoords() {\\n        return int(resultUV.x * \"+e[1]+\".0);\\n      }\\n    \";if(1===e[1])return\"\\n      int getOutputCoords() {\\n        return int(resultUV.y * \"+e[0]+\".0);\\n      }\\n    \";return\"\\n    int getOutputCoords() {\\n      ivec2 resTexRC = ivec2(resultUV.yx *\\n                             vec2(\"+e[0]+\", \"+e[1]+\"));\\n      return resTexRC.x * \"+e[1]+\" + resTexRC.y;\\n    }\\n  \"}(0,e);case 2:return function(t,e){if(S(t,e))return\"\\n      ivec2 getOutputCoords() {\\n        return ivec2(resultUV.yx * vec2(\"+e[0]+\", \"+e[1]+\"));\\n      }\\n    \";if(1===t[1])return\"\\n      ivec2 getOutputCoords() {\\n        ivec2 resTexRC = ivec2(resultUV.yx *\\n                               vec2(\"+e[0]+\", \"+e[1]+\"));\\n        int index = resTexRC.x * \"+e[1]+\" + resTexRC.y;\\n        return ivec2(index, 0);\\n      }\\n    \";if(1===t[0])return\"\\n      ivec2 getOutputCoords() {\\n        ivec2 resTexRC = ivec2(resultUV.yx *\\n                               vec2(\"+e[0]+\", \"+e[1]+\"));\\n        int index = resTexRC.x * \"+e[1]+\" + resTexRC.y;\\n        return ivec2(0, index);\\n      }\\n    \";return\"\\n    ivec2 getOutputCoords() {\\n      ivec2 resTexRC = ivec2(resultUV.yx *\\n                             vec2(\"+e[0]+\", \"+e[1]+\"));\\n      int index = resTexRC.x * \"+e[1]+\" + resTexRC.y;\\n      int r = index / \"+t[1]+\";\\n      int c = index - r * \"+t[1]+\";\\n      return ivec2(r, c);\\n    }\\n  \"}(t,e);case 3:return n=e,r=$a([\"r\",\"c\",\"d\"],t),\"\\n    ivec3 getOutputCoords() {\\n      ivec2 resTexRC = ivec2(resultUV.yx *\\n                             vec2(\"+n[0]+\", \"+n[1]+\"));\\n      int index = resTexRC.x * \"+n[1]+\" + resTexRC.y;\\n      \"+r+\"\\n      return ivec3(r, c, d);\\n    }\\n  \";case 4:return function(t,e){var n=$a([\"r\",\"c\",\"d\",\"d2\"],t);return\"\\n    ivec4 getOutputCoords() {\\n      ivec2 resTexRC = ivec2(resultUV.yx *\\n        vec2(\"+e[0]+\", \"+e[1]+\"));\\n      int index = resTexRC.x * \"+e[1]+\" + resTexRC.y;\\n      \"+n+\"\\n      return ivec4(r, c, d, d2);\\n    }\\n  \"}(t,e);case 5:return function(t,e){var n=$a([\"r\",\"c\",\"d\",\"d2\",\"d3\"],t);return\"\\n    ivec5 getOutputCoords() {\\n      ivec2 resTexRC = ivec2(resultUV.yx * vec2(\"+e[0]+\",\\n                             \"+e[1]+\"));\\n\\n      int index = resTexRC.x * \"+e[1]+\" + resTexRC.y;\\n\\n      \"+n+\"\\n\\n      ivec5 outShape = ivec5(r, c, d, d2, d3);\\n      return outShape;\\n    }\\n  \"}(t,e);case 6:return function(t,e){var n=$a([\"r\",\"c\",\"d\",\"d2\",\"d3\",\"d4\"],t);return\"\\n    ivec6 getOutputCoords() {\\n      ivec2 resTexRC = ivec2(resultUV.yx *\\n        vec2(\"+e[0]+\", \"+e[1]+\"));\\n      int index = resTexRC.x * \"+e[1]+\" + resTexRC.y;\\n\\n      \"+n+\"\\n\\n      ivec6 result = ivec6(r, c, d, d2, d3, d4);\\n      return result;\\n    }\\n  \"}(t,e);default:throw new Error(t.length+\"-D output sampling is not yet supported\")}var n,r}(e.logicalShape,c),i=function(t){return\"\\n    void setOutput(float val) {\\n      \"+t.output+\" = vec4(val, 0, 0, 0);\\n    }\\n  \"}(l)),r&&(f+=ai),[f,h,i,s,a,u,n].join(\"\\n\")}function ti(t){var e=t.shapeInfo.logicalShape;switch(e.length){case 0:return function(t){var e=t.name,n=\"get\"+e.charAt(0).toUpperCase()+e.slice(1);if(t.shapeInfo.isUniform)return\"float \"+n+\"() {return \"+e+\";}\";var r=t.shapeInfo.texShape,o=r[0],a=r[1];if(1===o&&1===a)return\"\\n      float \"+n+\"() {\\n        return sampleTexture(\"+e+\", halfCR);\\n      }\\n    \";var i=t.shapeInfo.texShape,s=i[0],u=i[1],c=ii(e);return\"\\n    float \"+n+\"() {\\n      vec2 uv = uvFromFlat(\"+s+\", \"+u+\", \"+c+\");\\n      return sampleTexture(\"+e+\", uv);\\n    }\\n  \"}(t);case 1:return function(t){var e=t.name,n=\"get\"+e.charAt(0).toUpperCase()+e.slice(1);if(t.shapeInfo.isUniform)return\"\\n      float \"+n+\"(int index) {\\n        \"+si(t)+\"\\n      }\\n    \";var r=t.shapeInfo.texShape,o=r[0],a=r[1];if(1===a&&1===o)return\"\\n      float \"+n+\"(int index) {\\n        return sampleTexture(\"+e+\", halfCR);\\n      }\\n    \";var i=ii(e);if(1===a)return\"\\n      float \"+n+\"(int index) {\\n        vec2 uv = vec2(0.5, (float(index + \"+i+\") + 0.5) / \"+o+\".0);\\n        return sampleTexture(\"+e+\", uv);\\n      }\\n    \";if(1===o)return\"\\n      float \"+n+\"(int index) {\\n        vec2 uv = vec2((float(index + \"+i+\") + 0.5) / \"+a+\".0, 0.5);\\n        return sampleTexture(\"+e+\", uv);\\n      }\\n    \";return\"\\n    float \"+n+\"(int index) {\\n      vec2 uv = uvFromFlat(\"+o+\", \"+a+\", index + \"+i+\");\\n      return sampleTexture(\"+e+\", uv);\\n    }\\n  \"}(t);case 2:return function(t){var e=t.shapeInfo.logicalShape,n=t.name,r=\"get\"+n.charAt(0).toUpperCase()+n.slice(1),o=t.shapeInfo.texShape;if(null!=o&&S(e,o)){var a=o[0],i=o[1];return\"\\n    float \"+r+\"(int row, int col) {\\n      vec2 uv = (vec2(col, row) + halfCR) / vec2(\"+i+\".0, \"+a+\".0);\\n      return sampleTexture(\"+n+\", uv);\\n    }\\n  \"}var s=M(e),u=s.newShape,c=s.keptDims,l=u;if(l.length<e.length){var h=ci(t,l);return\"\\n      \"+ti(h)+\"\\n      float \"+r+\"(int row, int col) {\\n        return \"+r+\"(\"+li([\"row\",\"col\"],c)+\");\\n      }\\n    \"}if(t.shapeInfo.isUniform)return\"\\n      float \"+r+\"(int row, int col) {\\n        int index = round(dot(vec2(row, col), vec2(\"+e[1]+\", 1)));\\n        \"+si(t)+\"\\n      }\\n    \";var f=o[0],d=o[1],p=ii(n);if(1===d)return\"\\n    float \"+r+\"(int row, int col) {\\n      float index = dot(vec3(row, col, \"+p+\"), vec3(\"+e[1]+\", 1, 1));\\n      vec2 uv = vec2(0.5, (index + 0.5) / \"+f+\".0);\\n      return sampleTexture(\"+n+\", uv);\\n    }\\n  \";if(1===f)return\"\\n    float \"+r+\"(int row, int col) {\\n      float index = dot(vec3(row, col, \"+p+\"), vec3(\"+e[1]+\", 1, 1));\\n      vec2 uv = vec2((index + 0.5) / \"+d+\".0, 0.5);\\n      return sampleTexture(\"+n+\", uv);\\n    }\\n  \";return\"\\n  float \"+r+\"(int row, int col) {\\n    // Explicitly use integer operations as dot() only works on floats.\\n    int index = row * \"+e[1]+\" + col + \"+p+\";\\n    vec2 uv = uvFromFlat(\"+f+\", \"+d+\", index);\\n    return sampleTexture(\"+n+\", uv);\\n  }\\n\"}(t);case 3:return function(t){var e=t.shapeInfo.logicalShape,n=t.name,r=\"get\"+n.charAt(0).toUpperCase()+n.slice(1),o=e[1]*e[2],a=e[2],i=M(e),s=i.newShape,u=i.keptDims,c=s;if(c.length<e.length){var l=ci(t,c);return\"\\n        \"+ti(l)+\"\\n        float \"+r+\"(int row, int col, int depth) {\\n          return \"+r+\"(\"+li([\"row\",\"col\",\"depth\"],u)+\");\\n        }\\n      \"}if(t.shapeInfo.isUniform)return\"\\n      float \"+r+\"(int row, int col, int depth) {\\n        int index = round(dot(vec3(row, col, depth),\\n                          vec3(\"+o+\", \"+a+\", 1)));\\n        \"+si(t)+\"\\n      }\\n    \";var h=t.shapeInfo.texShape,f=h[0],d=h[1],p=t.shapeInfo.flatOffset;if(d===o&&null==p)return\"\\n        float \"+r+\"(int row, int col, int depth) {\\n          float texR = float(row);\\n          float texC = dot(vec2(col, depth), vec2(\"+a+\", 1));\\n          vec2 uv = (vec2(texC, texR) + halfCR) /\\n                     vec2(\"+d+\".0, \"+f+\".0);\\n          return sampleTexture(\"+n+\", uv);\\n        }\\n      \";if(d===a&&null==p)return\"\\n    float \"+r+\"(int row, int col, int depth) {\\n      float texR = dot(vec2(row, col), vec2(\"+e[1]+\", 1));\\n      float texC = float(depth);\\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(\"+d+\".0, \"+f+\".0);\\n      return sampleTexture(\"+n+\", uv);\\n    }\\n  \";var v=ii(n);return\"\\n      float \"+r+\"(int row, int col, int depth) {\\n        // Explicitly use integer operations as dot() only works on floats.\\n        int index = row * \"+o+\" + col * \"+a+\" + depth + \"+v+\";\\n        vec2 uv = uvFromFlat(\"+f+\", \"+d+\", index);\\n        return sampleTexture(\"+n+\", uv);\\n      }\\n  \"}(t);case 4:return function(t){var e=t.shapeInfo.logicalShape,n=t.name,r=\"get\"+n.charAt(0).toUpperCase()+n.slice(1),o=e[3],a=e[2]*o,i=e[1]*a,s=M(e),u=s.newShape,c=s.keptDims;if(u.length<e.length){var l=ci(t,u);return\"\\n      \"+ti(l)+\"\\n      float \"+r+\"(int row, int col, int depth, int depth2) {\\n        return \"+r+\"(\"+li([\"row\",\"col\",\"depth\",\"depth2\"],c)+\");\\n      }\\n    \"}if(t.shapeInfo.isUniform)return\"\\n      float \"+r+\"(int row, int col, int depth, int depth2) {\\n        int index = round(dot(vec4(row, col, depth, depth2),\\n                          vec4(\"+i+\", \"+a+\", \"+o+\", 1)));\\n        \"+si(t)+\"\\n      }\\n    \";var h=t.shapeInfo.flatOffset,f=t.shapeInfo.texShape,d=f[0],p=f[1];if(p===i&&null==h)return\"\\n      float \"+r+\"(int row, int col, int depth, int depth2) {\\n        float texR = float(row);\\n        float texC =\\n            dot(vec3(col, depth, depth2),\\n                vec3(\"+a+\", \"+o+\", 1));\\n        vec2 uv = (vec2(texC, texR) + halfCR) /\\n                   vec2(\"+p+\".0, \"+d+\".0);\\n        return sampleTexture(\"+n+\", uv);\\n      }\\n    \";if(p===o&&null==h)return\"\\n      float \"+r+\"(int row, int col, int depth, int depth2) {\\n        float texR = dot(vec3(row, col, depth),\\n                         vec3(\"+e[1]*e[2]+\", \"+e[2]+\", 1));\\n        float texC = float(depth2);\\n        vec2 uv = (vec2(texC, texR) + halfCR) /\\n                  vec2(\"+p+\".0, \"+d+\".0);\\n        return sampleTexture(\"+n+\", uv);\\n      }\\n    \";var v=ii(n);return\"\\n    float \"+r+\"(int row, int col, int depth, int depth2) {\\n      // Explicitly use integer operations as dot() only works on floats.\\n      int index = row * \"+i+\" + col * \"+a+\" +\\n          depth * \"+o+\" + depth2;\\n      vec2 uv = uvFromFlat(\"+d+\", \"+p+\", index + \"+v+\");\\n      return sampleTexture(\"+n+\", uv);\\n    }\\n  \"}(t);case 5:return function(t){var e=t.shapeInfo.logicalShape,n=t.name,r=\"get\"+n.charAt(0).toUpperCase()+n.slice(1),o=e[4],a=e[3]*o,i=e[2]*a,s=e[1]*i,u=M(e),c=u.newShape,l=u.keptDims;if(c.length<e.length){var h=ci(t,c);return\"\\n      \"+ti(h)+\"\\n      float \"+r+\"(int row, int col, int depth, int depth2, int depth3) {\\n        return \"+r+\"(\"+li([\"row\",\"col\",\"depth\",\"depth2\",\"depth3\"],l)+\");\\n      }\\n    \"}if(t.shapeInfo.isUniform)return\"\\n      float \"+r+\"(int row, int col, int depth, int depth2, int depth3) {\\n        float index = dot(\\n          vec4(row, col, depth, depth2),\\n          vec4(\"+s+\", \"+i+\", \"+a+\", \"+o+\")) +\\n          depth3;\\n        \"+si(t)+\"\\n      }\\n    \";var f=t.shapeInfo.flatOffset,d=t.shapeInfo.texShape,p=d[0],v=d[1];if(v===s&&null==f)return\"\\n      float \"+r+\"(int row, int col, int depth, int depth2, int depth3) {\\n        int texR = row;\\n        float texC = dot(vec4(col, depth, depth2, depth3),\\n                         vec4(\"+i+\", \"+a+\", \"+o+\", 1));\\n        vec2 uv = (vec2(texC, texR) + halfCR) /\\n                   vec2(\"+v+\".0, \"+p+\".0);\\n        return sampleTexture(\"+n+\", uv);\\n      }\\n    \";if(v===o&&null==f)return\"\\n      float \"+r+\"(int row, int col, int depth, int depth2, int depth3) {\\n        float texR = dot(\\n          vec4(row, col, depth, depth2),\\n          vec4(\"+e[1]*e[2]*e[3]+\",\\n               \"+e[2]*e[3]+\", \"+e[3]+\", 1));\\n        int texC = depth3;\\n        vec2 uv = (vec2(texC, texR) + halfCR) /\\n                  vec2(\"+v+\".0, \"+p+\".0);\\n        return sampleTexture(\"+n+\", uv);\\n      }\\n    \";var g=ii(n);return\"\\n    float \"+r+\"(int row, int col, int depth, int depth2, int depth3) {\\n      // Explicitly use integer operations as dot() only works on floats.\\n      int index = row * \"+s+\" + col * \"+i+\" + depth * \"+a+\" +\\n          depth2 * \"+o+\" + depth3 + \"+g+\";\\n      vec2 uv = uvFromFlat(\"+p+\", \"+v+\", index);\\n      return sampleTexture(\"+n+\", uv);\\n    }\\n  \"}(t);case 6:return function(t){var e=t.shapeInfo.logicalShape,n=t.name,r=\"get\"+n.charAt(0).toUpperCase()+n.slice(1),o=M(e),a=o.newShape,i=o.keptDims;if(a.length<e.length){var s=ci(t,a);return\"\\n      \"+ti(s)+\"\\n      float \"+r+\"(int row, int col, int depth,\\n                    int depth2, int depth3, int depth4) {\\n        return \"+r+\"(\"+li([\"row\",\"col\",\"depth\",\"depth2\",\"depth3\",\"depth4\"],i)+\");\\n      }\\n    \"}var u=e[5],c=e[4]*u,l=e[3]*c,h=e[2]*l,f=e[1]*h;if(t.shapeInfo.isUniform)return\"\\n      float \"+r+\"(int row, int col, int depth,\\n                  int depth2, int depth3, int depth4) {\\n        int index = round(dot(\\n          vec4(row, col, depth, depth2),\\n          vec4(\"+f+\", \"+h+\", \"+l+\", \"+c+\")) +\\n          dot(\\n            vec2(depth3, depth4),\\n            vec2(\"+u+\", 1)));\\n        \"+si(t)+\"\\n      }\\n    \";var d=t.shapeInfo.flatOffset,p=t.shapeInfo.texShape,v=p[0],g=p[1];if(g===f&&null==d)return\"\\n      float \"+r+\"(int row, int col, int depth,\\n                    int depth2, int depth3, int depth4) {\\n        int texR = row;\\n        float texC = dot(vec4(col, depth, depth2, depth3),\\n          vec4(\"+h+\", \"+l+\", \"+c+\", \"+u+\")) +\\n               float(depth4);\\n        vec2 uv = (vec2(texC, texR) + halfCR) /\\n                   vec2(\"+g+\".0, \"+v+\".0);\\n        return sampleTexture(\"+n+\", uv);\\n      }\\n    \";if(g===u&&null==d)return\"\\n      float \"+r+\"(int row, int col, int depth,\\n                    int depth2, int depth3, int depth4) {\\n        float texR = dot(vec4(row, col, depth, depth2),\\n          vec4(\"+e[1]*e[2]*e[3]*e[4]+\",\\n               \"+e[2]*e[3]*e[4]+\",\\n               \"+e[3]*e[4]+\",\\n               \"+e[4]+\")) + float(depth3);\\n        int texC = depth4;\\n        vec2 uv = (vec2(texC, texR) + halfCR) /\\n                  vec2(\"+g+\".0, \"+v+\".0);\\n        return sampleTexture(\"+n+\", uv);\\n      }\\n    \";var m=ii(n);return\"\\n    float \"+r+\"(int row, int col, int depth,\\n                  int depth2, int depth3, int depth4) {\\n      // Explicitly use integer operations as dot() only works on floats.\\n      int index = row * \"+f+\" + col * \"+h+\" + depth * \"+l+\" +\\n          depth2 * \"+c+\" + depth3 * \"+u+\" + depth4 + \"+m+\";\\n      vec2 uv = uvFromFlat(\"+v+\", \"+g+\", index);\\n      return sampleTexture(\"+n+\", uv);\\n    }\\n  \"}(t);default:throw new Error(e.length+\"-D input sampling is not yet supported\")}}function ei(t){var e,n,r;switch(t.shapeInfo.logicalShape.length){case 0:return e=t.name,n=\"get\"+e.charAt(0).toUpperCase()+e.slice(1),r=Ya(),\"\\n    vec4 \"+n+\"() {\\n      return \"+r.texture2D+\"(\"+e+\", halfCR);\\n    }\\n  \";case 1:return function(t){var e=t.name,n=\"get\"+e.charAt(0).toUpperCase()+e.slice(1),r=t.shapeInfo.texShape,o=[Math.ceil(r[0]/2),Math.ceil(r[1]/2)],a=Ya();return\"\\n    vec4 \"+n+\"(int index) {\\n      vec2 uv = packedUVfrom1D(\\n        \"+o[0]+\", \"+o[1]+\", index);\\n      return \"+a.texture2D+\"(\"+e+\", uv);\\n    }\\n  \"}(t);case 2:return function(t){var e=t.shapeInfo.logicalShape,n=t.name,r=\"get\"+n.charAt(0).toUpperCase()+n.slice(1),o=t.shapeInfo.texShape,a=o[0],i=o[1],s=Ya();if(null!=o&&S(e,o))return\"\\n      vec4 \"+r+\"(int row, int col) {\\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(\"+i+\".0, \"+a+\".0);\\n\\n        return \"+s.texture2D+\"(\"+n+\", uv);\\n      }\\n    \";var u=[Math.ceil(o[0]/2),Math.ceil(o[1]/2)],c=Math.ceil(e[1]/2);return\"\\n    vec4 \"+r+\"(int row, int col) {\\n      vec2 uv = packedUVfrom2D(\"+c+\", \"+u[0]+\", \"+u[1]+\", row, col);\\n      return \"+s.texture2D+\"(\"+n+\", uv);\\n    }\\n  \"}(t);case 3:return function(t){var e=t.shapeInfo.logicalShape,n=t.name,r=\"get\"+n.charAt(0).toUpperCase()+n.slice(1),o=t.shapeInfo.texShape,a=[Math.ceil(o[0]/2),Math.ceil(o[1]/2)];if(1===e[0]){var i=e.slice(1),s=ci(t,i);return\"\\n        \"+ei(s)+\"\\n        vec4 \"+r+\"(int b, int row, int col) {\\n          return \"+r+\"(\"+li([\"b\",\"row\",\"col\"],[1,2])+\");\\n        }\\n      \"}var u=a[0],c=a[1],l=Math.ceil(e[2]/2),h=l*Math.ceil(e[1]/2),f=Ya();return\"\\n    vec4 \"+r+\"(int b, int row, int col) {\\n      vec2 uv = packedUVfrom3D(\\n        \"+u+\", \"+c+\", \"+h+\", \"+l+\", b, row, col);\\n      return \"+f.texture2D+\"(\"+n+\", uv);\\n    }\\n  \"}(t);default:return function(t){for(var e=t.shapeInfo.logicalShape,n=e.length,r=t.name,o=\"get\"+r.charAt(0).toUpperCase()+r.slice(1),a=t.shapeInfo.texShape,i=[Math.ceil(a[0]/2),Math.ceil(a[1]/2)],s=i[0],u=i[1],c=Math.ceil(e[n-1]/2),l=c*Math.ceil(e[n-2]/2),h=\"int b, int row, int col\",f=\"b * \"+l+\" + (row / 2) * \"+c+\" + (col / 2)\",d=2;d<n-1;d++)h=\"int b\"+d+\", \"+h,l*=e[n-d-1],f=\"b\"+d+\" * \"+l+\" + \"+f;var p=Ya();return\"\\n    vec4 \"+o+\"(\"+h+\") {\\n      int index = \"+f+\";\\n      int texR = index / \"+u+\";\\n      int texC = index - texR * \"+u+\";\\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(\"+u+\", \"+s+\");\\n      return \"+p.texture2D+\"(\"+r+\", uv);\\n    }\\n  \"}(t)}}var ni=\"\\nvec2 uvFromFlat(int texNumR, int texNumC, int index) {\\n  int texR = index / texNumC;\\n  int texC = index - texR * texNumC;\\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\\n}\\nvec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\\n  int texelIndex = index / 2;\\n  int texR = texelIndex / texNumC;\\n  int texC = texelIndex - texR * texNumC;\\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\\n}\\n\",ri=\"\\nvec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,\\n  int texNumC, int row, int col) {\\n  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\\n  int texR = texelIndex / texNumC;\\n  int texC = texelIndex - texR * texNumC;\\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\\n}\\n\",oi=\"\\nvec2 packedUVfrom3D(int texNumR, int texNumC,\\n    int texelsInBatch, int texelsInLogicalRow, int b,\\n    int row, int col) {\\n  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\\n  int texR = index / texNumC;\\n  int texC = index - texR * texNumC;\\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\\n}\\n\",ai=\"\\n  float getChannel(vec4 frag, vec2 innerDims) {\\n    vec2 modCoord = mod(innerDims, 2.);\\n    return modCoord.x == 0. ?\\n      (modCoord.y == 0. ? frag.r : frag.g) :\\n      (modCoord.y == 0. ? frag.b : frag.a);\\n  }\\n  float getChannel(vec4 frag, int dim) {\\n    float modCoord = mod(float(dim), 2.);\\n    return modCoord == 0. ? frag.r : frag.g;\\n  }\\n\";function ii(t){return\"offset\"+t}function si(t){var e=t.name,n=k(t.shapeInfo.logicalShape);return n<2?\"return \"+e+\";\":\"\\n    for (int i = 0; i < \"+n+\"; i++) {\\n      if (i == index) {\\n        return \"+e+\"[i];\\n      }\\n    }\\n  \"}function ui(t){if(t<=1)return\"int\";if(2===t)return\"ivec2\";if(3===t)return\"ivec3\";if(4===t)return\"ivec4\";if(5===t)return\"ivec5\";if(6===t)return\"ivec6\";throw Error(\"GPU for rank \"+t+\" is not yet supported\")}function ci(t,e){var n=JSON.parse(JSON.stringify(t));return n.shapeInfo.logicalShape=e,n}function li(t,e){return e.map((function(e){return t[e]})).join(\", \")}var hi=function(t,e,n,r){this.variableNames=[\"A\"],this.packedInputs=!0,this.packedOutput=!0,C(t.length>2,(function(){return\"Packed arg\"+(n.charAt(0).toUpperCase()+n.slice(1))+\" supports only inputs with rank above 2.\"}));var o=t[t.length-1],a=Math.ceil(o/e);this.outputShape=t.slice(0,-1),a>1&&this.outputShape.push(a),r||this.variableNames.push(\"bestIndicesA\");var i,s,u=this.outputShape,c=u.length,l=ui(c),h=Xa(\"coords\",c);if(1===a){var f=ui(s=c+1);i=\"\\n        \"+f+\" sourceLocR = \"+f+\"(\"+h.join()+\", 0);\\n        ++\"+h[c-1]+\";\\n        \"+f+\" sourceLocG = \"+f+\"(\"+h.join()+\", 0);\\n        ++\"+h[c-2]+\";\\n        \"+f+\" sourceLocA = \"+f+\"(\"+h.join()+\", 0);\\n        --\"+h[c-1]+\";\\n        \"+f+\" sourceLocB = \"+f+\"(\"+h.join()+\", 0);\\n        --\"+h[c-2]+\";\"}else s=c,i=\"\\n        \"+l+\" sourceLocR = coords;\\n        ++\"+h[c-1]+\";\\n        \"+l+\" sourceLocG = coords;\\n        ++\"+h[c-2]+\";\\n        \"+l+\" sourceLocA = coords;\\n        --\"+h[c-1]+\";\\n        \"+l+\" sourceLocB = coords;\\n        --\"+h[c-2]+\";\";var d=[\"x\",\"y\",\"z\",\"w\",\"u\",\"v\"].slice(0,s),p=\".\"+d[s-1],v=d.map((function(t){return\"int \"+t})),g=Xa(\"sourceLocR\",s-1).concat(\"inIdx.r\"),m=Xa(\"sourceLocG\",s-1).concat(\"inIdx.g\"),y=Xa(\"sourceLocB\",s-1).concat(\"inIdx.b\"),x=Xa(\"sourceLocA\",s-1).concat(\"inIdx.a\"),b=\"max\"===n?\"greaterThan\":\"lessThan\",w=r?\"\":\"\\n          inIdx = round(vec4(getBestIndicesAChannel(\"+g.join()+\"),\\n                             getBestIndicesAChannel(\"+m.join()+\"),\\n                             getBestIndicesAChannel(\"+y.join()+\"),\\n                             getBestIndicesAChannel(\"+x.join()+\")));\",E=\"vec4(\\n            getAChannel(\"+g.join()+\"),\\n            hasNextCol ? getAChannel(\"+m.join()+\") : 0.,\\n            hasNextRow ? getAChannel(\"+y.join()+\") : 0.,\\n            hasNextRow && hasNextCol ? getAChannel(\"+x.join()+\") : 0.)\",R=r?\"\":\"\\n      float getBestIndicesAChannel(\"+v.join()+\") {\\n        return getChannel(getBestIndicesA(\"+d.join()+\"),\\n                                          vec2(\"+d.slice(-2).join()+\"));\\n      }\";this.userCode=\"\\n      float getAChannel(\"+v.join()+\") {\\n        return getChannel(getA(\"+d.join()+\"),\\n                               vec2(\"+d.slice(-2).join()+\"));\\n      }\\n      \"+R+\"\\n      void main() {\\n        \"+l+\" coords = getOutputCoords();\\n        bool hasNextCol = \"+h[c-1]+\" < \"+(u[c-1]-1)+\";\\n        bool hasNextRow = \"+h[c-2]+\" < \"+(u[c-2]-1)+\";\\n        \"+i+\"\\n        ivec4 srcIdx = ivec4(sourceLocR\"+p+\", sourceLocG\"+p+\",\\n          sourceLocB\"+p+\", sourceLocA\"+p+\") * \"+e+\";\\n        ivec4 inIdx = srcIdx;\\n        vec4 bestIndex = vec4(inIdx);\\n        vec4 bestValue = \"+E+\";\\n\\n        for (int i = 0; i < \"+e+\"; i++) {\\n          inIdx = srcIdx;\\n          \"+w+\"\\n          vec4 candidate = \"+E+\";\\n          bvec4 nan = isnan(candidate);\\n          bvec4 replace = bvec4(\\n            vec4(\"+b+\"(candidate, bestValue)) * (vec4(1.0) - vec4(nan)));\\n\\n          bestValue = vec4(replace.x  ? candidate.x : bestValue.x,\\n                           replace.y  ? candidate.y : bestValue.y,\\n                           replace.z  ? candidate.z : bestValue.z,\\n                           replace.w  ? candidate.w : bestValue.w);\\n          bestIndex = mix(bestIndex, vec4(inIdx), vec4(replace));\\n          srcIdx++;\\n        }\\n        setOutput(bestIndex);\\n      }\\n    \"},fi=function(t){this.variableNames=[\"dy\"],this.outputShape=t.inShape;var e=t.filterHeight,n=t.filterWidth,r=t.strideHeight,o=t.strideWidth,a=t.dilationHeight,i=t.dilationWidth,s=t.effectiveFilterHeight,u=t.effectiveFilterWidth,c=s-1-t.padInfo.top,l=u-1-t.padInfo.left,h=1/(e*n);this.userCode=\"\\n      const ivec2 pads = ivec2(\"+c+\", \"+l+\");\\n      const float avgMultiplier = float(\"+h+\");\\n\\n      void main() {\\n        ivec4 coords = getOutputCoords();\\n        int b = coords[0];\\n        int d = coords[3];\\n\\n        ivec2 dyRCCorner = coords.yz - pads;\\n        int dyRCorner = dyRCCorner.x;\\n        int dyCCorner = dyRCCorner.y;\\n\\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\\n        // ? = to be determined. : = across all values in that axis.\\n        float dotProd = 0.0;\\n        for (int wR = 0; wR < \"+s+\";\\n            wR += \"+a+\") {\\n          float dyR = float(dyRCorner + wR) / \"+r+\".0;\\n\\n          if (dyR < 0.0 || dyR >= \"+t.outHeight+\".0 || fract(dyR) > 0.0) {\\n            continue;\\n          }\\n          int idyR = int(dyR);\\n\\n          for (int wC = 0; wC < \"+u+\";\\n            wC+= \"+i+\") {\\n            float dyC = float(dyCCorner + wC) / \"+o+\".0;\\n\\n            if (dyC < 0.0 || dyC >= \"+t.outWidth+\".0 ||\\n                fract(dyC) > 0.0) {\\n              continue;\\n            }\\n            int idyC = int(dyC);\\n\\n            float dyValue = getDy(b, idyR, idyC, d);\\n\\n            dotProd += dyValue * avgMultiplier;\\n          }\\n        }\\n        setOutput(dotProd);\\n      }\\n    \"},di=function(t){this.variableNames=[\"dy\"],this.outputShape=t.inShape;var e=t.filterDepth,n=t.filterHeight,r=t.filterWidth,o=t.strideDepth,a=t.strideHeight,i=t.strideWidth,s=t.dilationDepth,u=t.dilationHeight,c=t.dilationWidth,l=t.effectiveFilterDepth,h=t.effectiveFilterHeight,f=t.effectiveFilterWidth,d=l-1-t.padInfo.front,p=h-1-t.padInfo.top,v=f-1-t.padInfo.left,g=1/(e*n*r);this.userCode=\"\\n      const ivec3 pads = ivec3(\"+d+\", \"+p+\", \"+v+\");\\n      const float avgMultiplier = float(\"+g+\");\\n\\n      void main() {\\n        ivec5 coords = getOutputCoords();\\n        int batch = coords.x;\\n        int ch = coords.u;\\n\\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\\n        int dyDCorner = dyCorner.x;\\n        int dyRCorner = dyCorner.y;\\n        int dyCCorner = dyCorner.z;\\n\\n        // Convolve dy(?, ?, ?, d) with pos mask(:, :, :, ch) to get\\n        // dx(xD, xR, xC, ch).\\n        // ? = to be determined. : = across all values in that axis.\\n        float dotProd = 0.0;\\n\\n        for (int wD = 0; wD < \"+l+\";\\n            wD += \"+s+\") {\\n          float dyD = float(dyDCorner + wD) / \"+o+\".0;\\n\\n          if (dyD < 0.0 || dyD >= \"+t.outDepth+\".0 || fract(dyD) > 0.0) {\\n            continue;\\n          }\\n          int idyD = int(dyD);\\n\\n          for (int wR = 0; wR < \"+h+\";\\n              wR += \"+u+\") {\\n            float dyR = float(dyRCorner + wR) / \"+a+\".0;\\n\\n            if (dyR < 0.0 || dyR >= \"+t.outHeight+\".0 ||\\n                fract(dyR) > 0.0) {\\n              continue;\\n            }\\n            int idyR = int(dyR);\\n\\n            for (int wC = 0; wC < \"+f+\";\\n                wC += \"+c+\") {\\n              float dyC = float(dyCCorner + wC) / \"+i+\".0;\\n\\n              if (dyC < 0.0 || dyC >= \"+t.outWidth+\".0 ||\\n                  fract(dyC) > 0.0) {\\n                continue;\\n              }\\n              int idyC = int(dyC);\\n\\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\\n\\n              dotProd += dyValue * avgMultiplier;\\n            }\\n          }\\n        }\\n        setOutput(dotProd);\\n      }\\n    \"},pi=function(t,e,n,r,o,a){this.outputShape=[],this.variableNames=[\"x\",\"mean\",\"variance\"],Pr(t,e),Pr(t,n);var i=\"0.0\";null!=r&&(Pr(t,r),this.variableNames.push(\"offset\"),i=\"getOffsetAtOutCoords()\");var s=\"1.0\";null!=o&&(Pr(t,o),this.variableNames.push(\"scale\"),s=\"getScaleAtOutCoords()\"),this.outputShape=t,this.userCode=\"\\n      void main() {\\n        float x = getXAtOutCoords();\\n        float mean = getMeanAtOutCoords();\\n        float variance = getVarianceAtOutCoords();\\n        float offset = \"+i+\";\\n        float scale = \"+s+\";\\n        float inv = scale * inversesqrt(variance + float(\"+a+\"));\\n        setOutput(dot(vec3(x, -mean, offset), vec3(inv, inv, 1)));\\n      }\\n    \"},vi=function(t,e,n,r,o,a){this.packedInputs=!0,this.packedOutput=!0,this.variableNames=[\"x\",\"mean\",\"variance\"],Pr(t,e),Pr(t,n);var i=\"vec4(0.0)\";null!=r&&(Pr(t,r),this.variableNames.push(\"offset\"),i=\"getOffsetAtOutCoords()\");var s=\"vec4(1.0)\";null!=o&&(Pr(t,o),this.variableNames.push(\"scale\"),s=\"getScaleAtOutCoords()\"),this.outputShape=t,this.userCode=\"\\n      void main() {\\n        vec4 offset = \"+i+\";\\n        vec4 scale = \"+s+\";\\n\\n        vec4 x = getXAtOutCoords();\\n        vec4 mean = getMeanAtOutCoords();\\n        vec4 variance = getVarianceAtOutCoords();\\n\\n        vec4 inv = scale * inversesqrt(variance + vec4(\"+a+\"));\\n\\n        setOutput((x - mean) * inv + offset);\\n      }\\n    \"},gi=\"return areal * breal - aimag * bimag;\",mi=\"return areal * bimag + aimag * breal;\",yi=function(t,e,n){this.variableNames=[\"AReal\",\"AImag\",\"BReal\",\"BImag\"],this.outputShape=Pr(e,n),this.userCode=\"\\n      float binaryOpComplex(\\n          float areal, float aimag, float breal, float bimag) {\\n        \"+t+\"\\n      }\\n\\n      void main() {\\n        float areal = getARealAtOutCoords();\\n        float aimag = getAImagAtOutCoords();\\n        float breal = getBRealAtOutCoords();\\n        float bimag = getBImagAtOutCoords();\\n        setOutput(binaryOpComplex(areal, aimag, breal, bimag));\\n      }\\n    \"},xi=\"return a + b;\",bi=\"return a - b;\",wi=\"return a * b;\",Ci=\"\\nif (a == b) {\\n  return 1.0;\\n};\\nreturn a / b;\",Ei=\"return (a < 0.) ? b * a : a;\",Ri=function(t,e,n){this.variableNames=[\"A\",\"B\"],this.outputShape=Pr(e,n),this.userCode=\"\\n      float binaryOperation(float a, float b) {\\n        \"+t+\"\\n      }\\n\\n      void main() {\\n        float a = getAAtOutCoords();\\n        float b = getBAtOutCoords();\\n        setOutput(binaryOperation(a, b));\\n      }\\n    \"},Ii=\"\\n  // vec4 one = vec4(equal(a, b));\\n  // return one + (vec4(1.0) - one) * a / b;\\n  vec4 result = a / b;\\n  if(a.x == b.x) {\\n    result.x = 1.;\\n  }\\n  if(a.y == b.y) {\\n    result.y = 1.;\\n  }\\n  if(a.z == b.z) {\\n    result.z = 1.;\\n  }\\n  if(a.w == b.w) {\\n    result.w = 1.;\\n  }\\n\\n  return result;\\n\",ki=\"\\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\\n\",Si=function(t,e,n,r){void 0===r&&(r=!1),this.variableNames=[\"A\",\"B\"],this.supportsBroadcasting=!0,this.packedInputs=!0,this.packedOutput=!0,this.outputShape=Pr(e,n);var o=this.outputShape.length,a=\"\";if(r)if(0===o||1===k(this.outputShape))a=\"\\n          result.y = 0.;\\n          result.z = 0.;\\n          result.w = 0.;\\n        \";else if(a=\"\\n          \"+ui(o)+\" coords = getOutputCoords();\\n        \",1===o)a+=\"\\n            result.y = (coords + 1) >= \"+this.outputShape[0]+\" ? 0. : result.y;\\n            result.z = 0.;\\n            result.w = 0.;\\n          \";else{var i=Xa(\"coords\",o);a+=\"\\n            bool nextRowOutOfBounds =\\n              (\"+i[o-2]+\" + 1) >= \"+this.outputShape[o-2]+\";\\n            bool nextColOutOfBounds =\\n              (\"+i[o-1]+\" + 1) >= \"+this.outputShape[o-1]+\";\\n            result.y = nextColOutOfBounds ? 0. : result.y;\\n            result.z = nextRowOutOfBounds ? 0. : result.z;\\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\\n          \"}this.userCode=\"\\n      vec4 binaryOperation(vec4 a, vec4 b) {\\n        \"+t+\"\\n      }\\n\\n      void main() {\\n        vec4 a = getAAtOutCoords();\\n        vec4 b = getBAtOutCoords();\\n\\n        vec4 result = binaryOperation(a, b);\\n        \"+a+\"\\n\\n        setOutput(result);\\n      }\\n    \"},Ai=function(){function t(t){this.variableNames=[\"A\"],this.outputShape=t,this.userCode=\"\\n      uniform float minVal;\\n      uniform float maxVal;\\n\\n      void main() {\\n        float value = getAAtOutCoords();\\n        if (isnan(value)) {\\n          setOutput(value);\\n          return;\\n        }\\n\\n        setOutput(clamp(value, minVal, maxVal));\\n      }\\n    \"}return t.prototype.getCustomSetupFunc=function(t,e){var n=this;return function(r,o){null==n.minLoc&&(n.minLoc=r.getUniformLocationNoThrow(o,\"minVal\"),n.maxLoc=r.getUniformLocationNoThrow(o,\"maxVal\")),r.gl.uniform1f(n.minLoc,t),r.gl.uniform1f(n.maxLoc,e)}},t}(),Ti=function(){function t(t){this.variableNames=[\"A\"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t,this.userCode=\"\\n      uniform float minVal;\\n      uniform float maxVal;\\n\\n      void main() {\\n        vec4 value = getAAtOutCoords();\\n\\n        if (any(isnan(value))) {\\n          setOutput(value);\\n          return;\\n        }\\n\\n        setOutput(clamp(value, vec4(minVal), vec4(maxVal)));\\n      }\\n    \"}return t.prototype.getCustomSetupFunc=function(t,e){var n=this;return function(r,o){null==n.minLoc&&(n.minLoc=r.getUniformLocationNoThrow(o,\"minVal\"),n.maxLoc=r.getUniformLocationNoThrow(o,\"maxVal\")),r.gl.uniform1f(n.minLoc,t),r.gl.uniform1f(n.maxLoc,e)}},t}(),Di=function(t){this.variableNames=[\"real\",\"imag\"],this.outputShape=t,this.userCode=\"\\n      void main() {\\n        float re = abs(getRealAtOutCoords());\\n        float im = abs(getImagAtOutCoords());\\n        float mx = max(re, im);\\n\\n        // sadly the length function in glsl is not underflow-safe\\n        // (at least not on Intel GPUs). So the safe solution is\\n        // to ensure underflow-safety in all cases.\\n        setOutput(\\n          mx == 0.0 ? 0.0 : mx * length(vec2(1, min(re, im)/mx))\\n        );\\n      }\\n    \"},Ni=function(t){this.outputShape=[],this.outputShape=Sn(t,1),this.variableNames=t.map((function(t,e){return\"T\"+e}));var e=new Array(t.length-1);e[0]=t[0][1];for(var n=1;n<e.length;n++)e[n]=e[n-1]+t[n][1];var r=[\"if (yC < \"+e[0]+\") setOutput(getT0(yR, yC));\"];for(n=1;n<e.length;n++){var o=e[n-1];r.push(\"else if (yC < \"+e[n]+\") setOutput(getT\"+n+\"(yR, yC-\"+o+\"));\")}var a=e.length,i=e[e.length-1];r.push(\"else setOutput(getT\"+a+\"(yR, yC-\"+i+\"));\"),this.userCode=\"\\n      void main() {\\n        ivec2 coords = getOutputCoords();\\n        int yR = coords.x;\\n        int yC = coords.y;\\n\\n        \"+r.join(\"\\n        \")+\"\\n      }\\n    \"},Fi=function(t,e){this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[],this.outputShape=Sn(t,e);var n=this.outputShape,r=n.length,o=ui(r),a=Xa(\"coords\",r),i=[\"x\",\"y\",\"z\",\"w\",\"u\",\"v\"].slice(0,r);this.variableNames=t.map((function(t,e){return\"T\"+e}));var s=new Array(t.length-1);s[0]=t[0][e];for(var u=1;u<s.length;u++)s[u]=s[u-1]+t[u][e];var c=i[e],l=i.slice(-2),h=i.join(),f=\"if (\"+c+\" < \"+s[0]+\") {\\n        return getChannel(\\n            getT0(\"+h+\"), vec2(\"+l.join()+\"));\\n        }\";for(u=1;u<s.length;u++){var d=s[u-1];f+=\"\\n        if (\"+c+\" < \"+s[u]+\"  && \"+c+\" >= \"+s[u-1]+\") {\\n          return getChannel(\\n            getT\"+u+\"(\"+_i(i,c,d)+\"),\\n            vec2(\"+_i(l,c,d)+\"));\\n        }\"}var p=s.length,v=s[s.length-1];f+=\"\\n        return getChannel(\\n          getT\"+p+\"(\"+_i(i,c,v)+\"),\\n          vec2(\"+_i(l,c,v)+\"));\",this.userCode=\"\\n      float getValue(\"+i.map((function(t){return\"int \"+t}))+\") {\\n        \"+f+\"\\n      }\\n\\n      void main() {\\n        \"+o+\" coords = getOutputCoords();\\n        vec4 result = vec4(getValue(\"+a+\"), 0., 0., 0.);\\n\\n        \"+a[r-1]+\" = \"+a[r-1]+\" + 1;\\n        if (\"+a[r-1]+\" < \"+n[r-1]+\") {\\n          result.g = getValue(\"+a+\");\\n        }\\n\\n        \"+a[r-2]+\" = \"+a[r-2]+\" + 1;\\n        if (\"+a[r-2]+\" < \"+n[r-2]+\") {\\n          result.a = getValue(\"+a+\");\\n        }\\n\\n        \"+a[r-1]+\" = \"+a[r-1]+\" - 1;\\n        if (\"+a[r-2]+\" < \"+n[r-2]+\" &&\\n            \"+a[r-1]+\" < \"+n[r-1]+\") {\\n          result.b = getValue(\"+a+\");\\n        }\\n        setOutput(result);\\n      }\\n    \"};function _i(t,e,n){var r=t.indexOf(e);return t.map((function(t,e){return e===r?t+\" - \"+n:t})).join()}var Oi=function(t){this.variableNames=[\"x\",\"dy\"],this.outputShape=t.filterShape;var e=t.strideHeight,n=t.strideWidth,r=t.padInfo.top,o=t.padInfo.left,a=\"channelsLast\"===t.dataFormat;this.userCode=\"\\n      void main() {\\n        ivec4 coords = getOutputCoords();\\n        int wR = coords.x;\\n        int wC = coords.y;\\n        int d1 = coords.z;\\n        int d2 = coords.w;\\n\\n        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).\\n        // ? = to be determined. : = across all values in that axis.\\n        float dotProd = 0.0;\\n\\n        for (int b = 0; b < \"+t.batchSize+\"; b++) {\\n          for (int yR = 0; yR < \"+t.outHeight+\"; yR++) {\\n            int xR = wR + yR * \"+e+\" - \"+r+\";\\n\\n            if (xR < 0 || xR >= \"+t.inHeight+\") {\\n              continue;\\n            }\\n\\n            for (int yC = 0; yC < \"+t.outWidth+\"; yC++) {\\n              int xC = wC + yC * \"+n+\" - \"+o+\";\\n\\n              if (xC < 0 || xC >= \"+t.inWidth+\") {\\n                continue;\\n              }\\n\\n              if (\"+a+\") {\\n                float dyValue = getDy(b, yR, yC, d2);\\n                float xValue = getX(b, xR, xC, d1);\\n                dotProd += (xValue * dyValue);\\n              } else {\\n                float dyValue = getDy(b, d2, yR, yC);\\n                float xValue = getX(b, d1, xR, xC);\\n                dotProd += (xValue * dyValue);\\n              }\\n\\n            }\\n          }\\n        }\\n        setOutput(dotProd);\\n      }\\n    \"},Mi=function(t){this.variableNames=[\"dy\",\"W\"],this.outputShape=t.inShape;var e=t.filterHeight,n=t.filterWidth,r=t.strideHeight,o=t.strideWidth,a=\"channelsLast\"===t.dataFormat,i=e-1-t.padInfo.top,s=n-1-t.padInfo.left,u=a?1:2,c=a?2:3,l=a?3:1;this.userCode=\"\\n      const ivec2 pads = ivec2(\"+i+\", \"+s+\");\\n\\n      void main() {\\n        ivec4 coords = getOutputCoords();\\n        int batch = coords[0];\\n        int d1 = coords[\"+l+\"];\\n\\n        ivec2 dyCorner = ivec2(coords[\"+u+\"], coords[\"+c+\"]) - pads;\\n        int dyRCorner = dyCorner.x;\\n        int dyCCorner = dyCorner.y;\\n\\n        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\\n        // ? = to be determined. : = across all values in that axis.\\n        float dotProd = 0.0;\\n        for (int wR = 0; wR < \"+e+\"; wR++) {\\n          float dyR = float(dyRCorner + wR) / \"+r+\".0;\\n\\n          if (dyR < 0.0 || dyR >= \"+t.outHeight+\".0 || fract(dyR) > 0.0) {\\n            continue;\\n          }\\n          int idyR = int(dyR);\\n\\n          int wRPerm = \"+e+\" - 1 - wR;\\n\\n          for (int wC = 0; wC < \"+n+\"; wC++) {\\n            float dyC = float(dyCCorner + wC) / \"+o+\".0;\\n\\n            if (dyC < 0.0 || dyC >= \"+t.outWidth+\".0 ||\\n                fract(dyC) > 0.0) {\\n              continue;\\n            }\\n            int idyC = int(dyC);\\n\\n            int wCPerm = \"+n+\" - 1 - wC;\\n\\n            for (int d2 = 0; d2 < \"+t.outChannels+\"; d2++) {\\n\\n              if (\"+a+\") {\\n                float xValue = getDy(batch, idyR, idyC, d2);\\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\\n                dotProd += xValue * wValue;\\n              } else {\\n                float xValue = getDy(batch, d2, idyR, idyC);\\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\\n                dotProd += xValue * wValue;\\n              }\\n\\n            }\\n          }\\n        }\\n        setOutput(dotProd);\\n      }\\n    \"},Bi=function(t){this.variableNames=[\"x\",\"dy\"],this.outputShape=t.filterShape;var e=t.strideDepth,n=t.strideHeight,r=t.strideWidth,o=t.padInfo.front,a=t.padInfo.top,i=t.padInfo.left;this.userCode=\"\\n      void main() {\\n        ivec5 coords = getOutputCoords();\\n        int wF = coords.x;\\n        int wR = coords.y;\\n        int wC = coords.z;\\n        int d1 = coords.w;\\n        int d2 = coords.u;\\n\\n        float dotProd = 0.0;\\n\\n        for (int b = 0; b < \"+t.batchSize+\"; b++) {\\n          for (int yF = 0; yF < \"+t.outDepth+\"; yF++) {\\n            int xF = wF + yF * \"+e+\" - \"+o+\";\\n\\n            if (xF < 0 || xF >= \"+t.inDepth+\") {\\n              continue;\\n            }\\n\\n            for (int yR = 0; yR < \"+t.outHeight+\"; yR++) {\\n              int xR = wR + yR * \"+n+\" - \"+a+\";\\n\\n              if (xR < 0 || xR >= \"+t.inHeight+\") {\\n                continue;\\n              }\\n\\n              for (int yC = 0; yC < \"+t.outWidth+\"; yC++) {\\n                int xC = wC + yC * \"+r+\" - \"+i+\";\\n\\n                if (xC < 0 || xC >= \"+t.inWidth+\") {\\n                  continue;\\n                }\\n\\n                float dyValue = getDy(b, yF, yR, yC, d2);\\n                float xValue = getX(b, xF, xR, xC, d1);\\n                dotProd += (xValue * dyValue);\\n              }\\n            }\\n          }\\n        }\\n        setOutput(dotProd);\\n      }\\n    \"},Pi=function(t){this.variableNames=[\"dy\",\"W\"],this.outputShape=t.inShape;var e=t.filterDepth,n=t.filterHeight,r=t.filterWidth,o=t.strideDepth,a=t.strideHeight,i=t.strideWidth,s=e-1-t.padInfo.front,u=n-1-t.padInfo.top,c=r-1-t.padInfo.left;this.userCode=\"\\n      const ivec3 pads = ivec3(\"+s+\", \"+u+\", \"+c+\");\\n\\n      void main() {\\n        ivec5 coords = getOutputCoords();\\n        int batch = coords.x;\\n        int d1 = coords.u;\\n\\n\\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\\n        int dyFCorner = dyCorner.x;\\n        int dyRCorner = dyCorner.y;\\n        int dyCCorner = dyCorner.z;\\n\\n        float dotProd = 0.0;\\n        for (int wF = 0; wF < \"+e+\"; wF++) {\\n          float dyF = float(dyFCorner + wF) / \"+o+\".0;\\n\\n          if (dyF < 0.0 || dyF >= \"+t.outDepth+\".0 || fract(dyF) > 0.0) {\\n            continue;\\n          }\\n          int idyF = int(dyF);\\n\\n          int wFPerm = \"+e+\" - 1 - wF;\\n\\n          for (int wR = 0; wR < \"+n+\"; wR++) {\\n            float dyR = float(dyRCorner + wR) / \"+a+\".0;\\n\\n            if (dyR < 0.0 || dyR >= \"+t.outHeight+\".0 ||\\n              fract(dyR) > 0.0) {\\n              continue;\\n            }\\n            int idyR = int(dyR);\\n\\n            int wRPerm = \"+n+\" - 1 - wR;\\n\\n            for (int wC = 0; wC < \"+r+\"; wC++) {\\n              float dyC = float(dyCCorner + wC) / \"+i+\".0;\\n\\n              if (dyC < 0.0 || dyC >= \"+t.outWidth+\".0 ||\\n                  fract(dyC) > 0.0) {\\n                continue;\\n              }\\n              int idyC = int(dyC);\\n\\n              int wCPerm = \"+r+\" - 1 - wC;\\n\\n              for (int d2 = 0; d2 < \"+t.outChannels+\"; d2++) {\\n                float xValue = getDy(batch, idyF, idyR, idyC, d2);\\n                float wValue = getW(wFPerm, wRPerm, wCPerm, d1, d2);\\n                dotProd += xValue * wValue;\\n              }\\n            }\\n          }\\n        }\\n        setOutput(dotProd);\\n      }\\n    \"},Li=function(t){this.variableNames=[\"x\",\"dy\"],this.outputShape=t.filterShape;var e=t.strideHeight,n=t.strideWidth,r=t.padInfo.top,o=t.padInfo.left,a=t.outChannels/t.inChannels;this.userCode=\"\\n      void main() {\\n        ivec4 coords = getOutputCoords();\\n        int wR = coords.x;\\n        int wC = coords.y;\\n        int d1 = coords.z;\\n        int dm = coords.w;\\n        int d2 = d1 * \"+a+\" + dm;\\n\\n        float dotProd = 0.0;\\n\\n        // TO DO: Vec4 over the batch size\\n        for (int b = 0; b < \"+t.batchSize+\"; b++) {\\n          for (int yR = 0; yR < \"+t.outHeight+\"; yR++) {\\n            int xR = wR + yR * \"+e+\" - \"+r+\";\\n\\n            if (xR < 0 || xR >= \"+t.inHeight+\") {\\n              continue;\\n            }\\n\\n            for (int yC = 0; yC < \"+t.outWidth+\"; yC++) {\\n              int xC = wC + yC * \"+n+\" - \"+o+\";\\n\\n              if (xC < 0 || xC >= \"+t.inWidth+\") {\\n                continue;\\n              }\\n\\n              float dyValue = getDy(b, yR, yC, d2);\\n              float xValue = getX(b, xR, xC, d1);\\n              dotProd += (xValue * dyValue);\\n            }\\n          }\\n        }\\n        setOutput(dotProd);\\n      }\\n    \"},Wi=function(t){this.variableNames=[\"dy\",\"W\"],this.outputShape=t.inShape;var e=t.filterHeight,n=t.filterWidth,r=t.strideHeight,o=t.strideWidth,a=e-1-t.padInfo.top,i=n-1-t.padInfo.left,s=t.outChannels/t.inChannels;this.userCode=\"\\n      const ivec2 pads = ivec2(\"+a+\", \"+i+\");\\n\\n      void main() {\\n        ivec4 coords = getOutputCoords();\\n        int batch = coords[0];\\n        int d1 = coords[3];\\n        ivec2 dyCorner = coords.yz - pads;\\n        int dyRCorner = dyCorner.x;\\n        int dyCCorner = dyCorner.y;\\n\\n        float dotProd = 0.0;\\n\\n        for (int wR = 0; wR < \"+e+\"; wR++) {\\n          float dyR = float(dyRCorner + wR) / \"+r+\".0;\\n\\n          if (dyR < 0.0 || dyR >= \"+t.outHeight+\".0 || fract(dyR) > 0.0) {\\n            continue;\\n          }\\n          int idyR = int(dyR);\\n\\n          int wRPerm = \"+e+\" - 1 - wR;\\n\\n          for (int wC = 0; wC < \"+n+\"; wC++) {\\n            float dyC = float(dyCCorner + wC) / \"+o+\".0;\\n\\n            if (dyC < 0.0 || dyC >= \"+t.outWidth+\".0 ||\\n                fract(dyC) > 0.0) {\\n              continue;\\n            }\\n            int idyC = int(dyC);\\n\\n            int wCPerm = \"+n+\" - 1 - wC;\\n\\n            // TO DO: Vec4 over the channelMul\\n            for (int dm = 0; dm < \"+s+\"; dm++) {\\n              int d2 = d1 * \"+s+\" + dm;\\n              float xValue = getDy(batch, idyR, idyC, d2);\\n              float wValue = getW(wRPerm, wCPerm, d1, dm);\\n              dotProd += xValue * wValue;\\n            }\\n          }\\n        }\\n        setOutput(dotProd);\\n      }\\n    \"},Ui=function(t,e,n,r){void 0===e&&(e=!1),void 0===n&&(n=null),void 0===r&&(r=!1),this.variableNames=[\"x\",\"W\"],this.outputShape=t.outShape;var o=t.padInfo.top,a=t.padInfo.left,i=t.strideHeight,s=t.strideWidth,u=t.dilationHeight,c=t.dilationWidth,l=t.filterHeight,h=t.filterWidth,f=4*Math.floor(t.inChannels/4),d=t.inChannels%4,p=\"channelsLast\"===t.dataFormat,v=p?1:2,g=p?2:3,m=p?3:1,y=\"\",x=\"\";n&&(y=r?\"float activation(float a) {\\n          float b = getPreluActivationWeightsAtOutCoords();\\n          \"+n+\"\\n        }\":\"\\n          float activation(float x) {\\n            \"+n+\"\\n          }\\n        \",x=\"result = activation(result);\");var b=e?\"result += getBiasAtOutCoords();\":\"\";e&&this.variableNames.push(\"bias\"),r&&this.variableNames.push(\"preluActivationWeights\"),this.userCode=\"\\n      \"+y+\"\\n\\n      const ivec2 strides = ivec2(\"+i+\", \"+s+\");\\n      const ivec2 pads = ivec2(\"+o+\", \"+a+\");\\n\\n      void main() {\\n        ivec4 coords = getOutputCoords();\\n        int batch = coords[0];\\n        int d2 = coords[\"+m+\"];\\n\\n        ivec2 xRCCorner =\\n            ivec2(coords[\"+v+\"], coords[\"+g+\"]) * strides - pads;\\n        int xRCorner = xRCCorner.x;\\n        int xCCorner = xRCCorner.y;\\n\\n        // Convolve x(?, ?, d1) with w(:, :, d1, d2) to get y(yR, yC, d2).\\n        // ? = to be determined. : = across all values in that axis.\\n        float dotProd = 0.0;\\n        for (int wR = 0; wR < \"+l+\"; wR++) {\\n          int xR = xRCorner + wR * \"+u+\";\\n\\n          if (xR < 0 || xR >= \"+t.inHeight+\") {\\n            continue;\\n          }\\n\\n          for (int wC = 0; wC < \"+h+\"; wC++) {\\n            int xC = xCCorner + wC * \"+c+\";\\n\\n            if (xC < 0 || xC >= \"+t.inWidth+\") {\\n              continue;\\n            }\\n\\n            for (int d1 = 0; d1 < \"+f+\"; d1 += 4) {\\n              vec4 wValues = vec4(\\n                getW(wR, wC, d1, d2),\\n                getW(wR, wC, d1 + 1, d2),\\n                getW(wR, wC, d1 + 2, d2),\\n                getW(wR, wC, d1 + 3, d2)\\n              );\\n\\n              if (\"+p+\") {\\n                vec4 xValues = vec4(\\n                  getX(batch, xR, xC, d1),\\n                  getX(batch, xR, xC, d1 + 1),\\n                  getX(batch, xR, xC, d1 + 2),\\n                  getX(batch, xR, xC, d1 + 3)\\n                );\\n                dotProd += dot(xValues, wValues);\\n              } else {\\n                vec4 xValues = vec4(\\n                  getX(batch, d1, xR, xC),\\n                  getX(batch, d1 + 1, xR, xC),\\n                  getX(batch, d1 + 2, xR, xC),\\n                  getX(batch, d1 + 3, xR, xC)\\n                );\\n                dotProd += dot(xValues, wValues);\\n              }\\n            }\\n\\n            if (\"+(1===d)+\") {\\n\\n              if (\"+p+\") {\\n                dotProd +=\\n                    getX(batch, xR, xC, \"+f+\") *\\n                    getW(wR, wC, \"+f+\", d2);\\n              } else {\\n                dotProd +=\\n                    getX(batch, \"+f+\", xR, xC) *\\n                    getW(wR, wC, \"+f+\", d2);\\n              }\\n\\n            } else if (\"+(2===d)+\") {\\n              vec2 wValues = vec2(\\n                getW(wR, wC, \"+f+\", d2),\\n                getW(wR, wC, \"+f+\" + 1, d2)\\n              );\\n\\n              if (\"+p+\") {\\n                vec2 xValues = vec2(\\n                  getX(batch, xR, xC, \"+f+\"),\\n                  getX(batch, xR, xC, \"+f+\" + 1)\\n                );\\n                dotProd += dot(xValues, wValues);\\n              } else {\\n                vec2 xValues = vec2(\\n                  getX(batch, \"+f+\", xR, xC),\\n                  getX(batch, \"+f+\" + 1, xR, xC)\\n                );\\n                dotProd += dot(xValues, wValues);\\n              }\\n\\n            } else if (\"+(3===d)+\") {\\n              vec3 wValues = vec3(\\n                getW(wR, wC, \"+f+\", d2),\\n                getW(wR, wC, \"+f+\" + 1, d2),\\n                getW(wR, wC, \"+f+\" + 2, d2)\\n              );\\n\\n              if (\"+p+\") {\\n                vec3 xValues = vec3(\\n                  getX(batch, xR, xC, \"+f+\"),\\n                  getX(batch, xR, xC, \"+f+\" + 1),\\n                  getX(batch, xR, xC, \"+f+\" + 2)\\n                );\\n                dotProd += dot(xValues, wValues);\\n              } else {\\n                vec3 xValues = vec3(\\n                  getX(batch, \"+f+\", xR, xC),\\n                  getX(batch, \"+f+\" + 1, xR, xC),\\n                  getX(batch, \"+f+\" + 2, xR, xC)\\n                );\\n                dotProd += dot(xValues, wValues);\\n              }\\n\\n            }\\n          }\\n        }\\n\\n        float result = dotProd;\\n        \"+b+\"\\n        \"+x+\"\\n        setOutput(result);\\n      }\\n    \"},Vi=function(t){this.variableNames=[\"x\",\"W\"],this.outputShape=t.outShape;var e=t.padInfo.front,n=t.padInfo.top,r=t.padInfo.left,o=t.strideDepth,a=t.strideHeight,i=t.strideWidth,s=t.dilationDepth,u=t.dilationHeight,c=t.dilationWidth,l=t.filterDepth,h=t.filterHeight,f=t.filterWidth,d=4*Math.floor(t.inChannels/4),p=t.inChannels%4;this.userCode=\"\\n      const ivec3 strides = ivec3(\"+o+\", \"+a+\", \"+i+\");\\n      const ivec3 pads = ivec3(\"+e+\", \"+n+\", \"+r+\");\\n\\n      void main() {\\n        ivec5 coords = getOutputCoords();\\n        int batch = coords.x;\\n        int d2 = coords.u;\\n\\n        ivec3 xFRCCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\\n        int xFCorner = xFRCCorner.x;\\n        int xRCorner = xFRCCorner.y;\\n        int xCCorner = xFRCCorner.z;\\n\\n        // Convolve x(?, ?, ?, d1) with w(:, :, :, d1, d2) to get\\n        // y(yF, yR, yC, d2). ? = to be determined. : = across all\\n        // values in that axis.\\n        float dotProd = 0.0;\\n        for (int wF = 0; wF < \"+l+\"; wF++) {\\n          int xF = xFCorner + wF * \"+s+\";\\n\\n          if (xF < 0 || xF >= \"+t.inDepth+\") {\\n            continue;\\n          }\\n\\n          for (int wR = 0; wR < \"+h+\"; wR++) {\\n            int xR = xRCorner + wR * \"+u+\";\\n\\n            if (xR < 0 || xR >= \"+t.inHeight+\") {\\n              continue;\\n            }\\n\\n            for (int wC = 0; wC < \"+f+\"; wC++) {\\n              int xC = xCCorner + wC * \"+c+\";\\n\\n              if (xC < 0 || xC >= \"+t.inWidth+\") {\\n                continue;\\n              }\\n\\n              for (int d1 = 0; d1 < \"+d+\"; d1 += 4) {\\n                vec4 xValues = vec4(\\n                  getX(batch, xF, xR, xC, d1),\\n                  getX(batch, xF, xR, xC, d1 + 1),\\n                  getX(batch, xF, xR, xC, d1 + 2),\\n                  getX(batch, xF, xR, xC, d1 + 3)\\n                );\\n                vec4 wValues = vec4(\\n                  getW(wF, wR, wC, d1, d2),\\n                  getW(wF, wR, wC, d1 + 1, d2),\\n                  getW(wF, wR, wC, d1 + 2, d2),\\n                  getW(wF, wR, wC, d1 + 3, d2)\\n                );\\n\\n                dotProd += dot(xValues, wValues);\\n              }\\n\\n              if (\"+(1===p)+\") {\\n                dotProd +=\\n                  getX(batch, xF, xR, xC, \"+d+\") *\\n                  getW(wF, wR, wC, \"+d+\", d2);\\n              } else if (\"+(2===p)+\") {\\n                vec2 xValues = vec2(\\n                  getX(batch, xF, xR, xC, \"+d+\"),\\n                  getX(batch, xF, xR, xC, \"+d+\" + 1)\\n                );\\n                vec2 wValues = vec2(\\n                  getW(wF, wR, wC, \"+d+\", d2),\\n                  getW(wF, wR, wC, \"+d+\" + 1, d2)\\n                );\\n                dotProd += dot(xValues, wValues);\\n              } else if (\"+(3===p)+\") {\\n                vec3 xValues = vec3(\\n                  getX(batch, xF, xR, xC, \"+d+\"),\\n                  getX(batch, xF, xR, xC, \"+d+\" + 1),\\n                  getX(batch, xF, xR, xC, \"+d+\" + 2)\\n                );\\n                vec3 wValues = vec3(\\n                  getW(wF, wR, wC, \"+d+\", d2),\\n                  getW(wF, wR, wC, \"+d+\" + 1, d2),\\n                  getW(wF, wR, wC, \"+d+\" + 2, d2)\\n                );\\n                dotProd += dot(xValues, wValues);\\n              }\\n            }\\n          }\\n        }\\n        setOutput(dotProd);\\n      }\\n    \"},zi=function(t,e,n,r){void 0===e&&(e=!1),void 0===n&&(n=null),void 0===r&&(r=!1),this.variableNames=[\"x\",\"W\"],this.outputShape=t.outShape;var o=t.inHeight,a=t.inWidth,i=t.padInfo.top,s=t.padInfo.left,u=t.strideHeight,c=t.strideWidth,l=t.dilationHeight,h=t.dilationWidth,f=t.filterHeight,d=t.filterWidth,p=t.outChannels/t.inChannels,v=\"\",g=\"\";n&&(v=r?\"float activation(float a) {\\n          float b = getPreluActivationWeightsAtOutCoords();\\n          \"+n+\"\\n        }\":\"\\n          float activation(float x) {\\n            \"+n+\"\\n          }\\n        \",g=\"result = activation(result);\");var m=e?\"result += getBiasAtOutCoords();\":\"\";e&&this.variableNames.push(\"bias\"),r&&this.variableNames.push(\"preluActivationWeights\"),this.userCode=\"\\n      \"+v+\"\\n\\n      const ivec2 strides = ivec2(\"+u+\", \"+c+\");\\n      const ivec2 pads = ivec2(\"+i+\", \"+s+\");\\n\\n      void main() {\\n        ivec4 coords = getOutputCoords();\\n        int batch = coords.x;\\n        ivec2 xRCCorner = coords.yz * strides - pads;\\n        int d2 = coords.w;\\n        int d1 = d2 / \"+p+\";\\n        int q = d2 - d1 * \"+p+\";\\n\\n        int xRCorner = xRCCorner.x;\\n        int xCCorner = xRCCorner.y;\\n\\n        // Convolve x(?, ?, d1) with w(:, :, d1, q) to get y(yR, yC, d2).\\n        // ? = to be determined. : = across all values in that axis.\\n        float dotProd = 0.0;\\n        // TO DO(dsmilkov): Flatten the two for loops and vec4 the operations.\\n        for (int wR = 0; wR < \"+f+\"; wR++) {\\n          int xR = xRCorner + wR * \"+l+\";\\n\\n          if (xR < 0 || xR >= \"+o+\") {\\n            continue;\\n          }\\n\\n          for (int wC = 0; wC < \"+d+\"; wC++) {\\n            int xC = xCCorner + wC * \"+h+\";\\n\\n            if (xC < 0 || xC >= \"+a+\") {\\n              continue;\\n            }\\n\\n            float xVal = getX(batch, xR, xC, d1);\\n            float wVal = getW(wR, wC, d1, q);\\n            dotProd += xVal * wVal;\\n          }\\n        }\\n\\n        float result = dotProd;\\n        \"+m+\"\\n        \"+g+\"\\n        setOutput(result);\\n      }\\n    \"},Gi=function(t,e,n,r){void 0===e&&(e=!1),void 0===n&&(n=null),void 0===r&&(r=!1),this.variableNames=[\"x\",\"W\"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t.outShape;for(var o=t.inHeight,a=t.inWidth,i=t.padInfo.top,s=t.padInfo.left,u=t.strideHeight,c=t.strideWidth,l=t.dilationHeight,h=t.dilationWidth,f=t.filterHeight,d=t.filterWidth,p=d,v=\"int xR; int xC; int xCOffset;\",g=0;g<f;g++)for(var m=0;m<d;m++)v+=\"\\n          vec4 xTexelR\"+g+\"C\"+2*m+\" = vec4(0.);\\n          vec4 wR\"+g+\"C\"+m+\" = vec4(0.);\\n          vec4 xR\"+g+\"C\"+m+\" = vec4(0.);\";for(g=0;g<f;g++)for(var y=0;y<p;y++){if(v+=\"\\n          xR = xRCorner + \"+g*l+\";\\n          xC = xCCorner + \"+(m=2*y)*h+\";\\n        \",1===c){if(m<d&&(v+=s%2==1?\"\\n                xCOffset = xC + 1;\\n                if(xR >= 0 && xR < \"+o+\" && xCOffset >= 0 && xCOffset < \"+a+\") {\\n                  xTexelR\"+g+\"C\"+m+\" = getX(batch, xR, xCOffset, d1);\\n\\n                  // Need to manually clear unused channels in case\\n                  // we're reading from recycled texture.\\n                  if(xCOffset + 1 >= \"+a+\") {\\n                    xTexelR\"+g+\"C\"+m+\".zw = vec2(0.);\\n                  }\\n                } else {\\n                  xTexelR\"+g+\"C\"+m+\" = vec4(0.);\\n                }\\n\\n                xCOffset = xC + 1 - 2;\\n                if(xR >= 0 && xR < \"+o+\" && xCOffset >= 0 && xCOffset < \"+a+\") {\\n                  vec4 previous = getX(batch, xR, xCOffset, d1);\\n\\n                  // Need to manually clear unused channels in case\\n                  // we're reading from recycled texture.\\n                  if(xCOffset + 1 >= \"+a+\") {\\n                    previous.zw = vec2(0.);\\n                  }\\n\\n                  xR\"+g+\"C\"+m+\" = vec4(previous.zw, xTexelR\"+g+\"C\"+m+\".xy);\\n                } else {\\n                  xR\"+g+\"C\"+m+\" = vec4(0, 0, xTexelR\"+g+\"C\"+m+\".xy);\\n                }\\n              \":\"\\n                if(xR >= 0 && xR < \"+o+\" && xC >= 0 && xC < \"+a+\") {\\n                  xTexelR\"+g+\"C\"+m+\" = getX(batch, xR, xC, d1);\\n                } else {\\n                  xTexelR\"+g+\"C\"+m+\" = vec4(0.);\\n                }\\n\\n                xR\"+g+\"C\"+m+\" = xTexelR\"+g+\"C\"+m+\";\\n              \",m+1<d)){var x=s%2==0?b(h):h;h%2==0&&s%2==1||h%2!=0&&s%2!=1?(v+=\"\\n                  xCOffset = xC + \"+s%2+\" + \"+x+\";\\n\\n                  if(xR >= 0 && xR < \"+o+\" &&\\n                    xCOffset >= 0 && xCOffset < \"+a+\") {\\n                    xTexelR\"+g+\"C\"+(m+2)+\" = getX(batch, xR, xCOffset, d1);\\n                  }\\n                \",h>1&&(v+=\"\\n                    xCOffset -= 2;\\n                    if(xR >= 0 && xR < \"+o+\" &&\\n                      xCOffset >= 0 && xCOffset < \"+a+\") {\\n                      xTexelR\"+g+\"C\"+m+\" = getX(batch, xR, xCOffset, d1);\\n                    } else {\\n                      xTexelR\"+g+\"C\"+m+\" = vec4(0.);\\n                    }\\n                  \"),v+=\"\\n                  xR\"+g+\"C\"+(m+1)+\" = vec4(\\n                    xTexelR\"+g+\"C\"+m+\".zw, xTexelR\"+g+\"C\"+(m+2)+\".xy);\\n                \"):v+=\"\\n                  xCOffset = xC + \"+x+\";\\n\\n                  if(xR >= 0 && xR < \"+o+\" &&\\n                    xCOffset >= 0 && xCOffset < \"+a+\") {\\n                    xTexelR\"+g+\"C\"+(m+2)+\" = getX(batch, xR, xCOffset, d1);\\n                  }\\n\\n                  xR\"+g+\"C\"+(m+1)+\" = xTexelR\"+g+\"C\"+(m+2)+\";\\n                \"}}else m<d&&(v+=\"\\n              if(xR >= 0 && xR < \"+o+\") {\\n            \",s%2==1?(v+=\"\\n                xCOffset = xC + 1 - \"+c+\";\\n                if(xCOffset >= 0 && xCOffset < \"+a+\") {\\n                  xTexelR\"+g+\"C\"+m+\" = getX(batch, xR, xCOffset, d1);\\n                } else {\\n                  xTexelR\"+g+\"C\"+m+\" = vec4(0.);\\n                }\\n\\n                if(xC + 1 >= 0 && xC + 1 < \"+a+\") {\\n                  xTexelR\"+g+\"C\"+(m+2)+\" = getX(batch, xR, xC + 1, d1);\\n                } else {\\n                  xTexelR\"+g+\"C\"+(m+2)+\" = vec4(0.);\\n                }\\n\\n                xR\"+g+\"C\"+m+\" = vec4(\\n                  xTexelR\"+g+\"C\"+m+\".zw, xTexelR\"+g+\"C\"+(m+2)+\".zw);\\n              \",m+1<d&&(v+=\"\\n                  vec4 final = vec4(0.);\\n                  xCOffset = xC + 1 + \"+c+\";\\n                  if(xCOffset >= 0 && xCOffset < \"+a+\") {\\n                    final = getX(batch, xR, xCOffset, d1);\\n                  }\\n                  xR\"+g+\"C\"+(m+1)+\" = vec4(xTexelR\"+g+\"C\"+(m+2)+\".xy, final.xy);\\n                \")):(v+=\"\\n                if(xC >= 0 && xC < \"+a+\") {\\n                  xTexelR\"+g+\"C\"+m+\" = getX(batch, xR, xC, d1);\\n                } else {\\n                  xTexelR\"+g+\"C\"+m+\" = vec4(0.);\\n                }\\n\\n                xCOffset = xC + \"+c+\";\\n                if(xCOffset >= 0 && xCOffset < \"+a+\") {\\n                  xTexelR\"+g+\"C\"+(m+2)+\" = getX(batch, xR, xCOffset, d1);\\n                } else {\\n                  xTexelR\"+g+\"C\"+(m+2)+\" = vec4(0.);\\n                }\\n\\n                xR\"+g+\"C\"+m+\" = vec4(\\n                  xTexelR\"+g+\"C\"+m+\".xy, xTexelR\"+g+\"C\"+(m+2)+\".xy);\\n              \",m+1<d&&(v+=\"\\n                  xR\"+g+\"C\"+(m+1)+\" = vec4(\\n                    xTexelR\"+g+\"C\"+m+\".zw, xTexelR\"+g+\"C\"+(m+2)+\".zw);\\n                \")),v+=\"}\");m<d&&(v+=\"\\n            vec4 wTexelR\"+g+\"C\"+m+\" = getW(\"+g+\", \"+m+\", d1, q);\\n            wR\"+g+\"C\"+m+\" = vec4(wTexelR\"+g+\"C\"+m+\".xz, wTexelR\"+g+\"C\"+m+\".xz);\\n          \",m+1<d&&(v+=\"\\n              vec4 wTexelR\"+g+\"C\"+(m+1)+\" = getW(\"+g+\", \"+(m+1)+\", d1, q);\\n              wR\"+g+\"C\"+(m+1)+\" =\\n                vec4(wTexelR\"+g+\"C\"+(m+1)+\".xz, wTexelR\"+g+\"C\"+(m+1)+\".xz);\"))}for(g=0;g<f;g++)for(m=0;m<d;m++)v+=\"dotProd += xR\"+g+\"C\"+m+\" * wR\"+g+\"C\"+m+\";\";var w=\"\",C=\"\";n&&(w=r?\"vec4 activation(vec4 a) {\\n          vec4 b = getPreluActivationWeightsAtOutCoords();\\n          \"+n+\"\\n        }\":\"vec4 activation(vec4 x) {\\n          \"+n+\"\\n        }\",C=\"result = activation(result);\");var E=e?\"result += getBiasAtOutCoords();\":\"\";e&&this.variableNames.push(\"bias\"),r&&this.variableNames.push(\"preluActivationWeights\"),this.userCode=\"\\n      \"+w+\"\\n\\n      const ivec2 strides = ivec2(\"+u+\", \"+c+\");\\n      const ivec2 pads = ivec2(\"+i+\", \"+s+\");\\n\\n      void main() {\\n\\n        ivec4 coords = getOutputCoords();\\n        int batch = coords.x;\\n        ivec2 xRCCorner = coords.yz * strides - pads;\\n        int d2 = coords.w;\\n        int d1 = d2;\\n        int q = 0;\\n        int xRCorner = xRCCorner.x;\\n        int xCCorner = xRCCorner.y;\\n\\n        vec4 dotProd = vec4(0.);\\n\\n        \"+v+\"\\n\\n        vec4 result = dotProd;\\n        \"+E+\"\\n        \"+C+\"\\n        setOutput(result);\\n      }\\n    \"},Hi=function(t,e,n,r,o){this.variableNames=[\"Image\",\"Boxes\",\"BoxInd\"],this.outputShape=[];var a=t[0],i=t[1],s=t[2],u=t[3],c=e[0],l=n[0],h=n[1];this.outputShape=[c,l,h,u];var f=\"bilinear\"===r?1:0,d=[i-1+\".0\",s-1+\".0\"],p=d[0],v=d[1],g=l>1?[\"\"+(i-1)/(l-1),\"(y2-y1) * height_ratio\",\"y1*\"+p+\" + float(y)*(height_scale)\"]:[\"0.0\",\"0.0\",\"0.5 * (y1+y2) * \"+p],m=g[0],y=g[1],x=g[2],b=h>1?[\"\"+(s-1)/(h-1),\"(x2-x1) * width_ratio\",\"x1*\"+v+\" + float(x)*(width_scale)\"]:[\"0.0\",\"0.0\",\"0.5 * (x1+x2) * \"+v],w=b[0],C=b[1],E=b[2];this.userCode=\"\\n      const float height_ratio = float(\"+m+\");\\n      const float width_ratio = float(\"+w+\");\\n      void main() {\\n        ivec4 coords = getOutputCoords();\\n        int b = coords[0];\\n        int y = coords[1];\\n        int x = coords[2];\\n        int d = coords[3];\\n\\n        // get box vals\\n        float y1 = getBoxes(b,0);\\n        float x1 = getBoxes(b,1);\\n        float y2 = getBoxes(b,2);\\n        float x2 = getBoxes(b,3);\\n\\n        // get image in batch index\\n        int bInd = round(getBoxInd(b));\\n        if(bInd < 0 || bInd >= \"+a+\") {\\n          return;\\n        }\\n\\n        float height_scale = \"+y+\";\\n        float width_scale = \"+C+\";\\n\\n        float in_y = \"+x+\";\\n        if( in_y < 0.0 || in_y > \"+p+\" ) {\\n          setOutput(float(\"+o+\"));\\n          return;\\n        }\\n        float in_x = \"+E+\";\\n        if( in_x < 0.0 || in_x > \"+v+\" ) {\\n          setOutput(float(\"+o+\"));\\n          return;\\n        }\\n\\n        vec2 sourceFracIndexCR = vec2(in_x,in_y);\\n        if(\"+f+\" == 1) {\\n          // Compute the four integer indices.\\n          ivec2 sourceFloorCR = ivec2(sourceFracIndexCR);\\n          ivec2 sourceCeilCR = ivec2(ceil(sourceFracIndexCR));\\n\\n          float topLeft = getImage(b, sourceFloorCR.y, sourceFloorCR.x, d);\\n          float bottomLeft = getImage(b, sourceCeilCR.y, sourceFloorCR.x, d);\\n          float topRight = getImage(b, sourceFloorCR.y, sourceCeilCR.x, d);\\n          float bottomRight = getImage(b, sourceCeilCR.y, sourceCeilCR.x, d);\\n\\n          vec2 fracCR = sourceFracIndexCR - vec2(sourceFloorCR);\\n\\n          float top = topLeft + (topRight - topLeft) * fracCR.x;\\n          float bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR.x;\\n          float newValue = top + (bottom - top) * fracCR.y;\\n          setOutput(newValue);\\n        } else {\\n          // Compute the coordinators of nearest neighbor point.\\n          ivec2 sourceNearestCR = ivec2(floor(\\n            sourceFracIndexCR + vec2(0.5,0.5)));\\n          float newValue = getImage(b, sourceNearestCR.y, sourceNearestCR.x, d);\\n          setOutput(newValue);\\n        }\\n      }\\n    \"},qi=function(t,e,n){this.variableNames=[\"x\"],this.outputShape=t;var r=t.length,o=t[t.length-1],a=n?\"<\":\">\";this.userCode=\"\\n      int getIndex(int i) {\\n        \"+(n?\"return \"+o+\" -i - 1;\":\"return i;\")+\"\\n      }\\n\\n      void main() {\\n        \"+ui(r)+\" coords = getOutputCoords();\\n        int end = \"+Ki(r,\"coords\")+\";\\n        float val = 0.0;\\n        for (int i = \"+o+\" - 1; i >= 0; i -= 1) {\\n          int idx = getIndex(i);\\n          if (idx \"+a+\" end) {\\n            continue;\\n          }\\n          if (idx == end && \"+e+\") {\\n            continue;\\n          }\\n          \"+Ki(r,\"coords\")+\" = idx;\\n          val += getX(\"+function(t,e){if(1===t)return\"\"+e;if(2===t)return e+\".x, \"+e+\".y\";if(3===t)return e+\".x, \"+e+\".y, \"+e+\".z\";if(4===t)return e+\".x, \"+e+\".y, \"+e+\".z, \"+e+\".w\";throw Error(\"Cumulative sum for rank \"+t+\" is not yet supported\")}(r,\"coords\")+\");\\n        }\\n        setOutput(val);\\n      }\\n    \"};function Ki(t,e){if(1===t)return\"\"+e;if(2===t)return e+\".y\";if(3===t)return e+\".z\";if(4===t)return e+\".w\";throw Error(\"Cumulative sum for rank \"+t+\" is not yet supported\")}var ji=function(t){this.variableNames=[\"A\"],this.packedInputs=!1,this.packedOutput=!0,this.outPackingScheme=Vt.DENSE;var e=Yt(t),n=Ya();this.outputShape=t,this.userCode=\"\\n      ivec3 outCoordsFromFlatIndex(int index) {\\n        \"+$a([\"r\",\"c\",\"d\"],t)+\"\\n        return ivec3(r, c, d);\\n      }\\n\\n      void main() {\\n        ivec2 resTexRC = ivec2(resultUV.yx *\\n          vec2(\"+e[0]+\", \"+e[1]+\"));\\n        int index = 4 * (resTexRC.x * \"+e[1]+\" + resTexRC.y);\\n\\n        vec4 result = vec4(0.);\\n\\n        for (int i=0; i<4; i++) {\\n          int flatIndex = index + i;\\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\\n          result[i] = getA(rc.x, rc.y, rc.z);\\n        }\\n\\n        \"+n.output+\" = result;\\n      }\\n    \"},Xi=function(t){this.variableNames=[\"A\"],this.packedInputs=!0,this.packedOutput=!0,this.outPackingScheme=Vt.DENSE;var e=Yt(t),n=Ya();this.outputShape=t,this.userCode=\"\\n      ivec3 outCoordsFromFlatIndex(int index) {\\n        \"+$a([\"r\",\"c\",\"d\"],t)+\"\\n        return ivec3(r, c, d);\\n      }\\n\\n      void main() {\\n        ivec2 resTexRC = ivec2(resultUV.yx *\\n          vec2(\"+e[0]+\", \"+e[1]+\"));\\n        int index = 4 * (resTexRC.x * \"+e[1]+\" + resTexRC.y);\\n\\n        vec4 result = vec4(0.);\\n\\n        for (int i=0; i<4; i++) {\\n          int flatIndex = index + i;\\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\\n          result[i] = getChannel(getA(rc.x, rc.y, rc.z), vec2(rc.y, rc.z));\\n        }\\n\\n        \"+n.output+\" = result;\\n      }\\n    \"},Yi=function(){function t(t,e,n){this.variableNames=[\"x\"],this.outputShape=[],this.outputShape=t,this.blockSize=e,this.dataFormat=n,this.userCode=\"\\n    void main() {\\n      ivec4 coords = getOutputCoords();\\n      int b = coords[0];\\n      int h = \"+this.getHeightCoordString()+\";\\n      int w = \"+this.getWidthCoordString()+\";\\n      int d = \"+this.getDepthCoordString()+\";\\n\\n      int in_h = h / \"+e+\";\\n      int offset_h = imod(h, \"+e+\");\\n      int in_w = w / \"+e+\";\\n      int offset_w = imod(w, \"+e+\");\\n      int offset_d = (offset_h * \"+e+\" + offset_w) *\\n        \"+this.getOutputDepthSize()+\";\\n      int in_d = d + offset_d;\\n\\n      float result = \"+this.getInputSamplingString()+\";\\n      setOutput(result);\\n    }\\n  \"}return t.prototype.getHeightCoordString=function(){return\"NHWC\"===this.dataFormat?\"coords[1]\":\"coords[2]\"},t.prototype.getWidthCoordString=function(){return\"NHWC\"===this.dataFormat?\"coords[2]\":\"coords[3]\"},t.prototype.getDepthCoordString=function(){return\"NHWC\"===this.dataFormat?\"coords[3]\":\"coords[1]\"},t.prototype.getOutputDepthSize=function(){return\"NHWC\"===this.dataFormat?this.outputShape[3]:this.outputShape[1]},t.prototype.getInputSamplingString=function(){return\"NHWC\"===this.dataFormat?\"getX(b, in_h, in_w, in_d)\":\"getX(b, in_d, in_h, in_w)\"},t}(),$i=function(t){this.variableNames=[\"X\"],this.outputShape=[t,t],this.userCode=\"\\n      void main() {\\n          ivec2 coords = getOutputCoords();\\n          float val = coords[0] == coords[1] ? getX(coords[0]) : 0.0;\\n          setOutput(val);\\n      }\\n    \"},Qi=function(t){this.variableNames=[\"A\"],this.outTexUsage=zt.DOWNLOAD;var e=Ya();this.outputShape=t,this.userCode=\"\\n      \"+Ja+\"\\n\\n      void main() {\\n        float x = getAAtOutCoords();\\n        \"+e.output+\" = encode_float(x);\\n      }\\n    \"},Ji=function(t){this.variableNames=[\"A\"],this.packedInputs=!0,this.packedOutput=!1,this.outTexUsage=zt.DOWNLOAD;var e=Ya();this.outputShape=t,this.userCode=\"\\n      \"+Ja+\"\\n\\n      void main() {\\n        ivec3 coords = getOutputCoords();\\n        float x = getChannel(getAAtOutCoords(), vec2(coords.y, coords.z));\\n        \"+e.output+\" = encode_float(x);\\n      }\\n    \"},Zi=function(t,e,n){void 0===n&&(n=!1),this.variableNames=[\"A\"];var r=Ya(),o=e[0],a=e[1];this.outputShape=t;var i=\"result\";n&&(i=\"floor(result * 255. + 0.5)\"),this.userCode=\"\\n      \"+Qa(t)+\"\\n\\n      void main() {\\n        ivec3 coords = getOutputCoords();\\n\\n        int flatIndex = getFlatIndex(coords);\\n        int offset = imod(flatIndex, 4);\\n\\n        flatIndex = idiv(flatIndex, 4, 1.);\\n        \\n        int r = flatIndex / \"+a+\";\\n        int c = imod(flatIndex, \"+a+\");\\n        vec2 uv = (vec2(c, r) + halfCR) / vec2(\"+a+\".0, \"+o+\".0);\\n        vec4 values = \"+r.texture2D+\"(A, uv);\\n\\n        float result;\\n\\n        if(offset == 0) {\\n          result = values[0];\\n        } else if(offset == 1) {\\n          result = values[1];\\n        } else if(offset == 2) {\\n          result = values[2];\\n        } else {\\n          result = values[3];\\n        }\\n\\n        \"+r.output+\" = vec4(\"+i+\", 0., 0., 0.);\\n      }\\n    \"},ts=function(t,e,n){void 0===n&&(n=!1),this.variableNames=[\"A\"],this.packedInputs=!1,this.packedOutput=!0;var r=Ya(),o=e[0],a=e[1];this.outputShape=t;var i=\"\",s=\"result\";n&&(s=\"floor(result * 255. + 0.5)\");for(var u=0;u<=1;u++)for(var c=0;c<=1;c++){var l=2*u+c;i+=\"\\n          localCoords = coords;\\n          if(localCoords[2] + \"+c+\" < \"+t[2]+\") {\\n            localCoords[2] += \"+c+\";\\n            if(localCoords[1] + \"+u+\" < \"+t[1]+\") {\\n              localCoords[1] += \"+u+\";\\n\\n              flatIndex = getFlatIndex(localCoords);\\n              offset = imod(flatIndex, 4);\\n\\n              flatIndex = idiv(flatIndex, 4, 1.);\\n\\n              r = flatIndex / \"+a+\";\\n              c = imod(flatIndex, \"+a+\");\\n              uv = (vec2(c, r) + halfCR) / vec2(\"+a+\".0, \"+o+\".0);\\n              values = \"+r.texture2D+\"(A, uv);\\n\\n              if(offset == 0) {\\n                result[\"+l+\"] = values[0];\\n              } else if(offset == 1) {\\n                result[\"+l+\"] = values[1];\\n              } else if(offset == 2) {\\n                result[\"+l+\"] = values[2];\\n              } else {\\n                result[\"+l+\"] = values[3];\\n              }\\n            }\\n          }\\n        \"}this.userCode=\"\\n      \"+Qa(t)+\"\\n\\n      void main() {\\n        ivec3 coords = getOutputCoords();\\n\\n        vec4 result = vec4(0.);\\n        int flatIndex, r, c, offset;\\n        ivec3 localCoords;\\n        vec2 uv;\\n        vec4 values;\\n\\n        \"+i+\"\\n\\n        \"+r.output+\" = \"+s+\";\\n      }\\n    \"},es=\"return real * expR - imag * expI;\",ns=\"return real * expI + imag * expR;\",rs=function(t,e,n){this.variableNames=[\"real\",\"imag\"];var r=e[1];this.outputShape=e;var o=n?\"2.0 * \"+Math.PI:\"-2.0 * \"+Math.PI,a=n?r+\".0\":\"1.0\";this.userCode=\"\\n      const float exponentMultiplier = \"+o+\";\\n\\n      float unaryOpComplex(float real, float expR, float imag, float expI) {\\n        \"+t+\"\\n      }\\n\\n      float mulMatDFT(int batch, int index) {\\n        float indexRatio = float(index) / float(\"+r+\");\\n        float exponentMultiplierTimesIndexRatio =\\n            exponentMultiplier * indexRatio;\\n\\n        float result = 0.0;\\n\\n        for (int i = 0; i < \"+r+\"; i++) {\\n          // x = (-2|2 * PI / N) * index * i;\\n          float x = exponentMultiplierTimesIndexRatio * float(i);\\n          float expR = cos(x);\\n          float expI = sin(x);\\n          float real = getReal(batch, i);\\n          float imag = getImag(batch, i);\\n\\n          result +=\\n              unaryOpComplex(real, expR, imag, expI) / \"+a+\";\\n        }\\n\\n        return result;\\n      }\\n\\n      void main() {\\n        ivec2 coords = getOutputCoords();\\n        setOutput(mulMatDFT(coords[0], coords[1]));\\n      }\\n    \"},os=function(){function t(t,e){this.outputShape=[],this.variableNames=[\"x\"],this.outputShape=t,this.userCode=\"\\n      uniform float value;\\n      void main() {\\n        // Input can be obtained from uniform value.\\n        setOutput(value);\\n      }\\n    \"}return t.prototype.getCustomSetupFunc=function(t){var e=this;return function(n,r){null==e.valueLoc&&(e.valueLoc=n.getUniformLocationNoThrow(r,\"value\")),n.gl.uniform1f(e.valueLoc,t)}},t}(),as=function(t,e,n){this.variableNames=[\"A\",\"indices\"];var r=t.slice();r[n]=e,this.outputShape=r,this.rank=r.length;var o=ui(this.rank),a=function(t,e){var n=t.length;if(n>4)throw Error(\"Gather for rank \"+n+\" is not yet supported\");if(1===n)return\"int(getIndices(resRC))\";for(var r=[\"resRC.x\",\"resRC.y\",\"resRC.z\",\"resRC.w\"],o=[],a=0;a<t.length;a++)a===e?o.push(\"int(getIndices(\"+r[a]+\"))\"):o.push(\"\"+r[a]);return o.join()}(t,n);this.userCode=\"\\n      void main() {\\n        \"+o+\" resRC = getOutputCoords();\\n        setOutput(getA(\"+a+\"));\\n      }\\n    \"};var is=function(t,e,n){this.sliceDim=t,this.strides=e,this.variableNames=[\"x\",\"indices\"],this.outputShape=n;var r=ui(e.length),o=ui(n.length),a=this.sliceDim>1?\"strides[j]\":\"strides\";this.userCode=\"\\n        \"+r+\" strides = \"+r+\"(\"+this.strides+\");\\n         void main() {\\n          \"+o+\" coords = getOutputCoords();\\n          int flattenIndex = 0;\\n          for (int j = 0; j < \"+this.sliceDim+\"; j++) {\\n            int index = round(getIndices(coords[0], j));\\n            flattenIndex += index * \"+a+\";\\n          }\\n          setOutput(getX(flattenIndex, coords[1]));\\n        }\\n      \"};function ss(t,e){var n=Ya();return oe(t,e,n.version+\"\\n    precision highp float;\\n    \"+n.attribute+\" vec3 clipSpacePos;\\n    \"+n.attribute+\" vec2 uv;\\n    \"+n.varyingVs+\" vec2 resultUV;\\n\\n    void main() {\\n      gl_Position = vec4(clipSpacePos, 1);\\n      resultUV = uv;\\n    }\")}function us(t,e){return fe(t,e,new Float32Array([-1,1,0,0,1,-1,-1,0,0,0,1,1,0,1,1,1,-1,0,1,0]))}function cs(t,e){return de(t,e,new Uint16Array([0,1,2,2,1,3]))}function ls(t,e,n,r,o,a,i){ve(n,r);var s=pe(t,e),u=t.TEXTURE_2D;return Jt(t,e,(function(){return t.bindTexture(u,s)})),Jt(t,e,(function(){return t.texParameteri(u,t.TEXTURE_WRAP_S,t.CLAMP_TO_EDGE)})),Jt(t,e,(function(){return t.texParameteri(u,t.TEXTURE_WRAP_T,t.CLAMP_TO_EDGE)})),Jt(t,e,(function(){return t.texParameteri(u,t.TEXTURE_MIN_FILTER,t.NEAREST)})),Jt(t,e,(function(){return t.texParameteri(u,t.TEXTURE_MAG_FILTER,t.NEAREST)})),Jt(t,e,(function(){return t.texImage2D(u,0,o,n,r,0,a,i,null)})),Jt(t,e,(function(){return t.bindTexture(t.TEXTURE_2D,null)})),s}function hs(t,e,n,r,o){var a=Xt(n,r);return ls(t,e,a[0],a[1],o.internalFormatFloat,o.textureFormatFloat,t.FLOAT)}function fs(t,e,n,r,o){var a=Xt(n,r);return ls(t,e,a[0],a[1],o.internalFormatHalfFloat,o.textureFormatFloat,o.textureTypeHalfFloat)}function ds(t,e,n,r,o){var a=Xt(n,r);return ls(t,e,a[0],a[1],t.RGBA,t.RGBA,t.UNSIGNED_BYTE)}function ps(t,e,n,r,o){var a=$t(n,r);return ls(t,e,a[0],a[1],o.internalFormatPackedFloat,t.RGBA,t.FLOAT)}function vs(t,e,n,r,o){var a=$t(n,r);return ls(t,e,a[0],a[1],o.internalFormatPackedHalfFloat,t.RGBA,o.textureTypeHalfFloat)}function gs(t,e,n,r){return Jt(t,e,(function(){return t.bindBuffer(t.ARRAY_BUFFER,r)})),me(t,e,n,\"clipSpacePos\",r,3,20,0)&&me(t,e,n,\"uv\",r,2,20,12)}function ms(t,e,n,r,o,a,i){var s,u,c;Jt(t,e,(function(){return t.bindTexture(t.TEXTURE_2D,n)})),a instanceof Uint8Array?(s=new Uint8Array(r*o*4),u=t.UNSIGNED_BYTE,c=t.RGBA):(s=new Float32Array(r*o*4),u=t.FLOAT,c=i.internalFormatPackedFloat),s.set(a),Jt(t,e,(function(){return t.texImage2D(t.TEXTURE_2D,0,c,r,o,0,t.RGBA,u,s)})),Jt(t,e,(function(){return t.bindTexture(t.TEXTURE_2D,null)}))}function ys(t,e,n,r){Jt(t,e,(function(){return t.bindTexture(t.TEXTURE_2D,n)})),r.data instanceof Uint8Array?Jt(t,e,(function(){return t.texImage2D(t.TEXTURE_2D,0,t.RGBA,r.width,r.height,0,t.RGBA,t.UNSIGNED_BYTE,r.data)})):Jt(t,e,(function(){return t.texImage2D(t.TEXTURE_2D,0,t.RGBA,t.RGBA,t.UNSIGNED_BYTE,r)})),Jt(t,e,(function(){return t.bindTexture(t.TEXTURE_2D,null)}))}function xs(t,e,n,r,o){var a=t.createBuffer();Jt(t,e,(function(){return t.bindBuffer(t.PIXEL_PACK_BUFFER,a)}));var i=16*n*r;return Jt(t,e,(function(){return t.bufferData(t.PIXEL_PACK_BUFFER,i,t.STREAM_READ)})),Jt(t,e,(function(){return t.readPixels(0,0,r,n,t.RGBA,t.FLOAT,0)})),Jt(t,e,(function(){return t.bindBuffer(t.PIXEL_PACK_BUFFER,null)})),a}function bs(t,e,n){var r=t,o=new Float32Array(n);return r.bindBuffer(r.PIXEL_PACK_BUFFER,e),r.getBufferSubData(r.PIXEL_PACK_BUFFER,0,o),r.bindBuffer(r.PIXEL_PACK_BUFFER,null),o}function ws(t,e,n,r,o){var a=Xt(n,r),i=a[0],s=a[1],u=new Uint8Array(n*r*4);return Jt(t,e,(function(){return t.readPixels(0,0,i,s,o.downloadTextureFormat,t.UNSIGNED_BYTE,u)})),new Float32Array(u.buffer)}function Cs(t,e,n,r,o,a,i,s){var u=t,c=new Float32Array(function(t,e){var n=$t(t,e);return n[0]*n[1]*4}(a,i));return u.bindBuffer(u.PIXEL_PACK_BUFFER,e),u.getBufferSubData(u.PIXEL_PACK_BUFFER,0,c),u.bindBuffer(u.PIXEL_PACK_BUFFER,null),c}function Es(t,e,n,r){var o=new Float32Array(n*r*4);return Jt(t,e,(function(){return t.readPixels(0,0,r,n,t.RGBA,t.FLOAT,o)})),o}var Rs=Object.freeze({createVertexShader:ss,createVertexBuffer:us,createIndexBuffer:cs,createFloat32MatrixTexture:hs,createFloat16MatrixTexture:fs,createUnsignedBytesMatrixTexture:ds,createPackedMatrixTexture:ps,createFloat16PackedMatrixTexture:vs,bindVertexProgramAttributeStreams:gs,uploadDenseMatrixToTexture:ms,uploadPixelDataToTexture:ys,createBufferFromOutputTexture:xs,downloadFloat32MatrixFromBuffer:bs,downloadByteEncodedFloatMatrixFromOutputTexture:ws,downloadPackedMatrixFromBuffer:Cs,downloadMatrixFromPackedOutputTexture:Es}),Is=function(){function t(t){this.outputTexture=null,this.program=null,this.disposed=!1,this.vertexAttrsAreBound=!1,this.itemsToPoll=[];var e=i().getNumber(\"WEBGL_VERSION\");null!=t?(this.gl=t,Kt(e,t)):this.gl=jt(e);var n=\"WEBGL_color_buffer_float\";if(1===i().getNumber(\"WEBGL_VERSION\")){if(this.textureFloatExtension=re(this.gl,this.debug,\"OES_texture_float\"),Pe(this.gl,\"OES_texture_half_float\"))this.textureHalfFloatExtension=re(this.gl,this.debug,\"OES_texture_half_float\");else if(i().get(\"WEBGL_FORCE_F16_TEXTURES\"))throw new Error(\"GL context does not support half float textures, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.\");if(this.colorBufferFloatExtension=this.gl.getExtension(n),Pe(this.gl,\"EXT_color_buffer_half_float\"))this.colorBufferHalfFloatExtension=re(this.gl,this.debug,\"EXT_color_buffer_half_float\");else if(i().get(\"WEBGL_FORCE_F16_TEXTURES\"))throw new Error(\"GL context does not support color renderable half floats, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.\")}else if(n=\"EXT_color_buffer_float\",Pe(this.gl,n))this.colorBufferFloatExtension=this.gl.getExtension(n);else{if(!Pe(this.gl,\"EXT_color_buffer_half_float\"))throw new Error(\"GL context does not support color renderable floats\");this.colorBufferHalfFloatExtension=this.gl.getExtension(\"EXT_color_buffer_half_float\")}this.vertexBuffer=us(this.gl,this.debug),this.indexBuffer=cs(this.gl,this.debug),this.framebuffer=ge(this.gl,this.debug),this.textureConfig=Qt(this.gl,this.textureHalfFloatExtension)}return Object.defineProperty(t.prototype,\"debug\",{get:function(){return i().getBool(\"DEBUG\")},enumerable:!0,configurable:!0}),t.prototype.dispose=function(){var t=this;if(!this.disposed){null!=this.program&&console.warn(\"Disposing a GPGPUContext that still has a bound WebGLProgram. This is probably a resource leak, delete the program with GPGPUContext.deleteProgram before disposing.\"),null!=this.outputTexture&&console.warn(\"Disposing a GPGPUContext that still has a bound output matrix texture.  This is probably a resource leak, delete the output matrix texture with GPGPUContext.deleteMatrixTexture before disposing.\");var e=this.gl;Jt(e,this.debug,(function(){return e.finish()})),Jt(e,this.debug,(function(){return e.bindFramebuffer(e.FRAMEBUFFER,null)})),Jt(e,this.debug,(function(){return e.deleteFramebuffer(t.framebuffer)})),Jt(e,this.debug,(function(){return e.bindBuffer(e.ARRAY_BUFFER,null)})),Jt(e,this.debug,(function(){return e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,null)})),Jt(e,this.debug,(function(){return e.deleteBuffer(t.indexBuffer)})),this.disposed=!0}},t.prototype.createFloat32MatrixTexture=function(t,e){return this.throwIfDisposed(),hs(this.gl,this.debug,t,e,this.textureConfig)},t.prototype.createFloat16MatrixTexture=function(t,e){return this.throwIfDisposed(),fs(this.gl,this.debug,t,e,this.textureConfig)},t.prototype.createUnsignedBytesMatrixTexture=function(t,e){return this.throwIfDisposed(),ds(this.gl,this.debug,t,e,this.textureConfig)},t.prototype.uploadPixelDataToTexture=function(t,e){this.throwIfDisposed(),ys(this.gl,this.debug,t,e)},t.prototype.uploadDenseMatrixToTexture=function(t,e,n,r){this.throwIfDisposed(),ms(this.gl,this.debug,t,e,n,r,this.textureConfig)},t.prototype.createFloat16PackedMatrixTexture=function(t,e){return this.throwIfDisposed(),vs(this.gl,this.debug,t,e,this.textureConfig)},t.prototype.createPackedMatrixTexture=function(t,e){return this.throwIfDisposed(),ps(this.gl,this.debug,t,e,this.textureConfig)},t.prototype.deleteMatrixTexture=function(t){var e=this;this.throwIfDisposed(),this.outputTexture===t&&(Ee(this.gl,this.debug,this.framebuffer),this.outputTexture=null),Jt(this.gl,this.debug,(function(){return e.gl.deleteTexture(t)}))},t.prototype.downloadByteEncodedFloatMatrixFromOutputTexture=function(t,e,n){var r=this;return this.downloadMatrixDriver(t,(function(){return ws(r.gl,r.debug,e,n,r.textureConfig)}))},t.prototype.downloadPackedMatrixFromBuffer=function(t,e,n,r,o,a){return Cs(this.gl,t,0,0,0,o,a,this.textureConfig)},t.prototype.downloadFloat32MatrixFromBuffer=function(t,e){return bs(this.gl,t,e)},t.prototype.createBufferFromTexture=function(t,e,n){this.bindTextureToFrameBuffer(t);var r=xs(this.gl,this.debug,e,n,this.textureConfig);return this.unbindTextureToFrameBuffer(),r},t.prototype.createAndWaitForFence=function(){var t=this.createFence(this.gl);return this.pollFence(t)},t.prototype.createFence=function(t){var e,n,r=this;if(i().getBool(\"WEBGL_FENCE_API_ENABLED\")){var o=t,a=o.fenceSync(o.SYNC_GPU_COMMANDS_COMPLETE,0);t.flush(),n=function(){var t=o.clientWaitSync(a,0,0);return t===o.ALREADY_SIGNALED||t===o.CONDITION_SATISFIED},e=a}else i().getNumber(\"WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION\")>0?(e=this.beginQuery(),this.endQuery(),n=function(){return r.isQueryAvailable(e,i().getNumber(\"WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION\"))}):n=function(){return!0};return{query:e,isFencePassed:n}},t.prototype.downloadMatrixFromPackedTexture=function(t,e,n){var r=this;return this.downloadMatrixDriver(t,(function(){return Es(r.gl,r.debug,e,n)}))},t.prototype.createProgram=function(t){this.throwIfDisposed();var e=this.gl,n=ae(e,this.debug,t),r=ss(e,this.debug),o=ce(e,this.debug);return Jt(e,this.debug,(function(){return e.attachShader(o,r)})),Jt(e,this.debug,(function(){return e.attachShader(o,n)})),le(e,this.debug,o),this.debug&&he(e,this.debug,o),this.vertexAttrsAreBound||(this.setProgram(o),this.vertexAttrsAreBound=gs(e,this.debug,this.program,this.vertexBuffer)),o},t.prototype.deleteProgram=function(t){var e=this;this.throwIfDisposed(),t===this.program&&(this.program=null),null!=t&&Jt(this.gl,this.debug,(function(){return e.gl.deleteProgram(t)}))},t.prototype.setProgram=function(t){var e=this;this.throwIfDisposed(),this.program=t,null!=this.program&&this.debug&&he(this.gl,this.debug,this.program),Jt(this.gl,this.debug,(function(){return e.gl.useProgram(t)}))},t.prototype.getUniformLocation=function(t,e,n){return void 0===n&&(n=!0),this.throwIfDisposed(),n?xe(this.gl,this.debug,t,e):be(this.gl,t,e)},t.prototype.getAttributeLocation=function(t,e){var n=this;return this.throwIfDisposed(),Jt(this.gl,this.debug,(function(){return n.gl.getAttribLocation(t,e)}))},t.prototype.getUniformLocationNoThrow=function(t,e){return this.throwIfDisposed(),this.gl.getUniformLocation(t,e)},t.prototype.setInputMatrixTexture=function(t,e,n){this.throwIfDisposed(),this.throwIfNoProgram(),we(this.gl,this.debug,this.program,t,e,n)},t.prototype.setOutputMatrixTexture=function(t,e,n){this.setOutputMatrixTextureDriver(t,n,e)},t.prototype.setOutputPackedMatrixTexture=function(t,e,n){this.throwIfDisposed();var r=$t(e,n),o=r[0],a=r[1];this.setOutputMatrixTextureDriver(t,o,a)},t.prototype.setOutputMatrixWriteRegion=function(t,e,n,r){this.setOutputMatrixWriteRegionDriver(n,t,r,e)},t.prototype.setOutputPackedMatrixWriteRegion=function(t,e,n,r){throw new Error(\"setOutputPackedMatrixWriteRegion not implemented.\")},t.prototype.debugValidate=function(){null!=this.program&&he(this.gl,this.debug,this.program),Re(this.gl)},t.prototype.executeProgram=function(){this.throwIfDisposed(),this.throwIfNoProgram();var t=this.gl;this.debug&&this.debugValidate(),Jt(t,this.debug,(function(){return t.drawElements(t.TRIANGLES,6,t.UNSIGNED_SHORT,0)}))},t.prototype.blockUntilAllProgramsCompleted=function(){var t=this;this.throwIfDisposed(),Jt(this.gl,this.debug,(function(){return t.gl.finish()}))},t.prototype.getQueryTimerExtension=function(){return null==this.disjointQueryTimerExtension&&(this.disjointQueryTimerExtension=re(this.gl,this.debug,2===i().getNumber(\"WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION\")?\"EXT_disjoint_timer_query_webgl2\":\"EXT_disjoint_timer_query\")),this.disjointQueryTimerExtension},t.prototype.getQueryTimerExtensionWebGL2=function(){return this.getQueryTimerExtension()},t.prototype.getQueryTimerExtensionWebGL1=function(){return this.getQueryTimerExtension()},t.prototype.beginQuery=function(){if(2===i().getNumber(\"WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION\")){var t=this.gl,e=this.getQueryTimerExtensionWebGL2(),n=t.createQuery();return t.beginQuery(e.TIME_ELAPSED_EXT,n),n}var r=this.getQueryTimerExtensionWebGL1(),o=r.createQueryEXT();return r.beginQueryEXT(r.TIME_ELAPSED_EXT,o),o},t.prototype.endQuery=function(){if(2!==i().getNumber(\"WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION\")){var t=this.getQueryTimerExtensionWebGL1();t.endQueryEXT(t.TIME_ELAPSED_EXT)}else{var e=this.gl,n=this.getQueryTimerExtensionWebGL2();e.endQuery(n.TIME_ELAPSED_EXT)}},t.prototype.waitForQueryAndGetTime=function(t){return n(this,void 0,void 0,(function(){var e=this;return r(this,(function(n){switch(n.label){case 0:return[4,F((function(){return e.disposed||e.isQueryAvailable(t,i().getNumber(\"WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION\"))}))];case 1:return n.sent(),[2,this.getQueryTime(t,i().getNumber(\"WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION\"))]}}))}))},t.prototype.getQueryTime=function(t,e){if(0===e)return null;if(2===e){var n=this.gl;return n.getQueryParameter(t,n.QUERY_RESULT)/1e6}var r=this.getQueryTimerExtensionWebGL1();return r.getQueryObjectEXT(t,r.QUERY_RESULT_EXT)/1e6},t.prototype.isQueryAvailable=function(t,e){if(0===e)return!0;if(2===e){var n=this.gl,r=this.getQueryTimerExtensionWebGL2(),o=n.getQueryParameter(t,n.QUERY_RESULT_AVAILABLE);return null==this.disjoint&&(this.disjoint=this.gl.getParameter(r.GPU_DISJOINT_EXT)),o&&!this.disjoint}o=(r=this.getQueryTimerExtensionWebGL1()).getQueryObjectEXT(t,r.QUERY_RESULT_AVAILABLE_EXT);return null==this.disjoint&&(this.disjoint=this.gl.getParameter(r.GPU_DISJOINT_EXT)),o&&!this.disjoint},t.prototype.pollFence=function(t){var e=this;return new Promise((function(n){e.addItemToPoll((function(){return t.isFencePassed()}),(function(){return n()}))}))},t.prototype.pollItems=function(){for(var t=function(t){for(var e=0;e<t.length;++e){if(!t[e]())break}return e-1}(this.itemsToPoll.map((function(t){return t.isDoneFn}))),e=0;e<=t;++e){(0,this.itemsToPoll[e].resolveFn)()}this.itemsToPoll=this.itemsToPoll.slice(t+1)},t.prototype.addItemToPoll=function(t,e){var n=this;this.itemsToPoll.push({isDoneFn:t,resolveFn:e}),this.itemsToPoll.length>1||F((function(){return n.pollItems(),0===n.itemsToPoll.length}))},t.prototype.bindTextureToFrameBuffer=function(t){this.throwIfDisposed(),Ce(this.gl,this.debug,t,this.framebuffer),this.debug&&Re(this.gl)},t.prototype.unbindTextureToFrameBuffer=function(){null!=this.outputTexture?(Ce(this.gl,this.debug,this.outputTexture,this.framebuffer),this.debug&&Re(this.gl)):Ee(this.gl,this.debug,this.framebuffer)},t.prototype.downloadMatrixDriver=function(t,e){this.bindTextureToFrameBuffer(t);var n=e();return this.unbindTextureToFrameBuffer(),n},t.prototype.setOutputMatrixTextureDriver=function(t,e,n){this.throwIfDisposed();var r=this.gl;Ce(r,this.debug,t,this.framebuffer),this.debug&&Re(r),this.outputTexture=t,Jt(r,this.debug,(function(){return r.viewport(0,0,e,n)})),Jt(r,this.debug,(function(){return r.scissor(0,0,e,n)}))},t.prototype.setOutputMatrixWriteRegionDriver=function(t,e,n,r){var o=this;this.throwIfDisposed(),Jt(this.gl,this.debug,(function(){return o.gl.scissor(t,e,n,r)}))},t.prototype.throwIfDisposed=function(){if(this.disposed)throw new Error(\"Attempted to use disposed GPGPUContext.\")},t.prototype.throwIfNoProgram=function(){if(null==this.program)throw new Error(\"No GPU program is currently set.\")},t}();function ks(t,e){if(t.length!==e.length)throw Error(\"Binary was compiled with \"+t.length+\" inputs, but was executed with \"+e.length+\" inputs\");t.forEach((function(t,n){var r=t.logicalShape,o=e[n],a=o.shape;if(!S(r,a))throw Error(\"Binary was compiled with different shapes than the current args. Shapes \"+r+\" and \"+a+\" must match\");if(!t.isUniform||!o.isUniform){var i=t.texShape,s=o.isUniform?null:o.texData.texShape;if(!S(i,s))throw Error(\"Binary was compiled with different texture shapes than the current args. Shape \"+i+\" and \"+s+\" must match\")}}))}var Ss=function(t,e,n){this.variableNames=[\"A\"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t;for(var r=n.filterWidth,o=n.inChannels,a=n.strideWidth,i=n.strideHeight,s=n.padInfo,u=n.outWidth,c=n.dilationWidth,l=n.dilationHeight,h=n.dataFormat,f=s.left,d=s.top,p=o*r,v=Ya(),g=\"channelsLast\"===h,m=g?0:1,y=g?1:2,x=\"\",b=0;b<=1;b++)for(var w=0;w<=1;w++)x+=\"\\n          blockIndex = rc.y + \"+w+\";\\n          pos = rc.x + \"+b+\";\\n\\n          if(blockIndex < \"+t[1]+\" && pos < \"+t[0]+\") {\\n            offsetY = int(blockIndex / (\"+u+\")) * \"+i+\" - \"+d+\";\\n            d0 = offsetY + \"+l+\" * (pos / \"+p+\");\\n\\n            if(d0 < \"+e[m]+\" && d0 >= 0) {\\n\\n              offsetX = int(mod(float(blockIndex), \"+u+\".) * \"+a+\". - \"+f+\".);\\n              d1 = offsetX + \"+c+\" * (int(mod(float(pos), \"+p+\".) / \"+o+\".));\\n\\n              if(d1 < \"+e[y]+\" && d1 >= 0) {\\n\\n                ch = int(mod(float(pos), \"+o+\".));\\n\\n                if (\"+g+\") {\\n                  innerDims = vec2(d1, ch);\\n                  result[\"+(2*b+w)+\"] = getChannel(\\n                    getA(d0, int(innerDims.x),\\n                    int(innerDims.y)), innerDims);\\n                } else {\\n                  innerDims = vec2(d0, d1);\\n                  result[\"+(2*b+w)+\"] = getChannel(\\n                    getA(ch, int(innerDims.x),\\n                    int(innerDims.y)), innerDims);\\n                }\\n              }\\n            }\\n          }\\n        \";this.userCode=\"\\n      void main() {\\n        ivec2 rc = getOutputCoords();\\n\\n        vec4 result = vec4(0);\\n\\n        int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\\n        vec2 innerDims;\\n\\n        \"+x+\"\\n\\n        \"+v.output+\" = result;\\n      }\\n    \"},As=function(t,e,n,r,o){this.variableNames=[\"x\"],this.outputShape=[];var a,i=e,s=t[3]-1;this.outputShape=t;var u=\"float(\"+n+\") + float(\"+r+\") * sum\";a=.5===o?\"inversesqrt(\"+u+\")\":1===o?\"1.0/(\"+u+\")\":\"exp(log(\"+u+\") * float(-\"+o+\"));\",this.userCode=\"\\n      void main() {\\n        ivec4 coords = getOutputCoords();\\n        int b = coords[0];\\n        int r = coords[1];\\n        int c = coords[2];\\n        int d = coords[3];\\n        float x = getX(b, r, c, d);\\n        float sum = 0.0;\\n        for (int j = -\"+i+\"; j <= \"+i+\"; j++) {\\n          int idx = d + j;\\n          if (idx >= 0 && idx <=  \"+s+\") {\\n            float z = getX(b, r, c, idx);\\n            sum += z * z;\\n          }\\n        }\\n        float val = x * \"+a+\";\\n        setOutput(val);\\n      }\\n    \"},Ts=function(t,e,n,r,o){this.variableNames=[\"inputImage\",\"outputImage\",\"dy\"],this.outputShape=[],this.outputShape=t,this.depth=t[3],this.depthRadius=e,this.bias=n,this.alpha=r,this.beta=o,this.userCode=\"\\n      void main() {\\n        ivec4 coords = getOutputCoords();\\n        int b = coords[0];\\n        int r = coords[1];\\n        int c = coords[2];\\n\\n        float result = 0.0;\\n        for (int d = 0; d < \"+this.depth+\"; ++d) {\\n          int depthBegin = int(max(0.0, float(d - \"+e+\")));\\n          int depthEnd = int(min(float(\"+this.depth+\"),\\n              float(d + \"+e+\" + 1)));\\n\\n          const int MIN_DEPTH_BEGIN = 0;\\n          const int MAX_DEPTH_END = \"+this.depth+\";\\n\\n          float norm = 0.0;\\n          for (int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k) {\\n            if (k < depthBegin){\\n              continue;\\n            }\\n            else if (k >= depthBegin && k < depthEnd) {\\n              norm += getInputImage(b, r, c, k) * getInputImage(b, r, c, k);\\n            }\\n            else {\\n              break;\\n            }\\n          }\\n\\n          norm = float(\"+r+\") * norm + float(\"+n+\");\\n\\n          for(int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k){\\n            if (k < depthBegin){\\n              continue;\\n            }\\n            else if (k >= depthBegin && k < depthEnd){\\n              float dyi = -2.0 * float(\"+r+\")\\n                * float(\"+o+\")\\n                * getInputImage(b ,r ,c, k) * getOutputImage(b, r, c, d)\\n                / norm;\\n              if (k == d) {\\n                dyi += pow(norm, -1.0 * \"+o+\");\\n              }\\n              if (k == coords[3]) {\\n                dyi *= getDy(b, r, c, d);\\n                result += dyi;\\n              }\\n            }\\n            else {\\n              break;\\n            }\\n          }\\n      }\\n      setOutput(result);\\n      }\\n    \"},Ds=function(t,e,n,r,o){this.variableNames=[\"x\"],this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0;var a,i=e,s=t[3]-1;this.outputShape=t;var u=\"float(\"+n+\") + float(\"+r+\") * sum\";a=.5===o?\"inversesqrt(\"+u+\")\":1===o?\"1.0/(\"+u+\")\":\"exp(log(\"+u+\") * float(-\"+o+\"));\",this.userCode=\"\\n      void main() {\\n        ivec4 coords = getOutputCoords();\\n        int b = coords.x;\\n        int r = coords.y;\\n        int c = coords.z;\\n        int d = coords.w;\\n\\n        bool hasNextCol = d < \"+this.outputShape[3]+\";\\n        bool hasNextRow = c < \"+this.outputShape[2]+\";\\n\\n        vec4 sum = vec4(0.);\\n        vec4 xFragAtOutputCoords = getX(b, r, c, d);\\n\\n        vec4 xAtOutputCoords = vec4(\\n          getChannel(xFragAtOutputCoords, vec2(c, d)),\\n          hasNextCol ?\\n            getChannel(xFragAtOutputCoords, vec2(c, d + 1)) : 0.0,\\n          hasNextRow ?\\n            getChannel(xFragAtOutputCoords , vec2(c + 1, d)) : 0.0,\\n          (hasNextRow && hasNextCol) ?\\n            getChannel(xFragAtOutputCoords, vec2(c + 1, d + 1)) : 0.0\\n        );\\n\\n        int firstChannel = d - \"+i+\";\\n        vec2 cache = vec2(0.);\\n        if(firstChannel >= 0){\\n          vec4 firstChannelFrag = getX(b, r, c, firstChannel);\\n          cache.x = getChannel(firstChannelFrag, vec2(c, firstChannel));\\n            if(hasNextRow){\\n              cache.y = getChannel(firstChannelFrag, vec2(c + 1, firstChannel));\\n            }\\n        }\\n\\n        ivec2 depth = ivec2(d, d + 1);\\n        for (int j = - \"+i+\"; j <= \"+i+\"; j++) {\\n          ivec2 idx = depth + j;\\n          bvec2 aboveLowerBound = greaterThanEqual(idx, ivec2(0));\\n          bvec2 belowUpperBound = lessThanEqual(idx, ivec2(\"+s+\"));\\n\\n          bool depthInRange = aboveLowerBound.x && belowUpperBound.x;\\n          bool depthPlusOneInRange = aboveLowerBound.y && belowUpperBound.y;\\n\\n          if(depthInRange || depthPlusOneInRange){\\n            vec4 z = vec4(0.);\\n            vec4 xFragAtCurrentDepth;\\n            z.xz = cache.xy;\\n            if(depthPlusOneInRange && hasNextCol){\\n              xFragAtCurrentDepth = idx.y != d ?\\n                getX(b, r, c, idx.y) : xFragAtOutputCoords;\\n              z.y = getChannel(xFragAtCurrentDepth, vec2(c, idx.y));\\n              if(hasNextRow){\\n                z.w = getChannel(xFragAtCurrentDepth, vec2(c + 1, idx.y));\\n              }\\n            }\\n            cache.xy = z.yw;\\n            sum += z * z;\\n          }\\n        }\\n        vec4 result = xAtOutputCoords * \"+a+\";\\n        setOutput(result);\\n      }\\n    \"},Ns=function(t){this.variableNames=[\"dy\",\"maxPos\"],this.outputShape=t.inShape;var e=t.strideHeight,n=t.strideWidth,r=t.dilationHeight,o=t.effectiveFilterHeight,a=t.effectiveFilterWidth,i=o-1-t.padInfo.top,s=a-1-t.padInfo.left,u=o*a-1;this.userCode=\"\\n      const ivec2 pads = ivec2(\"+i+\", \"+s+\");\\n\\n      void main() {\\n        ivec4 coords = getOutputCoords();\\n        int b = coords[0];\\n        int d = coords[3];\\n\\n        ivec2 dyRCCorner = coords.yz - pads;\\n        int dyRCorner = dyRCCorner.x;\\n        int dyCCorner = dyRCCorner.y;\\n\\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\\n        // ? = to be determined. : = across all values in that axis.\\n        float dotProd = 0.0;\\n        for (int wR = 0; wR < \"+o+\";\\n          wR += \"+r+\") {\\n          float dyR = float(dyRCorner + wR) / \"+e+\".0;\\n\\n          if (dyR < 0.0 || dyR >= \"+t.outHeight+\".0 || fract(dyR) > 0.0) {\\n            continue;\\n          }\\n          int idyR = int(dyR);\\n\\n          for (int wC = 0; wC < \"+a+\"; wC++) {\\n            float dyC = float(dyCCorner + wC) / \"+n+\".0;\\n\\n            if (dyC < 0.0 || dyC >= \"+t.outWidth+\".0 ||\\n                fract(dyC) > 0.0) {\\n              continue;\\n            }\\n            int idyC = int(dyC);\\n\\n            float dyValue = getDy(b, idyR, idyC, d);\\n            int maxPosValue = \"+u+\" - int(getMaxPos(b, idyR, idyC, d));\\n\\n            // Get the current value, check it against the value from the\\n            // position matrix.\\n            int curPosValue = wR * \"+a+\" + wC;\\n            float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\\n\\n            dotProd += dyValue * mask;\\n          }\\n        }\\n        setOutput(dotProd);\\n      }\\n    \"},Fs=function(t){this.variableNames=[\"dy\",\"maxPos\"],this.outputShape=t.inShape;var e=t.strideDepth,n=t.strideHeight,r=t.strideWidth,o=t.dilationDepth,a=t.dilationHeight,i=t.dilationWidth,s=t.effectiveFilterDepth,u=t.effectiveFilterHeight,c=t.effectiveFilterWidth,l=s-1-t.padInfo.front,h=u-1-t.padInfo.top,f=c-1-t.padInfo.left,d=s*u*c-1;this.userCode=\"\\n      const ivec3 pads = ivec3(\"+l+\", \"+h+\", \"+f+\");\\n\\n      void main() {\\n        ivec5 coords = getOutputCoords();\\n        int batch = coords.x;\\n        int ch = coords.u;\\n\\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\\n        int dyDCorner = dyCorner.x;\\n        int dyRCorner = dyCorner.y;\\n        int dyCCorner = dyCorner.z;\\n\\n        // Convolve dy(?, ?, ?, ch) with pos mask(:, :, :, d) to get\\n        // dx(xD, xR, xC, ch).\\n        // ? = to be determined. : = across all values in that axis.\\n        float dotProd = 0.0;\\n\\n        for (int wD = 0; wD < \"+s+\";\\n           wD += \"+o+\") {\\n          float dyD = float(dyDCorner + wD) / \"+e+\".0;\\n\\n          if (dyD < 0.0 || dyD >= \"+t.outDepth+\".0 || fract(dyD) > 0.0) {\\n            continue;\\n          }\\n          int idyD = int(dyD);\\n\\n          for (int wR = 0; wR < \"+u+\";\\n              wR += \"+a+\") {\\n            float dyR = float(dyRCorner + wR) / \"+n+\".0;\\n\\n            if (dyR < 0.0 || dyR >= \"+t.outHeight+\".0 ||\\n                fract(dyR) > 0.0) {\\n              continue;\\n            }\\n            int idyR = int(dyR);\\n\\n            for (int wC = 0; wC < \"+c+\";\\n                wC += \"+i+\") {\\n              float dyC = float(dyCCorner + wC) / \"+r+\".0;\\n\\n              if (dyC < 0.0 || dyC >= \"+t.outWidth+\".0 ||\\n                  fract(dyC) > 0.0) {\\n                continue;\\n              }\\n              int idyC = int(dyC);\\n\\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\\n              int maxPosValue = \"+d+\" -\\n                  int(getMaxPos(batch, idyD, idyR, idyC, ch));\\n\\n              // Get the current value, check it against the value from the\\n              // position matrix.\\n              int curPosValue =\\n                  wD * \"+u+\" * \"+c+\" +\\n                  wR * \"+c+\" + wC;\\n              float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\\n\\n              dotProd += dyValue * mask;\\n            }\\n          }\\n        }\\n        setOutput(dotProd);\\n      }\\n    \"},_s=function(t,e,n,r,o,a,i){void 0===n&&(n=!1),void 0===r&&(r=!1),void 0===o&&(o=!1),void 0===a&&(a=null),void 0===i&&(i=!1),this.variableNames=[\"matrixA\",\"matrixB\"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e;var s=n?t[1]:t[2],u=Math.ceil(s/2),c=n?\"i * 2, rc.y\":\"rc.y, i * 2\",l=r?\"rc.z, i * 2\":\"i * 2, rc.z\",h=n?[\"a.xxyy\",\"a.zzww\"]:[\"a.xxzz\",\"a.yyww\"],f=r?[\"b.xzxz\",\"b.ywyw\"]:[\"b.xyxy\",\"b.zwzw\"],d=\"\",p=\"\";a&&(d=i?\"vec4 activation(vec4 a) {\\n          vec4 b = getPreluActivationWeightsAtOutCoords();\\n          \"+a+\"\\n        }\":\"vec4 activation(vec4 x) {\\n          \"+a+\"\\n        }\",p=\"result = activation(result);\");var v=o?\"result += getBiasAtOutCoords();\":\"\";o&&this.variableNames.push(\"bias\"),i&&this.variableNames.push(\"preluActivationWeights\"),this.userCode=\"\\n      \"+d+\"\\n\\n      const float sharedDimension = \"+u+\".0;\\n\\n      vec4 dot2x2ARowBCol(ivec3 rc) {\\n        vec4 result = vec4(0);\\n        for (int i = 0; i < \"+u+\"; i++) {\\n          vec4 a = getMatrixA(rc.x, \"+c+\");\\n          vec4 b = getMatrixB(rc.x, \"+l+\");\\n\\n          // These swizzled products need to be separately added.\\n          // See: https://github.com/tensorflow/tfjs/issues/1735\\n          result += (\"+h[0]+\" * \"+f[0]+\");\\n          result += (\"+h[1]+\" * \"+f[1]+\");\\n        }\\n        return result;\\n      }\\n\\n      void main() {\\n        ivec3 rc = getOutputCoords();\\n        vec4 result = dot2x2ARowBCol(rc);\\n\\n        \"+v+\"\\n\\n        \"+p+\"\\n\\n        setOutput(result);\\n      }\\n    \"},Os=function(){function t(t,e,n){this.variableNames=[\"probs\"],this.outputShape=[t,n],this.userCode=\"\\n      uniform float seed;\\n\\n      void main() {\\n        ivec2 coords = getOutputCoords();\\n        int batch = coords[0];\\n\\n        float r = random(seed);\\n        float cdf = 0.0;\\n\\n        for (int i = 0; i < \"+(e-1)+\"; i++) {\\n          cdf += getProbs(batch, i);\\n\\n          if (r < cdf) {\\n            setOutput(float(i));\\n            return;\\n          }\\n        }\\n\\n        // If no other event happened, last event happened.\\n        setOutput(float(\"+(e-1)+\"));\\n      }\\n    \"}return t.prototype.getCustomSetupFunc=function(t){var e=this;return function(n,r){null==e.seedLoc&&(e.seedLoc=n.getUniformLocation(r,\"seed\")),n.gl.uniform1f(e.seedLoc,t)}},t}(),Ms=function(t,e,n,r){this.variableNames=[\"indices\"],this.outputShape=[t,e],this.userCode=\"\\n      void main() {\\n        ivec2 coords = getOutputCoords();\\n        int index = round(getIndices(coords.x));\\n        setOutput(mix(float(\"+r+\"), float(\"+n+\"),\\n                      float(index == coords.y)));\\n      }\\n    \"},Bs=function(t){this.variableNames=[\"A\"],this.packedInputs=!1,this.packedOutput=!0,this.outputShape=t;var e=t.length;if(0===e)this.userCode=\"\\n        void main() {\\n          setOutput(vec4(getA(), 0., 0., 0.));\\n        }\\n      \";else{var n=Xa(\"rc\",e),r=ui(e),o=function(t,e,n){if(1===t)return\"rc > \"+e[0];for(var r=\"\",o=t-2;o<t;o++)r+=n[o]+\" >= \"+e[o],o<t-1&&(r+=\"||\");return r}(e,t,n),a=function(t,e,n,r){if(1===t)return\"\";var o=r.slice(-2);return\"\\n    int r = \"+o[0]+\";\\n    int c = \"+o[1]+\";\\n    int rp1 = r + 1;\\n    int cp1 = c + 1;\\n\\n    bool cEdge = cp1 >= \"+e+\";\\n    bool rEdge = rp1 >= \"+n+\";\\n  \"}(e,t[t.length-1],t[t.length-2],n),i=function(t,e){var n=t.length,r=function(t,e){for(var n=[],r=0;r<=1;r++)for(var o=0;o<=1;o++){for(var a=(0===r?\"r\":\"rp1\")+\", \"+(0===o?\"c\":\"cp1\"),i=2;i<t;i++)a=e[e.length-1-i]+\",\"+a;n.push(a)}return n}(n,e);return 1===n?\"getA(rc),\\n            rc + 1 >= \"+t[0]+\" ? 0. : getA(rc + 1),\\n            0, 0\":\"getA(\"+r[0]+\"),\\n          cEdge ? 0. : getA(\"+r[1]+\"),\\n          rEdge ? 0. : getA(\"+r[2]+\"),\\n          rEdge || cEdge ? 0. : getA(\"+r[3]+\")\"}(t,n);this.userCode=\"\\n        void main() {\\n          \"+r+\" rc = getOutputCoords();\\n\\n          if(\"+o+\") {\\n            setOutput(vec4(0));\\n          } else {\\n            \"+a+\"\\n\\n            setOutput(vec4(\"+i+\"));\\n          }\\n        }\\n      \"}};var Ps=function(t,e,n){this.variableNames=[\"x\"],this.outputShape=e.map((function(e,n){return e[0]+t[n]+e[1]}));var r=t.length,o=ui(r),a=e.map((function(t){return t[0]})).join(\",\"),i=e.map((function(e,n){return e[0]+t[n]})).join(\",\"),s=[\"coords[0]\",\"coords[1]\",\"coords[2]\",\"coords[3]\"].slice(0,r);this.userCode=1!==r?\"\\n      \"+o+\" start = \"+o+\"(\"+a+\");\\n      \"+o+\" end = \"+o+\"(\"+i+\");\\n\\n      void main() {\\n        \"+o+\" outC = getOutputCoords();\\n        if (any(lessThan(outC, start)) || any(greaterThanEqual(outC, end))) {\\n          setOutput(float(\"+n+\"));\\n        } else {\\n          \"+o+\" coords = outC - start;\\n          setOutput(getX(\"+s+\"));\\n        }\\n      }\\n    \":\"\\n        int start = \"+a+\";\\n        int end = \"+i+\";\\n\\n        void main() {\\n          int outC = getOutputCoords();\\n          if (outC < start || outC >= end) {\\n            setOutput(float(\"+n+\"));\\n          } else {\\n            setOutput(getX(outC - start));\\n          }\\n        }\\n      \"},Ls=function(t,e,n){this.variableNames=[\"x\"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e.map((function(e,n){return e[0]+t[n]+e[1]}));for(var r=t.length,o=ui(r),a=e.map((function(t){return t[0]})).join(\",\"),i=e.map((function(e,n){return e[0]+t[n]})).join(\",\"),s=Xa(\"rc\",r),u=Xa(\"source\",r),c=s[r-1]+\" < \"+this.outputShape[r-1],l=1===r?\"source\":\"vec2(\"+u.slice(-2).join()+\")\",h=[o+\" rc = outputLoc;\",s[r-1]+\" += 1;\\n       if(\"+c+\") {\\n      \",1===r?\"\":\"}\\n       rc = outputLoc;\\n       \"+s[r-2]+\" += 1;\\n       if(\"+s[r-2]+\" < \"+this.outputShape[r-2]+\") {\",1===r?\"\":\"  \"+s[r-1]+\" += 1;\\n         if(\"+c+\") {\"],f=1===r?\"rc < start || rc >= end\":\"any(lessThan(rc, start)) || any(greaterThanEqual(rc, end))\",d=\"\",p=0,v=1===r?2:4;p<v;p++)d+=\"\\n        \"+h[p]+\"\\n        if (\"+f+\") {\\n          result[\"+p+\"] = float(\"+n+\");\\n        } else {\\n          \"+o+\" source = rc - start;\\n          result[\"+p+\"] = getChannel(getX(\"+u.join()+\"), \"+l+\");\\n        }\\n      \";d+=1===r?\"} \":\"}}\",this.userCode=\"\\n      const \"+o+\" start = \"+o+\"(\"+a+\");\\n      const \"+o+\" end = \"+o+\"(\"+i+\");\\n\\n      void main() {\\n        \"+o+\" outputLoc = getOutputCoords();\\n        vec4 result = vec4(0.);\\n        \"+d+\"\\n        setOutput(result);\\n      }\\n    \"},Ws=function(t,e,n,r,o){if(void 0===r&&(r=!1),void 0===o&&(o=!1),this.variableNames=[\"x\"],\"avg\"===e&&n)throw new Error(\"Cannot compute positions for average pool.\");var a=t.filterWidth,i=t.strideHeight,s=t.strideWidth,u=t.dilationHeight,c=t.dilationWidth,l=t.effectiveFilterHeight,h=t.effectiveFilterWidth,f=t.padInfo.top,d=t.padInfo.left;this.outputShape=t.outShape;var p=\"avg\"===e,v=\"((batch  * \"+t.inHeight+\" + xR) * \"+t.inWidth+\" + xC) * \"+t.inChannels+\" + d\",g=\"(xR * \"+t.inWidth+\" + xC) * \"+t.inChannels+\" + d\",m=\"0.0\";if(p||(m=\"-1.0 / 1e-20\"),n)this.userCode=\"\\n        const ivec2 strides = ivec2(\"+i+\", \"+s+\");\\n        const ivec2 pads = ivec2(\"+f+\", \"+d+\");\\n\\n        void main() {\\n          ivec4 coords = getOutputCoords();\\n          int batch = coords[0];\\n          int d = coords[3];\\n\\n          ivec2 xRCCorner = coords.yz * strides - pads;\\n          int xRCorner = xRCCorner.x;\\n          int xCCorner = xRCCorner.y;\\n\\n          // max/min x(?, ?, d) to get y(yR, yC, d).\\n          // ? = to be determined\\n          float minMaxValue = 0.0;\\n          float minMaxValueFound = 0.0;\\n          int minMaxPosition = 0;\\n          float avgValue = 0.0;\\n\\n          for (int wR = 0; wR < \"+l+\";\\n              wR += \"+u+\") {\\n            int xR = xRCorner + wR;\\n\\n            if (xR < 0 || xR >= \"+t.inHeight+\") {\\n              continue;\\n            }\\n\\n            for (int wC = 0; wC < \"+h+\";\\n                wC += \"+c+\") {\\n              int xC = xCCorner + wC;\\n\\n              if (xC < 0 || xC >= \"+t.inWidth+\") {\\n                continue;\\n              }\\n\\n              float value = getX(batch, xR, xC, d);\\n\\n              // If a min / max value has already been found, use it. If not,\\n              // use the current value.\\n              float currMinMaxValue = mix(\\n                  value, minMaxValue, minMaxValueFound);\\n              if (value >= currMinMaxValue) {\\n                minMaxValue = value;\\n                minMaxValueFound = 1.0;\\n                minMaxPosition = \"+(r?o?v:g:\"wR * \"+h+\" + wC\")+\";\\n              }\\n            }\\n          }\\n          setOutput(float(minMaxPosition));\\n        }\\n      \";else{var y=e+\"(\"+e+\"(\"+e+\"(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])\";\"avg\"===e&&(y=\"avgValue / count\");var x=4*Math.floor(a/4),b=a%4,w=\"\\n      if (\"+p+\") {\\n        avgValue += dot(values, ones);\\n      } else {\\n        minMaxValue = max(values, minMaxValue);\\n      }\\n    \";this.userCode=\"\\n      const ivec2 strides = ivec2(\"+i+\", \"+s+\");\\n      const ivec2 pads = ivec2(\"+f+\", \"+d+\");\\n      const float initializationValue = \"+m+\";\\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\\n\\n      float count = 0.0;\\n\\n      float getValue(int batch, int xR, int xC, int d) {\\n        if (xC < 0 || xC >= \"+t.inWidth+\") {\\n          return initializationValue;\\n        }\\n        count += 1.0;\\n        return getX(batch, xR, xC, d);\\n      }\\n\\n      void main() {\\n        ivec4 coords = getOutputCoords();\\n        int batch = coords[0];\\n        int d = coords[3];\\n\\n        ivec2 xRCCorner = coords.yz * strides - pads;\\n        int xRCorner = xRCCorner.x;\\n        int xCCorner = xRCCorner.y;\\n\\n        // max/min x(?, ?, d) to get y(yR, yC, d).\\n        // ? = to be determined\\n        vec4 minMaxValue = vec4(\"+m+\");\\n        float avgValue = 0.0;\\n        count = 0.0;\\n\\n        for (int wR = 0; wR < \"+l+\";\\n            wR += \"+u+\") {\\n          int xR = xRCorner + wR;\\n\\n          if (xR < 0 || xR >= \"+t.inHeight+\") {\\n            continue;\\n          }\\n\\n          for (int wC = 0; wC < \"+x+\"; wC += 4) {\\n            int xC = xCCorner + wC * \"+c+\";\\n\\n            vec4 values = vec4(\\n              getValue(batch, xR, xC, d),\\n              getValue(batch, xR, xC + \"+c+\", d),\\n              getValue(batch, xR, xC + 2 * \"+c+\", d),\\n              getValue(batch, xR, xC + 3 * \"+c+\", d)\\n            );\\n\\n            \"+w+\"\\n          }\\n\\n          int xC = xCCorner + \"+x+\";\\n          if (\"+(1===b)+\") {\\n            vec4 values = vec4(\\n              getValue(batch, xR, xC, d),\\n              initializationValue,\\n              initializationValue,\\n              initializationValue\\n            );\\n\\n            \"+w+\"\\n          } else if (\"+(2===b)+\") {\\n            vec4 values = vec4(\\n              getValue(batch, xR, xC, d),\\n              getValue(batch, xR, xC + \"+c+\", d),\\n              initializationValue,\\n              initializationValue\\n            );\\n\\n            \"+w+\"\\n          } else if (\"+(3===b)+\") {\\n            vec4 values = vec4(\\n              getValue(batch, xR, xC, d),\\n              getValue(batch, xR, xC + \"+c+\", d),\\n              getValue(batch, xR, xC + 2 * \"+c+\", d),\\n              initializationValue\\n            );\\n\\n            \"+w+\"\\n          }\\n        }\\n        setOutput(\"+y+\");\\n      }\\n    \"}},Us=function(t,e,n,r,o){if(void 0===r&&(r=!1),void 0===o&&(o=!1),this.variableNames=[\"x\"],\"avg\"===e&&n)throw new Error(\"Cannot compute positions for average pool.\");var a=t.filterWidth,i=t.strideDepth,s=t.strideHeight,u=t.strideWidth,c=t.dilationDepth,l=t.dilationHeight,h=t.dilationWidth,f=t.effectiveFilterDepth,d=t.effectiveFilterHeight,p=t.effectiveFilterWidth,v=t.padInfo.front,g=t.padInfo.top,m=t.padInfo.left;this.outputShape=t.outShape;var y=\"avg\"===e,x=\"0.0\";if(y||(x=\"-1.0 / 1e-20\"),n)this.userCode=\"\\n        const ivec3 strides =\\n            ivec3(\"+i+\", \"+s+\", \"+u+\");\\n        const ivec3 pads = ivec3(\"+v+\", \"+g+\", \"+m+\");\\n\\n        void main() {\\n          ivec5 coords = getOutputCoords();\\n          int batch = coords.x;\\n          int ch = coords.u;\\n\\n          ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\\n          int xDCorner = xCorner.x;\\n          int xRCorner = xCorner.y;\\n          int xCCorner = xCorner.z;\\n\\n          // max/min x(?, ?, ?, ch) to get y(yD, yR, yC, ch).\\n          // ? = to be determined\\n          float minMaxValue = 0.0;\\n          float minMaxValueFound = 0.0;\\n          int minMaxPosition = 0;\\n\\n          for (int wD = 0; wD < \"+f+\";\\n              wD += \"+c+\") {\\n            int xD = xDCorner + wD;\\n\\n            if (xD < 0 || xD >= \"+t.inDepth+\") {\\n              continue;\\n            }\\n\\n            for (int wR = 0; wR < \"+d+\";\\n                wR += \"+l+\") {\\n              int xR = xRCorner + wR;\\n\\n              if (xR < 0 || xR >= \"+t.inHeight+\") {\\n                continue;\\n              }\\n\\n              for (int wC = 0; wC < \"+p+\";\\n                  wC += \"+h+\") {\\n                int xC = xCCorner + wC;\\n\\n                if (xC < 0 || xC >= \"+t.inWidth+\") {\\n                  continue;\\n                }\\n\\n                float value = getX(batch, xD, xR, xC, ch);\\n\\n                // If a min / max value has already been found, use it. If not,\\n                // use the current value.\\n                float currMinMaxValue = mix(\\n                    value, minMaxValue, minMaxValueFound);\\n                if (value >= currMinMaxValue) {\\n                  minMaxValue = value;\\n                  minMaxValueFound = 1.0;\\n                  minMaxPosition = \"+(r?o?\"(((batch * \"+t.inDepth+\" + xD) * \"+t.inHeight+\" + xR) * \"+t.inWidth+\" + xC) * \"+t.inChannels+\" + ch\":\"((xD * \"+t.inHeight+\" + xR) * \"+t.inWidth+\" + xC) * \"+t.inChannels+\" + ch\":\"wD * \"+d+\" * \"+p+\" +\\n                      wR * \"+p+\" + wC\")+\";\\n                }\\n              }\\n            }\\n          }\\n          setOutput(float(minMaxPosition));\\n        }\\n      \";else{var b=e+\"(\"+e+\"(\"+e+\"(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])\";\"avg\"===e&&(b=\"avgValue / count\");var w=4*Math.floor(a/4),C=a%4,E=\"\\n      if (\"+y+\") {\\n        avgValue += dot(values, ones);\\n      } else {\\n        minMaxValue = max(values, minMaxValue);\\n      }\\n    \";this.userCode=\"\\n      const ivec3 strides =\\n        ivec3(\"+i+\", \"+s+\", \"+u+\");\\n      const ivec3 pads = ivec3(\"+v+\", \"+g+\", \"+m+\");\\n      const float initializationValue = \"+x+\";\\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\\n\\n      float count = 0.0;\\n\\n      float getValue(int batch, int xD, int xR, int xC, int ch) {\\n        if (xC < 0 || xC >= \"+t.inWidth+\") {\\n          return initializationValue;\\n        }\\n        count += 1.0;\\n        return getX(batch, xD, xR, xC, ch);\\n      }\\n\\n      void main() {\\n        ivec5 coords = getOutputCoords();\\n        int batch = coords.x;\\n        int ch = coords.u;\\n\\n        ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\\n        int xDCorner = xCorner.x;\\n        int xRCorner = xCorner.y;\\n        int xCCorner = xCorner.z;\\n\\n        // max/min x(?, ?, ?, d) to get y(yD, yR, yC, ch).\\n        // ? = to be determined\\n        vec4 minMaxValue = vec4(\"+x+\");\\n        float avgValue = 0.0;\\n        count = 0.0;\\n\\n        for (int wD = 0; wD < \"+f+\";\\n            wD += \"+c+\") {\\n          int xD = xDCorner + wD;\\n\\n          if (xD < 0 || xD >= \"+t.inDepth+\") {\\n            continue;\\n          }\\n\\n          for (int wR = 0; wR < \"+d+\";\\n            wR += \"+l+\") {\\n            int xR = xRCorner + wR;\\n\\n            if (xR < 0 || xR >= \"+t.inHeight+\") {\\n              continue;\\n            }\\n\\n            for (int wC = 0; wC < \"+w+\"; wC += 4) {\\n              int xC = xCCorner + wC * \"+h+\";\\n\\n              vec4 values = vec4(\\n                getValue(batch, xD, xR, xC, ch),\\n                getValue(batch, xD, xR, xC + \"+h+\", ch),\\n                getValue(batch, xD, xR, xC + 2 * \"+h+\", ch),\\n                getValue(batch, xD, xR, xC + 3 * \"+h+\", ch)\\n              );\\n\\n              \"+E+\"\\n            }\\n\\n            int xC = xCCorner + \"+w+\";\\n            if (\"+(1===C)+\") {\\n              vec4 values = vec4(\\n                getValue(batch, xD, xR, xC, ch),\\n                initializationValue,\\n                initializationValue,\\n                initializationValue\\n              );\\n\\n              \"+E+\"\\n            } else if (\"+(2===C)+\") {\\n              vec4 values = vec4(\\n                getValue(batch, xD, xR, xC, ch),\\n                getValue(batch, xD, xR, xC + \"+h+\", ch),\\n                initializationValue,\\n                initializationValue\\n              );\\n\\n              \"+E+\"\\n            } else if (\"+(3===C)+\") {\\n              vec4 values = vec4(\\n                getValue(batch, xD, xR, xC, ch),\\n                getValue(batch, xD, xR, xC + \"+h+\", ch),\\n                getValue(batch, xD, xR, xC + 2 * \"+h+\", ch),\\n                initializationValue\\n              );\\n\\n              \"+E+\"\\n            }\\n          }\\n          setOutput(\"+b+\");\\n        }\\n      }\\n    \"}},Vs=function(t,e){this.variableNames=[\"x\"];var n=t.windowSize,r=t.batchSize,o=t.inSize,a=Math.ceil(o/n);this.outputShape=[r,a];var i=\"0.0\",s=\"\";\"prod\"===e?i=\"1.0\":\"min\"===e?(i=\"1.0 / 1e-20\",s=\"min\"):\"max\"===e&&(i=\"-1.0 / 1e-20\",s=\"max\");var u=e+\"(\"+e+\"(\"+e+\"(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])\";\"sum\"===e?u=\"sumValue\":\"prod\"===e?u=\"prodValue\":\"all\"===e?u=\"allValue\":\"any\"===e&&(u=\"anyValue\");var c=4*Math.floor(n/4),l=n%4,h=\"\\n      if (\"+(\"sum\"===e)+\") {\\n        sumValue += dot(values, ones);\\n      } else if (\"+(\"prod\"===e)+\") {\\n        vec2 tmp = vec2(values[0], values[1]) * vec2(values[2], values[3]);\\n        prodValue *= tmp[0] * tmp[1];\\n      } else {\\n        minMaxValue = \"+s+\"(values, minMaxValue);\\n      }\\n    \",f=\"vec4\";\"all\"===e?(i=\"1.0\",h=\"\\n        bool reducedAllValue = all(values);\\n        float floatedReducedAllValue = float(reducedAllValue);\\n        allValue = float(allValue >= 1.0 && floatedReducedAllValue >= 1.0);\\n      \",f=\"bvec4\"):\"any\"===e&&(i=\"0.0\",h=\"\\n        bool reducedAnyValue = any(values);\\n        float floatedReducedAnyValue = float(reducedAnyValue);\\n        anyValue = float(anyValue >= 1.0 || floatedReducedAnyValue >= 1.0);\\n      \",f=\"bvec4\");var d=\"\";o%n>0&&(d=\"\\n        if (inIdx < 0 || inIdx >= \"+o+\") {\\n          return initializationValue;\\n        }\\n      \"),this.userCode=\"\\n      const float initializationValue = \"+i+\";\\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\\n\\n      float getValue(int batch, int inIdx) {\\n        \"+d+\"\\n        return getX(batch, inIdx);\\n      }\\n\\n      void main() {\\n        ivec2 coords = getOutputCoords();\\n        int batch = coords[0];\\n        int outIdx = coords[1];\\n        int inOffset = outIdx * \"+n+\";\\n\\n        vec4 minMaxValue = vec4(\"+i+\");\\n        float prodValue = 1.0;\\n        float sumValue = 0.0;\\n        float allValue = 1.0;\\n        float anyValue = 0.0;\\n\\n        for (int i = 0; i < \"+c+\"; i += 4) {\\n          int inIdx = inOffset + i;\\n          \"+f+\" values = \"+f+\"(\\n            getValue(batch, inIdx),\\n            getValue(batch, inIdx + 1),\\n            getValue(batch, inIdx + 2),\\n            getValue(batch, inIdx + 3)\\n          );\\n\\n          \"+h+\"\\n        }\\n\\n        int inIdx = inOffset + \"+c+\";\\n        if (\"+(1===l)+\") {\\n          \"+f+\" values = \"+f+\"(\\n            getValue(batch, inIdx),\\n            initializationValue,\\n            initializationValue,\\n            initializationValue\\n          );\\n\\n          \"+h+\"\\n        } else if (\"+(2===l)+\") {\\n          \"+f+\" values = \"+f+\"(\\n            getValue(batch, inIdx),\\n            getValue(batch, inIdx + 1),\\n            initializationValue,\\n            initializationValue\\n          );\\n\\n          \"+h+\"\\n        } else if (\"+(3===l)+\") {\\n          \"+f+\" values = \"+f+\"(\\n            getValue(batch, inIdx),\\n            getValue(batch, inIdx + 1),\\n            getValue(batch, inIdx + 2),\\n            initializationValue\\n          );\\n\\n          \"+h+\"\\n        }\\n        setOutput(\"+u+\");\\n      }\\n    \"},zs=function(t,e){this.variableNames=[\"A\"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t;for(var n=\"\",r=0;r<4;r++){var o=\"thisRC = rc;\";r%2==1&&(o+=\"thisRC.z += 1;\"),r>1&&(o+=\"thisRC.y += 1;\"),n+=\"\\n        \"+o+\"\\n        \"+(r>0?\"if(thisRC.y < rows && thisRC.z < cols){\":\"\")+\"\\n          int flatIndex = getFlatIndex(thisRC);\\n\\n          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flatIndex);\\n          vec2 inputRCInnerDims = vec2(float(inputRC.y),float(inputRC.z));\\n\\n          result[\"+r+\"] =\\n            getChannel(getA(inputRC.x, inputRC.y, inputRC.z), inputRCInnerDims);\\n        \"+(r>0?\"}\":\"\")+\"\\n      \"}this.userCode=\"\\n      \\n    ivec3 inputCoordsFromReshapedOutCoords(int index) {\\n      \"+$a([\"r\",\"c\",\"d\"],e)+\"\\n      return ivec3(r, c, d);\\n    }\\n  \\n      \"+Qa(t)+\"\\n\\n      void main() {\\n        ivec3 rc = getOutputCoords();\\n\\n        vec4 result = vec4(0.);\\n\\n        ivec3 thisRC;\\n        int rows = \"+t[1]+\";\\n        int cols = \"+t[2]+\";\\n\\n        \"+n+\"\\n\\n        setOutput(result);\\n      }\\n    \"};var Gs=function(t,e,n){this.variableNames=[\"dy\"],this.outputShape=[],this.outputShape=e.shape;var r=e.shape,o=r[1],a=r[2],i=t.shape,s=i[1],u=i[2],c=[n&&s>1?o-1:o,n&&u>1?a-1:a],l=[n&&s>1?s-1:s,n&&u>1?u-1:u],h=c[0]/l[0],f=c[1]/l[1],d=1/h,p=1/f,v=2*Math.ceil(d)+2,g=2*Math.ceil(p)+2;this.userCode=\"\\n      void main() {\\n        ivec4 coords = getOutputCoords();\\n        int b = coords[0];\\n        int d = coords[3];\\n        int r = coords[1];\\n        int c = coords[2];\\n\\n        float accumulator = 0.0;\\n\\n        const float heightScale = float(\"+h+\");\\n        const float widthScale = float(\"+f+\");\\n\\n        const float invHeightScale = float(\"+d+\");\\n        const float invWidthScale = float(\"+p+\");\\n\\n        const int winHeight = int(\"+v+\");\\n        const int winWidth = int(\"+g+\");\\n\\n        // Compute bounds for where in dy we will look\\n        float startRLerp = floor(float(r) * invHeightScale);\\n        int startDyR = int(startRLerp - float(winHeight / 2));\\n\\n        float startCLerp = floor(float(c) * invWidthScale);\\n        int startDyC = int(startCLerp - float(winWidth / 2));\\n\\n        // Loop over dy\\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\\n          int dyR = dyROffset + startDyR;\\n\\n          // Guard against the window exceeding the bounds of dy\\n          if (dyR < 0 || dyR >= \"+s+\") {\\n            continue;\\n          }\\n\\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\\n            int dyC = dyCOffset + startDyC;\\n\\n            // Guard against the window exceeding the bounds of dy\\n            if (dyC < 0 || dyC >= \"+u+\") {\\n              continue;\\n            }\\n\\n            float dxR = float(dyR) * heightScale;\\n            int topDxRIndex = int(floor(dxR));\\n            int bottomDxRIndex = int(min(ceil(dxR), \"+(o-1)+\".0));\\n            float dxRLerp = dxR - float(topDxRIndex);\\n            float inverseDxRLerp = 1.0 - dxRLerp;\\n\\n            float dxC = float(dyC) * widthScale;\\n            int leftDxCIndex = int(floor(dxC));\\n            int rightDxCIndex = int(min(ceil(dxC), \"+(a-1)+\".0));\\n            float dxCLerp = dxC - float(leftDxCIndex);\\n            float inverseDxCLerp = 1.0 - dxCLerp;\\n\\n            if (r == topDxRIndex && c == leftDxCIndex) {\\n              // topLeft\\n              accumulator +=\\n                getDy(b, dyR, dyC, d) * inverseDxRLerp * inverseDxCLerp;\\n            }\\n\\n            if (r == topDxRIndex && c == rightDxCIndex) {\\n              // topRight\\n              accumulator += getDy(b, dyR, dyC, d) * inverseDxRLerp * dxCLerp;\\n            }\\n\\n            if (r == bottomDxRIndex && c == leftDxCIndex) {\\n              // bottomLeft\\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * inverseDxCLerp;\\n            }\\n\\n            if (r == bottomDxRIndex && c == rightDxCIndex) {\\n              // bottomRight\\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * dxCLerp;\\n            }\\n          }\\n        }\\n        // End loop over dy\\n\\n        setOutput(accumulator);\\n      }\\n    \"},Hs=function(t,e,n,r){this.variableNames=[\"A\"],this.outputShape=[];var o=t[0],a=t[1],i=t[2],s=t[3];this.outputShape=[o,e,n,s];var u=[r&&e>1?a-1:a,r&&n>1?i-1:i],c=[r&&e>1?e-1:e,r&&n>1?n-1:n];this.userCode=\"\\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\\n          \"+u[0]/c[0]+\",\\n          \"+u[1]/c[1]+\");\\n      const vec2 inputShapeRC = vec2(\"+a+\".0, \"+i+\".0);\\n\\n      void main() {\\n        ivec4 coords = getOutputCoords();\\n        int b = coords[0];\\n        int d = coords[3];\\n        ivec2 yRC = coords.yz;\\n\\n        // Fractional source index.\\n        vec2 sourceFracIndexRC = vec2(yRC) * effectiveInputOverOutputRatioRC;\\n\\n        // Compute the four integer indices.\\n        ivec2 sourceFloorRC = ivec2(sourceFracIndexRC);\\n        ivec2 sourceCeilRC = ivec2(\\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\\n\\n        float topLeft = getA(b, sourceFloorRC.x, sourceFloorRC.y, d);\\n        float bottomLeft = getA(b, sourceCeilRC.x, sourceFloorRC.y, d);\\n        float topRight = getA(b, sourceFloorRC.x, sourceCeilRC.y, d);\\n        float bottomRight = getA(b, sourceCeilRC.x, sourceCeilRC.y, d);\\n\\n        vec2 fracRC = sourceFracIndexRC - vec2(sourceFloorRC);\\n\\n        float top = topLeft + (topRight - topLeft) * fracRC.y;\\n        float bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;\\n        float newValue = top + (bottom - top) * fracRC.x;\\n\\n        setOutput(newValue);\\n      }\\n    \"},qs=function(t,e,n,r){this.variableNames=[\"A\"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[];var o=t[0],a=t[1],i=t[2],s=t[3];this.outputShape=[o,e,n,s];var u=[r&&e>1?a-1:a,r&&n>1?i-1:i],c=[r&&e>1?e-1:e,r&&n>1?n-1:n];this.userCode=\"\\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\\n          \"+u[0]/c[0]+\",\\n          \"+u[1]/c[1]+\",\\n          \"+u[1]/c[1]+\");\\n      const vec3 inputShapeRC = vec3(\"+a+\".0, \"+i+\".0,\\n                                     \"+i+\".0);\\n\\n      float getAValue(int b, int r, int c, int d) {\\n        return getChannel(getA(b, r, c, d), vec2(c, d));\\n      }\\n\\n      void main() {\\n        ivec4 coords = getOutputCoords();\\n        int b = coords[0];\\n        int d = coords[3];\\n        // Calculate values for next column in yRC.z.\\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\\n\\n        // Fractional source index.\\n        vec3 sourceFracIndexRC = vec3(yRC) * effectiveInputOverOutputRatioRC;\\n\\n        // Compute the four integer indices.\\n        ivec3 sourceFloorRC = ivec3(sourceFracIndexRC);\\n        ivec3 sourceCeilRC = ivec3(\\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\\n\\n        // Should we calculate next column and row elements in 2x2 packed cell.\\n        bool hasNextCol = d < \"+(s-1)+\";\\n        bool hasNextRow = coords.z < \"+(n-1)+\";\\n\\n        // In parallel, construct four corners for all four components in\\n        // packed 2x2 cell.\\n        vec4 topLeft = vec4(\\n          getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d),\\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d + 1)\\n                     : 0.0,\\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d)\\n                     : 0.0,\\n          (hasNextRow && hasNextCol) ?\\n            getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d + 1) : 0.0);\\n\\n        vec4 bottomLeft = vec4(\\n          getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d),\\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d + 1)\\n                     : 0.0,\\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d)\\n                     : 0.0,\\n          (hasNextRow && hasNextCol) ?\\n            getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d + 1) : 0.0);\\n\\n        vec4 topRight = vec4(\\n          getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d),\\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d + 1)\\n                     : 0.0,\\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d)\\n                     : 0.0,\\n          (hasNextRow && hasNextCol) ?\\n            getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d + 1) : 0.0);\\n\\n        vec4 bottomRight = vec4(\\n          getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d),\\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d + 1)\\n                     : 0.0,\\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d)\\n                     : 0.0,\\n          (hasNextRow && hasNextCol) ?\\n            getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d + 1) : 0.0);\\n\\n        vec3 fracRC = sourceFracIndexRC - vec3(sourceFloorRC);\\n\\n        vec4 top = mix(topLeft, topRight, fracRC.yyzz);\\n        vec4 bottom = mix(bottomLeft, bottomRight, fracRC.yyzz);\\n        vec4 newValue = mix(top, bottom, fracRC.x);\\n\\n        setOutput(newValue);\\n      }\\n    \"},Ks=function(t,e,n){this.variableNames=[\"dy\"],this.outputShape=[],this.outputShape=e.shape;var r=e.shape,o=r[1],a=r[2],i=t.shape,s=i[1],u=i[2],c=[n&&s>1?o-1:o,n&&u>1?a-1:a],l=[n&&s>1?s-1:s,n&&u>1?u-1:u],h=c[0]/l[0],f=c[1]/l[1],d=1/h,p=1/f,v=2*Math.ceil(d)+2,g=2*Math.ceil(p)+2;this.userCode=\"\\n      void main() {\\n        ivec4 coords = getOutputCoords();\\n        int b = coords[0];\\n        int d = coords[3];\\n        int r = coords[1];\\n        int c = coords[2];\\n\\n        float accumulator = 0.0;\\n\\n        const float heightScale = float(\"+h+\");\\n        const float widthScale = float(\"+f+\");\\n\\n        const float invHeightScale = float(\"+d+\");\\n        const float invWidthScale = float(\"+p+\");\\n\\n        const int winHeight = int(\"+v+\");\\n        const int winWidth = int(\"+g+\");\\n\\n        // Compute bounds for where in dy we will look\\n        float startRLerp = floor(float(r) * invHeightScale);\\n        int startDyR = int(floor(startRLerp - float(winHeight / 2)));\\n\\n        float startCLerp = floor(float(c) * invWidthScale);\\n        int startDyC = int(floor(startCLerp - float(winWidth / 2)));\\n\\n        // Loop over dy\\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\\n          int dyR = dyROffset + startDyR;\\n\\n          // Guard against the window exceeding the bounds of dy\\n          if (dyR < 0 || dyR >= \"+s+\") {\\n            continue;\\n          }\\n\\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\\n            int dyC = dyCOffset + startDyC;\\n\\n            // Guard against the window exceeding the bounds of dy\\n            if (dyC < 0 || dyC >= \"+u+\") {\\n              continue;\\n            }\\n\\n            float sourceFracRow =\\n              float(\"+c[0]+\") *\\n                (float(dyR) / float(\"+l[0]+\"));\\n\\n            float sourceFracCol =\\n                float(\"+c[1]+\") *\\n                  (float(dyC) / float(\"+l[1]+\"));\\n\\n            int sourceNearestRow = int(min(\\n                float(int(\"+o+\") - 1),\\n                \"+n+\" ? float(round(sourceFracRow)) :\\n                                  float(floor(sourceFracRow))));\\n\\n            int sourceNearestCol = int(min(\\n                float(int(\"+a+\") - 1),\\n                \"+n+\" ? float(round(sourceFracCol)) :\\n                                  float(floor(sourceFracCol))));\\n\\n            if (r == sourceNearestRow && c == sourceNearestCol) {\\n              accumulator += getDy(b, dyR, dyC, d);\\n            }\\n          }\\n        }\\n        // End loop over dy\\n\\n        setOutput(accumulator);\\n      }\\n    \"},js=function(t,e,n,r){this.variableNames=[\"A\"],this.outputShape=[];var o=t[0],a=t[1],i=t[2],s=t[3];this.outputShape=[o,e,n,s];var u=[r&&e>1?a-1:a,r&&n>1?i-1:i],c=[r&&e>1?e-1:e,r&&n>1?n-1:n],l=r?\"0.5\":\"0.0\";this.userCode=\"\\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\\n          \"+u[0]/c[0]+\",\\n          \"+u[1]/c[1]+\");\\n      const vec2 inputShapeRC = vec2(\"+a+\".0, \"+i+\".0);\\n\\n      void main() {\\n        ivec4 coords = getOutputCoords();\\n        int b = coords[0];\\n        int d = coords[3];\\n        ivec2 yRC = coords.yz;\\n\\n        // Fractional source index.\\n        vec2 sourceFracIndexRC = vec2(yRC) * effectiveInputOverOutputRatioRC;\\n\\n        // Compute the coordinators of nearest neighbor point.\\n        ivec2 sourceNearestRC = ivec2(\\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + \"+l+\")));\\n\\n        float newValue = getA(b, sourceNearestRC.x, sourceNearestRC.y, d);\\n\\n        setOutput(newValue);\\n      }\\n    \"},Xs=function(t,e){this.variableNames=[\"x\"];var n=t.length;if(n>4)throw new Error(\"WebGL backend: Reverse of rank-\"+n+\" tensor is not yet supported\");if(this.outputShape=t,1!==n){var r=t.map((function(n,r){return function(n){return-1!==e.indexOf(n)&&1!==t[n]?t[n]+\" - coords[\"+n+\"] - 1\":\"coords[\"+n+\"]\"}(r)})).join(\",\"),o=ui(n);this.userCode=\"\\n      void main() {\\n        \"+o+\" coords = getOutputCoords();\\n        setOutput(getX(\"+r+\"));\\n      }\\n    \"}else this.userCode=\"\\n        void main() {\\n          int coord = getOutputCoords();\\n          setOutput(getX(\"+t[0]+\" - coord - 1));\\n        }\\n      \"},Ys=function(t,e){this.variableNames=[\"x\"],this.packedInputs=!0,this.packedOutput=!0;var n=t.length;if(n>4)throw new Error(\"WebGL backend: Reverse of rank-\"+n+\" tensor is not yet supported\");this.outputShape=t;var r=Xa(\"rc\",n),o=r[n-1]+\" + 1 < \"+this.outputShape[n-1],a=r[n-2]+\" + 1 < \"+this.outputShape[n-2],i=ui(n);function s(n){var r=t.map((function(r,o){return function(n,r){return-1!==e.indexOf(n)&&1!==t[n]?t[n]+\" - \"+r[n]+\" - 1\":\"\"+r[n]}(o,n)}));return\"getChannel(getX(\"+r.join(\",\")+\"), vec2(\"+r.slice(-2).join(\",\")+\"))\"}this.userCode=1===n?\"\\n        void main(){\\n          int rc = getOutputCoords();\\n          vec4 result = vec4(0.);\\n          result.r = getChannel(getX(\"+t[0]+\" - rc - 1),\\n            \"+t[0]+\" - rc - 1);\\n          if(\"+o+\"){\\n              result.g = getChannel(getX(\"+t[0]+\" - (rc  + 1) - 1),\\n                \"+t[0]+\" - (rc  + 1) - 1);\\n          }\\n          setOutput(result);\\n        }\\n      \":\"\\n        void main() {\\n          \"+i+\" rc = getOutputCoords();\\n          vec4 result = vec4(0.);\\n          result.r = \"+function(t){return s(t)}(r.slice())+\";\\n          if(\"+o+\"){\\n            result.g = \"+function(t){return t[n-1]=\"(\"+t[n-1]+\" + 1)\",s(t)}(r.slice())+\";\\n          }\\n          if(\"+a+\") {\\n            result.b = \"+function(t){return t[n-2]=\"(\"+t[n-2]+\" + 1)\",s(t)}(r.slice())+\";\\n            if(\"+o+\") {\\n              result.a = \"+function(t){return t[n-1]=\"(\"+t[n-1]+\" + 1)\",t[n-2]=\"(\"+t[n-2]+\" + 1)\",s(t)}(r.slice())+\";\\n            }\\n          }\\n          setOutput(result);\\n        }\\n    \"},$s=function(t,e,n,r,o,a,i){void 0===i&&(i=!0),this.variableNames=[\"updates\",\"indices\",\"defaultValue\"],this.outputShape=a;var s=ui(o.length),u=ui(a.length),c=\"\";1===n?c=\"i\":2===n&&(c=\"i, j\");var l=\"getIndices(\"+c+\")\",h=\"\";1===r?h=\"i\":2===r&&(h=\"i, coords[1]\");var f=\"getUpdates(\"+h+\")\",d=e>1?\"strides[j]\":\"strides\";this.userCode=\"\\n        \"+s+\" strides = \"+s+\"(\"+o+\");\\n\\n        void main() {\\n          \"+u+\" coords = getOutputCoords();\\n          float sum = 0.0;\\n          bool found = false;\\n          for (int i = 0; i < \"+t+\"; i++) {\\n            int flattenedIndex = 0;\\n            for (int j = 0; j < \"+e+\"; j++) {\\n              int index = round(\"+l+\");\\n              flattenedIndex += index * \"+d+\";\\n            }\\n            if (flattenedIndex == coords[0]) {\\n              sum += \"+f+\";\\n              found = true;\\n            }\\n          }\\n          setOutput(mix(getDefaultValue(), sum, float(found)));\\n        }\\n      \"},Qs=function(t,e){this.variableNames=[\"x\",\"segmentIds\"];var n=t.windowSize,r=t.batchSize,o=t.inSize,a=t.numSegments,i=a*Math.ceil(o/n);this.outputShape=[r,i];var s=4*Math.floor(n/4),u=n%4,c=\"\\n        sumValue += dot(values, segFilter);\\n    \",l=\"\";o%n>0&&(l=\"\\n        if (inIdx < 0 || inIdx >= \"+o+\") {\\n          return initializationValue;\\n        }\\n      \");var h=\"\";o%n>0&&(h=\"\\n        if (inIdx < 0 || inIdx >= \"+o+\") {\\n          return -1.0;\\n        }\\n      \"),this.userCode=\"\\n      const float initializationValue = 0.0;\\n\\n      float getValue(int batch, int inIdx) {\\n        \"+l+\"\\n        return getX(batch, inIdx);\\n      }\\n\\n      float getSegmentIdAtIndex(int inIdx) {\\n        \"+h+\"\\n        return getSegmentIds(inIdx);\\n      }\\n\\n      void main() {\\n        ivec2 coords = getOutputCoords();\\n        int batch = coords[0];\\n        int outIdx = coords[1];\\n        int inOffset = int(floor(float(outIdx) / float(\\n          \"+a+\")) * float(\"+n+\"));\\n        int currentSeg = int(mod(float(outIdx), float(\"+a+\")));\\n\\n        float sumValue = 0.0;\\n\\n        for (int i = 0; i < \"+s+\"; i += 4) {\\n          int inIdx = inOffset + i;\\n          vec4 values = vec4(\\n            getValue(batch, inIdx),\\n            getValue(batch, inIdx + 1),\\n            getValue(batch, inIdx + 2),\\n            getValue(batch, inIdx + 3)\\n          );\\n\\n          vec4 segFilter = vec4(\\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\\n            int(getSegmentIdAtIndex(inIdx + 3)) == currentSeg ? 1 : 0\\n          );\\n\\n          \"+c+\"\\n        }\\n\\n        int inIdx = inOffset + \"+s+\";\\n        if (\"+(1===u)+\") {\\n          vec4 values = vec4(\\n            getValue(batch, inIdx),\\n            initializationValue,\\n            initializationValue,\\n            initializationValue\\n          );\\n\\n          int inIdxSeg = int(getSegmentIdAtIndex(inIdx));\\n\\n          vec4 segFilter = vec4(\\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\\n            0,\\n            0,\\n            0\\n          );\\n\\n          \"+c+\"\\n        } else if (\"+(2===u)+\") {\\n          vec4 values = vec4(\\n            getValue(batch, inIdx),\\n            getValue(batch, inIdx + 1),\\n            initializationValue,\\n            initializationValue\\n          );\\n\\n          vec4 segFilter = vec4(\\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\\n              0,\\n              0\\n          );\\n\\n          \"+c+\"\\n        } else if (\"+(3===u)+\") {\\n          vec4 values = vec4(\\n            getValue(batch, inIdx),\\n            getValue(batch, inIdx + 1),\\n            getValue(batch, inIdx + 2),\\n            initializationValue\\n          );\\n\\n          vec4 segFilter = vec4(\\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\\n            0\\n          );\\n\\n          \"+c+\"\\n        }\\n        setOutput(sumValue);\\n      }\\n    \"},Js=function(t,e,n){var r,o;if(this.variableNames=[\"c\",\"a\",\"b\"],this.outputShape=e,n>4)throw Error(\"Where for rank \"+n+\" is not yet supported\");if(1===n)o=\"resRC\",r=\"resRC\";else{for(var a=[\"resRC.x\",\"resRC.y\",\"resRC.z\",\"resRC.w\"],i=[],s=[],u=0;u<e.length;u++)s.push(\"\"+a[u]),u<t&&i.push(\"\"+a[u]);r=i.join(),o=s.join()}var c=ui(n);this.userCode=\"\\n      void main() {\\n        \"+c+\" resRC = getOutputCoords();\\n        float cVal = getC(\"+r+\");\\n        if (cVal >= 1.0) {\\n          setOutput(getA(\"+o+\"));\\n        } else {\\n          setOutput(getB(\"+o+\"));\\n        }\\n      }\\n    \"},Zs=function(){function t(t){this.variableNames=[\"source\"],this.outputShape=t,this.rank=t.length;var e,n=ui(this.rank),r=\"uniform int start[\"+this.rank+\"];\",o=function(t){if(1===t)return\"sourceLoc\";if(t<=6)return tu.slice(0,t).map((function(t){return\"sourceLoc.\"+t})).join(\",\");throw Error(\"Slicing for rank \"+t+\" is not yet supported\")}(this.rank);e=\"\\n        \"+n+\" sourceLoc;\\n        \"+n+\" coords = getOutputCoords();\\n        \"+t.map((function(t,e){return\"sourceLoc.\"+tu[e]+\" = start[\"+e+\"] + coords.\"+tu[e]+\";\"})).join(\"\\n\")+\"\\n      \",this.userCode=\"\\n      \"+r+\"\\n      void main() {\\n        \"+e+\"\\n        setOutput(getSource(\"+o+\"));\\n      }\\n    \"}return t.prototype.getCustomSetupFunc=function(t){var e=this;if(t.length!==this.rank)throw Error(\"The rank (\"+this.rank+\") of the program must match the length of start (\"+t.length+\")\");return function(n,r){null==e.startLoc&&(e.startLoc=n.getUniformLocationNoThrow(r,\"start\"),null==e.startLoc)||n.gl.uniform1iv(e.startLoc,t)}},t}(),tu=[\"x\",\"y\",\"z\",\"w\",\"u\",\"v\"];var eu=function(){function t(t){this.variableNames=[\"source\"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t,this.rank=t.length;var e=ui(this.rank),n=Xa(\"coords\",this.rank),r=Xa(\"sourceLoc\",this.rank),o=1===this.rank?\"sourceLoc\":\"vec2(\"+r.slice(-2).join()+\")\",a=\"getChannel(getSource(\"+r.join()+\"), \"+o+\")\",i=\"\\n      result.x = \"+a+\";\\n      if (++\"+n[this.rank-1]+\" < \"+t[this.rank-1]+\") {\\n        ++\"+r[this.rank-1]+\";\\n        result.y = \"+a+\";\\n        --\"+r[this.rank-1]+\";\\n      }\\n    \",s=1===this.rank?\"\":\"\\n      --\"+n[this.rank-1]+\";\\n      if (++\"+n[this.rank-2]+\" < \"+t[this.rank-2]+\") {\\n        ++\"+r[this.rank-2]+\";\\n        result.z = \"+a+\";\\n        if (++\"+n[this.rank-1]+\" < \"+t[this.rank-1]+\") {\\n          ++\"+r[this.rank-1]+\";\\n          result.w = \"+a+\";\\n        }\\n      }\\n    \",u=this.rank<=4?\"sourceLoc = coords +\\n            \"+e+\"(\"+t.map((function(t,e){return\"start[\"+e+\"]\"})).join()+\");\":t.map((function(t,e){return r[e]+\" = \"+n[e]+\" + start[\"+e+\"];\"})).join(\"\\n\");this.userCode=\"\\n      uniform int start[\"+this.rank+\"];\\n      void main() {\\n        \"+e+\" coords = getOutputCoords();\\n        \"+e+\" sourceLoc;\\n        \"+u+\"\\n        vec4 result = vec4(0.);\\n        \"+i+\"\\n        \"+s+\"\\n        setOutput(result);\\n      }\\n    \"}return t.prototype.getCustomSetupFunc=function(t){var e=this;if(t.length!==this.rank)throw Error(\"The rank (\"+this.rank+\") of the program must match the length of start (\"+t.length+\")\");return function(n,r){null==e.startLoc&&(e.startLoc=n.getUniformLocationNoThrow(r,\"start\"),null==e.startLoc)||n.gl.uniform1iv(e.startLoc,t)}},t}(),nu=function(t,e,n){this.variableNames=[\"x\"],this.outputShape=n;var r=n.length,o=ui(n.length),a=ui(n.length),i=\"\";if(1===r)i=\"coords * strides + begin\";else{var s=0;i=n.map((function(t,e){return s++,1===n.length?\"coords * strides[\"+e+\"] + begin[\"+e+\"]\":\"coords[\"+(s-1)+\"] * strides[\"+e+\"] + begin[\"+e+\"]\"})).join(\",\")}this.userCode=\"\\n      \"+o+\" begin = \"+o+\"(\"+t+\");\\n      \"+o+\" strides = \"+o+\"(\"+e+\");\\n\\n      void main() {\\n        \"+a+\" coords = getOutputCoords();\\n        setOutput(getX(\"+i+\"));\\n      }\\n    \"},ru=function(){function t(t){this.gpgpu=t,this.numUsedTextures=0,this.numFreeTextures=0,this.freeTextures={},this.logEnabled=!1,this.usedTextures={}}return t.prototype.acquireTexture=function(t,e,n){var r,o=ou(e,n),a=au(t,o,n);if(a in this.freeTextures||(this.freeTextures[a]=[]),a in this.usedTextures||(this.usedTextures[a]=[]),this.freeTextures[a].length>0){this.numFreeTextures--,this.numUsedTextures++,this.log();var i=this.freeTextures[a].shift();return this.usedTextures[a].push(i),i}return this.numUsedTextures++,this.log(),o===Gt.PACKED_2X2_FLOAT32?r=this.gpgpu.createPackedMatrixTexture(t[0],t[1]):o===Gt.PACKED_2X2_FLOAT16?r=this.gpgpu.createFloat16PackedMatrixTexture(t[0],t[1]):o===Gt.UNPACKED_FLOAT32?r=this.gpgpu.createFloat32MatrixTexture(t[0],t[1]):o===Gt.UNPACKED_FLOAT16?r=this.gpgpu.createFloat16MatrixTexture(t[0],t[1]):o===Gt.PACKED_4X1_UNSIGNED_BYTE&&(r=this.gpgpu.createUnsignedBytesMatrixTexture(t[0],t[1])),this.usedTextures[a].push(r),r},t.prototype.releaseTexture=function(t,e,n,r){if(null!=this.freeTextures){var o=au(e,ou(n,r),r);o in this.freeTextures||(this.freeTextures[o]=[]),this.freeTextures[o].push(t),this.numFreeTextures++,this.numUsedTextures--;var a=this.usedTextures[o],i=a.indexOf(t);if(i<0)throw new Error(\"Cannot release a texture that was never provided by this texture manager\");a.splice(i,1),this.log()}},t.prototype.log=function(){if(this.logEnabled){var t=this.numFreeTextures+this.numUsedTextures;console.log(\"Free/Used\",this.numFreeTextures+\" / \"+this.numUsedTextures,\"(\"+t+\")\")}},t.prototype.getNumUsedTextures=function(){return this.numUsedTextures},t.prototype.getNumFreeTextures=function(){return this.numFreeTextures},t.prototype.dispose=function(){var t=this;if(null!=this.freeTextures){for(var e in this.freeTextures)this.freeTextures[e].forEach((function(e){t.gpgpu.deleteMatrixTexture(e)}));for(var e in this.usedTextures)this.usedTextures[e].forEach((function(e){t.gpgpu.deleteMatrixTexture(e)}));this.freeTextures=null,this.usedTextures=null,this.numUsedTextures=0,this.numFreeTextures=0}},t}();function ou(t,e){if(t===zt.UPLOAD)return Gt.PACKED_2X2_FLOAT32;if(t===zt.RENDER||null==t)return function(t){return i().getBool(\"WEBGL_RENDER_FLOAT32_ENABLED\")?t?Gt.PACKED_2X2_FLOAT32:Gt.UNPACKED_FLOAT32:t?Gt.PACKED_2X2_FLOAT16:Gt.UNPACKED_FLOAT16}(e);if(t===zt.DOWNLOAD||t===zt.PIXELS)return Gt.PACKED_4X1_UNSIGNED_BYTE;throw new Error(\"Unknown logical texture type \"+t)}function au(t,e,n){return t[0]+\"_\"+t[1]+\"_\"+e+\"_\"+n}var iu=function(t,e){this.variableNames=[\"A\"];for(var n=new Array(t.length),r=0;r<n.length;r++)n[r]=t[r]*e[r];this.outputShape=n,this.rank=n.length;var o=ui(this.rank),a=function(t){var e=t.length;if(e>5)throw Error(\"Tile for rank \"+e+\" is not yet supported\");if(1===e)return\"imod(resRC, \"+t[0]+\")\";for(var n=[\"resRC.x\",\"resRC.y\",\"resRC.z\",\"resRC.w\",\"resRC.u\"],r=[],o=0;o<t.length;o++)r.push(\"imod(\"+n[o]+\", \"+t[o]+\")\");return r.join()}(t);this.userCode=\"\\n      void main() {\\n        \"+o+\" resRC = getOutputCoords();\\n        setOutput(getA(\"+a+\"));\\n      }\\n    \"};var su=1.7580993408473768,uu=1.0507009873554805,cu=function(t,e){this.variableNames=[\"A\"],this.outputShape=t,this.userCode=\"\\n      float unaryOperation(float x) {\\n        \"+e+\"\\n      }\\n\\n      void main() {\\n        float x = getAAtOutCoords();\\n        float y = unaryOperation(x);\\n\\n        setOutput(y);\\n      }\\n    \"},lu=\"if (isnan(x)) return x;\",hu=\"return x;\",fu=\"return abs(x);\",du=lu+\"\\n  return (x < 0.0) ? 0.0 : x;\\n\",pu=lu+\"\\n  return (x < 0.0) ? 0.0 : min(6.0, x);\\n\",vu=\"return (x >= 0.0) ? x : (exp(x) - 1.0);\",gu=\"\\n  // Stable and Attracting Fixed Point (0, 1) for Normalized Weights.\\n  // see: https://arxiv.org/abs/1706.02515\\n  float scaleAlpha = \"+su+\";\\n  float scale = \"+uu+\";\\n  return (x >= 0.0) ? scale * x : scaleAlpha * (exp(x) - 1.0);\\n\";var mu=\"return -x;\",yu=\"return ceil(x);\",xu=\"return floor(x);\",bu=\"return exp(x);\",wu=\"return exp(x) - 1.0;\",Cu=lu+\"\\n  return sin(x);\\n\",Eu=lu+\"\\n  return cos(x);\\n\",Ru=lu+\"\\n  if (abs(x) > 1.) {\\n    return NAN;\\n  }\\n  return asin(x);\\n\",Iu=lu+\"\\n  if (abs(x) > 1.) {\\n    return NAN;\\n  }\\n  return acos(x);\\n\",ku=lu+\"\\n  return atan(x);\\n\",Su=lu+\"return log(x + sqrt(x * x + 1.0));\",Au=lu+\"\\n  if (x < 1.0) return NAN;\\n  return log(x + sqrt(x * x - 1.0));\",Tu=lu+\"\\n  if ((x < -1.0) || (x > 1.0)) return NAN;\\n  return (log(1.0 + x) - log(1.0 - x)) / 2.0;\",Du=\"return x;\",Nu=\"return x;\",Fu=\"\\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\\n  bvec4 isNaN = isnan(x);\\n\\n  result.r = isNaN.r ? x.r : result.r;\\n  result.g = isNaN.g ? x.g : result.g;\\n  result.b = isNaN.b ? x.b : result.b;\\n  result.a = isNaN.a ? x.a : result.a;\\n\\n  return result;\\n\",_u=\"\\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\\n  bvec4 isNaN = isnan(x);\\n\\n  result.r = isNaN.r ? x.r : result.r;\\n  result.g = isNaN.g ? x.g : result.g;\\n  result.b = isNaN.b ? x.b : result.b;\\n  result.a = isNaN.a ? x.a : result.a;\\n\\n  return result;\\n\",Ou=\"\\n  vec4 result;\\n\\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\\n\\n  return result;\\n\",Mu=function(t,e){this.variableNames=[\"A\"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t,this.userCode=\"\\n      vec4 unaryOperation(vec4 x) {\\n        \"+e+\"\\n      }\\n\\n      void main() {\\n        vec4 x = getAAtOutCoords();\\n        vec4 y = unaryOperation(x);\\n\\n        setOutput(y);\\n      }\\n    \"},Bu=function(t){this.variableNames=[\"A\"],this.packedInputs=!0,this.packedOutput=!1,this.outputShape=t;var e=t.length,n=Xa(\"rc\",e),r=ui(e),o=function(t,e){if(1===t)return\"rc\";for(var n=\"\",r=0;r<t;r++)n+=e[r],r<t-1&&(n+=\",\");return n}(e,n),a=n.slice(-2),i=e<=1?\"rc\":\"vec2(\"+a.join(\",\")+\")\";this.userCode=\"\\n      void main() {\\n        \"+r+\" rc = getOutputCoords();\\n        vec4 packedInput = getA(\"+o+\");\\n\\n        setOutput(getChannel(packedInput, \"+i+\"));\\n      }\\n    \"},Pu={};function Lu(t,e){if(void 0===e&&(e=!1),\"linear\"===t)return e?Nu:hu;if(\"relu\"===t)return e?Fu:du;if(\"elu\"===t)return e?Ou:vu;if(\"relu6\"===t)return e?_u:pu;if(\"prelu\"===t)return e?ki:Ei;throw new Error(\"Activation \"+t+\" has not been implemented for the WebGL backend.\")}var Wu=600;var Uu=function(t){function o(e){var n,r=t.call(this)||this;if(r.pendingRead=new WeakMap,r.pendingDisposal=new WeakSet,r.dataRefCount=new WeakMap,r.numBytesInGPU=0,r.uploadWaitMs=0,r.downloadWaitMs=0,r.warnedAboutMemory=!1,r.pendingDeletes=0,r.disposed=!1,!i().getBool(\"HAS_WEBGL\"))throw new Error(\"WebGL is not supported on this device\");if(null==e){var o=jt(i().getNumber(\"WEBGL_VERSION\"));r.binaryCache=(n=i().getNumber(\"WEBGL_VERSION\"))in Pu?Pu[n]:(Pu[n]={},Pu[n]),r.gpgpu=new Is(o),r.canvas=o.canvas,r.gpgpuCreatedLocally=!0}else r.gpgpu=e,r.binaryCache={},r.gpgpuCreatedLocally=!1,r.canvas=e.gl.canvas;return r.textureManager=new ru(r.gpgpu),r.numMBBeforeWarning=null==i().global.screen?1024:i().global.screen.height*i().global.screen.width*window.devicePixelRatio*Wu/1024/1024,r.texData=new ca(r,Lt),r}return e(o,t),o.prototype.numDataIds=function(){return this.texData.numDataIds()+(this.cpuBackend?this.cpuBackend.numDataIds():0)-this.pendingDeletes},o.prototype.write=function(t,e,n){if(i().getBool(\"DEBUG\")&&this.checkNumericalProblems(t),\"complex64\"===n&&null!=t)throw new Error(\"Cannot write to a complex64 dtype. Please use tf.complex(real, imag).\");var r={};return this.texData.set(r,{shape:e,dtype:n,values:t,usage:zt.UPLOAD}),r},o.prototype.move=function(t,e,n,r){if(i().getBool(\"DEBUG\")&&this.checkNumericalProblems(e),\"complex64\"===r)throw new Error(\"Cannot write to a complex64 dtype. Please use tf.complex(real, imag).\");this.texData.set(t,{shape:n,dtype:r,values:e,usage:zt.UPLOAD})},o.prototype.readSync=function(t){var e=this.texData.get(t),n=e.values,r=e.dtype,o=e.complexTensors,a=e.slice,i=e.shape,s=e.isPacked;if(null!=a){var u=void 0;u=s?new Mu(i,Du):new cu(i,Du);var c=this.runWebGLProgram(u,[{dataId:t,shape:i,dtype:r}],r),l=this.readSync(c.dataId);return this.disposeData(c.dataId),l}if(null!=n)return this.convertAndCacheOnCPU(t);if(\"string\"===r)return n;var h,f,d=null!=this.activeTimers;(d&&(h=et()),\"complex64\"===r)?f=Aa(o.real.dataSync(),o.imag.dataSync()):f=this.getValuesFromTexture(t);return d&&(this.downloadWaitMs+=et()-h),this.convertAndCacheOnCPU(t,f)},o.prototype.read=function(t){return n(this,void 0,void 0,(function(){var e,n,o,a,s,u,c,l,h,f,d,p,v,g,m,y,x,b,w,C,E,R;return r(this,(function(r){switch(r.label){case 0:if(this.pendingRead.has(t))return e=this.pendingRead.get(t),[2,new Promise((function(t){return e.push(t)}))];if(n=this.texData.get(t),o=n.values,a=n.shape,s=n.slice,u=n.dtype,c=n.complexTensors,l=n.isPacked,null!=s)return h=void 0,h=l?new Mu(a,Du):new cu(a,Du),f=this.runWebGLProgram(h,[{dataId:t,shape:a,dtype:u}],u),d=this.read(f.dataId),this.disposeData(f.dataId),[2,d];if(null!=o)return[2,this.convertAndCacheOnCPU(t)];if(!i().getBool(\"WEBGL_DOWNLOAD_FLOAT_ENABLED\")&&2===i().getNumber(\"WEBGL_VERSION\"))throw new Error(\"tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and WEBGL_VERSION=2 not yet supported.\");return p=null,\"complex64\"!==u&&i().get(\"WEBGL_BUFFER_SUPPORTED\")&&(v=this.decode(t),g=this.texData.get(v.dataId),p=(R=this.gpgpu).createBufferFromTexture.apply(R,[g.texture].concat(Yt(a)))),this.pendingRead.set(t,[]),\"complex64\"===u?[3,2]:[4,this.gpgpu.createAndWaitForFence()];case 1:r.sent(),r.label=2;case 2:return\"complex64\"!==u?[3,4]:[4,Promise.all([c.real.data(),c.imag.data()])];case 3:return y=r.sent(),x=y[0],b=y[1],m=Aa(x,b),[3,5];case 4:null==p?m=this.getValuesFromTexture(t):(w=k(a),m=this.gpgpu.downloadFloat32MatrixFromBuffer(p,w)),r.label=5;case 5:return null!=v&&this.disposeData(v.dataId),C=this.convertAndCacheOnCPU(t,m),E=this.pendingRead.get(t),this.pendingRead.delete(t),E.forEach((function(t){return t(C)})),this.pendingDisposal.has(t)&&(this.pendingDisposal.delete(t),this.disposeData(t),this.pendingDeletes--),[2,C]}}))}))},o.prototype.checkNumericalProblems=function(t){if(null!=t)for(var e=0;e<t.length;e++){var n=t[e];if(!ee(n)){if(i().getBool(\"WEBGL_RENDER_FLOAT32_CAPABLE\"))throw Error(\"The value \"+n+\" cannot be represented with your current settings. Consider enabling float32 rendering: 'tf.env().set('WEBGL_RENDER_FLOAT32_ENABLED', true);'\");throw Error(\"The value \"+n+\" cannot be represented on this device.\")}}},o.prototype.getValuesFromTexture=function(t){var e,n=this.texData.get(t),r=n.shape,o=n.dtype,a=n.isPacked,s=k(r);if(i().getBool(\"WEBGL_DOWNLOAD_FLOAT_ENABLED\")){var u=this.decode(t),c=this.texData.get(u.dataId),l=(e=this.gpgpu).downloadMatrixFromPackedTexture.apply(e,[c.texture].concat(Yt(r))).subarray(0,s);return this.disposeData(u.dataId),l}var h=i().getBool(\"WEBGL_PACK\")&&!0===a,f=h?De(r):r,d=h?new Ji(f):new Qi(f),p=this.runWebGLProgram(d,[{shape:f,dtype:o,dataId:t}],\"float32\"),v=this.texData.get(p.dataId),g=this.gpgpu.downloadByteEncodedFloatMatrixFromOutputTexture(v.texture,v.texShape[0],v.texShape[1]).subarray(0,s);return this.disposeData(p.dataId),g},o.prototype.time=function(t){return n(this,void 0,void 0,(function(){var e,n,o,a,s,u,c;return r(this,(function(r){switch(r.label){case 0:return e=this.activeTimers,n=[],o=!1,null==this.programTimersStack?(this.programTimersStack=n,o=!0):this.activeTimers.push(n),this.activeTimers=n,t(),a=I(this.activeTimers.map((function(t){return t.query}))).filter((function(t){return null!=t})),s=I(this.activeTimers.map((function(t){return t.name}))).filter((function(t){return null!=t})),this.activeTimers=e,o&&(this.programTimersStack=null),u={uploadWaitMs:this.uploadWaitMs,downloadWaitMs:this.downloadWaitMs,kernelMs:null,wallMs:null},i().getNumber(\"WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE\")>0?[4,Promise.all(a)]:[3,2];case 1:return c=r.sent(),u.kernelMs=w(c),u.getExtraProfileInfo=function(){return c.map((function(t,e){return{name:s[e],ms:t}})).map((function(t){return t.name+\": \"+t.ms})).join(\", \")},[3,3];case 2:u.kernelMs={error:\"WebGL query timers are not supported in this environment.\"},r.label=3;case 3:return this.uploadWaitMs=0,this.downloadWaitMs=0,[2,u]}}))}))},o.prototype.memory=function(){return{unreliable:!1,numBytesInGPU:this.numBytesInGPU}},o.prototype.startTimer=function(){return i().getNumber(\"WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE\")>0?this.gpgpu.beginQuery():{startMs:et(),endMs:null}},o.prototype.endTimer=function(t){return i().getNumber(\"WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE\")>0?(this.gpgpu.endQuery(),t):(t.endMs=et(),t)},o.prototype.getQueryTime=function(t){return n(this,void 0,void 0,(function(){var e;return r(this,(function(n){return i().getNumber(\"WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE\")>0?[2,this.gpgpu.waitForQueryAndGetTime(t)]:[2,(e=t).endMs-e.startMs]}))}))},o.prototype.disposeData=function(t){if(!this.pendingDisposal.has(t)){if(this.pendingRead.has(t))return this.pendingDisposal.add(t),void this.pendingDeletes++;if(this.texData.has(t)){this.releaseGPUData(t);var e=this.texData.get(t).complexTensors;null!=e&&(e.real.dispose(),e.imag.dispose()),this.texData.delete(t)}}},o.prototype.releaseGPUData=function(t){var e=this.texData.get(t),n=e.texture,r=e.dtype,o=e.texShape,a=e.usage,i=e.isPacked,s=e.slice,u=s&&s.origDataId||t,c=this.dataRefCount.get(u);c>1?this.dataRefCount.set(u,c-1):(this.dataRefCount.delete(u),null!=n&&(this.numBytesInGPU-=this.computeBytes(o,r),this.textureManager.releaseTexture(n,o,a,i)));var l=this.texData.get(t);l.texture=null,l.texShape=null,l.isPacked=!1,l.slice=null},o.prototype.getTexture=function(t){return this.uploadToGPU(t),this.texData.get(t).texture},o.prototype.getDataInfo=function(t){return this.texData.get(t)},o.prototype.getCPUBackend=function(){return i().getBool(\"WEBGL_CPU_FORWARD\")?(null==this.cpuBackend&&(this.cpuBackend=Lt.findBackend(\"cpu\")),this.cpuBackend):null},o.prototype.shouldExecuteOnCPU=function(t,e){var n=this;return void 0===e&&(e=128),null!=this.getCPUBackend()&&t.every((function(t){return null==n.texData.get(t.dataId).texture&&k(t.shape)<e}))},o.prototype.getGPGPUContext=function(){return this.gpgpu},o.prototype.complex=function(t,e){var n=this.makeOutput(t.shape,\"complex64\");return this.texData.get(n.dataId).complexTensors={real:Lt.keep(t.clone()),imag:Lt.keep(e.clone())},n},o.prototype.real=function(t){return this.texData.get(t.dataId).complexTensors.real.clone()},o.prototype.imag=function(t){return this.texData.get(t.dataId).complexTensors.imag.clone()},o.prototype.slice=function(t,e,n){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.slice(t,e,n);if(0===k(n))return Fn([],n,t.dtype);var r=this.texData.get(t.dataId).isPacked,o=$o(t.shape,e,n);if(r||!o){var a=i().getBool(\"WEBGL_PACK_ARRAY_OPERATIONS\")?new eu(n):new Zs(n),s=a.getCustomSetupFunc(e);return this.compileAndRun(a,[t],null,s)}return this.uploadToGPU(t.dataId),this.shallowSlice(t,e,n)},o.prototype.shallowSlice=function(t,e,n){var r=this.texData.get(t.dataId),o=this.makeOutput(n,t.dtype),a=this.texData.get(o.dataId);Object.assign(a,r),a.shape=n,a.dtype=t.dtype;var i=Qo(e,t.strides);r.slice&&(i+=r.slice.flatOffset),a.slice={flatOffset:i,origDataId:r.slice&&r.slice.origDataId||t.dataId};var s=this.dataRefCount.get(a.slice.origDataId)||1;return this.dataRefCount.set(a.slice.origDataId,s+1),o},o.prototype.stridedSlice=function(t,e,n,r){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.stridedSlice(t,e,n,r);var o=jo(e,n,r);if(o.some((function(t){return 0===t})))return Fn([],o);var a=new nu(e,r,o);return this.compileAndRun(a,[t])},o.prototype.reverse=function(t,e){var n=i().getBool(\"WEBGL_PACK_ARRAY_OPERATIONS\")?new Ys(t.shape,e):new Xs(t.shape,e);return this.compileAndRun(n,[t])},o.prototype.concat=function(t,e){if(\"complex64\"===t[0].dtype){var n=t.map((function(t){return Dn(t)})),r=t.map((function(t){return Nn(t)}));return Tn(this.concat(n,e),this.concat(r,e))}if(this.shouldExecuteOnCPU(t))return this.cpuBackend.concat(t,e);if(1===t.length)return t[0];if(t.length>i().getNumber(\"WEBGL_MAX_TEXTURES_IN_SHADER\")){var o=Math.floor(t.length/2),a=this.concat(t.slice(0,o),e),s=this.concat(t.slice(o),e);return this.concat([a,s],e)}if(i().getBool(\"WEBGL_PACK_ARRAY_OPERATIONS\")&&t[0].rank>1){var u=new Fi(t.map((function(t){return t.shape})),e);return this.compileAndRun(u,t)}var c=Sn(t.map((function(t){return t.shape})),e),l=t.map((function(t){return t.as2D(-1,k(t.shape.slice(e)))})),h=new Ni(l.map((function(t){return t.shape})));return this.compileAndRun(h,l).reshape(c)},o.prototype.neg=function(t){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.neg(t);if(i().getBool(\"WEBGL_PACK_UNARY_OPERATIONS\"))return this.packedUnaryOp(t,mu,t.dtype);var e=new cu(t.shape,mu);return this.compileAndRun(e,[t])},o.prototype.batchMatMul=function(t,e,n,r){var o=n?t.shape[2]:t.shape[1],a=r?e.shape[1]:e.shape[2],i=n?t.shape[1]:t.shape[2],s=t.shape[0];if((1===o||1===a)&&i>1e3){n&&(t=ua(t,[0,2,1])),r&&(e=ua(e,[0,2,1]));var u=1===a?t:t.as3D(s,i,1),c=1===a?2:1,l=1===a?e.as3D(s,1,i):e;return this.multiply(u,l).sum(c,!0)}var h=Tt(t.dtype,e.dtype),f=new _s(t.shape,[s,o,a],n,r);return this.compileAndRun(f,[t,e],h)},o.prototype.fusedBatchMatMul=function(t){var e=t.a,n=t.b,r=t.transposeA,o=t.transposeB,a=t.bias,i=t.activation,s=t.preluActivationWeights,u=r?e.shape[2]:e.shape[1],c=o?n.shape[1]:n.shape[2],l=e.shape[0],h=Tt(e.dtype,n.dtype),f=null!=a,d=null!=s,p=i?Lu(i,!0):null,v=new _s(e.shape,[l,u,c],r,o,f,p,d),g=[e,n];return a&&g.push(a),s&&g.push(s),this.compileAndRun(v,g,h)},o.prototype.multiply=function(t,e){if(\"complex64\"===t.dtype){var n=this.texData.get(t.dataId),r=this.texData.get(e.dataId),o=new yi(gi,t.shape,e.shape),a=new yi(mi,t.shape,e.shape),s=[this.makeComplexComponentTensorInfo(t,n.complexTensors.real),this.makeComplexComponentTensorInfo(t,n.complexTensors.imag),this.makeComplexComponentTensorInfo(e,r.complexTensors.real),this.makeComplexComponentTensorInfo(e,r.complexTensors.imag)],u=this.compileAndRun(o,s),c=this.compileAndRun(a,s),l=this.complex(u,c);return u.dispose(),c.dispose(),l}if(this.shouldExecuteOnCPU([t,e]))return this.cpuBackend.multiply(t,e);if(i().getBool(\"WEBGL_PACK_BINARY_OPERATIONS\"))return this.packedBinaryOp(t,e,wi,t.dtype);var h=new Ri(wi,t.shape,e.shape);return this.compileAndRun(h,[t,e],t.dtype)},o.prototype.batchNormalization=function(t,e,n,r,o,a){var s=[t,e,n],u=null;null!=a&&(u=a.shape,s.push(a));var c=null;if(null!=o&&(c=o.shape,s.push(o)),i().getBool(\"WEBGL_PACK_NORMALIZATION\")){var l=new vi(t.shape,e.shape,n.shape,u,c,r);return this.compileAndRun(l,s)}var h=new pi(t.shape,e.shape,n.shape,u,c,r);return this.compileAndRun(h,s)},o.prototype.localResponseNormalization4D=function(t,e,n,r,o){var a=i().getBool(\"WEBGL_PACK_NORMALIZATION\")?new Ds(t.shape,e,n,r,o):new As(t.shape,e,n,r,o);return this.compileAndRun(a,[t])},o.prototype.LRNGrad=function(t,e,n,r,o,a,i){var s=new Ts(e.shape,r,o,a,i);return this.compileAndRun(s,[e,n,t])},o.prototype.tile=function(t,e){if(\"string\"===t.dtype){var n=this.readSync(t.dataId).map((function(t){return ot(t)}));return Va(er(t.shape,t.dtype,n),e)}var r=new iu(t.shape,e);return this.compileAndRun(r,[t])},o.prototype.pad=function(t,e,n){var r=i().getBool(\"WEBGL_PACK_ARRAY_OPERATIONS\")?new Ls(t.shape,e,n):new Ps(t.shape,e,n);return this.compileAndRun(r,[t])},o.prototype.gather=function(t,e,n){if(this.shouldExecuteOnCPU([t,e]))return this.cpuBackend.gather(t,e,n);var r=new as(t.shape,e.size,n);return this.compileAndRun(r,[t,e])},o.prototype.batchToSpaceND=function(t,e,n){C(t.rank<=4,(function(){return\"batchToSpaceND for rank > 4 with a WebGL backend not implemented yet\"}));var r=e.reduce((function(t,e){return t*e})),o=pr(t.shape,e,r),a=vr(o.length,e.length),i=gr(t.shape,e,r),s=mr(n,e.length),u=yr(i,n,e.length);return ua(t.reshape(o),a).reshape(i).slice(s,u)},o.prototype.spaceToBatchND=function(t,e,n){C(t.rank<=4,(function(){return\"spaceToBatchND for rank > 4 with a WebGL backend not implemented yet\"}));var r=e.reduce((function(t,e){return t*e})),o=[[0,0]];o.push.apply(o,n);for(var a=1+e.length;a<t.shape.length;++a)o.push([0,0]);var i=t.pad(o),s=pr(i.shape,e,r,!1),u=vr(s.length,e.length,!1),c=gr(i.shape,e,r,!1);return ua(i.reshape(s),u).reshape(c)},o.prototype.reduce=function(t,e,n){var r=t.shape[0],o=t.shape[1],a=Uo(o),i=new Vs({windowSize:a,inSize:o,batchSize:r},e),s=this.compileAndRun(i,[t],n);return 1===s.shape[1]?s:this.reduce(s,e,n)},o.prototype.argReduce=function(t,e,n){void 0===n&&(n=null);var r=t.shape[0],o=t.shape[1];null!=n&&(r=n.shape[0],o=n.shape[1]);var a=Uo(o),i=new Ka({windowSize:a,inSize:o,batchSize:r},e,null==n),s=[t];null!=n&&s.push(n);var u=this.compileAndRun(i,s,\"int32\");return 1===u.shape[1]?u:this.argReduce(t,e,u)},o.prototype.argReducePacked=function(t,e,n){void 0===n&&(n=null);var r=null!=n?n.shape:t.shape,o=Uo(r[r.length-1]),a=new hi(r,o,e,null==n),i=null==n?[t]:[t,n],s=this.compileAndRun(a,i,\"int32\");return s.rank===t.rank?this.argReducePacked(t,e,s):s},o.prototype.sum=function(t,e){Cn(\"sum\",e,t.rank);var n=bn(t.shape,e),r=n[0],o=k(n[1]),a=t.as2D(-1,o),i=Dt(t.dtype);return this.reduce(a,\"sum\",i).reshape(r)},o.prototype.prod=function(t,e){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.prod(t,e);var n=bn(t.shape,e),r=n[0],o=k(n[1]),a=t.as2D(-1,o),i=Dt(t.dtype);return this.reduce(a,\"prod\",i).reshape(r)},o.prototype.unsortedSegmentSum=function(t,e,n){var r=0,o=En([r],t.rank),a=t;null!=o&&(a=ua(t,o),r=In(1,t.rank)[0]);var i=function(t,e,n){for(var r=[],o=t.length,a=0;a<o;a++)a!==e?r.push(t[a]):r.push(n);return r}(a.shape,r,n),s=k([a.shape[r]]),u=a.as2D(-1,s),c=Dt(t.dtype),l=this.segOpCompute(u,\"unsortedSegmentSum\",e,c,n).reshape(i);return null!=o&&(l=ua(l,Rn(o))),l},o.prototype.segOpCompute=function(t,e,n,r,o){var a=t.shape[0],i=t.shape[1],s=function(t,e){var n,r=!1;for(t<=Wo?(n=t,r=!0):n=Y(t,Math.floor(Math.sqrt(t)));!r;)n>e||n===t?r=!0:n=Y(t,n+1);return n}(i,o),u=new Qs({windowSize:s,inSize:i,batchSize:a,numSegments:o},e),c=this.compileAndRun(u,[t,n],r);return c.shape[1]===o?c:(n=Kn(0,o).tile([i/s]),this.segOpCompute(c,e,n,r,o))},o.prototype.argMinMaxReduce=function(t,e,n){var r=[e];if(Cn(\"arg\"+n.charAt(0).toUpperCase()+n.slice(1),r,t.rank),!i().getBool(\"WEBGL_PACK_REDUCE\")||t.rank<=2){var o=bn(t.shape,r),a=o[0],s=k(o[1]),u=t.as2D(-1,s);return this.argReduce(u,n).reshape(a)}return this.argReducePacked(t,n)},o.prototype.argMin=function(t,e){return this.argMinMaxReduce(t,e,\"min\")},o.prototype.argMax=function(t,e){return this.argMinMaxReduce(t,e,\"max\")},o.prototype.cumsum=function(t,e,n,r){if(e!==t.rank-1)throw new Error(\"WebGL cumsum shader expects an inner-most axis=\"+(t.rank-1)+\" but got axis=\"+e);var o=new qi(t.shape,n,r);return this.compileAndRun(o,[t])},o.prototype.equal=function(t,e){if(i().getBool(\"WEBGL_PACK_BINARY_OPERATIONS\"))return this.packedBinaryOp(t,e,\"\\n  return vec4(equal(a, b));\\n\",\"bool\");var n=new Ri(\"return float(a == b);\",t.shape,e.shape);return this.compileAndRun(n,[t,e],\"bool\")},o.prototype.notEqual=function(t,e){if(i().getBool(\"WEBGL_PACK_BINARY_OPERATIONS\"))return this.packedBinaryOp(t,e,\"\\n  return vec4(notEqual(a, b));\\n\",\"bool\");var n=new Ri(\"return float(a != b);\",t.shape,e.shape);return this.compileAndRun(n,[t,e],\"bool\")},o.prototype.less=function(t,e){if(this.shouldExecuteOnCPU([t,e]))return this.cpuBackend.less(t,e);if(i().getBool(\"WEBGL_PACK_BINARY_OPERATIONS\"))return this.packedBinaryOp(t,e,\"\\n  return vec4(lessThan(a, b));\\n\",\"bool\");var n=new Ri(\"return float(a < b);\",t.shape,e.shape);return this.compileAndRun(n,[t,e],\"bool\")},o.prototype.lessEqual=function(t,e){if(i().getBool(\"WEBGL_PACK_BINARY_OPERATIONS\"))return this.packedBinaryOp(t,e,\"\\n  return vec4(lessThanEqual(a, b));\\n\",\"bool\");var n=new Ri(\"return float(a <= b);\",t.shape,e.shape);return this.compileAndRun(n,[t,e],\"bool\")},o.prototype.greater=function(t,e){if(this.shouldExecuteOnCPU([t,e]))return this.cpuBackend.greater(t,e);if(i().getBool(\"WEBGL_PACK_BINARY_OPERATIONS\"))return this.packedBinaryOp(t,e,\"\\n  return vec4(greaterThan(a, b));\\n\",\"bool\");var n=new Ri(\"return float(a > b);\",t.shape,e.shape);return this.compileAndRun(n,[t,e],\"bool\")},o.prototype.greaterEqual=function(t,e){if(i().getBool(\"WEBGL_PACK_BINARY_OPERATIONS\"))return this.packedBinaryOp(t,e,\"\\n  return vec4(greaterThanEqual(a, b));\\n\",\"bool\");var n=new Ri(\"return float(a >= b);\",t.shape,e.shape);return this.compileAndRun(n,[t,e],\"bool\")},o.prototype.logicalNot=function(t){var e=new cu(t.shape,\"return float(!(x >= 1.0));\");return this.compileAndRun(e,[t])},o.prototype.logicalAnd=function(t,e){if(i().getBool(\"WEBGL_PACK_BINARY_OPERATIONS\"))return this.packedBinaryOp(t,e,\"\\n  return vec4(\\n    vec4(greaterThanEqual(a, vec4(1.0))) *\\n    vec4(greaterThanEqual(b, vec4(1.0))));\\n\",\"bool\");var n=new Ri(\"return float(a >= 1.0 && b >= 1.0);\",t.shape,e.shape);return this.compileAndRun(n,[t,e],\"bool\")},o.prototype.logicalOr=function(t,e){if(i().getBool(\"WEBGL_PACK_BINARY_OPERATIONS\"))return this.packedBinaryOp(t,e,\"\\n  return min(\\n    vec4(greaterThanEqual(a, vec4(1.0))) +\\n    vec4(greaterThanEqual(b, vec4(1.0))),\\n    vec4(1.0));\\n\",\"bool\");var n=new Ri(\"return float(a >= 1.0 || b >= 1.0);\",t.shape,e.shape);return this.compileAndRun(n,[t,e],\"bool\")},o.prototype.select=function(t,e,n){var r=new Js(t.rank,e.shape,e.rank);return this.compileAndRun(r,[t,e,n],Tt(e.dtype,n.dtype))},o.prototype.where=function(t){dn(\"tf.where() in webgl locks the UI thread. Call tf.whereAsync() instead\");var e=t.dataSync();return Ga(t.shape,e)},o.prototype.topk=function(t,e,n){return za(t.dataSync(),t.shape,t.dtype,e)},o.prototype.min=function(t,e){Cn(\"min\",e,t.rank);var n=bn(t.shape,e),r=n[0],o=k(n[1]),a=t.as2D(-1,o);return this.reduce(a,\"min\",a.dtype).reshape(r)},o.prototype.minimum=function(t,e){if(this.shouldExecuteOnCPU([t,e]))return this.cpuBackend.minimum(t,e);var n=i().getBool(\"WEBGL_PACK_BINARY_OPERATIONS\")?new Si(\"\\n  vec4 result = vec4(min(a, b));\\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\\n  \\n  result.r = isNaN.r > 0. ? NAN : result.r;\\n  result.g = isNaN.g > 0. ? NAN : result.g;\\n  result.b = isNaN.b > 0. ? NAN : result.b;\\n  result.a = isNaN.a > 0. ? NAN : result.a;\\n\\n  return result;\\n\",t.shape,e.shape):new Ri(\"\\n  if (isnan(a)) return a;\\n  if (isnan(b)) return b;\\n\\n  return min(a, b);\\n\",t.shape,e.shape);return this.compileAndRun(n,[t,e])},o.prototype.mod=function(t,e){var n=i().getBool(\"WEBGL_PACK_BINARY_OPERATIONS\")?new Si(\"\\n  vec4 result = mod(a, b);\\n  vec4 isNaN = vec4(equal(b, vec4(0.0)));\\n  \\n  result.r = isNaN.r > 0. ? NAN : result.r;\\n  result.g = isNaN.g > 0. ? NAN : result.g;\\n  result.b = isNaN.b > 0. ? NAN : result.b;\\n  result.a = isNaN.a > 0. ? NAN : result.a;\\n\\n  return result;\\n\",t.shape,e.shape):new Ri(\"if (b == 0.0) return NAN;\\n  return mod(a, b);\",t.shape,e.shape);return this.compileAndRun(n,[t,e])},o.prototype.max=function(t,e){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.max(t,e);Cn(\"max\",e,t.rank);var n=bn(t.shape,e),r=n[0],o=k(n[1]),a=t.as2D(-1,o);return this.reduce(a,\"max\",a.dtype).reshape(r)},o.prototype.maximum=function(t,e){if(this.shouldExecuteOnCPU([t,e]))return this.cpuBackend.maximum(t,e);var n=i().getBool(\"WEBGL_PACK_BINARY_OPERATIONS\")?new Si(\"\\n  vec4 result = vec4(max(a, b));\\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\\n  \\n  result.r = isNaN.r > 0. ? NAN : result.r;\\n  result.g = isNaN.g > 0. ? NAN : result.g;\\n  result.b = isNaN.b > 0. ? NAN : result.b;\\n  result.a = isNaN.a > 0. ? NAN : result.a;\\n\\n  return result;\\n\",t.shape,e.shape):new Ri(\"\\n  if (isnan(a)) return a;\\n  if (isnan(b)) return b;\\n\\n  return max(a, b);\\n\",t.shape,e.shape);return this.compileAndRun(n,[t,e])},o.prototype.all=function(t,e){Cn(\"all\",e,t.rank);var n=bn(t.shape,e),r=n[0],o=k(n[1]),a=t.as2D(-1,o);return this.reduce(a,\"all\",a.dtype).reshape(r)},o.prototype.any=function(t,e){Cn(\"any\",e,t.rank);var n=bn(t.shape,e),r=n[0],o=k(n[1]),a=t.as2D(-1,o);return this.reduce(a,\"any\",a.dtype).reshape(r)},o.prototype.floorDiv=function(t,e){if(i().getBool(\"WEBGL_PACK_BINARY_OPERATIONS\"))return this.packedBinaryOp(t,e,\"\\n  ivec4 ia = round(a);\\n  ivec4 ib = round(b);\\n  bvec4 cond = notEqual(ib, ivec4(0));\\n  ivec4 result = ivec4(0);\\n  vec4 s = sign(a) * sign(b);\\n\\n  // Windows (D3D) wants guaranteed non-zero int division at compile-time.\\n  if (cond[0]) {\\n    result[0] = idiv(ia[0], ib[0], s[0]);\\n  }\\n  if (cond[1]) {\\n    result[1] = idiv(ia[1], ib[1], s[1]);\\n  }\\n  if (cond[2]) {\\n    result[2] = idiv(ia[2], ib[2], s[2]);\\n  }\\n  if (cond[3]) {\\n    result[3] = idiv(ia[3], ib[3], s[3]);\\n  }\\n  return vec4(result);\\n\",\"int32\");var n=new Ri(\"\\n  float s = sign(a) * sign(b);\\n  int ia = round(a);\\n  int ib = round(b);\\n  if (ib != 0) {\\n    // Windows (D3D) wants guaranteed non-zero int division at compile-time.\\n    return float(idiv(ia, ib, s));\\n  } else {\\n    return NAN;\\n  }\\n\",t.shape,e.shape);return this.compileAndRun(n,[t,e],\"int32\")},o.prototype.add=function(t,e){if(\"complex64\"===t.dtype&&\"complex64\"===e.dtype)return this.complexSeparableBinaryOp(t,e,xi);if(this.shouldExecuteOnCPU([t,e]))return this.cpuBackend.add(t,e);var n=Tt(t.dtype,e.dtype);if(i().getBool(\"WEBGL_PACK_BINARY_OPERATIONS\"))return this.packedBinaryOp(t,e,xi,n);var r=new Ri(xi,t.shape,e.shape);return this.compileAndRun(r,[t,e],n)},o.prototype.packedUnaryOp=function(t,e,n){var r=new Mu(t.shape,e);return this.compileAndRun(r,[t],n)},o.prototype.packedBinaryOp=function(t,e,n,r,o){void 0===o&&(o=!1);var a=new Si(n,t.shape,e.shape,o);return this.compileAndRun(a,[t,e],r)},o.prototype.complexSeparableBinaryOp=function(t,e,n){var r=this,o=this.texData.get(t.dataId),a=this.texData.get(e.dataId),i=[[o.complexTensors.real,a.complexTensors.real],[o.complexTensors.imag,a.complexTensors.imag]].map((function(o){var a=o[0],i=o[1],s=r.makeComplexComponentTensorInfo(t,a),u=r.makeComplexComponentTensorInfo(e,i),c=new Ri(n,t.shape,e.shape);return r.compileAndRun(c,[s,u],Tt(a.dtype,i.dtype))})),s=i[0],u=i[1],c=this.complex(s,u);return s.dispose(),u.dispose(),c},o.prototype.makeComplexComponentTensorInfo=function(t,e){return{dataId:e.dataId,dtype:e.dtype,shape:t.shape}},o.prototype.addN=function(t){if(1===t.length)return t[0];if(t.length>i().get(\"WEBGL_MAX_TEXTURES_IN_SHADER\")){var e=Math.floor(t.length/2),n=this.addN(t.slice(0,e)),r=this.addN(t.slice(e));return this.addN([n,r])}var o=t.map((function(t){return t.dtype})).reduce((function(t,e){return Tt(t,e)})),a=t.map((function(t){return t.shape})),s=i().getBool(\"WEBGL_PACK\")?new qa(t[0].shape,a):new Ha(t[0].shape,a);return this.compileAndRun(s,t,o)},o.prototype.subtract=function(t,e){if(\"complex64\"===t.dtype&&\"complex64\"===e.dtype)return this.complexSeparableBinaryOp(t,e,bi);if(this.shouldExecuteOnCPU([t,e]))return this.cpuBackend.subtract(t,e);var n=Tt(t.dtype,e.dtype);if(i().getBool(\"WEBGL_PACK_BINARY_OPERATIONS\"))return this.packedBinaryOp(t,e,bi,t.dtype);var r=new Ri(bi,t.shape,e.shape);return this.compileAndRun(r,[t,e],n)},o.prototype.pow=function(t,e){var n=i().getBool(\"WEBGL_PACK_BINARY_OPERATIONS\")?new Si(\"\\n  // isModRound1 has 1 for components with round(mod(b, 2.0)) == 1, 0 otherwise.\\n  vec4 isModRound1 = vec4(equal(round(mod(b, 2.0)), ivec4(1)));\\n  vec4 multiplier = sign(a) * isModRound1 + (vec4(1.0) - isModRound1);\\n  vec4 result = multiplier * pow(abs(a), b);\\n\\n  // Ensure that a^0 = 1, including 0^0 = 1 as this correspond to TF and JS\\n  bvec4 isExpZero = equal(b, vec4(0.0));\\n  result.r = isExpZero.r ? 1.0 : result.r;\\n  result.g = isExpZero.g ? 1.0 : result.g;\\n  result.b = isExpZero.b ? 1.0 : result.b;\\n  result.a = isExpZero.a ? 1.0 : result.a;\\n\\n  vec4 isNaN = vec4(lessThan(a, vec4(0.0))) * vec4(lessThan(floor(b), b));\\n  \\n  result.r = isNaN.r > 0. ? NAN : result.r;\\n  result.g = isNaN.g > 0. ? NAN : result.g;\\n  result.b = isNaN.b > 0. ? NAN : result.b;\\n  result.a = isNaN.a > 0. ? NAN : result.a;\\n\\n  return result;\\n\",t.shape,e.shape):new Ri(\"\\nif(a < 0.0 && floor(b) < b){\\n  return NAN;\\n}\\nif (b == 0.0) {\\n  return 1.0;\\n}\\nreturn (round(mod(b, 2.0)) != 1) ?\\n    pow(abs(a), b) : sign(a) * pow(abs(a), b);\\n\",t.shape,e.shape),r=Tt(t.dtype,e.dtype);return this.compileAndRun(n,[t,e],r)},o.prototype.ceil=function(t){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.ceil(t);if(i().getBool(\"WEBGL_PACK_UNARY_OPERATIONS\"))return this.packedUnaryOp(t,yu,t.dtype);var e=new cu(t.shape,yu);return this.compileAndRun(e,[t])},o.prototype.floor=function(t){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.floor(t);if(i().getBool(\"WEBGL_PACK_UNARY_OPERATIONS\"))return this.packedUnaryOp(t,xu,t.dtype);var e=new cu(t.shape,xu);return this.compileAndRun(e,[t])},o.prototype.sign=function(t){var e=new cu(t.shape,\"\\n  if (isnan(x)) { return 0.0; }\\n  return sign(x);\\n\");return this.compileAndRun(e,[t])},o.prototype.isNaN=function(t){var e=new cu(t.shape,\"return float(isnan(x));\");return this.compileAndRun(e,[t],\"bool\")},o.prototype.isInf=function(t){var e=new cu(t.shape,\"return float(isinf(x));\");return this.compileAndRun(e,[t],\"bool\")},o.prototype.isFinite=function(t){var e=new cu(t.shape,\"return float(!isnan(x) && !isinf(x));\");return this.compileAndRun(e,[t],\"bool\")},o.prototype.round=function(t){var e=new cu(t.shape,\"\\n  // OpenGL ES does not support round function.\\n  // The algorithm is based on banker's rounding.\\n  float base = floor(x);\\n  if ((x - base) < 0.5) {\\n    return floor(x);\\n  } else if ((x - base) > 0.5) {\\n    return ceil(x);\\n  } else {\\n    if (mod(base, 2.0) == 0.0) {\\n      return base;\\n    } else {\\n      return base + 1.0;\\n    }\\n  }\\n\");return this.compileAndRun(e,[t])},o.prototype.exp=function(t){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.exp(t);if(i().getBool(\"WEBGL_PACK_UNARY_OPERATIONS\"))return this.packedUnaryOp(t,bu,t.dtype);var e=new cu(t.shape,bu);return this.compileAndRun(e,[t])},o.prototype.expm1=function(t){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.expm1(t);if(i().getBool(\"WEBGL_PACK_UNARY_OPERATIONS\"))return this.packedUnaryOp(t,wu,t.dtype);var e=new cu(t.shape,wu);return this.compileAndRun(e,[t])},o.prototype.softmax=function(t,e){var n=O([e],t.shape),r=this.max(t,n),o=wn(r.shape,n),a=this.subtract(t,r.reshape(o)),i=this.exp(a),s=this.sum(i,n).reshape(o);return Bo(i,s)},o.prototype.log=function(t){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.log(t);if(i().getBool(\"WEBGL_PACK_UNARY_OPERATIONS\"))return this.packedUnaryOp(t,\"\\n  vec4 result = log(x);\\n  vec4 isNaN = vec4(lessThan(x, vec4(0.0)));\\n  result.r = isNaN.r == 1.0 ? NAN : result.r;\\n  result.g = isNaN.g == 1.0 ? NAN : result.g;\\n  result.b = isNaN.b == 1.0 ? NAN : result.b;\\n  result.a = isNaN.a == 1.0 ? NAN : result.a;\\n\\n  return result;\\n\",t.dtype);var e=new cu(t.shape,\"if (x < 0.0) return NAN;\\n  return log(x);\");return this.compileAndRun(e,[t])},o.prototype.log1p=function(t){var e=new cu(t.shape,\"return log(1.0 + x);\");return this.compileAndRun(e,[t])},o.prototype.sqrt=function(t){var e=new cu(t.shape,\"return sqrt(x);\");return this.compileAndRun(e,[t])},o.prototype.rsqrt=function(t){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.rsqrt(t);var e=new cu(t.shape,\"return inversesqrt(x);\");return this.compileAndRun(e,[t])},o.prototype.reciprocal=function(t){var e=new cu(t.shape,\"return 1.0 / x;\");return this.compileAndRun(e,[t])},o.prototype.relu=function(t){var e;return e=i().getBool(\"WEBGL_PACK\")?new Mu(t.shape,Fu):new cu(t.shape,du),this.compileAndRun(e,[t])},o.prototype.relu6=function(t){var e;return e=i().getBool(\"WEBGL_PACK\")?new Mu(t.shape,_u):new cu(t.shape,pu),this.compileAndRun(e,[t])},o.prototype.prelu=function(t,e){var n=i().getBool(\"WEBGL_PACK_BINARY_OPERATIONS\")?new Si(ki,t.shape,e.shape):new Ri(Ei,t.shape,e.shape);return this.compileAndRun(n,[t,e])},o.prototype.elu=function(t){if(i().getBool(\"WEBGL_PACK_UNARY_OPERATIONS\"))return this.packedUnaryOp(t,Ou,t.dtype);var e=new cu(t.shape,vu);return this.compileAndRun(e,[t])},o.prototype.eluDer=function(t,e){var n=i().getBool(\"WEBGL_PACK_BINARY_OPERATIONS\")?new Si(\"\\n  vec4 bGTEZero = vec4(greaterThanEqual(b, vec4(0.)));\\n  return (bGTEZero * a) + ((vec4(1.0) - bGTEZero) * (a * (b + vec4(1.0))));\\n\",t.shape,e.shape):new Ri(\"return (b >= 1.0) ? a : a * (b + 1.0);\",t.shape,e.shape);return this.compileAndRun(n,[t,e])},o.prototype.selu=function(t){var e=new cu(t.shape,gu);return this.compileAndRun(e,[t])},o.prototype.int=function(t){var e=new cu(t.shape,\"return float(int(x));\");return this.compileAndRun(e,[t],\"int32\")},o.prototype.clip=function(t,e,n){var r,o=(r=i().getBool(\"WEBGL_PACK_CLIP\")?new Ti(t.shape):new Ai(t.shape)).getCustomSetupFunc(e,n);return this.compileAndRun(r,[t],null,o)},o.prototype.abs=function(t){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.abs(t);if(i().getBool(\"WEBGL_PACK_UNARY_OPERATIONS\"))return this.packedUnaryOp(t,fu,t.dtype);var e=new cu(t.shape,fu);return this.compileAndRun(e,[t])},o.prototype.complexAbs=function(t){var e=this.texData.get(t.dataId),n=new Di(t.shape),r=[this.makeComplexComponentTensorInfo(t,e.complexTensors.real),this.makeComplexComponentTensorInfo(t,e.complexTensors.imag)];return this.compileAndRun(n,r)},o.prototype.sigmoid=function(t){var e=new cu(t.shape,\"return 1.0 / (1.0 + exp(-1.0 * x));\");return this.compileAndRun(e,[t])},o.prototype.softplus=function(t){var e=new cu(t.shape,\"\\n  float epsilon = 1.1920928955078125e-7;\\n  float threshold = log(epsilon) + 2.0;\\n\\n  bool too_large = x > -threshold;\\n  bool too_small = x < threshold;\\n\\n  float result;\\n  float exp_x = exp(x);\\n\\n  if (too_large){\\n    result = x;\\n  }\\n  else if (too_small){\\n    result = exp_x;\\n  }\\n  else{\\n    result = log(exp_x + 1.0);\\n  }\\n  return result;\\n\");return this.compileAndRun(e,[t])},o.prototype.sin=function(t){var e=new cu(t.shape,Cu);return this.compileAndRun(e,[t])},o.prototype.cos=function(t){var e=new cu(t.shape,Eu);return this.compileAndRun(e,[t])},o.prototype.tan=function(t){var e=new cu(t.shape,\"return tan(x);\");return this.compileAndRun(e,[t])},o.prototype.asin=function(t){var e=new cu(t.shape,Ru);return this.compileAndRun(e,[t])},o.prototype.acos=function(t){var e=new cu(t.shape,Iu);return this.compileAndRun(e,[t])},o.prototype.atan=function(t){var e=new cu(t.shape,ku);return this.compileAndRun(e,[t])},o.prototype.atan2=function(t,e){var n=i().getBool(\"WEBGL_PACK_BINARY_OPERATIONS\")?new Si(\"\\n  vec4 result = atan(a, b);\\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\\n  \\n  result.r = isNaN.r > 0. ? NAN : result.r;\\n  result.g = isNaN.g > 0. ? NAN : result.g;\\n  result.b = isNaN.b > 0. ? NAN : result.b;\\n  result.a = isNaN.a > 0. ? NAN : result.a;\\n\\n  return result;\\n\",t.shape,e.shape):new Ri(\"\\n  if (isnan(a)) return a;\\n  if (isnan(b)) return b;\\n\\n  return atan(a, b);\\n\",t.shape,e.shape);return this.compileAndRun(n,[t,e])},o.prototype.sinh=function(t){var e=new cu(t.shape,\"\\n  float e2x = exp(x);\\n  return (e2x - 1.0 / e2x) / 2.0;\\n\");return this.compileAndRun(e,[t])},o.prototype.cosh=function(t){var e=new cu(t.shape,\"\\n  float e2x = exp(-x);\\n  return (e2x + 1.0 / e2x) / 2.0;\\n\");return this.compileAndRun(e,[t])},o.prototype.tanh=function(t){var e=new cu(t.shape,\"\\n  float e2x = exp(-2.0 * abs(x));\\n  return sign(x) * (1.0 - e2x) / (1.0 + e2x);\\n\");return this.compileAndRun(e,[t])},o.prototype.asinh=function(t){var e=new cu(t.shape,Su);return this.compileAndRun(e,[t])},o.prototype.acosh=function(t){var e=new cu(t.shape,Au);return this.compileAndRun(e,[t])},o.prototype.atanh=function(t){var e=new cu(t.shape,Tu);return this.compileAndRun(e,[t])},o.prototype.erf=function(t){var e=new cu(t.shape,'\\n  // Error function is calculated approximately with elementary function.\\n  // See \"Handbook of Mathematical Functions with Formulas,\\n  // Graphs, and Mathematical Tables\", Abramowitz and Stegun.\\n  float p = 0.3275911;\\n  float a1 = 0.254829592;\\n  float a2 = -0.284496736;\\n  float a3 = 1.421413741;\\n  float a4 = -1.453152027;\\n  float a5 = 1.061405429;\\n\\n  float sign = sign(x);\\n  x = abs(x);\\n  float t = 1.0 / (1.0 + p * x);\\n  return sign * (1.0 - (((((a5*t + a4)*t) + a3)*t + a2)*t + a1)*t*exp(-x*x));\\n');return this.compileAndRun(e,[t])},o.prototype.step=function(t,e){var n=new cu(t.shape,function(t){return void 0===t&&(t=0),lu+\"\\n    return x > 0.0 ? 1.0 : float(\"+t+\");\\n  \"}(e));return this.compileAndRun(n,[t])},o.prototype.conv2dByMatMul=function(t,e,n,r,o,a){var s=t.shape,u=this.texData.get(t.dataId),c=n.inChannels,l=s[0]*s[1]*s[2],h=n.outChannels,f=\"channelsLast\"===n.dataFormat,d=(1===l||1===h)&&c>1e3,p=s[2]%2!=0&&!!u.isPacked;if(d||!i().getBool(\"WEBGL_LAZILY_UNPACK\")||!i().getBool(\"WEBGL_PACK_BINARY_OPERATIONS\")||!p){var v=f?s[0]*s[1]*s[2]:s[0]*s[2]*s[3],g=this.reshape(t,[1,v,n.inChannels]),m=this.reshape(e,[1,n.inChannels,n.outChannels]);return this.reshape(this.fusedBatchMatMul({a:g,b:m,transposeA:!1,transposeB:!1,bias:r,activation:o,preluActivationWeights:a}),n.outShape)}var y=f?s[0]*s[1]*(s[2]+1):s[0]*s[2]*(s[3]+1),x={dataId:t.dataId,shape:[1,y,n.inChannels],dtype:t.dtype},b=u.shape;u.shape=u.shape.slice(),u.shape[u.shape.length-2]++,C(_e(u.shape,x.shape),(function(){return\"packed reshape \"+u.shape+\" to \"+x.shape+\" isn't free\"}));var w=this.reshape(e,[1,n.inChannels,n.outChannels]),E=this.fusedBatchMatMul({a:x,b:w,transposeA:!1,transposeB:!1,bias:r,activation:o,preluActivationWeights:a}),R=this.texData.get(E.dataId);return C(R.isPacked,(function(){return\"batchMatMul result is expected to be packed\"})),u.shape=b,R.shape=n.outShape,Lt.makeTensorFromDataId(E.dataId,n.outShape,E.dtype)},o.prototype.conv2dWithIm2Row=function(t,e,n,r,o,a){var i=n.filterWidth,s=n.filterHeight,u=n.inChannels,c=n.outWidth,l=n.outHeight,h=\"channelsLast\"===n.dataFormat,f=i*s*u,d=l*c,p=[f,d],v=t.squeeze([0]),g=e.reshape([1,f,-1]),m=new Ss(p,v.shape,n),y=this.compileAndRun(m,[v]).reshape([1,p[0],p[1]]),x=null!=r,b=null!=a,w=o?Lu(o,!0):null,C=new _s(y.shape,[1,d,n.outChannels],!0,!1,x,w,b),E=[y,g];r&&E.push(r),b&&E.push(a);var R=this.compileAndRun(C,E);return h?R.reshape([1,l,c,n.outChannels]):R.reshape([1,n.outChannels,l,c])},o.prototype.fusedConv2d=function(t){var e=t.input,n=t.filter,r=t.convInfo,o=t.bias,a=t.activation,s=t.preluActivationWeights;if(1===r.filterHeight&&1===r.filterWidth&&1===r.dilationHeight&&1===r.dilationWidth&&1===r.strideHeight&&1===r.strideWidth&&(\"SAME\"===r.padInfo.type||\"VALID\"===r.padInfo.type))return this.conv2dByMatMul(e,n,r,o,a,s);if(i().getBool(\"WEBGL_CONV_IM2COL\")&&1===e.shape[0])return this.conv2dWithIm2Row(e,n,r,o,a,s);var u=null!=o,c=null!=s,l=a?Lu(a,!1):null,h=new Ui(r,u,l,c),f=[e,n];return o&&f.push(o),s&&f.push(s),this.compileAndRun(h,f)},o.prototype.conv2d=function(t,e,n){if(1===n.filterHeight&&1===n.filterWidth&&1===n.dilationHeight&&1===n.dilationWidth&&1===n.strideHeight&&1===n.strideWidth&&(\"SAME\"===n.padInfo.type||\"VALID\"===n.padInfo.type))return this.conv2dByMatMul(t,e,n);if(i().getBool(\"WEBGL_CONV_IM2COL\")&&1===t.shape[0])return this.conv2dWithIm2Row(t,e,n);var r=new Ui(n);return this.compileAndRun(r,[t,e])},o.prototype.conv2dDerInput=function(t,e,n){var r=new Mi(n);return this.compileAndRun(r,[t,e])},o.prototype.conv2dDerFilter=function(t,e,n){var r=new Oi(n);return this.compileAndRun(r,[t,e])},o.prototype.fusedDepthwiseConv2D=function(t){var e,n=t.input,r=t.filter,o=t.convInfo,a=t.bias,s=t.activation,u=t.preluActivationWeights,c=i().getBool(\"WEBGL_PACK_DEPTHWISECONV\")&&o.strideWidth<=2&&o.outChannels/o.inChannels==1,l=s?Lu(s,c):null,h=[n,r],f=null!=a,d=null!=u;return f&&h.push(a),d&&h.push(u),c?(e=new Gi(o,f,l,d),this.compileAndRun(e,h)):(e=new zi(o,f,l,d),this.compileAndRun(e,h))},o.prototype.depthwiseConv2D=function(t,e,n){var r;return i().getBool(\"WEBGL_PACK_DEPTHWISECONV\")&&n.strideWidth<=2&&n.outChannels/n.inChannels==1?(r=new Gi(n),this.compileAndRun(r,[t,e])):(r=new zi(n),this.compileAndRun(r,[t,e]))},o.prototype.depthwiseConv2DDerInput=function(t,e,n){var r=new Wi(n);return this.compileAndRun(r,[t,e])},o.prototype.depthwiseConv2DDerFilter=function(t,e,n){var r=new Li(n);return this.compileAndRun(r,[t,e])},o.prototype.conv3d=function(t,e,n){var r=new Vi(n);return this.compileAndRun(r,[t,e])},o.prototype.conv3dDerInput=function(t,e,n){var r=new Pi(n);return this.compileAndRun(r,[t,e])},o.prototype.conv3dDerFilter=function(t,e,n){var r=new Bi(n);return this.compileAndRun(r,[t,e])},o.prototype.maxPool=function(t,e){var n=new Ws(e,\"max\",!1);return this.compileAndRun(n,[t])},o.prototype.avgPool=function(t,e){var n=new Ws(e,\"avg\",!1);return this.compileAndRun(n,[t],\"float32\")},o.prototype.maxPoolBackprop=function(t,e,n,r){var o=new Ws(r,\"max\",!0),a=this.compileAndRun(o,[e]),i=new Ns(r),s=this.compileAndRun(i,[t,a],e.dtype);return a.dispose(),s},o.prototype.avgPoolBackprop=function(t,e,n){var r=new fi(n);return this.compileAndRun(r,[t],e.dtype)},o.prototype.cast=function(t,e){return Ra(t,e,this)},o.prototype.unstack=function(t,e){for(var n=t.shape[e],r=new Array(t.rank-1),o=0,a=0;a<t.rank;a++)a!==e&&(r[o++]=t.shape[a]);var i=new Array(t.rank).fill(0),s=t.shape.slice();s[e]=1;var u=new Array(n);for(a=0;a<u.length;a++)i[e]=a,u[a]=this.slice(t,i,s).reshape(r);return u},o.prototype.avgPool3d=function(t,e){var n=new Us(e,\"avg\",!1);return this.compileAndRun(n,[t],\"float32\")},o.prototype.avgPool3dBackprop=function(t,e,n){var r=new di(n);return this.compileAndRun(r,[t],e.dtype)},o.prototype.maxPool3d=function(t,e){var n=new Us(e,\"max\",!1);return this.compileAndRun(n,[t],\"float32\")},o.prototype.maxPool3dBackprop=function(t,e,n,r){var o=new Us(r,\"max\",!0),a=this.compileAndRun(o,[e]),i=new Fs(r),s=this.compileAndRun(i,[t,a],e.dtype);return a.dispose(),s},o.prototype.reshape=function(t,e){var n=this.texData.get(t.dataId);if(n.isPacked&&!_e(t.shape,e)&&(null===n.texture||!_e(n.shape,e))){var r=this.packedReshape(t,e);return Lt.makeTensorFromDataId(r.dataId,r.shape,r.dtype)}return Ia(t,e)},o.prototype.resizeBilinear=function(t,e,n,r){var o=i().getBool(\"WEBGL_PACK_IMAGE_OPERATIONS\")?new qs(t.shape,e,n,r):new Hs(t.shape,e,n,r);return this.compileAndRun(o,[t],\"float32\")},o.prototype.resizeBilinearBackprop=function(t,e,n){var r=new Gs(t,e,n);return this.compileAndRun(r,[t])},o.prototype.resizeNearestNeighbor=function(t,e,n,r){var o=new js(t.shape,e,n,r);return this.compileAndRun(o,[t])},o.prototype.resizeNearestNeighborBackprop=function(t,e,n){var r=new Ks(t,e,n);return this.compileAndRun(r,[t])},o.prototype.multinomial=function(t,e,n,r){var o=e?t:ia(t),a=o.shape[0],i=o.shape[1],s=new Os(a,i,n),u=s.getCustomSetupFunc(r);return this.compileAndRun(s,[o],\"int32\",u)},o.prototype.oneHot=function(t,e,n,r){var o=new Ms(t.size,e,n,r);return this.compileAndRun(o,[t])},o.prototype.diag=function(t){var e=new $i(t.size);return this.compileAndRun(e,[t])},o.prototype.nonMaxSuppression=function(t,e,n,r,o){return dn(\"tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead\"),Oa(t.dataSync(),e.dataSync(),n,r,o)},o.prototype.cropAndResize=function(t,e,n,r,o,a){var i=new Hi(t.shape,e.shape,r,o,a);return this.compileAndRun(i,[t,e,n],\"float32\")},o.prototype.depthToSpace=function(t,e,n){C(e>1,(function(){return\"blockSize should be > 1 for depthToSpace, but was: \"+e}));var r=t.shape[0],o=\"NHWC\"===n?t.shape[1]:t.shape[2],a=\"NHWC\"===n?t.shape[2]:t.shape[3],i=\"NHWC\"===n?t.shape[3]:t.shape[1],s=o*e,u=a*e,c=i/(e*e),l=new Yi(\"NHWC\"===n?[r,s,u,c]:[r,c,s,u],e,n);return this.compileAndRun(l,[t])},o.prototype.split=function(t,e,n){return Ua(t,e,n)},o.prototype.scatterND=function(t,e,n){var r=Go(0,t,n),o=r.sliceRank,a=r.numUpdates,i=r.sliceSize,s=r.strides,u=r.outputSize,c=[u/i,i],l=t.reshape([a,o]),h=e.reshape([a,i]);if(0===u)return Ia(Fn([]),n);var f=On(0),d=new $s(a,o,l.rank,h.rank,s,c);return this.compileAndRun(d,[h,l,f]).reshape(n)},o.prototype.sparseToDense=function(t,e,n,r){var o=Go(0,t,n),a=o.sliceRank,i=o.numUpdates,s=o.strides,u=o.outputSize,c=new $s(i,a,t.rank,e.rank,s,[u,1],!1);return this.compileAndRun(c,[e,t,r]).reshape(n)},o.prototype.fft=function(t){return this.fftImpl(t,!1)},o.prototype.ifft=function(t){return this.fftImpl(t,!0)},o.prototype.fftImpl=function(t,e){var n=this.texData.get(t.dataId),r=new rs(es,t.shape,e),o=new rs(ns,t.shape,e),a=[this.makeComplexComponentTensorInfo(t,n.complexTensors.real),this.makeComplexComponentTensorInfo(t,n.complexTensors.imag)],i=this.compileAndRun(r,a),s=this.compileAndRun(o,a),u=this.complex(i,s).as2D(t.shape[0],t.shape[1]);return i.dispose(),s.dispose(),u},o.prototype.gatherND=function(t,e){var n=e.shape,r=n[n.length-1],o=Po(t,e),a=o[0],i=o[1],s=o[2],u=o[3],c=e.reshape([i,r]),l=t.reshape([t.size/s,s]),h=new is(r,u,[i,s]);return this.compileAndRun(h,[l,c]).reshape(a)},o.prototype.fill=function(t,e,n){if(\"string\"===(n=n||j(e))){var r=P(n,k(t));return r.fill(e),Lt.makeTensor(r,t,n,this)}var o=new os(t,e),a=o.getCustomSetupFunc(e);return this.compileAndRun(o,[],n,a)},o.prototype.onesLike=function(t){if(\"string\"===t.dtype)throw new Error(\"onesLike is not supported under string dtype\");return this.fill(t.shape,1,t.dtype)},o.prototype.zerosLike=function(t){return this.fill(t.shape,\"string\"===t.dtype?\"\":0,t.dtype)},o.prototype.linspace=function(t,e,n){return ka(t,e,n)},o.prototype.makeTensorInfo=function(t,e){var n=this.write(null,t,e);return this.texData.get(n).usage=null,{dataId:n,shape:t,dtype:e}},o.prototype.makeOutput=function(t,e){var n=this.makeTensorInfo(t,e).dataId;return Lt.makeTensorFromDataId(n,t,e,this)},o.prototype.unpackTensor=function(t){var e=new Bu(t.shape);return this.runWebGLProgram(e,[t],t.dtype)},o.prototype.packTensor=function(t){var e=new Bs(t.shape);return this.runWebGLProgram(e,[t],t.dtype,null,!0)},o.prototype.packedReshape=function(t,e){var n=[Ae(t.shape)].concat(Te(t.shape)),r={dtype:t.dtype,shape:n,dataId:t.dataId},o=[Ae(e)].concat(Te(e)),a=new zs(o,n),i=this.runWebGLProgram(a,[r],t.dtype,null,!0);return{dataId:i.dataId,shape:e,dtype:i.dtype}},o.prototype.decode=function(t){var e,n=this.texData.get(t),r=n.isPacked,o=n.shape,a=n.dtype,i=De(o);e=r?new Xi(i):new ji(i);return{dtype:a,shape:o,dataId:this.runWebGLProgram(e,[{shape:i,dtype:a,dataId:t}],a,null,!0).dataId}},o.prototype.runWebGLProgram=function(t,e,n,r,o){var a=this;void 0===o&&(o=!1);var s=this.makeTensorInfo(t.outputShape,n),u=this.texData.get(s.dataId);if(t.packedOutput&&(u.isPacked=!0),t.outPackingScheme===Vt.DENSE){var c=Yt(t.outputShape);u.texShape=c.map((function(t){return 2*t}))}if(null!=t.outTexUsage&&(u.usage=t.outTexUsage),0===k(s.shape))return u.values=B(s.dtype,0),s;var l=[],h=e.map((function(e){if(\"complex64\"===e.dtype)throw new Error(\"GPGPUProgram does not support complex64 input. For complex64 dtypes, please separate the program into real and imaginary parts.\");var n=a.texData.get(e.dataId);if(null==n.texture){if(!t.packedInputs&&k(e.shape)<=i().getNumber(\"WEBGL_SIZE_UPLOAD_UNIFORM\"))return{shape:e.shape,texData:null,isUniform:!0,uniformValues:n.values};t.packedInputs&&(n.isPacked=!0,n.shape=e.shape)}else if(!!n.isPacked!=!!t.packedInputs)e=n.isPacked?a.unpackTensor(e):a.packTensor(e),l.push(e),n=a.texData.get(e.dataId);else if(n.isPacked&&!_e(n.shape,e.shape)){var r=e,o=e.shape;e.shape=n.shape,e=a.packedReshape(e,o),l.push(e),n=a.texData.get(e.dataId),r.shape=o}return a.uploadToGPU(e.dataId),{shape:e.shape,texData:n,isUniform:!1}}));this.uploadToGPU(s.dataId);var f,d={shape:s.shape,texData:u,isUniform:!1},p=function(t,e,n){var r=\"\";e.concat(n).forEach((function(t){var e=null!=t.texData&&null!=t.texData.slice&&t.texData.slice.flatOffset>0,n=t.isUniform?\"uniform\":t.texData.texShape;r+=t.shape+\"_\"+n+\"_\"+e}));var o=t.userCode,a=t.constructor.name;return a+=\"_\"+r+\"_\"+o}(t,h,d),v=this.getAndSaveBinary(p,(function(){return function(t,e,n,r){var o=e.userCode,a=n.map((function(t,n){var r={logicalShape:t.shape,texShape:t.isUniform?null:t.texData.texShape,isUniform:t.isUniform,isPacked:!t.isUniform&&t.texData.isPacked,flatOffset:null};return null!=t.texData&&null!=t.texData.slice&&t.texData.slice.flatOffset>0&&(r.flatOffset=t.texData.slice.flatOffset),{name:e.variableNames[n],shapeInfo:r}})),s=a.map((function(t){return t.shapeInfo})),u={logicalShape:r.shape,texShape:r.texData.texShape,isUniform:!1,isPacked:r.texData.isPacked,flatOffset:null},c=Za(a,u,o,e.packedInputs),l=t.createProgram(c),h=null,f=t.getUniformLocation(l,\"NAN\",!1);1===i().getNumber(\"WEBGL_VERSION\")&&(h=t.getUniformLocation(l,\"INFINITY\",!1));for(var d={},p=0;p<e.variableNames.length;p++){var v=e.variableNames[p];d[v]=t.getUniformLocation(l,v,!1),d[\"offset\"+v]=t.getUniformLocation(l,\"offset\"+v,!1)}return{program:e,source:c,webGLProgram:l,uniformLocations:d,inShapeInfos:s,outShapeInfo:u,infLoc:h,nanLoc:f}}(a.gpgpu,t,h,d)})),g=null!=this.activeTimers;if(g&&(f=this.startTimer()),function(t,e,n,r,o){ks(e.inShapeInfos,n),ks([e.outShapeInfo],[r]);var a=r.texData.texture,s=r.texData.texShape;r.texData.isPacked?t.setOutputPackedMatrixTexture(a,s[0],s[1]):t.setOutputMatrixTexture(a,s[0],s[1]),t.setProgram(e.webGLProgram),1===i().getNumber(\"WEBGL_VERSION\")&&null!==e.infLoc&&t.gl.uniform1f(e.infLoc,1/0),null!==e.nanLoc&&t.gl.uniform1f(e.nanLoc,NaN),n.forEach((function(n,r){var o=e.program.variableNames[r],a=e.uniformLocations[o],i=e.uniformLocations[\"offset\"+o];if(null!=a)if(n.isUniform)if(k(n.shape)<2)t.gl.uniform1f(a,n.uniformValues[0]);else{var s=n.uniformValues;s instanceof Float32Array||(s=new Float32Array(s)),t.gl.uniform1fv(a,s)}else null!=n.texData.slice&&null!=i&&t.gl.uniform1i(i,n.texData.slice.flatOffset),t.setInputMatrixTexture(n.texData.texture,a,r)})),null!=o&&o(t,e.webGLProgram),t.executeProgram()}(this.gpgpu,v,h,d,r),l.forEach((function(t){return a.disposeData(t.dataId)})),g&&(f=this.endTimer(f),this.activeTimers.push({name:t.constructor.name,query:this.getQueryTime(f)})),!i().getBool(\"WEBGL_LAZILY_UNPACK\")&&u.isPacked&&!1===o){var m=this.unpackTensor(s);return this.disposeData(s.dataId),m}return s},o.prototype.compileAndRun=function(t,e,n,r,o){void 0===o&&(o=!1),n=n||e[0].dtype;var a=this.runWebGLProgram(t,e,n,r,o);return Lt.makeTensorFromDataId(a.dataId,a.shape,a.dtype)},o.prototype.getAndSaveBinary=function(t,e){return t in this.binaryCache||(this.binaryCache[t]=e()),this.binaryCache[t]},o.prototype.getTextureManager=function(){return this.textureManager},o.prototype.dispose=function(){var t=this;if(!this.disposed){if(!i().getBool(\"IS_TEST\"))Object.keys(this.binaryCache).forEach((function(e){t.gpgpu.deleteProgram(t.binaryCache[e].webGLProgram),delete t.binaryCache[e]}));this.textureManager.dispose(),null!=this.canvas&&\"undefined\"!=typeof HTMLCanvasElement&&this.canvas instanceof HTMLCanvasElement?this.canvas.remove():this.canvas=null,this.gpgpuCreatedLocally&&(this.gpgpu.program=null,this.gpgpu.dispose()),this.disposed=!0}},o.prototype.floatPrecision=function(){var t=this;return null==this.floatPrecisionValue&&(this.floatPrecisionValue=Ze((function(){if(!i().get(\"WEBGL_RENDER_FLOAT32_ENABLED\")){var e=i().getBool(\"DEBUG\");i().set(\"DEBUG\",!1);var n=t.abs(On(1e-8)).dataSync()[0];if(i().set(\"DEBUG\",e),n>0)return 32}return 16}))),this.floatPrecisionValue},o.prototype.epsilon=function(){return 32===this.floatPrecision()?1e-7:1e-4},o.prototype.uploadToGPU=function(t){var e,n=this.texData.get(t),r=n.shape,o=n.dtype,a=n.values,i=n.texture,s=n.usage,u=n.isPacked;if(null==i){var c,l=null!=this.activeTimers;l&&(c=et());var h=n.texShape;if(null==h&&(h=Ne(r,u),n.texShape=h),null!=a){var f=De(r),d=void 0,p=h[1],v=h[0],g=a instanceof Uint8Array;u?(p=(e=$t(h[0],h[1]))[0],v=e[1],d=new ts(f,[v,p],g)):d=new Zi(f,[v,p],g);var m=this.makeTensorInfo([v,p],o);this.texData.get(m.dataId).usage=g?zt.PIXELS:zt.UPLOAD,this.gpgpu.uploadDenseMatrixToTexture(this.getTexture(m.dataId),p,v,a);var y=this.runWebGLProgram(d,[m],o,null,!0),x=this.texData.get(y.dataId);n.texture=x.texture,n.texShape=x.texShape,n.isPacked=x.isPacked,n.usage=x.usage,this.disposeData(m.dataId),this.texData.delete(y.dataId),n.values=null,l&&(this.uploadWaitMs+=et()-c)}else{var b=this.acquireTexture(h,s,o,u);n.texture=b}}},o.prototype.convertAndCacheOnCPU=function(t,e){var n=this.texData.get(t),r=n.dtype;return this.releaseGPUData(t),null!=e&&(n.values=function(t,e){if(\"float32\"===e||\"complex64\"===e)return t;if(\"int32\"===e||\"bool\"===e){for(var n=\"int32\"===e?new Int32Array(t.length):new Uint8Array(t.length),r=0;r<n.length;++r)n[r]=Math.round(t[r]);return n}throw new Error(\"Unknown dtype \"+e)}(e,r)),n.values},o.prototype.acquireTexture=function(t,e,n,r){if(this.numBytesInGPU+=this.computeBytes(t,n),!this.warnedAboutMemory&&this.numBytesInGPU>1024*this.numMBBeforeWarning*1024){var o=(this.numBytesInGPU/1024/1024).toFixed(2);this.warnedAboutMemory=!0,console.warn(\"High memory usage in GPU: \"+o+\" MB, most likely due to a memory leak\")}return this.textureManager.acquireTexture(t,e,r)},o.prototype.computeBytes=function(t,e){return t[0]*t[1]*z(e)},o}(la);Wt()&&Lt.registerBackend(\"webgl\",(function(){return new Uu}),2);\"undefined\"!=typeof globalThis?globalThis:\"undefined\"!=typeof window?window:\"undefined\"!=typeof global?global:\"undefined\"!=typeof self&&self;function Vu(t,e){return t(e={exports:{}},e.exports),e.exports}var zu=Vu((function(t){!function(t,e,n){function r(t){var e,n=this,r=(e=4022871197,function(t){t=t.toString();for(var n=0;n<t.length;n++){var r=.02519603282416938*(e+=t.charCodeAt(n));r-=e=r>>>0,e=(r*=e)>>>0,e+=4294967296*(r-=e)}return 2.3283064365386963e-10*(e>>>0)});n.next=function(){var t=2091639*n.s0+2.3283064365386963e-10*n.c;return n.s0=n.s1,n.s1=n.s2,n.s2=t-(n.c=0|t)},n.c=1,n.s0=r(\" \"),n.s1=r(\" \"),n.s2=r(\" \"),n.s0-=r(t),n.s0<0&&(n.s0+=1),n.s1-=r(t),n.s1<0&&(n.s1+=1),n.s2-=r(t),n.s2<0&&(n.s2+=1),r=null}function o(t,e){return e.c=t.c,e.s0=t.s0,e.s1=t.s1,e.s2=t.s2,e}function a(t,e){var n=new r(t),a=e&&e.state,i=n.next;return i.int32=function(){return 4294967296*n.next()|0},i.double=function(){return i()+11102230246251565e-32*(2097152*i()|0)},i.quick=i,a&&(\"object\"==typeof a&&o(a,n),i.state=function(){return o(n,{})}),i}e&&e.exports?e.exports=a:n&&n.amd?n((function(){return a})):this.alea=a}(0,t,!1)})),Gu=Vu((function(t){!function(t,e,n){function r(t){var e=this,n=\"\";e.x=0,e.y=0,e.z=0,e.w=0,e.next=function(){var t=e.x^e.x<<11;return e.x=e.y,e.y=e.z,e.z=e.w,e.w^=e.w>>>19^t^t>>>8},t===(0|t)?e.x=t:n+=t;for(var r=0;r<n.length+64;r++)e.x^=0|n.charCodeAt(r),e.next()}function o(t,e){return e.x=t.x,e.y=t.y,e.z=t.z,e.w=t.w,e}function a(t,e){var n=new r(t),a=e&&e.state,i=function(){return(n.next()>>>0)/4294967296};return i.double=function(){do{var t=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},i.int32=n.next,i.quick=i,a&&(\"object\"==typeof a&&o(a,n),i.state=function(){return o(n,{})}),i}e&&e.exports?e.exports=a:n&&n.amd?n((function(){return a})):this.xor128=a}(0,t,!1)})),Hu=Vu((function(t){!function(t,e,n){function r(t){var e=this,n=\"\";e.next=function(){var t=e.x^e.x>>>2;return e.x=e.y,e.y=e.z,e.z=e.w,e.w=e.v,(e.d=e.d+362437|0)+(e.v=e.v^e.v<<4^t^t<<1)|0},e.x=0,e.y=0,e.z=0,e.w=0,e.v=0,t===(0|t)?e.x=t:n+=t;for(var r=0;r<n.length+64;r++)e.x^=0|n.charCodeAt(r),r==n.length&&(e.d=e.x<<10^e.x>>>4),e.next()}function o(t,e){return e.x=t.x,e.y=t.y,e.z=t.z,e.w=t.w,e.v=t.v,e.d=t.d,e}function a(t,e){var n=new r(t),a=e&&e.state,i=function(){return(n.next()>>>0)/4294967296};return i.double=function(){do{var t=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},i.int32=n.next,i.quick=i,a&&(\"object\"==typeof a&&o(a,n),i.state=function(){return o(n,{})}),i}e&&e.exports?e.exports=a:n&&n.amd?n((function(){return a})):this.xorwow=a}(0,t,!1)})),qu=Vu((function(t){!function(t,e,n){function r(t){var e=this;e.next=function(){var t,n,r=e.x,o=e.i;return t=r[o],n=(t^=t>>>7)^t<<24,n^=(t=r[o+1&7])^t>>>10,n^=(t=r[o+3&7])^t>>>3,n^=(t=r[o+4&7])^t<<7,t=r[o+7&7],n^=(t^=t<<13)^t<<9,r[o]=n,e.i=o+1&7,n},function(t,e){var n,r=[];if(e===(0|e))r[0]=e;else for(e=\"\"+e,n=0;n<e.length;++n)r[7&n]=r[7&n]<<15^e.charCodeAt(n)+r[n+1&7]<<13;for(;r.length<8;)r.push(0);for(n=0;n<8&&0===r[n];++n);for(8==n?r[7]=-1:r[n],t.x=r,t.i=0,n=256;n>0;--n)t.next()}(e,t)}function o(t,e){return e.x=t.x.slice(),e.i=t.i,e}function a(t,e){null==t&&(t=+new Date);var n=new r(t),a=e&&e.state,i=function(){return(n.next()>>>0)/4294967296};return i.double=function(){do{var t=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},i.int32=n.next,i.quick=i,a&&(a.x&&o(a,n),i.state=function(){return o(n,{})}),i}e&&e.exports?e.exports=a:n&&n.amd?n((function(){return a})):this.xorshift7=a}(0,t,!1)})),Ku=Vu((function(t){!function(t,e,n){function r(t){var e=this;e.next=function(){var t,n,r=e.w,o=e.X,a=e.i;return e.w=r=r+1640531527|0,n=o[a+34&127],t=o[a=a+1&127],n^=n<<13,t^=t<<17,n^=n>>>15,t^=t>>>12,n=o[a]=n^t,e.i=a,n+(r^r>>>16)|0},function(t,e){var n,r,o,a,i,s=[],u=128;for(e===(0|e)?(r=e,e=null):(e+=\"\\0\",r=0,u=Math.max(u,e.length)),o=0,a=-32;a<u;++a)e&&(r^=e.charCodeAt((a+32)%e.length)),0===a&&(i=r),r^=r<<10,r^=r>>>15,r^=r<<4,r^=r>>>13,a>=0&&(i=i+1640531527|0,o=0==(n=s[127&a]^=r+i)?o+1:0);for(o>=128&&(s[127&(e&&e.length||0)]=-1),o=127,a=512;a>0;--a)r=s[o+34&127],n=s[o=o+1&127],r^=r<<13,n^=n<<17,r^=r>>>15,n^=n>>>12,s[o]=r^n;t.w=i,t.X=s,t.i=o}(e,t)}function o(t,e){return e.i=t.i,e.w=t.w,e.X=t.X.slice(),e}function a(t,e){null==t&&(t=+new Date);var n=new r(t),a=e&&e.state,i=function(){return(n.next()>>>0)/4294967296};return i.double=function(){do{var t=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},i.int32=n.next,i.quick=i,a&&(a.X&&o(a,n),i.state=function(){return o(n,{})}),i}e&&e.exports?e.exports=a:n&&n.amd?n((function(){return a})):this.xor4096=a}(0,t,!1)})),ju=Vu((function(t){!function(t,e,n){function r(t){var e=this,n=\"\";e.next=function(){var t=e.b,n=e.c,r=e.d,o=e.a;return t=t<<25^t>>>7^n,n=n-r|0,r=r<<24^r>>>8^o,o=o-t|0,e.b=t=t<<20^t>>>12^n,e.c=n=n-r|0,e.d=r<<16^n>>>16^o,e.a=o-t|0},e.a=0,e.b=0,e.c=-1640531527,e.d=1367130551,t===Math.floor(t)?(e.a=t/4294967296|0,e.b=0|t):n+=t;for(var r=0;r<n.length+20;r++)e.b^=0|n.charCodeAt(r),e.next()}function o(t,e){return e.a=t.a,e.b=t.b,e.c=t.c,e.d=t.d,e}function a(t,e){var n=new r(t),a=e&&e.state,i=function(){return(n.next()>>>0)/4294967296};return i.double=function(){do{var t=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},i.int32=n.next,i.quick=i,a&&(\"object\"==typeof a&&o(a,n),i.state=function(){return o(n,{})}),i}e&&e.exports?e.exports=a:n&&n.amd?n((function(){return a})):this.tychei=a}(0,t,!1)})),Xu=Vu((function(t){!function(e,n){var r,o=this,a=256,i=6,s=\"random\",u=n.pow(a,i),c=n.pow(2,52),l=2*c,h=a-1;function f(t,h,f){var m=[],y=v(function t(e,n){var r,o=[],a=typeof e;if(n&&\"object\"==a)for(r in e)try{o.push(t(e[r],n-1))}catch(t){}return o.length?o:\"string\"==a?e:e+\"\\0\"}((h=1==h?{entropy:!0}:h||{}).entropy?[t,g(e)]:null==t?function(){try{var t;return r&&(t=r.randomBytes)?t=t(a):(t=new Uint8Array(a),(o.crypto||o.msCrypto).getRandomValues(t)),g(t)}catch(t){var n=o.navigator,i=n&&n.plugins;return[+new Date,o,i,o.screen,g(e)]}}():t,3),m),x=new d(m),b=function(){for(var t=x.g(i),e=u,n=0;t<c;)t=(t+n)*a,e*=a,n=x.g(1);for(;t>=l;)t/=2,e/=2,n>>>=1;return(t+n)/e};return b.int32=function(){return 0|x.g(4)},b.quick=function(){return x.g(4)/4294967296},b.double=b,v(g(x.S),e),(h.pass||f||function(t,e,r,o){return o&&(o.S&&p(o,x),t.state=function(){return p(x,{})}),r?(n[s]=t,e):t})(b,y,\"global\"in h?h.global:this==n,h.state)}function d(t){var e,n=t.length,r=this,o=0,i=r.i=r.j=0,s=r.S=[];for(n||(t=[n++]);o<a;)s[o]=o++;for(o=0;o<a;o++)s[o]=s[i=h&i+t[o%n]+(e=s[o])],s[i]=e;(r.g=function(t){for(var e,n=0,o=r.i,i=r.j,s=r.S;t--;)e=s[o=h&o+1],n=n*a+s[h&(s[o]=s[i=h&i+e])+(s[i]=e)];return r.i=o,r.j=i,n})(a)}function p(t,e){return e.i=t.i,e.j=t.j,e.S=t.S.slice(),e}function v(t,e){for(var n,r=t+\"\",o=0;o<r.length;)e[h&o]=h&(n^=19*e[h&o])+r.charCodeAt(o++);return g(e)}function g(t){return String.fromCharCode.apply(0,t)}if(n[\"seed\"+s]=f,v(n.random(),e),t.exports){t.exports=f;try{r=require(\"crypto\")}catch(t){}}}([],Math)}));Xu.alea=zu,Xu.xor128=Gu,Xu.xorwow=Hu,Xu.xorshift7=qu,Xu.xor4096=Ku,Xu.tychei=ju;var Yu=Xu.alea;var $u=An({addN_:function(t){C(Array.isArray(t),(function(){return\"The argument passed to tf.addN() must be a list of tensors\"})),C(t.length>=1,(function(){return\"Must pass at least one tensor to tf.addN(), but got \"+t.length}));var e=t.map((function(t,e){return gn(t,\"tensors\"+e,\"addN\")})),n=e[0];e.forEach((function(t){if(t.dtype!==n.dtype)throw new Error(\"All tensors passed to tf.addN() must have the same dtype\")})),e.forEach((function(t){if(!S(t.shape,n.shape))throw new Error(\"All tensors passed to tf.addN() must have the same shape\")}));var r=e;return Lt.runKernelFunc((function(t,n){return t.addN(e)}),r,null,\"AddN\")}});function Qu(){Xe(\"tf.batchNormalization() is going away. Use tf.batchNorm() instead, and note the positional argument change of scale, offset, and varianceEpsilon\")}function Ju(t){return 0===t.rank||1===t.rank?t.as4D(1,1,1,t.size):2===t.rank?t.as4D(1,1,t.shape[0],t.shape[1]):3===t.rank?t.as4D(1,t.shape[0],t.shape[1],t.shape[2]):t}function Zu(t,e,n,r,o,a){null==a&&(a=.001);var i,s,u=gn(t,\"x\",\"batchNorm\"),c=gn(e,\"mean\",\"batchNorm\"),l=gn(n,\"variance\",\"batchNorm\");null!=o&&(i=gn(o,\"scale\",\"batchNorm\")),null!=r&&(s=gn(r,\"offset\",\"batchNorm\")),C(c.rank===l.rank,(function(){return\"Batch normalization gradient requires mean and variance to have equal ranks.\"})),C(null==s||c.rank===s.rank,(function(){return\"Batch normalization gradient requires mean and offset to have equal ranks.\"})),C(null==i||c.rank===i.rank,(function(){return\"Batch normalization gradient requires mean and scale to have equal ranks.\"}));var h={x:u,scale:i,offset:s,mean:c,variance:l},f={varianceEpsilon:a};return Lt.runKernelFunc((function(t,e){var n=Ju(u),r=t.batchNormalization(n,tc(c),tc(l),a,tc(i),tc(s));return e([u,c,l,i]),r}),h,null,\"FusedBatchNorm\",f).reshape(u.shape)}function tc(t){return null==t?null:0===t.rank?t.as1D():1===t.rank?t:2===t.rank?t.as4D(1,1,t.shape[0],t.shape[1]):3===t.rank?t.as4D(1,t.shape[0],t.shape[1],t.shape[2]):t}var ec=An({batchNormalization_:function(t,e,n,r,o,a){return void 0===r&&(r=.001),Qu(),Zu(t,e,n,a,o,r)}}),nc=An({batchNorm_:Zu});function rc(t,e,n,r,o,a){var i,s,u=gn(t,\"x\",\"batchNorm\"),c=gn(e,\"mean\",\"batchNorm\"),l=gn(n,\"variance\",\"batchNorm\");return null!=o&&(i=gn(o,\"scale\",\"batchNorm\")),null!=r&&(s=gn(r,\"offset\",\"batchNorm\")),C(2===u.rank,(function(){return\"Error in batchNorm3D: x must be rank 3 but got rank \"+u.rank+\".\"})),C(2===c.rank||1===c.rank,(function(){return\"Error in batchNorm2D: mean must be rank 2 or rank 1 but got rank \"+c.rank+\".\"})),C(2===l.rank||1===l.rank,(function(){return\"Error in batchNorm2D: variance must be rank 2 or rank 1 but got rank \"+l.rank+\".\"})),null!=i&&C(2===i.rank||1===i.rank,(function(){return\"Error in batchNorm2D: scale must be rank 2 or rank 1 but got rank \"+i.rank+\".\"})),null!=s&&C(2===s.rank||1===s.rank,(function(){return\"Error in batchNorm2D: offset must be rank 2 or rank 1 but got rank \"+s.rank+\".\"})),nc(u,c,l,s,i,a)}var oc=An({batchNormalization2d_:function(t,e,n,r,o,a){return void 0===r&&(r=.001),Qu(),rc(t,e,n,a,o,r)}}),ac=An({batchNorm2d_:rc});function ic(t,e,n,r,o,a){var i,s,u=gn(t,\"x\",\"batchNorm\"),c=gn(e,\"mean\",\"batchNorm\"),l=gn(n,\"variance\",\"batchNorm\");return null!=o&&(i=gn(o,\"scale\",\"batchNorm\")),null!=r&&(s=gn(r,\"offset\",\"batchNorm\")),C(3===u.rank,(function(){return\"Error in batchNorm3D: x must be rank 3 but got rank \"+u.rank+\".\"})),C(3===c.rank||1===c.rank,(function(){return\"Error in batchNorm3D: mean must be rank 3 or rank 1 but got rank \"+c.rank+\".\"})),C(3===l.rank||1===l.rank,(function(){return\"Error in batchNorm3D: variance must be rank 3 or rank 1 but got rank \"+l.rank+\".\"})),null!=i&&C(3===i.rank||1===i.rank,(function(){return\"Error in batchNorm3D: scale must be rank 3 or rank 1 but got rank \"+i.rank+\".\"})),null!=s&&C(3===s.rank||1===s.rank,(function(){return\"Error in batchNorm3D: offset must be rank 3 or rank 1 but got rank \"+s.rank+\".\"})),nc(u,c,l,s,i,a)}var sc=An({batchNormalization3d_:function(t,e,n,r,o,a){return void 0===r&&(r=.001),Qu(),ic(t,e,n,a,o,r)}}),uc=An({batchNorm3d_:ic});function cc(t,e,n,r,o,a){var i,s,u=gn(t,\"x\",\"batchNorm\"),c=gn(e,\"mean\",\"batchNorm\"),l=gn(n,\"variance\",\"batchNorm\");return null!=o&&(i=gn(o,\"scale\",\"batchNorm\")),null!=r&&(s=gn(r,\"offset\",\"batchNorm\")),C(4===u.rank,(function(){return\"Error in batchNorm4D: x must be rank 4 but got rank \"+u.rank+\".\"})),C(4===c.rank||1===c.rank,(function(){return\"Error in batchNorm4D: mean must be rank 4 or rank 1 but got rank \"+c.rank+\".\"})),C(4===l.rank||1===l.rank,(function(){return\"Error in batchNorm4D: variance must be rank 4 or rank 1 but got rank \"+l.rank+\".\"})),null!=i&&C(4===i.rank||1===i.rank,(function(){return\"Error in batchNorm4D: scale must be rank 4 or rank 1 but got rank \"+i.rank+\".\"})),null!=s&&C(4===s.rank||1===s.rank,(function(){return\"Error in batchNorm4D: offset must be rank 4 or rank 1 but got rank \"+s.rank+\".\"})),nc(u,c,l,s,i,a)}var lc=An({batchNormalization4d_:function(t,e,n,r,o,a){return void 0===r&&(r=.001),Qu(),cc(t,e,n,a,o,r)}}),hc=An({batchNorm4d_:cc});var fc=An({broadcastTo_:function(t,e){var n=gn(t,\"broadcastTo\",\"x\"),r=n.shape;if(e.some((function(t){return!(t>0)||t%1!=0})))throw new Error(\"broadcastTo(): Invalid broadcast shape [\"+e+\"].\");if(e.length<n.rank)throw new Error(\"broadcastTo(): shape.length=\"+e.length+\" < input.rank=\"+n.rank+\".\");if(e.length>n.rank){for(var o=n.shape.slice();o.length<e.length;)o.unshift(1);n=n.reshape(o)}for(var a=n.shape,i=Array.from(e),s=e.length-1;s>=0;s--)if(a[s]===e[s])i[s]=1;else if(1!==n.shape[s])throw new Error(\"broadcastTo(): [\"+r+\"] cannot be broadcast to [\"+e+\"].\");var u=i.map((function(t,e){return t>1?e:-1})).filter((function(t){return t>=0}));if(0===u.length)return n.clone();var c={x:n},l={shape:e,inputShape:a};return Lt.runKernelFunc((function(t){return t.tile(n,i)}),c,(function(t){return{x:function(){return t.sum(u,!0)}}}),Sr,l)}});var dc=An({clone_:function(t){var e=gn(t,\"x\",\"clone\",null);return Lt.runKernelFunc((function(){return Lt.makeTensorFromDataId(e.dataId,e.shape,e.dtype)}),{x:e},null,Tr)}});var pc=An({logicalAnd_:function(t,e){var n=gn(t,\"a\",\"logicalAnd\",\"bool\"),r=gn(e,\"b\",\"logicalAnd\",\"bool\");return Pr(n.shape,r.shape),Lt.runKernelFunc((function(t){return t.logicalAnd(n,r)}),{a:n,b:r},null,\"LogicalAnd\")}}),vc=An({logicalNot_:function(t){var e=gn(t,\"x\",\"logicalNot\",\"bool\");return Lt.runKernelFunc((function(t){return t.logicalNot(e)}),{$x:e})}}),gc=An({logicalOr_:function(t,e){var n=gn(t,\"a\",\"logicalOr\",\"bool\"),r=gn(e,\"b\",\"logicalOr\",\"bool\");return Pr(n.shape,r.shape),Lt.runKernelFunc((function(t){return t.logicalOr(n,r)}),{$a:n,$b:r})}}),mc=An({logicalXor_:function(t,e){var n=gn(t,\"a\",\"logicalXor\",\"bool\"),r=gn(e,\"b\",\"logicalXor\",\"bool\");return Pr(n.shape,r.shape),gc(t,e).logicalAnd(pc(t,e).logicalNot())}}),yc=An({where_:function(t,e,n){var r=gn(e,\"a\",\"where\"),o=gn(n,\"b\",\"where\"),a=gn(t,\"condition\",\"where\",\"bool\");return E(r.shape,o.shape,\"Error in where: \"),1===a.rank?C(a.shape[0]===r.shape[0],(function(){return\"The first dimension of `a` must match the size of `condition`.\"})):E(a.shape,o.shape,\"Error in where: \"),Lt.runKernelFunc((function(t,e){var n=t.select(a,r,o);return e([a]),n}),{$condition:a,$a:r,$b:o},(function(t,e){var n=e[0];return{$condition:function(){return Xn(n).toFloat()},$a:function(){return t.mul(n.cast(t.dtype))},$b:function(){return t.mul(n.logicalNot().cast(t.dtype))}}}))}}),xc=function(t){return n(this,void 0,void 0,(function(){var e,n,o;return r(this,(function(r){switch(r.label){case 0:return[4,(e=gn(t,\"condition\",\"whereAsync\",\"bool\")).data()];case 1:return n=r.sent(),o=Ga(e.shape,n),t!==e&&e.dispose(),[2,o]}}))}))};var bc=An({divNoNan_:function(t,e){var n,r=gn(t,\"a\",\"div\"),o=gn(e,\"b\",\"div\");r=(n=Nt(r,o))[0],o=n[1];var a=Bo(r,o),i=Xn(a),s=o.equal(i);return yc(s,i,a)}});var wc=An({tile_:function(t,e){var n=gn(t,\"x\",\"tile\",null);C(n.rank===e.length,(function(){return\"Error in transpose: rank of input \"+n.rank+\" must match length of reps \"+e+\".\"}));var r=[n],o={x:n},a={reps:e};return Lt.runKernelFunc((function(t,r){var o=t.tile(n,e);return r([n]),o}),o,null,Dr,a,r)}});var Cc=An({eye_:function(t,e,n,r){void 0===r&&(r=\"float32\"),null==e&&(e=t);for(var o=er([t,e],r),a=t<=e?t:e,i=0;i<a;++i)o.set(1,i,i);var s=o.toTensor().as2D(t,e);if(null==n)return s;if(1===n.length)return wc(sr(s,0),[n[0],1,1]);if(2===n.length)return wc(sr(sr(s,0),0),[n[0],n[1],1,1]);if(3===n.length)return wc(sr(sr(sr(s,0),0),0),[n[0],n[1],n[2],1,1]);throw new Error(\"eye() currently supports only 1D and 2D batchShapes, but received \"+n.length+\"D.\")}});var Ec=An({multinomial_:function(t,e,n,r){void 0===r&&(r=!1);var o=gn(t,\"logits\",\"multinomial\"),a=o.size,i=o.rank;if(a<2)throw new Error(\"Error in multinomial: you need at least 2 outcomes, but got \"+a+\".\");if(i>2)throw new Error(\"Rank of probabilities must be 1 or 2, but is \"+i);n=n||Math.random();var s=1===i?o.as2D(1,-1):o,u=Lt.runKernelFunc((function(t){return t.multinomial(s,r,e,n)}),{logits2D:s});return 1===i?u.as1D():u}});var Rc=An({oneHot_:function(t,e,n,r){if(void 0===n&&(n=1),void 0===r&&(r=0),e<2)throw new Error(\"Error in oneHot: depth must be >=2, but it is \"+e);var o=gn(t,\"indices\",\"oneHot\",\"int32\"),a=o.shape.concat([e]),i={indices:o=o.flatten()},s={depth:e,onValue:n,offValue:r};return Lt.runKernelFunc((function(t,a){return a([o]),t.oneHot(o,e,n,r)}),i,null,Ar,s).reshape(a)}});var Ic=An({pad_:function(t,e,n){void 0===n&&(n=0);var r=gn(t,\"x\",\"pad\");if(0===r.rank)throw new Error(\"pad(scalar) is not defined. Pass non-scalar to pad\");var o={paddings:e,constantValue:n},a={x:r};return Lt.runKernelFunc((function(t,o){return o([r]),t.pad(r,e,n)}),a,null,Nr,o)}});var kc=An({pad1d_:function(t,e,n){return void 0===n&&(n=0),C(2===e.length,(function(){return\"Invalid number of paddings. Must be length of 2.\"})),Ic(t,[e],n)}});var Sc=An({pad2d_:function(t,e,n){return void 0===n&&(n=0),C(2===e.length&&2===e[0].length&&2===e[1].length,(function(){return\"Invalid number of paddings. Must be length of 2 each.\"})),Ic(t,e,n)}});var Ac=An({pad3d_:function(t,e,n){return void 0===n&&(n=0),C(3===e.length&&2===e[0].length&&2===e[1].length&&2===e[2].length,(function(){return\"Invalid number of paddings. Must be length of 2 each.\"})),Ic(t,e,n)}});var Tc=An({pad4d_:function(t,e,n){return void 0===n&&(n=0),C(4===e.length&&2===e[0].length&&2===e[1].length&&2===e[2].length&&2===e[3].length,(function(){return\"Invalid number of paddings. Must be length of 2 each.\"})),Ic(t,e,n)}});var Dc=An({rand_:function(t,e,n){var r=k(t),o=null;if(null==n||\"float32\"===n)o=new Float32Array(r);else if(\"int32\"===n)o=new Int32Array(r);else{if(\"bool\"!==n)throw new Error(\"Unknown data type \"+n);o=new Uint8Array(r)}for(var a=0;a<r;a++)o[a]=e();return Lt.makeTensor(o,t,n)}}),Nc=.001,Fc=.1;function _c(){return 32===Lt.backend.floatPrecision()?Nc:Fc}function Oc(t,e,n){var r=!0;if((V(t)||V(e))&&(r=!1),V(t)&&V(e)&&(r=!0),r){var o=t.constructor.name,a=e.constructor.name;if(o!==a)throw new Error(\"Arrays are of different type. Actual: \"+o+\". Expected: \"+a)}if(Array.isArray(t)&&Array.isArray(e)){var i=pn(t),s=pn(e);if(!S(i,s))throw new Error(\"Arrays have different shapes. Actual: [\"+i+\"]. Expected: [\"+s+\"]\")}var u=V(t)?t:I(t),c=V(e)?e:I(e);if(u.length!==c.length)throw new Error(\"Arrays have different lengths actual: \"+u.length+\" vs expected: \"+c.length+\".\\nActual:   \"+u+\".\\nExpected: \"+c+\".\");for(var l=0;l<c.length;++l){var h=u[l],f=c[l];if(!n(h,f))throw new Error(\"Arrays differ: actual[\"+l+\"] = \"+h+\", expected[\"+l+\"] = \"+f+\".\\nActual:   \"+u+\".\\nExpected: \"+c+\".\")}}function Mc(t,e,n){return!isFinite(t)&&!isFinite(e)||!(isNaN(t)||isNaN(e)||Math.abs(t-e)>n)}var Bc=Object.freeze({TEST_EPSILON_FLOAT16:Fc,expectArraysClose:function(t,e,n){return null==n&&(n=_c()),Oc(t,e,(function(t,e){return Mc(t,e,n)}))},testEpsilon:_c,expectPromiseToFail:function(t,e){t().then((function(){return e.fail()}),(function(){return e()}))},expectArraysEqual:function(t,e){var n=\"string\"==typeof e||\"number\"==typeof e||\"boolean\"==typeof e?[e]:e;return H(t)||H(t[0])||H(e)||H(e[0])?Oc(t,n,(function(t,e){return t==e})):Oc(t,e,(function(t,e){return Mc(t,e,0)}))},expectNumbersClose:function(t,e,n){if(null==n&&(n=_c()),!Mc(t,e,n))throw new Error(\"Numbers differ: actual === \"+t+\", expected === \"+e)},expectValuesInRange:function(t,e,n){for(var r=0;r<t.length;r++)if(t[r]<e||t[r]>n)throw new Error(\"Value out of range:\"+t[r]+\" low: \"+e+\", high: \"+n)},expectArrayBuffersEqual:function(t,e){expect(new Float32Array(t)).toEqual(new Float32Array(e))}}),Pc=function(){function t(t,e,n,r,o){this.mean=t,this.stdDev=e,this.dtype=n,this.nextVal=NaN,this.truncated=r,this.truncated&&(this.upper=this.mean+2*this.stdDev,this.lower=this.mean-2*this.stdDev);var a=o||Math.random();this.random=Yu(a.toString())}return t.prototype.nextValue=function(){if(!isNaN(this.nextVal)){var t=this.nextVal;return this.nextVal=NaN,t}for(var e,n,r=!1;!r;){var o=void 0,a=void 0,i=void 0;do{i=(o=2*this.random()-1)*o+(a=2*this.random()-1)*a}while(i>=1||0===i);var s=Math.sqrt(-2*Math.log(i)/i);e=this.mean+this.stdDev*o*s,n=this.mean+this.stdDev*a*s,this.truncated&&!this.isValidTruncated(e)||(r=!0)}return this.truncated&&!this.isValidTruncated(n)||(this.nextVal=this.convertValue(n)),this.convertValue(e)},t.prototype.convertValue=function(t){return null==this.dtype||\"float32\"===this.dtype?t:Math.round(t)},t.prototype.isValidTruncated=function(t){return t<=this.upper&&t>=this.lower},t}(),Lc=function(){function t(t,e,n,r){this.alpha=t,this.beta=1/e,this.dtype=n;var o=r||Math.random();this.randu=Yu(o.toString()),this.randn=new Pc(0,1,n,!1,this.randu()),this.d=t<1?t+2/3:t-1/3,this.c=1/Math.sqrt(9*this.d)}return t.prototype.nextValue=function(){for(var t,e,n,r,o,a;;){do{r=this.randn.nextValue(),a=1+this.c*r}while(a<=0);if(a*=a*a,e=1-.331*(t=r*r)*t,n=.5*t+this.d*(1-a+Math.log(a)),(o=this.randu())<e||Math.log(o)<n)break}return a=1/this.beta*this.d*a,this.alpha<1&&(a*=Math.pow(this.randu(),1/this.alpha)),this.convertValue(a)},t.prototype.convertValue=function(t){return\"float32\"===this.dtype?t:Math.round(t)},t}(),Wc=function(){function t(t,e,n,r){var o=this;if(void 0===t&&(t=0),void 0===e&&(e=1),this.canReturnFloat=function(){return null==o.dtype||\"float32\"===o.dtype},this.min=t,this.range=e-t,this.dtype=n,null==r&&(r=Math.random()),\"number\"==typeof r&&(r=r.toString()),!this.canReturnFloat()&&this.range<=1)throw new Error(\"The difference between \"+t+\" - \"+e+\" <= 1 and dtype is not float\");this.random=Yu(r)}return t.prototype.convertValue=function(t){return this.canReturnFloat()?t:Math.round(t)},t.prototype.nextValue=function(){return this.convertValue(this.min+this.range*this.random())},t}();var Uc=An({randomGamma_:function(t,e,n,r,o){if(void 0===n&&(n=1),void 0===r&&(r=\"float32\"),null==n&&(n=1),null==r&&(r=\"float32\"),\"float32\"!==r&&\"int32\"!==r)throw new Error(\"Unsupported data type \"+r);for(var a=new Lc(e,n,r,o),i=er(t,r),s=0;s<i.values.length;s++)i.values[s]=a.nextValue();return i.toTensor()}});var Vc=An({randomNormal_:function(t,e,n,r,o){if(void 0===e&&(e=0),void 0===n&&(n=1),null!=r&&\"bool\"===r)throw new Error(\"Unsupported data type \"+r);for(var a=new Pc(e,n,r,!1,o),i=er(t,r),s=0;s<i.values.length;s++)i.values[s]=a.nextValue();return i.toTensor()}});var zc=An({randomUniform_:function(t,e,n,r,o){void 0===e&&(e=0),void 0===n&&(n=1),void 0===r&&(r=\"float32\");for(var a=er(t,r),i=new Wc(e,n,null,o),s=0;s<a.values.length;s++)a.values[s]=i.nextValue();return a.toTensor()}});var Gc=An({square_:function(t){var e=gn(t,\"x\",\"square\"),n=[e];return Lt.runKernelFunc((function(t,n){return n([e]),t.square(e)}),{x:e},null,\"Square\",{},n,[])}});var Hc=An({squaredDifference_:function(t,e){var n,r=gn(t,\"a\",\"squaredDifference\"),o=gn(e,\"b\",\"squaredDifference\");n=Nt(r,o),r=n[0],o=n[1],Pr(r.shape,o.shape);var a={a:r,b:o},i=[r,o];return Lt.runKernelFunc((function(t,e){var n=t.squaredDifference(r,o);return e([r,o]),n}),a,(function(t,e){var n=e[0],r=e[1],o=On(2);return{a:function(){return t.mul(n.sub(r).mul(o))},b:function(){return t.mul(r.sub(n).mul(o))}}}),Er,{},i,[])}});var qc=An({truncatedNormal_:function(t,e,n,r,o){if(void 0===e&&(e=0),void 0===n&&(n=1),null!=r&&\"bool\"===r)throw new Error(\"Unsupported data type $ { dtype }\");for(var a=new Pc(e,n,r,!0,o),i=er(t,r),s=0;s<i.values.length;s++)i.values[s]=a.nextValue();return i.toTensor()}});var Kc=An({equal_:function(t,e){var n,r=gn(t,\"a\",\"equal\"),o=gn(e,\"b\",\"equal\");return n=Nt(r,o),r=n[0],o=n[1],Pr(r.shape,o.shape),Lt.runKernelFunc((function(t){return t.equal(r,o)}),{$a:r,$b:o})}}),jc=An({equalStrict_:function(t,e){var n=gn(t,\"a\",\"equalStrict\"),r=gn(e,\"b\",\"equalStrict\");return E(n.shape,r.shape,\"Error in equalStrict: \"),n.equal(r)}}),Xc=An({greater_:function(t,e){var n,r=gn(t,\"a\",\"greater\"),o=gn(e,\"b\",\"greater\");return n=Nt(r,o),r=n[0],o=n[1],Pr(r.shape,o.shape),Lt.runKernelFunc((function(t){return t.greater(r,o)}),{a:r,b:o},null,\"Greater\")}}),Yc=An({greaterEqual_:function(t,e){var n,r=gn(t,\"a\",\"greaterEqual\"),o=gn(e,\"b\",\"greaterEqual\");return n=Nt(r,o),r=n[0],o=n[1],Pr(r.shape,o.shape),Lt.runKernelFunc((function(t,e){var n=t.greaterEqual(r,o);return e([r,o]),n}),{a:r,b:o},(function(t,e){var n=e[0],r=e[1];return{a:function(){return Xn(n)},b:function(){return Xn(r)}}}),\"GreaterEqual\")}}),$c=An({greaterEqualStrict_:function(t,e){var n=gn(t,\"a\",\"greaterEqualStrict\"),r=gn(e,\"b\",\"greaterEqualStrict\");return E(n.shape,r.shape,\"Error in greaterEqualStrict: \"),n.greaterEqual(r)}}),Qc=An({greaterStrict_:function(t,e){var n=gn(t,\"a\",\"greaterStrict\"),r=gn(e,\"b\",\"greaterStrict\");return E(n.shape,r.shape,\"Error in greaterStrict: \"),n.greater(r)}}),Jc=An({less_:function(t,e){var n,r=gn(t,\"a\",\"less\"),o=gn(e,\"b\",\"less\");return n=Nt(r,o),r=n[0],o=n[1],Pr(r.shape,o.shape),Lt.runKernelFunc((function(t){return t.less(r,o)}),{a:r,b:o},null,\"Less\")}}),Zc=An({lessEqual_:function(t,e){var n,r=gn(t,\"a\",\"lessEqual\"),o=gn(e,\"b\",\"lessEqual\");return n=Nt(r,o),r=n[0],o=n[1],Pr(r.shape,o.shape),Lt.runKernelFunc((function(t,e){var n=t.lessEqual(r,o);return e([r,o]),n}),{a:r,b:o},null,\"LessEqual\")}}),tl=An({lessEqualStrict_:function(t,e){var n=gn(t,\"a\",\"lessEqualStrict\"),r=gn(e,\"b\",\"lessEqualStrict\");return E(n.shape,r.shape,\"Error in lessEqualStrict: \"),n.lessEqual(r)}}),el=An({lessStrict_:function(t,e){var n=gn(t,\"a\",\"lessStrict\"),r=gn(e,\"b\",\"lessStrict\");return E(n.shape,r.shape,\"Error in lessStrict: \"),n.less(r)}}),nl=An({notEqual_:function(t,e){var n,r=gn(t,\"a\",\"notEqual\"),o=gn(e,\"b\",\"notEqual\");return n=Nt(r,o),r=n[0],o=n[1],Pr(r.shape,o.shape),Lt.runKernelFunc((function(t){return t.notEqual(r,o)}),{a:r,b:o},null,\"NotEqual\")}}),rl=An({notEqualStrict_:function(t,e){var n=gn(t,\"a\",\"notEqualStrict\"),r=gn(e,\"b\",\"notEqualStrict\");return E(n.shape,r.shape,\"Error in notEqualStrict: \"),n.notEqual(r)}});function ol(t,e){for(var n=[],r=t;r<e;++r)n.push(r);return n}function al(t){for(var e=[],n=0;n<t.length;++n)for(var r=0;r<t[n].length;++r)e.push(t[n][r]);return e}var il=An({gather_:function(t,e,n){void 0===n&&(n=0);var r=gn(t,\"x\",\"gather\"),o=gn(e,\"indices\",\"gather\",\"int32\");n=O(n,r.shape)[0];var a=function(t,e,n){for(var r=t.shape[n],o=[],a=1,i=1,s=0;s<n;s++)o.push(t.shape[s]),a*=t.shape[s];for(s=0;s<e.rank;s++)o.push(e.shape[s]);for(s=n+1;s<t.rank;s++)o.push(t.shape[s]),i*=t.shape[s];return{batchSize:a,sliceSize:i,dimSize:r,outputShape:o}}(r,o,n);return Lt.runKernelFunc((function(t,e){var a=t.gather(r,o.flatten(),n);return e([o]),a}),{x:r,indices:o},(function(t,e){var o=e[0];return{x:function(){var e=r.shape,a=o.size,i=e.slice(0,n),s=i.length,u=e.slice(n,e.length).slice(1),c=u.length,l=ol(0,s),h=ol(s+1,s+1+c),f=al([i,[a],u]),d=t.reshape(f),p=o.reshape([a]),v=al([[s],l,h]),g=d.transpose(v),m=sl(g,p,r.shape[n]),y=Rn(v);return m=m.transpose(y)},indices:function(){return o}}}),\"Gather\",{axis:n}).reshape(a.outputShape)}}),sl=An({unsortedSegmentSum_:function(t,e,n){var r=gn(t,\"x\",\"unsortedSegmentSum\"),o=gn(e,\"segmentIds\",\"unsortedSegmentSum\",\"int32\");return C(A(n),(function(){return\"numSegments must be of dtype int\"})),Lt.runKernelFunc((function(t,e){var a=t.unsortedSegmentSum(r,o,n);return e([o]),a}),{$x:r},(function(t,e){var n=e[0];return{$x:function(){return function(t,e){for(var n=Eo(e,Xn(e)),r=il(t,n),o=Yc(e,On(0,\"int32\")),a=r.rank-o.rank,i=0;i<a;++i)o=sr(o,i+1);o=pc(o,zn(r.shape,\"bool\"));var s=Xn(r);return yc(o,r,s)}(t,n)}}}))}});var ul=function(t,e,o){return n(this,void 0,void 0,(function(){var n,a,i,s,u,c,l,h,f,d,p,v,g;return r(this,(function(r){switch(r.label){case 0:for(n=gn(t,\"tensor\",\"boolMask\"),a=gn(e,\"mask\",\"boolMask\",\"bool\"),i=null==o?0:o,s=a.rank,u=n.shape,C(s>0,(function(){return\"mask cannot be scalar\"})),E(u.slice(i,i+s),a.shape,\"mask's shape must match the first K dimensions of tensor's shape,\"),c=1,l=i;l<i+s;l++)c*=u[l];return h=u.slice(0,i).concat([c],u.slice(i+s)),f=n.reshape(h),d=a.reshape([-1]),[4,xc(d)];case 1:return p=r.sent(),v=p.squeeze([1]),g=il(f,v,i),t!==n&&n.dispose(),e!==a&&a.dispose(),v.dispose(),f.dispose(),d.dispose(),p.dispose(),[2,g]}}))}))};function cl(t,e,n,r,o,a,i){void 0===a&&(a=\"NHWC\"),C(t.length===e.rank,(function(){return\"Length of inShape (\"+t.length+\") and rank of dy (\"+e.rank+\") must match\"}));var s=t,u=e,c=!1;3===e.rank&&(c=!0,u=e.as4D(1,e.shape[0],e.shape[1],e.shape[2]),s=[1,t[0],t[1],t[2]]),C(4===s.length,(function(){return\"Error in conv2dDerInput: inShape must be length 4, but got length \"+s.length+\".\"})),C(4===u.rank,(function(){return\"Error in conv2dDerInput: dy must be rank 4, but got rank \"+u.rank})),C(4===n.rank,(function(){return\"Error in conv2dDerInput: filter must be rank 4, but got rank \"+n.rank}));var l=\"NHWC\"===a?s[3]:s[1],h=\"NHWC\"===a?u.shape[3]:u.shape[1];C(l===n.shape[2],(function(){return\"Error in conv2dDerInput: depth of input (\"+l+\") must match input depth for filter \"+n.shape[2]+\".\"})),C(h===n.shape[3],(function(){return\"Error in conv2dDerInput: depth of output (\"+h+\") must match output depth for filter \"+n.shape[3]+\".\"})),null!=i&&C(A(o),(function(){return\"Error in conv2dDerInput: pad must be an integer when using, dimRoundingMode \"+i+\" but got pad \"+o+\".\"}));var f=Ea(a),d=pa(s,n.shape,r,1,o,i,!1,f),p=Lt.runKernelFunc((function(t,e){var r=t.conv2dDerInput(u,n,d);return e([n,u]),r}),{dy4D:u,filter:n},(function(t,e){var n=e[0],s=e[1];return{dy4D:function(){return dl(t,n,r,o,a,1,i)},filter:function(){return vl(t,s,n.shape,r,o,a,i)}}}));return c?p.as3D(p.shape[1],p.shape[2],p.shape[3]):p}function ll(t){var e=function(t){return\"number\"==typeof t?[t,t,t]:2===t.length?[t[0],t[1],1]:t}(t),n=e[0],r=e[1],o=e[2];return 1===n&&1===r&&1===o}function hl(t,e,n,r,o){C(t.length===e.rank,(function(){return\"Length of inShape (\"+t.length+\") and rank of dy (\"+e.rank+\") must match\"}));var a=t,i=e,s=!1;4===e.rank&&(s=!0,i=e.as5D(1,e.shape[0],e.shape[1],e.shape[2],e.shape[3]),a=[1,t[0],t[1],t[2],t[3]]);var u=a[4],c=i.shape[4];C(5===a.length,(function(){return\"Error in conv3dDerInput: inShape must be length 5, but got length \"+a.length+\".\"})),C(5===i.rank,(function(){return\"Error in conv3dDerInput: dy must be rank 5, but got rank \"+i.rank})),C(5===n.rank,(function(){return\"Error in conv3dDerInput: filter must be rank 5, but got rank \"+n.rank})),C(u===n.shape[3],(function(){return\"Error in conv3dDerInput: depth of input (\"+u+\") must match input depth for filter \"+n.shape[3]+\".\"})),C(c===n.shape[4],(function(){return\"Error in conv3dDerInput: depth of output (\"+c+\") must match output depth for filter \"+n.shape[4]+\".\"}));var l=va(a,n.shape,r,1,o),h=Lt.runKernelFunc((function(t){return t.conv3dDerInput(i,n,l)}),{dy5D:i});return s?h.as4D(h.shape[1],h.shape[2],h.shape[3],h.shape[4]):h}var fl=An({conv1d_:function(t,e,n,r,o,a,i){void 0===o&&(o=\"NWC\"),void 0===a&&(a=1);var s=gn(t,\"x\",\"conv1d\"),u=gn(e,\"filter\",\"conv1d\"),c=s,l=!1;2===s.rank&&(l=!0,c=s.as3D(1,s.shape[0],s.shape[1])),C(3===c.rank,(function(){return\"Error in conv1d: input must be rank 3, but got rank \"+c.rank+\".\"})),C(3===u.rank,(function(){return\"Error in conv1d: filter must be rank 3, but got rank \"+u.rank+\".\"})),null!=i&&C(A(r),(function(){return\"Error in conv1d: pad must be an integer when using, dimRoundingMode \"+i+\" but got pad \"+r+\".\"})),C(c.shape[2]===u.shape[1],(function(){return\"Error in conv1d: depth of input (\"+c.shape[2]+\") must match input depth for filter \"+u.shape[1]+\".\"})),C(Ca(n,a),(function(){return\"Error in conv1D: Either stride or dilation must be 1. Got stride \"+n+\" and dilation '\"+a+\"'\"})),C(\"NWC\"===o,(function(){return\"Error in conv1d: got dataFormat of \"+o+\" but only NWC is currently supported.\"}));var h=u.as4D(1,u.shape[0],u.shape[1],u.shape[2]),f=c.as4D(c.shape[0],1,c.shape[1],c.shape[2]),d=dl(f,h,[1,n],r,\"NHWC\",[1,a],i);return l?d.as2D(d.shape[2],d.shape[3]):d.as3D(d.shape[0],d.shape[2],d.shape[3])}}),dl=An({conv2d_:function(t,e,n,r,o,a,i){void 0===o&&(o=\"NHWC\"),void 0===a&&(a=[1,1]);var s=gn(t,\"x\",\"conv2d\"),u=gn(e,\"filter\",\"conv2d\"),c=s,l=!1;3===s.rank&&(l=!0,c=s.as4D(1,s.shape[0],s.shape[1],s.shape[2])),C(4===c.rank,(function(){return\"Error in conv2d: input must be rank 4, but got rank \"+c.rank+\".\"})),C(4===u.rank,(function(){return\"Error in conv2d: filter must be rank 4, but got rank \"+u.rank+\".\"})),null!=i&&C(A(r),(function(){return\"Error in conv2d: pad must be an integer when using, dimRoundingMode \"+i+\" but got pad \"+r+\".\"}));var h=\"NHWC\"===o?c.shape[3]:c.shape[1];C(h===u.shape[2],(function(){return\"Error in conv2d: depth of input (\"+h+\") must match input depth for filter \"+u.shape[2]+\".\"})),C(Ca(n,a),(function(){return\"Error in conv2D: Either strides or dilations must be 1. Got strides \"+n+\" and dilations '\"+a+\"'\"}));var f=Ea(o),d=pa(c.shape,u.shape,n,a,r,i,!1,f),p=[u,c],v=Lt.runKernelFunc((function(t,e){var n=t.conv2d(c,u,d);return e([u,c]),n}),{x:c,filter:u},(function(t,e){var i=e,s=i[0],u=i[1];return C(wa(a),(function(){return\"Error in gradient of conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '\"+a+\"'\"})),{x:function(){return gl(u.shape,t,s,n,r,o)},filter:function(){return vl(u,t,s.shape,n,r,o)}}}),\"Conv2D\",d,p);return l?v.as3D(v.shape[1],v.shape[2],v.shape[3]):v}}),pl=An({conv3d_:function(t,e,n,r,o,a){void 0===o&&(o=\"NDHWC\"),void 0===a&&(a=[1,1,1]);var i=gn(t,\"x\",\"conv3d\"),s=gn(e,\"filter\",\"conv3d\"),u=i,c=!1;4===i.rank&&(c=!0,u=i.as5D(1,i.shape[0],i.shape[1],i.shape[2],i.shape[3])),C(5===u.rank,(function(){return\"Error in conv3d: input must be rank 5, but got rank \"+u.rank+\".\"})),C(5===s.rank,(function(){return\"Error in conv3d: filter must be rank 5, but got rank \"+s.rank+\".\"})),C(u.shape[4]===s.shape[3],(function(){return\"Error in conv3d: depth of input (\"+u.shape[4]+\") must match input depth for filter \"+s.shape[3]+\".\"})),C(function(t,e){return ll(t)||ll(e)}(n,a),(function(){return\"Error in conv3D: Either strides or dilations must be 1. Got strides \"+n+\" and dilations '\"+a+\"'\"})),C(\"NDHWC\"===o,(function(){return\"Error in conv3d: got dataFormat of \"+o+\" but only NDHWC is currently supported.\"}));var l=va(u.shape,s.shape,n,a,r),h=Lt.runKernelFunc((function(t,e){var n=t.conv3d(u,s,l);return e([u,s]),n}),{x:u,$filter:s},(function(t,e){C(ll(a),(function(){return\"Error in gradient of conv3D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '\"+a+\"'\"}));var o=e[0],i=e[1];return{x:function(){return hl(o.shape,t,i,n,r)},$filter:function(){return function(t,e,n,r,o){var a=t;4===t.rank&&(a=t.as5D(1,t.shape[0],t.shape[1],t.shape[2],t.shape[3]));var i=e;4===i.rank&&(i=e.as5D(1,e.shape[0],e.shape[1],e.shape[2],e.shape[3]));C(5===a.rank,(function(){return\"Error in conv3dDerFilter: input must be rank 5, but got shape \"+a.shape+\".\"})),C(5===i.rank,(function(){return\"Error in conv3dDerFilter: dy must be rank 5, but got shape \"+i.shape+\".\"})),C(5===n.length,(function(){return\"Error in conv3dDerFilter: filterShape must be length 5, but got \"+n+\".\"})),C(a.shape[4]===n[3],(function(){return\"Error in conv3dDerFilter: depth of input \"+a.shape[4]+\") must match input depth in filter (\"+n[3]+\".\"})),C(i.shape[4]===n[4],(function(){return\"Error in conv3dDerFilter: depth of dy (\"+i.shape[4]+\") must match output depth for filter (\"+n[4]+\").\"}));var s=va(a.shape,n,r,1,o);return Lt.runKernelFunc((function(t){return t.conv3dDerFilter(a,i,s)}),{x5D:a,dy5D:i})}(o,t,i.shape,n,r)}}}));return c?h.as4D(h.shape[1],h.shape[2],h.shape[3],h.shape[4]):h}}),vl=An({conv2dDerFilter_:function(t,e,n,r,o,a,i){void 0===a&&(a=\"NHWC\");var s=t;3===t.rank&&(s=t.as4D(1,t.shape[0],t.shape[1],t.shape[2]));var u=e;3===u.rank&&(u=e.as4D(1,e.shape[0],e.shape[1],e.shape[2])),C(4===s.rank,(function(){return\"Error in conv2dDerFilter: input must be rank 4, but got shape \"+s.shape+\".\"})),C(4===u.rank,(function(){return\"Error in conv2dDerFilter: dy must be rank 4, but got shape \"+u.shape+\".\"})),C(4===n.length,(function(){return\"Error in conv2dDerFilter: filterShape must be length 4, but got \"+n+\".\"}));var c=\"NHWC\"===a?s.shape[3]:s.shape[1],l=\"NHWC\"===a?u.shape[3]:u.shape[1];C(c===n[2],(function(){return\"Error in conv2dDerFilter: depth of input \"+c+\") must match input depth in filter (\"+n[2]+\".\"})),C(l===n[3],(function(){return\"Error in conv2dDerFilter: depth of dy (\"+l+\") must match output depth for filter (\"+n[3]+\").\"})),null!=i&&C(A(o),(function(){return\"Error in conv2dDerFilter: pad must be an integer when using, dimRoundingMode \"+i+\" but got pad \"+o+\".\"}));var h=Ea(a),f=pa(s.shape,n,r,1,o,i,!1,h);return Lt.runKernelFunc((function(t){return t.conv2dDerFilter(s,u,f)}),{x4D:s,dy4D:u})}}),gl=An({conv2dDerInput_:cl}),ml=An({depthwiseConv2d_:function(t,e,n,r,o,a,i){void 0===o&&(o=\"NHWC\"),void 0===a&&(a=[1,1]);var s=gn(t,\"x\",\"depthwiseConv2d\"),u=gn(e,\"filter\",\"depthwiseConv2d\"),c=s,l=!1;3===s.rank&&(l=!0,c=s.as4D(1,s.shape[0],s.shape[1],s.shape[2])),C(4===c.rank,(function(){return\"Error in depthwiseConv2d: input must be rank 4, but got rank \"+c.rank+\".\"})),C(4===u.rank,(function(){return\"Error in depthwiseConv2d: filter must be rank 4, but got rank \"+u.rank+\".\"})),C(c.shape[3]===u.shape[2],(function(){return\"Error in depthwiseConv2d: number of input channels (\"+c.shape[3]+\") must match the inChannels dimension in filter \"+u.shape[2]+\".\"})),null==a&&(a=[1,1]),C(Ca(n,a),(function(){return\"Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides \"+n+\" and dilations '\"+a+\"'\"})),null!=i&&C(A(r),(function(){return\"Error in depthwiseConv2d: pad must be an integer when using, dimRoundingMode \"+i+\" but got pad \"+r+\".\"}));var h=pa(c.shape,u.shape,n,a,r,i,!0),f=[c,u],d=Lt.runKernelFunc((function(t,e){var n=t.depthwiseConv2D(c,u,h);return e([c,u]),n}),{x:c,filter:u},(function(t,e){C(wa(a),(function(){return\"Error in gradient of depthwiseConv2d: dilation rates greater than 1 are not yet supported. Got dilations '\"+a+\"'\"}));var n=e[0],r=e[1];return{x:function(){return yl(n.shape,t,r,h)},filter:function(){return xl(n,t,r.shape,h)}}}),\"DepthwiseConv2dNative\",h,f);return l?d.as3D(d.shape[1],d.shape[2],d.shape[3]):d}}),yl=An({depthwiseConv2dDerInput_:function(t,e,n,r){var o=e,a=!1;3===e.rank&&(a=!0,o=e.as4D(1,e.shape[0],e.shape[1],e.shape[2]));var i=Lt.runKernelFunc((function(t){return t.depthwiseConv2DDerInput(o,n,r)}),{dy4D:o});return a?i.as3D(i.shape[1],i.shape[2],i.shape[3]):i}}),xl=An({depthwiseConv2dDerFilter_:function(t,e,n,r){var o=t;3===t.rank&&(o=t.as4D(1,t.shape[0],t.shape[1],t.shape[2]));var a=e;return 3===a.rank&&(a=e.as4D(1,e.shape[0],e.shape[1],e.shape[2])),Lt.runKernelFunc((function(t){return t.depthwiseConv2DDerFilter(o,a,r)}),{x4D:o,dy4D:a})}}),bl=An({separableConv2d_:function(t,e,n,r,o,a,i){void 0===a&&(a=[1,1]),void 0===i&&(i=\"NHWC\");var s=gn(t,\"x\",\"separableConv2d\"),u=gn(e,\"depthwiseFilter\",\"separableConv2d\"),c=gn(n,\"pointwiseFilter\",\"separableConv2d\"),l=s,h=!1;if(3===s.rank&&(h=!0,l=s.as4D(1,s.shape[0],s.shape[1],s.shape[2])),\"NCHW\"===i)throw new Error(\"separableConv2d currently does not support dataFormat NCHW; only NHWC is supported\");C(4===l.rank,(function(){return\"Error in separableConv2d: input must be rank 4, but got rank \"+l.rank+\".\"})),C(4===u.rank,(function(){return\"Error in separableConv2d: depthwise filter must be rank 4, but got rank \"+u.rank+\".\"})),C(4===c.rank,(function(){return\"Error in separableConv2d: pointwise filter must be rank 4, but got rank \"+u.rank+\".\"})),C(1===c.shape[0],(function(){return\"Error in separableConv2d: the first dimension of pointwise filter  must be 1, but got \"+c.shape[0]+\".\"})),C(1===c.shape[1],(function(){return\"Error in separableConv2d: the second dimension of pointwise filter must be 1, but got \"+c.shape[1]+\".\"}));var f=u.shape[2],d=u.shape[3];C(c.shape[2]===f*d,(function(){return\"Error in separableConv2d: the third dimension of pointwise filter must be \"+f*d+\", but got \"+c.shape[2]+\".\"}));var p=ml(l,u,r,o,i,a),v=dl(p,c,1,\"valid\",i);return h?v.as3D(v.shape[1],v.shape[2],v.shape[3]):v}}),wl=An({conv2dTranspose_:function(t,e,n,r,o,a){return cl(n,gn(t,\"x\",\"conv2dTranspose\"),gn(e,\"filter\",\"conv2dTranspose\"),r,o,\"NHWC\",a)}}),Cl=An({conv3dTranspose_:function(t,e,n,r,o){return hl(n,gn(t,\"x\",\"conv3dTranspose\"),gn(e,\"filter\",\"conv3dTranspose\"),r,o)}});var El=An({matMul_:function(t,e,n,r){var o;void 0===n&&(n=!1),void 0===r&&(r=!1);var a=gn(t,\"a\",\"matMul\"),i=gn(e,\"b\",\"matMul\");o=Nt(a,i),a=o[0],i=o[1];var s=n?a.shape[a.rank-2]:a.shape[a.rank-1],u=r?i.shape[i.rank-1]:i.shape[i.rank-2],c=n?a.shape[a.rank-1]:a.shape[a.rank-2],l=r?i.shape[i.rank-2]:i.shape[i.rank-1],h=a.shape.slice(0,-2),f=i.shape.slice(0,-2),d=k(h),p=k(f);C(a.rank>=2&&i.rank>=2&&a.rank===i.rank,(function(){return\"Error in matMul: inputs must have the same rank of at least 2, got ranks \"+a.rank+\" and \"+i.rank+\".\"})),C(S(h,f),(function(){return\"Error in matMul: outer dimensions (\"+h+\") and (\"+f+\") of Tensors with shapes \"+a.shape+\" and \"+i.shape+\" must match.\"})),C(s===u,(function(){return\"Error in matMul: inner shapes (\"+s+\") and (\"+u+\") of Tensors with shapes \"+a.shape+\" and \"+i.shape+\" and transposeA=\"+n+\" and transposeB=\"+r+\" must match.\"}));var v=a.shape.slice(0,-2).concat([c,l]),g=n?a.as3D(d,s,c):a.as3D(d,c,s),m=r?i.as3D(p,l,u):i.as3D(p,u,l),y={transposeA:n,transposeB:r};return Lt.runKernelFunc((function(t,e){var o=t.batchMatMul(g,m,n,r);return e([g,m]),o}),{a:g,b:m},(function(t,e){var o=e,a=o[0],i=o[1];return n||r?!n&&r?{a:function(){return t.matMul(i,!1,!1)},b:function(){return t.matMul(a,!0,!1)}}:n&&!r?{a:function(){return i.matMul(t,!1,!0)},b:function(){return a.matMul(t,!1,!1)}}:{a:function(){return i.matMul(t,!0,!0)},b:function(){return t.matMul(a,!0,!0)}}:{a:function(){return t.matMul(i,!1,!0)},b:function(){return a.matMul(t,!0,!1)}}}),\"BatchMatMul\",y).reshape(v)}}),Rl=An({dot_:function(t,e){var n=gn(t,\"t1\",\"dot\"),r=gn(e,\"t2\",\"dot\");C(!(1!==n.rank&&2!==n.rank||1!==r.rank&&2!==r.rank),(function(){return\"Error in dot: inputs must all be rank 1 or 2, but got ranks \"+n.rank+\" and \"+r.rank+\".\"}));var o=1===n.rank?n.size:n.shape[1],a=1===r.rank?r.size:r.shape[0];return C(o===a,(function(){return\"Error in dot: inner dimensions of inputs must match, but got \"+o+\" and \"+a+\".\"})),1===n.rank&&1===r.rank?n.as2D(1,-1).matMul(r.as2D(-1,1)).asScalar():1===n.rank&&2===r.rank?n.as2D(1,-1).matMul(r.as2D(r.shape[0],r.shape[1])).as1D():2===n.rank&&1===r.rank?n.matMul(r.as2D(-1,1)).as1D():n.matMul(r.as2D(r.shape[0],r.shape[1]))}}),Il=An({outerProduct_:function(t,e){var n=gn(t,\"v1\",\"outerProduct\"),r=gn(e,\"v2\",\"outerProduct\");return C(1===n.rank&&1===r.rank,(function(){return\"Error in outerProduct: inputs must be rank 1, but got ranks \"+n.rank+\" and \"+r.rank+\".\"})),n.as2D(-1,1).matMul(r.as2D(1,-1))}});var kl=An({reverse_:function(t,e){var n=gn(t,\"x\",\"reverse\");if(0===n.rank)return n.clone();var r=O(e,n.shape);return Lt.runKernelFunc((function(t){return t.reverse(n,r)}),{$x:n},(function(t){return{$x:function(){return t.reverse(r)}}})).reshapeAs(n)}}),Sl=An({reverse1d_:function(t){var e=gn(t,\"x\",\"reverse\");return C(1===e.rank,(function(){return\"Error in reverse1D: x must be rank 1 but got rank \"+e.rank+\".\"})),kl(e,0)}}),Al=An({reverse2d_:function(t,e){var n=gn(t,\"x\",\"reverse\");return C(2===n.rank,(function(){return\"Error in reverse2D: x must be rank 2 but got rank \"+n.rank+\".\"})),kl(n,e)}}),Tl=An({reverse3d_:function(t,e){var n=gn(t,\"x\",\"reverse\");return C(3===n.rank,(function(){return\"Error in reverse3D: x must be rank 3 but got rank \"+n.rank+\".\"})),kl(n,e)}}),Dl=An({reverse4d_:function(t,e){var n=gn(t,\"x\",\"reverse\");return C(4===n.rank,(function(){return\"Error in reverse4D: x must be rank 4 but got rank \"+n.rank+\".\"})),kl(n,e)}});function Nl(t,e,n,r,o,a){var i=gn(t,\"x\",\"maxPool\"),s=i,u=!1;3===i.rank&&(u=!0,s=i.as4D(1,i.shape[0],i.shape[1],i.shape[2])),null==r&&(r=[1,1]),C(4===s.rank,(function(){return\"Error in maxPool: input must be rank 4 but got rank \"+s.rank+\".\"})),C(Ca(n,r),(function(){return\"Error in maxPool: Either strides or dilations must be 1. Got strides \"+n+\" and dilations '\"+r+\"'\"})),null!=a&&C(A(o),(function(){return\"Error in maxPool: pad must be an integer when using, dimRoundingMode \"+a+\" but got pad \"+o+\".\"}));var c=fa(s.shape,e,n,r,o,a);if(1===c.filterWidth&&1===c.filterHeight&&S(c.inShape,c.outShape))return i.clone();var l=[s],h=Lt.runKernelFunc((function(t,e){var n=t.maxPool(s,c);return e([s,n]),n}),{x:s},(function(t,a){var i=a[0],s=a[1];return{x:function(){return function(t,e,n,r,o,a,i,s){var u=gn(t,\"dy\",\"maxPoolBackprop\"),c=gn(e,\"input\",\"maxPoolBackprop\"),l=gn(n,\"output\",\"maxPoolBackprop\");C(c.rank===u.rank,(function(){return\"Rank of input (\"+c.rank+\") does not match rank of dy (\"+u.rank+\")\"})),null==a&&(a=[1,1]);C(Ca(o,a),(function(){return\"Error in maxPoolBackProp: Either strides or dilations must be 1. Got strides \"+o+\" and dilations '\"+a+\"'\"})),C(4===u.rank,(function(){return\"Error in maxPoolBackprop: dy must be rank 4 but got rank \"+u.rank+\".\"})),C(4===c.rank,(function(){return\"Error in maxPoolBackprop: input must be rank 4 but got rank \"+c.rank+\".\"})),null!=s&&C(A(i),(function(){return\"Error in maxPoolBackprop: pad must be an integer when using, dimRoundingMode \"+s+\" but got pad \"+i+\".\"}));var h=fa(c.shape,r,o,a,i,s);return Lt.runKernelFunc((function(t){return t.maxPoolBackprop(u,c,l,h)}),{$dy:u,$input:c})}(t,i,s,e,n,r,o)}}}),\"MaxPool\",c,l);return u?h.as3D(h.shape[1],h.shape[2],h.shape[3]):h}function Fl(t,e,n,r,o,a){var i=gn(t,\"x\",\"avgPool\",\"float32\");null==r&&(r=[1,1]),C(Ca(n,r),(function(){return\"Error in avgPool: Either strides or dilations must be 1. Got strides \"+n+\" and dilations '\"+r+\"'\"}));var s=i,u=!1;3===i.rank&&(u=!0,s=i.as4D(1,i.shape[0],i.shape[1],i.shape[2])),C(4===s.rank,(function(){return\"Error in avgPool: x must be rank 4 but got rank \"+s.rank+\".\"})),null!=a&&C(A(o),(function(){return\"Error in avgPool: pad must be an integer when using, dimRoundingMode \"+a+\" but got pad \"+o+\".\"}));var c=fa(s.shape,e,n,r,o,a);if(1===c.filterWidth&&1===c.filterHeight&&S(c.inShape,c.outShape))return i.clone();var l=Lt.runKernelFunc((function(t){return t.avgPool(s,c)}),{x:s},(function(t){return{x:function(){return function(t,e,n,r,o,a){var i=gn(t,\"dy\",\"avgPoolBackprop\"),s=gn(e,\"input\",\"avgPoolBackprop\");C(s.rank===i.rank,(function(){return\"Rank of input (\"+s.rank+\") does not match rank of dy (\"+i.rank+\")\"})),null==o&&(o=[1,1]);C(Ca(r,o),(function(){return\"Error in avgPoolBackprop: Either strides or dilations must be 1. Got strides \"+r+\" and dilations '\"+o+\"'\"}));var u=s,c=i,l=!1;3===s.rank&&(l=!0,u=s.as4D(1,s.shape[0],s.shape[1],s.shape[2]),c=i.as4D(1,i.shape[0],i.shape[1],i.shape[2]));C(4===c.rank,(function(){return\"Error in avgPoolBackprop: dy must be rank 4 but got rank \"+c.rank+\".\"})),C(4===u.rank,(function(){return\"Error in avgPoolBackprop: input must be rank 4 but got rank \"+u.rank+\".\"}));var h=fa(u.shape,n,r,o,a),f=Lt.runKernelFunc((function(t){return t.avgPoolBackprop(c,u,h)}),{dy4D:c,input4D:u});if(l)return f.as3D(f.shape[1],f.shape[2],f.shape[3]);return f}(t,s,e,n,r,o)}}}),\"AvgPool\",c);return l=l.cast(i.dtype),u?l.as3D(l.shape[1],l.shape[2],l.shape[3]):l}var _l=An({maxPool_:function(t,e,n,r,o){return Nl(t,e,n,1,r,o)}}),Ol=An({avgPool_:function(t,e,n,r,o){return Fl(t,e,n,1,r,o)}}),Ml=An({pool_:function(t,e,n,r,o,a){null==o&&(o=[1,1]),null==a&&(a=1),0===r&&(r=\"valid\");var i=gn(t,\"x\",\"maxPool\"),s=i,u=!1;3===i.rank&&(u=!0,s=i.as4D(1,i.shape[0],i.shape[1],i.shape[2])),C(Ca(a,o),(function(){return\"Error in pool: Either strides or dilations must be 1. Got strides \"+a+\" and dilations '\"+o+\"'\"}));var c,l=fa(s.shape,e,a,o,r),h=[l.dilationHeight,l.dilationWidth];c=\"same\"===r?function(t,e){var n=t.map((function(t,n){return t+(t-1)*(e[n]-1)})).map((function(t){return t-1})),r=n.map((function(t){return Math.floor(t/2)})),o=n.map((function(t,e){return t-r[e]}));return n.map((function(t,e){return[r[e],o[e]]}))}([l.filterHeight,l.filterWidth],h):[[0,0],[0,0]];var f=1===h[0]&&1===h[1],d=function(t,e,n){var r=n.map((function(t){return t[0]})),o=n.map((function(t){return t[1]})),a=t.concat(r,o),i=e.map((function(t,e){return(t-a[e]%t)%t})),s=o.map((function(t,e){return t+i[e]})),u=e.map((function(t,e){return[r[e],s[e]]})),c=e.map((function(t,e){return[0,i[e]]}));return[u,c]}([l.inHeight,l.inWidth],h,c),p=d[0],v=d[1],g=f?r:\"valid\",m=f?s:cr(s,h,p),y=(\"avg\"===n?function(){return Fl(m,e,a,1,g)}:function(){return Nl(m,e,a,1,g)})(),x=f?y:rr(y,h,v);return u?x.as3D(x.shape[1],x.shape[2],x.shape[3]):x}}),Bl=An({maxPool3d_:function(t,e,n,r,o,a,i){void 0===a&&(a=\"NDHWC\");var s=gn(t,\"x\",\"maxPool3d\"),u=s,c=!1;4===s.rank&&(c=!0,u=s.as5D(1,s.shape[0],s.shape[1],s.shape[2],s.shape[3])),null==i&&(i=[1,1,1]),C(5===u.rank,(function(){return\"Error in maxPool3d: x must be rank 5 but got rank \"+u.rank+\".\"})),C(\"NDHWC\"===a,(function(){return\"Error in maxPool3d: Only NDHWC is currently supported, but got dataFormat of \"+a})),C(Ca(n,i),(function(){return\"Error in maxPool3d: Either strides or dilations must be 1. Got strides \"+n+\" and dilations '\"+i+\"'\"})),null!=o&&C(A(r),(function(){return\"Error in maxPool3d: pad must be an integer when using, dimRoundingMode \"+o+\" but got pad \"+r+\".\"}));var l=da(u.shape,e,n,i,r,o,a),h=Lt.runKernelFunc((function(t,e){var n=t.maxPool3d(u,l);return e([u,n]),n}),{x:u},(function(t,a){var s=a[0],u=a[1];return{x:function(){return function(t,e,n,r,o,a,i,s){var u=gn(t,\"dy\",\"maxPool3dBackprop\"),c=gn(e,\"input\",\"maxPool3dBackprop\"),l=gn(n,\"output\",\"maxPool3dBackprop\"),h=u,f=c,d=l,p=!1;4===c.rank&&(p=!0,h=u.as5D(1,u.shape[0],u.shape[1],u.shape[2],u.shape[3]),f=c.as5D(1,c.shape[0],c.shape[1],c.shape[2],c.shape[3]),d=l.as5D(1,l.shape[0],l.shape[1],l.shape[2],l.shape[3]));C(5===h.rank,(function(){return\"Error in maxPool3dBackprop: dy must be rank 5 but got rank \"+h.rank+\".\"})),C(5===f.rank,(function(){return\"Error in maxPool3dBackprop: input must be rank 5 but got rank \"+f.rank+\".\"})),C(5===d.rank,(function(){return\"Error in maxPool3dBackprop: output must be rank 5 but got rank \"+d.rank+\".\"})),null==a&&(a=[1,1,1]);C(Ca(o,a),(function(){return\"Error in maxPool3dBackprop: Either strides or dilations must be 1. Got strides \"+o+\" and dilations '\"+a+\"'\"})),null!=s&&C(A(i),(function(){return\"Error in maxPool3dBackprop: pad must be an integer when using, dimRoundingMode \"+s+\" but got pad \"+i+\".\"}));var v=da(f.shape,r,o,a,i,s),g=Lt.runKernelFunc((function(t){return t.maxPool3dBackprop(h,f,d,v)}),{dy5D:h,input5D:f});if(p)return g.as4D(g.shape[1],g.shape[2],g.shape[3],g.shape[4]);return g}(t,s,u,e,n,i,r,o)}}}));return c?h.as4D(h.shape[1],h.shape[2],h.shape[3],h.shape[4]):h}}),Pl=An({avgPool3d_:function(t,e,n,r,o,a,i){void 0===a&&(a=\"NDHWC\");var s=gn(t,\"x\",\"avgPool3d\",\"float32\"),u=s,c=!1;4===s.rank&&(c=!0,u=s.as5D(1,s.shape[0],s.shape[1],s.shape[2],s.shape[3])),null==i&&(i=[1,1,1]),C(5===u.rank,(function(){return\"Error in avgPool3d: x must be rank 5 but got rank \"+u.rank+\".\"})),C(\"NDHWC\"===a,(function(){return\"Error in avgPool3d: Only NDHWC is currently supported, but got dataFormat of \"+a})),C(Ca(n,i),(function(){return\"Error in avgPool3d: Either strides or dilations must be 1. Got strides \"+n+\" and dilations '\"+i+\"'\"})),null!=o&&C(A(r),(function(){return\"Error in avgPool3d: pad must be an integer when using, dimRoundingMode \"+o+\" but got pad \"+r+\".\"}));var l=da(u.shape,e,n,i,r,o,a),h=Lt.runKernelFunc((function(t){return t.avgPool3d(u,l)}),{x:u},(function(t){return{x:function(){return function(t,e,n,r,o,a,i){var s=gn(t,\"dy\",\"avgPool3dBackprop\"),u=gn(e,\"input\",\"avgPool3dBackprop\"),c=s,l=u,h=!1;4===u.rank&&(h=!0,c=s.as5D(1,s.shape[0],s.shape[1],s.shape[2],s.shape[3]),l=u.as5D(1,u.shape[0],u.shape[1],u.shape[2],u.shape[3]));C(5===c.rank,(function(){return\"Error in avgPool3dBackprop: dy must be rank 5 but got rank \"+c.rank+\".\"})),C(5===l.rank,(function(){return\"Error in avgPool3dBackprop: input must be rank 5 but got rank \"+l.rank+\".\"})),null==o&&(o=[1,1,1]);C(Ca(r,o),(function(){return\"Error in avgPool3dBackprop: Either strides or dilations must be 1. Got strides \"+r+\" and dilations '\"+o+\"'\"})),null!=i&&C(A(a),(function(){return\"Error in maxPool3dBackprop: pad must be an integer when using, dimRoundingMode \"+i+\" but got pad \"+a+\".\"}));var f=da(l.shape,n,r,o,a,i),d=Lt.runKernelFunc((function(t){return t.avgPool3dBackprop(c,l,f)}),{dy5D:c,input5D:l});if(h)return d.as4D(d.shape[1],d.shape[2],d.shape[3],d.shape[4]);return d}(t,u,e,n,i,r,o)}}}));return h=h.cast(u.dtype),c?h.as4D(h.shape[1],h.shape[2],h.shape[3],h.shape[4]):h}}),Ll=An({maxPoolWithArgmax_:function(t,e,n,r,o){void 0===o&&(o=!1);var a=gn(t,\"x\",\"maxPoolWithArgmax\"),i={filterSize:e,strides:n,pad:r,includeBatchInIndex:o},s=Lt.runKernel(\"MaxPoolWithArgmax\",{x:a},i);return{result:s[0],indexes:s[1]}}});var Wl=An({slice_:function(t,e,n){var r,o,a=gn(t,\"x\",\"slice\");if(0===a.rank)throw new Error(\"Slicing scalar is not possible\");(r=\"number\"==typeof e?[e].concat(new Array(a.rank-1).fill(0)):e.length<a.rank?e.concat(new Array(a.rank-e.length).fill(0)):e.slice()).forEach((function(t){C(-1!==t,(function(){return\"slice() does not support negative begin indexing.\"}))})),o=(o=null==n?new Array(a.rank).fill(-1):\"number\"==typeof n?[n].concat(new Array(a.rank-1).fill(-1)):n.length<a.rank?n.concat(new Array(a.rank-n.length).fill(-1)):n).map((function(t,e){return t>=0?t:(C(-1===t,(function(){return\"Negative size values should be exactly -1 but got \"+t+\" for the slice() size at index \"+e+\".\"})),a.shape[e]-r[e])})),qo(a,r,o);var i=a.shape,s={begin:r,size:o};return Lt.runKernelFunc((function(t){return t.slice(a,r,o)}),{x:a},(function(t){for(var e=[],n=0;n<t.rank;n++)e.push([r[n],i[n]-r[n]-o[n]]);return{x:function(){return Ic(t,e)}}}),\"Slice\",s)}}),Ul=An({slice1d_:function(t,e,n){var r=gn(t,\"x\",\"slice1d\");return C(1===r.rank,(function(){return\"slice1d expects a rank-1 tensor, but got a rank-\"+r.rank+\" tensor\"})),Wl(r,[e],[n])}}),Vl=An({slice2d_:function(t,e,n){var r=gn(t,\"x\",\"slice2d\");return C(2===r.rank,(function(){return\"slice2d expects a rank-2 tensor, but got a rank-\"+r.rank+\" tensor\"})),Wl(r,e,n)}}),zl=An({slice3d_:function(t,e,n){var r=gn(t,\"x\",\"slice3d\");return C(3===r.rank,(function(){return\"slice3d expects a rank-3 tensor, but got a rank-\"+r.rank+\" tensor\"})),Wl(r,e,n)}}),Gl=An({slice4d_:function(t,e,n){var r=gn(t,\"x\",\"slice4d\");return C(4===r.rank,(function(){return\"slice4d expects a rank-4 tensor, but got a rank-\"+r.rank+\" tensor\"})),Wl(r,e,n)}});function Hl(t,e,n,r,o){return e.rank<n.rank&&(e=e.reshape(wn(e.shape,r))),t.rank<n.rank&&(t=t.reshape(wn(t.shape,r))),{x:function(){var r=t.mul(n.equal(e).cast(t.dtype));return null==o?r:r.transpose(o)}}}var ql=An({all_:function(t,e,n){void 0===e&&(e=null),void 0===n&&(n=!1);var r=gn(t,\"x\",\"all\",\"bool\"),o=O(e,r.shape),a=o,i=En(a,r.rank);null!=i&&(r=r.transpose(i),a=In(a.length,r.rank));var s=Lt.runKernelFunc((function(t){return t.all(r,a)}),{$x:r});if(n){var u=wn(s.shape,o);return s.reshape(u)}return s}}),Kl=An({any_:function(t,e,n){void 0===e&&(e=null),void 0===n&&(n=!1);var r=gn(t,\"x\",\"any\",\"bool\"),o=O(e,r.shape),a=o,i=En(a,r.rank);null!=i&&(r=r.transpose(i),a=In(a.length,r.rank));var s=Lt.runKernelFunc((function(t){return t.any(r,a)}),{$x:r});if(n){var u=wn(s.shape,o);return s.reshape(u)}return s}}),jl=An({argMax_:function(t,e){void 0===e&&(e=0);var n=gn(t,\"x\",\"argMax\");null==e&&(e=0);var r=O(e,n.shape),o=En(r,n.rank);null!=o&&(n=n.transpose(o),r=In(r.length,n.rank));var a={axis:r[0]},i=[n];return Lt.runKernelFunc((function(t,e){var o=t.argMax(n,r[0]);return e([n]),o}),{x:n},(function(t,e){var n=e[0];return{x:function(){return Xn(n)}}}),\"ArgMax\",a,i)}}),Xl=An({argMin_:function(t,e){void 0===e&&(e=0);var n=gn(t,\"x\",\"argMin\");null==e&&(e=0);var r=O(e,n.shape),o=En(r,n.rank);return null!=o&&(n=n.transpose(o),r=In(r.length,n.rank)),Lt.runKernelFunc((function(t,e){var o=t.argMin(n,r[0]);return e([n]),o}),{$x:n},(function(t,e){var n=e[0];return{$x:function(){return Xn(n)}}}))}}),Yl=An({logSumExp_:function(t,e,n){void 0===e&&(e=null),void 0===n&&(n=!1);var r=gn(t,\"x\",\"logSumExp\"),o=O(e,r.shape),a=r.max(o,!0),i=r.sub(a).exp().sum(o).log(),s=a.reshape(i.shape).add(i);if(n){var u=wn(s.shape,o);return s.reshape(u)}return s}}),$l=An({max_:function(t,e,n){void 0===e&&(e=null),void 0===n&&(n=!1);var r=gn(t,\"x\",\"max\"),o=r,a=O(e,r.shape),i=a,s=En(i,r.rank);null!=s&&(r=r.transpose(s),i=In(i.length,r.rank));var u=[r],c=Lt.runKernelFunc((function(t,e){var n=t.max(r,i);return e([o,n]),n}),{x:r},(function(t,e){return Hl(t,e[1],e[0],a,s)}),\"Max\",{axes:i},u,[!0]);if(n){var l=wn(c.shape,a);c=c.reshape(l)}return c}}),Ql=An({mean_:function(t,e,n){void 0===e&&(e=null),void 0===n&&(n=!1);var r=gn(t,\"x\",\"mean\"),o=O(e,r.shape),a=k(bn(r.shape,o)[1]);return oa((function(t){var r=On(a);return{value:(r.dtype===t.dtype?t:t.cast(r.dtype)).div(r).sum(e,n),gradFunc:function(e){var n=t.shape.slice();return o.forEach((function(t){n[t]=1})),e.reshape(n).mul(zn(t.shape,\"float32\")).div(a)}}}))(r)}}),Jl=An({min_:function(t,e,n){void 0===e&&(e=null),void 0===n&&(n=!1);var r=gn(t,\"x\",\"min\"),o=r,a=O(e,r.shape),i=a,s=En(i,r.rank);null!=s&&(r=r.transpose(s),i=In(i.length,r.rank));var u=[r],c=Lt.runKernelFunc((function(t,e){var n=t.min(r,i);return e([o,n]),n}),{x:r},(function(t,e){return Hl(t,e[1],e[0],a,s)}),\"Min\",{axes:i},u,[!0]);if(n){var l=wn(c.shape,a);c=c.reshape(l)}return c}}),Zl=An({moments_:function(t,e,n){void 0===e&&(e=null),void 0===n&&(n=!1);var r=O(e,(t=gn(t,\"x\",\"moments\")).shape),o=t.mean(r,n),a=o.shape;n||(a=wn(o.shape,r));var i=t.toFloat().sub(o.reshape(a)).square();return{mean:o,variance:i.mean(r,n)}}}),th=An({sum_:function(t,e,n){void 0===e&&(e=null),void 0===n&&(n=!1);var r=gn(t,\"x\",\"sum\");\"bool\"===r.dtype&&(r=r.toInt());var o=O(e,r.shape);return oa((function(t){var e=En(o,t.rank),r=o,a=t;null!=e&&(a=t.transpose(e),r=In(r.length,t.rank));var i=function(e){var n=t.shape.slice();return o.forEach((function(t){n[t]=1})),e.reshape(n).mul(zn(t.shape,\"float32\"))},s={axes:r},u=Lt.runKernelFunc((function(t){return t.sum(a,r)}),{x:a},(function(t){return{x:function(){return i(t)}}}),\"Sum\",s);if(n){var c=wn(u.shape,o);u=u.reshape(c)}return{value:u,gradFunc:i}}))(r)}}),eh=An({prod_:function(t,e,n){void 0===e&&(e=null),void 0===n&&(n=!1);var r=gn(t,\"x\",\"prod\");\"bool\"===r.dtype&&(r=r.toInt());var o=O(e,r.shape),a=En(o,r.rank),i=o,s=r;null!=a&&(s=r.transpose(a),i=In(i.length,r.rank));var u=Lt.runKernelFunc((function(t){return t.prod(s,i)}),{permutedX:s});if(n){var c=wn(u.shape,o);u=u.reshape(c)}return u}});var nh=An({elu_:function(t){var e=gn(t,\"x\",\"elu\");return Lt.runKernelFunc((function(t,n){var r=t.elu(e);return n([r]),r}),{$x:e},(function(t,e){var n=e[0];return{$x:function(){return Lt.runKernelFunc((function(e){return e.eluDer(t,n)}),{dy:t,y:n})}}}))}}),rh=An({leakyRelu_:function(t,e){void 0===e&&(e=.2);var n=gn(t,\"x\",\"leakyRelu\");return Eo(On(e).mul(n),n)}}),oh=An({prelu_:function(t,e){var n=gn(t,\"x\",\"prelu\"),r=gn(e,\"alpha\",\"prelu\");return Lt.runKernelFunc((function(t,e){var o=t.prelu(n,r);return e([n,r]),o}),{x:n,alpha:r},(function(t,e){var n=e[0],r=e[1],o=n.greater(0);return{x:function(){return yc(o,t,t.mul(r))},alpha:function(){var e=yc(o,Xn(t),t.mul(n)),a=Br(r.shape,t.shape);return a.length>0&&(e=e.sum(a)),e.reshape(r.shape)}}}),\"Prelu\")}}),ah=An({relu_:function(t){var e=gn(t,\"x\",\"relu\");return\"bool\"===e.dtype?e.toInt():Lt.runKernelFunc((function(t,n){var r=t.relu(e);return n([e]),r}),{x:e},(function(t,e){var n=e[0];return{x:function(){return t.mulStrict(n.step().toFloat())}}}),\"Relu\")}}),ih=An({relu6_:function(t){var e=gn(t,\"x\",\"relu6\");return\"bool\"===e.dtype?e.toInt():Lt.runKernelFunc((function(t,n){var r=t.relu6(e);return n([e]),r}),{x:e},(function(t,e){var n=e[0],r=n.lessEqual(6).mul(n.step());return{x:function(){return t.mulStrict(r.toFloat())}}}),\"Relu6\")}}),sh=An({selu_:function(t){var e=gn(t,\"x\",\"selu\");return Lt.runKernelFunc((function(t,n){var r=t.selu(e);return n([e]),r}),{$x:e},(function(t,e){var n=e[0];return{$x:function(){var e=n.greater(On(0)),r=On(su),o=On(uu),a=t.mul(o),i=t.mul(r).mul(n.toFloat().exp());return yc(e,a,i)}}}))}});var uh=An({localResponseNormalization_:function(t,e,n,r,o){void 0===e&&(e=5),void 0===n&&(n=1),void 0===r&&(r=1),void 0===o&&(o=.5);var a=gn(t,\"x\",\"localResponseNormalization\");C(4===a.rank||3===a.rank,(function(){return\"Error in localResponseNormalization: x must be rank 3 or 4 but got\\n               rank \"+a.rank+\".\"})),C(A(e),(function(){return\"Error in localResponseNormalization: depthRadius must be an integer but got depthRadius \"+e+\".\"}));var i=a,s=!1;3===a.rank&&(s=!0,i=a.as4D(1,a.shape[0],a.shape[1],a.shape[2]));var u=Lt.runKernelFunc((function(t,a){var s=t.localResponseNormalization4D(i,e,n,r,o);return a([i,s]),s}),{x4D:i},(function(t,a){var i=a[0],s=a[1];return{x4D:function(){return Lt.runKernelFunc((function(a){return a.LRNGrad(t,i,s,e,n,r,o)}),{})}}}));return s?u.as3D(u.shape[1],u.shape[2],u.shape[3]):u}});var ch=An({norm_:function(t,e,n,r){void 0===e&&(e=\"euclidean\"),void 0===n&&(n=null),void 0===r&&(r=!1);var o=function t(e,n,r){void 0===r&&(r=null);if(0===e.rank)return e.abs();if(1!==e.rank&&null===r)return t(e.reshape([-1]),n,r);if(1===e.rank||\"number\"==typeof r||Array.isArray(r)&&1===r.length){if(1===n)return e.abs().sum(r);if(n===1/0)return e.abs().max(r);if(n===-1/0)return e.abs().min(r);if(\"euclidean\"===n||2===n)return e.abs().pow(On(2,\"int32\")).sum(r).sqrt();throw new Error(\"Error in norm: invalid ord value: \"+n)}if(Array.isArray(r)&&2===r.length){if(1===n)return e.abs().sum(r[0]).max(r[1]-1);if(n===1/0)return e.abs().sum(r[1]).max(r[0]);if(n===-1/0)return e.abs().sum(r[1]).min(r[0]);if(\"fro\"===n||\"euclidean\"===n)return e.square().sum(r).sqrt();throw new Error(\"Error in norm: invalid ord value: \"+n)}throw new Error(\"Error in norm: invalid axis: \"+r)}(t=gn(t,\"x\",\"norm\"),e,n),a=o.shape;if(r){var i=O(n,t.shape);a=wn(o.shape,i)}return o.reshape(a)}});var lh=An({basicLSTMCell_:function(t,e,n,r,o,a){var i=gn(t,\"forgetBias\",\"basicLSTMCell\"),s=gn(e,\"lstmKernel\",\"basicLSTMCell\"),u=gn(n,\"lstmBias\",\"basicLSTMCell\"),c=gn(r,\"data\",\"basicLSTMCell\"),l=gn(o,\"c\",\"basicLSTMCell\"),h=gn(a,\"h\",\"basicLSTMCell\"),f=c.concat(h,1).matMul(s).add(u),d=f.shape[0],p=f.shape[1]/4,v=[d,p],g=f.slice([0,0],v),m=f.slice([0,p],v),y=f.slice([0,2*p],v),x=f.slice([0,3*p],v),b=g.sigmoid().mulStrict(m.tanh()).addStrict(l.mulStrict(i.add(y).sigmoid())),w=b.tanh().mulStrict(x.sigmoid());return[b,w]}}),hh=An({multiRNNCell_:function(t,e,n,r){for(var o=gn(e,\"data\",\"multiRNNCell\"),a=mn(n,\"c\",\"multiRNNCell\"),i=mn(r,\"h\",\"multiRNNCell\"),s=o,u=[],c=0;c<t.length;c++){var l=t[c](s,a[c],i[c]);u.push(l[0]),u.push(l[1]),s=l[1]}var h=[],f=[];for(c=0;c<u.length;c+=2)h.push(u[c]),f.push(u[c+1]);return[h,f]}});var fh=An({movingAverage_:function(t,e,n,r,o){void 0===o&&(o=!0);var a=gn(t,\"v\",\"movingAverage\"),i=gn(e,\"x\",\"movingAverage\"),s=gn(n,\"decay\",\"movingAverage\");Ft(a,i),C(S(a.shape,i.shape),(function(){return\"Shape mismatch in v and x\"}));var u=On(1),c=u.sub(s),l=i.sub(a).mul(c);if(o){C(null!=r,(function(){return\"When using zeroDebias: true, step is required.\"}));var h=gn(r,\"step\",\"movingAverage\");l=l.div(u.sub(No(s,h)))}return a.add(l)}});var dh=An({stridedSlice_:function(t,e,n,r,o,a,i,s,u){if(void 0===o&&(o=0),void 0===a&&(a=0),void 0===i&&(i=0),void 0===s&&(s=0),void 0===u&&(u=0),null==r&&(r=new Array(e.length)),0!==i)throw new Error(\"ellipsis mask is not yet supported\");var c=gn(t,\"x\",\"stridedSlice\"),l=Ko(s),h=c.shape.slice();l.forEach((function(t){e[t]=0,n[t]=1,h.splice(t,0,1)})),c=c.reshape(h);for(var f=0;f<c.rank;f++)e[f]=Xo(o,e,r,c.shape,f),n[f]=Yo(a,n,r,c.shape,f),r[f]=r[f]||1;var d=Ko(u);d.forEach((function(t){n[t]=e[t]+1,r[t]=1}));var p=jo(e,n,r),v=p.filter((function(t,e){return-1===d.indexOf(e)}));return r.every((function(t){return 1===t}))?Wl(c,e,p).reshape(v):Lt.runKernelFunc((function(t){return t.stridedSlice(c,e,n,r)}),{$x:c}).reshape(v)}});var ph=An({topk_:function(t,e,n){void 0===e&&(e=1),void 0===n&&(n=!0);var r=gn(t,\"x\",\"topk\");if(0===r.rank)throw new Error(\"topk() expects the input to be of rank 1 or higher\");var o=r.shape[r.shape.length-1];if(e>o)throw new Error(\"'k' passed to topk() must be <= the last dimension (\"+o+\") but got \"+e);var a=Lt.runKernelFunc((function(t){return t.topk(r,e,n)}),{$x:r});return{values:a[0],indices:a[1]}}});var vh=An({scatterND_:function(t,e,n){var r=gn(t,\"indices\",\"scatterND\",\"int32\"),o=gn(e,\"updates\",\"scatterND\");return zo(o,r,n),Lt.runKernelFunc((function(t){return t.scatterND(r,o,n)}),{indices:r,updates:o},null,\"ScatterNd\",{shape:n})}});var gh=An({fft_:function(t){C(\"complex64\"===t.dtype,(function(){return\"The dtype for tf.spectral.fft() must be complex64 but got \"+t.dtype+\".\"}));var e=t.shape[t.shape.length-1],n=t.size/e,r=t.as2D(n,e);return Lt.runKernelFunc((function(t){return t.fft(r)}),{input:t}).reshape(t.shape)}}),mh=An({ifft_:function(t){C(\"complex64\"===t.dtype,(function(){return\"The dtype for tf.spectral.ifft() must be complex64 but got \"+t.dtype+\".\"}));var e=t.shape[t.shape.length-1],n=t.size/e,r=t.as2D(n,e);return Lt.runKernelFunc((function(t){return t.ifft(r)}),{input:t}).reshape(t.shape)}}),yh=An({rfft_:function(t,e){C(\"float32\"===t.dtype,(function(){return\"The dtype for rfft() must be real value but got \"+t.dtype}));var n,r=t.shape[t.shape.length-1],o=t.size/r;if(null!=e&&e<r){var a=t.shape.map((function(t){return 0})),i=t.shape.map((function(t){return t}));i[t.shape.length-1]=e,n=t.slice(a,i),r=e}else if(null!=e&&e>r){var s=t.shape.map((function(t){return t}));s[t.shape.length-1]=e-r,n=t.concat(Gn(s),t.shape.length-1),r=e}else n=t;var u=n.zerosLike(),c=Tn(n,u).as2D(o,r),l=gh(c),h=Math.floor(r/2)+1,f=Dn(l),d=Nn(l),p=f.split([h,r-h],f.shape.length-1),v=d.split([h,r-h],d.shape.length-1),g=n.shape.slice();return g[n.shape.length-1]=h,Tn(p[0],v[0]).reshape(g)}}),xh=An({irfft_:function(t){var e=t.shape[t.shape.length-1],n=t.size/e;if(e<=2){var r=t.as2D(n,e),o=mh(r);return Dn(o)}var a=[n,2*(e-1)],i=Dn(t).as2D(n,e),s=Nn(t).as2D(n,e),u=i.slice([0,1],[n,e-2]).reverse(1),c=s.slice([0,1],[n,e-2]).reverse(1).mul(On(-1)),l=i.concat(u,1),h=s.concat(c,1);return r=Tn(l,h).as2D(a[0],a[1]),o=mh(r),Dn(o)}}),bh=Object.freeze({fft:gh,ifft:mh,rfft:yh,irfft:xh});var wh=An({sparseToDense_:function(t,e,n,r){void 0===r&&(r=0);var o=gn(t,\"sparseIndices\",\"sparseToDense\",\"int32\"),a=gn(e,\"sparseValues\",\"sparseToDense\"),i=gn(r,\"defaultValue\",\"sparseToDense\",a.dtype);return function(t,e,n,r){if(\"int32\"!==t.dtype)throw new Error(\"tf.sparseToDense() expects the indices to be int32 type, but the dtype was \"+t.dtype+\".\");if(t.rank>2)throw new Error(\"sparseIndices should be a scalar, vector, or matrix, but got shape \"+t.shape+\".\");var o=t.rank>0?t.shape[0]:1,a=t.rank>1?t.shape[1]:1;if(n.length!==a)throw new Error(\"outputShape has incorrect number of elements:, \"+n.length+\", should be: \"+a+\".\");var i=e.size;if(0!==e.rank&&(1!==e.rank||i!==o))throw new Error(\"sparseValues has incorrect shape \"+e.shape+\", should be [] or [\"+o+\"]\");if(e.dtype!==r.dtype)throw new Error(\"sparseValues.dtype must match defaultValues.dtype\")}(o,a,n,i),Lt.runKernelFunc((function(t){return t.sparseToDense(o,a,n,i)}),{$sparseIndices:o,$sparseValues:a,$defaultValue:i})}});var Ch=An({gatherND_:function(t,e){var n=gn(e,\"indices\",\"gatherND\",\"int32\"),r=gn(t,\"x\",\"gatherND\");return Lt.runKernelFunc((function(t){return t.gatherND(r,n)}),{x:r,indices:n},null,\"GatherNd\")}});var Eh=An({diag_:function(t){var e=gn(t,\"x\",\"diag\").flatten(),n=t.shape.concat(t.shape);return Lt.runKernelFunc((function(t){return t.diag(e)}),{$x:e}).reshape(n)}});var Rh=An({dropout_:function(t,e,n,r){var o=gn(t,\"x\",\"dropout\");if(C(\"float32\"===o.dtype,(function(){return\"x has to be a floating point tensor since it's going to be scaled, but got a \"+o.dtype+\" tensor instead.\"})),C(e>=0&&e<1,(function(){return\"rate must be a float in the range [0, 1), but got \"+e+\".\"})),0===e)return t instanceof wt?o.clone():o;var a=function(t,e){if(null==e)return t.shape.slice();if(S(t.shape,e))return e;if(t.shape.length===e.length){for(var n=[],r=0;r<t.shape.length;r++)null==e[r]&&null!=t.shape[r]?n.push(t.shape[r]):n.push(e[r]);return n}return e}(o,n),i=1-e,s=zc(a,0,1,\"float32\",r).add(i).floor().div(i);return o.mul(s)}});function Ih(t,e,n){for(var r=1-t%2,o=new Float32Array(t),a=0;a<t;++a){var i=2*Math.PI*a/(t+r-1);o[a]=e-n*Math.cos(i)}return Mn(o,\"float32\")}var kh=An({hannWindow_:function(t){return Ih(t,.5,.5)}}),Sh=An({hammingWindow_:function(t){return Ih(t,.54,.46)}}),Ah=An({frame_:function(t,e,n,r,o){void 0===r&&(r=!1),void 0===o&&(o=0);for(var a=0,i=[];a+e<=t.size;)i.push(Wl(t,a,e)),a+=n;if(r)for(;a<t.size;){var s=a+e-t.size,u=Yn([Wl(t,a,e-s),Hn([s],o)]);i.push(u),a+=n}return 0===i.length?Bn([],[0,e]):Yn(i).as2D(i.length,e)}}),Th=An({stft_:function(t,e,n,r,o){var a;void 0===o&&(o=kh),null==r&&(a=e,r=Math.floor(Math.pow(2,Math.ceil(Math.log(a)/Math.log(2)))));for(var i=Ah(t,e,n),s=To(i,o(e)),u=[],c=0;c<i.shape[0];c++)u.push(yh(s.slice([c,0],[1,e]),r));return Yn(u)}}),Dh=Object.freeze({hannWindow:kh,hammingWindow:Sh,frame:Ah,stft:Th});var Nh,Fh=function(t,e,o){return void 0===o&&(o=1),n(this,void 0,void 0,(function(){var n,a,i,s,u,c,l,h,f,d,p,v,g,m;return r(this,(function(r){switch(r.label){case 0:return n=gn(t,\"predictions\",\"inTopK\"),a=gn(e,\"targets\",\"inTopK\"),C(n.rank>1,(function(){return\"inTopK() expects the predictions to be of rank 2 or higher, but got \"+n.rank})),C(n.rank-1===a.rank,(function(){return\"predictions rank should be 1 larger than targets rank, but got predictions rank \"+n.rank+\" and targets rank \"+a.rank})),E(n.shape.slice(0,n.shape.length-1),a.shape,\"predictions's shape should be align with the targets' shape, except the last dimension.\"),i=n.shape[n.shape.length-1],C(o>0&&o<=i,(function(){return\"'k' passed to inTopK() must be > 0 && <= the predictions last dimension (\"+i+\"), but got \"+o})),[4,n.data()];case 1:return s=r.sent(),[4,a.data()];case 2:for(u=r.sent(),c=[s.length/i,i],h=c[1],f=B(\"bool\",l=c[0]),d=0;d<l;d++){for(p=d*h,v=s.subarray(p,p+h),g=[],m=0;m<v.length;m++)g.push({value:v[m],index:m});for(g.sort((function(t,e){return e.value-t.value})),f[d]=0,m=0;m<o;m++)if(g[m].index===u[d]){f[d]=1;break}}return t!==n&&n.dispose(),e!==a&&a.dispose(),[2,Fn(f,a.shape,\"bool\")]}}))}))};!function(t){t[t.NONE=0]=\"NONE\",t[t.MEAN=1]=\"MEAN\",t[t.SUM=2]=\"SUM\",t[t.SUM_BY_NONZERO_WEIGHTS=3]=\"SUM_BY_NONZERO_WEIGHTS\"}(Nh||(Nh={}));var _h=An({absoluteDifference_:function(t,e,n,r){void 0===r&&(r=Nh.SUM_BY_NONZERO_WEIGHTS);var o=gn(t,\"labels\",\"absoluteDifference\"),a=gn(e,\"predictions\",\"absoluteDifference\"),i=null;null!=n&&(i=gn(n,\"weights\",\"absoluteDifference\")),E(o.shape,a.shape,\"Error in absoluteDifference: \");var s=o.sub(a).abs();return Oh(s,i,r)}}),Oh=An({computeWeightedLoss_:function(t,e,n){void 0===n&&(n=Nh.SUM_BY_NONZERO_WEIGHTS);var r=gn(t,\"losses\",\"computeWeightedLoss\"),o=null;null!=e&&(o=gn(e,\"weights\",\"computeWeightedLoss\"));var a=null==o?r:r.mul(o);if(n===Nh.NONE)return a;if(n===Nh.SUM)return a.sum();if(n===Nh.MEAN){if(null==o)return a.mean();var i=r.size/o.size,s=a.sum().div(o.sum());return i>1?s.div(On(i)):s}if(n===Nh.SUM_BY_NONZERO_WEIGHTS){if(null==o)return a.sum().div(On(r.size));var u=o.mul(zn(r.shape)).notEqual(On(0)).sum().toFloat();return a.sum().div(u)}throw Error(\"Unknown reduction: \"+n)}}),Mh=An({cosineDistance_:function(t,e,n,r,o){void 0===o&&(o=Nh.SUM_BY_NONZERO_WEIGHTS);var a=gn(t,\"labels\",\"cosineDistance\"),i=gn(e,\"predictions\",\"cosineDistance\"),s=null;null!=r&&(s=gn(r,\"weights\",\"cosineDistance\")),E(a.shape,i.shape,\"Error in cosineDistance: \");var u=On(1).sub(a.mul(i).sum(n,!0));return Oh(u,s,o)}}),Bh=An({hingeLoss_:function(t,e,n,r){void 0===r&&(r=Nh.SUM_BY_NONZERO_WEIGHTS);var o=gn(t,\"labels\",\"hingeLoss\"),a=gn(e,\"predictions\",\"hingeLoss\"),i=null;null!=n&&(i=gn(n,\"weights\",\"hingeLoss\")),E(o.shape,a.shape,\"Error in hingeLoss: \");var s=On(1);o=On(2).mul(o).sub(s);var u=s.sub(o.mul(a)).relu();return Oh(u,i,r)}}),Ph=An({huberLoss_:function(t,e,n,r,o){void 0===r&&(r=1),void 0===o&&(o=Nh.SUM_BY_NONZERO_WEIGHTS);var a=gn(t,\"labels\",\"huberLoss\"),i=gn(e,\"predictions\",\"huberLoss\"),s=null;null!=n&&(s=gn(n,\"weights\",\"huberLoss\")),E(a.shape,i.shape,\"Error in huberLoss: \");var u=On(r),c=i.sub(a).abs(),l=Io(c,u),h=c.sub(l),f=On(.5).mul(l.square()).add(u.mul(h));return Oh(f,s,o)}}),Lh=An({logLoss_:function(t,e,n,r,o){void 0===r&&(r=1e-7),void 0===o&&(o=Nh.SUM_BY_NONZERO_WEIGHTS);var a=gn(t,\"labels\",\"logLoss\"),i=gn(e,\"predictions\",\"logLoss\"),s=null;null!=n&&(s=gn(n,\"weights\",\"logLoss\")),E(a.shape,i.shape,\"Error in logLoss: \");var u=On(1),c=On(r),l=a.mul(i.add(c).log()).neg().sub(u.sub(a).mul(u.sub(i).add(c).log()));return Oh(l,s,o)}}),Wh=An({meanSquaredError_:function(t,e,n,r){void 0===r&&(r=Nh.SUM_BY_NONZERO_WEIGHTS);var o=gn(t,\"labels\",\"meanSquaredError\"),a=gn(e,\"predictions\",\"meanSquaredError\"),i=null;null!=n&&(i=gn(n,\"weights\",\"meanSquaredError\")),E(o.shape,a.shape,\"Error in meanSquaredError: \");var s=o.squaredDifference(a);return Oh(s,i,r)}}),Uh=An({sigmoidCrossEntropy_:function(t,e,n,r,o){void 0===r&&(r=0),void 0===o&&(o=Nh.SUM_BY_NONZERO_WEIGHTS);var a=gn(t,\"multiClassLabels\",\"sigmoidCrossEntropy\"),i=gn(e,\"logits\",\"sigmoidCrossEntropy\"),s=null;if(null!=n&&(s=gn(n,\"weights\",\"sigmoidCrossEntropy\")),E(a.shape,i.shape,\"Error in sigmoidCrossEntropy: \"),r>0){var u=On(r),c=On(1),l=On(.5);a=a.mul(c.sub(u)).add(l.mul(u))}var h=function(t,e){var n=gn(t,\"labels\",\"sigmoidCrossEntropyWithLogits\"),r=gn(e,\"logits\",\"sigmoidCrossEntropyWithLogits\");E(n.shape,r.shape,\"Error in sigmoidCrossEntropyWithLogits: \");var o=r.relu(),a=r.mul(n),i=r.abs().neg().exp().log1p();return o.sub(a).add(i)}(a,i);return Oh(h,s,o)}}),Vh=An({softmaxCrossEntropy_:function(t,e,n,r,o){void 0===r&&(r=0),void 0===o&&(o=Nh.SUM_BY_NONZERO_WEIGHTS);var a=gn(t,\"onehotLabels\",\"softmaxCrossEntropy\"),i=gn(e,\"logits\",\"softmaxCrossEntropy\"),s=null;if(null!=n&&(s=gn(n,\"weights\",\"softmaxCrossEntropy\")),E(a.shape,i.shape,\"Error in softmaxCrossEntropy: \"),r>0){var u=On(r),c=On(1),l=On(a.shape[1]);a=a.mul(c.sub(u)).add(u.div(l))}var h=function(t,e,n){if(void 0===n&&(n=-1),-1===n&&(n=e.rank-1),n!==e.rank-1)throw Error(\"Softmax cross entropy along a non-last dimension is not yet supported. Labels / logits was rank \"+e.rank+\" and dim was \"+n);return oa((function(t,e,r){var o=e.logSumExp([n],!0),a=e.toFloat().sub(o);r([t,a]);return{value:a.mul(t).neg().sum([n]),gradFunc:function(t,e){var r=e[0],o=e[1],a=wn(t.shape,[n]);return[t.reshape(a).mul(r.toFloat().sub(o.exp())),t.reshape(a).mul(o.exp().sub(r.toFloat()))]}}}))(t,e)}(a,i);return Oh(h,s,o)}}),zh=Object.freeze({get Reduction(){return Nh},absoluteDifference:_h,computeWeightedLoss:Oh,cosineDistance:Mh,hingeLoss:Bh,huberLoss:Ph,logLoss:Lh,meanSquaredError:Wh,sigmoidCrossEntropy:Uh,softmaxCrossEntropy:Vh});function Gh(t,e){return void 0===e&&(e=!1),Lt.tidy((function(){if(2!==t.shape.length)throw new Error(\"qr2d() requires a 2D Tensor, but got a \"+t.shape.length+\"D Tensor.\");for(var n=t.shape[0],r=t.shape[1],o=Cc(n),a=t.clone(),i=Bn([[1]],[1,1]),s=i.clone(),u=n>=r?r:n,c=function(t){var e,u=a,c=s,l=o;e=Lt.tidy((function(){var e=a.slice([t,t],[n-t,1]),u=e.norm(),c=a.slice([t,t],[1,1]),l=Bn([[-1]]).where(c.greater(0),Bn([[1]])),h=c.sub(l.mul(u)),f=e.div(h);s=1===f.shape[0]?i.clone():i.concat(f.slice([1,0],[f.shape[0]-1,f.shape[1]]),0);var d=l.matMul(h).div(u).neg(),p=a.slice([t,0],[n-t,r]),v=d.mul(s),g=s.transpose();if(0===t)a=p.sub(v.matMul(g.matMul(p)));else{var m=p.sub(v.matMul(g.matMul(p)));a=a.slice([0,0],[t,r]).concat(m,0)}var y=v.transpose(),x=o.slice([0,t],[n,o.shape[1]-t]);if(0===t)o=x.sub(x.matMul(s).matMul(y));else{var b=x.sub(x.matMul(s).matMul(y));o=o.slice([0,0],[n,t]).concat(b,1)}return[s,a,o]})),s=e[0],a=e[1],o=e[2],tn([u,c,l])},l=0;l<u;++l)c(l);return!e&&n>r&&(o=o.slice([0,0],[n,r]),a=a.slice([0,0],[r,r])),[o,a]}))}var Hh=An({bandPart_:function(t,e,n){if(e%1!=0)throw new Error(\"bandPart(): numLower must be an integer, got \"+e+\".\");if(n%1!=0)throw new Error(\"bandPart(): numUpper must be an integer, got \"+n+\".\");var r=gn(t,\"a\",\"bandPart\");if(r.rank<2)throw new Error(\"bandPart(): Rank must be at least 2, got \"+r.rank+\".\");var o=r.shape,a=r.shape.slice(-2),i=a[0],s=a[1];if(!(e<=i))throw new Error(\"bandPart(): numLower (\"+e+\") must not be greater than the number of rows (\"+i+\").\");if(!(n<=s))throw new Error(\"bandPart(): numUpper (\"+n+\") must not be greater than the number of columns (\"+s+\").\");e<0&&(e=i),n<0&&(n=s);var u=Kn(0,i,1,\"int32\").reshape([-1,1]),c=Kn(0,s,1,\"int32\"),l=Oo(u,c),h=pc(l.lessEqual(On(+e,\"int32\")),l.greaterEqual(On(-n,\"int32\"))),f=Gn([i,s],r.dtype);return hr(fr(r.reshape([-1,i,s])).map((function(t){return yc(h,t,f)}))).reshape(o)}}),qh=An({gramSchmidt_:function(t){var e;if(Array.isArray(t)){e=!1,C(null!=t&&t.length>0,(function(){return\"Gram-Schmidt process: input must not be null, undefined, or empty\"}));for(var n=t[0].shape[0],r=function(e){C(t[e].shape[0]===n,(function(){return\"Gram-Schmidt: Non-unique lengths found in the input vectors: (\"+t[e].shape[0]+\" vs. \"+n+\")\"}))},o=1;o<t.length;++o)r(o)}else e=!0,t=tr(t,t.shape[0],0).map((function(t){return lr(t,[0])}));C(t.length<=t[0].shape[0],(function(){return\"Gram-Schmidt: Number of vectors (\"+t.length+\") exceeds number of dimensions (\"+t[0].shape[0]+\").\"}));var a=[],i=t,s=function(t){a.push(Lt.tidy((function(){var e=i[t];if(t>0)for(var n=0;n<t;++n){var r=th(a[n].mulStrict(e)).mul(a[n]);e=e.sub(r)}return e.div(ch(e,\"euclidean\"))})))};for(o=0;o<t.length;++o)s(o);return e?hr(a,0):a}}),Kh=An({qr_:function(t,e){if(void 0===e&&(e=!1),t.rank<2)throw new Error(\"qr() requires input tensor to have a rank >= 2, but got rank \"+t.rank);if(2===t.rank)return Gh(t,e);var n=t.shape.slice(0,t.shape.length-2).reduce((function(t,e){return t*e})),r=fr(t.reshape([n,t.shape[t.shape.length-2],t.shape[t.shape.length-1]]),0),o=[],a=[];return r.forEach((function(t){var n=Gh(t,e),r=n[0],i=n[1];o.push(r),a.push(i)})),[hr(o,0).reshape(t.shape),hr(a,0).reshape(t.shape)]}}),jh=Object.freeze({bandPart:Hh,gramSchmidt:qh,qr:Kh});function Xh(t,e,n,r,o,a){null==r&&(r=.5),null==o&&(o=Number.NEGATIVE_INFINITY),null==a&&(a=0);var i=t.shape[0];return n=Math.min(n,i),C(0<=r&&r<=1,(function(){return\"iouThreshold must be in [0, 1], but was '\"+r+\"'\"})),C(2===t.rank,(function(){return\"boxes must be a 2D tensor, but was of rank '\"+t.rank+\"'\"})),C(4===t.shape[1],(function(){return\"boxes must have 4 columns, but 2nd dimension was \"+t.shape[1]})),C(1===e.rank,(function(){return\"scores must be a 1D tensor\"})),C(e.shape[0]===i,(function(){return\"scores has incompatible shape with boxes. Expected \"+i+\", but was \"+e.shape[0]})),C(0<=a&&a<=1,(function(){return\"softNmsSigma must be in [0, 1], but was '\"+a+\"'\"})),{maxOutputSize:n,iouThreshold:r,scoreThreshold:o,softNmsSigma:a}}var Yh=An({resizeBilinear_:function(t,e,n){void 0===n&&(n=!1);var r=gn(t,\"images\",\"resizeBilinear\");C(3===r.rank||4===r.rank,(function(){return\"Error in resizeBilinear: x must be rank 3 or 4, but got rank \"+r.rank+\".\"})),C(2===e.length,(function(){return\"Error in resizeBilinear: new shape must 2D, but got shape \"+e+\".\"}));var o=r,a=!1;3===r.rank&&(a=!0,o=r.as4D(1,r.shape[0],r.shape[1],r.shape[2]));var i=e[0],s=e[1],u=Lt.runKernelFunc((function(t,e){return e([o]),t.resizeBilinear(o,i,s,n)}),{x:o},(function(t,e){return{x:function(){return Lt.runKernelFunc((function(r){return r.resizeBilinearBackprop(t,e[0],n)}),{})}}}),\"ResizeBilinear\",{alignCorners:n,newHeight:i,newWidth:s});return a?u.as3D(u.shape[1],u.shape[2],u.shape[3]):u}}),$h=An({resizeNearestNeighbor_:function(t,e,n){void 0===n&&(n=!1);var r=gn(t,\"images\",\"resizeNearestNeighbor\");C(3===r.rank||4===r.rank,(function(){return\"Error in resizeNearestNeighbor: x must be rank 3 or 4, but got rank \"+r.rank+\".\"})),C(2===e.length,(function(){return\"Error in resizeNearestNeighbor: new shape must 2D, but got shape \"+e+\".\"})),C(\"float32\"===r.dtype||\"int32\"===r.dtype,(function(){return\"`images` must have `int32` or `float32` as dtype\"}));var o=r,a=!1;3===r.rank&&(a=!0,o=r.as4D(1,r.shape[0],r.shape[1],r.shape[2]));var i=e[0],s=e[1],u=Lt.runKernelFunc((function(t,e){return e([o]),t.resizeNearestNeighbor(o,i,s,n)}),{batchImages:o},(function(t,e){return{batchImages:function(){return Lt.runKernelFunc((function(r){return r.resizeNearestNeighborBackprop(t,e[0],n)}),{})}}}));return a?u.as3D(u.shape[1],u.shape[2],u.shape[3]):u}}),Qh=An({nonMaxSuppression_:function(t,e,n,r,o){void 0===r&&(r=.5),void 0===o&&(o=Number.NEGATIVE_INFINITY);var a=gn(t,\"boxes\",\"nonMaxSuppression\"),i=gn(e,\"scores\",\"nonMaxSuppression\"),s=Xh(a,i,n,r,o);n=s.maxOutputSize,r=s.iouThreshold,o=s.scoreThreshold;var u={maxOutputSize:n,iouThreshold:r,scoreThreshold:o};return Lt.runKernelFunc((function(t){return t.nonMaxSuppression(a,i,n,r,o)}),{boxes:a,scores:i},null,\"NonMaxSuppressionV3\",u)}}),Jh=function(t,e,o,a,i){return void 0===a&&(a=.5),void 0===i&&(i=Number.NEGATIVE_INFINITY),n(this,void 0,void 0,(function(){var n,s,u,c,l,h,f;return r(this,(function(r){switch(r.label){case 0:return n=gn(t,\"boxes\",\"nonMaxSuppressionAsync\"),s=gn(e,\"scores\",\"nonMaxSuppressionAsync\"),u=Xh(n,s,o,a,i),o=u.maxOutputSize,a=u.iouThreshold,i=u.scoreThreshold,[4,Promise.all([n.data(),s.data()])];case 1:return c=r.sent(),l=c[0],h=c[1],f=Oa(l,h,o,a,i),n!==t&&n.dispose(),s!==e&&s.dispose(),[2,f]}}))}))},Zh=An({nonMaxSuppressionWithScore_:function(t,e,n,r,o,a){void 0===r&&(r=.5),void 0===o&&(o=Number.NEGATIVE_INFINITY),void 0===a&&(a=0);var i=gn(t,\"boxes\",\"nonMaxSuppression\"),s=gn(e,\"scores\",\"nonMaxSuppression\"),u=Xh(i,s,n,r,o,a),c={maxOutputSize:n=u.maxOutputSize,iouThreshold:r=u.iouThreshold,scoreThreshold:o=u.scoreThreshold,softNmsSigma:a=u.softNmsSigma},l=Lt.runKernel(\"NonMaxSuppressionV5\",{boxes:i,scores:s},c);return{selectedIndices:l[0],selectedScores:l[1]}}}),tf=function(t,e,o,a,i,s){return void 0===a&&(a=.5),void 0===i&&(i=Number.NEGATIVE_INFINITY),void 0===s&&(s=0),n(this,void 0,void 0,(function(){var n,u,c,l,h,f,d;return r(this,(function(r){switch(r.label){case 0:return n=gn(t,\"boxes\",\"nonMaxSuppressionAsync\"),u=gn(e,\"scores\",\"nonMaxSuppressionAsync\"),c=Xh(n,u,o,a,i,s),o=c.maxOutputSize,a=c.iouThreshold,i=c.scoreThreshold,s=c.softNmsSigma,[4,Promise.all([n.data(),u.data()])];case 1:return l=r.sent(),h=l[0],f=l[1],d=Ma(h,f,o,a,i,s),n!==t&&n.dispose(),u!==e&&u.dispose(),[2,d]}}))}))},ef=An({cropAndResize_:function(t,e,n,r,o,a){var i=gn(t,\"image\",\"cropAndResize\"),s=gn(e,\"boxes\",\"cropAndResize\",\"float32\"),u=gn(n,\"boxInd\",\"cropAndResize\",\"int32\");o=o||\"bilinear\",a=a||0;var c=s.shape[0];return C(4===i.rank,(function(){return\"Error in cropAndResize: image must be rank 4,but got rank \"+i.rank+\".\"})),C(2===s.rank&&4===s.shape[1],(function(){return\"Error in cropAndResize: boxes must be have size [\"+c+\",4] but had shape \"+s.shape+\".\"})),C(1===u.rank&&u.shape[0]===c,(function(){return\"Error in cropAndResize: boxInd must be have size [\"+c+\"] but had shape \"+s.shape+\".\"})),C(2===r.length,(function(){return\"Error in cropAndResize: cropSize must be of length 2, but got length \"+r.length+\".\"})),C(r[0]>=1&&r[1]>=1,(function(){return\"cropSize must be atleast [1,1], but was \"+r})),C(\"bilinear\"===o||\"nearest\"===o,(function(){return\"method must be bilinear or nearest, but was \"+o})),Lt.runKernelFunc((function(t,e){return t.cropAndResize(i,s,u,r,o,a)}),{images:i,boxes:s,boxInd:u},null,\"CropAndResize\",{method:o,extrapolationValue:a,cropSize:r})}}),nf=Object.freeze({resizeBilinear:Yh,resizeNearestNeighbor:$h,nonMaxSuppression:Qh,nonMaxSuppressionAsync:Jh,nonMaxSuppressionWithScore:Zh,nonMaxSuppressionWithScoreAsync:tf,cropAndResize:ef}),rf=function(t,e){return!(t>0)||\"linear\"===e},of=function(t,e,n){if(null==n||\"linear\"===n)return t;if(\"relu\"===n)return t.mul(e.step());throw new Error(\"Gradient for activation \"+n+\" has not been implemented yet.\")},af=function(t,e){var n=e,r=Br(t.shape,e.shape);return r.length>0&&(n=n.sum(r)),n.reshape(t.shape)},sf=function(t,e,n){if(\"linear\"===e)return t;if(\"relu\"===e)return ah(t);if(\"elu\"===e)return nh(t);if(\"relu6\"===e)return ih(t);if(\"prelu\"===e)return oh(t,n);throw new Error(\"Unknown fused activation \"+e+\".\")};var uf=An({fusedMatMul_:function(t){var e,n=t.a,r=t.b,o=t.transposeA,a=void 0!==o&&o,i=t.transposeB,s=void 0!==i&&i,u=t.bias,c=t.activation,l=void 0===c?\"linear\":c,h=t.preluActivationWeights;if(!1===rf(Lt.state.gradientDepth,l)){var f=El(n,r,a,s);return null!=u&&(f=Or(f,u)),sf(f,l,h)}var d=gn(n,\"a\",\"fused matMul\"),p=gn(r,\"b\",\"fused matMul\");e=Nt(d,p),d=e[0],p=e[1];var v=a?d.shape[d.rank-2]:d.shape[d.rank-1],g=s?p.shape[p.rank-1]:p.shape[p.rank-2],m=a?d.shape[d.rank-1]:d.shape[d.rank-2],y=s?p.shape[p.rank-2]:p.shape[p.rank-1],x=d.shape.slice(0,-2),b=p.shape.slice(0,-2),w=k(x),E=k(b);C(d.rank>=2&&p.rank>=2&&d.rank===p.rank,(function(){return\"Error in fused matMul: inputs must have the same rank of at least 2, got ranks \"+d.rank+\" and \"+p.rank+\".\"})),C(S(x,b),(function(){return\"Error in fused matMul: outer dimensions (\"+x+\") and (\"+b+\") of Tensors with shapes \"+d.shape+\" and \"+p.shape+\" must match.\"})),C(v===g,(function(){return\"Error in fused matMul: inner shapes (\"+v+\") and (\"+g+\") of Tensors with shapes \"+d.shape+\" and \"+p.shape+\" and transposeA=\"+a+\" and transposeB=\"+s+\" must match.\"}));var R,I,A=d.shape.slice(0,-2).concat([m,y]),T=a?d.as3D(w,v,m):d.as3D(w,m,v),D=s?p.as3D(E,y,g):p.as3D(E,g,y);null!=u&&Pr(A,(R=Nt(R=gn(u,\"bias\",\"fused matMul\"),d)[0]).shape),null!=h&&(I=gn(h,\"prelu weights\",\"fused matMul\"));var N={a:T,b:D};null!=u&&(N.bias=R),null!=h&&(N.preluActivationWeights=I);var F=[T,D];return Lt.runKernelFunc((function(t,e){var n=t.fusedBatchMatMul({a:T,b:D,transposeA:a,transposeB:s,bias:R,activation:l,preluActivationWeights:I});return e([T,D,n]),n}),N,(function(t,e){var n=e[0],r=e[1],o=e[2],i=of(t,o,l),c={};return null!=u&&(c={bias:function(){return af(R,i)}}),a||s?!a&&s?Object.assign({a:function(){return i.matMul(r,!1,!1)},b:function(){return i.matMul(n,!0,!1)}},c):a&&!s?Object.assign({a:function(){return r.matMul(i,!1,!0)},b:function(){return n.matMul(i,!1,!1)}},c):Object.assign({a:function(){return r.matMul(i,!0,!0)},b:function(){return i.matMul(n,!0,!0)}},c):Object.assign({a:function(){return i.matMul(r,!1,!0)},b:function(){return n.matMul(i,!0,!1)}},c)}),\"_FusedMatMul\",{transposeA:a,transposeB:s,activation:l},F,[!0]).reshape(A)}}),cf=An({fusedConv2d_:function(t){var e=t.x,n=t.filter,r=t.strides,o=t.pad,a=t.dataFormat,i=void 0===a?\"NHWC\":a,s=t.dilations,u=void 0===s?[1,1]:s,c=t.dimRoundingMode,l=t.bias,h=t.activation,f=void 0===h?\"linear\":h,d=t.preluActivationWeights;if(f=f||\"linear\",!1===rf(Lt.state.gradientDepth,f)){var p=dl(e,n,r,o,i,u,c);return null!=l&&(p=Or(p,l)),sf(p,f,d)}var v=gn(e,\"x\",\"conv2d\"),g=gn(n,\"filter\",\"conv2d\"),m=v,y=!1;3===v.rank&&(y=!0,m=v.as4D(1,v.shape[0],v.shape[1],v.shape[2])),C(4===m.rank,(function(){return\"Error in fused conv2d: input must be rank 4, but got rank \"+m.rank+\".\"})),C(4===g.rank,(function(){return\"Error in fused conv2d: filter must be rank 4, but got rank \"+g.rank+\".\"})),null!=c&&C(A(o),(function(){return\"Error in fused conv2d: pad must be an integer when using, dimRoundingMode \"+c+\" but got pad \"+o+\".\"})),C(m.shape[3]===g.shape[2],(function(){return\"Error in conv2d: depth of input (\"+m.shape[3]+\") must match input depth for filter \"+g.shape[2]+\".\"})),C(Ca(r,u),(function(){return\"Error in conv2D: Either strides or dilations must be 1. Got strides \"+r+\" and dilations '\"+u+\"'\"})),C(\"NHWC\"===i,(function(){return\"Error in conv2d: got dataFormat of \"+i+\" but only NHWC is currently supported.\"}));var x,b,w=pa(m.shape,g.shape,r,u,o,c);null!=l&&(x=Nt(x=gn(l,\"bias\",\"fused conv2d\"),v)[0],Pr(w.outShape,x.shape)),null!=d&&(b=gn(d,\"prelu weights\",\"fused conv2d\"));var E={x:m,filter:g};null!=l&&(E.bias=x),null!=d&&(E.preluActivationWeights=b);var R=[g,m],I=Lt.runKernelFunc((function(t,e){var n=t.fusedConv2d({input:m,filter:g,convInfo:w,bias:x,activation:f,preluActivationWeights:b});return e([g,m,n]),n}),E,(function(t,e){var n=e,a=n[0],i=n[1],s=n[2],c=of(t,s,f);C(wa(u),(function(){return\"Error in gradient of fused conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '\"+u+\"'\"}));var h={};return null!=l&&(h={bias:function(){return af(x,c)}}),Object.assign({x:function(){return gl(i.shape,c,a,r,o)},filter:function(){return vl(i,c,a.shape,r,o)}},h)}),\"FusedConv2D\",{convInfo:w,activation:f},R,[!0]);return y?I.as3D(I.shape[1],I.shape[2],I.shape[3]):I}}),lf=An({fusedDepthwiseConv2d_:function(t){var e=t.x,n=t.filter,r=t.strides,o=t.pad,a=t.dataFormat,i=void 0===a?\"NHWC\":a,s=t.dilations,u=void 0===s?[1,1]:s,c=t.dimRoundingMode,l=t.bias,h=t.activation,f=void 0===h?\"linear\":h,d=t.preluActivationWeights;if(!1===rf(Lt.state.gradientDepth,f)){var p=ml(e,n,r,o,i,u,c);return null!=l&&(p=Or(p,l)),sf(p,f,d)}var v=gn(e,\"x\",\"depthwiseConv2d\"),g=gn(n,\"filter\",\"depthwiseConv2d\"),m=v,y=!1;3===v.rank&&(y=!0,m=v.as4D(1,v.shape[0],v.shape[1],v.shape[2])),C(4===m.rank,(function(){return\"Error in fused depthwiseConv2d: input must be rank 4, but got rank \"+m.rank+\".\"})),C(4===g.rank,(function(){return\"Error in fused depthwiseConv2d: filter must be rank 4, but got rank \"+g.rank+\".\"})),C(m.shape[3]===g.shape[2],(function(){return\"Error in fused depthwiseConv2d: number of input channels (\"+m.shape[3]+\") must match the inChannels dimension in filter \"+g.shape[2]+\".\"})),null==u&&(u=[1,1]),C(Ca(r,u),(function(){return\"Error in fused depthwiseConv2d: Either strides or dilations must be 1. Got strides \"+r+\" and dilations '\"+u+\"'\"})),null!=c&&C(A(o),(function(){return\"Error in fused depthwiseConv2d: pad must be an integer when using dimRoundingMode \"+c+\" but got pad \"+o+\".\"}));var x,b,w=pa(m.shape,g.shape,r,u,o,c,!0);null!=l&&(x=Nt(x=gn(l,\"bias\",\"fused conv2d\"),v)[0],Pr(w.outShape,x.shape)),null!=d&&(b=gn(d,\"prelu weights\",\"fused depthwiseConv2d\"));var E={x:m,filter:g};null!=l&&(E.bias=x),null!=d&&(E.preluActivationWeights=b);var R=[g,m],I=Lt.runKernelFunc((function(t,e){var n=t.fusedDepthwiseConv2D({input:m,filter:g,convInfo:w,bias:x,activation:f,preluActivationWeights:b});return e([g,m,n]),n}),E,(function(t,e){C(wa(u),(function(){return\"Error in gradient of fused depthwiseConv2d: dilation rates greater than 1 are not yet supported. Got dilations '\"+u+\"'\"}));var n=e[0],r=e[1],o=e[2],a=of(t,o,f),i={};return null!=l&&(i={bias:function(){return af(x,a)}}),Object.assign({x:function(){return yl(r.shape,a,n,w)},filter:function(){return xl(r,a,n.shape,w)}},i)}),\"FusedDepthwiseConv2D\",{convInfo:w,activation:f},R,[!0]);return y?I.as3D(I.shape[1],I.shape[2],I.shape[3]):I}}),hf=Object.freeze({matMul:uf,conv2d:cf,depthwiseConv2d:lf}),ff=Object.freeze({image:nf,linalg:jh,losses:zh,spectral:bh,fused:hf,signal:Dh,add:Or,addN:$u,batchNorm:nc,batchNormalization:ec,batchNorm2d:ac,batchNormalization2d:oc,batchNorm3d:uc,batchNormalization3d:sc,batchNorm4d:hc,batchNormalization4d:lc,broadcastTo:fc,clone:dc,div:Bo,divNoNan:bc,eye:Cc,multinomial:Ec,oneHot:Rc,pad:Ic,pad1d:kc,pad2d:Sc,pad3d:Ac,pad4d:Tc,rand:Dc,randomGamma:Uc,randomNormal:Vc,randomUniform:zc,square:Gc,squaredDifference:Hc,tile:wc,truncatedNormal:qc,conv1d:fl,conv2d:dl,conv3d:pl,depthwiseConv2d:ml,separableConv2d:bl,conv2dTranspose:wl,conv3dTranspose:Cl,op:An,booleanMaskAsync:ul,complex:Tn,real:Dn,imag:Nn,concat:Yn,concat1d:$n,concat2d:Qn,concat3d:Jn,concat4d:Zn,split:tr,matMul:El,dot:Rl,outerProduct:Il,reverse:kl,reverse1d:Sl,reverse2d:Al,reverse3d:Tl,reverse4d:Dl,maxPool:_l,avgPool:Ol,pool:Ml,maxPool3d:Bl,avgPool3d:Pl,maxPoolWithArgmax:Ll,slice:Wl,slice1d:Ul,slice2d:Vl,slice3d:zl,slice4d:Gl,abs:Lr,acos:Wr,acosh:Ur,asin:Vr,asinh:zr,atan:Gr,atanh:Hr,ceil:qr,clipByValue:Kr,cos:jr,cosh:Xr,erf:Yr,exp:$r,expm1:Qr,floor:Jr,log:Zr,log1p:to,logSigmoid:eo,neg:no,reciprocal:ro,round:oo,rsqrt:ao,sigmoid:io,sign:so,isNaN:uo,isInf:co,isFinite:lo,sin:ho,sinh:fo,softplus:po,sqrt:vo,step:go,tan:mo,tanh:yo,all:ql,any:Kl,argMax:jl,argMin:Xl,logSumExp:Yl,max:$l,mean:Ql,min:Jl,moments:Zl,sum:th,prod:eh,equal:Kc,equalStrict:jc,greater:Xc,greaterEqual:Yc,greaterEqualStrict:$c,greaterStrict:Qc,less:Jc,lessEqual:Zc,lessEqualStrict:tl,lessStrict:el,notEqual:nl,notEqualStrict:rl,addStrict:xo,atan2:bo,divStrict:wo,floorDiv:Co,maximum:Eo,maximumStrict:Ro,minimum:Io,minimumStrict:ko,mod:So,modStrict:Ao,mul:To,mulStrict:Do,pow:No,powStrict:Fo,squaredDifferenceStrict:_o,sub:Oo,subStrict:Mo,elu:nh,leakyRelu:rh,prelu:oh,relu:ah,relu6:ih,selu:sh,logicalAnd:pc,logicalNot:vc,logicalOr:gc,logicalXor:mc,where:yc,whereAsync:xc,buffer:er,print:nr,batchToSpaceND:rr,cast:or,cumsum:ar,depthToSpace:ir,expandDims:sr,reshape:ur,spaceToBatchND:cr,squeeze:lr,stack:hr,unstack:fr,setdiff1dAsync:dr,fill:Hn,linspace:qn,ones:zn,range:Kn,scalar:On,tensor:Fn,tensor1d:Mn,tensor2d:Bn,tensor3d:Pn,tensor4d:Ln,tensor5d:Wn,tensor6d:Un,variable:Vn,zeros:Gn,onesLike:jn,zerosLike:Xn,transpose:ua,softmax:ia,logSoftmax:sa,localResponseNormalization:uh,norm:ch,gather:il,unsortedSegmentSum:sl,basicLSTMCell:lh,multiRNNCell:hh,movingAverage:fh,stridedSlice:dh,topk:ph,scatterND:vh,fft:gh,ifft:mh,rfft:yh,irfft:xh,sparseToDense:wh,gatherND:Ch,diag:Eh,dropout:Rh,hannWindow:kh,hammingWindow:Sh,frame:Ah,stft:Th,inTopKAsync:Fh});function df(t,e){Array.isArray(t)||(t=[t]),t.forEach((function(t){null!=t&&C(\"complex64\"!==t.dtype,(function(){return e+\" does not support complex64 tensors.\"}))}))}function pf(t,e,n,r,o,a){for(var i=o.strideHeight,s=o.strideWidth,u=o.dilationHeight,c=o.dilationWidth,l=o.effectiveFilterHeight,h=o.effectiveFilterWidth,f=o.padInfo.top,d=o.padInfo.left,p=\"max\"===a?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,v=er(o.outShape,n),g=v.values,m=o.outShape[1]*o.outShape[2]*o.outShape[3],y=o.outShape[2]*o.outShape[3],x=o.outShape[3],b=0;b<o.batchSize;++b)for(var w=b*m,C=b*r[0],E=0;E<o.inChannels;++E)for(var R=0;R<o.outHeight;++R)for(var I=R*i-f,k=Math.max(0,I),S=Math.min(o.inHeight,l+I),A=w+R*y,T=0;T<o.outWidth;++T){for(var D=T*s-d,N=Math.max(0,D),F=Math.min(o.inWidth,h+D),_=p,O=0,M=0,B=k;B<S;B+=u){for(var P=C+B*r[1],L=N;L<F;L+=c){var W=t[P+L*r[2]+E];\"max\"===a&&W>_?_=W:\"avg\"===a&&(O+=W,M++)}if(isNaN(_))break}g[A+T*x+E]=\"avg\"===a?O/M:_}return v}function vf(t,e,n,r,o,a){void 0===o&&(o=!1),void 0===a&&(a=!1);for(var i=er(r.outShape,\"int32\"),s=r.strideHeight,u=r.strideWidth,c=r.dilationHeight,l=r.dilationWidth,h=r.effectiveFilterHeight,f=r.effectiveFilterWidth,d=r.padInfo.top,p=r.padInfo.left,v=er(e,n,t),g=0;g<r.batchSize;++g)for(var m=0;m<r.inChannels;++m)for(var y=0;y<r.outHeight;++y){for(var x=y*s-d,b=x;b<0;)b+=c;for(var w=Math.min(r.inHeight,h+x),C=0;C<r.outWidth;++C){for(var E=C*u-p,R=E;R<0;)R+=l;for(var I=Math.min(r.inWidth,f+E),k=Number.NEGATIVE_INFINITY,S=-1,A=b;A<w;A+=c)for(var T=A-x,D=R;D<I;D+=l){var N=D-E,F=v.get(g,A,D,m);F>k&&(k=F,S=o?a?((g*r.inHeight+A)*r.inWidth+D)*r.inChannels+m:(A*r.inWidth+D)*r.inChannels+m:T*f+N)}i.set(S,g,y,C,m)}}return i}function gf(t,e,n,r){if(\"linear\"===n)return t.linear(e);if(\"relu\"===n)return t.relu(e);if(\"elu\"===n)return t.elu(e);if(\"relu6\"===n)return t.relu6(e);if(\"prelu\"===n)return t.prelu(e,r);throw new Error(\"Activation \"+n+\" has not been implemented for the CPU backend.\")}var mf=function(t){function o(){var e=t.call(this)||this;return e.blockSize=48,e.firstUse=!0,e.data=new ca(e,Lt),e}return e(o,t),o.prototype.write=function(t,e,n){this.firstUse&&(this.firstUse=!1,i().get(\"IS_NODE\")&&dn(\"\\n============================\\nHi there 👋. Looks like you are running TensorFlow.js in Node.js. To speed things up dramatically, install our node backend, which binds to TensorFlow C++, by running npm i @tensorflow/tfjs-node, or npm i @tensorflow/tfjs-node-gpu if you have CUDA. Then call require('@tensorflow/tfjs-node'); (-gpu suffix for CUDA) at the start of your program. Visit https://github.com/tensorflow/tfjs-node for more details.\\n============================\"));var r={};return this.data.set(r,{values:t,dtype:n}),r},o.prototype.move=function(t,e,n,r){this.data.set(t,{values:e,dtype:r})},o.prototype.numDataIds=function(){return this.data.numDataIds()},o.prototype.read=function(t){return n(this,void 0,void 0,(function(){return r(this,(function(e){return[2,this.readSync(t)]}))}))},o.prototype.readSync=function(t){var e=this.data.get(t),n=e.dtype,r=e.complexTensors;return\"complex64\"===n?Aa(this.readSync(r.real.dataId),this.readSync(r.imag.dataId)):this.data.get(t).values},o.prototype.bufferSync=function(t){var e=this.readSync(t.dataId),n=e;if(\"string\"===t.dtype)try{n=e.map((function(t){return ot(t)}))}catch(t){throw new Error(\"Failed to decode encoded string bytes into utf-8\")}return er(t.shape,t.dtype,n)},o.prototype.makeOutput=function(t,e,n){var r=this.write(t,e,n);return Lt.makeTensorFromDataId(r,e,n,this)},o.prototype.disposeData=function(t){if(this.data.has(t)){var e=this.data.get(t).complexTensors;null!=e&&(e.real.dispose(),e.imag.dispose()),this.data.delete(t)}},o.prototype.time=function(t){return n(this,void 0,void 0,(function(){var e;return r(this,(function(n){return e=et(),t(),[2,{kernelMs:et()-e}]}))}))},o.prototype.memory=function(){return{unreliable:!0,reasons:[\"The reported memory is an upper bound. Due to automatic garbage collection, the true allocated memory may be less.\"]}},o.prototype.complex=function(t,e){var n=this.makeOutput(null,t.shape,\"complex64\");return this.data.get(n.dataId).complexTensors={real:Lt.keep(t.clone()),imag:Lt.keep(e.clone())},n},o.prototype.real=function(t){return this.data.get(t.dataId).complexTensors.real.clone()},o.prototype.imag=function(t){return this.data.get(t.dataId).complexTensors.imag.clone()},o.prototype.slice=function(t,e,n){if(df(t,\"slice\"),$o(t.shape,e,n)){var r=Qo(e,t.strides),o=k(n);return Fn(this.readSync(t.dataId).subarray(r,r+o),n,t.dtype)}for(var a=er(n,t.dtype),i=this.bufferSync(t),s=0;s<a.size;++s){var u=a.indexToLoc(s).map((function(t,n){return t+e[n]}));a.values[s]=i.get.apply(i,u)}return a.toTensor()},o.prototype.stridedSlice=function(t,e,n,r){df(t,\"stridedSlice\");var o=jo(e,n,r);if(o.some((function(t){return 0===t})))return Fn([],o);for(var a=er(o,t.dtype),i=this.bufferSync(t),s=0;s<a.size;s++){for(var u=a.indexToLoc(s),c=new Array(u.length),l=0;l<c.length;l++)c[l]=u[l]*r[l]+e[l];a.set.apply(a,[i.get.apply(i,c)].concat(u))}return a.toTensor()},o.prototype.diag=function(t){for(var e=this.readSync(t.dataId),n=er([t.size,t.size],t.dtype),r=n.values,o=0;o<e.length;o++)r[o*t.size+o]=e[o];return n.toTensor()},o.prototype.unstack=function(t,e){for(var n=t.shape[e],r=new Array(t.rank-1),o=0,a=0;a<t.rank;a++)a!==e&&(r[o++]=t.shape[a]);var i=new Array(t.rank).fill(0),s=t.shape.slice();s[e]=1;var u=new Array(n);for(a=0;a<u.length;a++)i[e]=a,u[a]=this.slice(t,i,s).reshape(r);return u},o.prototype.reverse=function(t,e){df(t,\"reverse\");for(var n=er(t.shape,t.dtype),r=this.bufferSync(t),o=function(o){var a=n.indexToLoc(o),i=a.slice();e.forEach((function(e){return i[e]=t.shape[e]-1-i[e]})),n.set.apply(n,[r.get.apply(r,i)].concat(a))},a=0;a<n.size;a++)o(a);return n.toTensor()},o.prototype.concat=function(t,e){var n=this;if(\"complex64\"===t[0].dtype){var r=t.map((function(t){return Dn(t)})),o=t.map((function(t){return Nn(t)}));return Tn(this.concat(r,e),this.concat(o,e))}var a=t.map((function(t){var n=k(t.shape.slice(e));return t.as2D(-1,n)})),i=Sn(a.map((function(t){return t.shape})),1),s=er(i,t[0].dtype).values;if(1===a[0].shape[0]){var u=0;a.forEach((function(t){s.set(n.readSync(t.dataId),u),u+=t.size}))}else{var c=0;a.forEach((function(t){for(var e=n.readSync(t.dataId),r=0,o=0;o<t.shape[0];++o)for(var a=o*i[1]+c,u=0;u<t.shape[1];++u)s[a+u]=e[r++];c+=t.shape[1]}))}var l=Sn(t.map((function(t){return t.shape})),e);return Fn(s,l,t[0].dtype)},o.prototype.neg=function(t){return df(t,\"neg\"),this.multiply(On(-1),t)},o.prototype.add=function(t,e){return\"complex64\"===t.dtype||\"complex64\"===e.dtype?this.broadcastedBinaryComplexOp(t.cast(\"complex64\"),e.cast(\"complex64\"),(function(t,e,n,r){return{real:t+n,imag:e+r}})):this.broadcastedBinaryOp(t,e,Tt(t.dtype,e.dtype),(function(t,e){return t+e}))},o.prototype.addN=function(t){var e=this;df(t,\"addN\");for(var n=t.map((function(t){return e.readSync(t.dataId)})),r=er(t[0].shape,t[0].dtype),o=r.values,a=0;a<t.length;a++)for(var i=n[a],s=0;s<o.length;s++)o[s]+=i[s];return r.toTensor()},o.prototype.softmax=function(t,e){var n=O([e],t.shape),r=this.max(t,n),o=wn(r.shape,n),a=this.subtract(t,r.reshape(o)),i=this.exp(a),s=this.sum(i,n).reshape(o);return Bo(i,s)},o.prototype.subtract=function(t,e){return\"complex64\"===t.dtype||\"complex64\"===e.dtype?this.broadcastedBinaryComplexOp(t.cast(\"complex64\"),e.cast(\"complex64\"),(function(t,e,n,r){return{real:t-n,imag:e-r}})):this.broadcastedBinaryOp(t,e,Tt(t.dtype,e.dtype),(function(t,e){return t-e}))},o.prototype.pow=function(t,e){return df([t,e],\"pow\"),this.broadcastedBinaryOp(t,e,t.dtype,(function(t,e){return Math.pow(t,e)}))},o.prototype.batchMatMul=function(t,e,n,r){df([t,e],\"matMul\");for(var o=n?t.shape[1]:t.shape[2],a=n?t.shape[2]:t.shape[1],i=r?e.shape[1]:e.shape[2],s=t.shape[0],u=this.readSync(t.dataId),c=this.readSync(e.dataId),l=n?[t.strides[0],1,t.strides[1]]:[t.strides[0],t.strides[1],1],h=l[0],f=l[1],d=l[2],p=r?[1,e.strides[1],e.strides[0]]:[e.strides[1],1,e.strides[0]],v=p[0],g=p[1],m=p[2],y=a*i,x=er([s,a,i],t.dtype),b=x.values,w=this.blockSize,C=0;C<s;C++)for(var E=0;E<a;E+=w)for(var R=0;R<i;R+=w)for(var I=0;I<o;I+=w)for(var k=Math.min(E+w,a),S=Math.min(R+w,i),A=Math.min(I+w,o),T=E;T<k;T++)for(var D=R;D<S;D++){for(var N=0,F=I;F<A;F++)N+=u[C*h+T*f+F*d]*c[F*v+D*g+C*m];b[C*y+(T*i+D)]+=N}return x.toTensor()},o.prototype.fusedBatchMatMul=function(t){var e=t.a,n=t.b,r=t.transposeA,o=t.transposeB,a=t.bias,i=t.activation,s=t.preluActivationWeights,u=this.batchMatMul(e,n,r,o);return a&&(u=this.add(u,a)),i&&(u=gf(this,u,i,s)),u},o.prototype.multiply=function(t,e){return\"complex64\"===t.dtype||\"complex64\"===e.dtype?this.broadcastedBinaryComplexOp(t.cast(\"complex64\"),e.cast(\"complex64\"),(function(t,e,n,r){return{real:t*n-e*r,imag:t*r+e*n}})):this.broadcastedBinaryOp(t,e,Tt(t.dtype,e.dtype),(function(t,e){return t*e}))},o.prototype.floorDiv=function(t,e){df([t,e],\"floorDiv\");return this.broadcastedBinaryOp(t,e,\"int32\",(function(t,e){return Math.floor(t/e)}))},o.prototype.sum=function(t,e){df(t,\"sum\"),Cn(\"sum\",e,t.rank);for(var n=bn(t.shape,e),r=n[0],o=n[1],a=Gn(r,Tt(t.dtype,\"int32\")),i=k(o),s=this.readSync(a.dataId),u=this.readSync(t.dataId),c=0;c<s.length;++c){for(var l=c*i,h=0,f=0;f<i;++f)h+=u[l+f];s[c]=h}return a},o.prototype.prod=function(t,e){df(t,\"sum\");for(var n=bn(t.shape,e),r=n[0],o=n[1],a=Gn(r,Tt(t.dtype,\"int32\")),i=k(o),s=this.readSync(a.dataId),u=this.readSync(t.dataId),c=0;c<s.length;++c){for(var l=c*i,h=1,f=0;f<i;++f)h*=u[l+f];s[c]=h}return a},o.prototype.unsortedSegmentSum=function(t,e,n){df(t,\"unsortedSegmentSum\");for(var r=[],o=t.rank-e.rank,a=0;a<o;++a)e=e.expandDims(a+1);for(a=0;a<n;++a){var i=On(a,\"int32\"),s=Kc(i,e).asType(\"float32\").mul(t).sum(0);r.push(s)}return hr(r)},o.prototype.argMin=function(t,e){df(t,\"argMin\");var n=[e];Cn(\"argMin\",n,t.rank);for(var r=bn(t.shape,n),o=r[0],a=r[1],i=Gn(o,\"int32\"),s=k(a),u=this.readSync(i.dataId),c=this.readSync(t.dataId),l=0;l<u.length;++l){for(var h=l*s,f=c[h],d=0,p=0;p<s;++p){var v=c[h+p];v<f&&(f=v,d=p)}u[l]=d}return i},o.prototype.argMax=function(t,e){df(t,\"argMax\");var n=[e];Cn(\"argMax\",n,t.rank);for(var r=bn(t.shape,n),o=r[0],a=r[1],i=Gn(o,\"int32\"),s=k(a),u=this.readSync(i.dataId),c=this.readSync(t.dataId),l=0;l<u.length;++l){for(var h=l*s,f=c[h],d=0,p=0;p<s;++p){var v=c[h+p];v>f&&(f=v,d=p)}u[l]=d}return i},o.prototype.cumsum=function(t,e,n,r){if(df(t,\"cumsum\"),e!==t.rank-1)throw new Error(\"backend.cumsum in CPU expects an inner-most axis=\"+(t.rank-1)+\" but got axis=\"+e);for(var o=Tt(t.dtype,\"int32\"),a=Gn(t.shape,o),i=this.readSync(a.dataId),s=this.readSync(t.dataId),u=t.shape[t.rank-1],c=r?function(t,e){return t+u-e-1}:function(t,e){return t+e},l=0;l<s.length;l+=u)for(var h=0;h<u;h++){var f=c(l,h);if(0===h)i[f]=n?0:s[f];else{var d=c(l,h-1);i[f]=n?s[d]+i[d]:s[f]+i[d]}}return a},o.prototype.equal=function(t,e){return df([t,e],\"equal\"),this.broadcastedBinaryOp(t,e,\"bool\",(function(t,e){return t===e?1:0}))},o.prototype.notEqual=function(t,e){return df([t,e],\"notEqual\"),this.broadcastedBinaryOp(t,e,\"bool\",(function(t,e){return t!==e?1:0}))},o.prototype.less=function(t,e){return df([t,e],\"less\"),this.broadcastedBinaryOp(t,e,\"bool\",(function(t,e){return t<e?1:0}))},o.prototype.lessEqual=function(t,e){return df([t,e],\"lessEqual\"),this.broadcastedBinaryOp(t,e,\"bool\",(function(t,e){return t<=e?1:0}))},o.prototype.greater=function(t,e){return df([t,e],\"greater\"),this.broadcastedBinaryOp(t,e,\"bool\",(function(t,e){return t>e?1:0}))},o.prototype.greaterEqual=function(t,e){return df([t,e],\"greaterEqual\"),this.broadcastedBinaryOp(t,e,\"bool\",(function(t,e){return t>=e?1:0}))},o.prototype.logicalNot=function(t){df(t,\"logicalNot\");for(var e=this.readSync(t.dataId),n=new Uint8Array(e.length),r=0;r<e.length;++r)n[r]=e[r]?0:1;return this.makeOutput(n,t.shape,\"bool\")},o.prototype.logicalAnd=function(t,e){return df([t,e],\"logicalAnd\"),this.broadcastedBinaryOp(t,e,\"bool\",(function(t,e){return t&&e}))},o.prototype.logicalOr=function(t,e){return df([t,e],\"logicalOr\"),this.broadcastedBinaryOp(t,e,\"bool\",(function(t,e){return t||e}))},o.prototype.select=function(t,e,n){df([t,e,n],\"select\");for(var r=this.readSync(t.dataId),o=this.readSync(e.dataId),a=this.readSync(n.dataId),i=Gn(e.shape,Tt(e.dtype,n.dtype)),s=this.readSync(i.dataId),u=0,c=0===t.rank||t.rank>1||1===e.rank?1:k(e.shape.slice(1)),l=0;l<r.length;l++)for(var h=0;h<c;h++)1===r[l]?s[u++]=o[l]:s[u++]=a[l];return i},o.prototype.where=function(t){df([t],\"where\");var e=this.readSync(t.dataId);return Ga(t.shape,e)},o.prototype.topk=function(t,e,n){return df(t,\"topk\"),za(this.readSync(t.dataId),t.shape,t.dtype,e)},o.prototype.min=function(t,e){df(t,\"min\"),Cn(\"min\",e,t.rank);for(var n=bn(t.shape,e),r=n[0],o=n[1],a=Gn(r,t.dtype),i=k(o),s=this.readSync(a.dataId),u=this.readSync(t.dataId),c=0;c<s.length;++c){for(var l=c*i,h=u[l],f=0;f<i;++f){var d=u[l+f];d<h&&(h=d)}s[c]=h}return a},o.prototype.minimum=function(t,e){return df([t,e],\"minimum\"),this.broadcastedBinaryOp(t,e,t.dtype,(function(t,e){return Math.min(t,e)}))},o.prototype.mod=function(t,e){return df([t,e],\"mod\"),this.broadcastedBinaryOp(t,e,t.dtype,(function(t,e){var n=t%e;return t<0&&e<0||t>=0&&e>=0?n:(n+e)%e}))},o.prototype.max=function(t,e){df(t,\"max\"),Cn(\"max\",e,t.rank);for(var n=bn(t.shape,e),r=n[0],o=n[1],a=Gn(r,t.dtype),i=k(o),s=this.readSync(a.dataId),u=this.readSync(t.dataId),c=0;c<s.length;++c){for(var l=c*i,h=u[l],f=0;f<i;++f){var d=u[l+f];d>h&&(h=d)}s[c]=h}return a},o.prototype.maximum=function(t,e){return df([t,e],\"maximum\"),this.broadcastedBinaryOp(t,e,t.dtype,(function(t,e){return Math.max(t,e)}))},o.prototype.all=function(t,e){df(t,\"all\"),Cn(\"all\",e,t.rank);for(var n=bn(t.shape,e),r=n[0],o=n[1],a=Gn(r,t.dtype),i=k(o),s=this.readSync(a.dataId),u=this.readSync(t.dataId),c=0;c<s.length;++c){for(var l=c*i,h=u[l],f=0;f<i;++f){var d=u[l+f];h=h&&d}s[c]=h}return a},o.prototype.any=function(t,e){df(t,\"any\"),Cn(\"any\",e,t.rank);for(var n=bn(t.shape,e),r=n[0],o=n[1],a=Gn(r,t.dtype),i=k(o),s=this.readSync(a.dataId),u=this.readSync(t.dataId),c=0;c<s.length;++c){for(var l=c*i,h=u[l],f=0;f<i;++f){var d=u[l+f];h=h||d}s[c]=h}return a},o.prototype.squaredDifference=function(t,e){return df([t,e],\"squaredDifference\"),this.broadcastedBinaryOp(t,e,t.dtype,(function(t,e){var n=t-e;return n*n}))},o.prototype.ceil=function(t){df(t,\"ceil\");for(var e=this.readSync(t.dataId),n=new Float32Array(e.length),r=0;r<e.length;++r)n[r]=Math.ceil(e[r]);return this.makeOutput(n,t.shape,\"float32\")},o.prototype.floor=function(t){df(t,\"floor\");for(var e=this.readSync(t.dataId),n=new Float32Array(e.length),r=0;r<e.length;++r)n[r]=Math.floor(e[r]);return this.makeOutput(n,t.shape,\"float32\")},o.prototype.sign=function(t){df(t,\"x\");for(var e=this.readSync(t.dataId),n=new Float32Array(e.length),r=0;r<e.length;++r)e[r]<0?n[r]=-1:e[r]>0?n[r]=1:n[r]=0;return this.makeOutput(n,t.shape,\"float32\")},o.prototype.isNaN=function(t){df(t,\"x\");for(var e=this.readSync(t.dataId),n=new Uint8Array(e.length),r=0;r<e.length;++r)Number.isNaN(e[r])&&(n[r]=1);return this.makeOutput(n,t.shape,\"bool\")},o.prototype.isInf=function(t){df(t,\"x\");for(var e=this.readSync(t.dataId),n=new Uint8Array(e.length),r=0;r<e.length;++r)Math.abs(e[r])===1/0&&(n[r]=1);return this.makeOutput(n,t.shape,\"bool\")},o.prototype.isFinite=function(t){df(t,\"x\");for(var e=this.readSync(t.dataId),n=new Uint8Array(e.length),r=0;r<e.length;++r)Number.isFinite(e[r])&&(n[r]=1);return this.makeOutput(n,t.shape,\"bool\")},o.prototype.round=function(t){df(t,\"round\");for(var e=this.readSync(t.dataId),n=new Float32Array(e.length),r=0;r<e.length;++r){var o=Math.floor(e[r]);e[r]-o<.5?n[r]=Math.floor(e[r]):e[r]-o>.5?n[r]=Math.ceil(e[r]):n[r]=o%2==0?o:o+1}return this.makeOutput(n,t.shape,\"float32\")},o.prototype.exp=function(t){df(t,\"exp\");for(var e=this.readSync(t.dataId),n=new Float32Array(e.length),r=0;r<e.length;++r)n[r]=Math.exp(e[r]);return this.makeOutput(n,t.shape,\"float32\")},o.prototype.expm1=function(t){df(t,\"expm1\");for(var e=this.readSync(t.dataId),n=new Float32Array(e.length),r=0;r<e.length;++r)n[r]=Math.expm1(e[r]);return this.makeOutput(n,t.shape,\"float32\")},o.prototype.log=function(t){df(t,\"log\");for(var e=this.readSync(t.dataId),n=new Float32Array(e.length),r=0;r<e.length;++r){var o=e[r];n[r]=Math.log(o)}return this.makeOutput(n,t.shape,\"float32\")},o.prototype.log1p=function(t){df(t,\"log1p\");for(var e=this.readSync(t.dataId),n=new Float32Array(e.length),r=0;r<e.length;++r){var o=e[r];n[r]=Math.log1p(o)}return this.makeOutput(n,t.shape,\"float32\")},o.prototype.sqrt=function(t){df(t,\"sqrt\");for(var e=this.readSync(t.dataId),n=new Float32Array(e.length),r=0;r<e.length;++r){var o=e[r];n[r]=Math.sqrt(o)}return this.makeOutput(n,t.shape,\"float32\")},o.prototype.rsqrt=function(t){df(t,\"rsqrt\");for(var e=this.readSync(t.dataId),n=new Float32Array(e.length),r=0;r<e.length;++r){var o=e[r];n[r]=1/Math.sqrt(o)}return this.makeOutput(n,t.shape,\"float32\")},o.prototype.reciprocal=function(t){df(t,\"reciprocal\");for(var e=this.readSync(t.dataId),n=new Float32Array(e.length),r=0;r<e.length;++r)n[r]=1/e[r];return this.makeOutput(n,t.shape,\"float32\")},o.prototype.linear=function(t){return t},o.prototype.relu=function(t){df(t,\"relu\");for(var e=Gn(t.shape,t.dtype),n=this.readSync(e.dataId),r=this.readSync(t.dataId),o=0;o<r.length;++o)n[o]=Math.max(0,r[o]);return e},o.prototype.relu6=function(t){df(t,\"relu\");for(var e=Gn(t.shape,t.dtype),n=this.readSync(e.dataId),r=this.readSync(t.dataId),o=0;o<r.length;++o)n[o]=Math.min(Math.max(0,r[o]),6);return e},o.prototype.prelu=function(t,e){return df([t,e],\"prelu\"),this.broadcastedBinaryOp(t,e,t.dtype,(function(t,e){return t<0?e*t:t}))},o.prototype.elu=function(t){df(t,\"elu\");for(var e=new Float32Array(t.size),n=this.readSync(t.dataId),r=0;r<n.length;++r){var o=n[r];e[r]=o>=0?o:Math.exp(o)-1}return this.makeOutput(e,t.shape,\"float32\")},o.prototype.eluDer=function(t,e){df([t,e],\"eluDer\");for(var n=new Float32Array(e.size),r=this.readSync(e.dataId),o=this.readSync(t.dataId),a=0;a<r.length;++a){var i=r[a];n[a]=i>=1?o[a]:o[a]*(i+1)}return this.makeOutput(n,e.shape,\"float32\")},o.prototype.selu=function(t){df(t,\"selu\");for(var e=su,n=uu,r=new Float32Array(t.size),o=this.readSync(t.dataId),a=0;a<o.length;++a){var i=o[a];r[a]=i>=0?n*i:e*(Math.exp(i)-1)}return this.makeOutput(r,t.shape,\"float32\")},o.prototype.clip=function(t,e,n){df(t,\"clip\");for(var r=new Float32Array(t.size),o=this.readSync(t.dataId),a=0;a<o.length;++a){var i=o[a];r[a]=i>n?n:i<e?e:i}return this.makeOutput(r,t.shape,\"float32\")},o.prototype.abs=function(t){for(var e=new Float32Array(t.size),n=this.readSync(t.dataId),r=0;r<n.length;++r)e[r]=Math.abs(n[r]);return this.makeOutput(e,t.shape,\"float32\")},o.prototype.complexAbs=function(t){for(var e=new Float32Array(t.size),n=this.readSync(t.dataId),r=0;r<t.size;++r){var o=n[2*r],a=n[2*r+1];e[r]=Math.hypot(o,a)}return this.makeOutput(e,t.shape,\"float32\")},o.prototype.int=function(t){df(t,\"int\");for(var e=new Int32Array(t.size),n=this.readSync(t.dataId),r=0;r<n.length;++r)e[r]=n[r];return this.makeOutput(e,t.shape,\"int32\")},o.prototype.sigmoid=function(t){df(t,\"sigmoid\");for(var e=new Float32Array(t.size),n=this.readSync(t.dataId),r=0;r<n.length;++r)e[r]=1/(1+Math.exp(-n[r]));return this.makeOutput(e,t.shape,\"float32\")},o.prototype.softplus=function(t){df(t,\"softplus\");for(var e=Math.log(1.1920928955078125e-7)+2,n=new Float32Array(t.size),r=this.readSync(t.dataId),o=0;o<r.length;++o){var a=r[o]>-e,i=r[o]<e,s=Math.exp(r[o]),u=void 0;u=i?s:a?r[o]:Math.log(1+s),n[o]=u}return this.makeOutput(n,t.shape,\"float32\")},o.prototype.sin=function(t){df(t,\"sin\");for(var e=new Float32Array(t.size),n=this.readSync(t.dataId),r=0;r<n.length;++r)e[r]=Math.sin(n[r]);return this.makeOutput(e,t.shape,\"float32\")},o.prototype.cos=function(t){df(t,\"cos\");for(var e=new Float32Array(t.size),n=this.readSync(t.dataId),r=0;r<n.length;++r)e[r]=Math.cos(n[r]);return this.makeOutput(e,t.shape,\"float32\")},o.prototype.tan=function(t){df(t,\"tan\");for(var e=new Float32Array(t.size),n=this.readSync(t.dataId),r=0;r<n.length;++r)e[r]=Math.tan(n[r]);return this.makeOutput(e,t.shape,\"float32\")},o.prototype.asin=function(t){df(t,\"asin\");for(var e=new Float32Array(t.size),n=this.readSync(t.dataId),r=0;r<n.length;++r)e[r]=Math.asin(n[r]);return this.makeOutput(e,t.shape,\"float32\")},o.prototype.acos=function(t){df(t,\"acos\");for(var e=new Float32Array(t.size),n=this.readSync(t.dataId),r=0;r<n.length;++r)e[r]=Math.acos(n[r]);return this.makeOutput(e,t.shape,\"float32\")},o.prototype.atan=function(t){df(t,\"atan\");for(var e=new Float32Array(t.size),n=this.readSync(t.dataId),r=0;r<n.length;++r)e[r]=Math.atan(n[r]);return this.makeOutput(e,t.shape,\"float32\")},o.prototype.atan2=function(t,e){return df([t,e],\"atan2\"),this.broadcastedBinaryOp(t,e,t.dtype,(function(t,e){return Math.atan2(t,e)}))},o.prototype.sinh=function(t){df(t,\"sinh\");for(var e=new Float32Array(t.size),n=this.readSync(t.dataId),r=0;r<n.length;++r)e[r]=Math.sinh(n[r]);return this.makeOutput(e,t.shape,\"float32\")},o.prototype.cosh=function(t){df(t,\"cosh\");for(var e=new Float32Array(t.size),n=this.readSync(t.dataId),r=0;r<n.length;++r)e[r]=Math.cosh(n[r]);return this.makeOutput(e,t.shape,\"float32\")},o.prototype.tanh=function(t){df(t,\"tanh\");for(var e=new Float32Array(t.size),n=this.readSync(t.dataId),r=0;r<n.length;++r)e[r]=T(n[r]);return this.makeOutput(e,t.shape,\"float32\")},o.prototype.asinh=function(t){df(t,\"asinh\");for(var e=new Float32Array(t.size),n=this.readSync(t.dataId),r=0;r<n.length;++r)e[r]=Math.asinh(n[r]);return this.makeOutput(e,t.shape,\"float32\")},o.prototype.acosh=function(t){df(t,\"acosh\");for(var e=new Float32Array(t.size),n=this.readSync(t.dataId),r=0;r<n.length;++r)e[r]=Math.acosh(n[r]);return this.makeOutput(e,t.shape,\"float32\")},o.prototype.atanh=function(t){df(t,\"atanh\");for(var e=new Float32Array(t.size),n=this.readSync(t.dataId),r=0;r<n.length;++r)e[r]=Math.atanh(n[r]);return this.makeOutput(e,t.shape,\"float32\")},o.prototype.erf=function(t){df(t,\"erf\");for(var e=new Float32Array(t.size),n=this.readSync(t.dataId),r=0;r<n.length;++r){var o=Math.sign(n[r]),a=Math.abs(n[r]),i=1/(1+.3275911*a);e[r]=o*(1-((((1.061405429*i-1.453152027)*i+1.421413741)*i-.284496736)*i+.254829592)*i*Math.exp(-a*a))}return this.makeOutput(e,t.shape,\"float32\")},o.prototype.step=function(t,e){void 0===e&&(e=0),df(t,\"step\");for(var n=new Float32Array(t.size),r=this.readSync(t.dataId),o=0;o<r.length;++o){var a=r[o];isNaN(a)?n[o]=NaN:n[o]=a>0?1:e}return this.makeOutput(n,t.shape,\"float32\")},o.prototype.fusedConv2d=function(t){var e=t.input,n=t.filter,r=t.convInfo,o=t.bias,a=t.activation,i=t.preluActivationWeights,s=this.conv2d(e,n,r);return o&&(s=this.add(s,o)),a&&(s=gf(this,s,a,i)),s},o.prototype.conv2d=function(t,e,n){df([t,e],\"conv2d\");for(var r=n.filterHeight,o=n.filterWidth,a=n.dilationHeight,i=n.dilationWidth,s=n.padInfo.left,u=n.padInfo.top,c=\"channelsLast\"===n.dataFormat,l=er(n.outShape,t.dtype),h=t.strides[0],f=c?t.strides[1]:t.strides[2],d=c?t.strides[2]:1,p=c?1:t.strides[1],v=l.strides[0],g=c?l.strides[1]:l.strides[2],m=c?l.strides[2]:1,y=c?1:l.strides[1],x=this.readSync(t.dataId),b=this.readSync(e.dataId),w=l.values,C=0;C<n.batchSize;++C)for(var E=C*h,R=C*v,I=0;I<n.outHeight;++I)for(var k=R+I*g,S=I*n.strideHeight-u,A=0;A<r;A++){var T=S+A*a;if(!(T<0||T>=n.inHeight))for(var D=A*e.strides[0],N=E+T*f,F=0;F<n.outWidth;++F)for(var _=k+F*m,O=F*n.strideWidth-s,M=0;M<o;M++){var B=O+M*i;if(!(B<0||B>=n.inWidth))for(var P=N+B*d,L=D+M*e.strides[1],W=0;W<n.inChannels;++W){for(var U=x[P+W*p],V=0;V<n.outChannels;++V)w[_+V*y]+=U*b[L+V];L+=n.outChannels}}}return l.toTensor()},o.prototype.conv3d=function(t,e,n){for(var r=n.filterDepth,o=n.filterHeight,a=n.filterWidth,i=n.dilationDepth,s=n.dilationHeight,u=n.dilationWidth,c=n.padInfo.front,l=n.padInfo.left,h=n.padInfo.top,f=er(n.outShape,t.dtype),d=this.readSync(t.dataId),p=this.readSync(e.dataId),v=f.values,g=0;g<n.batchSize;++g)for(var m=g*t.strides[0],y=g*f.strides[0],x=0;x<n.outDepth;++x)for(var b=y+x*f.strides[1],w=x*n.strideDepth-c,C=0;C<r;C++){var E=w+C*i;if(!(E<0||E>=n.inDepth))for(var R=C*e.strides[0],I=m+E*t.strides[1],k=0;k<n.outHeight;++k)for(var S=b+k*f.strides[2],A=k*n.strideHeight-h,T=0;T<o;T++){var D=A+T*s;if(!(D<0||D>=n.inHeight))for(var N=R+T*e.strides[1],F=I+D*t.strides[2],_=0;_<n.outWidth;++_)for(var O=S+_*n.outChannels,M=_*n.strideWidth-l,B=0;B<a;B++){var P=M+B*u;if(!(P<0||P>=n.inWidth))for(var L=N+B*e.strides[2],W=F+P*n.inChannels,U=L,V=0;V<n.inChannels;++V){for(var z=d[W+V],G=0;G<n.outChannels;++G)v[O+G]+=z*p[U+G];U+=n.outChannels}}}}return f.toTensor()},o.prototype.conv2dDerInput=function(t,e,n){df([t,e],\"conv2dDerInput\");for(var r=er(n.inShape,\"float32\"),o=r.values,a=this.readSync(t.dataId),i=this.readSync(e.dataId),s=e.strides,u=s[0],c=s[1],l=s[2],h=n.batchSize,f=n.filterHeight,d=n.filterWidth,p=n.inChannels,v=n.inHeight,g=n.inWidth,m=n.outChannels,y=n.outHeight,x=n.outWidth,b=n.strideHeight,w=n.strideWidth,C=n.dataFormat,E=f-1-n.padInfo.top,R=d-1-n.padInfo.left,I=\"channelsLast\"===C,k=r.strides[0],S=I?r.strides[1]:r.strides[2],A=I?r.strides[2]:1,T=I?1:r.strides[1],D=t.strides[0],N=I?t.strides[1]:t.strides[2],F=I?t.strides[2]:1,_=I?1:t.strides[1],O=0;O<h;++O)for(var M=0;M<p;++M)for(var B=0;B<v;++B)for(var P=B-E,L=Math.max(0,Math.ceil(P/b)),W=Math.min(y,(f+P)/b),U=0;U<g;++U){for(var V=U-R,z=Math.max(0,Math.ceil(V/w)),G=Math.min(x,(d+V)/w),H=0,q=L;q<W;++q)for(var K=q*b-P,j=z;j<G;++j)for(var X=D*O+N*q+F*j,Y=u*(f-1-K)+c*(d-1-(j*w-V))+l*M,$=0;$<m;++$){H+=a[X+_*$]*i[Y+$]}o[k*O+S*B+A*U+T*M]=H}return r.toTensor()},o.prototype.conv3dDerInput=function(t,e,n){for(var r=er(n.inShape,\"float32\"),o=r.values,a=r.strides,i=a[0],s=a[1],u=a[2],c=a[3],l=this.readSync(t.dataId),h=t.strides,f=h[0],d=h[1],p=h[2],v=h[3],g=this.readSync(e.dataId),m=e.strides,y=m[0],x=m[1],b=m[2],w=m[3],C=n.batchSize,E=n.filterDepth,R=n.filterHeight,I=n.filterWidth,k=n.inChannels,S=n.inDepth,A=n.inHeight,T=n.inWidth,D=n.outChannels,N=n.outDepth,F=n.outHeight,_=n.outWidth,O=n.strideDepth,M=n.strideHeight,B=n.strideWidth,P=E-1-n.padInfo.front,L=R-1-n.padInfo.top,W=I-1-n.padInfo.left,U=0;U<C;++U)for(var V=0;V<k;++V)for(var z=0;z<S;++z)for(var G=z-P,H=Math.max(0,Math.ceil(G/O)),q=Math.min(N,(E+G)/O),K=0;K<A;++K)for(var j=K-L,X=Math.max(0,Math.ceil(j/M)),Y=Math.min(F,(R+j)/M),$=0;$<T;++$){for(var Q=$-W,J=Math.max(0,Math.ceil(Q/B)),Z=Math.min(_,(I+Q)/B),tt=0,et=H;et<q;++et)for(var nt=et*O-G,rt=X;rt<Y;++rt)for(var ot=rt*M-j,at=J;at<Z;++at)for(var it=f*U+d*et+p*rt+v*at,st=y*(E-1-nt)+x*(R-1-ot)+b*(I-1-(at*B-Q))+w*V,ut=0;ut<D;++ut){tt+=l[it+ut]*g[st+ut]}o[i*U+s*z+u*K+c*$+V]=tt}return r.toTensor()},o.prototype.conv2dDerFilter=function(t,e,n){df([t,e],\"conv2dDerFilter\");for(var r=n.strideHeight,o=n.strideWidth,a=n.filterHeight,i=n.filterWidth,s=\"channelsLast\"===n.dataFormat,u=er(n.filterShape,\"float32\"),c=n.padInfo.left,l=n.padInfo.top,h=this.bufferSync(t),f=this.bufferSync(e),d=0;d<a;++d)for(var p=Math.max(0,Math.ceil((l-d)/r)),v=Math.min(n.outHeight,(n.inHeight+l-d)/r),g=0;g<i;++g)for(var m=Math.max(0,Math.ceil((c-g)/o)),y=Math.min(n.outWidth,(n.inWidth+c-g)/o),x=0;x<n.inChannels;++x)for(var b=0;b<n.outChannels;++b){for(var w=0,C=0;C<n.batchSize;++C)for(var E=p;E<v;++E)for(var R=d+E*r-l,I=m;I<y;++I){var k=g+I*o-c;w+=s?h.get(C,R,k,x)*f.get(C,E,I,b):h.get(C,x,R,k)*f.get(C,b,E,I)}u.set(w,d,g,x,b)}return u.toTensor()},o.prototype.conv3dDerFilter=function(t,e,n){for(var r=n.strideDepth,o=n.strideHeight,a=n.strideWidth,i=n.filterDepth,s=n.filterHeight,u=n.filterWidth,c=er(n.filterShape,\"float32\"),l=c.values,h=c.strides,f=h[0],d=h[1],p=h[2],v=h[3],g=this.readSync(e.dataId),m=e.strides,y=m[0],x=m[1],b=m[2],w=m[3],C=this.readSync(t.dataId),E=t.strides,R=E[0],I=E[1],k=E[2],S=E[3],A=n.padInfo.front,T=n.padInfo.left,D=n.padInfo.top,N=0;N<i;++N)for(var F=Math.max(0,Math.ceil((A-N)/r)),_=Math.min(n.outDepth,(n.inDepth+A-N)/r),O=N*f,M=0;M<s;++M)for(var B=Math.max(0,Math.ceil((D-M)/o)),P=Math.min(n.outHeight,(n.inHeight+D-M)/o),L=M*d+O,W=0;W<u;++W)for(var U=Math.max(0,Math.ceil((T-W)/a)),V=Math.min(n.outWidth,(n.inWidth+T-W)/a),z=W*p+L,G=0;G<n.inChannels;++G)for(var H=G*v+z,q=0;q<n.outChannels;++q){for(var K=0,j=0;j<n.batchSize;++j)for(var X=j*R,Y=j*y,$=F;$<_;++$)for(var Q=(N+$*r-A)*I+X,J=$*x+Y,Z=B;Z<P;++Z)for(var tt=(M+Z*o-D)*k+Q,et=Z*b+J,nt=U;nt<V;++nt){var rt=nt*w+et;K+=C[(W+nt*a-T)*S+tt+G]*g[rt+q]}l[H+q]=K}return c.toTensor()},o.prototype.fusedDepthwiseConv2D=function(t){var e=t.input,n=t.filter,r=t.convInfo,o=t.bias,a=t.activation,i=t.preluActivationWeights,s=this.depthwiseConv2D(e,n,r);return o&&(s=this.add(s,o)),a&&(s=gf(this,s,a,i)),s},o.prototype.depthwiseConv2D=function(t,e,n){df([t,e],\"depthwiseConv2D\");for(var r=n.filterHeight,o=n.filterWidth,a=n.dilationHeight,i=n.dilationWidth,s=n.padInfo.left,u=n.padInfo.top,c=n.outChannels/n.inChannels,l=er(n.outShape,t.dtype),h=this.readSync(t.dataId),f=this.readSync(e.dataId),d=l.values,p=0;p<n.batchSize;++p)for(var v=p*t.strides[0],g=p*l.strides[0],m=0;m<n.outHeight;++m)for(var y=g+m*l.strides[1],x=m*n.strideHeight-s,b=0;b<r;++b){var w=x+b*a;if(!(w<0||w>=n.inHeight))for(var C=b*e.strides[0],E=v+w*t.strides[1],R=0;R<n.outWidth;++R)for(var I=y+R*l.strides[2],k=R*n.strideWidth-u,S=0;S<o;++S){var A=k+S*i;if(!(A<0||A>=n.inWidth))for(var T=C+S*e.strides[1],D=E+A*n.inChannels,N=I,F=T,_=0;_<n.inChannels;++_){for(var O=h[D+_],M=0;M<c;++M)d[N+M]+=O*f[F+M];N+=c,F+=c}}}return l.toTensor()},o.prototype.depthwiseConv2DDerInput=function(t,e,n){df([t,e],\"depthwiseConv2DDerInput\");for(var r=er(n.inShape,\"float32\"),o=r.values,a=r.strides,i=a[0],s=a[1],u=a[2],c=this.readSync(t.dataId),l=t.strides,h=l[0],f=l[1],d=l[2],p=this.readSync(e.dataId),v=e.strides,g=v[0],m=v[1],y=v[2],x=n.batchSize,b=n.filterHeight,w=n.filterWidth,C=n.inChannels,E=n.inHeight,R=n.inWidth,I=n.outChannels,k=n.outHeight,S=n.outWidth,A=n.strideHeight,T=n.strideWidth,D=b-1-n.padInfo.top,N=w-1-n.padInfo.left,F=I/C,_=0;_<x;++_)for(var O=0;O<C;++O)for(var M=0;M<E;++M)for(var B=M-D,P=Math.max(0,Math.ceil(B/A)),L=Math.min(k,(b+B)/A),W=0;W<R;++W){for(var U=W-N,V=Math.max(0,Math.ceil(U/T)),z=Math.min(S,(w+U)/T),G=0,H=P;H<L;++H)for(var q=H*A-B,K=V;K<z;++K)for(var j=h*_+f*H+d*K,X=g*(b-1-q)+m*(w-1-(K*T-U))+y*O,Y=0;Y<F;++Y){G+=c[j+(O*F+Y)]*p[X+Y]}o[i*_+s*M+u*W+O]=G}return r.toTensor()},o.prototype.depthwiseConv2DDerFilter=function(t,e,n){df([t,e],\"depthwiseConv2DDerFilter\");for(var r=n.strideHeight,o=n.strideWidth,a=n.filterHeight,i=n.filterWidth,s=er(n.filterShape,\"float32\"),u=n.padInfo.left,c=n.padInfo.top,l=n.outChannels/n.inChannels,h=this.bufferSync(t),f=this.bufferSync(e),d=0;d<a;++d)for(var p=Math.max(0,Math.ceil((c-d)/r)),v=Math.min(n.outHeight,(n.inHeight+c-d)/r),g=0;g<i;++g)for(var m=Math.max(0,Math.ceil((u-g)/o)),y=Math.min(n.outWidth,(n.inWidth+u-g)/o),x=0;x<n.outChannels;++x){for(var b=Math.trunc(x/l),w=x%l,C=0,E=0;E<n.batchSize;++E)for(var R=p;R<v;++R)for(var I=d+R*r-c,k=m;k<y;++k){var S=g+k*o-u;C+=h.get(E,I,S,b)*f.get(E,R,k,x)}s.set(C,d,g,b,w)}return s.toTensor()},o.prototype.tile=function(t,e){return df(t,\"tile\"),Va(this.bufferSync(t),e)},o.prototype.pad=function(t,e,n){df(t,\"pad\");var r=e.map((function(e,n){return e[0]+t.shape[n]+e[1]})),o=e.map((function(t){return t[0]})),a=this.bufferSync(t),i=er(r,t.dtype);0!==n&&i.values.fill(n);for(var s=0;s<t.size;s++){var u=a.indexToLoc(s),c=u.map((function(t,e){return t+o[e]}));i.set.apply(i,[a.get.apply(a,u)].concat(c))}return i.toTensor()},o.prototype.gather=function(t,e,n){df([t,e],\"gather\");var r=t.shape.slice(),o=this.readSync(e.dataId);r[n]=o.length;for(var a=er(r,t.dtype),i=this.bufferSync(t),s=0;s<a.size;++s){var u=a.indexToLoc(s),c=u.slice();c[n]=o[u[n]];var l=i.locToIndex(c);a.values[s]=i.values[l]}return a.toTensor()},o.prototype.batchToSpaceND=function(t,e,n){df([t],\"batchToSpaceND\");var r=e.reduce((function(t,e){return t*e})),o=pr(t.shape,e,r),a=vr(o.length,e.length),i=gr(t.shape,e,r),s=mr(n,e.length),u=yr(i,n,e.length);return ua(t.reshape(o),a).reshape(i).slice(s,u)},o.prototype.spaceToBatchND=function(t,e,n){df([t],\"spaceToBatchND\");var r=e.reduce((function(t,e){return t*e})),o=[[0,0]];o.push.apply(o,n);for(var a=1+e.length;a<t.shape.length;++a)o.push([0,0]);var i=t.pad(o),s=pr(i.shape,e,r,!1),u=vr(s.length,e.length,!1),c=gr(i.shape,e,r,!1);return ua(i.reshape(s),u).reshape(c)},o.prototype.maxPool=function(t,e){return df(t,\"maxPool\"),pf(this.readSync(t.dataId),t.shape,t.dtype,t.strides,e,\"max\").toTensor()},o.prototype.maxPoolBackprop=function(t,e,n,r){df([e,n],\"maxPoolBackprop\");for(var o=this.readSync(e.dataId),a=er(r.outShape,e.dtype,vf(o,e.shape,e.dtype,r).values),i=r.strideHeight,s=r.strideWidth,u=r.dilationHeight,c=r.dilationWidth,l=r.effectiveFilterHeight,h=r.effectiveFilterWidth,f=h-1-r.padInfo.left,d=l-1-r.padInfo.top,p=er(e.shape,\"float32\"),v=this.bufferSync(t),g=0;g<r.batchSize;++g)for(var m=0;m<r.inChannels;++m)for(var y=0;y<r.inHeight;++y)for(var x=0;x<r.inWidth;++x){for(var b=y-d,w=x-f,C=0,E=0;E<l;E+=u){var R=(b+E)/i;if(!(R<0||R>=r.outHeight||Math.floor(R)!==R))for(var I=0;I<h;I+=c){var k=(w+I)/s;if(!(k<0||k>=r.outWidth||Math.floor(k)!==k)){var S=l*h-1-a.get(g,R,k,m)===E*h+I?1:0;if(0!==S)C+=v.get(g,R,k,m)*S}}}p.set(C,g,y,x,m)}return p.toTensor()},o.prototype.avgPoolBackprop=function(t,e,n){df([t,e],\"avgPoolBackprop\");for(var r=n.strideHeight,o=n.strideWidth,a=n.filterHeight,i=n.filterWidth,s=n.dilationHeight,u=n.dilationWidth,c=n.effectiveFilterHeight,l=n.effectiveFilterWidth,h=l-1-n.padInfo.left,f=c-1-n.padInfo.top,d=er(e.shape,\"float32\"),p=1/(a*i),v=this.bufferSync(t),g=0;g<n.batchSize;++g)for(var m=0;m<n.inChannels;++m)for(var y=0;y<n.inHeight;++y)for(var x=0;x<n.inWidth;++x){for(var b=y-f,w=x-h,C=0,E=0;E<c;E+=s){var R=(b+E)/r;if(!(R<0||R>=n.outHeight||Math.floor(R)!==R))for(var I=0;I<l;I+=u){var k=(w+I)/o;if(!(k<0||k>=n.outWidth||Math.floor(k)!==k))C+=v.get(g,R,k,m)}}d.set(C*p,g,y,x,m)}return d.toTensor()},o.prototype.pool3d=function(t,e,n){df(t,\"pool3d\");for(var r=e.strideDepth,o=e.strideHeight,a=e.strideWidth,i=e.dilationDepth,s=e.dilationHeight,u=e.dilationWidth,c=e.effectiveFilterDepth,l=e.effectiveFilterHeight,h=e.effectiveFilterWidth,f=e.padInfo.front,d=e.padInfo.top,p=e.padInfo.left,v=\"max\"===n?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,g=this.readSync(t.dataId),m=er(e.outShape,t.dtype),y=m.values,x=e.outShape[1]*e.outShape[2]*e.outShape[3]*e.outShape[4],b=e.outShape[2]*e.outShape[3]*e.outShape[4],w=e.outShape[3]*e.outShape[4],C=e.outShape[4],E=0;E<e.batchSize;++E)for(var R=E*x,I=E*t.strides[0],k=0;k<e.inChannels;++k)for(var S=0;S<e.outDepth;++S){for(var A=S*r-f,T=A;T<0;)T+=i;for(var D=Math.min(e.inDepth,c+A),N=R+S*b,F=0;F<e.outHeight;++F){for(var _=F*o-d,O=_;O<0;)O+=s;for(var M=Math.min(e.inHeight,l+_),B=N+F*w,P=0;P<e.outWidth;++P){for(var L=P*a-p,W=L;W<0;)W+=u;for(var U=Math.min(e.inWidth,h+L),V=B+P*C,z=v,G=0,H=0,q=T;q<D;q+=i){for(var K=I+q*t.strides[1],j=O;j<M;j+=s){for(var X=K+j*t.strides[2],Y=W;Y<U;Y+=u){var $=g[X+Y*t.strides[3]+k];if(\"max\"===n&&$>z?z=$:\"avg\"===n&&(G+=$,H++),isNaN(z))break}if(isNaN(z))break}if(isNaN(z))break}y[V+k]=\"avg\"===n?G/H:z}}}return m.toTensor()},o.prototype.avgPool3d=function(t,e){return df(t,\"avgPool3d\"),this.pool3d(t,e,\"avg\").toFloat()},o.prototype.avgPool3dBackprop=function(t,e,n){df([t,e],\"avgPool3dBackprop\");for(var r=n.strideDepth,o=n.strideHeight,a=n.strideWidth,i=n.filterDepth,s=n.filterHeight,u=n.filterWidth,c=n.dilationDepth,l=n.dilationHeight,h=n.dilationWidth,f=n.effectiveFilterDepth,d=n.effectiveFilterHeight,p=n.effectiveFilterWidth,v=f-1-n.padInfo.front,g=p-1-n.padInfo.left,m=d-1-n.padInfo.top,y=er(e.shape,\"float32\"),x=1/(i*s*u),b=this.bufferSync(t),w=0;w<n.batchSize;++w)for(var C=0;C<n.inChannels;++C)for(var E=0;E<n.inDepth;++E)for(var R=0;R<n.inHeight;++R)for(var I=0;I<n.inWidth;++I){for(var k=E-v,S=R-m,A=I-g,T=0,D=0;D<f;D+=c){var N=(k+D)/r;if(!(N<0||N>=n.outDepth||Math.floor(N)!==N))for(var F=0;F<d;F+=l){var _=(S+F)/o;if(!(_<0||_>=n.outHeight||Math.floor(_)!==_))for(var O=0;O<p;O+=h){var M=(A+O)/a;if(!(M<0||M>=n.outWidth||Math.floor(M)!==M))T+=b.get(w,N,_,M,C)}}}y.set(T*x,w,E,R,I,C)}return y.toTensor()},o.prototype.maxPool3d=function(t,e){return df(t,\"maxPool3d\"),this.pool3d(t,e,\"max\").toFloat()},o.prototype.maxPool3dPositions=function(t,e){for(var n=er(e.outShape,\"int32\"),r=e.strideDepth,o=e.strideHeight,a=e.strideWidth,i=e.dilationDepth,s=e.dilationHeight,u=e.dilationWidth,c=e.effectiveFilterDepth,l=e.effectiveFilterHeight,h=e.effectiveFilterWidth,f=e.padInfo.front,d=e.padInfo.top,p=e.padInfo.left,v=this.bufferSync(t),g=0;g<e.batchSize;++g)for(var m=0;m<e.inChannels;++m)for(var y=0;y<e.outDepth;++y){for(var x=y*r-f,b=x;b<0;)b+=i;for(var w=Math.min(e.inDepth,c+x),C=0;C<e.outHeight;++C){for(var E=C*o-d,R=E;R<0;)R+=s;for(var I=Math.min(e.inHeight,l+E),k=0;k<e.outWidth;++k){for(var S=k*a-p,A=S;A<0;)A+=u;for(var T=Math.min(e.inWidth,h+S),D=Number.NEGATIVE_INFINITY,N=-1,F=b;F<w;F+=i)for(var _=F-x,O=R;O<I;O+=s)for(var M=O-E,B=A;B<T;B+=u){var P=B-S,L=v.get(g,F,O,B,m);L>=D&&(D=L,N=_*l*h+M*l+P)}n.set(N,g,y,C,k,m)}}}return n.toTensor()},o.prototype.maxPool3dBackprop=function(t,e,n,r){df([e,n],\"maxPool3dBackprop\");for(var o=this.maxPool3dPositions(e,r),a=r.strideDepth,i=r.strideHeight,s=r.strideWidth,u=r.dilationDepth,c=r.dilationHeight,l=r.dilationWidth,h=r.effectiveFilterDepth,f=r.effectiveFilterHeight,d=r.effectiveFilterWidth,p=h-1-r.padInfo.front,v=d-1-r.padInfo.left,g=f-1-r.padInfo.top,m=er(e.shape,\"float32\"),y=this.bufferSync(o),x=this.bufferSync(t),b=0;b<r.batchSize;++b)for(var w=0;w<r.inChannels;++w)for(var C=0;C<r.inDepth;++C)for(var E=0;E<r.inHeight;++E)for(var R=0;R<r.inWidth;++R){for(var I=C-p,k=E-g,S=R-v,A=0,T=0;T<h;T+=u){var D=(I+T)/a;if(!(D<0||D>=r.outDepth||Math.floor(D)!==D))for(var N=0;N<f;N+=c){var F=(k+N)/i;if(!(F<0||F>=r.outHeight||Math.floor(F)!==F))for(var _=0;_<d;_+=l){var O=(S+_)/s;if(!(O<0||O>=r.outWidth||Math.floor(O)!==O)){var M=h*f*d-1-y.get(b,D,F,O,w)===T*f*d+N*d+_?1:0;if(0!==M)A+=x.get(b,D,F,O,w)*M}}}}m.set(A,b,C,E,R,w)}return m.toTensor()},o.prototype.cast=function(t,e){return Ra(t,e,this)},o.prototype.reshape=function(t,e){return Ia(t,e)},o.prototype.avgPool=function(t,e){return df(t,\"avgPool\"),df(t,\"maxPool\"),pf(this.readSync(t.dataId),t.shape,t.dtype,t.strides,e,\"avg\").toTensor().toFloat()},o.prototype.resizeBilinear=function(t,e,n,r){df(t,\"resizeBilinear\");for(var o=t.shape,a=o[0],i=o[1],s=o[2],u=o[3],c=this.readSync(t.dataId),l=new Float32Array(k([a,e,n,u])),h=[r&&e>1?i-1:i,r&&n>1?s-1:s],f=[r&&e>1?e-1:e,r&&n>1?n-1:n],d=0,p=h[0]/f[0],v=h[1]/f[1],g=0;g<a;g++)for(var m=0;m<e;m++)for(var y=p*m,x=Math.floor(y),b=y-x,w=Math.min(i-1,Math.ceil(y)),C=g*t.strides[0]+x*t.strides[1],E=g*t.strides[0]+w*t.strides[1],R=0;R<n;R++)for(var I=v*R,S=Math.floor(I),A=I-S,T=Math.min(s-1,Math.ceil(I)),D=C+S*t.strides[2],N=E+S*t.strides[2],F=C+T*t.strides[2],_=E+T*t.strides[2],O=0;O<u;O++){var M=c[D+O],B=c[N+O],P=M+(c[F+O]-M)*A,L=P+(B+(c[_+O]-B)*A-P)*b;l[d++]=L}return Fn(l,[a,e,n,u])},o.prototype.resizeBilinearBackprop=function(t,e,n){df([t,e],\"resizeBilinearBackprop\");for(var r=e.shape,o=r[0],a=r[1],i=r[2],s=r[3],u=t.shape,c=u[1],l=u[2],h=new Float32Array(o*a*i*s),f=[n&&c>1?a-1:a,n&&l>1?i-1:i],d=[n&&c>1?c-1:c,n&&l>1?l-1:l],p=f[0]/d[0],v=f[1]/d[1],g=this.readSync(t.dataId),m=0,y=0;y<o;y++)for(var x=y*e.strides[0],b=0;b<c;b++)for(var w=b*p,C=Math.floor(w),E=Math.min(Math.ceil(w),a-1),R=x+C*e.strides[1],I=x+E*e.strides[1],k=w-C,S=1-k,A=0;A<l;A++)for(var T=A*v,D=Math.floor(T),N=Math.min(Math.ceil(T),i-1),F=T-D,_=1-F,O=R+D*e.strides[2],M=R+N*e.strides[2],B=I+D*e.strides[2],P=I+N*e.strides[2],L=S*_,W=S*F,U=k*_,V=k*F,z=0;z<s;z++){var G=g[m++];h[O+z]+=G*L,h[M+z]+=G*W,h[B+z]+=G*U,h[P+z]+=G*V}return Ln(h,[o,i,a,s],e.dtype)},o.prototype.resizeNearestNeighbor=function(t,e,n,r){df(t,\"resizeNearestNeighbor\");for(var o=t.shape,a=o[0],i=o[1],s=o[2],u=o[3],c=this.readSync(t.dataId),l=new Float32Array(a*e*n*u),h=[r&&e>1?i-1:i,r&&n>1?s-1:s],f=[r&&e>1?e-1:e,r&&n>1?n-1:n],d=h[0]/f[0],p=h[1]/f[1],v=0,g=0;g<a;g++)for(var m=g*t.strides[0],y=0;y<e;y++)for(var x=d*y,b=m+Math.min(i-1,r?Math.round(x):Math.floor(x))*t.strides[1],w=0;w<n;w++)for(var C=p*w,E=b+Math.min(s-1,r?Math.round(C):Math.floor(C))*t.strides[2],R=0;R<u;R++){var I=c[E+R];l[v++]=I}return Fn(l,[a,e,n,u],t.dtype)},o.prototype.resizeNearestNeighborBackprop=function(t,e,n){df([t,e],\"resizeNearestNeighborBackprop\");for(var r=e.shape,o=r[0],a=r[1],i=r[2],s=r[3],u=t.shape,c=u[1],l=u[2],h=new Float32Array(o*a*i*s),f=this.readSync(t.dataId),d=[n&&c>1?a-1:a,n&&l>1?i-1:i],p=[n&&c>1?c-1:c,n&&l>1?l-1:l],v=d[0]/p[0],g=d[1]/p[1],m=1/v,y=1/g,x=2*Math.ceil(m)+2,b=2*Math.ceil(y)+2,w=0;w<o;w++)for(var C=w*e.strides[0],E=0;E<a;E++)for(var R=C+E*e.strides[1],I=Math.floor(E*m),k=Math.floor(I-x/2),S=0;S<i;S++)for(var A=R+S*e.strides[2],T=Math.floor(S*y),D=Math.floor(T-b/2),N=0;N<s;N++){for(var F=0,_=0;_<x;_++){var O=_+k;if(!(O<0||O>=c)){var M=C+O*t.strides[1],B=O*v;if(E===Math.min(a-1,n?Math.round(B):Math.floor(B)))for(var P=0;P<b;P++){var L=P+D;if(!(L<0||L>=l)){var W=M+L*t.strides[2],U=L*g;S===Math.min(i-1,n?Math.round(U):Math.floor(U))&&(F+=f[W+N])}}}}h[A+N]=F}return Ln(h,e.shape,e.dtype)},o.prototype.batchNormalization=function(t,e,n,r,o,a){df([t,e,n,o,a],\"batchNorm\");for(var i=this.readSync(t.dataId),s=this.readSync(e.dataId),u=this.readSync(n.dataId),c=o?this.readSync(o.dataId):new Float32Array([1]),l=a?this.readSync(a.dataId):new Float32Array([0]),h=new Float32Array(i.length),f=l.length,d=c.length,p=u.length,v=s.length,g=0,m=0,y=0,x=0,b=0;b<i.length;++b)h[b]=l[g++]+(i[b]-s[m++])*c[y++]/Math.sqrt(u[x++]+r),g>=f&&(g=0),m>=v&&(m=0),y>=d&&(y=0),x>=p&&(x=0);return Ln(h,t.shape)},o.prototype.localResponseNormalization4D=function(t,e,n,r,o){df(t,\"localResponseNormalization4D\");var a=t.shape[3],i=a-1,s=this.readSync(t.dataId),u=t.size,c=new Float32Array(u);function l(t){for(var n=t%a,r=t-n+Math.max(0,n-e),o=t-n+Math.min(n+e,i),u=0;r<=o;r++){var c=s[r];u+=c*c}return u}for(var h=0;h<u;h++){var f=l(h),d=s[h]*Math.pow(n+r*f,-o);c[h]=d}return Ln(c,t.shape)},o.prototype.LRNGrad=function(t,e,n,r,o,a,i){df(t,\"LRNGrad\");for(var s=t.shape[3],u=this.readSync(t.dataId),c=this.readSync(e.dataId),l=this.readSync(n.dataId),h=new Float32Array(t.size),f=t.size,d=0;d<f;d++){for(var p=d%s,v=d-p+Math.max(0,p-r),g=d-p+Math.min(s,p+r+1),m=0,y=v;y<g;y++)m+=Math.pow(c[y],2);m=a*m+o;for(y=v;y<g;y++){var x=-2*a*i*c[y]*l[d]/m;d===y&&(x+=Math.pow(m,-i)),x*=u[d],h[y]+=x}}return Ln(h,t.shape)},o.prototype.multinomial=function(t,e,n,r){df(t,\"multinomial\");for(var o=e?t:ia(t),a=o.shape[0],i=o.shape[1],s=Gn([a,n],\"int32\"),u=this.readSync(s.dataId),c=this.readSync(o.dataId),l=0;l<a;++l){var h=l*i,f=new Float32Array(i-1);f[0]=c[h];for(var d=1;d<f.length;++d)f[d]=f[d-1]+c[h+d];for(var p=Yu(r.toString()),v=l*n,g=0;g<n;++g){var m=p();u[v+g]=f.length;for(var y=0;y<f.length;y++)if(m<f[y]){u[v+g]=y;break}}}return s},o.prototype.oneHot=function(t,e,n,r){df(t,\"oneHot\");var o=new Float32Array(t.size*e);o.fill(r);for(var a=this.readSync(t.dataId),i=0;i<t.size;++i)a[i]>=0&&a[i]<e&&(o[i*e+a[i]]=n);return Bn(o,[t.size,e],\"int32\")},o.prototype.nonMaxSuppression=function(t,e,n,r,o){return df(t,\"nonMaxSuppression\"),Oa(this.readSync(t.dataId),this.readSync(e.dataId),n,r,o)},o.prototype.fft=function(t){return this.fftBatch(t,!1)},o.prototype.ifft=function(t){return this.fftBatch(t,!0)},o.prototype.fftBatch=function(t,e){for(var n=t.shape[0],r=t.shape[1],o=er(t.shape,\"float32\"),a=er(t.shape,\"float32\"),i=Dn(t).as2D(n,r),s=Nn(t).as2D(n,r),u=0;u<n;u++)for(var c=i.slice([u,0],[1,r]),l=s.slice([u,0],[1,r]),h=Tn(c,l),f=this.readSync(this.fftImpl(h,e).dataId),d=0;d<r;d++){var p=Ta(f,d);o.values[u*r+d]=p.real,a.values[u*r+d]=p.imag}return Tn(o.toTensor(),a.toTensor()).as2D(n,r)},o.prototype.fftImpl=function(t,e){var n=t.as1D(),r=n.size;if(this.isExponentOf2(r)){var o=this.fftRadix2(n,r,e).as2D(t.shape[0],t.shape[1]);return e&&(o=Tn(Dn(o).div(On(r)),Nn(o).div(On(r)))),o}var a=this.readSync(t.dataId),i=function(t){for(var e=new Float32Array(t.length/2),n=new Float32Array(t.length/2),r=0;r<t.length;r+=2)e[r/2]=t[r],n[r/2]=t[r+1];return{real:e,imag:n}}(this.fourierTransformByMatmul(a,r,e));return Tn(i.real,i.imag).as2D(t.shape[0],t.shape[1])},o.prototype.isExponentOf2=function(t){return 0==(t&t-1)},o.prototype.fftRadix2=function(t,e,n){if(1===e)return t;var r=this.readSync(t.dataId),o=e/2,a=function(t){for(var e=Math.ceil(t.length/4),n=new Float32Array(e),r=new Float32Array(e),o=0;o<t.length;o+=4)n[Math.floor(o/4)]=t[o],r[Math.floor(o/4)]=t[o+1];return{real:n,imag:r}}(r),i=Tn(a.real,a.imag).as1D(),s=function(t){for(var e=Math.floor(t.length/4),n=new Float32Array(e),r=new Float32Array(e),o=2;o<t.length;o+=4)n[Math.floor(o/4)]=t[o],r[Math.floor(o/4)]=t[o+1];return{real:n,imag:r}}(r),u=Tn(s.real,s.imag).as1D();i=this.fftRadix2(i,o,n),u=this.fftRadix2(u,o,n);var c=function(t,e){for(var n=new Float32Array(t/2),r=new Float32Array(t/2),o=0;o<Math.ceil(t/2);o++){var a=(e?2:-2)*Math.PI*(o/t);n[o]=Math.cos(a),r[o]=Math.sin(a)}return{real:n,imag:r}}(e,n),l=Tn(c.real,c.imag).mul(u),h=i.add(l),f=i.sub(l),d=Dn(h).concat(Dn(f)),p=Nn(h).concat(Nn(f));return Tn(d,p).as1D()},o.prototype.fourierTransformByMatmul=function(t,e,n){for(var r=new Float32Array(2*e),o=0;o<e;o++){for(var a=0,i=0,s=0;s<e;s++){var u=Na(o*s,e,n),c=Ta(t,s);a+=c.real*u.real-c.imag*u.imag,i+=c.real*u.imag+c.imag*u.real}n&&(a/=e,i/=e),Da(r,a,i,o)}return r},o.prototype.depthToSpace=function(t,e,n){C(\"NHWC\"===n,(function(){return\"Only NHWC dataFormat supported on CPU for depthToSpace. Got \"+n})),C(e>1,(function(){return\"blockSize should be > 1 for depthToSpace, but was: \"+e}));for(var r=t.shape[0],o=t.shape[1],a=t.shape[2],i=t.shape[3],s=o*e,u=a*e,c=i/(e*e),l=this.readSync(t.dataId),h=new Float32Array(r*s*u*c),f=0,d=0;d<r;++d)for(var p=0;p<s;++p)for(var v=Math.floor(p/e),g=p%e,m=0;m<u;++m)for(var y=Math.floor(m/e),x=(g*e+m%e)*c,b=0;b<c;++b){var w=b+x+i*(y+a*(v+o*d));h[f++]=l[w]}return Ln(h,[r,s,u,c])},o.prototype.broadcastedBinaryOp=function(t,e,n,r){var o=Pr(t.shape,e.shape),a=er(o,n),i=this.readSync(t.dataId),s=this.readSync(e.dataId),u=Mr(t.shape,o),c=Mr(e.shape,o),l=a.values;if(u.length+c.length===0)for(var h=0;h<l.length;++h)l[h]=r(i[h%i.length],s[h%s.length]);else{var f=this.bufferSync(t),d=this.bufferSync(e),p=function(n){var o=a.indexToLoc(n),h=o.slice(-t.rank);u.forEach((function(t){return h[t]=0}));var p=f.locToIndex(h),v=o.slice(-e.rank);c.forEach((function(t){return v[t]=0}));var g=d.locToIndex(v);l[n]=r(i[p],s[g])};for(h=0;h<l.length;++h)p(h)}return a.toTensor()},o.prototype.broadcastedBinaryComplexOp=function(t,e,n){var r=Pr(t.shape,e.shape),o=er(r,\"float32\"),a=er(r,\"float32\"),i=this.readSync(t.dataId),s=this.readSync(e.dataId),u=Mr(t.shape,r),c=Mr(e.shape,r),l=o.values,h=a.values;if(u.length+c.length===0)for(var f=0;f<l.length;f++){var d=f%i.length,p=f%s.length,v=n(i[2*d],i[2*d+1],s[2*p],s[2*p+1]);l[f]=v.real,h[f]=v.imag}else{var g=this.bufferSync(this.data.get(t.dataId).complexTensors.real),m=this.bufferSync(this.data.get(e.dataId).complexTensors.real),y=function(r){var a=o.indexToLoc(r),f=a.slice(-t.rank);u.forEach((function(t){return f[t]=0}));var d=g.locToIndex(f),p=a.slice(-e.rank);c.forEach((function(t){return p[t]=0}));var v=m.locToIndex(p),y=n(i[2*d],i[2*d+1],s[2*v],s[2*v+1]);l[r]=y.real,h[r]=y.imag};for(f=0;f<l.length;f++)y(f)}return this.complex(o.toTensor(),a.toTensor())},o.prototype.split=function(t,e,n){return Ua(t,e,n)},o.prototype.dispose=function(){},o.prototype.floatPrecision=function(){return 32},o.prototype.epsilon=function(){return 1e-7},o.prototype.cropAndResize=function(t,e,n,r,o,a){for(var i=t.shape,s=i[0],u=i[1],c=i[2],l=i[3],h=e.shape[0],f=r[0],d=r[1],p=er([h,f,d,l],\"float32\"),v=this.readSync(e.dataId),g=this.readSync(n.dataId),m=this.readSync(t.dataId),y=t.strides,x=p.strides,b=0;b<h;b++){var w=4*b,C=v[w],E=v[w+1],R=v[w+2],I=v[w+3],k=g[b];if(!(k>=s))for(var S=f>1?(R-C)*(u-1)/(f-1):0,A=d>1?(I-E)*(c-1)/(d-1):0,T=0;T<f;T++){var D=f>1?C*(u-1)+T*S:.5*(C+R)*(u-1);if(D<0||D>u-1)for(var N=0;N<d;N++)for(var F=0;F<l;F++){var _=F+N*x[2]+T*x[1]+b*x[0];p.values[_]=a}else if(\"bilinear\"===o){var O=Math.floor(D),M=Math.ceil(D),B=D-O;for(N=0;N<d;N++){if((q=d>1?E*(c-1)+N*A:.5*(E+I)*(c-1))<0||q>c-1)for(F=0;F<l;F++){_=F+N*x[2]+T*x[1]+b*x[0];p.values[_]=a}else{var P=Math.floor(q),L=Math.ceil(q),W=q-P;for(F=0;F<l;F++){var U=m[_=F+P*y[2]+O*y[1]+k*y[0]],V=m[_=F+L*y[2]+O*y[1]+k*y[0]],z=m[_=F+P*y[2]+M*y[1]+k*y[0]],G=U+(V-U)*W,H=z+(m[_=F+L*y[2]+M*y[1]+k*y[0]]-z)*W;_=F+N*x[2]+T*x[1]+b*x[0],p.values[_]=G+(H-G)*B}}}}else for(N=0;N<d;++N){var q;if((q=d>1?E*(c-1)+N*A:.5*(E+I)*(c-1))<0||q>c-1)for(F=0;F<l;F++){_=F+N*x[2]+T*x[1]+b*x[0];p.values[_]=a}else{var K=Math.round(q),j=Math.round(D);for(F=0;F<l;F++){var X=F+K*y[2]+j*y[1]+k*y[0],Y=F+N*x[2]+T*x[1]+b*x[0];p.values[Y]=m[X]}}}}}return p.toTensor()},o.prototype.sparseToDense=function(t,e,n,r){var o=Go(0,t,n),a=o.sliceRank,i=o.numUpdates,s=o.sliceSize,u=o.strides,c=o.outputSize;return this.scatter(t,e,n,c,s,i,a,u,r,!1)},o.prototype.gatherND=function(t,e){var n=e.shape,r=n[n.length-1],o=Po(t,e),a=o[0],i=o[1],s=o[2],u=o[3];if(0===i)return Fn([],a,t.dtype);for(var c=new mt([i,s],t.dtype),l=this.readSync(e.dataId),h=this.readSync(t.dataId),f=0;f<i;f++){for(var d=[],p=0,v=0;v<r;v++){var g=l[f*r+v];p+=g*u[v],d.push(g)}if(p<0||p>=t.size/s)throw new Error(\"Invalid indices: \"+d+\" does not index into \"+t.shape);for(var m=0;m<s;m++)c.values[f*s+m]=h[p*s+m]}return c.toTensor().reshape(a)},o.prototype.scatterND=function(t,e,n){var r=Go(0,t,n),o=r.sliceRank,a=r.numUpdates,i=r.sliceSize,s=r.strides,u=r.outputSize,c=On(0);return this.scatter(t,e,n,u,i,a,o,s,c,!0)},o.prototype.fill=function(t,e,n){var r=P(n=n||j(e),k(t));return r.fill(e),Lt.makeTensor(r,t,n,this)},o.prototype.onesLike=function(t){if(\"string\"===t.dtype)throw new Error(\"onesLike is not supported for string tensors\");return this.fill(t.shape,1,t.dtype)},o.prototype.zerosLike=function(t){var e=P(t.dtype,k(t.shape));return this.makeOutput(e,t.shape,t.dtype)},o.prototype.linspace=function(t,e,n){return ka(t,e,n)},o.prototype.scatter=function(t,e,n,r,o,a,i,s,u,c){var l=[r/o,o],h=this.readSync(t.dataId),f=this.readSync(e.dataId);if(0===r)return Fn([],n,e.dtype);var d=new mt(l,e.dtype);d.values.fill(this.readSync(u.dataId)[0]);for(var p=0;p<a;p++){for(var v=[],g=0,m=0;m<i;m++){var y=h[p*i+m];v.push(y),g+=y*s[m]}if(g<0||g>=r/o)throw new Error(\"Invalid indices: \"+v+\" does not index into \"+n);for(var x=0;x<o;x++)c?d.values[g*o+x]+=f[p*o+x]:d.values[g*o+x]=0===e.rank?f[0]:f[p*o+x]}return d.toTensor().reshape(n)},o}(la);function yf(t,e){return{kernelName:t,backendName:\"cpu\",kernelFunc:function(n){var r=n.inputs,o=n.backend,a=r,i=a.a,s=a.b,u=o;df([i,s],t);var c=u.data.get(i.dataId).values,l=u.data.get(s.dataId).values,h=e(i.shape,s.shape,c,l,i.dtype),f=h[0],d=h[1];return{dataId:u.write(f,d,i.dtype),shape:d,dtype:i.dtype}}}}function xf(t){return function(e,n,r,o,a){var i=Pr(e,n),s=i.length,u=$(i),c=B(a,k(i)),l=e.length,h=n.length,f=$(e),d=$(n),p=Mr(e,i),v=Mr(n,i);if(p.length+v.length===0)for(var g=0;g<c.length;++g)c[g]=t(r[g%r.length],o[g%o.length]);else{var m=function(e){var n=it(e,s,u),a=n.slice(-l);p.forEach((function(t){return a[t]=0}));var i=at(a,l,f),g=n.slice(-h);v.forEach((function(t){return g[t]=0}));var m=at(g,h,d);c[e]=t(r[i],o[m])};for(g=0;g<c.length;++g)m(g)}return[c,i]}}Lt.registerBackend(\"cpu\",(function(){return new mf}),1);var bf=xf((function(t,e){return t/e})),wf=yf(wr,bf);var Cf={kernelName:\"MaxPoolWithArgmax\",backendName:\"cpu\",kernelFunc:function(t){var e=t.inputs,n=t.attrs,r=t.backend,o=e.x,a=n,i=a.filterSize,s=a.strides,u=a.pad,c=a.includeBatchInIndex,l=r;df(o,\"MaxPoolWithArgmax\");var h=l.data.get(o.dataId).values,f=fa(o.shape,i,s,[1,1],u),d=function(t,e,n,r,o){var a=pf(t,0,n,$(e),o,\"max\"),i=vf(t,e,n,o,!0,r);return[a.values,i.values]}(h,o.shape,o.dtype,c,f),p=d[0],v=d[1],g=l.write(p,f.outShape,o.dtype),m=l.write(v,f.outShape,o.dtype);return[{dataId:g,shape:f.outShape,dtype:o.dtype},{dataId:m,shape:f.outShape,dtype:\"int32\"}]}},Ef={kernelName:\"NonMaxSuppressionV5\",backendName:\"cpu\",kernelFunc:function(t){var e=t.inputs,n=t.backend,r=t.attrs,o=e,a=o.boxes,i=o.scores,s=r,u=s.maxOutputSize,c=s.iouThreshold,l=s.scoreThreshold,h=s.softNmsSigma,f=n;df(a,\"NonMaxSuppressionWithScore\");var d=Ma(f.data.get(a.dataId).values,f.data.get(i.dataId).values,u,c,l,h);return[d.selectedIndices,d.selectedScores]}},Rf={kernelName:\"Square\",backendName:\"cpu\",kernelFunc:function(t){var e=t.inputs,n=t.backend,r=e.x,o=n;df(r,\"square\");for(var a=o.data.get(r.dataId).values,i=new Float32Array(a.length),s=0;s<a.length;++s){var u=a[s];i[s]=u*u}return{dataId:o.write(i,r.shape,r.dtype),shape:r.shape,dtype:r.dtype}}},If=xf((function(t,e){var n=t-e;return n*n}));function kf(t,e,n,r,o){for(var a=k(e),i=e.length,s=$(e),u=$(o),c=B(n,k(o)),l=0;l<a;++l){for(var h=it(l,i,s),f=new Array(h.length),d=0;d<f.length;d++)f[d]=h[r[d]];c[at(f,i,u)]=t[l]}return c}for(var Sf=0,Af=[Ef,Rf,yf(Er,If),wf,{kernelName:\"Transpose\",backendName:\"cpu\",kernelFunc:function(t){var e=t.inputs,n=t.attrs,r=t.backend,o=e.x,a=n.perm,i=r;df(o,\"transpose\");for(var s=o.shape.length,u=new Array(s),c=0;c<u.length;c++)u[c]=o.shape[a[c]];var l=kf(i.data.get(o.dataId).values,o.shape,o.dtype,a,u);return{dataId:i.write(l,u,o.dtype),shape:u,dtype:o.dtype}}},Cf];Sf<Af.length;Sf++){d(Af[Sf])}var Tf,Df=function(t){this.variableNames=[\"A\"];var e=Ya(),n=t[0],r=t[1];this.outputShape=t,this.userCode=\"\\n      void main() {\\n        ivec3 coords = getOutputCoords();\\n        int texR = coords[0];\\n        int texC = coords[1];\\n        int depth = coords[2];\\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(\"+r+\".0, \"+n+\".0);\\n\\n        vec4 values = \"+e.texture2D+\"(A, uv);\\n        float value;\\n        if (depth == 0) {\\n          value = values.r;\\n        } else if (depth == 1) {\\n          value = values.g;\\n        } else if (depth == 2) {\\n          value = values.b;\\n        } else if (depth == 3) {\\n          value = values.a;\\n        }\\n\\n        setOutput(floor(value * 255.0 + 0.5));\\n      }\\n    \"},Nf=function(t){this.variableNames=[\"A\"],this.packedInputs=!1,this.packedOutput=!0;var e=Ya(),n=t[0],r=t[1];this.outputShape=t,this.userCode=\"\\n      void main() {\\n        ivec3 coords = getOutputCoords();\\n        int texR = coords[0];\\n        int texC = coords[1];\\n        int depth = coords[2];\\n\\n        vec4 result = vec4(0.);\\n\\n        for(int row=0; row<=1; row++) {\\n          for(int col=0; col<=1; col++) {\\n            texC = coords[1] + row;\\n            depth = coords[2] + col;\\n\\n            vec2 uv = (vec2(texC, texR) + halfCR) /\\n                       vec2(\"+r+\".0, \"+n+\".0);\\n            vec4 values = \"+e.texture2D+\"(A, uv);\\n            float value;\\n            if (depth == 0) {\\n              value = values.r;\\n            } else if (depth == 1) {\\n              value = values.g;\\n            } else if (depth == 2) {\\n              value = values.b;\\n            } else if (depth == 3) {\\n              value = values.a;\\n            }\\n\\n            result[row * 2 + col] = floor(value * 255.0 + 0.5);\\n          }\\n        }\\n\\n        \"+e.output+\" = result;\\n      }\\n    \"};var Ff=function(t,e){this.variableNames=[\"A\"];for(var n=new Array(t.length),r=0;r<n.length;r++)n[r]=t[e[r]];this.outputShape=n,this.rank=n.length;var o=ui(this.rank),a=function(t){var e=t.length;if(e>6)throw Error(\"Transpose for rank \"+e+\" is not yet supported\");for(var n=[\"resRC.x\",\"resRC.y\",\"resRC.z\",\"resRC.w\",\"resRC.u\",\"resRC.v\"],r=new Array(e),o=0;o<t.length;o++)r[t[o]]=n[o];return r.join()}(e);this.userCode=\"\\n    void main() {\\n      \"+o+\" resRC = getOutputCoords();\\n      setOutput(getA(\"+a+\"));\\n    }\\n    \"};var _f=function(t,e){this.variableNames=[\"A\"],this.packedInputs=!0,this.packedOutput=!0;for(var n=new Array(t.length),r=0;r<n.length;r++)n[r]=t[e[r]];if(this.outputShape=n,this.rank=n.length,this.rank>6)throw Error(\"Packed transpose for rank \"+this.rank+\" is not yet supported.\");var o=ui(this.rank),a=ja(\"rc\",this.rank),i=new Array(this.rank);for(r=0;r<e.length;r++)i[e[r]]=a[r];var s=\"vec2(\"+i.slice(-2).join()+\")\",u=\"++\"+a[this.rank-1]+\" < \"+n[this.rank-1],c=\"getChannel(getA(\"+i.join()+\"), \"+s+\")\";this.userCode=\"\\n    void main() {\\n      \"+o+\" rc = getOutputCoords();\\n      vec4 result = vec4(0.);\\n      result[0] = \"+c+\";\\n      if(\"+u+\") {\\n        result[1] = \"+c+\";\\n      }\\n      --\"+a[this.rank-1]+\";\\n      if(++\"+a[this.rank-2]+\" < \"+n[this.rank-2]+\") {\\n        result[2] = \"+c+\";\\n        if(\"+u+\") {\\n          result[3] = \"+c+\";\\n        }\\n      }\\n      setOutput(result);\\n    }\\n    \"};for(var Of=0,Mf=[{kernelName:\"FromPixels\",backendName:\"webgl\",kernelFunc:function(t){var e=t.inputs,n=t.backend,r=t.attrs,o=e.pixels,a=r.numChannels,s=\"undefined\"!=typeof HTMLVideoElement&&o instanceof HTMLVideoElement,u=\"undefined\"!=typeof HTMLImageElement&&o instanceof HTMLImageElement,c=s?[o.videoWidth,o.videoHeight]:[o.width,o.height],l=c[0],h=c[1],f=[h,l],d=[h,l,a];(u||s)&&(null==Tf&&(Tf=document.createElement(\"canvas\").getContext(\"2d\")),Tf.canvas.width=l,Tf.canvas.height=h,Tf.drawImage(o,0,0,l,h),o=Tf.canvas);var p=n.makeTensorInfo(f,\"int32\");n.texData.get(p.dataId).usage=zt.PIXELS,n.gpgpu.uploadPixelDataToTexture(n.getTexture(p.dataId),o);var v=i().getBool(\"WEBGL_PACK\")?new Nf(d):new Df(d),g=n.runWebGLProgram(v,[p],\"int32\");return n.disposeData(p.dataId),g}},{kernelName:wr,backendName:\"webgl\",kernelFunc:function(t){var e=t.inputs,n=t.backend,r=e;return function(t,e,n){var r=new Ri(Ci,t.shape,e.shape);return i().getBool(\"WEBGL_PACK_BINARY_OPERATIONS\")&&(r=new Si(Ii,t.shape,e.shape,!0)),n.runWebGLProgram(r,[t,e],\"float32\")}(r.a,r.b,n)}},{kernelName:\"NonMaxSuppressionV5\",backendName:\"webgl\",kernelFunc:function(t){var e=t.inputs,n=t.backend,r=t.attrs;dn(\"tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead\");var o=e,a=o.boxes,i=o.scores,s=r,u=s.maxOutputSize,c=s.iouThreshold,l=s.scoreThreshold,h=s.softNmsSigma,f=n,d=Ma(f.readSync(a.dataId),f.readSync(i.dataId),u,c,l,h);return[d.selectedIndices,d.selectedScores]}},{kernelName:\"Square\",backendName:\"webgl\",kernelFunc:function(t){var e=t.inputs,n=t.backend,r=e.x,o=n,a=new cu(r.shape,\"return x * x;\");return o.runWebGLProgram(a,[r],r.dtype)}},{kernelName:Er,backendName:\"webgl\",kernelFunc:function(t){var e=t.inputs,n=t.backend,r=e,o=r.a,a=r.b,s=n,u=i().getBool(\"WEBGL_PACK_BINARY_OPERATIONS\")?new Si(\"return (a - b) * (a - b);\",o.shape,a.shape):new Ri(\"return (a - b) * (a - b);\",o.shape,a.shape);return s.compileAndRun(u,[o,a])}},{kernelName:\"Transpose\",backendName:\"webgl\",kernelFunc:function(t){for(var e,n=t.inputs,r=t.attrs,o=t.backend,a=n.x,s=r.perm,u=o,c=a.shape.length,l=new Array(c),h=0;h<l.length;h++)l[h]=a.shape[s[h]];if(u.shouldExecuteOnCPU([a])){var f=kf(u.texData.get(a.dataId).values,a.shape,a.dtype,s,l);e=u.makeTensorInfo(l,a.dtype),u.texData.get(e.dataId).values=f}else e=function(t,e,n){var r=i().getBool(\"WEBGL_PACK_ARRAY_OPERATIONS\")?new _f(t.shape,e):new Ff(t.shape,e);return n.runWebGLProgram(r,[t],t.dtype)}(a,s,u);return e}},{kernelName:\"MaxPoolWithArgmax\",backendName:\"webgl\",kernelFunc:function(t){var e=t.inputs,n=t.attrs,r=t.backend,o=e.x,a=n,i=a.filterSize,s=a.strides,u=a.pad,c=a.includeBatchInIndex,l=r;C(4===o.shape.length,(function(){return\"Error in maxPool: input must be rank 4 but got rank \"+o.shape.length+\".\"}));var h=[1,1];C(Ca(s,h),(function(){return\"Error in maxPool: Either strides or dilations must be 1. Got strides \"+s+\" and dilations '\"+h+\"'\"}));var f=fa(o.shape,i,s,h,u),d=function(t,e,n,r){var o=new Ws(n,\"max\",!1),a=r.runWebGLProgram(o,[t],\"float32\");return o=new Ws(n,\"max\",!0,!0,e),[a,r.runWebGLProgram(o,[t],\"float32\")]}(o,c,f,l);return[d[0],d[1]]}}];Of<Mf.length;Of++){d(Mf[Of])}for(var Bf=0,Pf=[{kernelName:xr,inputsToSave:[\"a\",\"b\"],gradFunc:function(t,e){var n=e[0],r=e[1],o=Pr(n.shape,r.shape);return{a:function(){var e=t,r=Br(n.shape,o);return r.length>0&&(e=e.sum(r)),e.reshape(n.shape)},b:function(){var e=t,n=Br(r.shape,o);return n.length>0&&(e=e.sum(n)),e.reshape(r.shape)}}}},{kernelName:\"AddN\",saveAllInputs:!0,gradFunc:function(t,e){var n={};return e.forEach((function(e,r){n[r]=function(){return t.clone()}})),n}},{kernelName:Sr,gradFunc:function(t,e,n){for(var r=n,o=r.inputShape,a=r.shape,i=Array.from(a),s=o.length-1;s>=0;s--)if(o[s]===a[s])i[s]=1;else if(1!==o[s])throw new Error(\"broadcastTo(): [\"+o+\"] cannot be broadcast to [\"+a+\"].\");var u=[];for(s=0;s<i.length;s++)i[s]>1&&u.push(s);return{x:function(){return t.sum(u,!0)}}}},{kernelName:wr,inputsToSave:[\"a\",\"b\"],gradFunc:function(t,e){var n=e[0],r=e[1],o=Pr(n.shape,r.shape);return{a:function(){var e=Bo(t,r.toFloat()),a=Br(n.shape,o);return a.length>0?th(e,a).reshape(n.shape):e},b:function(){var e=t.mul(n.toFloat()),a=Br(r.shape,o);a.length>0&&(e=th(e,a).reshape(r.shape));var i=Gc(r);return no(Bo(e,i.toFloat()))}}}},{kernelName:\"FusedBatchNorm\",inputsToSave:[\"x\",\"mean\",\"variance\",\"scale\"],gradFunc:function(t,e,n){var r=n.varianceEpsilon,o=e[0],a=e[1],i=e[2],s=e[3],u=Ju(o),c=null==s?On(1):s,l=Br(a.shape,u.shape),h=[];if(1===a.rank){for(var f=0;f<u.shape.length-1;++f)h.push(u.shape[f]);h.push(1)}var d=Oo(o,a),p=To(t,c),v=ao(Or(i,On(r))),g=To(To(To(v,v),v),On(-.5));return{x:function(){return 1===a.rank?ur(To(To(t,wc(v.as4D(1,1,1,a.shape[0]),h)),c),o.shape):ur(To(To(t,v),c),o.shape)},mean:function(){var t=To(To(v,On(-1)),p);return 1===a.rank&&(t=th(t,l)),ur(t,a.shape)},variance:function(){var t=To(To(g,d),p);return 1===a.rank&&(t=th(t,l)),ur(t,a.shape)},scale:function(){var e=To(d,v),n=To(t,e);return 1===a.rank&&(n=th(n,l)),ur(n,a.shape)},offset:function(){var e=t;return 1===a.rank&&(e=th(e,l)),ur(e,a.shape)}}}},{kernelName:Tr,gradFunc:function(t){return{x:function(){return t.toFloat()}}}},{kernelName:Ar,inputsToSave:[\"indices\"],gradFunc:function(t,e){var n=e[0];return{indices:function(){return Gn(n.shape,\"float32\")}}}},{kernelName:Nr,inputsToSave:[\"x\"],gradFunc:function(t,e,n){var r=e[0],o=n.paddings.map((function(t){return t[0]}));return{x:function(){return t.slice(o,r.shape)}}}},{kernelName:\"Square\",inputsToSave:[\"x\"],gradFunc:function(t,e){var n=e[0];return{x:function(){return t.mul(n.toFloat().mul(2))}}}},{kernelName:Er,inputsToSave:[\"a\",\"b\"],gradFunc:function(t,e){var n=e[0],r=e[1],o=On(2);return{a:function(){return To(t,To(o,Oo(n,r)))},b:function(){return To(t,To(o,Oo(r,n)))}}}},{kernelName:Dr,inputsToSave:[\"x\"],gradFunc:function(t,e,n){var r=e[0],o=n.reps;return{x:function(){var e=Xn(r);if(1===r.rank)for(var n=0;n<o[0];++n)e=e.add(t.slice([n*r.shape[0]],[r.shape[0]]));else if(2===r.rank)for(n=0;n<o[0];++n)for(var a=0;a<o[1];++a)e=e.add(t.slice([n*r.shape[0],a*r.shape[1]],[r.shape[0],r.shape[1]]));else if(3===r.rank)for(n=0;n<o[0];++n)for(a=0;a<o[1];++a)for(var i=0;i<o[2];++i)e=e.add(t.slice([n*r.shape[0],a*r.shape[1],i*r.shape[2]],[r.shape[0],r.shape[1],r.shape[2]]));else{if(4!==r.rank)throw new Error(\"Gradient for tile operation is not implemented for rank-\"+r.rank+\" tensors yet.\");for(n=0;n<o[0];++n)for(a=0;a<o[1];++a)for(i=0;i<o[2];++i)for(var s=0;s<o[3];++s)e=e.add(t.slice([n*r.shape[0],a*r.shape[1],i*r.shape[2],s*r.shape[3]],[r.shape[0],r.shape[1],r.shape[2],r.shape[3]]))}return e}}}},{kernelName:\"Transpose\",gradFunc:function(t,e,n){var r=Rn(n.perm);return{x:function(){return ua(t,r)}}}}];Bf<Pf.length;Bf++){p(Pf[Bf])}var Lf=function(){function t(){}return t.prototype.fetch=function(t,e){return fetch(t,e)},t.prototype.now=function(){return performance.now()},t.prototype.encode=function(t,e){if(\"utf-8\"!==e&&\"utf8\"!==e)throw new Error(\"Browser's encoder only supports utf-8, but got \"+e);return null==this.textEncoder&&(this.textEncoder=new TextEncoder),this.textEncoder.encode(t)},t.prototype.decode=function(t,e){return new TextDecoder(e).decode(t)},t}();i().get(\"IS_BROWSER\")&&i().setPlatform(\"browser\",new Lf);var Wf,Uf=function(){return require(\"node-fetch\")},Vf=function(){function t(){this.util=require(\"util\"),this.textEncoder=new this.util.TextEncoder}return t.prototype.fetch=function(t,e){return null!=i().global.fetch?i().global.fetch(t,e):(null==Wf&&(Wf=Uf()),Wf(t,e))},t.prototype.now=function(){var t=process.hrtime();return 1e3*t[0]+t[1]/1e6},t.prototype.encode=function(t,e){if(\"utf-8\"!==e&&\"utf8\"!==e)throw new Error(\"Node built-in encoder only supports utf-8, but got \"+e);return this.textEncoder.encode(t)},t.prototype.decode=function(t,e){return 0===t.length?\"\":new this.util.TextDecoder(e).decode(t)},t}();i().get(\"IS_NODE\")&&i().setPlatform(\"node\",new Vf);var zf={float32:4,int32:4,uint16:2,uint8:1,bool:1},Gf=4;function Hf(t,e){for(var n={},r=0,o=function(e){var o=e.name,a=e.dtype,i=e.shape,s=k(i),u=void 0;if(\"quantization\"in e){var c=e.quantization;if(\"uint8\"!==c.dtype&&\"uint16\"!==c.dtype)throw new Error(\"Weight \"+e.name+\" has unknown quantization dtype \"+c.dtype+\". Supported quantization dtypes are: 'uint8' and 'uint16'.\");var l=zf[c.dtype],h=t.slice(r,r+s*l),f=\"uint8\"===c.dtype?new Uint8Array(h):new Uint16Array(h);if(\"float32\"===a)u=Float32Array.from(f,(function(t){return t*c.scale+c.min}));else{if(\"int32\"!==a)throw new Error(\"Unsupported dtype in weight '\"+o+\"': \"+a);u=Int32Array.from(f,(function(t){return Math.round(t*c.scale+c.min)}))}r+=s*l}else if(\"string\"===a){var d=k(e.shape);u=[];for(var p=0;p<d;p++){var v=new Uint32Array(t.slice(r,r+Gf))[0];r+=Gf;var g=new Uint8Array(t.slice(r,r+v));u.push(g),r+=v}}else{var m=zf[a];h=t.slice(r,r+s*m);if(\"float32\"===a)u=new Float32Array(h);else if(\"int32\"===a)u=new Int32Array(h);else{if(\"bool\"!==a)throw new Error(\"Unsupported dtype in weight '\"+o+\"': \"+a);u=new Uint8Array(h)}r+=s*m}n[o]=Fn(u,i,a)},a=0,i=e;a<i.length;a++){o(i[a])}return n}function qf(t){if(null===t)throw new Error(\"Invalid input value: \"+JSON.stringify(t));var e=0,n=[];t.forEach((function(t){if(e+=t.byteLength,n.push(t.byteLength===t.buffer.byteLength?t:new t.constructor(t)),!(t instanceof Float32Array||t instanceof Int32Array||t instanceof Uint8Array))throw new Error(\"Unsupported TypedArray subtype: \"+t.constructor.name)}));var r=new Uint8Array(e),o=0;return n.forEach((function(t){r.set(new Uint8Array(t.buffer),o),o+=t.byteLength})),r.buffer}var Kf=\"undefined\"!=typeof Buffer&&(\"undefined\"==typeof Blob||\"undefined\"==typeof atob||\"undefined\"==typeof btoa);function jf(t){return Kf?Buffer.byteLength(t):new Blob([t]).size}function Xf(t){var e=0;t.forEach((function(t){e+=t.byteLength}));var n=new Uint8Array(e),r=0;return t.forEach((function(t){n.set(new Uint8Array(t),r),r+=t.byteLength})),n.buffer}function Yf(t){for(t=t.trim();t.endsWith(\"/\");)t=t.slice(0,t.length-1);var e=t.split(\"/\");return e[e.length-1]}function $f(t){if(t.modelTopology instanceof ArrayBuffer)throw new Error(\"Expected JSON model topology, received ArrayBuffer.\");return{dateSaved:new Date,modelTopologyType:\"JSON\",modelTopologyBytes:null==t.modelTopology?0:jf(JSON.stringify(t.modelTopology)),weightSpecsBytes:null==t.weightSpecs?0:jf(JSON.stringify(t.weightSpecs)),weightDataBytes:null==t.weightData?0:t.weightData.byteLength}}var Qf=function(){function t(){this.saveRouters=[],this.loadRouters=[]}return t.getInstance=function(){return null==t.instance&&(t.instance=new t),t.instance},t.registerSaveRouter=function(e){t.getInstance().saveRouters.push(e)},t.registerLoadRouter=function(e){t.getInstance().loadRouters.push(e)},t.getSaveHandlers=function(e){return t.getHandlers(e,\"save\")},t.getLoadHandlers=function(e,n){return t.getHandlers(e,\"load\",n)},t.getHandlers=function(e,n,r){var o=[];return(\"load\"===n?t.getInstance().loadRouters:t.getInstance().saveRouters).forEach((function(t){var n=t(e,r);null!==n&&o.push(n)})),o},t}(),Jf=\"://\",Zf=function(){function t(){this.managers={}}return t.getInstance=function(){return null==t.instance&&(t.instance=new t),t.instance},t.registerManager=function(e,n){C(null!=e,(function(){return\"scheme must not be undefined or null.\"})),e.endsWith(Jf)&&(e=e.slice(0,e.indexOf(Jf))),C(e.length>0,(function(){return\"scheme must not be an empty string.\"}));var r=t.getInstance();C(null==r.managers[e],(function(){return\"A model store manager is already registered for scheme '\"+e+\"'.\"})),r.managers[e]=n},t.getManager=function(t){var e=this.getInstance().managers[t];if(null==e)throw new Error(\"Cannot find model manager for scheme '\"+t+\"'\");return e},t.getSchemes=function(){return Object.keys(this.getInstance().managers)},t}();function td(t){if(-1===t.indexOf(Jf))throw new Error(\"The url string provided does not contain a scheme. Supported schemes are: \"+Zf.getSchemes().join(\",\"));return{scheme:t.split(Jf)[0],path:t.split(Jf)[1]}}function ed(t,e,o){return void 0===o&&(o=!1),n(this,void 0,void 0,(function(){var n,a,i,s,u,c,l,h,f;return r(this,(function(r){switch(r.label){case 0:return C(t!==e,(function(){return\"Old path and new path are the same: '\"+t+\"'\"})),C((n=Qf.getLoadHandlers(t)).length>0,(function(){return\"Copying failed because no load handler is found for source URL \"+t+\".\"})),C(n.length<2,(function(){return\"Copying failed because more than one (\"+n.length+\") load handlers for source URL \"+t+\".\"})),a=n[0],C((i=Qf.getSaveHandlers(e)).length>0,(function(){return\"Copying failed because no save handler is found for destination URL \"+e+\".\"})),C(i.length<2,(function(){return\"Copying failed because more than one (\"+n.length+\") save handlers for destination URL \"+e+\".\"})),s=i[0],u=td(t).scheme,c=td(t).path,l=u===td(t).scheme,[4,a.load()];case 1:return h=r.sent(),o&&l?[4,Zf.getManager(u).removeModel(c)]:[3,3];case 2:r.sent(),r.label=3;case 3:return[4,s.save(h)];case 4:return f=r.sent(),!o||l?[3,6]:[4,Zf.getManager(u).removeModel(c)];case 5:r.sent(),r.label=6;case 6:return[2,f.modelArtifactsInfo]}}))}))}var nd=\"models_store\",rd=\"model_info_store\";function od(){if(!i().getBool(\"IS_BROWSER\"))throw new Error(\"Failed to obtain IndexedDB factory because the current environmentis not a web browser.\");var t=window||self,e=t.indexedDB||t.mozIndexedDB||t.webkitIndexedDB||t.msIndexedDB||t.shimIndexedDB;if(null==e)throw new Error(\"The current browser does not appear to support IndexedDB.\");return e}function ad(t){var e=t.result;e.createObjectStore(nd,{keyPath:\"modelPath\"}),e.createObjectStore(rd,{keyPath:\"modelPath\"})}var id=function(){function t(t){if(this.indexedDB=od(),null==t||!t)throw new Error(\"For IndexedDB, modelPath must not be null, undefined or empty.\");this.modelPath=t}return t.prototype.save=function(t){return n(this,void 0,void 0,(function(){return r(this,(function(e){if(t.modelTopology instanceof ArrayBuffer)throw new Error(\"BrowserLocalStorage.save() does not support saving model topology in binary formats yet.\");return[2,this.databaseAction(this.modelPath,t)]}))}))},t.prototype.load=function(){return n(this,void 0,void 0,(function(){return r(this,(function(t){return[2,this.databaseAction(this.modelPath)]}))}))},t.prototype.databaseAction=function(t,e){var n=this;return new Promise((function(t,r){var o=n.indexedDB.open(\"tensorflowjs\",1);o.onupgradeneeded=function(){return ad(o)},o.onsuccess=function(){var a=o.result;if(null==e){var i=a.transaction(nd,\"readonly\"),s=i.objectStore(nd).get(n.modelPath);s.onsuccess=function(){if(null==s.result)return a.close(),r(new Error(\"Cannot find model with path '\"+n.modelPath+\"' in IndexedDB.\"));t(s.result.modelArtifacts)},s.onerror=function(t){return a.close(),r(s.error)},i.oncomplete=function(){return a.close()}}else{var u,c=$f(e),l=a.transaction(rd,\"readwrite\"),h=l.objectStore(rd),f=h.put({modelPath:n.modelPath,modelArtifactsInfo:c});f.onsuccess=function(){var o=(u=a.transaction(nd,\"readwrite\")).objectStore(nd).put({modelPath:n.modelPath,modelArtifacts:e,modelArtifactsInfo:c});o.onsuccess=function(){return t({modelArtifactsInfo:c})},o.onerror=function(t){var e=(h=l.objectStore(rd)).delete(n.modelPath);e.onsuccess=function(){return a.close(),r(o.error)},e.onerror=function(t){return a.close(),r(o.error)}}},f.onerror=function(t){return a.close(),r(f.error)},l.oncomplete=function(){null==u?a.close():u.oncomplete=function(){return a.close()}}}},o.onerror=function(t){return r(o.error)}}))},t.URL_SCHEME=\"indexeddb://\",t}(),sd=function(t){return i().getBool(\"IS_BROWSER\")&&!Array.isArray(t)&&t.startsWith(id.URL_SCHEME)?(e=t.slice(id.URL_SCHEME.length),new id(e)):null;var e};Qf.registerSaveRouter(sd),Qf.registerLoadRouter(sd);var ud=function(){function t(){this.indexedDB=od()}return t.prototype.listModels=function(){return n(this,void 0,void 0,(function(){var t=this;return r(this,(function(e){return[2,new Promise((function(e,n){var r=t.indexedDB.open(\"tensorflowjs\",1);r.onupgradeneeded=function(){return ad(r)},r.onsuccess=function(){var t=r.result,o=t.transaction(rd,\"readonly\"),a=o.objectStore(rd).getAll();a.onsuccess=function(){for(var t={},n=0,r=a.result;n<r.length;n++){var o=r[n];t[o.modelPath]=o.modelArtifactsInfo}e(t)},a.onerror=function(e){return t.close(),n(a.error)},o.oncomplete=function(){return t.close()}},r.onerror=function(t){return n(r.error)}}))]}))}))},t.prototype.removeModel=function(t){return n(this,void 0,void 0,(function(){var e=this;return r(this,(function(n){var r;return t=(r=t).startsWith(id.URL_SCHEME)?r.slice(id.URL_SCHEME.length):r,[2,new Promise((function(n,r){var o=e.indexedDB.open(\"tensorflowjs\",1);o.onupgradeneeded=function(){return ad(o)},o.onsuccess=function(){var e,a=o.result,i=a.transaction(rd,\"readwrite\"),s=i.objectStore(rd),u=s.get(t);u.onsuccess=function(){if(null==u.result)return a.close(),r(new Error(\"Cannot find model with path '\"+t+\"' in IndexedDB.\"));var o=s.delete(t),i=function(){var o=(e=a.transaction(nd,\"readwrite\")).objectStore(nd).delete(t);o.onsuccess=function(){return n(u.result.modelArtifactsInfo)},o.onerror=function(t){return r(u.error)}};o.onsuccess=i,o.onerror=function(t){return i(),a.close(),r(u.error)}},u.onerror=function(t){return a.close(),r(u.error)},i.oncomplete=function(){null==e?a.close():e.oncomplete=function(){return a.close()}}},o.onerror=function(t){return r(o.error)}}))]}))}))},t}();if(i().getBool(\"IS_BROWSER\"))try{Zf.registerManager(id.URL_SCHEME,new ud)}catch(t){}var cd=\"/\",ld=\"tensorflowjs_models\",hd=\"info\",fd=\"model_topology\",dd=\"weight_specs\",pd=\"weight_data\",vd=\"model_metadata\";function gd(t){return{info:[ld,t,hd].join(cd),topology:[ld,t,fd].join(cd),weightSpecs:[ld,t,dd].join(cd),weightData:[ld,t,pd].join(cd),modelMetadata:[ld,t,vd].join(cd)}}function md(t){var e=t.split(cd);if(e.length<3)throw new Error(\"Invalid key format: \"+t);return e.slice(1,e.length-1).join(cd)}var yd=function(){function t(t){if(!i().getBool(\"IS_BROWSER\")||\"undefined\"==typeof window||void 0===window.localStorage)throw new Error(\"The current environment does not support local storage.\");if(this.LS=window.localStorage,null==t||!t)throw new Error(\"For local storage, modelPath must not be null, undefined or empty.\");this.modelPath=t,this.keys=gd(this.modelPath)}return t.prototype.save=function(t){return n(this,void 0,void 0,(function(){var e,n,o;return r(this,(function(r){if(t.modelTopology instanceof ArrayBuffer)throw new Error(\"BrowserLocalStorage.save() does not support saving model topology in binary formats yet.\");e=JSON.stringify(t.modelTopology),n=JSON.stringify(t.weightSpecs),o=$f(t);try{return this.LS.setItem(this.keys.info,JSON.stringify(o)),this.LS.setItem(this.keys.topology,e),this.LS.setItem(this.keys.weightSpecs,n),this.LS.setItem(this.keys.weightData,function(t){if(Kf)return Buffer.from(t).toString(\"base64\");for(var e=new Uint8Array(t),n=\"\",r=0,o=e.length;r<o;r++)n+=String.fromCharCode(e[r]);return btoa(n)}(t.weightData)),this.LS.setItem(this.keys.modelMetadata,JSON.stringify({format:t.format,generatedBy:t.generatedBy,convertedBy:t.convertedBy,userDefinedMetadata:t.userDefinedMetadata})),[2,{modelArtifactsInfo:o}]}catch(t){throw this.LS.removeItem(this.keys.info),this.LS.removeItem(this.keys.topology),this.LS.removeItem(this.keys.weightSpecs),this.LS.removeItem(this.keys.weightData),this.LS.removeItem(this.keys.modelMetadata),new Error(\"Failed to save model '\"+this.modelPath+\"' to local storage: size quota being exceeded is a possible cause of this failure: modelTopologyBytes=\"+o.modelTopologyBytes+\", weightSpecsBytes=\"+o.weightSpecsBytes+\", weightDataBytes=\"+o.weightDataBytes+\".\")}return[2]}))}))},t.prototype.load=function(){return n(this,void 0,void 0,(function(){var t,e,n,o,a,i,s;return r(this,(function(r){if(null==(t=JSON.parse(this.LS.getItem(this.keys.info))))throw new Error(\"In local storage, there is no model with name '\"+this.modelPath+\"'\");if(\"JSON\"!==t.modelTopologyType)throw new Error(\"BrowserLocalStorage does not support loading non-JSON model topology yet.\");if(e={},null==(n=JSON.parse(this.LS.getItem(this.keys.topology))))throw new Error(\"In local storage, the topology of model '\"+this.modelPath+\"' is missing.\");if(e.modelTopology=n,null==(o=JSON.parse(this.LS.getItem(this.keys.weightSpecs))))throw new Error(\"In local storage, the weight specs of model '\"+this.modelPath+\"' are missing.\");if(e.weightSpecs=o,null!=(a=this.LS.getItem(this.keys.modelMetadata))&&(i=JSON.parse(a),e.format=i.format,e.generatedBy=i.generatedBy,e.convertedBy=i.convertedBy,e.userDefinedMetadata=i.userDefinedMetadata),null==(s=this.LS.getItem(this.keys.weightData)))throw new Error(\"In local storage, the binary weight values of model '\"+this.modelPath+\"' are missing.\");return e.weightData=function(t){if(Kf){var e=Buffer.from(t,\"base64\");return e.buffer.slice(e.byteOffset,e.byteOffset+e.byteLength)}for(var n=atob(t),r=new Uint8Array(n.length),o=0;o<n.length;++o)r.set([n.charCodeAt(o)],o);return r.buffer}(s),[2,e]}))}))},t.URL_SCHEME=\"localstorage://\",t}(),xd=function(t){return i().getBool(\"IS_BROWSER\")&&!Array.isArray(t)&&t.startsWith(yd.URL_SCHEME)?(e=t.slice(yd.URL_SCHEME.length),new yd(e)):null;var e};Qf.registerSaveRouter(xd),Qf.registerLoadRouter(xd);var bd=function(){function t(){C(i().getBool(\"IS_BROWSER\"),(function(){return\"Current environment is not a web browser\"})),C(\"undefined\"==typeof window||void 0!==window.localStorage,(function(){return\"Current browser does not appear to support localStorage\"})),this.LS=window.localStorage}return t.prototype.listModels=function(){return n(this,void 0,void 0,(function(){var t,e,n,o,a,i;return r(this,(function(r){for(t={},e=ld+cd,n=cd+hd,o=0;o<this.LS.length;++o)(a=this.LS.key(o)).startsWith(e)&&a.endsWith(n)&&(i=md(a),t[i]=JSON.parse(this.LS.getItem(a)));return[2,t]}))}))},t.prototype.removeModel=function(t){return n(this,void 0,void 0,(function(){var e,n;return r(this,(function(r){var o;if(t=(o=t).startsWith(yd.URL_SCHEME)?o.slice(yd.URL_SCHEME.length):o,e=gd(t),null==this.LS.getItem(e.info))throw new Error(\"Cannot find model at path '\"+t+\"'\");return n=JSON.parse(this.LS.getItem(e.info)),this.LS.removeItem(e.info),this.LS.removeItem(e.topology),this.LS.removeItem(e.weightSpecs),this.LS.removeItem(e.weightData),[2,n]}))}))},t}();if(i().getBool(\"IS_BROWSER\"))try{Zf.registerManager(yd.URL_SCHEME,new bd)}catch(t){}var wd=\"model\",Cd=\".json\",Ed=\".weights.bin\";function Rd(t){return new Promise((function(t){return setTimeout(t)})).then(t)}var Id=function(){function t(e){if(!i().getBool(\"IS_BROWSER\"))throw new Error(\"browserDownloads() cannot proceed because the current environment is not a browser.\");e.startsWith(t.URL_SCHEME)&&(e=e.slice(t.URL_SCHEME.length)),null!=e&&0!==e.length||(e=wd),this.modelTopologyFileName=e+Cd,this.weightDataFileName=e+Ed}return t.prototype.save=function(t){return n(this,void 0,void 0,(function(){var e,n,o,a,i,s;return r(this,(function(r){switch(r.label){case 0:if(\"undefined\"==typeof document)throw new Error(\"Browser downloads are not supported in this environment since `document` is not present\");if(e=window.URL.createObjectURL(new Blob([t.weightData],{type:\"application/octet-stream\"})),!(t.modelTopology instanceof ArrayBuffer))return[3,1];throw new Error(\"BrowserDownloads.save() does not support saving model topology in binary formats yet.\");case 1:return n=[{paths:[\"./\"+this.weightDataFileName],weights:t.weightSpecs}],o={modelTopology:t.modelTopology,format:t.format,generatedBy:t.generatedBy,convertedBy:t.convertedBy,weightsManifest:n},a=window.URL.createObjectURL(new Blob([JSON.stringify(o)],{type:\"application/json\"})),(i=null==this.jsonAnchor?document.createElement(\"a\"):this.jsonAnchor).download=this.modelTopologyFileName,i.href=a,[4,Rd((function(){return i.dispatchEvent(new MouseEvent(\"click\"))}))];case 2:return r.sent(),null==t.weightData?[3,4]:((s=null==this.weightDataAnchor?document.createElement(\"a\"):this.weightDataAnchor).download=this.weightDataFileName,s.href=e,[4,Rd((function(){return s.dispatchEvent(new MouseEvent(\"click\"))}))]);case 3:r.sent(),r.label=4;case 4:return[2,{modelArtifactsInfo:$f(t)}]}}))}))},t.URL_SCHEME=\"downloads://\",t}(),kd=function(){function t(t){if(null==t||t.length<1)throw new Error(\"When calling browserFiles, at least 1 file is required, but received \"+t);this.files=t}return t.prototype.load=function(){return n(this,void 0,void 0,(function(){var t,e,n=this;return r(this,(function(r){return t=this.files[0],e=this.files.slice(1),[2,new Promise((function(r,o){var a=new FileReader;a.onload=function(a){var i=JSON.parse(a.target.result),s=i.modelTopology;if(null!=s){0===e.length&&r({modelTopology:s});var u=i.weightsManifest;if(null!=u){var c;try{c=n.checkManifestAndWeightFiles(u,e)}catch(t){return void o(t)}var l=[],h=[],f=[];u.forEach((function(t){t.paths.forEach((function(t){h.push(t),f.push(null)})),l.push.apply(l,t.weights)})),u.forEach((function(t){t.paths.forEach((function(t){var e=new FileReader;e.onload=function(e){var n=e.target.result,o=h.indexOf(t);f[o]=n,-1===f.indexOf(null)&&r({modelTopology:s,weightSpecs:l,weightData:Xf(f),format:i.format,generatedBy:i.generatedBy,convertedBy:i.convertedBy,userDefinedMetadata:i.userDefinedMetadata})},e.onerror=function(e){return o(\"Failed to weights data from file of path '\"+t+\"'.\")},e.readAsArrayBuffer(c[t])}))}))}else o(new Error(\"weightManifest field is missing from file \"+t.name))}else o(new Error(\"modelTopology field is missing from file \"+t.name))},a.onerror=function(e){return o(\"Failed to read model topology and weights manifest JSON from file '\"+t.name+\"'. BrowserFiles supports loading Keras-style tf.Model artifacts only.\")},a.readAsText(t)}))]}))}))},t.prototype.checkManifestAndWeightFiles=function(t,e){for(var n=[],r=e.map((function(t){return Yf(t.name)})),o={},a=0,i=t;a<i.length;a++){i[a].paths.forEach((function(t){var a=Yf(t);if(-1!==n.indexOf(a))throw new Error(\"Duplicate file basename found in weights manifest: '\"+a+\"'\");if(n.push(a),-1===r.indexOf(a))throw new Error(\"Weight file with basename '\"+a+\"' is not provided.\");o[t]=e[r.indexOf(a)]}))}if(n.length!==e.length)throw new Error(\"Mismatch in the number of files in weights manifest (\"+n.length+\") and the number of weight files provided (\"+e.length+\").\");return o},t}();function Sd(t,e,n,r){!function(t){C(null!=t&&Array.isArray(t)&&t.length>0,(function(){return\"promises must be a none empty array\"}))}(t),function(t,e){C(t>=0&&t<=1,(function(){return\"Progress fraction must be in range [0, 1], but got startFraction \"+t})),C(e>=0&&e<=1,(function(){return\"Progress fraction must be in range [0, 1], but got endFraction \"+e})),C(e>=t,(function(){return\"startFraction must be no more than endFraction, but got startFraction \"+t+\" and endFraction \"+e}))}(n=null==n?0:n,r=null==r?1:r);var o=0;return Promise.all(t.map((function(a){return a.then((function(a){var i=n+ ++o/t.length*(r-n);return e(i),a})),a})))}function Ad(t,e){return n(this,void 0,void 0,(function(){var n,o,a,s,u,c,l,h,f;return r(this,(function(r){switch(r.label){case 0:return null==e&&(e={}),n=null==e.fetchFunc?i().platform.fetch:e.fetchFunc,o=t.map((function(t){return n(t,e.requestInit,{isBinary:!0})})),a=0,s=.5,null!=e.onProgress?[3,2]:[4,Promise.all(o)];case 1:return u=r.sent(),[3,4];case 2:return[4,Sd(o,e.onProgress,a,s)];case 3:u=r.sent(),r.label=4;case 4:return c=u.map((function(t){return t.arrayBuffer()})),l=.5,h=1,null!=e.onProgress?[3,6]:[4,Promise.all(c)];case 5:return f=r.sent(),[3,8];case 6:return[4,Sd(c,e.onProgress,l,h)];case 7:f=r.sent(),r.label=8;case 8:return[2,f]}}))}))}function Td(t){var e=this;return function(o,a,i){return void 0===a&&(a=\"\"),n(e,void 0,void 0,(function(){var e,n,s,u,c,l,h,f,d,p;return r(this,(function(r){switch(r.label){case 0:if(e=o.map((function(){return!1})),n={},s=null!=i?i.map((function(){return!1})):[],u=[],o.forEach((function(t,r){var o=0;t.weights.forEach((function(t){var a=\"quantization\"in t?t.quantization.dtype:t.dtype,c=zf[a]*k(t.shape),l=function(){e[r]=!0,null==n[r]&&(n[r]=[]),n[r].push({manifestEntry:t,groupOffset:o,sizeBytes:c})};null!=i?i.forEach((function(e,n){e===t.name&&(l(),s[n]=!0)})):l(),u.push(t.name),o+=c}))})),!s.every((function(t){return t})))throw c=i.filter((function(t,e){return!s[e]})),new Error(\"Could not find weights in manifest with names: \"+c.join(\", \")+\". \\nManifest JSON has weights with names: \"+u.join(\", \")+\".\");return l=e.reduce((function(t,e,n){return e&&t.push(n),t}),[]),h=[],l.forEach((function(t){o[t].paths.forEach((function(t){var e=a+(a.endsWith(\"/\")?\"\":\"/\")+t;h.push(e)}))})),[4,t(h)];case 1:return f=r.sent(),d={},p=0,l.forEach((function(t){for(var e=o[t].paths.length,r=0,a=0;a<e;a++)r+=f[p+a].byteLength;for(var i=new ArrayBuffer(r),s=new Uint8Array(i),u=0,c=0;c<e;c++){var l=new Uint8Array(f[p+c]);s.set(l,u),u+=l.byteLength}n[t].forEach((function(t){var e=Hf(i.slice(t.groupOffset,t.groupOffset+t.sizeBytes),[t.manifestEntry]);for(var n in e)d[n]=e[n]})),p+=e})),[2,d]}}))}))}}Qf.registerSaveRouter((function(t){return i().getBool(\"IS_BROWSER\")&&!Array.isArray(t)&&t.startsWith(Id.URL_SCHEME)?function(t){void 0===t&&(t=\"model\");return new Id(t)}(t.slice(Id.URL_SCHEME.length)):null}));var Dd=function(){function t(t,e){if(this.DEFAULT_METHOD=\"POST\",null==e&&(e={}),this.weightPathPrefix=e.weightPathPrefix,this.onProgress=e.onProgress,null!=e.fetchFunc?(C(\"function\"==typeof e.fetchFunc,(function(){return\"Must pass a function that matches the signature of `fetch` (see https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)\"})),this.fetch=e.fetchFunc):this.fetch=i().platform.fetch,C(null!=t&&t.length>0,(function(){return\"URL path for http must not be null, undefined or empty.\"})),Array.isArray(t)&&C(2===t.length,(function(){return\"URL paths for http must have a length of 2, (actual length is \"+t.length+\").\"})),this.path=t,null!=e.requestInit&&null!=e.requestInit.body)throw new Error(\"requestInit is expected to have no pre-existing body, but has one.\");this.requestInit=e.requestInit||{}}return t.prototype.save=function(t){return n(this,void 0,void 0,(function(){var e,n,o,a;return r(this,(function(r){switch(r.label){case 0:if(t.modelTopology instanceof ArrayBuffer)throw new Error(\"BrowserHTTPRequest.save() does not support saving model topology in binary formats yet.\");return(e=Object.assign({method:this.DEFAULT_METHOD},this.requestInit)).body=new FormData,n=[{paths:[\"./model.weights.bin\"],weights:t.weightSpecs}],o={modelTopology:t.modelTopology,format:t.format,generatedBy:t.generatedBy,convertedBy:t.convertedBy,userDefinedMetadata:t.userDefinedMetadata,weightsManifest:n},e.body.append(\"model.json\",new Blob([JSON.stringify(o)],{type:\"application/json\"}),\"model.json\"),null!=t.weightData&&e.body.append(\"model.weights.bin\",new Blob([t.weightData],{type:\"application/octet-stream\"}),\"model.weights.bin\"),[4,this.fetch(this.path,e)];case 1:if((a=r.sent()).ok)return[2,{modelArtifactsInfo:$f(t),responses:[a]}];throw new Error(\"BrowserHTTPRequest.save() failed due to HTTP response status \"+a.status+\".\")}}))}))},t.prototype.load=function(){return n(this,void 0,void 0,(function(){var t,e,n,o,a,i,s,u,c,l,h,f;return r(this,(function(r){switch(r.label){case 0:return[4,this.fetch(this.path,this.requestInit)];case 1:if(!(t=r.sent()).ok)throw new Error(\"Request to \"+this.path+\" failed with status code \"+t.status+\". Please verify this URL points to the model JSON of the model to load.\");r.label=2;case 2:return r.trys.push([2,4,,5]),[4,t.json()];case 3:return e=r.sent(),[3,5];case 4:throw r.sent(),n=\"Failed to parse model JSON of response from \"+this.path+\".\",this.path.endsWith(\".pb\")?n+=\" Your path contains a .pb file extension. Support for .pb models have been removed in TensorFlow.js 1.0 in favor of .json models. You can re-convert your Python TensorFlow model using the TensorFlow.js 1.0 conversion scripts or you can convert your.pb models with the 'pb2json'NPM script in the tensorflow/tfjs-converter repository.\":n+=\" Please make sure the server is serving valid JSON for this request.\",new Error(n);case 5:if(o=e.modelTopology,a=e.weightsManifest,i=e.generatedBy,s=e.convertedBy,u=e.format,c=e.userDefinedMetadata,null==o&&null==a)throw new Error(\"The JSON from HTTP path \"+this.path+\" contains neither model topology or manifest for weights.\");return null==a?[3,7]:[4,this.loadWeights(a)];case 6:f=r.sent(),l=f[0],h=f[1],r.label=7;case 7:return[2,{modelTopology:o,weightSpecs:l,weightData:h,userDefinedMetadata:c,generatedBy:i,convertedBy:s,format:u}]}}))}))},t.prototype.loadWeights=function(t){return n(this,void 0,void 0,(function(){var e,n,o,a,i,s,u,c,l,h,f;return r(this,(function(r){switch(r.label){case 0:for(e=Array.isArray(this.path)?this.path[1]:this.path,n=function(t){var e=t.lastIndexOf(\"/\"),n=t.lastIndexOf(\"?\"),r=t.substring(0,e),o=n>e?t.substring(n):\"\";return[r+\"/\",o]}(e),o=n[0],a=n[1],i=this.weightPathPrefix||o,s=[],u=0,c=t;u<c.length;u++)l=c[u],s.push.apply(s,l.weights);return h=[],t.forEach((function(t){t.paths.forEach((function(t){h.push(i+t+a)}))})),[4,Ad(h,{requestInit:this.requestInit,fetchFunc:this.fetch,onProgress:this.onProgress})];case 1:return f=r.sent(),[2,[s,Xf(f)]]}}))}))},t.URL_SCHEME_REGEX=/^https?:\\/\\//,t}();function Nd(t){return null!=t.match(Dd.URL_SCHEME_REGEX)}var Fd=function(t,e){if(\"undefined\"==typeof fetch)return null;return(Array.isArray(t)?t.every((function(t){return Nd(t)})):Nd(t))?_d(t,{onProgress:e}):null};function _d(t,e){return new Dd(t,e)}Qf.registerSaveRouter(Fd),Qf.registerLoadRouter(Fd);var Od=function(){function t(t){this.modelArtifacts=t}return t.prototype.load=function(){return n(this,void 0,void 0,(function(){return r(this,(function(t){return[2,this.modelArtifacts]}))}))},t}(),Md=function(){function t(t){this.saveHandler=t}return t.prototype.save=function(t){return n(this,void 0,void 0,(function(){return r(this,(function(e){return[2,this.saveHandler(t)]}))}))},t}();var Bd=Object.freeze({browserFiles:function(t){return new kd(t)},browserHTTPRequest:function(t,e){return _d(t,e)},concatenateArrayBuffers:Xf,decodeWeights:Hf,encodeWeights:function(t,e){return n(this,void 0,void 0,(function(){var o,a,i,s,u,c=this;return r(this,(function(l){switch(l.label){case 0:for(o=[],a=[],i=Array.isArray(t)?t.map((function(t){return t.name})):Object.keys(t),s=function(s){var u=i[s],l=Array.isArray(t)?t[s].tensor:t[u];if(\"float32\"!==l.dtype&&\"int32\"!==l.dtype&&\"bool\"!==l.dtype&&\"string\"!==l.dtype)throw new Error(\"Unsupported dtype in weight '\"+u+\"': \"+l.dtype);var h={name:u,shape:l.shape,dtype:l.dtype};if(\"string\"===l.dtype){var f=new Promise((function(t){return n(c,void 0,void 0,(function(){var e,n,o,a,i,s,u;return r(this,(function(r){switch(r.label){case 0:return[4,l.bytes()];case 1:for(e=r.sent(),n=e.reduce((function(t,e){return t+e.length}),0)+Gf*e.length,o=new Uint8Array(n),a=0,i=0;i<e.length;i++)s=e[i],u=new Uint8Array(new Uint32Array([s.length]).buffer),o.set(u,a),a+=Gf,o.set(s,a),a+=s.length;return t(o),[2]}}))}))}));a.push(f)}else a.push(l.data());null!=e&&(h.group=e),o.push(h)},u=0;u<i.length;++u)s(u);return[4,Promise.all(a)];case 1:return[2,{data:qf(l.sent()),specs:o}]}}))}))},fromMemory:function(t,e,n,r){return 1===arguments.length?null!=t.modelTopology||null!=t.weightSpecs?new Od(t):(console.warn(\"Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release.\"),new Od({modelTopology:t})):(console.warn(\"Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release.\"),new Od({modelTopology:t,weightSpecs:e,weightData:n,trainingConfig:r}))},getLoadHandlers:function(t,e){return Qf.getLoadHandlers(t,e)},getModelArtifactsInfoForJSON:$f,getSaveHandlers:function(t){return Qf.getSaveHandlers(t)},http:_d,isHTTPScheme:Nd,loadWeights:function(t,e,o,a){return void 0===e&&(e=\"\"),n(this,void 0,void 0,(function(){return r(this,(function(n){return[2,Td((function(t){return Ad(t,{requestInit:a})}))(t,e,o)]}))}))},registerLoadRouter:function(t){return Qf.registerLoadRouter(t)},registerSaveRouter:function(t){return Qf.registerSaveRouter(t)},weightsLoaderFactory:Td,withSaveHandler:function(t){return new Md(t)},copyModel:function(t,e){return n(this,void 0,void 0,(function(){return r(this,(function(n){return!1,[2,ed(t,e,!1)]}))}))},listModels:function(){return n(this,void 0,void 0,(function(){var t,e,n,o,a,i,s;return r(this,(function(r){switch(r.label){case 0:t=Zf.getSchemes(),e={},n=0,o=t,r.label=1;case 1:return n<o.length?(a=o[n],[4,Zf.getManager(a).listModels()]):[3,4];case 2:for(s in i=r.sent())e[a+Jf+s]=i[s];r.label=3;case 3:return n++,[3,1];case 4:return[2,e]}}))}))},moveModel:function(t,e){return n(this,void 0,void 0,(function(){return r(this,(function(n){return!0,[2,ed(t,e,!0)]}))}))},removeModel:function(t){return n(this,void 0,void 0,(function(){var e;return r(this,(function(n){return e=td(t),[2,Zf.getManager(e.scheme).removeModel(e.path)]}))}))}});var Pd,Ld=An({confusionMatrix_:function(t,e,n){var r=gn(t,\"labels\",\"confusionMatrix\"),o=gn(e,\"predictions\",\"confusionMatrix\");C(null==n||n>0&&Number.isInteger(n),(function(){return\"If provided, numClasses must be a positive integer, but got \"+n})),C(1===r.rank,(function(){return\"Expected the rank of labels to be 1, but got \"+r.rank})),C(1===o.rank,(function(){return\"Expected the rank of predictions to be 1, but got \"+o.rank})),C(r.shape[0]===o.shape[0],(function(){return\"Mismatch in the number of examples: \"+r.shape[0]+\" vs. \"+o.shape[0]+\". Labels and predictions should have the same number of elements.\"})),C(n>0&&Number.isInteger(n),(function(){return\"numClasses is required to be a positive integer, but got \"+n}));var a=Rc(r.asType(\"int32\"),n),i=Rc(o.asType(\"int32\"),n);return a.transpose().matMul(i).asType(\"int32\")}}),Wd=Object.freeze({confusionMatrix:Ld});var Ud=An({fromPixels_:function(t,e){if(void 0===e&&(e=3),e>4)throw new Error(\"Cannot construct Tensor with more than 4 channels from pixels.\");if(null==t)throw new Error(\"pixels passed to tf.browser.fromPixels() can not be null\");var n=!1,r=!1,o=!1,a=!1,i=!1;if(t.data instanceof Uint8Array)n=!0;else if(\"undefined\"!=typeof ImageData&&t instanceof ImageData)r=!0;else if(\"undefined\"!=typeof HTMLVideoElement&&t instanceof HTMLVideoElement)o=!0;else if(\"undefined\"!=typeof HTMLImageElement&&t instanceof HTMLImageElement)a=!0;else{if(null==t.getContext)throw new Error(\"pixels passed to tf.browser.fromPixels() must be either an HTMLVideoElement, HTMLImageElement, HTMLCanvasElement, ImageData in browser, or OffscreenCanvas, ImageData in webworker or {data: Uint32Array, width: number, height: number}, but was \"+t.constructor.name);i=!0}if(o){if(o&&t.readyState<2)throw new Error(\"The video element has not loaded data yet. Please wait for `loadeddata` event on the <video> element.\")}if(null!=l(\"FromPixels\",Lt.backendName))return Lt.runKernel(\"FromPixels\",{pixels:t},{numChannels:e});var s,u,c=o?[t.videoWidth,t.videoHeight]:[t.width,t.height],h=c[0],f=c[1];if(i?s=t.getContext(\"2d\").getImageData(0,0,h,f).data:r||n?s=t.data:(a||o)&&(null==Pd&&(Pd=document.createElement(\"canvas\").getContext(\"2d\")),Pd.canvas.width=h,Pd.canvas.height=f,Pd.drawImage(t,0,0,h,f),s=Pd.getImageData(0,0,h,f).data),4===e)u=new Int32Array(s);else{var d=h*f;u=new Int32Array(d*e);for(var p=0;p<d;p++)for(var v=0;v<e;++v)u[p*e+v]=s[4*p+v]}return Pn(u,[f,h,e],\"int32\")}}),Vd=Object.freeze({toPixels:function(t,e){return n(this,void 0,void 0,(function(){var n,o,a,i,s,u,c,l,h,f,d,p,v,g,m,y,x,b,w,C,E,R,I;return r(this,(function(r){switch(r.label){case 0:if(n=gn(t,\"img\",\"toPixels\"),t instanceof wt||(n=n.toInt()),2!==n.rank&&3!==n.rank)throw new Error(\"toPixels only supports rank 2 or 3 tensors, got rank \"+n.rank+\".\");if(o=n.shape.slice(0,2),a=o[0],i=o[1],(s=2===n.rank?1:n.shape[2])>4||2===s)throw new Error(\"toPixels only supports depth of size 1, 3 or 4 but got \"+s);return[4,n.data()];case 1:return u=r.sent(),c=n.min(),l=n.max(),[4,Promise.all([c.data(),l.data()])];case 2:if(h=r.sent(),f=h[0],d=h[1],p=f[0],v=d[0],c.dispose(),l.dispose(),\"float32\"===n.dtype){if(p<0||v>1)throw new Error(\"Tensor values for a float32 Tensor must be in the range [0 - 1] but got range [\"+p+\" - \"+v+\"].\")}else{if(\"int32\"!==n.dtype)throw new Error(\"Unsupported type for toPixels: \"+n.dtype+\". Please use float32 or int32 tensors.\");if(p<0||v>255)throw new Error(\"Tensor values for a int32 Tensor must be in the range [0 - 255] but got range [\"+p+\" - \"+v+\"].\")}for(g=\"float32\"===n.dtype?255:1,m=new Uint8ClampedArray(i*a*4),y=0;y<a*i;++y)x=void 0,b=void 0,w=void 0,C=void 0,1===s?(x=u[y]*g,b=u[y]*g,w=u[y]*g,C=255):3===s?(x=u[3*y]*g,b=u[3*y+1]*g,w=u[3*y+2]*g,C=255):4===s&&(x=u[4*y]*g,b=u[4*y+1]*g,w=u[4*y+2]*g,C=u[4*y+3]*g),m[(E=4*y)+0]=Math.round(x),m[E+1]=Math.round(b),m[E+2]=Math.round(w),m[E+3]=Math.round(C);return null!=e&&(e.width=i,e.height=a,R=e.getContext(\"2d\"),I=new ImageData(m,i,a),R.putImageData(I,0,0)),n!==t&&n.dispose(),[2,m]}}))}))},fromPixels:Ud}),zd=function(){function t(){}return t.prototype.getClassName=function(){return this.constructor.className},t.fromConfig=function(t,e){return new t(e)},t}(),Gd=function(){function t(){this.classNameMap={}}return t.getMap=function(){return null==t.instance&&(t.instance=new t),t.instance},t.register=function(e){t.getMap().classNameMap[e.className]=[e,e.fromConfig]},t}();function Hd(t){C(null!=t.className,(function(){return\"Class being registered does not have the static className property defined.\"})),C(\"string\"==typeof t.className,(function(){return\"className is required to be a string, but got type \"+typeof t.className})),C(t.className.length>0,(function(){return\"Class being registered has an empty-string as its className, which is disallowed.\"})),Gd.register(t)}var qd=Object.freeze({Serializable:zd,SerializationMap:Gd,registerClass:Hd}),Kd=\"1.7.4\";var jd=Object.freeze({gpgpu_util:Rs,webgl_util:Ge,forceHalfFloat:function(){i().set(\"WEBGL_FORCE_F16_TEXTURES\",!0)},MathBackendWebGL:Uu,setWebGLContext:Kt,GPGPUContext:Is}),Xd=function(t){function o(){return null!==t&&t.apply(this,arguments)||this}return e(o,t),o.prototype.minimize=function(t,e,n){void 0===e&&(e=!1);var r=this.computeGradients(t,n),o=r.value,a=r.grads;if(null!=n){var i=n.map((function(t){return{name:t.name,tensor:a[t.name]}}));this.applyGradients(i)}else this.applyGradients(a);return tn(a),e?o:(o.dispose(),null)},Object.defineProperty(o.prototype,\"iterations\",{get:function(){return null==this.iterations_&&(this.iterations_=0),this.iterations_},enumerable:!0,configurable:!0}),o.prototype.incrementIterations=function(){this.iterations_=this.iterations+1},o.prototype.computeGradients=function(t,e){return ra(t,e)},o.prototype.dispose=function(){null!=this.iterations_&&tn(this.iterations_)},o.prototype.saveIterations=function(){return n(this,void 0,void 0,(function(){return r(this,(function(t){return null==this.iterations_&&(this.iterations_=0),[2,{name:\"iter\",tensor:On(this.iterations_,\"int32\")}]}))}))},o.prototype.getWeights=function(){return n(this,void 0,void 0,(function(){return r(this,(function(t){throw new Error(\"getWeights() is not implemented for this optimizer yet.\")}))}))},o.prototype.setWeights=function(t){return n(this,void 0,void 0,(function(){return r(this,(function(t){throw new Error(\"setWeights() is not implemented for this optimizer class \"+this.getClassName())}))}))},o.prototype.extractIterations=function(t){return n(this,void 0,void 0,(function(){var e;return r(this,(function(n){switch(n.label){case 0:return e=this,[4,t[0].tensor.data()];case 1:return e.iterations_=n.sent()[0],[2,t.slice(1)]}}))}))},o}(zd);Object.defineProperty(Xd,Symbol.hasInstance,{value:function(t){return null!=t.minimize&&null!=t.computeGradients&&null!=t.applyGradients}});var Yd=function(t){function o(e,n,r){void 0===r&&(r=null);var o=t.call(this)||this;return o.learningRate=e,o.rho=n,o.epsilon=r,o.accumulatedGrads=[],o.accumulatedUpdates=[],null==r&&(o.epsilon=Lt.backend.epsilon()),o}return e(o,t),o.prototype.applyGradients=function(t){var e=this;(Array.isArray(t)?t.map((function(t){return t.name})):Object.keys(t)).forEach((function(n,r){var o=Lt.registeredVariables[n];null==e.accumulatedGrads[r]&&(e.accumulatedGrads[r]={originalName:n+\"/accum_grad\",variable:Ze((function(){return Xn(o).variable(!1)}))}),null==e.accumulatedUpdates[r]&&(e.accumulatedUpdates[r]={originalName:n+\"/accum_var\",variable:Ze((function(){return Xn(o).variable(!1)}))});var a=Array.isArray(t)?t[r].tensor:t[n];if(null!=a){var i=e.accumulatedGrads[r].variable,s=e.accumulatedUpdates[r].variable;Ze((function(){var t=i.mul(e.rho).add(a.square().mul(1-e.rho)),n=s.add(e.epsilon).sqrt().div(i.add(e.epsilon).sqrt()).mul(a),r=s.mul(e.rho).add(n.square().mul(1-e.rho));i.assign(t),s.assign(r);var u=n.mul(-e.learningRate).add(o);o.assign(u)}))}})),this.incrementIterations()},o.prototype.dispose=function(){null!=this.accumulatedUpdates&&(tn(this.accumulatedGrads.map((function(t){return t.variable}))),tn(this.accumulatedUpdates.map((function(t){return t.variable}))))},o.prototype.getWeights=function(){return n(this,void 0,void 0,(function(){var t;return r(this,(function(e){switch(e.label){case 0:return t=this.accumulatedGrads.concat(this.accumulatedUpdates),[4,this.saveIterations()];case 1:return[2,[e.sent()].concat(t.map((function(t){return{name:t.originalName,tensor:t.variable}})))]}}))}))},o.prototype.setWeights=function(t){return n(this,void 0,void 0,(function(){var e;return r(this,(function(n){switch(n.label){case 0:return[4,this.extractIterations(t)];case 1:return t=n.sent(),e=t.length/2,!1,this.accumulatedGrads=t.slice(0,e).map((function(t){return{originalName:t.name,variable:t.tensor.variable(!1)}})),this.accumulatedUpdates=t.slice(e,2*e).map((function(t){return{originalName:t.name,variable:t.tensor.variable(!1)}})),[2]}}))}))},o.prototype.getConfig=function(){return{learningRate:this.learningRate,rho:this.rho,epsilon:this.epsilon}},o.fromConfig=function(t,e){return new t(e.learningRate,e.rho,e.epsilon)},o.className=\"Adadelta\",o}(Xd);Hd(Yd);var $d=function(t){function o(e,n){void 0===n&&(n=.1);var r=t.call(this)||this;return r.learningRate=e,r.initialAccumulatorValue=n,r.accumulatedGrads=[],r}return e(o,t),o.prototype.applyGradients=function(t){var e=this;(Array.isArray(t)?t.map((function(t){return t.name})):Object.keys(t)).forEach((function(n,r){var o=Lt.registeredVariables[n];if(null==e.accumulatedGrads[r]){e.accumulatedGrads[r]={originalName:n+\"/accumulator\",variable:Ze((function(){return Hn(o.shape,e.initialAccumulatorValue).variable(!1)}))}}var a=Array.isArray(t)?t[r].tensor:t[n];if(null!=a){var i=e.accumulatedGrads[r].variable;Ze((function(){var t=i.add(a.square());i.assign(t);var n=a.div(t.add(Lt.backend.epsilon()).sqrt()).mul(-e.learningRate).add(o);o.assign(n)}))}})),this.incrementIterations()},o.prototype.dispose=function(){null!=this.accumulatedGrads&&tn(this.accumulatedGrads.map((function(t){return t.variable})))},o.prototype.getWeights=function(){return n(this,void 0,void 0,(function(){return r(this,(function(t){switch(t.label){case 0:return[4,this.saveIterations()];case 1:return[2,[t.sent()].concat(this.accumulatedGrads.map((function(t){return{name:t.originalName,tensor:t.variable}})))]}}))}))},o.prototype.setWeights=function(t){return n(this,void 0,void 0,(function(){return r(this,(function(e){switch(e.label){case 0:return[4,this.extractIterations(t)];case 1:return t=e.sent(),!1,this.accumulatedGrads=t.map((function(t){return{originalName:t.name,variable:t.tensor.variable(!1)}})),[2]}}))}))},o.prototype.getConfig=function(){return{learningRate:this.learningRate,initialAccumulatorValue:this.initialAccumulatorValue}},o.fromConfig=function(t,e){return new t(e.learningRate,e.initialAccumulatorValue)},o.className=\"Adagrad\",o}(Xd);Hd($d);var Qd=function(t){function o(e,n,r,o){void 0===o&&(o=null);var a=t.call(this)||this;return a.learningRate=e,a.beta1=n,a.beta2=r,a.epsilon=o,a.accumulatedFirstMoment=[],a.accumulatedSecondMoment=[],Ze((function(){a.accBeta1=On(n).variable(),a.accBeta2=On(r).variable()})),null==o&&(a.epsilon=Lt.backend.epsilon()),a}return e(o,t),o.prototype.applyGradients=function(t){var e=this,n=Array.isArray(t)?t.map((function(t){return t.name})):Object.keys(t);Ze((function(){var r=Oo(1,e.accBeta1),o=Oo(1,e.accBeta2);n.forEach((function(n,a){var i=Lt.registeredVariables[n];null==e.accumulatedFirstMoment[a]&&(e.accumulatedFirstMoment[a]={originalName:n+\"/m\",variable:Ze((function(){return Xn(i).variable(!1)}))}),null==e.accumulatedSecondMoment[a]&&(e.accumulatedSecondMoment[a]={originalName:n+\"/v\",variable:Ze((function(){return Xn(i).variable(!1)}))});var s=Array.isArray(t)?t[a].tensor:t[n];if(null!=s){var u=e.accumulatedFirstMoment[a].variable,c=e.accumulatedSecondMoment[a].variable,l=u.mul(e.beta1).add(s.mul(1-e.beta1)),h=c.mul(e.beta2).add(s.square().mul(1-e.beta2)),f=l.div(r),d=h.div(o);u.assign(l),c.assign(h);var p=f.div(d.sqrt().add(e.epsilon)).mul(-e.learningRate).add(i);i.assign(p)}})),e.accBeta1.assign(e.accBeta1.mul(e.beta1)),e.accBeta2.assign(e.accBeta2.mul(e.beta2))})),this.incrementIterations()},o.prototype.dispose=function(){this.accBeta1.dispose(),this.accBeta2.dispose(),null!=this.accumulatedFirstMoment&&tn(this.accumulatedFirstMoment.map((function(t){return t.variable}))),null!=this.accumulatedSecondMoment&&tn(this.accumulatedSecondMoment.map((function(t){return t.variable})))},o.prototype.getWeights=function(){return n(this,void 0,void 0,(function(){var t;return r(this,(function(e){switch(e.label){case 0:return t=this.accumulatedFirstMoment.concat(this.accumulatedSecondMoment),[4,this.saveIterations()];case 1:return[2,[e.sent()].concat(t.map((function(t){return{name:t.originalName,tensor:t.variable}})))]}}))}))},o.prototype.setWeights=function(t){return n(this,void 0,void 0,(function(){var e,n=this;return r(this,(function(r){switch(r.label){case 0:return[4,this.extractIterations(t)];case 1:return t=r.sent(),Ze((function(){n.accBeta1.assign(No(n.beta1,n.iterations_+1)),n.accBeta2.assign(No(n.beta2,n.iterations_+1))})),e=t.length/2,!1,this.accumulatedFirstMoment=t.slice(0,e).map((function(t){return{originalName:t.name,variable:t.tensor.variable(!1)}})),this.accumulatedSecondMoment=t.slice(e,2*e).map((function(t){return{originalName:t.name,variable:t.tensor.variable(!1)}})),[2]}}))}))},o.prototype.getConfig=function(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon}},o.fromConfig=function(t,e){return new t(e.learningRate,e.beta1,e.beta2,e.epsilon)},o.className=\"Adam\",o}(Xd);Hd(Qd);var Jd=function(t){function o(e,n,r,o,a){void 0===o&&(o=null),void 0===a&&(a=0);var i=t.call(this)||this;return i.learningRate=e,i.beta1=n,i.beta2=r,i.epsilon=o,i.decay=a,i.accumulatedFirstMoment=[],i.accumulatedWeightedInfNorm=[],Ze((function(){i.iteration=On(0).variable(),i.accBeta1=On(n).variable()})),null==o&&(i.epsilon=Lt.backend.epsilon()),i}return e(o,t),o.prototype.applyGradients=function(t){var e=this,n=Array.isArray(t)?t.map((function(t){return t.name})):Object.keys(t);Ze((function(){var r=Oo(1,e.accBeta1),o=Bo(-e.learningRate,e.iteration.mul(e.decay).add(1));n.forEach((function(n,a){var i=Lt.registeredVariables[n];null==e.accumulatedFirstMoment[a]&&(e.accumulatedFirstMoment[a]={originalName:n+\"/m\",variable:Xn(i).variable(!1)}),null==e.accumulatedWeightedInfNorm[a]&&(e.accumulatedWeightedInfNorm[a]={originalName:n+\"/v\",variable:Xn(i).variable(!1)});var s=Array.isArray(t)?t[a].tensor:t[n];if(null!=s){var u=e.accumulatedFirstMoment[a].variable,c=e.accumulatedWeightedInfNorm[a].variable,l=u.mul(e.beta1).add(s.mul(1-e.beta1)),h=c.mul(e.beta2),f=s.abs(),d=h.maximum(f);u.assign(l),c.assign(d);var p=o.div(r).mul(l.div(d.add(e.epsilon))).add(i);i.assign(p)}})),e.iteration.assign(e.iteration.add(1)),e.accBeta1.assign(e.accBeta1.mul(e.beta1))})),this.incrementIterations()},o.prototype.dispose=function(){this.accBeta1.dispose(),this.iteration.dispose(),null!=this.accumulatedFirstMoment&&tn(this.accumulatedFirstMoment.map((function(t){return t.variable}))),null!=this.accumulatedWeightedInfNorm&&tn(this.accumulatedWeightedInfNorm.map((function(t){return t.variable})))},o.prototype.getWeights=function(){return n(this,void 0,void 0,(function(){return r(this,(function(t){throw new Error(\"getWeights() is not implemented for Adamax yet.\")}))}))},o.prototype.setWeights=function(t){return n(this,void 0,void 0,(function(){return r(this,(function(t){throw new Error(\"setWeights() is not implemented for Adamax yet.\")}))}))},o.prototype.getConfig=function(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon,decay:this.decay}},o.fromConfig=function(t,e){return new t(e.learningRate,e.beta1,e.beta2,e.epsilon,e.decay)},o.className=\"Adamax\",o}(Xd);Hd(Jd);var Zd=function(t){function o(e){var n=t.call(this)||this;return n.learningRate=e,n.setLearningRate(e),n}return e(o,t),o.prototype.applyGradients=function(t){var e=this;(Array.isArray(t)?t.map((function(t){return t.name})):Object.keys(t)).forEach((function(n,r){var o=Array.isArray(t)?t[r].tensor:t[n];if(null!=o){var a=Lt.registeredVariables[n];Ze((function(){var t=e.c.mul(o).add(a);a.assign(t)}))}})),this.incrementIterations()},o.prototype.setLearningRate=function(t){this.learningRate=t,null!=this.c&&this.c.dispose(),this.c=en(On(-t))},o.prototype.dispose=function(){this.c.dispose()},o.prototype.getWeights=function(){return n(this,void 0,void 0,(function(){return r(this,(function(t){switch(t.label){case 0:return[4,this.saveIterations()];case 1:return[2,[t.sent()]]}}))}))},o.prototype.setWeights=function(t){return n(this,void 0,void 0,(function(){return r(this,(function(e){switch(e.label){case 0:return[4,this.extractIterations(t)];case 1:if(0!==(t=e.sent()).length)throw new Error(\"SGD optimizer does not have settable weights.\");return[2]}}))}))},o.prototype.getConfig=function(){return{learningRate:this.learningRate}},o.fromConfig=function(t,e){return new t(e.learningRate)},o.className=\"SGD\",o}(Xd);Hd(Zd);var tp=function(t){function o(e,n,r){void 0===r&&(r=!1);var o=t.call(this,e)||this;return o.learningRate=e,o.momentum=n,o.useNesterov=r,o.accumulations=[],o.m=On(o.momentum),o}return e(o,t),o.prototype.applyGradients=function(t){var e=this;(Array.isArray(t)?t.map((function(t){return t.name})):Object.keys(t)).forEach((function(n,r){var o=Lt.registeredVariables[n];if(null==e.accumulations[r]){e.accumulations[r]={originalName:n+\"/momentum\",variable:Ze((function(){return Xn(o).variable(!1)}))}}var a=e.accumulations[r].variable,i=Array.isArray(t)?t[r].tensor:t[n];null!=i&&Ze((function(){var t,n=e.m.mul(a).add(i);t=e.useNesterov?e.c.mul(i.add(n.mul(e.m))).add(o):e.c.mul(n).add(o),a.assign(n),o.assign(t)}))})),this.incrementIterations()},o.prototype.dispose=function(){this.m.dispose(),null!=this.accumulations&&tn(this.accumulations.map((function(t){return t.variable})))},o.prototype.setMomentum=function(t){this.momentum=t},o.prototype.getWeights=function(){return n(this,void 0,void 0,(function(){return r(this,(function(t){switch(t.label){case 0:return[4,this.saveIterations()];case 1:return[2,[t.sent()].concat(this.accumulations.map((function(t){return{name:t.originalName,tensor:t.variable}})))]}}))}))},o.prototype.setWeights=function(t){return n(this,void 0,void 0,(function(){return r(this,(function(e){switch(e.label){case 0:return[4,this.extractIterations(t)];case 1:return t=e.sent(),!1,this.accumulations=t.map((function(t){return{originalName:t.name,variable:t.tensor.variable(!1)}})),[2]}}))}))},o.prototype.getConfig=function(){return{learningRate:this.learningRate,momentum:this.momentum,useNesterov:this.useNesterov}},o.fromConfig=function(t,e){return new t(e.learningRate,e.momentum,e.useNesterov)},o.className=\"Momentum\",o}(Zd);Hd(tp);var ep=function(t){function o(e,n,r,o,a){void 0===n&&(n=.9),void 0===r&&(r=0),void 0===o&&(o=null),void 0===a&&(a=!1);var i=t.call(this)||this;if(i.learningRate=e,i.decay=n,i.momentum=r,i.epsilon=o,i.accumulatedMeanSquares=[],i.accumulatedMoments=[],i.accumulatedMeanGrads=[],i.centered=a,null==o&&(i.epsilon=Lt.backend.epsilon()),null==e)throw new Error(\"learningRate for RMSPropOptimizer must be defined.\");return i}return e(o,t),o.prototype.applyGradients=function(t){var e=this;(Array.isArray(t)?t.map((function(t){return t.name})):Object.keys(t)).forEach((function(n,r){var o=Lt.registeredVariables[n];null==e.accumulatedMeanSquares[r]&&(e.accumulatedMeanSquares[r]={originalName:n+\"/rms\",variable:Ze((function(){return Xn(o).variable(!1)}))}),null==e.accumulatedMoments[r]&&(e.accumulatedMoments[r]={originalName:n+\"/momentum\",variable:Ze((function(){return Xn(o).variable(!1)}))}),null==e.accumulatedMeanGrads[r]&&e.centered&&(e.accumulatedMeanGrads[r]={originalName:n+\"/mg\",variable:Ze((function(){return Xn(o).variable(!1)}))});var a=Array.isArray(t)?t[r].tensor:t[n];if(null!=a){var i=e.accumulatedMeanSquares[r].variable,s=e.accumulatedMoments[r].variable;Ze((function(){var t=i.mul(e.decay).add(a.square().mul(1-e.decay));if(e.centered){var n=e.accumulatedMeanGrads[r].variable,u=n.mul(e.decay).add(a.mul(1-e.decay)),c=s.mul(e.momentum).add(a.mul(e.learningRate).div(t.sub(u.square().add(e.epsilon)).sqrt()));i.assign(t),n.assign(u),s.assign(c);var l=o.sub(c);o.assign(l)}else{var h=i.mul(e.decay).add(a.square().mul(1-e.decay));c=s.mul(e.momentum).add(a.mul(e.learningRate).div(h.add(e.epsilon).sqrt()));i.assign(h),s.assign(c);l=o.sub(c);o.assign(l)}}))}})),this.incrementIterations()},o.prototype.dispose=function(){null!=this.accumulatedMeanSquares&&tn(this.accumulatedMeanSquares.map((function(t){return t.variable}))),null!=this.accumulatedMeanGrads&&this.centered&&tn(this.accumulatedMeanGrads.map((function(t){return t.variable}))),null!=this.accumulatedMoments&&tn(this.accumulatedMoments.map((function(t){return t.variable})))},o.prototype.getWeights=function(){return n(this,void 0,void 0,(function(){var t;return r(this,(function(e){switch(e.label){case 0:return t=this.accumulatedMeanSquares.concat(this.accumulatedMoments),this.centered&&t.push.apply(t,this.accumulatedMeanGrads),[4,this.saveIterations()];case 1:return[2,[e.sent()].concat(t.map((function(t){return{name:t.originalName,tensor:t.variable}})))]}}))}))},o.prototype.setWeights=function(t){return n(this,void 0,void 0,(function(){var e;return r(this,(function(n){switch(n.label){case 0:return[4,this.extractIterations(t)];case 1:return t=n.sent(),e=this.centered?t.length/3:t.length/2,!1,this.accumulatedMeanSquares=t.slice(0,e).map((function(t){return{originalName:t.name,variable:t.tensor.variable(!1)}})),this.accumulatedMoments=t.slice(e,2*e).map((function(t){return{originalName:t.name,variable:t.tensor.variable(!1)}})),this.centered&&(this.accumulatedMeanGrads=t.slice(2*e,3*e).map((function(t){return{originalName:t.name,variable:t.tensor.variable(!1)}}))),[2]}}))}))},o.prototype.getConfig=function(){return{learningRate:this.learningRate,decay:this.decay,momentum:this.momentum,epsilon:this.epsilon,centered:this.centered}},o.fromConfig=function(t,e){return new t(e.learningRate,e.decay,e.momentum,e.epsilon,e.centered)},o.className=\"RMSProp\",o}(Xd);Hd(ep);var np=function(){function t(){}return t.sgd=function(t){return new Zd(t)},t.momentum=function(t,e,n){return void 0===n&&(n=!1),new tp(t,e,n)},t.rmsprop=function(t,e,n,r,o){return void 0===e&&(e=.9),void 0===n&&(n=0),void 0===r&&(r=null),void 0===o&&(o=!1),new ep(t,e,n,r,o)},t.adam=function(t,e,n,r){return void 0===t&&(t=.001),void 0===e&&(e=.9),void 0===n&&(n=.999),void 0===r&&(r=null),new Qd(t,e,n,r)},t.adadelta=function(t,e,n){return void 0===t&&(t=.001),void 0===e&&(e=.95),void 0===n&&(n=null),new Yd(t,e,n)},t.adamax=function(t,e,n,r,o){return void 0===t&&(t=.002),void 0===e&&(e=.9),void 0===n&&(n=.999),void 0===r&&(r=null),void 0===o&&(o=0),new Jd(t,e,n,r,o)},t.adagrad=function(t,e){return void 0===e&&(e=.1),new $d(t,e)},t}(),rp={sgd:np.sgd,momentum:np.momentum,adadelta:np.adadelta,adagrad:np.adagrad,rmsprop:np.rmsprop,adamax:np.adamax,adam:np.adam},op=\"undefined\"!=typeof requestAnimationFrame?requestAnimationFrame:\"undefined\"!=typeof setImmediate?setImmediate:function(t){return t()};function ap(){return new Promise((function(t){return op((function(){return t()}))}))}wt.prototype.add=function(t){return Or(this,t)},wt.prototype.broadcastTo=function(t){return fc(this,t)},wt.prototype.div=function(t){return Bo(this,t)},wt.prototype.divNoNan=function(t){return bc(this,t)},wt.prototype.squaredDifference=function(t){return Hc(this,t)},wt.prototype.tile=function(t){return wc(this,t)},wt.prototype.oneHot=function(t,e,n){return void 0===e&&(e=1),void 0===n&&(n=0),Rc(this,t,e,n)},wt.prototype.transpose=function(t){return ua(this,t)},wt.prototype.pad=function(t,e){return Ic(this,t,e)},wt.prototype.batchNorm=function(t,e,n,r,o){return nc(this,t,e,n,r,o)},xt=ff;export{Yd as AdadeltaOptimizer,$d as AdagradOptimizer,Qd as AdamOptimizer,Jd as AdamaxOptimizer,xr as Add,br as AddN,Sr as BroadcastTo,ca as DataStorage,wr as Div,s as ENV,o as Environment,Fr as FromPixels,Cr as FusedBatchNorm,Tr as Identity,la as KernelBackend,_r as MaxPoolWithArgmax,tp as MomentumOptimizer,kr as NonMaxSuppressionV5,Ar as OneHot,Xd as Optimizer,Nr as PadV2,ep as RMSPropOptimizer,Ct as Rank,Nh as Reduction,Zd as SGDOptimizer,Rr as Square,Er as SquaredDifference,wt as Tensor,mt as TensorBuffer,Dr as Tile,Ir as Transpose,St as Variable,Lr as abs,Wr as acos,Ur as acosh,Or as add,$u as addN,xo as addStrict,ql as all,Kl as any,jl as argMax,Xl as argMin,Vr as asin,zr as asinh,Gr as atan,bo as atan2,Hr as atanh,Ol as avgPool,Pl as avgPool3d,hn as backend,Sa as backend_util,lh as basicLSTMCell,nc as batchNorm,ac as batchNorm2d,uc as batchNorm3d,hc as batchNorm4d,ec as batchNormalization,oc as batchNormalization2d,sc as batchNormalization3d,lc as batchNormalization4d,rr as batchToSpaceND,ul as booleanMaskAsync,fc as broadcastTo,Vd as browser,er as buffer,or as cast,qr as ceil,Kr as clipByValue,dc as clone,Tn as complex,Yn as concat,$n as concat1d,Qn as concat2d,Jn as concat3d,Zn as concat4d,fl as conv1d,dl as conv2d,wl as conv2dTranspose,pl as conv3d,Cl as conv3dTranspose,jr as cos,Xr as cosh,ar as cumsum,oa as customGrad,Xe as deprecationWarn,ir as depthToSpace,ml as depthwiseConv2d,Eh as diag,je as disableDeprecationWarnings,tn as dispose,Ye as disposeVariables,Bo as div,bc as divNoNan,wo as divStrict,Rl as dot,Rh as dropout,nh as elu,Ke as enableDebugMode,qe as enableProdMode,$e as engine,i as env,Kc as equal,jc as equalStrict,Yr as erf,$r as exp,sr as expandDims,Qr as expm1,Cc as eye,gh as fft,Hn as fill,un as findBackend,cn as findBackendFactory,Jr as floor,Co as floorDiv,Ah as frame,hf as fused,il as gather,Ch as gatherND,Lo as gather_util,an as getBackend,h as getGradient,l as getKernel,f as getKernelsForBackend,Zo as grad,ta as grads,Xc as greater,Yc as greaterEqual,$c as greaterEqualStrict,Qc as greaterStrict,Sh as hammingWindow,kh as hannWindow,mh as ifft,Nn as imag,nf as image,Fh as inTopKAsync,Bd as io,xh as irfft,lo as isFinite,co as isInf,uo as isNaN,en as keep,rh as leakyRelu,Jc as less,Zc as lessEqual,tl as lessEqualStrict,el as lessStrict,jh as linalg,qn as linspace,uh as localResponseNormalization,Zr as log,to as log1p,eo as logSigmoid,sa as logSoftmax,Yl as logSumExp,pc as logicalAnd,vc as logicalNot,gc as logicalOr,mc as logicalXor,zh as losses,El as matMul,Wd as math,$l as max,_l as maxPool,Bl as maxPool3d,Ll as maxPoolWithArgmax,Eo as maximum,Ro as maximumStrict,Ql as mean,Qe as memory,Jl as min,Io as minimum,ko as minimumStrict,So as mod,Ao as modStrict,Zl as moments,fh as movingAverage,To as mul,Do as mulStrict,hh as multiRNNCell,Ec as multinomial,no as neg,ap as nextFrame,ch as norm,nl as notEqual,rl as notEqualStrict,Rc as oneHot,zn as ones,jn as onesLike,An as op,Il as outerProduct,Ic as pad,kc as pad1d,Sc as pad2d,Ac as pad3d,Tc as pad4d,Ml as pool,No as pow,Fo as powStrict,oh as prelu,nr as print,eh as prod,Je as profile,Dc as rand,Uc as randomGamma,Vc as randomNormal,zc as randomUniform,Kn as range,on as ready,Dn as real,ro as reciprocal,ln as registerBackend,p as registerGradient,d as registerKernel,ah as relu,ih as relu6,sn as removeBackend,ur as reshape,kl as reverse,Sl as reverse1d,Al as reverse2d,Tl as reverse3d,Dl as reverse4d,yh as rfft,oo as round,ao as rsqrt,On as scalar,vh as scatterND,Ho as scatter_util,sh as selu,bl as separableConv2d,qd as serialization,rn as setBackend,fn as setPlatform,dr as setdiff1dAsync,io as sigmoid,so as sign,Dh as signal,ho as sin,fo as sinh,Wl as slice,Ul as slice1d,Vl as slice2d,zl as slice3d,Gl as slice4d,Jo as slice_util,ia as softmax,po as softplus,cr as spaceToBatchND,wh as sparseToDense,bh as spectral,tr as split,vo as sqrt,Gc as square,Hc as squaredDifference,_o as squaredDifferenceStrict,lr as squeeze,hr as stack,go as step,Th as stft,dh as stridedSlice,Oo as sub,Mo as subStrict,th as sum,Dt as sumOutType,mo as tan,yo as tanh,Fn as tensor,Mn as tensor1d,Bn as tensor2d,Pn as tensor3d,Ln as tensor4d,Wn as tensor5d,Un as tensor6d,Mt as tensor_util,Bc as test_util,Ze as tidy,wc as tile,nn as time,ph as topk,rp as train,ua as transpose,qc as truncatedNormal,g as unregisterGradient,v as unregisterKernel,sl as unsortedSegmentSum,fr as unstack,st as util,ea as valueAndGrad,na as valueAndGrads,Vn as variable,ra as variableGrads,Kd as version_core,jd as webgl,yc as where,xc as whereAsync,Gn as zeros,Xn as zerosLike};\n//# sourceMappingURL=tf-core.esm.js.map\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport{env,concat,slice,stack,tensor,tidy,unstack,util,io,Tensor,add,addN,mod,mul,div,divNoNan,floorDiv,sub,minimum,maximum,pow,squaredDifference,abs,acos,acosh,asin,asinh,atan,atan2,atanh,ceil,complex,cos,cosh,elu,erf,exp,expm1,floor,log,log1p,imag,neg,reciprocal,real,relu,round,selu,sigmoid,sin,sign,sinh,softplus,sqrt,square,tanh,tan,clipByValue,rsqrt,prod,leakyRelu,prelu,scalar,conv1d,conv2d,fused,conv2dTranspose,depthwiseConv2d,conv3d,avgPool,maxPool,maxPoolWithArgmax,avgPool3d,maxPool3d,fill,linspace,multinomial,oneHot,ones,onesLike,randomUniform,range,truncatedNormal,zeros,zerosLike,image,whereAsync,setdiff1dAsync,topk,tensor1d,equal,notEqual,greater,greaterEqual,less,lessEqual,logicalAnd,logicalNot,logicalOr,where,matMul,transpose,batchNorm,localResponseNormalization,softmax,logSoftmax,sparseToDense,max,mean,min,sum,all,any,argMax,argMin,gather,reverse,stridedSlice,tile,split,scatterND,gatherND,fft,ifft,rfft,irfft,cast,expandDims,squeeze,reshape,pad,spaceToBatchND,batchToSpaceND,depthToSpace}from\"@tensorflow/tfjs-core\";var DataType,SaverDef,__assign=function(){return(__assign=Object.assign||function(e){for(var t,a=1,r=arguments.length;a<r;a++)for(var n in t=arguments[a])Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e}).apply(this,arguments)};function __awaiter(e,t,a,r){return new(a||(a=Promise))(function(n,s){function o(e){try{u(r.next(e))}catch(e){s(e)}}function p(e){try{u(r.throw(e))}catch(e){s(e)}}function u(e){e.done?n(e.value):new a(function(t){t(e.value)}).then(o,p)}u((r=r.apply(e,t||[])).next())})}function __generator(e,t){var a,r,n,s,o={label:0,sent:function(){if(1&n[0])throw n[1];return n[1]},trys:[],ops:[]};return s={next:p(0),throw:p(1),return:p(2)},\"function\"==typeof Symbol&&(s[Symbol.iterator]=function(){return this}),s;function p(s){return function(p){return function(s){if(a)throw new TypeError(\"Generator is already executing.\");for(;o;)try{if(a=1,r&&(n=2&s[0]?r.return:s[0]?r.throw||((n=r.return)&&n.call(r),0):r.next)&&!(n=n.call(r,s[1])).done)return n;switch(r=0,n&&(s=[2&s[0],n.value]),s[0]){case 0:case 1:n=s;break;case 4:return o.label++,{value:s[1],done:!1};case 5:o.label++,r=s[1],s=[0];continue;case 7:s=o.ops.pop(),o.trys.pop();continue;default:if(!(n=(n=o.trys).length>0&&n[n.length-1])&&(6===s[0]||2===s[0])){o=0;continue}if(3===s[0]&&(!n||s[1]>n[0]&&s[1]<n[3])){o.label=s[1];break}if(6===s[0]&&o.label<n[1]){o.label=n[1],n=s;break}if(n&&o.label<n[2]){o.label=n[2],o.ops.push(s);break}n[2]&&o.ops.pop(),o.trys.pop();continue}s=t.call(e,o)}catch(e){s=[6,e],r=0}finally{a=n=0}if(5&s[0])throw s[1];return{value:s[0]?s[1]:void 0,done:!0}}([s,p])}}}!function(e){e[e.DT_INVALID=0]=\"DT_INVALID\",e[e.DT_FLOAT=1]=\"DT_FLOAT\",e[e.DT_DOUBLE=2]=\"DT_DOUBLE\",e[e.DT_INT32=3]=\"DT_INT32\",e[e.DT_UINT8=4]=\"DT_UINT8\",e[e.DT_INT16=5]=\"DT_INT16\",e[e.DT_INT8=6]=\"DT_INT8\",e[e.DT_STRING=7]=\"DT_STRING\",e[e.DT_COMPLEX64=8]=\"DT_COMPLEX64\",e[e.DT_INT64=9]=\"DT_INT64\",e[e.DT_BOOL=10]=\"DT_BOOL\",e[e.DT_QINT8=11]=\"DT_QINT8\",e[e.DT_QUINT8=12]=\"DT_QUINT8\",e[e.DT_QINT32=13]=\"DT_QINT32\",e[e.DT_BFLOAT16=14]=\"DT_BFLOAT16\",e[e.DT_FLOAT_REF=101]=\"DT_FLOAT_REF\",e[e.DT_DOUBLE_REF=102]=\"DT_DOUBLE_REF\",e[e.DT_INT32_REF=103]=\"DT_INT32_REF\",e[e.DT_UINT8_REF=104]=\"DT_UINT8_REF\",e[e.DT_INT16_REF=105]=\"DT_INT16_REF\",e[e.DT_INT8_REF=106]=\"DT_INT8_REF\",e[e.DT_STRING_REF=107]=\"DT_STRING_REF\",e[e.DT_COMPLEX64_REF=108]=\"DT_COMPLEX64_REF\",e[e.DT_INT64_REF=109]=\"DT_INT64_REF\",e[e.DT_BOOL_REF=110]=\"DT_BOOL_REF\",e[e.DT_QINT8_REF=111]=\"DT_QINT8_REF\",e[e.DT_QUINT8_REF=112]=\"DT_QUINT8_REF\",e[e.DT_QINT32_REF=113]=\"DT_QINT32_REF\",e[e.DT_BFLOAT16_REF=114]=\"DT_BFLOAT16_REF\"}(DataType||(DataType={})),function(e){!function(e){e[e.LEGACY=0]=\"LEGACY\",e[e.V1=1]=\"V1\",e[e.V2=2]=\"V2\"}(e.CheckpointFormatVersion||(e.CheckpointFormatVersion={}))}(SaverDef||(SaverDef={}));var CUSTOM_OPS={};function registerOp(e,t){var a={tfOpName:e,category:\"custom\",inputs:[],attrs:[],customExecutor:t};CUSTOM_OPS[e]=a}function getRegisteredOp(e){return CUSTOM_OPS[e]}function deregisterOp(e){delete CUSTOM_OPS[e]}function getParamValue(e,t,a,r){var n=t.inputParams[e];if(n&&void 0!==n.inputIndexStart){var s=n.inputIndexStart,o=0===n.inputIndexEnd?void 0:void 0===n.inputIndexEnd?s+1:n.inputIndexEnd;if(\"tensor\"===n.type)return getTensor(t.inputNames[n.inputIndexStart],a,r);if(\"tensors\"===n.type)return t.inputNames.slice(s,o).map(function(e){return getTensor(e,a,r)});var p=Array.prototype.slice.call(getTensor(t.inputNames.slice(s)[0],a,r).dataSync());return\"number\"===n.type?p[0]:p}var u=t.attrParams[e];return u&&u.value}function getTensor(e,t,a){var r=parseNodeName(e),n=r[0],s=r[1],o=a.currentContextIds.find(function(e){return!!t[getNodeNameWithContextId(n,e)]});return void 0!==o?t[getNodeNameWithContextId(n,o)][s]:void 0}function getTensorsForCurrentContenxt(e,t,a){return t[getNodeNameWithContextId(e,a.currentContextId)]}function getNodeNameAndIndex(e,t){var a=parseNodeName(e),r=a[0],n=a[1];return[getNodeNameWithContextId(r,t&&t.currentContextId),n]}function getNodeNameWithContextId(e,t){return t?e+\"-\"+t:e}function parseNodeName(e){var t=e.lastIndexOf(\":\");return-1===t?[e,0]:[e.substring(0,t),Number(e.substring(t+1))]}function split$1(e,t){for(var a=[],r=0;r<e.length;r+=t)a.push(e.slice(r,r+t));return a}var json=[{tfOpName:\"Add\",category:\"arithmetic\",inputs:[{start:0,name:\"a\",type:\"tensor\"},{start:1,name:\"b\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"AddV2\",category:\"arithmetic\",inputs:[{start:0,name:\"a\",type:\"tensor\"},{start:1,name:\"b\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"AddN\",category:\"arithmetic\",inputs:[{start:0,end:0,name:\"tensors\",type:\"tensors\"}]},{tfOpName:\"BiasAdd\",category:\"arithmetic\",inputs:[{start:0,name:\"a\",type:\"tensor\"},{start:1,name:\"b\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Sub\",category:\"arithmetic\",inputs:[{start:0,name:\"a\",type:\"tensor\"},{start:1,name:\"b\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"RealDiv\",category:\"arithmetic\",inputs:[{start:0,name:\"a\",type:\"tensor\"},{start:1,name:\"b\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Div\",category:\"arithmetic\",inputs:[{start:0,name:\"a\",type:\"tensor\"},{start:1,name:\"b\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"DivNoNan\",category:\"arithmetic\",inputs:[{start:0,name:\"a\",type:\"tensor\"},{start:1,name:\"b\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"FloorDiv\",category:\"arithmetic\",inputs:[{start:0,name:\"a\",type:\"tensor\"},{start:1,name:\"b\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Mul\",category:\"arithmetic\",inputs:[{start:0,name:\"a\",type:\"tensor\"},{start:1,name:\"b\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Maximum\",category:\"arithmetic\",inputs:[{start:0,name:\"a\",type:\"tensor\"},{start:1,name:\"b\",type:\"tensor\"}]},{tfOpName:\"Minimum\",category:\"arithmetic\",inputs:[{start:0,name:\"a\",type:\"tensor\"},{start:1,name:\"b\",type:\"tensor\"}]},{tfOpName:\"Pow\",category:\"arithmetic\",inputs:[{start:0,name:\"a\",type:\"tensor\"},{start:1,name:\"b\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"SquaredDifference\",category:\"arithmetic\",inputs:[{start:0,name:\"a\",type:\"tensor\"},{start:1,name:\"b\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Mod\",category:\"arithmetic\",inputs:[{start:0,name:\"a\",type:\"tensor\"},{start:1,name:\"b\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"FloorMod\",category:\"arithmetic\",inputs:[{start:0,name:\"a\",type:\"tensor\"},{start:1,name:\"b\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]}],arithmetic=Object.freeze({json:json}),json$1=[{tfOpName:\"Abs\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Acos\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Asin\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Atan\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Atan2\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"y\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Ceil\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"ClipByValue\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"clip_value_min\",name:\"clipValueMin\",type:\"number\"},{tfName:\"clip_value_max\",name:\"clipValueMax\",type:\"number\"}]},{tfOpName:\"Complex\",category:\"basic_math\",inputs:[{start:0,name:\"real\",type:\"tensor\"},{start:1,name:\"imag\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"ComplexAbs\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Cos\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Cosh\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Elu\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Exp\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Floor\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Log\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Imag\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0},{tfName:\"Tout\",name:\"outputType\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Neg\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Real\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0},{tfName:\"Tout\",name:\"outputType\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Prelu\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"alpha\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Relu\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Relu6\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0},{tfName:\"clipValueMin\",name:\"clipValueMin\",type:\"number\",defaultValue:0},{tfName:\"clipValueMax\",name:\"clipValueMax\",type:\"number\",defaultValue:6}]},{tfOpName:\"Selu\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Sigmoid\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Sin\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Sinh\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Sqrt\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Rsqrt\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Square\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Tan\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Tanh\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Sign\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Round\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Expm1\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Log1p\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Reciprocal\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Softplus\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Asinh\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Acosh\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Atanh\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Erf\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Prod\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"axes\",type:\"number[]\"}],attrs:[{tfName:\"keep_dims\",name:\"keepDims\",type:\"bool\",notSupported:!0},{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"LeakyRelu\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"alpha\",name:\"alpha\",type:\"number\",defaultValue:.2},{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]}],basicMath=Object.freeze({json:json$1}),json$2=[{tfOpName:\"LoopCond\",category:\"control\",inputs:[{start:0,name:\"pred\",type:\"tensor\"}]},{tfOpName:\"Switch\",category:\"control\",inputs:[{start:0,name:\"data\",type:\"tensor\"},{start:1,name:\"pred\",type:\"tensor\"}]},{tfOpName:\"Merge\",category:\"control\",inputs:[{start:0,end:0,name:\"tensors\",type:\"tensors\"}]},{tfOpName:\"Enter\",category:\"control\",inputs:[{start:0,name:\"tensor\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0},{tfName:\"frame_name\",name:\"frameName\",type:\"string\"},{tfName:\"is_constant\",name:\"isConstant\",type:\"bool\"}]},{tfOpName:\"Exit\",category:\"control\",inputs:[{start:0,name:\"tensor\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"NextIteration\",category:\"control\",inputs:[{start:0,name:\"tensor\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"TensorArrayV3\",category:\"control\",inputs:[{start:0,name:\"size\",type:\"number\"}],attrs:[{tfName:\"dtype\",name:\"dtype\",type:\"dtype\"},{tfName:\"element_shape\",name:\"elementShape\",type:\"shape\"},{tfName:\"dynamic_size\",name:\"dynamicSize\",type:\"bool\"},{tfName:\"clear_after_read\",name:\"clearAfterRead\",type:\"bool\"},{tfName:\"identical_element_shapes\",name:\"identicalElementShapes\",type:\"bool\"},{tfName:\"tensor_array_name\",name:\"name\",type:\"string\"}]},{tfOpName:\"TensorArrayWriteV3\",category:\"control\",inputs:[{start:0,name:\"tensorArrayId\",type:\"number\"},{start:1,name:\"index\",type:\"number\"},{start:2,name:\"tensor\",type:\"tensor\"},{start:3,name:\"flowIn\",type:\"number\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"TensorArrayReadV3\",category:\"control\",inputs:[{start:0,name:\"tensorArrayId\",type:\"number\"},{start:1,name:\"index\",type:\"number\"},{start:2,name:\"flowIn\",type:\"number\"}],attrs:[{tfName:\"dtype\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"TensorArrayGatherV3\",category:\"control\",inputs:[{start:0,name:\"tensorArrayId\",type:\"number\"},{start:1,name:\"indices\",type:\"number[]\"},{start:2,name:\"flowIn\",type:\"number\"}],attrs:[{tfName:\"dtype\",name:\"dtype\",type:\"dtype\"},{tfName:\"element_shape\",name:\"elementShape\",type:\"shape\"}]},{tfOpName:\"TensorArrayScatterV3\",category:\"control\",inputs:[{start:0,name:\"tensorArrayId\",type:\"number\"},{start:1,name:\"indices\",type:\"number[]\"},{start:2,name:\"tensor\",type:\"tensor\"},{start:3,name:\"flowIn\",type:\"number\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\"}]},{tfOpName:\"TensorArrayConcatV3\",category:\"control\",inputs:[{start:0,name:\"tensorArrayId\",type:\"number\"},{start:1,name:\"flowIn\",type:\"number\"}],attrs:[{tfName:\"dtype\",name:\"dtype\",type:\"dtype\"},{tfName:\"element_shape_except0\",name:\"elementShapeExcept0\",type:\"shape\",notSupported:!0}]},{tfOpName:\"TensorArraySplitV3\",category:\"control\",inputs:[{start:0,name:\"tensorArrayId\",type:\"number\"},{start:1,name:\"tensor\",type:\"tensor\"},{start:2,name:\"lengths\",type:\"number[]\"},{start:3,name:\"flowIn\",type:\"number\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\"}]},{tfOpName:\"TensorArraySizeV3\",category:\"control\",inputs:[{start:0,name:\"tensorArrayId\",type:\"number\"},{start:1,name:\"flowIn\",type:\"number\"}]},{tfOpName:\"TensorArrayCloseV3\",category:\"control\",inputs:[{start:0,name:\"tensorArrayId\",type:\"number\"}]}],control=Object.freeze({json:json$2}),json$3=[{tfOpName:\"AvgPool\",category:\"convolution\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"strides\",name:\"strides\",type:\"number[]\"},{tfName:\"padding\",name:\"pad\",type:\"string\"},{tfName:\"data_format\",name:\"dataFormat\",type:\"string\",notSupported:!0},{tfName:\"ksize\",name:\"kernelSize\",type:\"number[]\"},{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"MaxPool\",category:\"convolution\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"strides\",name:\"strides\",type:\"number[]\"},{tfName:\"padding\",name:\"pad\",type:\"string\"},{tfName:\"data_format\",name:\"dataFormat\",type:\"string\",notSupported:!0},{tfName:\"ksize\",name:\"kernelSize\",type:\"number[]\"},{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"MaxPoolWithArgmax\",category:\"convolution\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"strides\",name:\"strides\",type:\"number[]\"},{tfName:\"padding\",name:\"pad\",type:\"string\"},{tfName:\"ksize\",name:\"kernelSize\",type:\"number[]\"},{tfName:\"include_batch_in_index\",name:\"includeBatchInIndex\",type:\"bool\"},{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"AvgPool3D\",category:\"convolution\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"strides\",name:\"strides\",type:\"number[]\"},{tfName:\"padding\",name:\"pad\",type:\"string\"},{tfName:\"data_format\",name:\"dataFormat\",type:\"string\",notSupported:!0},{tfName:\"ksize\",name:\"kernelSize\",type:\"number[]\"},{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"MaxPool3D\",category:\"convolution\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"strides\",name:\"strides\",type:\"number[]\"},{tfName:\"padding\",name:\"pad\",type:\"string\"},{tfName:\"data_format\",name:\"dataFormat\",type:\"string\",notSupported:!0},{tfName:\"ksize\",name:\"kernelSize\",type:\"number[]\"},{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Conv1D\",category:\"convolution\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"filter\",type:\"tensor\"}],attrs:[{tfName:\"stride\",name:\"stride\",type:\"number\"},{tfName:\"padding\",name:\"pad\",type:\"string\"},{tfName:\"data_format\",name:\"dataFormat\",type:\"string\",defaultValue:\"NWC\"},{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0},{tfName:\"dilation\",name:\"dilation\",type:\"number\",defaultValue:1}]},{tfOpName:\"Conv2D\",category:\"convolution\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"filter\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0},{tfName:\"strides\",name:\"strides\",type:\"number[]\"},{tfName:\"padding\",name:\"pad\",type:\"string\"},{tfName:\"useCudnnOnGpu\",name:\"useCudnnOnGpu\",type:\"bool\"},{tfName:\"data_format\",name:\"dataFormat\",type:\"string\",defaultValue:\"NHWC\"},{tfName:\"dilations\",name:\"dilations\",type:\"number[]\"}]},{tfOpName:\"_FusedConv2D\",category:\"convolution\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"filter\",type:\"tensor\"},{start:2,end:0,name:\"args\",type:\"tensors\"}],attrs:[{tfName:\"num_args\",name:\"numArgs\",type:\"number\"},{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0},{tfName:\"strides\",name:\"strides\",type:\"number[]\"},{tfName:\"padding\",name:\"pad\",type:\"string\"},{tfName:\"explicit_paddings\",name:\"explicitPaddings\",type:\"number[]\",defaultValue:[]},{tfName:\"use_cudnn_on_gpu\",name:\"useCudnnOnGpu\",type:\"bool\",defaultValue:!0},{tfName:\"data_format\",name:\"dataFormat\",type:\"string\",defaultValue:\"NHWC\"},{tfName:\"dilations\",name:\"dilations\",type:\"number[]\",defaultValue:[1,1,1,1]},{tfName:\"fused_ops\",name:\"fusedOps\",type:\"string[]\",defaultValue:[]},{tfName:\"epsilon\",name:\"epsilon\",type:\"number\",defaultValue:1e-4}]},{tfOpName:\"Conv2DBackpropInput\",category:\"convolution\",inputs:[{start:2,name:\"x\",type:\"tensor\"},{start:1,name:\"filter\",type:\"tensor\"},{start:0,name:\"outputShape\",type:\"number[]\"}],attrs:[{tfName:\"strides\",name:\"strides\",type:\"number[]\"},{tfName:\"padding\",name:\"pad\",type:\"string\"},{tfName:\"data_format\",name:\"dataFormat\",type:\"string\",notSupported:!0}]},{tfOpName:\"DepthwiseConv2d\",category:\"convolution\",inputs:[{start:0,name:\"input\",type:\"tensor\"},{start:1,name:\"filter\",type:\"tensor\"}],attrs:[{tfName:\"strides\",name:\"strides\",type:\"number[]\"},{tfName:\"padding\",name:\"pad\",type:\"string\"},{tfName:\"data_format\",name:\"dataFormat\",type:\"string\",defaultValue:\"NHWC\"},{tfName:\"dilations\",name:\"dilations\",type:\"number[]\"}]},{tfOpName:\"DepthwiseConv2dNative\",category:\"convolution\",inputs:[{start:0,name:\"input\",type:\"tensor\"},{start:1,name:\"filter\",type:\"tensor\"}],attrs:[{tfName:\"strides\",name:\"strides\",type:\"number[]\"},{tfName:\"padding\",name:\"pad\",type:\"string\"},{tfName:\"data_format\",name:\"dataFormat\",type:\"string\",defaultValue:\"NHWC\"},{tfName:\"dilations\",name:\"dilations\",type:\"number[]\"}]},{tfOpName:\"FusedDepthwiseConv2dNative\",category:\"convolution\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"filter\",type:\"tensor\"},{start:2,end:0,name:\"args\",type:\"tensors\"}],attrs:[{tfName:\"num_args\",name:\"numArgs\",type:\"number\"},{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0},{tfName:\"strides\",name:\"strides\",type:\"number[]\"},{tfName:\"padding\",name:\"pad\",type:\"string\"},{tfName:\"data_format\",name:\"dataFormat\",type:\"string\",defaultValue:\"NHWC\"},{tfName:\"dilations\",name:\"dilations\",type:\"number[]\",defaultValue:[1,1,1,1]},{tfName:\"fused_ops\",name:\"fusedOps\",type:\"string[]\",defaultValue:[]}]},{tfOpName:\"Conv3D\",category:\"convolution\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"filter\",type:\"tensor\"}],attrs:[{tfName:\"strides\",name:\"strides\",type:\"number[]\"},{tfName:\"padding\",name:\"pad\",type:\"string\"},{tfName:\"data_format\",name:\"dataFormat\",type:\"string\",defaultValue:\"NHWC\"},{tfName:\"dilations\",name:\"dilations\",type:\"number[]\"}]}],convolution=Object.freeze({json:json$3}),json$4=[{tfOpName:\"Fill\",category:\"creation\",inputs:[{start:0,name:\"shape\",type:\"number[]\"},{start:1,name:\"value\",type:\"number\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\"}]},{tfOpName:\"LinSpace\",category:\"creation\",inputs:[{start:0,name:\"start\",type:\"number\"},{start:1,name:\"stop\",type:\"number\"},{start:2,name:\"num\",type:\"number\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"OneHot\",category:\"creation\",inputs:[{start:0,name:\"indices\",type:\"tensor\"},{start:1,name:\"depth\",type:\"number\"},{start:2,name:\"onValue\",type:\"number\",defaultValue:1},{start:3,name:\"offValue\",type:\"number\",defaultValue:0}],attrs:[{tfName:\"axis\",name:\"axis\",type:\"number\",notSupported:!0},{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Ones\",category:\"creation\",inputs:[{start:0,name:\"shape\",type:\"number[]\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\"}]},{tfOpName:\"OnesLike\",category:\"creation\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"dtype\",name:\"dtype\",type:\"dtype\"}]},{tfOpName:\"RandomUniform\",category:\"creation\",inputs:[{start:0,name:\"shape\",type:\"number[]\"}],attrs:[{tfName:\"minval\",name:\"minval\",type:\"number\",defaultValue:0},{tfName:\"maxval\",name:\"maxval\",type:\"number\",defaultValue:1},{tfName:\"dtype\",name:\"dtype\",type:\"dtype\"},{tfName:\"seed\",name:\"seed\",type:\"number\",defaultValue:0},{tfName:\"seed2\",name:\"seed2\",type:\"number\",defaultValue:0,notSupported:!0},{tfName:\"T\",name:\"T\",type:\"number\",notSupported:!0}]},{tfOpName:\"Range\",category:\"creation\",inputs:[{start:0,name:\"start\",type:\"number\"},{start:1,name:\"stop\",type:\"number\"},{start:2,name:\"step\",type:\"number\",defaultValue:0}],attrs:[{tfName:\"Tidx\",name:\"dtype\",type:\"dtype\"}]},{tfOpName:\"TruncatedNormal\",category:\"creation\",inputs:[{start:0,name:\"shape\",type:\"number[]\"}],attrs:[{tfName:\"means\",name:\"mean\",type:\"number\",defaultValue:0},{tfName:\"stddev\",name:\"stdDev\",type:\"number\",defaultValue:1},{tfName:\"seed\",name:\"seed\",type:\"number\"},{tfName:\"seed2\",name:\"seed2\",type:\"number\",defaultValue:0,notSupported:!0},{tfName:\"dtype\",name:\"dtype\",type:\"dtype\"},{tfName:\"T\",name:\"T\",type:\"number\",notSupported:!0}]},{tfOpName:\"Zeros\",category:\"creation\",inputs:[{start:0,name:\"shape\",type:\"number[]\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\"}]},{tfOpName:\"ZerosLike\",category:\"creation\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\"}]},{tfOpName:\"Multinomial\",category:\"creation\",inputs:[{start:0,name:\"logits\",type:\"tensor\"},{start:1,name:\"numSamples\",type:\"number\"}],attrs:[{tfName:\"seed\",name:\"seed\",type:\"number\"},{tfName:\"seed2\",name:\"seed2\",type:\"number\"},{tfName:\"T\",name:\"dtype\",type:\"dtype\"},{tfName:\"output_dtype\",name:\"output_dtype\",type:\"dtype\"}]}],creation=Object.freeze({json:json$4}),json$5=[{tfOpName:\"NonMaxSuppressionV2\",category:\"dynamic\",inputs:[{start:0,name:\"boxes\",type:\"tensor\"},{start:1,name:\"scores\",type:\"tensor\"},{start:2,name:\"maxOutputSize\",type:\"number\"},{start:3,name:\"iouThreshold\",type:\"number\"}]},{tfOpName:\"NonMaxSuppressionV3\",category:\"dynamic\",inputs:[{start:0,name:\"boxes\",type:\"tensor\"},{start:1,name:\"scores\",type:\"tensor\"},{start:2,name:\"maxOutputSize\",type:\"number\"},{start:3,name:\"iouThreshold\",type:\"number\"},{start:4,name:\"scoreThreshold\",type:\"number\"}]},{tfOpName:\"NonMaxSuppressionV5\",category:\"dynamic\",inputs:[{start:0,name:\"boxes\",type:\"tensor\"},{start:1,name:\"scores\",type:\"tensor\"},{start:2,name:\"maxOutputSize\",type:\"number\"},{start:3,name:\"iouThreshold\",type:\"number\"},{start:4,name:\"scoreThreshold\",type:\"number\"},{start:5,name:\"softNmsSigma\",type:\"number\"}]},{tfOpName:\"Where\",category:\"dynamic\",inputs:[{start:0,name:\"condition\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"ListDiff\",category:\"dynamic\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"y\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]}],dynamic=Object.freeze({json:json$5}),json$6=[{tfOpName:\"TopKV2\",category:\"evaluation\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"k\",type:\"number\"}],attrs:[{tfName:\"sorted\",name:\"sorted\",type:\"bool\"}]}],evaluation=Object.freeze({json:json$6}),json$7=[{tfOpName:\"PlaceholderWithDefault\",category:\"graph\",inputs:[{start:0,name:\"default\",type:\"tensor\"}],attrs:[{tfName:\"shape\",name:\"shape\",type:\"shape\"},{tfName:\"dtype\",name:\"dtype\",type:\"dtype\"}]},{tfOpName:\"Placeholder\",category:\"graph\",attrs:[{tfName:\"shape\",name:\"shape\",type:\"shape\"},{tfName:\"dtype\",name:\"dtype\",type:\"dtype\"}]},{tfOpName:\"Const\",category:\"graph\"},{tfOpName:\"Identity\",category:\"graph\",inputs:[{start:0,name:\"x\",type:\"tensor\"}]},{tfOpName:\"IdentityN\",category:\"graph\",inputs:[{start:0,end:0,name:\"x\",type:\"tensors\"}]},{tfOpName:\"Snapshot\",category:\"graph\",inputs:[{start:0,name:\"x\",type:\"tensor\"}]},{tfOpName:\"Rank\",category:\"graph\",inputs:[{start:0,name:\"x\",type:\"tensor\"}]},{tfOpName:\"Size\",category:\"graph\",inputs:[{start:0,name:\"x\",type:\"tensor\"}]},{tfOpName:\"Shape\",category:\"graph\",inputs:[{start:0,name:\"x\",type:\"tensor\"}]},{tfOpName:\"ShapeN\",category:\"graph\",inputs:[{start:0,end:0,name:\"x\",type:\"tensors\"}]},{tfOpName:\"Print\",category:\"graph\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"data\",type:\"tensors\"}],attrs:[{tfName:\"message\",name:\"message\",type:\"string\"},{tfName:\"first_n\",name:\"firstN\",type:\"number\",notSupported:!0},{tfName:\"summarize\",name:\"summarize\",type:\"number\",defaultValue:3}]},{tfOpName:\"NoOp\",category:\"graph\",inputs:[]},{tfOpName:\"StopGradient\",category:\"graph\",inputs:[{start:0,name:\"x\",type:\"tensor\"}]},{tfOpName:\"FakeQuantWithMinMaxVars\",category:\"graph\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"min\",name:\"min\",type:\"number\"},{tfName:\"max\",name:\"max\",type:\"number\"}]}],graph=Object.freeze({json:json$7}),json$8=[{tfOpName:\"ResizeBilinear\",category:\"image\",inputs:[{start:0,name:\"images\",type:\"tensor\"},{start:1,name:\"size\",type:\"number[]\"}],attrs:[{tfName:\"align_corners\",name:\"alignCorners\",type:\"bool\"},{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"ResizeNearestNeighbor\",category:\"image\",inputs:[{start:0,name:\"images\",type:\"tensor\"},{start:1,name:\"size\",type:\"number[]\"}],attrs:[{tfName:\"align_corners\",name:\"alignCorners\",type:\"bool\"},{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"CropAndResize\",category:\"image\",inputs:[{start:0,name:\"image\",type:\"tensor\"},{start:1,name:\"boxes\",type:\"tensor\"},{start:2,name:\"boxInd\",type:\"tensor\"},{start:3,name:\"cropSize\",type:\"number[]\"}],attrs:[{tfName:\"method\",name:\"method\",type:\"string\"},{tfName:\"extrapolation_value\",name:\"extrapolationValue\",type:\"number\"}]}],image$1=Object.freeze({json:json$8}),json$9=[{tfOpName:\"Equal\",category:\"logical\",inputs:[{start:0,name:\"a\",type:\"tensor\"},{start:1,name:\"b\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"NotEqual\",category:\"logical\",inputs:[{start:0,name:\"a\",type:\"tensor\"},{start:1,name:\"b\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Greater\",category:\"logical\",inputs:[{start:0,name:\"a\",type:\"tensor\"},{start:1,name:\"b\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"GreaterEqual\",category:\"logical\",inputs:[{start:0,name:\"a\",type:\"tensor\"},{start:1,name:\"b\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Less\",category:\"logical\",inputs:[{start:0,name:\"a\",type:\"tensor\"},{start:1,name:\"b\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"LessEqual\",category:\"logical\",inputs:[{start:0,name:\"a\",type:\"tensor\"},{start:1,name:\"b\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"LogicalAnd\",category:\"logical\",inputs:[{start:0,name:\"a\",type:\"tensor\"},{start:1,name:\"b\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"LogicalNot\",category:\"logical\",inputs:[{start:0,name:\"a\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"LogicalOr\",category:\"logical\",inputs:[{start:0,name:\"a\",type:\"tensor\"},{start:1,name:\"b\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Select\",category:\"logical\",inputs:[{start:0,name:\"condition\",type:\"tensor\"},{start:1,name:\"a\",type:\"tensor\"},{start:2,name:\"b\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"SelectV2\",category:\"logical\",inputs:[{start:0,name:\"condition\",type:\"tensor\"},{start:1,name:\"a\",type:\"tensor\"},{start:2,name:\"b\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]}],logical=Object.freeze({json:json$9}),json$10=[{tfOpName:\"_FusedMatMul\",category:\"matrices\",inputs:[{start:0,name:\"a\",type:\"tensor\"},{start:1,name:\"b\",type:\"tensor\"},{start:2,end:0,name:\"args\",type:\"tensors\"}],attrs:[{tfName:\"num_args\",name:\"numArgs\",type:\"number\"},{tfName:\"fused_ops\",name:\"fusedOps\",type:\"string[]\",defaultValue:[]},{tfName:\"epsilon\",name:\"epsilon\",type:\"number\",defaultValue:1e-4},{tfName:\"transpose_a\",name:\"transposeA\",type:\"bool\",defaultValue:!1},{tfName:\"transpose_b\",name:\"transposeB\",type:\"bool\",defaultValue:!1},{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"MatMul\",category:\"matrices\",inputs:[{start:0,name:\"a\",type:\"tensor\"},{start:1,name:\"b\",type:\"tensor\"}],attrs:[{tfName:\"transpose_a\",name:\"transposeA\",type:\"bool\",defaultValue:!1},{tfName:\"transpose_b\",name:\"transposeB\",type:\"bool\",defaultValue:!1},{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"BatchMatMul\",category:\"matrices\",inputs:[{start:0,name:\"a\",type:\"tensor\"},{start:1,name:\"b\",type:\"tensor\"}],attrs:[{tfName:\"adj_x\",name:\"transposeA\",type:\"bool\",defaultValue:!1},{tfName:\"adj_y\",name:\"transposeB\",type:\"bool\",defaultValue:!1},{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"BatchMatMulV2\",category:\"matrices\",inputs:[{start:0,name:\"a\",type:\"tensor\"},{start:1,name:\"b\",type:\"tensor\"}],attrs:[{tfName:\"adj_x\",name:\"transposeA\",type:\"bool\",defaultValue:!1},{tfName:\"adj_y\",name:\"transposeB\",type:\"bool\",defaultValue:!1},{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Transpose\",category:\"matrices\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"perm\",type:\"number[]\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]}],matrices=Object.freeze({json:json$10}),json$11=[{tfOpName:\"FusedBatchNorm\",category:\"normalization\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"scale\",type:\"tensor\"},{start:2,name:\"offset\",type:\"tensor\"},{start:3,name:\"mean\",type:\"tensor\"},{start:4,name:\"variance\",type:\"tensor\"}],attrs:[{tfName:\"epsilon\",name:\"epsilon\",type:\"number\",defaultValue:.001},{tfName:\"data_format\",name:\"dataFormat\",type:\"string\",notSupported:!0}]},{tfOpName:\"FusedBatchNormV2\",category:\"normalization\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"scale\",type:\"tensor\"},{start:2,name:\"offset\",type:\"tensor\"},{start:3,name:\"mean\",type:\"tensor\"},{start:4,name:\"variance\",type:\"tensor\"}],attrs:[{tfName:\"epsilon\",name:\"epsilon\",type:\"number\",defaultValue:.001},{tfName:\"data_format\",name:\"dataFormat\",type:\"string\",notSupported:!0}]},{tfOpName:\"FusedBatchNormV3\",category:\"normalization\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"scale\",type:\"tensor\"},{start:2,name:\"offset\",type:\"tensor\"},{start:3,name:\"mean\",type:\"tensor\"},{start:4,name:\"variance\",type:\"tensor\"}],attrs:[{tfName:\"epsilon\",name:\"epsilon\",type:\"number\",defaultValue:.001},{tfName:\"data_format\",name:\"dataFormat\",type:\"string\",notSupported:!0}]},{tfOpName:\"LRN\",category:\"normalization\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"depth_radius\",name:\"radius\",type:\"number\",defaultValue:5},{tfName:\"bias\",name:\"bias\",type:\"number\",defaultValue:1},{tfName:\"alpha\",name:\"alpha\",type:\"number\",defaultValue:1},{tfName:\"beta\",name:\"beta\",type:\"number\",defaultValue:.5}]},{tfOpName:\"Softmax\",category:\"normalization\",inputs:[{start:0,name:\"x\",type:\"tensor\"}]},{tfOpName:\"LogSoftmax\",category:\"normalization\",inputs:[{start:0,name:\"x\",type:\"tensor\"}]},{tfOpName:\"SparseToDense\",category:\"normalization\",inputs:[{start:0,name:\"sparseIndices\",type:\"tensor\"},{start:1,name:\"outputShape\",type:\"number[]\"},{start:2,name:\"sparseValues\",type:\"tensor\"},{start:3,name:\"defaultValue\",type:\"tensor\"}],attrs:[{tfName:\"validate_indices\",name:\"validateIndices\",type:\"bool\",defaultValue:!0,notSupported:!0}]}],normalization=Object.freeze({json:json$11}),json$12=[{tfOpName:\"Max\",category:\"reduction\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"axis\",type:\"number[]\"}],attrs:[{tfName:\"keep_dims\",name:\"keepDims\",type:\"bool\"}]},{tfOpName:\"Mean\",category:\"reduction\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"axis\",type:\"number[]\"}],attrs:[{tfName:\"keep_dims\",name:\"keepDims\",type:\"bool\"}]},{tfOpName:\"Min\",category:\"reduction\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"axis\",type:\"number[]\"}],attrs:[{tfName:\"keep_dims\",name:\"keepDims\",type:\"bool\"}]},{tfOpName:\"Sum\",category:\"reduction\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"axis\",type:\"number[]\"}],attrs:[{tfName:\"keep_dims\",name:\"keepDims\",type:\"bool\"}]},{tfOpName:\"All\",category:\"reduction\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"axis\",type:\"number[]\"}],attrs:[{tfName:\"keep_dims\",name:\"keepDims\",type:\"bool\"}]},{tfOpName:\"Any\",category:\"reduction\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"axis\",type:\"number[]\"}],attrs:[{tfName:\"keep_dims\",name:\"keepDims\",type:\"bool\"}]},{tfOpName:\"ArgMax\",category:\"reduction\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"axis\",type:\"number\"}]},{tfOpName:\"ArgMin\",category:\"reduction\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"axis\",type:\"number\"}]},{tfOpName:\"Prod\",category:\"reduction\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"axis\",type:\"number[]\"}],attrs:[{tfName:\"keep_dims\",name:\"keepDims\",type:\"bool\"}]}],reduction=Object.freeze({json:json$12}),json$13=[{tfOpName:\"ConcatV2\",category:\"slice_join\",inputs:[{start:0,end:-1,name:\"tensors\",type:\"tensors\"},{start:-1,name:\"axis\",type:\"number\"}],attrs:[{tfName:\"N\",name:\"n\",type:\"number\",defaultValue:2}]},{tfOpName:\"Concat\",category:\"slice_join\",inputs:[{start:1,end:0,name:\"tensors\",type:\"tensors\"},{start:0,name:\"axis\",type:\"number\"}],attrs:[{tfName:\"N\",name:\"n\",type:\"number\",defaultValue:2}]},{tfOpName:\"GatherV2\",category:\"slice_join\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"indices\",type:\"tensor\"},{start:2,name:\"axis\",type:\"number\",defaultValue:0}]},{tfOpName:\"Gather\",category:\"slice_join\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"indices\",type:\"tensor\"}],attrs:[{tfName:\"axis\",name:\"axis\",type:\"number\",defaultValue:0},{tfName:\"validate_indices\",name:\"validateIndices\",type:\"bool\",notSupported:!0}]},{tfOpName:\"Reverse\",category:\"slice_join\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"dims\",type:\"bool\",notSupported:!0}]},{tfOpName:\"ReverseV2\",category:\"slice_join\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"axis\",type:\"number[]\"}]},{tfOpName:\"Slice\",category:\"slice_join\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"begin\",type:\"number[]\"},{start:2,name:\"size\",type:\"number[]\"}]},{tfOpName:\"StridedSlice\",category:\"slice_join\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"begin\",type:\"number[]\"},{start:2,name:\"end\",type:\"number[]\"},{start:3,name:\"strides\",type:\"number[]\"}],attrs:[{tfName:\"begin_mask\",name:\"beginMask\",type:\"number\",defaultValue:0},{tfName:\"end_mask\",name:\"endMask\",type:\"number\",defaultValue:0},{tfName:\"new_axis_mask\",name:\"newAxisMask\",type:\"number\",defaultValue:0},{tfName:\"ellipsis_mask\",name:\"ellipsisMask\",type:\"number\",defaultValue:0},{tfName:\"shrink_axis_mask\",name:\"shrinkAxisMask\",type:\"number\",defaultValue:0}]},{tfOpName:\"Pack\",category:\"slice_join\",inputs:[{start:0,end:0,name:\"tensors\",type:\"tensors\"}],attrs:[{tfName:\"axis\",name:\"axis\",type:\"number\",defaultValue:0}]},{tfOpName:\"Unpack\",category:\"slice_join\",inputs:[{start:0,name:\"tensor\",type:\"tensor\"}],attrs:[{tfName:\"axis\",name:\"axis\",type:\"number\",defaultValue:0},{tfName:\"num\",name:\"num\",type:\"number\",defaultValue:0,notSupported:!0}]},{tfOpName:\"Tile\",category:\"slice_join\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"reps\",type:\"number[]\"}]},{tfOpName:\"Split\",category:\"slice_join\",inputs:[{start:0,name:\"axis\",type:\"number\",defaultValue:0},{start:1,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"num_split\",name:\"numOrSizeSplits\",type:\"number\",defaultValue:1}]},{tfOpName:\"SplitV\",category:\"slice_join\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"numOrSizeSplits\",type:\"number[]\"},{start:2,name:\"axis\",type:\"number\",defaultValue:0}]},{tfOpName:\"ScatterNd\",category:\"slice_join\",inputs:[{start:0,name:\"indices\",type:\"tensor\"},{start:1,name:\"values\",type:\"tensor\"},{start:2,name:\"shape\",type:\"number[]\"}]},{tfOpName:\"GatherNd\",category:\"slice_join\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"indices\",type:\"tensor\"}]},{tfOpName:\"SparseToDense\",category:\"slice_join\",inputs:[{start:0,name:\"sparseIndices\",type:\"tensor\"},{start:1,name:\"outputShape\",type:\"number[]\"},{start:2,name:\"sparseValues\",type:\"tensor\"},{start:3,name:\"defaultValue\",type:\"tensor\"}],attrs:[{tfName:\"validate_indices\",name:\"validateIndices\",type:\"bool\",defaultValue:!1,notSupported:!0}]}],sliceJoin=Object.freeze({json:json$13}),json$14=[{tfOpName:\"FFT\",category:\"spectral\",inputs:[{start:0,name:\"x\",type:\"tensor\"}]},{tfOpName:\"IFFT\",category:\"spectral\",inputs:[{start:0,name:\"x\",type:\"tensor\"}]},{tfOpName:\"RFFT\",category:\"spectral\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"fft_length\",type:\"number\",notSupported:!0}]},{tfOpName:\"IRFFT\",category:\"spectral\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"fft_length\",type:\"number\",notSupported:!0}]}],spectral=Object.freeze({json:json$14}),json$15=[{tfOpName:\"Cast\",category:\"transformation\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"SrcT\",name:\"sdtype\",type:\"dtype\",notSupported:!0},{tfName:\"DstT\",name:\"dtype\",type:\"dtype\"}]},{tfOpName:\"ExpandDims\",category:\"transformation\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"axis\",type:\"number\"}]},{tfOpName:\"Pad\",category:\"transformation\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"padding\",type:\"number[]\"}],attrs:[{tfName:\"constant_value\",name:\"constantValue\",type:\"number\",defaultValue:0}]},{tfOpName:\"PadV2\",category:\"transformation\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"padding\",type:\"number[]\"},{start:2,name:\"constantValue\",type:\"number\",defaultValue:0}]},{tfOpName:\"Reshape\",category:\"transformation\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"shape\",type:\"number[]\"}]},{tfOpName:\"Squeeze\",category:\"transformation\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"axis\",tfDeprecatedName:\"squeeze_dims\",name:\"axis\",type:\"number[]\"}]},{tfOpName:\"SpaceToBatchND\",category:\"transformation\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"blockShape\",type:\"number[]\"},{start:2,name:\"paddings\",type:\"number[]\"}]},{tfOpName:\"BatchToSpaceND\",category:\"transformation\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"blockShape\",type:\"number[]\"},{start:2,name:\"crops\",type:\"number[]\"}]},{tfOpName:\"DepthToSpace\",category:\"transformation\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"block_size\",name:\"blockSize\",type:\"number\"},{tfName:\"data_format\",name:\"dataFormat\",type:\"string\"}]}],transformation=Object.freeze({json:json$15}),OperationMapper=function(){function e(){var e=[arithmetic,basicMath,control,convolution,creation,dynamic,evaluation,logical,image$1,graph,matrices,normalization,reduction,sliceJoin,spectral,transformation],t=[].concat.apply([],e.map(function(e){return e.json}));this.opMappers=t.reduce(function(e,t){return e[t.tfOpName]=t,e},{})}return Object.defineProperty(e,\"Instance\",{get:function(){return this._instance||(this._instance=new this)},enumerable:!0,configurable:!0}),e.prototype.transformGraph=function(e,t){var a=this;void 0===t&&(t={});var r=[],n=[],s=e.node.reduce(function(e,t){return e[t.name]=a.mapNode(t),t.op.startsWith(\"Placeholder\")&&r.push(e[t.name]),\"Const\"===t.op&&n.push(e[t.name]),e},{}),o=[],p=[],u={},i={};null!=t&&(u=this.mapSignatureEntries(t.inputs),i=this.mapSignatureEntries(t.outputs));var m=Object.keys(s);return m.forEach(function(e){var t=s[e];t.inputNames.forEach(function(e){var a=getNodeNameAndIndex(e)[0];t.inputs.push(s[a]),s[a].children.push(t)})}),0===Object.keys(i).length?m.forEach(function(e){var t=s[e];0===t.children.length&&p.push(t)}):Object.keys(i).forEach(function(e){var t=getNodeNameAndIndex(e)[0],a=s[t];null!=a&&(a.signatureKey=i[e],p.push(a))}),Object.keys(u).length>0?Object.keys(u).forEach(function(e){var t=getNodeNameAndIndex(e)[0],a=s[t];a&&(a.signatureKey=u[e],o.push(a))}):o=r,{nodes:s,inputs:o,outputs:p,weights:n,placeholders:r,signature:t}},e.prototype.mapSignatureEntries=function(e){return Object.keys(e||{}).reduce(function(t,a){return t[e[a].name]=a,t},{})},e.prototype.mapNode=function(e){var t=getRegisteredOp(e.op)||this.opMappers[e.op]||{};null==e.attr&&(e.attr={});var a={name:e.name,op:e.op,category:t.category,inputNames:(e.input||[]).map(function(e){return e.startsWith(\"^\")?e.substr(1):e}),inputs:[],children:[],inputParams:{},attrParams:{},rawAttrs:e.attr};return null!=t.inputs&&(a.inputParams=t.inputs.reduce(function(e,t){return e[t.name]={type:t.type,inputIndexStart:t.start,inputIndexEnd:t.end},e},{})),null!=t.attrs&&(a.attrParams=t.attrs.reduce(function(t,a){var r=a.type,n=void 0;switch(a.type){case\"string\":void 0===(n=getStringParam(e.attr,a.tfName,a.defaultValue))&&a.tfDeprecatedName&&(n=getStringParam(e.attr,a.tfDeprecatedName,a.defaultValue));break;case\"string[]\":void 0===(n=getStringArrayParam(e.attr,a.tfName,a.defaultValue))&&a.tfDeprecatedName&&(n=getStringArrayParam(e.attr,a.tfDeprecatedName,a.defaultValue));break;case\"number\":void 0===(n=getNumberParam(e.attr,a.tfName,a.defaultValue||0))&&a.tfDeprecatedName&&(n=getNumberParam(e.attr,a.tfDeprecatedName,a.defaultValue));break;case\"number[]\":void 0===(n=getNumericArrayParam(e.attr,a.tfName,a.defaultValue))&&a.tfDeprecatedName&&(n=getNumericArrayParam(e.attr,a.tfDeprecatedName,a.defaultValue));break;case\"bool\":void 0===(n=getBoolParam(e.attr,a.tfName,a.defaultValue))&&a.tfDeprecatedName&&(n=getBoolParam(e.attr,a.tfDeprecatedName,a.defaultValue));break;case\"bool[]\":void 0===(n=getBoolArrayParam(e.attr,a.tfName,a.defaultValue))&&a.tfDeprecatedName&&(n=getBoolArrayParam(e.attr,a.tfDeprecatedName,a.defaultValue));break;case\"shape\":void 0===(n=getTensorShapeParam(e.attr,a.tfName,a.defaultValue))&&a.tfDeprecatedName&&(n=getTensorShapeParam(e.attr,a.tfDeprecatedName,a.defaultValue));break;case\"shape[]\":void 0===(n=getTensorShapeArrayParam(e.attr,a.tfName,a.defaultValue))&&a.tfDeprecatedName&&(n=getTensorShapeArrayParam(e.attr,a.tfDeprecatedName,a.defaultValue));break;case\"dtype\":void 0===(n=getDtypeParam(e.attr,a.tfName,a.defaultValue))&&a.tfDeprecatedName&&(n=getDtypeParam(e.attr,a.tfDeprecatedName,a.defaultValue));break;case\"dtype[]\":void 0===(n=getDtypeArrayParam(e.attr,a.tfName,a.defaultValue))&&a.tfDeprecatedName&&(n=getDtypeArrayParam(e.attr,a.tfDeprecatedName,a.defaultValue));break;case\"tensor\":case\"tensors\":break;default:throw new Error(\"Unsupported param type: \"+a.type+\" for op: \"+e.op)}return t[a.name]={value:n,type:r},t},{})),a},e}();function decodeBase64(e){var t=env().global;if(void 0!==t.atob)return t.atob(e);if(\"undefined\"!=typeof Buffer)return new Buffer(e,\"base64\").toString();throw new Error(\"Unable to decode base64 in this environment. Missing built-in atob() or Buffer()\")}function parseStringParam(e,t){var a=Array.isArray(e)?String.fromCharCode.apply(null,e):decodeBase64(e);return t?a:a.toLowerCase()}function getStringParam(e,t,a,r){void 0===r&&(r=!1);var n=e[t];return null!=n?parseStringParam(n.s,r):a}function getBoolParam(e,t,a){var r=e[t];return r?r.b:a}function getNumberParam(e,t,a){var r=e[t]||{},n=null!=r.i?r.i:null!=r.f?r.f:a;return\"number\"==typeof n?n:parseInt(n,10)}function parseDtypeParam(e){switch(\"string\"==typeof e&&(e=DataType[e]),e){case DataType.DT_FLOAT:return\"float32\";case DataType.DT_INT32:case DataType.DT_INT64:case DataType.DT_INT8:case DataType.DT_UINT8:return\"int32\";case DataType.DT_BOOL:return\"bool\";case DataType.DT_DOUBLE:return\"float32\";case DataType.DT_STRING:return\"string\";default:return null}}function getDtypeParam(e,t,a){var r=e[t];return r&&r.type?parseDtypeParam(r.type):a}function getDtypeArrayParam(e,t,a){var r=e[t];return r&&r.list&&r.list.type?r.list.type.map(function(e){return parseDtypeParam(e)}):a}function parseTensorShapeParam(e){if(!e.unknownRank)return null!=e.dim?e.dim.map(function(e){return\"number\"==typeof e.size?e.size:parseInt(e.size,10)}):[]}function getTensorShapeParam(e,t,a){var r=e[t];return r&&r.shape?parseTensorShapeParam(r.shape):a}function getNumericArrayParam(e,t,a){var r=e[t];return r?((r.list.f&&r.list.f.length?r.list.f:r.list.i)||[]).map(function(e){return\"number\"==typeof e?e:parseInt(e,10)}):a}function getStringArrayParam(e,t,a,r){void 0===r&&(r=!1);var n=e[t];return n&&n.list&&n.list.s?n.list.s.map(function(e){return parseStringParam(e,r)}):a}function getTensorShapeArrayParam(e,t,a){var r=e[t];return r&&r.list&&r.list.shape?r.list.shape.map(function(e){return parseTensorShapeParam(e)}):a}function getBoolArrayParam(e,t,a){var r=e[t];return r&&r.list&&r.list.b?r.list.b:a}var NodeValueImpl=function(){function e(e,t,a){var r=this;this.node=e,this.tensorMap=t,this.context=a,this.inputs=[],this.attrs={},this.inputs=e.inputNames.map(function(e){return r.getInput(e)}),null!=e.rawAttrs&&(this.attrs=Object.keys(e.rawAttrs).reduce(function(e,t){return e[t]=r.getAttr(t),e},{}))}return e.prototype.getInput=function(e){return getTensor(e,this.tensorMap,this.context)},e.prototype.getAttr=function(e,t){var a=this.node.rawAttrs[e];if(null!=a.tensor)return getTensor(e,this.tensorMap,this.context);if(null!=a.i||null!=a.f)return getNumberParam(this.node.rawAttrs,e,t);if(null!=a.s)return getStringParam(this.node.rawAttrs,e,t);if(null!=a.b)return getBoolParam(this.node.rawAttrs,e,t);if(null!=a.shape)return getTensorShapeParam(this.node.rawAttrs,e,t);if(null!=a.type)return getDtypeParam(this.node.rawAttrs,e,t);if(null!=a.list){if(null!=a.list.i||null!=a.list.f)return getNumericArrayParam(this.node.rawAttrs,e,t);if(null!=a.list.s)return getStringArrayParam(this.node.rawAttrs,e,t);if(null!=a.list.shape)return getTensorShapeArrayParam(this.node.rawAttrs,e,t);if(null!=a.list.b)return getBoolArrayParam(this.node.rawAttrs,e,t);if(null!=a.list.type)return getDtypeArrayParam(this.node.rawAttrs,e,t)}return t},e}(),executeOp=function(e,t,a){switch(e.op){case\"BiasAdd\":case\"AddV2\":case\"Add\":return[add(getParamValue(\"a\",e,t,a),getParamValue(\"b\",e,t,a))];case\"AddN\":return[addN(getParamValue(\"tensors\",e,t,a))];case\"FloorMod\":case\"Mod\":return[mod(getParamValue(\"a\",e,t,a),getParamValue(\"b\",e,t,a))];case\"Mul\":return[mul(getParamValue(\"a\",e,t,a),getParamValue(\"b\",e,t,a))];case\"RealDiv\":case\"Div\":return[div(getParamValue(\"a\",e,t,a),getParamValue(\"b\",e,t,a))];case\"DivNoNan\":return[divNoNan(getParamValue(\"a\",e,t,a),getParamValue(\"b\",e,t,a))];case\"FloorDiv\":return[floorDiv(getParamValue(\"a\",e,t,a),getParamValue(\"b\",e,t,a))];case\"Sub\":return[sub(getParamValue(\"a\",e,t,a),getParamValue(\"b\",e,t,a))];case\"Minimum\":return[minimum(getParamValue(\"a\",e,t,a),getParamValue(\"b\",e,t,a))];case\"Maximum\":return[maximum(getParamValue(\"a\",e,t,a),getParamValue(\"b\",e,t,a))];case\"Pow\":return[pow(getParamValue(\"a\",e,t,a),getParamValue(\"b\",e,t,a))];case\"SquaredDifference\":return[squaredDifference(getParamValue(\"a\",e,t,a),getParamValue(\"b\",e,t,a))];default:throw TypeError(\"Node type \"+e.op+\" is not implemented\")}},executeOp$1=function(e,t,a){switch(e.op){case\"Abs\":case\"ComplexAbs\":return[abs(getParamValue(\"x\",e,t,a))];case\"Acos\":return[acos(getParamValue(\"x\",e,t,a))];case\"Acosh\":return[acosh(getParamValue(\"x\",e,t,a))];case\"Asin\":return[asin(getParamValue(\"x\",e,t,a))];case\"Asinh\":return[asinh(getParamValue(\"x\",e,t,a))];case\"Atan\":return[atan(getParamValue(\"x\",e,t,a))];case\"Atan2\":return[atan2(getParamValue(\"x\",e,t,a),getParamValue(\"y\",e,t,a))];case\"Atanh\":return[atanh(getParamValue(\"x\",e,t,a))];case\"Ceil\":return[ceil(getParamValue(\"x\",e,t,a))];case\"Complex\":return[complex(getParamValue(\"real\",e,t,a),getParamValue(\"imag\",e,t,a))];case\"Cos\":return[cos(getParamValue(\"x\",e,t,a))];case\"Cosh\":return[cosh(getParamValue(\"x\",e,t,a))];case\"Elu\":return[elu(getParamValue(\"x\",e,t,a))];case\"Erf\":return[erf(getParamValue(\"x\",e,t,a))];case\"Exp\":return[exp(getParamValue(\"x\",e,t,a))];case\"Expm1\":return[expm1(getParamValue(\"x\",e,t,a))];case\"Floor\":return[floor(getParamValue(\"x\",e,t,a))];case\"Log\":return[log(getParamValue(\"x\",e,t,a))];case\"Log1p\":return[log1p(getParamValue(\"x\",e,t,a))];case\"Imag\":return[imag(getParamValue(\"x\",e,t,a))];case\"Neg\":return[neg(getParamValue(\"x\",e,t,a))];case\"Reciprocal\":return[reciprocal(getParamValue(\"x\",e,t,a))];case\"Real\":return[real(getParamValue(\"x\",e,t,a))];case\"Relu\":return[relu(getParamValue(\"x\",e,t,a))];case\"Round\":return[round(getParamValue(\"x\",e,t,a))];case\"Selu\":return[selu(getParamValue(\"x\",e,t,a))];case\"Sigmoid\":return[sigmoid(getParamValue(\"x\",e,t,a))];case\"Sin\":return[sin(getParamValue(\"x\",e,t,a))];case\"Sign\":return[sign(getParamValue(\"x\",e,t,a))];case\"Sinh\":return[sinh(getParamValue(\"x\",e,t,a))];case\"Softplus\":return[softplus(getParamValue(\"x\",e,t,a))];case\"Sqrt\":return[sqrt(getParamValue(\"x\",e,t,a))];case\"Square\":return[square(getParamValue(\"x\",e,t,a))];case\"Tanh\":return[tanh(getParamValue(\"x\",e,t,a))];case\"Tan\":return[tan(getParamValue(\"x\",e,t,a))];case\"Relu6\":case\"ClipByValue\":return[clipByValue(getParamValue(\"x\",e,t,a),getParamValue(\"clipValueMin\",e,t,a),getParamValue(\"clipValueMax\",e,t,a))];case\"Rsqrt\":return[rsqrt(getTensor(e.inputNames[0],t,a))];case\"Prod\":return[prod(getParamValue(\"x\",e,t,a),getParamValue(\"axes\",e,t,a))];case\"LeakyRelu\":return[leakyRelu(getParamValue(\"x\",e,t,a),getParamValue(\"alpha\",e,t,a))];case\"Prelu\":return[prelu(getParamValue(\"x\",e,t,a),getParamValue(\"alpha\",e,t,a))];default:throw TypeError(\"Node type \"+e.op+\" is not implemented\")}},TensorArray=function(){function e(t,a,r,n,s,o,p){this.name=t,this.dtype=a,this.maxSize=r,this.elementShape=n,this.identicalElementShapes=s,this.dynamicSize=o,this.clearAfterRead=p,this.tensors=[],this.closed_=!1,this.id=e.nextId++}return Object.defineProperty(e.prototype,\"closed\",{get:function(){return this.closed_},enumerable:!0,configurable:!0}),e.prototype.clearAndClose=function(){this.tensors.forEach(function(e){return e.tensor.dispose()}),this.tensors=[],this.closed_=!0},e.prototype.size=function(){return this.tensors.length},e.prototype.read=function(e){if(this.closed_)throw new Error(\"TensorArray \"+this.name+\" has already been closed.\");if(e<0||e>=this.tensors.length)throw new Error(\"Tried to read from index \"+e+\", but array size is: \"+this.tensors.length);var t=this.tensors[e];if(t.cleared)throw new Error(\"TensorArray \"+this.name+\": Could not read index \"+e+\" twice because it was cleared after a previous read (perhaps try setting clear_after_read = false?).\");return this.clearAfterRead&&(t.cleared=!0),t.read=!0,t.tensor},e.prototype.readMany=function(e){var t=this;return e.map(function(e){return t.read(e)})},e.prototype.write=function(e,t){if(this.closed_)throw new Error(\"TensorArray \"+this.name+\" has already been closed.\");if(e<0||!this.dynamicSize&&e>=this.maxSize)throw new Error(\"Tried to write to index \"+e+\", but array is not resizeable and size is: \"+this.maxSize);var a=this.tensors[e]||{};if(t.dtype!==this.dtype)throw new Error(\"TensorArray \"+this.name+\": Could not write to TensorArray index \"+e+\",\\n          because the value dtype is \"+t.dtype+\", but TensorArray dtype is \"+this.dtype+\".\");if(0!==this.size()||null!=this.elementShape&&0!==this.elementShape.length||(this.elementShape=t.shape),this.assertShapesMatchAllowUndefinedSize(this.elementShape,t.shape,\"TensorArray \"+this.name+\": Could not write to TensorArray index \"+e+\".\"),a&&a.read)throw new Error(\"TensorArray \"+this.name+\": Could not write to TensorArray index \"+e+\", because it has already been read.\");if(a&&a.written)throw new Error(\"TensorArray \"+this.name+\": Could not write to TensorArray index \"+e+\", because it has already been written.\");a.tensor=t,a.written=!0,this.tensors[e]=a},e.prototype.writeMany=function(e,t){var a=this;if(e.length!==t.length)throw new Error(\"TensorArray \"+this.name+\": could not write multiple tensors,because the index size: \"+e.length+\" is not the same as tensors size: \"+t.length+\".\");e.forEach(function(e,r){return a.write(e,t[r])})},e.prototype.gather=function(e,t){if(t&&t!==this.dtype)throw new Error(\"TensorArray dtype is \"+this.dtype+\" but gather requested dtype \"+t);if(!e){e=[];for(var a=0;a<this.size();a++)e.push(a)}if(0===e.length)return tensor([],[0].concat(this.elementShape));var r=this.readMany(e);return this.assertShapesMatchAllowUndefinedSize(this.elementShape,r[0].shape,\"TensorArray shape mismatch: \"),stack(r,0)},e.prototype.concat=function(e){if(e&&e!==this.dtype)throw new Error(\"TensorArray dtype is \"+this.dtype+\" but concat requested dtype \"+e);if(0===this.size())return tensor([],[0].concat(this.elementShape));for(var t=[],a=0;a<this.size();a++)t.push(a);var r=this.readMany(t);return this.assertShapesMatchAllowUndefinedSize(this.elementShape,r[0].shape,\"TensorArray shape mismatch: tensor array shape (\"+this.elementShape+\") vs first tensor shape (\"+r[0].shape+\")\"),concat(r,0)},e.prototype.scatter=function(e,t){if(t.dtype!==this.dtype)throw new Error(\"TensorArray dtype is \"+this.dtype+\" but tensor has dtype \"+t.dtype);if(e.length!==t.shape[0])throw new Error(\"Expected len(indices) == tensor.shape[0], but saw: \"+e.length+\" vs. \"+t.shape[0]);var a=Math.max.apply(Math,e);if(!this.dynamicSize&&a>=this.maxSize)throw new Error(\"Max index must be < array size (\"+a+\"  vs. \"+this.maxSize+\")\");this.writeMany(e,unstack(t,0))},e.prototype.split=function(e,t){var a=this;if(t.dtype!==this.dtype)throw new Error(\"TensorArray dtype is \"+this.dtype+\" but tensor has dtype \"+t.dtype);var r=0,n=e.map(function(e){return r+=e});if(r!==t.shape[0])throw new Error(\"Expected sum of lengths to be equal to\\n          tensor.shape[0], but sum of lengths is\\n        \"+r+\", and tensor's shape is: \"+t.shape);if(!this.dynamicSize&&e.length!==this.maxSize)throw new Error(\"TensorArray's size is not equal to the size of lengths (\"+this.maxSize+\" vs. \"+e.length+\"), and the TensorArray is not marked as dynamically resizeable\");var s=0===r?0:t.size/r,o=[];tidy(function(){t=t.reshape([1,r,s]);for(var p=0;p<e.length;++p){var u=[0,0===p?0:n[p-1],0],i=[1,e[p],s];o[p]=slice(t,u,i).reshape(a.elementShape)}return o});for(var p=[],u=0;u<e.length;u++)p[u]=u;this.writeMany(p,o)},e.prototype.assertShapesMatchAllowUndefinedSize=function(e,t,a){void 0===a&&(a=\"\"),util.assert(this.shapesEqualAllowUndefinedSize(e,t),function(){return a+\" Shapes \"+e+\" and \"+t+\" must match\"})},e.prototype.shapesEqualAllowUndefinedSize=function(e,t){if(e.length!==t.length)return!1;for(var a=0;a<e.length;a++)if(-1!==e[a]&&-1!==t[a]&&e[a]!==t[a])return!1;return!0},e.nextId=0,e}(),_this=void 0,executeOp$2=function(e,t,a){return __awaiter(_this,void 0,void 0,function(){var r,n,s,o,p,u,i,m,l,c,d,y,f,g,h,N,x,V,b,P,T,v,O,S,_,w,A,D,E,I,M,C,k,z,F;return __generator(this,function(j){switch(j.label){case 0:switch(e.op){case\"LoopCond\":return[3,1];case\"Switch\":return[3,2];case\"Merge\":return[3,4];case\"Enter\":return[3,5];case\"Exit\":return[3,6];case\"NextIteration\":return[3,7];case\"TensorArrayV3\":return[3,8];case\"TensorArrayWriteV3\":return[3,9];case\"TensorArrayReadV3\":return[3,10];case\"TensorArrayGatherV3\":return[3,11];case\"TensorArrayScatterV3\":return[3,12];case\"TensorArrayConcatV3\":return[3,13];case\"TensorArraySplitV3\":return[3,14];case\"TensorArraySizeV3\":return[3,15];case\"TensorArrayCloseV3\":return[3,16]}return[3,17];case 1:return[2,[getParamValue(\"pred\",e,t,a).clone()]];case 2:return r=getParamValue(\"pred\",e,t,a),n=getParamValue(\"data\",e,t,a),[4,r.data()];case 3:return[2,j.sent()[0]?[void 0,n.clone()]:[n.clone(),void 0]];case 4:return[2,(s=e.inputNames.find(function(e){return void 0!==getTensor(e,t,a)}))?[getTensor(s,t,a).clone()]:void 0];case 5:return o=getParamValue(\"frameName\",e,t,a),p=getParamValue(\"tensor\",e,t,a),a.enterFrame(o),[2,[p.clone()]];case 6:return u=getParamValue(\"tensor\",e,t,a),a.exitFrame(),[2,[u.clone()]];case 7:return i=getParamValue(\"tensor\",e,t,a),a.nextIteration(),[2,[i.clone()]];case 8:return m=getParamValue(\"size\",e,t,a),l=getParamValue(\"dtype\",e,t,a),c=getParamValue(\"elementShape\",e,t,a),d=getParamValue(\"dynamicSize\",e,t,a),y=getParamValue(\"clearAfterRead\",e,t,a),f=getParamValue(\"identicalElementShapes\",e,t,a),g=getParamValue(\"name\",e,t,a),h=new TensorArray(g,l,m,c,f,d,y),a.addTensorArray(h),[2,[scalar(h.id),scalar(1)]];case 9:return N=getParamValue(\"tensorArrayId\",e,t,a),x=getParamValue(\"index\",e,t,a),V=getParamValue(\"tensor\",e,t,a),a.getTensorArray(N).write(x,V),[2,[scalar(1)]];case 10:return b=getParamValue(\"tensorArrayId\",e,t,a),P=getParamValue(\"index\",e,t,a),[2,[a.getTensorArray(b).read(P)]];case 11:return T=getParamValue(\"tensorArrayId\",e,t,a),v=getParamValue(\"indices\",e,t,a),O=getParamValue(\"dtype\",e,t,a),[2,[a.getTensorArray(T).gather(v,O)]];case 12:return S=getParamValue(\"tensorArrayId\",e,t,a),_=getParamValue(\"indices\",e,t,a),w=getParamValue(\"tensor\",e,t,a),a.getTensorArray(S).scatter(_,w),[2,[scalar(1)]];case 13:return A=getParamValue(\"tensorArrayId\",e,t,a),D=a.getTensorArray(A),E=getParamValue(\"dtype\",e,t,a),[2,[D.concat(E)]];case 14:return I=getParamValue(\"tensorArrayId\",e,t,a),M=getParamValue(\"tensor\",e,t,a),C=getParamValue(\"lengths\",e,t,a),a.getTensorArray(I).split(C,M),[2,[scalar(1)]];case 15:return k=getParamValue(\"tensorArrayId\",e,t,a),z=a.getTensorArray(k),[2,[scalar(z.size(),\"int32\")]];case 16:return F=getParamValue(\"tensorArrayId\",e,t,a),a.getTensorArray(F).clearAndClose(),[2,[scalar(0)]];case 17:throw TypeError(\"Node type \"+e.op+\" is not implemented\")}})})},executeOp$3=function(e,t,a){switch(e.op){case\"Conv1D\":var r=getParamValue(\"stride\",e,t,a),n=getParamValue(\"pad\",e,t,a),s=getParamValue(\"dataFormat\",e,t,a).toUpperCase(),o=getParamValue(\"dilation\",e,t,a);return[conv1d(getParamValue(\"x\",e,t,a),getParamValue(\"filter\",e,t,a),r,n,s,o)];case\"Conv2D\":r=getParamValue(\"strides\",e,t,a),n=getParamValue(\"pad\",e,t,a),s=getParamValue(\"dataFormat\",e,t,a).toUpperCase();var p=getParamValue(\"dilations\",e,t,a);return[conv2d(getParamValue(\"x\",e,t,a),getParamValue(\"filter\",e,t,a),[r[1],r[2]],n,s,[p[1],p[2]])];case\"_FusedConv2D\":case\"FusedDepthwiseConv2dNative\":var u=getParamValue(\"fusedOps\",e,t,a),i=u[0],m=u[1],l=\"biasadd\"===i,c=\"prelu\"===m,d=\"fusedbatchnorm\"===i,y=getParamValue(\"numArgs\",e,t,a);if(l){if(c&&2!==y)throw new Error(\"FusedConv2d and DepthwiseConv2d with BiasAdd and Prelu must have two extra arguments: bias and alpha.\");if(!c&&1!==y)throw new Error(\"FusedConv2d and DepthwiseConv2d with BiasAdd must have one extra argument: bias.\")}if(d)throw new Error(\"FusedConv2d and DepthwiseConv2d with FusedBatchNorm is not supported.\");r=getParamValue(\"strides\",e,t,a),n=getParamValue(\"pad\",e,t,a),s=getParamValue(\"dataFormat\",e,t,a).toUpperCase(),p=getParamValue(\"dilations\",e,t,a);var f=getParamValue(\"args\",e,t,a),g=f[0],h=f[1];return[(\"_FusedConv2D\"===e.op?fused.conv2d:fused.depthwiseConv2d)({x:getParamValue(\"x\",e,t,a),filter:getParamValue(\"filter\",e,t,a),strides:[r[1],r[2]],pad:n,dataFormat:s,dilations:[p[1],p[2]],bias:g,activation:m,preluActivationWeights:h})];case\"Conv2DBackpropInput\":case\"Conv2dTranspose\":var N=getParamValue(\"outputShape\",e,t,a);r=getParamValue(\"strides\",e,t,a),n=getParamValue(\"pad\",e,t,a);return[conv2dTranspose(getParamValue(\"x\",e,t,a),getParamValue(\"filter\",e,t,a),N,[r[1],r[2]],n)];case\"DepthwiseConv2dNative\":case\"DepthwiseConv2d\":r=getParamValue(\"strides\",e,t,a),n=getParamValue(\"pad\",e,t,a),p=getParamValue(\"dilations\",e,t,a),s=getParamValue(\"dataFormat\",e,t,a).toUpperCase();return[depthwiseConv2d(getParamValue(\"input\",e,t,a),getParamValue(\"filter\",e,t,a),[r[1],r[2]],n,s,[p[1],p[2]])];case\"Conv3D\":r=getParamValue(\"strides\",e,t,a),n=getParamValue(\"pad\",e,t,a),s=getParamValue(\"dataFormat\",e,t,a).toUpperCase(),p=getParamValue(\"dilations\",e,t,a);return[conv3d(getParamValue(\"x\",e,t,a),getParamValue(\"filter\",e,t,a),[r[1],r[2],r[3]],n,s,[p[1],p[2],p[3]])];case\"AvgPool\":r=getParamValue(\"strides\",e,t,a),n=getParamValue(\"pad\",e,t,a);var x=getParamValue(\"kernelSize\",e,t,a);return[avgPool(getParamValue(\"x\",e,t,a),[x[1],x[2]],[r[1],r[2]],n)];case\"MaxPool\":r=getParamValue(\"strides\",e,t,a),n=getParamValue(\"pad\",e,t,a),x=getParamValue(\"kernelSize\",e,t,a);return[maxPool(getParamValue(\"x\",e,t,a),[x[1],x[2]],[r[1],r[2]],n)];case\"MaxPoolWithArgmax\":r=getParamValue(\"strides\",e,t,a),n=getParamValue(\"pad\",e,t,a),x=getParamValue(\"kernelSize\",e,t,a);var V=getParamValue(\"includeBatchInIndex\",e,t,a),b=maxPoolWithArgmax(getParamValue(\"x\",e,t,a),[x[1],x[2]],[r[1],r[2]],n,V);return[b.result,b.indexes];case\"AvgPool3D\":r=getParamValue(\"strides\",e,t,a),n=getParamValue(\"pad\",e,t,a),x=getParamValue(\"kernelSize\",e,t,a);return[avgPool3d(getParamValue(\"x\",e,t,a),[x[1],x[2],x[3]],[r[1],r[2],r[3]],n)];case\"MaxPool3D\":r=getParamValue(\"strides\",e,t,a),n=getParamValue(\"pad\",e,t,a),x=getParamValue(\"kernelSize\",e,t,a);return[maxPool3d(getParamValue(\"x\",e,t,a),[x[1],x[2],x[3]],[r[1],r[2],r[3]],n)];default:throw TypeError(\"Node type \"+e.op+\" is not implemented\")}},executeOp$4=function(e,t,a){switch(e.op){case\"Fill\":var r=getParamValue(\"shape\",e,t,a),n=getParamValue(\"dtype\",e,t,a),s=getParamValue(\"value\",e,t,a);return[fill(r,s,n)];case\"LinSpace\":var o=getParamValue(\"start\",e,t,a),p=getParamValue(\"stop\",e,t,a),u=getParamValue(\"num\",e,t,a);return[linspace(o,p,u)];case\"Multinomial\":var i=getParamValue(\"logits\",e,t,a),m=getParamValue(\"numSamples\",e,t,a),l=getParamValue(\"seed\",e,t,a);return[multinomial(i,m,l)];case\"OneHot\":var c=getParamValue(\"indices\",e,t,a),d=getParamValue(\"depth\",e,t,a),y=getParamValue(\"onValue\",e,t,a),f=getParamValue(\"offValue\",e,t,a);return[oneHot(c,d,y,f)];case\"Ones\":return[ones(getParamValue(\"shape\",e,t,a),getParamValue(\"dtype\",e,t,a))];case\"OnesLike\":return[onesLike(getParamValue(\"x\",e,t,a))];case\"RandomUniform\":return[randomUniform(getParamValue(\"shape\",e,t,a),getParamValue(\"minval\",e,t,a),getParamValue(\"maxval\",e,t,a),getParamValue(\"dtype\",e,t,a))];case\"Range\":o=getParamValue(\"start\",e,t,a);var g=getParamValue(\"stop\",e,t,a),h=getParamValue(\"step\",e,t,a);return[range(o,g,h,getParamValue(\"dtype\",e,t,a))];case\"TruncatedNormal\":r=getParamValue(\"shape\",e,t,a);var N=getParamValue(\"mean\",e,t,a),x=getParamValue(\"stdDev\",e,t,a);l=getParamValue(\"seed\",e,t,a);return[truncatedNormal(r,N,x,getParamValue(\"dtype\",e,t,a),l)];case\"Zeros\":return[zeros(getParamValue(\"shape\",e,t,a),getParamValue(\"dtype\",e,t,a))];case\"ZerosLike\":return[zerosLike(getParamValue(\"x\",e,t,a))];default:throw TypeError(\"Node type \"+e.op+\" is not implemented\")}},_this$1=void 0,executeOp$5=function(e,t,a){return __awaiter(_this$1,void 0,void 0,function(){var r,n,s,o,p,u,i,m;return __generator(this,function(l){switch(l.label){case 0:switch(e.op){case\"NonMaxSuppressionV5\":case\"NonMaxSuppressionV3\":case\"NonMaxSuppressionV2\":return[3,1];case\"Where\":return[3,5];case\"ListDiff\":return[3,7]}return[3,8];case 1:return r=getParamValue(\"boxes\",e,t,a),n=getParamValue(\"scores\",e,t,a),s=getParamValue(\"maxOutputSize\",e,t,a),o=getParamValue(\"iouThreshold\",e,t,a),p=getParamValue(\"scoreThreshold\",e,t,a),\"NonMaxSuppressionV5\"!==e.op?[3,3]:(u=getParamValue(\"softNmsSigma\",e,t,a),[4,image.nonMaxSuppressionWithScoreAsync(r,n,s,o,p,u)]);case 2:return[2,[(m=l.sent()).selectedIndices,m.selectedScores]];case 3:return[4,image.nonMaxSuppressionAsync(r,n,s,o,p)];case 4:return[2,[l.sent()]];case 5:return i=getParamValue(\"condition\",e,t,a).asType(\"bool\"),[4,whereAsync(i)];case 6:return m=[l.sent()],i.dispose(),[2,m];case 7:return[2,setdiff1dAsync(getParamValue(\"x\",e,t,a),getParamValue(\"y\",e,t,a))];case 8:throw TypeError(\"Node type \"+e.op+\" is not implemented\")}})})},executeOp$6=function(e,t,a){switch(e.op){case\"TopKV2\":var r=getParamValue(\"x\",e,t,a),n=getParamValue(\"k\",e,t,a),s=getParamValue(\"sorted\",e,t,a),o=topk(r,n,s);return[o.values,o.indices];default:throw TypeError(\"Node type \"+e.op+\" is not implemented\")}},executeOp$7=function(e,t,a){switch(e.op){case\"Const\":return t[e.name];case\"PlaceholderWithDefault\":var r=getParamValue(\"default\",e,t,a);return[getTensor(e.name,t,a)||r];case\"Placeholder\":return[getTensor(e.name,t,a)];case\"Identity\":case\"StopGradient\":case\"FakeQuantWithMinMaxVars\":return[getParamValue(\"x\",e,t,a).clone()];case\"IdentityN\":return getParamValue(\"x\",e,t,a).map(function(e){return e.clone()});case\"Snapshot\":return[getParamValue(\"x\",e,t,a).clone()];case\"Shape\":return[tensor1d(getParamValue(\"x\",e,t,a).shape,\"int32\")];case\"ShapeN\":return getParamValue(\"x\",e,t,a).map(function(e){return tensor1d(e.shape)});case\"Size\":return[scalar(getParamValue(\"x\",e,t,a).size,\"int32\")];case\"Rank\":return[scalar(getParamValue(\"x\",e,t,a).rank,\"int32\")];case\"NoOp\":return[scalar(1)];case\"Print\":var n=getParamValue(\"x\",e,t,a),s=getParamValue(\"data\",e,t,a),o=getParamValue(\"message\",e,t,a),p=getParamValue(\"summarize\",e,t,a);console.warn(\"The graph has a tf.print() operation,usually used for debugging, which slows down performance.\"),console.log(o);for(var u=0;u<s.length;u++)console.log(Array.prototype.slice.call(s[u].dataSync()).slice(0,p));return[n];default:throw TypeError(\"Node type \"+e.op+\" is not implemented\")}},executeOp$8=function(e,t,a){switch(e.op){case\"ResizeBilinear\":var r=getParamValue(\"images\",e,t,a),n=getParamValue(\"size\",e,t,a),s=getParamValue(\"alignCorners\",e,t,a);return[image.resizeBilinear(r,[n[0],n[1]],s)];case\"ResizeNearestNeighbor\":r=getParamValue(\"images\",e,t,a),n=getParamValue(\"size\",e,t,a),s=getParamValue(\"alignCorners\",e,t,a);return[image.resizeNearestNeighbor(r,[n[0],n[1]],s)];case\"CropAndResize\":var o=getParamValue(\"image\",e,t,a),p=getParamValue(\"boxes\",e,t,a),u=getParamValue(\"boxInd\",e,t,a),i=getParamValue(\"cropSize\",e,t,a),m=getParamValue(\"method\",e,t,a),l=getParamValue(\"extrapolationValue\",e,t,a);return[image.cropAndResize(o,p,u,i,m,l)];default:throw TypeError(\"Node type \"+e.op+\" is not implemented\")}},executeOp$9=function(e,t,a){switch(e.op){case\"Equal\":return[equal(getParamValue(\"a\",e,t,a),getParamValue(\"b\",e,t,a))];case\"NotEqual\":return[notEqual(getParamValue(\"a\",e,t,a),getParamValue(\"b\",e,t,a))];case\"Greater\":return[greater(getParamValue(\"a\",e,t,a),getParamValue(\"b\",e,t,a))];case\"GreaterEqual\":return[greaterEqual(getParamValue(\"a\",e,t,a),getParamValue(\"b\",e,t,a))];case\"Less\":return[less(getParamValue(\"a\",e,t,a),getParamValue(\"b\",e,t,a))];case\"LessEqual\":return[lessEqual(getParamValue(\"a\",e,t,a),getParamValue(\"b\",e,t,a))];case\"LogicalAnd\":return[logicalAnd(getParamValue(\"a\",e,t,a),getParamValue(\"b\",e,t,a))];case\"LogicalNot\":return[logicalNot(getParamValue(\"a\",e,t,a))];case\"LogicalOr\":return[logicalOr(getParamValue(\"a\",e,t,a),getParamValue(\"b\",e,t,a))];case\"Select\":case\"SelectV2\":return[where(getParamValue(\"condition\",e,t,a),getParamValue(\"a\",e,t,a),getParamValue(\"b\",e,t,a))];default:throw TypeError(\"Node type \"+e.op+\" is not implemented\")}},executeOp$10=function(e,t,a){switch(e.op){case\"BatchMatMul\":case\"BatchMatMulV2\":case\"MatMul\":return[matMul(getParamValue(\"a\",e,t,a),getParamValue(\"b\",e,t,a),getParamValue(\"transposeA\",e,t,a),getParamValue(\"transposeB\",e,t,a))];case\"Transpose\":return[transpose(getParamValue(\"x\",e,t,a),getParamValue(\"perm\",e,t,a))];case\"_FusedMatMul\":var r=getParamValue(\"fusedOps\",e,t,a),n=r[0],s=r[1],o=\"biasadd\"===n,p=\"prelu\"===s,u=getParamValue(\"numArgs\",e,t,a);if(o){if(p&&2!==u)throw new Error(\"Fused MatMul with BiasAdd and Prelu must have two extra arguments: bias and alpha.\");if(!p&&1!==u)throw new Error(\"Fused MatMul with BiasAdd must have one extra argument: bias.\")}var i=getParamValue(\"args\",e,t,a),m=i[0],l=i[1];return[fused.matMul({a:getParamValue(\"a\",e,t,a),b:getParamValue(\"b\",e,t,a),transposeA:getParamValue(\"transposeA\",e,t,a),transposeB:getParamValue(\"transposeB\",e,t,a),bias:m,activation:s,preluActivationWeights:l})];default:throw TypeError(\"Node type \"+e.op+\" is not implemented\")}},executeOp$11=function(e,t,a){switch(e.op){case\"FusedBatchNorm\":case\"FusedBatchNormV2\":case\"FusedBatchNormV3\":return[batchNorm(getParamValue(\"x\",e,t,a),getParamValue(\"mean\",e,t,a),getParamValue(\"variance\",e,t,a),getParamValue(\"offset\",e,t,a),getParamValue(\"scale\",e,t,a),getParamValue(\"epsilon\",e,t,a))];case\"LRN\":return[localResponseNormalization(getParamValue(\"x\",e,t,a),getParamValue(\"radius\",e,t,a),getParamValue(\"bias\",e,t,a),getParamValue(\"alpha\",e,t,a),getParamValue(\"beta\",e,t,a))];case\"Softmax\":return[softmax(getParamValue(\"x\",e,t,a))];case\"LogSoftmax\":return[logSoftmax(getParamValue(\"x\",e,t,a))];case\"SparseToDense\":return[sparseToDense(getParamValue(\"sparseIndices\",e,t,a),getParamValue(\"outputShape\",e,t,a),getParamValue(\"sparseValues\",e,t,a),getParamValue(\"defaultValue\",e,t,a))];default:throw TypeError(\"Node type \"+e.op+\" is not implemented\")}},executeOp$12=function(e,t,a){switch(e.op){case\"Max\":var r=getParamValue(\"axis\",e,t,a),n=getParamValue(\"keepDims\",e,t,a);return[max(getParamValue(\"x\",e,t,a),r,n)];case\"Mean\":r=getParamValue(\"axis\",e,t,a),n=getParamValue(\"keepDims\",e,t,a);return[mean(getParamValue(\"x\",e,t,a),r,n)];case\"Min\":r=getParamValue(\"axis\",e,t,a),n=getParamValue(\"keepDims\",e,t,a);return[min(getParamValue(\"x\",e,t,a),r,n)];case\"Sum\":r=getParamValue(\"axis\",e,t,a),n=getParamValue(\"keepDims\",e,t,a);return[sum(getParamValue(\"x\",e,t,a),r,n)];case\"All\":r=getParamValue(\"axis\",e,t,a),n=getParamValue(\"keepDims\",e,t,a);return[all(getParamValue(\"x\",e,t,a),r,n)];case\"Any\":r=getParamValue(\"axis\",e,t,a),n=getParamValue(\"keepDims\",e,t,a);return[any(getParamValue(\"x\",e,t,a),r,n)];case\"ArgMax\":r=getParamValue(\"axis\",e,t,a);return[argMax(getParamValue(\"x\",e,t,a),r)];case\"ArgMin\":r=getParamValue(\"axis\",e,t,a);return[argMin(getParamValue(\"x\",e,t,a),r)];case\"Prod\":r=getParamValue(\"axis\",e,t,a),n=getParamValue(\"keepDims\",e,t,a);return[prod(getParamValue(\"x\",e,t,a),r,n)];default:throw TypeError(\"Node type \"+e.op+\" is not implemented\")}},executeOp$13=function(e,t,a){switch(e.op){case\"ConcatV2\":case\"Concat\":var r=getParamValue(\"n\",e,t,a),n=getParamValue(\"axis\",e,t,a),s=getParamValue(\"tensors\",e,t,a);return s=s.slice(0,r),[concat(s,n)];case\"GatherV2\":case\"Gather\":n=getParamValue(\"axis\",e,t,a);var o=getParamValue(\"x\",e,t,a),p=getParamValue(\"indices\",e,t,a);return[gather(o,p.asType(\"int32\"),n)];case\"ReverseV2\":case\"Reverse\":n=getParamValue(\"axis\",e,t,a),o=getParamValue(\"x\",e,t,a);return[reverse(o,n)];case\"Slice\":var u=getParamValue(\"begin\",e,t,a),i=getParamValue(\"size\",e,t,a);return[slice(getParamValue(\"x\",e,t,a),u,i)];case\"StridedSlice\":u=getParamValue(\"begin\",e,t,a);var m=getParamValue(\"end\",e,t,a),l=getParamValue(\"strides\",e,t,a),c=getParamValue(\"beginMask\",e,t,a),d=getParamValue(\"endMask\",e,t,a),y=getParamValue(\"ellipsisMask\",e,t,a),f=getParamValue(\"newAxisMask\",e,t,a),g=getParamValue(\"shrinkAxisMask\",e,t,a),h=getParamValue(\"x\",e,t,a);if(1===u.length&&h.shape.length>1)for(var N=1;N<h.shape.length;N++)u.push(0),m.push(h.shape[N]),l.push(l[0]);return[stridedSlice(h,u,m,l,c,d,y,f,g)];case\"Pack\":return tidy(function(){var r=getParamValue(\"axis\",e,t,a),n=getParamValue(\"tensors\",e,t,a),s=n[0].shape,o=n[0].squeeze().shape,p=n.map(function(e){var t=util.arraysEqual(e.shape,s);if(!t&&!util.arraysEqual(e.squeeze().shape,o))throw new Error(\"the input tensors shape does not match\");return t?e:e.reshape(s)});return[stack(p,r)]});case\"Unpack\":return tidy(function(){var r=getParamValue(\"axis\",e,t,a),n=getParamValue(\"tensor\",e,t,a);return unstack(n,r)});case\"Tile\":var x=getParamValue(\"reps\",e,t,a);return[tile(getParamValue(\"x\",e,t,a),x)];case\"Split\":case\"SplitV\":n=getParamValue(\"axis\",e,t,a);var V=getParamValue(\"numOrSizeSplits\",e,t,a);return split(getParamValue(\"x\",e,t,a),V,n);case\"ScatterNd\":p=getParamValue(\"indices\",e,t,a);var b=getParamValue(\"values\",e,t,a),P=getParamValue(\"shape\",e,t,a);return[scatterND(p,b,P)];case\"GatherNd\":var T=getParamValue(\"x\",e,t,a);p=getParamValue(\"indices\",e,t,a);return[gatherND(T,p)];case\"SparseToDense\":p=getParamValue(\"sparseIndices\",e,t,a),P=getParamValue(\"outputShape\",e,t,a);var v=getParamValue(\"sparseValues\",e,t,a),O=getParamValue(\"defaultValue\",e,t,a);return[sparseToDense(p,v,P,v.dtype===O.dtype?O:O.asType(v.dtype))];default:throw TypeError(\"Node type \"+e.op+\" is not implemented\")}},executeOp$14=function(e,t,a){switch(e.op){case\"FFT\":return[fft(getParamValue(\"x\",e,t,a))];case\"IFFT\":return[ifft(getParamValue(\"x\",e,t,a))];case\"RFFT\":return[rfft(getParamValue(\"x\",e,t,a))];case\"IRFFT\":return[irfft(getParamValue(\"x\",e,t,a))];default:throw TypeError(\"Node type \"+e.op+\" is not implemented\")}},executeOp$15=function(e,t,a){switch(e.op){case\"Cast\":return[cast(getParamValue(\"x\",e,t,a),getParamValue(\"dtype\",e,t,a))];case\"ExpandDims\":var r=getParamValue(\"axis\",e,t,a);return[expandDims(getParamValue(\"x\",e,t,a),r)];case\"Squeeze\":r=getParamValue(\"axis\",e,t,a);return[squeeze(getParamValue(\"x\",e,t,a),r)];case\"Reshape\":return[reshape(getParamValue(\"x\",e,t,a),getParamValue(\"shape\",e,t,a))];case\"PadV2\":case\"Pad\":return[pad(getParamValue(\"x\",e,t,a),split$1(getParamValue(\"padding\",e,t,a),2),getParamValue(\"constantValue\",e,t,a))];case\"SpaceToBatchND\":var n=getParamValue(\"blockShape\",e,t,a),s=split$1(getParamValue(\"paddings\",e,t,a),2);return[spaceToBatchND(getParamValue(\"x\",e,t,a),n,s)];case\"BatchToSpaceND\":n=getParamValue(\"blockShape\",e,t,a);var o=split$1(getParamValue(\"crops\",e,t,a),2);return[batchToSpaceND(getParamValue(\"x\",e,t,a),n,o)];case\"DepthToSpace\":var p=getParamValue(\"blockSize\",e,t,a),u=getParamValue(\"dataFormat\",e,t,a).toUpperCase();return[depthToSpace(getParamValue(\"x\",e,t,a),p,u)];default:throw TypeError(\"Node type \"+e.op+\" is not implemented\")}};function executeOp$16(e,t,a){var r=function(e,t,a){switch(e.category){case\"arithmetic\":return tidy(function(){return executeOp(e,t,a)});case\"basic_math\":return tidy(function(){return executeOp$1(e,t,a)});case\"control\":return executeOp$2(e,t,a);case\"convolution\":return tidy(function(){return executeOp$3(e,t,a)});case\"creation\":return tidy(function(){return executeOp$4(e,t,a)});case\"dynamic\":return executeOp$5(e,t,a);case\"evaluation\":return tidy(function(){return executeOp$6(e,t,a)});case\"image\":return tidy(function(){return executeOp$8(e,t,a)});case\"graph\":return tidy(function(){return executeOp$7(e,t,a)});case\"logical\":return tidy(function(){return executeOp$9(e,t,a)});case\"matrices\":return tidy(function(){return executeOp$10(e,t,a)});case\"normalization\":return tidy(function(){return executeOp$11(e,t,a)});case\"reduction\":return tidy(function(){return executeOp$12(e,t,a)});case\"slice_join\":return tidy(function(){return executeOp$13(e,t,a)});case\"spectral\":return tidy(function(){return executeOp$14(e,t,a)});case\"transformation\":return tidy(function(){return executeOp$15(e,t,a)});case\"custom\":var r=getRegisteredOp(e.op);if(r&&r.customExecutor)return r.customExecutor(new NodeValueImpl(e,t,a));throw TypeError(\"Custom op \"+e.op+\" is not registered.\");default:throw TypeError(\"Unknown op '\"+e.op+\"'. File an issue at https://github.com/tensorflow/tfjs/issues so we can add it, or register a custom execution with tf.registerOp()\")}}(e,t,a);return r instanceof Promise?r.then(function(e){return[].concat(e)}):[].concat(r)}var ExecutionContext=function(){function e(e,t){this.weightMap=e,this.tensorArrayMap=t,this.rootContext={id:0,frameName:\"\",iterationId:0},this.contexts=[this.rootContext],this.lastId=0,this.generateCurrentContextIds()}return e.prototype.newFrame=function(e,t){return{id:e,frameName:t,iterationId:0}},Object.defineProperty(e.prototype,\"currentContext\",{get:function(){return this.contexts},set:function(e){this.contexts!==e&&(this.contexts=e,this.generateCurrentContextIds())},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,\"currentContextId\",{get:function(){return this._currentContextIds[0]},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,\"currentContextIds\",{get:function(){return this._currentContextIds},enumerable:!0,configurable:!0}),e.prototype.generateCurrentContextIds=function(){for(var e=[],t=0;t<this.contexts.length-1;t++){var a=this.contexts.slice(0,this.contexts.length-t);e.push(this.contextIdforContexts(a))}e.push(\"\"),this._currentContextIds=e},e.prototype.contextIdforContexts=function(e){return e?e.map(function(e){return 0===e.id&&0===e.iterationId?\"\":e.frameName+\"-\"+e.iterationId}).join(\"/\"):\"\"},e.prototype.enterFrame=function(e){this.contexts&&(this.lastId++,this.contexts=this.contexts.slice(),this.contexts.push(this.newFrame(this.lastId,e)),this._currentContextIds.unshift(this.contextIdforContexts(this.contexts)))},e.prototype.exitFrame=function(){if(!(this.contexts&&this.contexts.length>1))throw new Error(\"Cannot exit frame, the context is empty\");this.contexts=this.contexts.slice(),this.contexts.splice(-1),this.currentContextIds.shift()},e.prototype.nextIteration=function(){if(!(this.contexts&&this.contexts.length>0))throw new Error(\"Cannot increase frame iteration, the context is empty\");this.contexts=this.contexts.slice(),this.lastId++;var e=Object.assign({},this.contexts[this.contexts.length-1]);e.iterationId+=1,e.id=this.lastId,this.contexts.splice(-1,1,e),this._currentContextIds.splice(0,1,this.contextIdforContexts(this.contexts))},e.prototype.getWeight=function(e){return this.weightMap[e]},e.prototype.addTensorArray=function(e){this.tensorArrayMap[e.id]=e},e.prototype.getTensorArray=function(e){return this.tensorArrayMap[e]},e}();function getExecutionSubgraph(e,t,a){for(var r=new Set,n=[],s=null,o=null,p=new Set,u=Object.keys(e).map(function(e){return parseNodeName(e)[0]}),i=t.slice();i.length>0;){var m=i.pop();(isControlFlow(m)||isDynamicShape(m))&&null==s&&(o=(s=m).children.map(function(e){return e.name}).filter(function(e){return r.has(e)})),r.add(m.name),null==a[m.name]&&(-1===u.indexOf(m.name)&&(0!==m.inputs.length?m.inputs.forEach(function(e){p.has(e.name)||(p.add(e.name),i.push(e))}):n.push(m.name)))}return{inputs:e,outputs:t,usedNodes:r,missingInputs:n,dynamicNode:s,syncInputs:o}}function getNodesInTopologicalOrder(e,t,a){var r=a.usedNodes,n=a.inputs,s=[];Object.keys(n).map(function(e){return parseNodeName(e)[0]}).map(function(t){return e.nodes[t]}).forEach(function(e){r.has(e.name)&&s.push(e)}),e.weights.forEach(function(e){r.has(e.name)&&s.push(e)});for(var o=new Set,p=[];s.length>0;){var u=s.pop();o.add(u.name),t[u.name]||p.push(u),u.children.forEach(function(e){!o.has(e.name)&&r.has(e.name)&&e.inputs.every(function(e){return o.has(e.name)})&&s.push(e)})}return p}var CONTROL_FLOW_OPS=[\"Switch\",\"Merge\",\"Enter\",\"Exit\",\"NextIteration\"],DYNAMIC_SHAPE_OPS=[\"NonMaxSuppressionV2\",\"NonMaxSuppressionV3\",\"NonMaxSuppressionV5\",\"Where\"];function isControlFlow(e){return CONTROL_FLOW_OPS.indexOf(e.op)>=0}function isDynamicShape(e){return DYNAMIC_SHAPE_OPS.indexOf(e.op)>=0}var GraphExecutor=function(){function e(e){this.graph=e,this.compiledMap=new Map,this._weightMap={},this.SEPERATOR=\",\",this._outputs=e.outputs,this._inputs=e.inputs,this._signature=e.signature}return Object.defineProperty(e.prototype,\"weightMap\",{get:function(){return this._weightMap},set:function(e){var t=Object.keys(e).map(function(t){return e[t].map(function(e){return e.id})});this.weightIds=[].concat.apply([],t),this._weightMap=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,\"inputs\",{get:function(){return this._inputs.map(function(e){return{name:e.name,shape:e.attrParams.shape?e.attrParams.shape.value:void 0,dtype:e.attrParams.dtype?e.attrParams.dtype.value:void 0}})},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,\"outputs\",{get:function(){return this._outputs.map(function(e){return{name:e.name,shape:e.attrParams.shape?e.attrParams.shape.value:void 0,dtype:e.attrParams.dtype?e.attrParams.dtype.value:void 0}})},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,\"inputNodes\",{get:function(){return this._inputs.map(function(e){return e.signatureKey||e.name})},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,\"outputNodes\",{get:function(){return this._outputs.map(function(e){return e.signatureKey||e.name})},enumerable:!0,configurable:!0}),e.prototype.getCompilationKey=function(e,t){var a=e.map(function(e){return e.name}).sort(),r=t.map(function(e){return e.name}).sort();return a.join(this.SEPERATOR)+\"--\"+r.join(this.SEPERATOR)},e.prototype.compile=function(e,t){var a=getExecutionSubgraph(e,t,this.weightMap),r=a.missingInputs,n=a.dynamicNode,s=a.syncInputs;if(null!=n)throw new Error(\"This execution contains the node '\"+n.name+\"', which has the dynamic op '\"+n.op+\"'. Please use model.executeAsync() instead. Alternatively, to avoid the dynamic ops, specify the inputs [\"+s+\"]\");if(r.length>0){var o=t.map(function(e){return e.name}),p=Object.keys(e);throw new Error(\"Cannot compute the outputs [\"+o+\"] from the provided inputs [\"+p+\"]. Missing the following inputs: [\"+r+\"]\")}return getNodesInTopologicalOrder(this.graph,this.weightMap,a)},e.prototype.execute=function(e,t){var a=this;e=this.mapInputs(e);var r=Object.keys(e).sort();this.checkInputs(e),this.checkInputShapeAndType(e),t=this.mapOutputs(t),this.checkOutputs(t);var n=r.map(function(e){return a.graph.nodes[parseNodeName(e)[0]]}),s=t.map(function(e){return a.graph.nodes[parseNodeName(e)[0]]}),o=this.getCompilationKey(n,s),p=this.compiledMap.get(o);null==p&&(p=this.compile(e,s),this.compiledMap.set(o,p));var u={};return tidy(function(){var r=new ExecutionContext(a._weightMap,u),n=__assign({},a.weightMap);Object.keys(e).forEach(function(t){var a=parseNodeName(t),r=a[0],s=[];s[a[1]]=e[t],n[r]=s});for(var s=a.getFrozenTensorIds(n),o={},i=0;i<p.length;i++){var m=p[i];if(!n[m.name]){var l=executeOp$16(m,n,r);if(l instanceof Promise)throw new Error(\"The execution of the op '\"+m.op+\"' returned a promise. Please use model.executeAsync() instead.\");n[m.name]=l,a.checkTensorForDisposal(m.name,m,n,r,s,t,o)}}return t.map(function(e){return getTensor(e,n,r)})})},e.prototype.getFrozenTensorIds=function(e){var t=[].concat.apply([],Object.keys(e).map(function(t){return e[t]}).map(function(e){return e.map(function(e){return e.id})}));return new Set(t)},e.prototype.checkTensorForDisposal=function(e,t,a,r,n,s,o){\"control\"!==t.category&&-1===s.indexOf(e)&&(a[e].forEach(function(e){null!=e&&(o[e.id]=(o[e.id]||0)+t.children.length)}),t.inputs.forEach(function(e){if(\"control\"!==e.category){var t=getTensorsForCurrentContenxt(e.name,a,r);null!=t&&t.forEach(function(e){if(e&&!n.has(e.id)){var t=o[e.id];1===t?(e.dispose(),delete o[e.id]):null!=t&&o[e.id]--}})}}))},e.prototype.executeAsync=function(e,t){return __awaiter(this,void 0,void 0,function(){var a,r,n,s,o,p,u=this;return __generator(this,function(i){switch(i.label){case 0:return e=this.mapInputs(e),this.checkInputs(e),this.checkInputShapeAndType(e),t=this.mapOutputs(t),this.checkOutputs(t),a={},r=new ExecutionContext(this._weightMap,a),[4,this.executeWithControlFlow(e,r,t)];case 1:return n=i.sent(),s=t.map(function(e){return getTensor(e,n,r)}),o=new Set(s.map(function(e){return e.id})),p=new Set(Object.keys(e).map(function(t){return e[t].id})),Object.keys(n).forEach(function(e){n[e].forEach(function(e){!e||e.isDisposed||o.has(e.id)||p.has(e.id)||-1!==u.weightIds.indexOf(e.id)||e.dispose()})}),[2,s]}})})},e.prototype.executeWithControlFlow=function(e,t,a){return __awaiter(this,void 0,void 0,function(){var r,n,s,o,p,u,i,m,l,c,d,y,f,g,h,N,x=this;return __generator(this,function(V){switch(V.label){case 0:r=Object.keys(e),n=r.map(function(e){return x.graph.nodes[parseNodeName(e)[0]]}),s=a.map(function(e){return x.graph.nodes[parseNodeName(e)[0]]}),o=getExecutionSubgraph(e,s,this.weightMap),p=o.usedNodes,u=o.missingInputs,i=o.dynamicNode,m=o.syncInputs,l=n.concat(this.graph.weights).map(function(e){return{node:e,contexts:t.currentContext}}),c=__assign({},this.weightMap),Object.keys(e).forEach(function(t){var a=parseNodeName(t),r=a[0],n=[];n[a[1]]=e[t],c[r]=n}),d={},y=this.getFrozenTensorIds(c),f={},V.label=1;case 1:return l.length>0?(g=this.processStack(n,l,t,c,f,y,a,d,p),[4,Promise.all(g)]):[3,3];case 2:return V.sent(),[3,1];case 3:if(null==i&&console.warn(\"This model execution did not contain any nodes with control flow or dynamic output shapes. You can use model.execute() instead.\"),(h=s.filter(function(e){return!isControlFlow(e)&&!getTensor(e.name,c,t)}).map(function(e){return e.name})).length>0)throw N=\"\",null!=i&&(N=\"Alternatively, to avoid the dynamic ops, use model.execute() and specify the inputs [\"+m+\"]\"),new Error(\"Cannot compute the outputs [\"+h+\"] from the provided inputs [\"+r+\"]. Consider providing the following inputs: [\"+u+\"]. \"+N);return[2,c]}})})},e.prototype.processStack=function(e,t,a,r,n,s,o,p,u){for(var i=this,m=[],l=function(){var l=t.pop();a.currentContext=l.contexts;var d=\"\";if(\"Enter\"===l.node.op&&getParamValue(\"isConstant\",l.node,r,a)&&(d=getNodeNameAndIndex(l.node.name,a)[0]),-1===e.indexOf(l.node)){var y=executeOp$16(l.node,r,a);d||(d=getNodeNameAndIndex(l.node.name,a)[0]);var f=a.currentContext;y instanceof Promise?m.push(y.then(function(e){return r[d]=e,a.currentContext=f,i.checkTensorForDisposal(d,l.node,r,a,s,o,p),i.processChildNodes(l.node,t,a,r,n,u),e})):(r[d]=y,c.checkTensorForDisposal(d,l.node,r,a,s,o,p),c.processChildNodes(l.node,t,a,r,n,u))}else c.processChildNodes(l.node,t,a,r,n,u)},c=this;t.length>0;)l();return m},e.prototype.processChildNodes=function(e,t,a,r,n,s){e.children.forEach(function(e){var o=getNodeNameAndIndex(e.name,a)[0];!n[o]&&s.has(e.name)&&(\"Merge\"===e.op?e.inputNames.some(function(e){return!!getTensor(e,r,a)})&&(n[o]=!0,t.push({contexts:a.currentContext,node:e})):e.inputNames.every(function(e){return!!getTensor(e,r,a)})&&(n[o]=!0,t.push({contexts:a.currentContext,node:e})))})},e.prototype.dispose=function(){var e=this;Object.keys(this.weightMap).forEach(function(t){return e.weightMap[t].forEach(function(e){return e.dispose()})})},e.prototype.checkInputShapeAndType=function(e){var t=this;Object.keys(e).forEach(function(a){var r=e[a],n=parseNodeName(a)[0],s=t.graph.nodes[n];if(s.attrParams.shape&&s.attrParams.shape.value){var o=s.attrParams.shape.value,p=o.length===r.shape.length&&r.shape.every(function(e,t){return-1===o[t]||o[t]===e});util.assert(p,function(){return\"The shape of dict['\"+s.name+\"'] provided in model.execute(dict) must be [\"+o+\"], but was [\"+r.shape+\"]\"})}s.attrParams.dtype&&s.attrParams.dtype.value&&util.assert(r.dtype===s.attrParams.dtype.value,function(){return\"The dtype of dict['\"+s.name+\"'] provided in model.execute(dict) must be \"+s.attrParams.dtype.value+\", but was \"+r.dtype})})},e.prototype.mapInputs=function(e){var t={};for(var a in e){if(null!=this._signature&&null!=this._signature.inputs&&null!=this._signature.inputs[a])t[this._signature.inputs[a].name]=e[a];else t[a]=e[a]}return t},e.prototype.checkInputs=function(e){var t=this,a=Object.keys(e).filter(function(e){var a=parseNodeName(e)[0];return null==t.graph.nodes[a]});if(a.length>0)throw new Error(\"The dict provided in model.execute(dict) has keys: [\"+a+\"] that are not part of graph\")},e.prototype.mapOutputs=function(e){var t=this;return e.map(function(e){return null!=t._signature&&null!=t._signature.outputs&&null!=t._signature.outputs[e]?t._signature.outputs[e].name:e},{})},e.prototype.checkOutputs=function(e){var t=this;e.forEach(function(e){var a=parseNodeName(e)[0];if(!t.graph.nodes[a])throw new Error(\"The output '\"+e+\"' is not found in the graph\")})},e}(),TFHUB_SEARCH_PARAM=\"?tfjs-format=file\",DEFAULT_MODEL_NAME=\"model.json\",GraphModel=function(){function e(e,t){void 0===t&&(t={}),this.modelUrl=e,this.loadOptions=t,this.version=\"n/a\",null==t&&(this.loadOptions={})}return Object.defineProperty(e.prototype,\"modelVersion\",{get:function(){return this.version},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,\"inputNodes\",{get:function(){return this.executor.inputNodes},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,\"outputNodes\",{get:function(){return this.executor.outputNodes},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,\"inputs\",{get:function(){return this.executor.inputs},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,\"outputs\",{get:function(){return this.executor.outputs},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,\"weights\",{get:function(){return this.executor.weightMap},enumerable:!0,configurable:!0}),e.prototype.findIOHandler=function(){var e=this.modelUrl;if(null!=e.load)this.handler=e;else if(null!=this.loadOptions.requestInit)this.handler=io.browserHTTPRequest(e,this.loadOptions);else{var t=io.getLoadHandlers(e,this.loadOptions.onProgress);if(0===t.length)t.push(io.browserHTTPRequest(e,this.loadOptions));else if(t.length>1)throw new Error(\"Found more than one (\"+t.length+\") load handlers for URL '\"+[e]+\"'\");this.handler=t[0]}},e.prototype.load=function(){return __awaiter(this,void 0,void 0,function(){var e,t,a,r;return __generator(this,function(n){switch(n.label){case 0:if(this.findIOHandler(),null==this.handler.load)throw new Error(\"Cannot proceed with model loading because the IOHandler provided does not have the `load` method implemented.\");return e=this,[4,this.handler.load()];case 1:return e.artifacts=n.sent(),t=this.artifacts.modelTopology,a={},null!=this.artifacts.userDefinedMetadata&&(a=this.artifacts.userDefinedMetadata.signature),this.version=t.versions.producer+\".\"+t.versions.minConsumer,r=io.decodeWeights(this.artifacts.weightData,this.artifacts.weightSpecs),this.executor=new GraphExecutor(OperationMapper.Instance.transformGraph(t,a)),this.executor.weightMap=this.convertTensorMapToTensorsMap(r),[2,!0]}})})},e.prototype.save=function(e,t){return __awaiter(this,void 0,void 0,function(){var t;return __generator(this,function(a){if(\"string\"==typeof e){if(0===(t=io.getSaveHandlers(e)).length)throw new Error(\"Cannot find any save handlers for URL '\"+e+\"'\");if(t.length>1)throw new Error(\"Found more than one (\"+t.length+\") save handlers for URL '\"+e+\"'\");e=t[0]}if(null==e.save)throw new Error(\"GraphModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.\");return[2,e.save(this.artifacts)]})})},e.prototype.predict=function(e,t){return this.execute(e,this.outputNodes)},e.prototype.normalizeInputs=function(e){if(!(e instanceof Tensor||Array.isArray(e)))return e;if((e=Array.isArray(e)?e:[e]).length!==this.inputNodes.length)throw new Error(\"Input tensor count mismatch,the graph model has \"+this.inputNodes.length+\" placeholders, while there are \"+e.length+\" input tensors.\");return this.inputNodes.reduce(function(t,a,r){return t[a]=e[r],t},{})},e.prototype.normalizeOutputs=function(e){return e=e||this.outputNodes,Array.isArray(e)?e:[e]},e.prototype.execute=function(e,t){e=this.normalizeInputs(e),t=this.normalizeOutputs(t);var a=this.executor.execute(e,t);return a.length>1?a:a[0]},e.prototype.executeAsync=function(e,t){return __awaiter(this,void 0,void 0,function(){var a;return __generator(this,function(r){switch(r.label){case 0:return e=this.normalizeInputs(e),t=this.normalizeOutputs(t),[4,this.executor.executeAsync(e,t)];case 1:return[2,(a=r.sent()).length>1?a:a[0]]}})})},e.prototype.convertTensorMapToTensorsMap=function(e){return Object.keys(e).reduce(function(t,a){return t[a]=[e[a]],t},{})},e.prototype.dispose=function(){this.executor.dispose()},e}();function loadGraphModel(e,t){return void 0===t&&(t={}),__awaiter(this,void 0,void 0,function(){var a;return __generator(this,function(r){switch(r.label){case 0:if(null==e)throw new Error(\"modelUrl in loadGraphModel() cannot be null. Please provide a url or an IOHandler that loads the model\");return null==t&&(t={}),t.fromTFHub&&null==e.load&&(e.endsWith(\"/\")||(e+=\"/\"),e=\"\"+e+DEFAULT_MODEL_NAME+TFHUB_SEARCH_PARAM),[4,(a=new GraphModel(e,t)).load()];case 1:return r.sent(),[2,a]}})})}var version=\"1.7.4\";export{GraphModel,loadGraphModel,deregisterOp,registerOp,version as version_converter};\n//# sourceMappingURL=tf-converter.esm.js.map\n","/**\n    * @license\n    * Copyright 2019 Google LLC. All Rights Reserved.\n    * Licensed under the Apache License, Version 2.0 (the \"License\");\n    * you may not use this file except in compliance with the License.\n    * You may obtain a copy of the License at\n    *\n    * http://www.apache.org/licenses/LICENSE-2.0\n    *\n    * Unless required by applicable law or agreed to in writing, software\n    * distributed under the License is distributed on an \"AS IS\" BASIS,\n    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    * See the License for the specific language governing permissions and\n    * limitations under the License.\n    * =============================================================================\n    */\nimport*as tf from\"@tensorflow/tfjs-core\";import{tidy,div,util,Tensor,browser,pad3d,scalar,concat,tensor2d}from\"@tensorflow/tfjs-core\";import{loadGraphModel}from\"@tensorflow/tfjs-converter\";var extendStatics=function(e,t){return(extendStatics=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)};function __extends(e,t){function n(){this.constructor=e}extendStatics(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}var __assign=function(){return(__assign=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)};function __awaiter(e,t,n,r){return new(n||(n=Promise))(function(o,i){function s(e){try{a(r.next(e))}catch(e){i(e)}}function u(e){try{a(r.throw(e))}catch(e){i(e)}}function a(e){e.done?o(e.value):new n(function(t){t(e.value)}).then(s,u)}a((r=r.apply(e,t||[])).next())})}function __generator(e,t){var n,r,o,i,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:u(0),throw:u(1),return:u(2)},\"function\"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function u(i){return function(u){return function(i){if(n)throw new TypeError(\"Generator is already executing.\");for(;s;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,r=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!(o=(o=s.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){s=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){s.label=i[1];break}if(6===i[0]&&s.label<o[1]){s.label=o[1],o=i;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(i);break}o[2]&&s.ops.pop(),s.trys.pop();continue}i=t.call(e,s)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,u])}}}var BaseModel=function(){function e(e,t){this.model=e,this.outputStride=t;var n=this.model.inputs[0].shape;util.assert(-1===n[1]&&-1===n[2],function(){return\"Input shape [\"+n[1]+\", \"+n[2]+\"] must both be equal to or -1\"})}return e.prototype.predict=function(e){var t=this;return tidy(function(){var n=t.preprocessInput(e.toFloat()).expandDims(0),r=t.model.predict(n).map(function(e){return e.squeeze([0])}),o=t.nameOutputResults(r);return{heatmapScores:o.heatmap.sigmoid(),offsets:o.offsets,displacementFwd:o.displacementFwd,displacementBwd:o.displacementBwd}})},e.prototype.dispose=function(){this.model.dispose()},e}(),MobileNet=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return __extends(t,e),t.prototype.preprocessInput=function(e){return tidy(function(){return div(e,127.5).sub(1)})},t.prototype.nameOutputResults=function(e){return{offsets:e[0],heatmap:e[1],displacementFwd:e[2],displacementBwd:e[3]}},t}(BaseModel);function half(e){return Math.floor(e/2)}var MaxHeap=function(){function e(e,t){this.priorityQueue=new Array(e),this.numberOfElements=-1,this.getElementValue=t}return e.prototype.enqueue=function(e){this.priorityQueue[++this.numberOfElements]=e,this.swim(this.numberOfElements)},e.prototype.dequeue=function(){var e=this.priorityQueue[0];return this.exchange(0,this.numberOfElements--),this.sink(0),this.priorityQueue[this.numberOfElements+1]=null,e},e.prototype.empty=function(){return-1===this.numberOfElements},e.prototype.size=function(){return this.numberOfElements+1},e.prototype.all=function(){return this.priorityQueue.slice(0,this.numberOfElements+1)},e.prototype.max=function(){return this.priorityQueue[0]},e.prototype.swim=function(e){for(;e>0&&this.less(half(e),e);)this.exchange(e,half(e)),e=half(e)},e.prototype.sink=function(e){for(;2*e<=this.numberOfElements;){var t=2*e;if(t<this.numberOfElements&&this.less(t,t+1)&&t++,!this.less(e,t))break;this.exchange(e,t),e=t}},e.prototype.getValueAt=function(e){return this.getElementValue(this.priorityQueue[e])},e.prototype.less=function(e,t){return this.getValueAt(e)<this.getValueAt(t)},e.prototype.exchange=function(e,t){var n=this.priorityQueue[e];this.priorityQueue[e]=this.priorityQueue[t],this.priorityQueue[t]=n},e}();function scoreIsMaximumInLocalWindow(e,t,n,r,o,i){for(var s=i.shape,u=s[0],a=s[1],l=!0,p=Math.max(n-o,0),c=Math.min(n+o+1,u),f=p;f<c;++f){for(var d=Math.max(r-o,0),h=Math.min(r+o+1,a),m=d;m<h;++m)if(i.get(f,m,e)>t){l=!1;break}if(!l)break}return l}function buildPartWithScoreQueue(e,t,n){for(var r=n.shape,o=r[0],i=r[1],s=r[2],u=new MaxHeap(o*i*s,function(e){return e.score}),a=0;a<o;++a)for(var l=0;l<i;++l)for(var p=0;p<s;++p){var c=n.get(a,l,p);c<e||scoreIsMaximumInLocalWindow(p,c,a,l,t,n)&&u.enqueue({score:c,part:{heatmapY:a,heatmapX:l,id:p}})}return u}var partNames=[\"nose\",\"leftEye\",\"rightEye\",\"leftEar\",\"rightEar\",\"leftShoulder\",\"rightShoulder\",\"leftElbow\",\"rightElbow\",\"leftWrist\",\"rightWrist\",\"leftHip\",\"rightHip\",\"leftKnee\",\"rightKnee\",\"leftAnkle\",\"rightAnkle\"],NUM_KEYPOINTS=partNames.length,partIds=partNames.reduce(function(e,t,n){return e[t]=n,e},{}),connectedPartNames=[[\"leftHip\",\"leftShoulder\"],[\"leftElbow\",\"leftShoulder\"],[\"leftElbow\",\"leftWrist\"],[\"leftHip\",\"leftKnee\"],[\"leftKnee\",\"leftAnkle\"],[\"rightHip\",\"rightShoulder\"],[\"rightElbow\",\"rightShoulder\"],[\"rightElbow\",\"rightWrist\"],[\"rightHip\",\"rightKnee\"],[\"rightKnee\",\"rightAnkle\"],[\"leftShoulder\",\"rightShoulder\"],[\"leftHip\",\"rightHip\"]],poseChain=[[\"nose\",\"leftEye\"],[\"leftEye\",\"leftEar\"],[\"nose\",\"rightEye\"],[\"rightEye\",\"rightEar\"],[\"nose\",\"leftShoulder\"],[\"leftShoulder\",\"leftElbow\"],[\"leftElbow\",\"leftWrist\"],[\"leftShoulder\",\"leftHip\"],[\"leftHip\",\"leftKnee\"],[\"leftKnee\",\"leftAnkle\"],[\"nose\",\"rightShoulder\"],[\"rightShoulder\",\"rightElbow\"],[\"rightElbow\",\"rightWrist\"],[\"rightShoulder\",\"rightHip\"],[\"rightHip\",\"rightKnee\"],[\"rightKnee\",\"rightAnkle\"]],connectedPartIndices=connectedPartNames.map(function(e){var t=e[0],n=e[1];return[partIds[t],partIds[n]]}),partChannels=[\"left_face\",\"right_face\",\"right_upper_leg_front\",\"right_lower_leg_back\",\"right_upper_leg_back\",\"left_lower_leg_front\",\"left_upper_leg_front\",\"left_upper_leg_back\",\"left_lower_leg_back\",\"right_feet\",\"right_lower_leg_front\",\"left_feet\",\"torso_front\",\"torso_back\",\"right_upper_arm_front\",\"right_upper_arm_back\",\"right_lower_arm_back\",\"left_lower_arm_front\",\"left_upper_arm_front\",\"left_upper_arm_back\",\"left_lower_arm_back\",\"right_hand\",\"right_lower_arm_front\",\"left_hand\"];function getOffsetPoint(e,t,n,r){return{y:r.get(e,t,n),x:r.get(e,t,n+NUM_KEYPOINTS)}}function getImageCoords(e,t,n){var r=getOffsetPoint(e.heatmapY,e.heatmapX,e.id,n),o=r.y,i=r.x;return{x:e.heatmapX*t+i,y:e.heatmapY*t+o}}function clamp(e,t,n){return e<t?t:e>n?n:e}function squaredDistance(e,t,n,r){var o=n-e,i=r-t;return o*o+i*i}function addVectors(e,t){return{x:e.x+t.x,y:e.y+t.y}}var parentChildrenTuples=poseChain.map(function(e){var t=e[0],n=e[1];return[partIds[t],partIds[n]]}),parentToChildEdges=parentChildrenTuples.map(function(e){return e[1]}),childToParentEdges=parentChildrenTuples.map(function(e){return e[0]});function getDisplacement(e,t,n){var r=n.shape[2]/2;return{y:n.get(t.y,t.x,e),x:n.get(t.y,t.x,r+e)}}function getStridedIndexNearPoint(e,t,n,r){return{y:clamp(Math.round(e.y/t),0,n-1),x:clamp(Math.round(e.x/t),0,r-1)}}function traverseToTargetKeypoint(e,t,n,r,o,i,s,u){void 0===u&&(u=2);for(var a=r.shape,l=a[0],p=a[1],c=getDisplacement(e,getStridedIndexNearPoint(t.position,i,l,p),s),f=addVectors(t.position,c),d=0;d<u;d++){var h=getStridedIndexNearPoint(f,i,l,p),m=getOffsetPoint(h.y,h.x,n,o);f=addVectors({x:h.x*i,y:h.y*i},{x:m.x,y:m.y})}var g=getStridedIndexNearPoint(f,i,l,p),_=r.get(g.y,g.x,n);return{position:f,part:partNames[n],score:_}}function decodePose(e,t,n,r,o,i){var s=t.shape[2],u=parentToChildEdges.length,a=new Array(s),l=e.part,p=e.score,c=getImageCoords(l,r,n);a[l.id]={score:p,part:partNames[l.id],position:c};for(var f=u-1;f>=0;--f){var d=parentToChildEdges[f],h=childToParentEdges[f];a[d]&&!a[h]&&(a[h]=traverseToTargetKeypoint(f,a[d],h,t,n,r,i))}for(f=0;f<u;++f){d=childToParentEdges[f],h=parentToChildEdges[f];a[d]&&!a[h]&&(a[h]=traverseToTargetKeypoint(f,a[d],h,t,n,r,o))}return a}function withinNmsRadiusOfCorrespondingPoint(e,t,n,r){var o=n.x,i=n.y;return e.some(function(e){var n=e.keypoints[r].position;return squaredDistance(i,o,n.y,n.x)<=t})}function getInstanceScore(e,t,n){return n.reduce(function(n,r,o){var i=r.position,s=r.score;return withinNmsRadiusOfCorrespondingPoint(e,t,i,o)||(n+=s),n},0)/n.length}var kLocalMaximumRadius=1;function decodeMultiplePoses(e,t,n,r,o,i,s,u){void 0===s&&(s=.5),void 0===u&&(u=20);for(var a=[],l=buildPartWithScoreQueue(s,kLocalMaximumRadius,e),p=u*u;a.length<i&&!l.empty();){var c=l.dequeue();if(!withinNmsRadiusOfCorrespondingPoint(a,p,getImageCoords(c.part,o,t),c.part.id)){var f=decodePose(c,e,t,o,n,r),d=getInstanceScore(a,p,f);a.push({keypoints:f,score:d})}}return a}function mod(e,t){return tidy(function(){var n=e.div(scalar(t,\"int32\"));return e.sub(n.mul(scalar(t,\"int32\")))})}function argmax2d(e){var t=e.shape,n=t[0],r=t[1],o=t[2];return tidy(function(){var t=e.reshape([n*r,o]).argMax(0),i=t.div(scalar(r,\"int32\")).expandDims(1),s=mod(t,r).expandDims(1);return concat([i,s],1)})}function getPointsConfidence(e,t){for(var n=t.shape[0],r=new Float32Array(n),o=0;o<n;o++){var i=t.get(o,0),s=t.get(o,1);r[o]=e.get(i,s,o)}return r}function getOffsetPoint$1(e,t,n,r){return{y:r.get(e,t,n),x:r.get(e,t,n+NUM_KEYPOINTS)}}function getOffsetVectors(e,t){for(var n=[],r=0;r<NUM_KEYPOINTS;r++){var o=getOffsetPoint$1(e.get(r,0).valueOf(),e.get(r,1).valueOf(),r,t),i=o.x,s=o.y;n.push(s),n.push(i)}return tensor2d(n,[NUM_KEYPOINTS,2])}function getOffsetPoints(e,t,n){return tidy(function(){var r=getOffsetVectors(e,n);return e.toTensor().mul(scalar(t,\"int32\")).toFloat().add(r)})}function decodeSinglePose(e,t,n){return __awaiter(this,void 0,void 0,function(){var r,o,i,s,u,a,l,p,c,f;return __generator(this,function(d){switch(d.label){case 0:return r=0,o=argmax2d(e),[4,Promise.all([e.buffer(),t.buffer(),o.buffer()])];case 1:return i=d.sent(),s=i[0],u=i[1],a=i[2],[4,(l=getOffsetPoints(a,n,u)).buffer()];case 2:return p=d.sent(),c=Array.from(getPointsConfidence(s,a)),f=c.map(function(e,t){return r+=e,{position:{y:p.get(t,0),x:p.get(t,1)},part:partNames[t],score:e}}),o.dispose(),l.dispose(),[2,{keypoints:f,score:r/f.length}]}})})}var MOBILENET_BASE_URL=\"https://storage.googleapis.com/tfjs-models/savedmodel/posenet/mobilenet/\",RESNET50_BASE_URL=\"https://storage.googleapis.com/tfjs-models/savedmodel/posenet/resnet50/\";function resNet50Checkpoint(e,t){var n=\"model-stride\"+e+\".json\";return 4===t?RESNET50_BASE_URL+\"float/\"+n:RESNET50_BASE_URL+\"quant\"+t+\"/\"+n}function mobileNetCheckpoint(e,t,n){var r={1:\"100\",.75:\"075\",.5:\"050\"},o=\"model-stride\"+e+\".json\";return 4===n?MOBILENET_BASE_URL+\"float/\"+r[t]+\"/\"+o:MOBILENET_BASE_URL+\"quant\"+n+\"/\"+r[t]+\"/\"+o}var imageNetMean=[-123.15,-115.9,-103.06],ResNet=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return __extends(t,e),t.prototype.preprocessInput=function(e){return e.add(imageNetMean)},t.prototype.nameOutputResults=function(e){var t=e[0],n=e[1];return{offsets:e[2],heatmap:e[3],displacementFwd:t,displacementBwd:n}},t}(BaseModel);function eitherPointDoesntMeetConfidence(e,t,n){return e<n||t<n}function getAdjacentKeyPoints(e,t){return connectedPartIndices.reduce(function(n,r){var o=r[0],i=r[1];return eitherPointDoesntMeetConfidence(e[o].score,e[i].score,t)?n:(n.push([e[o],e[i]]),n)},[])}var NEGATIVE_INFINITY=Number.NEGATIVE_INFINITY,POSITIVE_INFINITY=Number.POSITIVE_INFINITY;function getBoundingBox(e){return e.reduce(function(e,t){var n=e.maxX,r=e.maxY,o=e.minX,i=e.minY,s=t.position,u=s.x,a=s.y;return{maxX:Math.max(n,u),maxY:Math.max(r,a),minX:Math.min(o,u),minY:Math.min(i,a)}},{maxX:NEGATIVE_INFINITY,maxY:NEGATIVE_INFINITY,minX:POSITIVE_INFINITY,minY:POSITIVE_INFINITY})}function getBoundingBoxPoints(e){var t=getBoundingBox(e),n=t.minX,r=t.minY,o=t.maxX,i=t.maxY;return[{x:n,y:r},{x:o,y:r},{x:o,y:i},{x:n,y:i}]}function toTensorBuffers3D(e){return __awaiter(this,void 0,void 0,function(){return __generator(this,function(t){return[2,Promise.all(e.map(function(e){return e.buffer()}))]})})}function scalePose(e,t,n,r,o){return void 0===r&&(r=0),void 0===o&&(o=0),{score:e.score,keypoints:e.keypoints.map(function(e){var i=e.score,s=e.part,u=e.position;return{score:i,part:s,position:{x:u.x*n+o,y:u.y*t+r}}})}}function scalePoses(e,t,n,r,o){return void 0===r&&(r=0),void 0===o&&(o=0),1===n&&1===t&&0===r&&0===o?e:e.map(function(e){return scalePose(e,t,n,r,o)})}function flipPoseHorizontal(e,t){return{score:e.score,keypoints:e.keypoints.map(function(e){var n=e.score,r=e.part,o=e.position;return{score:n,part:r,position:{x:t-1-o.x,y:o.y}}})}}function flipPosesHorizontal(e,t){return t<=0?e:e.map(function(e){return flipPoseHorizontal(e,t)})}function toValidInputResolution(e,t){return isValidInputResolution(e,t)?e:Math.floor(e/t)*t+1}function validateInputResolution(e){util.assert(\"number\"==typeof e||\"object\"==typeof e,function(){return\"Invalid inputResolution \"+e+\". Should be a number or an object with width and height\"}),\"object\"==typeof e&&(util.assert(\"number\"==typeof e.width,function(){return\"inputResolution.width has a value of \"+e.width+\" which is invalid; it must be a number\"}),util.assert(\"number\"==typeof e.height,function(){return\"inputResolution.height has a value of \"+e.height+\" which is invalid; it must be a number\"}))}function getValidInputResolutionDimensions(e,t){return validateInputResolution(e),\"object\"==typeof e?[toValidInputResolution(e.height,t),toValidInputResolution(e.width,t)]:[toValidInputResolution(e,t),toValidInputResolution(e,t)]}var VALID_OUTPUT_STRIDES=[8,16,32];function assertValidOutputStride(e){util.assert(\"number\"==typeof e,function(){return\"outputStride is not a number\"}),util.assert(VALID_OUTPUT_STRIDES.indexOf(e)>=0,function(){return\"outputStride of \"+e+\" is invalid. It must be either 8, 16, or 32\"})}function isValidInputResolution(e,t){return(e-1)%t==0}function assertValidResolution(e,t){util.assert(\"number\"==typeof e[0]&&\"number\"==typeof e[1],function(){return\"both resolution values must be a number but had values \"+e}),util.assert(isValidInputResolution(e[0],t),function(){return\"height of \"+e[0]+\" is invalid for output stride \"+t+\".\"}),util.assert(isValidInputResolution(e[1],t),function(){return\"width of \"+e[1]+\" is invalid for output stride \"+t+\".\"})}function getInputTensorDimensions(e){return e instanceof Tensor?[e.shape[0],e.shape[1]]:[e.height,e.width]}function toInputTensor(e){return e instanceof Tensor?e:browser.fromPixels(e)}function padAndResizeTo(e,t){var n=t[0],r=t[1],o=getInputTensorDimensions(e),i=o[0],s=o[1],u=r/n,a=[0,0,0,0],l=a[0],p=a[1],c=a[2],f=a[3];return s/i<u?(l=0,p=0,c=Math.round(.5*(u*i-s)),f=Math.round(.5*(u*i-s))):(l=Math.round(.5*(1/u*s-i)),p=Math.round(.5*(1/u*s-i)),c=0,f=0),{resized:tidy(function(){var t=toInputTensor(e);return(t=pad3d(t,[[l,p],[c,f],[0,0]])).resizeBilinear([n,r])}),padding:{top:l,left:c,right:f,bottom:p}}}function scaleAndFlipPoses(e,t,n,r,o){var i=t[0],s=t[1],u=n[0],a=n[1],l=scalePoses(e,(i+r.top+r.bottom)/u,(s+r.left+r.right)/a,-r.top,-r.left);return o?flipPosesHorizontal(l,s):l}var MOBILENET_V1_CONFIG={architecture:\"MobileNetV1\",outputStride:16,multiplier:.75,inputResolution:257},VALID_ARCHITECTURE=[\"MobileNetV1\",\"ResNet50\"],VALID_STRIDE={MobileNetV1:[8,16,32],ResNet50:[32,16]},VALID_MULTIPLIER={MobileNetV1:[.5,.75,1],ResNet50:[1]},VALID_QUANT_BYTES=[1,2,4];function validateModelConfig(e){if(null==(e=e||MOBILENET_V1_CONFIG).architecture&&(e.architecture=\"MobileNetV1\"),VALID_ARCHITECTURE.indexOf(e.architecture)<0)throw new Error(\"Invalid architecture \"+e.architecture+\". Should be one of \"+VALID_ARCHITECTURE);if(null==e.inputResolution&&(e.inputResolution=257),validateInputResolution(e.inputResolution),null==e.outputStride&&(e.outputStride=16),VALID_STRIDE[e.architecture].indexOf(e.outputStride)<0)throw new Error(\"Invalid outputStride \"+e.outputStride+\". Should be one of \"+VALID_STRIDE[e.architecture]+\" for architecutre \"+e.architecture+\".\");if(null==e.multiplier&&(e.multiplier=1),VALID_MULTIPLIER[e.architecture].indexOf(e.multiplier)<0)throw new Error(\"Invalid multiplier \"+e.multiplier+\". Should be one of \"+VALID_MULTIPLIER[e.architecture]+\" for architecutre \"+e.architecture+\".\");if(null==e.quantBytes&&(e.quantBytes=4),VALID_QUANT_BYTES.indexOf(e.quantBytes)<0)throw new Error(\"Invalid quantBytes \"+e.quantBytes+\". Should be one of \"+VALID_QUANT_BYTES+\" for architecutre \"+e.architecture+\".\");return e}var SINGLE_PERSON_INFERENCE_CONFIG={flipHorizontal:!1},MULTI_PERSON_INFERENCE_CONFIG={flipHorizontal:!1,maxDetections:5,scoreThreshold:.5,nmsRadius:20};function validateMultiPersonInputConfig(e){var t=e.maxDetections,n=e.scoreThreshold,r=e.nmsRadius;if(t<=0)throw new Error(\"Invalid maxDetections \"+t+\". Should be > 0\");if(n<0||n>1)throw new Error(\"Invalid scoreThreshold \"+n+\". Should be in range [0.0, 1.0]\");if(r<=0)throw new Error(\"Invalid nmsRadius \"+r+\".\")}var PoseNet=function(){function e(e,t){assertValidOutputStride(e.outputStride),assertValidResolution(t,e.outputStride),this.baseModel=e,this.inputResolution=t}return e.prototype.estimateMultiplePoses=function(e,t){return void 0===t&&(t=MULTI_PERSON_INFERENCE_CONFIG),__awaiter(this,void 0,void 0,function(){var n,r,o,i,s,u,a,l,p,c,f,d,h,m,g,_,I,v,y,E,b;return __generator(this,function(N){switch(N.label){case 0:return n=__assign({},MULTI_PERSON_INFERENCE_CONFIG,t),validateMultiPersonInputConfig(t),r=this.baseModel.outputStride,o=this.inputResolution,i=getInputTensorDimensions(e),s=i[0],u=i[1],a=padAndResizeTo(e,o),l=a.resized,p=a.padding,c=this.baseModel.predict(l),f=c.heatmapScores,d=c.offsets,h=c.displacementFwd,m=c.displacementBwd,[4,toTensorBuffers3D([f,d,h,m])];case 1:return g=N.sent(),_=g[0],I=g[1],v=g[2],y=g[3],[4,decodeMultiplePoses(_,I,v,y,r,n.maxDetections,n.scoreThreshold,n.nmsRadius)];case 2:return E=N.sent(),b=scaleAndFlipPoses(E,[s,u],o,p,n.flipHorizontal),f.dispose(),d.dispose(),h.dispose(),m.dispose(),l.dispose(),[2,b]}})})},e.prototype.estimateSinglePose=function(e,t){return void 0===t&&(t=SINGLE_PERSON_INFERENCE_CONFIG),__awaiter(this,void 0,void 0,function(){var n,r,o,i,s,u,a,l,p,c,f,d,h,m,g,_;return __generator(this,function(I){switch(I.label){case 0:return n=__assign({},SINGLE_PERSON_INFERENCE_CONFIG,t),r=this.baseModel.outputStride,o=this.inputResolution,i=getInputTensorDimensions(e),s=i[0],u=i[1],a=padAndResizeTo(e,o),l=a.resized,p=a.padding,c=this.baseModel.predict(l),f=c.heatmapScores,d=c.offsets,h=c.displacementFwd,m=c.displacementBwd,[4,decodeSinglePose(f,d,r)];case 1:return g=I.sent(),_=scaleAndFlipPoses([g],[s,u],o,p,n.flipHorizontal),f.dispose(),d.dispose(),h.dispose(),m.dispose(),l.dispose(),[2,_[0]]}})})},e.prototype.estimatePoses=function(e,t){return __awaiter(this,void 0,void 0,function(){return __generator(this,function(n){switch(n.label){case 0:return\"single-person\"!==t.decodingMethod?[3,2]:[4,this.estimateSinglePose(e,t)];case 1:return[2,[n.sent()]];case 2:return[2,this.estimateMultiplePoses(e,t)]}})})},e.prototype.dispose=function(){this.baseModel.dispose()},e}();function loadMobileNet(e){return __awaiter(this,void 0,void 0,function(){var t,n,r,o,i,s,u;return __generator(this,function(a){switch(a.label){case 0:if(t=e.outputStride,n=e.quantBytes,r=e.multiplier,null==tf)throw new Error(\"Cannot find TensorFlow.js. If you are using a <script> tag, please also include @tensorflow/tfjs on the page before using this\\n        model.\");return o=mobileNetCheckpoint(t,r,n),[4,loadGraphModel(e.modelUrl||o)];case 1:return i=a.sent(),s=new MobileNet(i,t),u=getValidInputResolutionDimensions(e.inputResolution,s.outputStride),[2,new PoseNet(s,u)]}})})}function loadResNet(e){return __awaiter(this,void 0,void 0,function(){var t,n,r,o,i,s;return __generator(this,function(u){switch(u.label){case 0:if(t=e.outputStride,n=e.quantBytes,null==tf)throw new Error(\"Cannot find TensorFlow.js. If you are using a <script> tag, please also include @tensorflow/tfjs on the page before using this\\n        model.\");return r=resNet50Checkpoint(t,n),[4,loadGraphModel(e.modelUrl||r)];case 1:return o=u.sent(),i=new ResNet(o,t),s=getValidInputResolutionDimensions(e.inputResolution,i.outputStride),[2,new PoseNet(i,s)]}})})}function load(e){return void 0===e&&(e=MOBILENET_V1_CONFIG),__awaiter(this,void 0,void 0,function(){return __generator(this,function(t){return\"ResNet50\"===(e=validateModelConfig(e)).architecture?[2,loadResNet(e)]:\"MobileNetV1\"===e.architecture?[2,loadMobileNet(e)]:[2,null]})})}var version=\"2.2.1\";export{decodeMultiplePoses,decodeSinglePose,MobileNet,partChannels,partIds,partNames,poseChain,load,PoseNet,getAdjacentKeyPoints,getBoundingBox,getBoundingBoxPoints,scaleAndFlipPoses,scalePose,version};\n","import { ArgumentType, BlockType, Extension, Block, DefineBlock, Environment, ExtensionMenuDisplayDetails, RuntimeEvent, ValueOf, extractLegacySupportFromOldGetInfo } from \"$common\";\nimport legacy from \"./legacy\";\n// import Video from '../../../packages/scratch-vm/src/io/video';\n\nimport * as posenet from '@tensorflow-models/posenet';\n\n/**\n * States what the video sensing activity can be set to.\n */\nconst VideoState = {\n  /** Video turned off. */\n  OFF: 0,\n\n  /** Video turned on with default y axis mirroring. */\n  ON: 1,\n\n  /** Video turned on without default y axis mirroring. */\n  ON_FLIPPED: 2\n} as const;\n\n/**\n * Contains descriptions of the blocks of the Body Sensing extension\n */\ntype Details = {\n  name: \"Body Sensing\",\n  description: \"Sense body position with the camera.\",\n  iconURL: \"pose-body.png\",\n  insetIconURL: \"pose-body-small.svg\"\n};\n\n/**\n * Contains descriptions of the blocks of the Block Sensing extension\n */\ntype Blocks = {\n  goToBodyPartBlock(bodyPart: string): void;\n  // these video blocks are present in a few different extensions, perhaps making a file just for these?\n  videoToggleBlock(state: number): void;\n  setVideoTransparencyBlock(transparency: number): void;\n};\n\nexport default class PoseBody extends Extension<Details, Blocks> {\n  /**\n   * The state of where the body and its parts are estimated to be\n   */\n  poseState;\n\n  /**\n   * The body model from posenet\n   */\n  private bodyModel;\n\n  /**\n   * The current video state\n   * @type {number}\n   */\n  globalVideoState: number;\n\n  /**\n   * The current transparency of the video\n   * @type {number}\n   */\n  globalVideoTransparency: number;\n\n  /**\n   * Acts like class PoseBody's constructor (instead of a child class constructor)\n   * @param env \n   */\n  init(env: Environment) {\n\n    this.runtime = env.runtime;\n    const EXTENSION_ID = 'poseBody';\n\n    /* Unused but possibly needed in the future */\n    // this.runtime.registerPeripheralExtension(EXTENSION_ID, this);\n    // this.runtime.connectPeripheral(EXTENSION_ID, 0);\n    // this.runtime.emit(this.runtime.constructor.PERIPHERAL_CONNECTED);\n\n    if (this.runtime.ioDevices) {\n      // Possibly unnecessary, keep commented just in case\n      // this.runtime.on(RuntimeEvent.ProjectLoaded, this.projectStarted.bind(this));\n      // this.runtime.on(RuntimeEvent.ProjectRunStart, this.reset.bind(this)); \n\n      this._loop();\n    }\n  }\n\n  /**\n   * Dimensions the video stream is analyzed at after its rendered to the\n   * sample canvas.\n   * @type {Array.<number>}\n   */\n  static get DIMENSIONS() {\n    return [480, 360];\n  }\n\n  /**\n   * Converts the coordinates from the body pose estimate to Scratch coordinates\n   * @param x \n   * @param y\n   * @param z\n   * @returns enum\n   */\n  tfCoordsToScratch({ x, y }) {\n    return { x: x - 250, y: 200 - y };\n  }\n\n  /**\n   * Get the latest values for video transparency and state,\n   * and set the video device to use them.\n   */\n  projectStarted() {\n    this.setTransparency(this.globalVideoTransparency);\n    this.toggleVideo(this.globalVideoState);\n  }\n\n  /**\n   * Used by registerPeripheral and connectPeripheral functions\n   */\n  // reset() {\n  // }\n\n  /**\n   * Used by registerPeripheral and connectPeripheral functions\n   * Checks if the body pose estimate is ready to be used\n   * @returns {boolean} true if connected, false if not connected\n   */\n  // isConnected() {\n  //   return this.hasPose();\n  // }\n\n  /**\n   * Checks if there is a body in the video frame that has a pose\n   * @returns {boolean} true if there is a body pose, false otherwise\n   */\n  hasPose() {\n    return this.poseState && this.poseState.keypoints && this.poseState.score > 0.01;\n  }\n\n  /**\n   * Runs for the entire time the extension is running. Gets information about the video frame.\n   * Estimates where the body is on the video frame. Creates a delay to prevent this function from constantly running,\n   * so as to prevent the entire program from slowing down.\n   */\n  async _loop() {\n    while (true) {\n      const frame = this.runtime.ioDevices.video.getFrame({\n        format: 'image-data',\n        // format: Video.FORMAT_IMAGE_DATA,\n        dimensions: PoseBody.DIMENSIONS\n      });\n\n      const time = +new Date();\n      if (frame) {\n        this.poseState = await this.estimatePoseOnImage(frame);\n\n        // if (this.isConnected()) {\n        //   this.runtime.emit(this.runtime.constructor.PERIPHERAL_CONNECTED);\n        // } else {\n        //   this.runtime.emit(this.runtime.constructor.PERIPHERAL_DISCONNECTED);\n        // }\n\n      }\n      const estimateThrottleTimeout = (+new Date() - time) / 4;\n      await new Promise(r => setTimeout(r, estimateThrottleTimeout));\n    }\n  }\n\n  /**\n   * Estimates where the body is on the video frame.\n   * @param imageElement\n   * @returns {Promise<AnnotatedPrediction[]>}\n   */\n  async estimatePoseOnImage(imageElement) {\n    // load the posenet model from a checkpoint\n    const bodyModel = await this.ensureBodyModelLoaded();\n    return await bodyModel.estimateSinglePose(imageElement, {\n      flipHorizontal: false\n    });\n  }\n\n  /**\n   * Gets the body model from posenet\n   * @returns \n   */\n  async ensureBodyModelLoaded() {\n    this.bodyModel ??= await posenet.load();\n    return this.bodyModel;\n  }\n\n  /**\n   * Turns the video camera off/on/on and flipped. This is called in the operation of videoToggleBlock\n   * @param state \n   */\n  toggleVideo(state: number) {\n    if (state === VideoState.OFF) return this.runtime.ioDevices.video.disableVideo();\n\n    this.runtime.ioDevices.video.enableVideo();\n    // Mirror if state is ON. Do not mirror if state is ON_FLIPPED.\n    this.runtime.ioDevices.video.mirror = (state === VideoState.ON);\n  }\n\n  /**\n   * Sets the video's transparency. This is called in the operation of setVideoTransparencyBlock\n   * @param transparency \n   */\n  setTransparency(transparency: number) {\n    const trans = Math.max(Math.min(transparency, 100), 0);\n    this.runtime.ioDevices.video.setPreviewGhost(trans);\n  }\n\n  /**\n   * Sets up the default settings for the extension. Gives information related to each of the extension's blocks\n   * @returns The extension's blocks\n   */\n  defineBlocks(): PoseBody[\"BlockDefinitions\"] {\n\n    /**\n     * Sets up the extension's default video settings\n     */\n    this.globalVideoState = VideoState.ON;\n    this.globalVideoTransparency = 50;\n    this.projectStarted();\n    this.bodyModel = null;\n\n    /**\n     * The options for each finger\n     * @type {Array}\n     */\n    const bodyOptions =\n      [\n        { text: 'nose', value: 'nose' },\n        { text: 'right eye', value: 'leftEye' },\n        { text: 'left eye', value: 'rightEye' },\n        { text: 'right ear', value: 'leftEar' },\n        { text: 'left ear', value: 'rightEar' },\n        { text: 'right shoulder', value: 'leftShoulder' },\n        { text: 'left shoulder', value: 'rightShoulder' },\n        { text: 'right elbow', value: 'leftElbow' },\n        { text: 'left elbow', value: 'rightElbow' },\n        { text: 'right wrist', value: 'leftWrist' },\n        { text: 'left wrist', value: 'rightWrist' },\n        { text: 'right hip', value: 'leftHip' },\n        { text: 'left hip', value: 'rightHip' },\n        { text: 'right knee', value: 'leftKnee' },\n        { text: 'left knee', value: 'rightKnee' },\n        { text: 'right ankle', value: 'leftAnkle' },\n        { text: 'left ankle', value: 'rightAnkle' },\n      ];\n\n    const handlerOptions = bodyOptions.map(part => part.value);\n\n    // type DefineGoToBodyPart = DefineBlock<PoseBody, Blocks[\"goToBodyPartBlock\"]>;\n    const goToBodyPartBlock = () => legacy.goToPart({\n      type: BlockType.Command,\n      arg: {\n        type: ArgumentType.String,\n        options: {\n          acceptsReporters: true,\n          items: bodyOptions,\n          handler: (bodyPart: string) => {\n            return handlerOptions.includes(bodyPart) ? bodyPart : 'nose';\n          }\n        }\n      },\n      text: (bodyPart: string) => `go to ${bodyPart}`,\n      operation: (bodyPart: string, util) => {\n\n        if (this.hasPose()) {\n          const { x, y } = this.tfCoordsToScratch(this.poseState.keypoints.find(point => point.part === bodyPart).position);\n          (util.target as any).setXY(x, y, false);\n        }\n      }\n    });\n\n    // type DefineVideoToggle = DefineBlock<PoseBody, Blocks[\"videoToggleBlock\"]>;\n    const videoToggleBlock = () => legacy.videoToggle({\n      type: BlockType.Command,\n      arg: {\n        type: ArgumentType.Number,\n        options: {\n          acceptsReporters: true,\n          items: [{ text: 'off', value: VideoState.OFF }, { text: 'on', value: VideoState.ON }, { text: 'on and flipped', value: VideoState.ON_FLIPPED }],\n          handler: (video_state: number) => {\n            return Math.min(Math.max(video_state, VideoState.OFF), VideoState.ON_FLIPPED);\n          }\n        }\n      },\n      text: (video_state: number) => `turn video ${video_state}`,\n      operation: (video_state: number) => {\n        this.toggleVideo(video_state);\n      }\n    });\n\n    // type DefineSetVideoTransparency = DefineBlock<PoseBody, Blocks[\"setVideoTransparencyBlock\"]>;\n    const setVideoTransparencyBlock = () => legacy.setVideoTransparency({\n      type: BlockType.Command,\n      arg: { type: ArgumentType.Number, defaultValue: 50 },\n      text: (transparency: number) => `set video transparency to ${transparency}`,\n      operation: (transparency: number) => {\n        this.setTransparency(transparency);\n      }\n    });\n\n    return {\n      goToBodyPartBlock,\n      videoToggleBlock,\n      setVideoTransparencyBlock\n    }\n  }\n}"],"names":["poseBody","exports","$common","legacy","extractLegacySupportFromOldGetInfo","blocks","opcode","text","blockType","BlockType","Command","isTerminal","arguments","PART","type","ArgumentType","String","defaultValue","menu","formatMessage","id","default","description","VIDEO_STATE","Number","TRANSPARENCY","menus","acceptReporters","items","value","ATTRIBUTE","SUBJECT","t","e","n","Object","setPrototypeOf","__proto__","Array","hasOwnProperty","r","this","constructor","prototype","create","Promise","o","a","i","u","next","s","throw","done","then","apply","label","sent","trys","ops","return","Symbol","iterator","TypeError","call","pop","length","push","global","flags","flagRegistry","urlFlags","populateURLFlags","setPlatform","platform","console","warn","platformName","registerFlag","evaluationFn","setHook","set","get","evaluateFlag","getNumber","getBool","getFlags","defineProperty","enumerable","configurable","Error","setFlags","assign","reset","location","search","replace","join","tfjsflags","split","forEach","toLowerCase","decodeURIComponent","Map","c","l","m","h","f","entries","d","kernelName","backendName","has","p","y","Math","random","x","max","min","b","w","C","E","S","R","I","isArray","V","k","A","T","tanh","exp","D","ceil","sqrt","N","repeat","F","setTimeout","_","slice","O","map","concat","every","M","sort","newShape","keptDims","B","Float32Array","Int32Array","Uint8Array","P","L","isNaN","isFinite","W","U","z","G","H","q","K","j","X","Y","$","Q","round","J","reduce","Z","tt","et","now","nt","isInteger","rt","encode","ot","decode","at","it","floor","st","freeze","shuffle","clamp","nearestLargerEven","sum","randUniform","distSquared","assert","assertShapesMatch","assertNonNull","flatten","sizeFromShape","isScalarShape","arraysEqual","isInt","sizeToSquarishShape","createShuffledIndices","Uint32Array","rightPad","repeatedTry","inferFromImplicitShape","parseAxisParam","squeezeShape","getTypedArrayFromDType","getArrayFromDType","checkConversionForErrors","isValidDtype","hasEncodingLoss","isTypedArray","bytesPerElement","bytesFromStringArray","isString","isBoolean","isNumber","inferDtype","isFunction","nearestDivisor","computeStrides","toTypedArray","toNestedArray","makeOnesTypedArray","makeZerosTypedArray","assertNonNegativeIntegerDimensions","fetch","encodeString","decodeString","locToIndex","indexToLoc","ut","backendTimer","logger","ct","profileKernel","time","data","dtype","getExtraProfileInfo","logKernelProfile","kernelMs","error","rank","size","shape","toString","log","pt","parseFloat","toFixed","vt","gt","mt","values","strides","toTensor","yt","makeTensor","xt","bt","wt","kept","isDisposedInternal","dataId","rankType","throwIfDisposed","as1D","asScalar","reshape","as2D","as3D","as4D","as5D","asType","cast","buffer","bufferSync","dataSync","array","arraySync","read","readSync","bytes","dispose","isDisposed","disposeTensor","toFloat","toInt","toBool","print","reshapeAs","expandDims","cumsum","squeeze","clone","fill","from","v","g","dt","gather","matMul","dot","norm","reverse","stack","unstack","batchNormalization","batchNorm","all","any","logSumExp","prod","mean","argMin","argMax","addStrict","atan2","sub","subStrict","pow","powStrict","mul","mulStrict","floorDiv","divStrict","minimum","minimumStrict","maximum","maximumStrict","mod","modStrict","squaredDifferenceStrict","notEqual","notEqualStrict","less","lessStrict","equal","equalStrict","lessEqual","lessEqualStrict","greater","greaterStrict","greaterEqual","greaterEqualStrict","logicalAnd","logicalOr","logicalNot","logicalXor","where","neg","sign","isInf","expm1","log1p","rsqrt","square","reciprocal","abs","clipByValue","relu","relu6","elu","selu","leakyRelu","prelu","sigmoid","logSigmoid","softplus","zerosLike","onesLike","sin","cos","tan","asin","acos","atan","sinh","cosh","asinh","acosh","atanh","erf","step","softmax","logSoftmax","resizeBilinear","image","resizeNearestNeighbor","conv1d","conv2d","conv2dTranspose","depthwiseConv2D","depthwiseConv2d","separableConv2d","avgPool","maxPool","localResponseNormalization","pool","variable","makeVariable","unsortedSegmentSum","batchToSpaceND","spaceToBatchND","topk","stridedSlice","depthToSpace","fft","spectral","ifft","rfft","irfft","hasInstance","Ct","Et","Rt","It","kt","St","trainable","name","incRef","disposeVariable","Function","R0","R1","R2","R3","R4","R5","R6","float32","int32","bool","complex64","At","Tt","Dt","Nt","Ft","_t","add","Set","Ot","Mt","makeTypesMatch","assertTypesMatch","isTensorInList","some","getTensorsInContainer","Bt","registeredVariables","nextTapeNodeId","numBytes","numTensors","numStringTensors","numDataBuffers","gradientDepth","kernelDepth","scopeStack","numDataMovesStack","nextScopeId","tensorInfo","WeakMap","profiling","activeProfile","newBytes","newTensors","peakBytes","kernels","result","Pt","ENV","registry","registryFactory","pendingBackendInitId","state","ready","pendingBackendInit","backendInstance","getSortedBackends","initializeBackend","success","setBackend","initializeBackendsAndReturnBest","asyncInit","backendNames","keys","findBackend","findBackendFactory","factory","registerBackend","priority","setupRegisteredKernels","profiler","setupFunc","disposeRegisteredKernels","disposeFunc","resolve","catch","message","removeBackend","moveData","backend","disposeData","move","shouldCheckForMemLeaks","tidy","scopedRun","startScope","endScope","nextTensorId","nextVariableId","makeTensorFromDataId","addTapeNode","activeScope","runKernel","runKernelFunc","checkKernelForMemLeak","numDataIds","isTapeOn","kernelFunc","inputs","attrs","getTensorsForGradient","filter","saveTensorsForBackwardMode","keep","bytesAdded","totalBytesSnapshot","tensorsAdded","totalTensorsSnapshot","inputShapes","outputShapes","inputsToSave","outputsToSave","saveAllInputs","write","refCount","track","delete","disposeVariables","memory","unreliable","reasons","profile","outputs","saved","gradFunc","gradient","activeTape","startTape","endTape","scopeId","gradients","Lt","grads","customGrad","wallMs","window","process","self","_tfengine","Wt","document","WorkerGlobalScope","Ut","versions","node","navigator","userAgent","test","vendor","Vt","zt","Gt","Ht","qt","alpha","antialias","premultipliedAlpha","preserveDrawingBuffer","depth","stencil","failIfMajorPerformanceCaveat","Kt","jt","OffscreenCanvas","createElement","addEventListener","preventDefault","getContext","isContextLost","disable","DEPTH_TEST","STENCIL_TEST","BLEND","DITHER","POLYGON_OFFSET_FILL","SAMPLE_COVERAGE","enable","SCISSOR_TEST","CULL_FACE","cullFace","BACK","Xt","Yt","$t","Qt","R32F","R16F","RGBA16F","RGBA32F","RED","HALF_FLOAT","FLOAT","RGBA","HALF_FLOAT_OES","internalFormatFloat","internalFormatHalfFloat","internalFormatPackedHalfFloat","internalFormatPackedFloat","textureFormatFloat","downloadTextureFormat","downloadUnpackNumChannels","defaultNumChannels","textureTypeHalfFloat","textureTypeFloat","Jt","getError","NO_ERROR","ne","DENSE","SHARED_BATCH","RENDER","UPLOAD","PIXELS","DOWNLOAD","UNPACKED_FLOAT16","UNPACKED_FLOAT32","PACKED_4X1_UNSIGNED_BYTE","PACKED_2X2_FLOAT32","PACKED_2X2_FLOAT16","ee","INVALID_ENUM","INVALID_VALUE","INVALID_OPERATION","INVALID_FRAMEBUFFER_OPERATION","OUT_OF_MEMORY","CONTEXT_LOST_WEBGL","re","ke","getExtension","oe","createShader","VERTEX_SHADER","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","ae","FRAGMENT_SHADER","ue","exec","ie","se","ce","createProgram","le","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","he","validateProgram","VALIDATE_STATUS","fe","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","STATIC_DRAW","de","ELEMENT_ARRAY_BUFFER","pe","createTexture","ve","ge","createFramebuffer","me","getAttribLocation","vertexAttribPointer","enableVertexAttribArray","ye","Se","activeTexture","TEXTURE0","bindTexture","TEXTURE_2D","xe","getUniformLocation","be","we","uniform1i","Ce","bindFramebuffer","FRAMEBUFFER","framebufferTexture2D","COLOR_ATTACHMENT0","Ee","Re","checkFramebufferStatus","FRAMEBUFFER_COMPLETE","Ie","FRAMEBUFFER_INCOMPLETE_ATTACHMENT","FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT","FRAMEBUFFER_INCOMPLETE_DIMENSIONS","FRAMEBUFFER_UNSUPPORTED","MAX_COMBINED_TEXTURE_IMAGE_UNITS","Ae","Te","De","Ne","Fe","_e","Oe","getParameter","MAX_TEXTURE_SIZE","Me","MAX_TEXTURE_IMAGE_UNITS","Be","Pe","Le","We","Ve","Ue","texImage2D","deleteTexture","deleteFramebuffer","ze","fenceSync","Ge","callAndCheck","canBeRepresented","getWebGLErrorMessage","getExtensionOrThrow","createVertexShader","createFragmentShader","createStaticVertexBuffer","createStaticIndexBuffer","getNumChannels","validateTextureSize","bindVertexBufferToProgramAttribute","bindTextureUnit","unbindTextureUnit","getProgramUniformLocationOrThrow","getProgramUniformLocation","bindTextureToProgramUniformSampler","bindCanvasToFramebuffer","viewport","canvas","width","height","scissor","bindColorTextureToFramebuffer","unbindColorTextureFromFramebuffer","validateFramebuffer","getFramebufferErrorMessage","getBatchDim","getRowsCols","getShapeAs3D","getTextureShapeFromLogicalShape","isReshapeFree","getWebGLMaxTextureSize","resetMaxTextureSize","resetMaxTexturesInShader","getMaxTexturesInShader","getWebGLDisjointQueryTimerVersion","hasExtension","isWebGLVersionEnabled","isCapableOfRenderingToFloatTexture","isDownloadFloatTextureEnabled","isWebGLFenceEnabled","He","Xe","Ze","tn","en","dn","pn","vn","gn","indexOf","mn","yn","xn","bn","wn","Cn","En","Rn","In","kn","Sn","An","endsWith","substring","opera","substr","Tn","complex_","complex","$real","$imag","Dn","real_","real","$input","Nn","imag_","imag","Fn","_n","On","Mn","Bn","Pn","Ln","Wn","Un","Vn","zn","Gn","Hn","qn","linspace","Kn","jn","onesLike_","Xn","zerosLike_","Yn","concat_","axis","tr","$n","concat1d_","Qn","concat2d_","Jn","concat3d_","Zn","concat4d_","split_","$x","er","nr","rr","batchToSpaceND_","or","cast_","ar","cumsum_","transpose","permutedX","ir","depthToSpace_","sr","expandDims_","splice","ur","reshape_","cr","spaceToBatchND_","lr","squeeze_","hr","stack_","fr","unstack_","dr","pr","vr","gr","mr","yr","xr","wr","Er","Sr","Ar","Tr","Dr","Nr","Or","add_","Mr","unshift","Br","Pr","Lr","abs_","complexAbs","Wr","acos_","Ur","acosh_","Vr","asin_","zr","asinh_","Gr","atan_","div","Hr","atanh_","qr","ceil_","Kr","clipByValue_","clip","jr","cos_","Xr","cosh_","Yr","erf_","PI","$r","exp_","Qr","expm1_","Jr","floor_","Zr","log_","to","log1p_","eo","logSigmoid_","no","neg_","ro","reciprocal_","oo","round_","ao","rsqrt_","io","sigmoid_","so","sign_","uo","isNaN_","co","isInf_","lo","isFinite_","ho","sin_","fo","sinh_","po","softplus_","vo","sqrt_","go","step_","mo","tan_","yo","tanh_","xo","addStrict_","bo","atan2_","$a","$b","wo","divStrict_","Co","floorDiv_","Eo","maximum_","Ro","maximumStrict_","Io","minimum_","ko","minimumStrict_","So","mod_","Ao","modStrict_","To","mul_","multiply","Do","mulStrict_","No","pow_","Fo","powStrict_","_o","squaredDifferenceStrict_","squaredDifference","Oo","sub_","subtract","Mo","subStrict_","Bo","div_","realDivide","Po","Lo","prepareAndValidate","Uo","Vo","zo","Go","sliceRank","numUpdates","sliceSize","outputSize","Ho","validateUpdateShape","validateInput","calculateShapes","qo","Ko","jo","Xo","MIN_SAFE_INTEGER","MAX_SAFE_INTEGER","Yo","$o","Qo","Jo","assertParamsValid","maskToAxes","computeOutShape","startForAxis","stopForAxis","isSliceContinous","computeFlatOffset","ra","oa","aa","ia","softmax_","logits","dim","sa","logSoftmax_","ua","transpose_","perm","ca","dataMover","dataIdsCount","la","ha","floatPrecision","epsilon","batchMatMul","fusedBatchMatMul","transposeA","transposeB","bias","activation","preluActivationWeights","addN","select","eluDer","int","fusedConv2d","input","convInfo","conv2dDerInput","conv2dDerFilter","fusedDepthwiseConv2D","depthwiseConv2DDerInput","depthwiseConv2DDerFilter","conv3d","conv3dDerInput","conv3dDerFilter","maxPoolBackprop","avgPoolBackprop","avgPool3d","avgPool3dBackprop","maxPool3d","maxPool3dBackprop","tile","pad","gatherND","scatterND","resizeBilinearBackprop","resizeNearestNeighborBackprop","localResponseNormalization4D","LRNGrad","multinomial","oneHot","nonMaxSuppression","cropAndResize","sparseToDense","diag","fa","ma","pa","da","ya","va","xa","top","bottom","left","right","ga","ba","padInfo","outHeight","outWidth","batchSize","dataFormat","inHeight","inWidth","inChannels","outChannels","strideHeight","strideWidth","filterHeight","filterWidth","effectiveFilterHeight","effectiveFilterWidth","dilationHeight","dilationWidth","inShape","outShape","filterShape","front","back","outDepth","inDepth","strideDepth","filterDepth","effectiveFilterDepth","dilationDepth","wa","Ca","Ea","Ra","Ia","ka","Sa","castTensor","reshapeTensor","linspaceImpl","upcastType","axesAreInnerMostDims","combineLocations","computeOutAndReduceShapes","expandShapeToKeepDim","assertAxesAreInnerMostDims","getAxesPermutation","getUndoAxesPermutation","getInnerMostAxes","getBroadcastDims","getReductionAxes","assertAndGetBroadcastShape","assertParamsConsistent","computePool2DInfo","computePool3DInfo","computeConv2DInfo","computeConv3DInfo","computeDefaultPad","tupleValuesAreOne","eitherStridesOrDilationsAreOne","convertConv2DDataFormat","PARALLELIZE_THRESHOLD","computeOptimalWindowSize","Aa","Ta","Da","Na","Fa","_a","Oa","Ba","selectedIndices","Ma","numValidOutputs","selectedScores","score","boxIndex","suppressBeginIndex","Wa","Pa","La","subarray","Ua","Va","za","index","Ga","Ha","outputShape","variableNames","userCode","qa","packedInputs","packedOutput","Ka","windowSize","inSize","ja","Xa","Ya","version","attribute","varyingVs","varyingFs","texture2D","output","defineOutput","defineSpecialNaN","defineSpecialInf","defineRound","Qa","Ja","Za","shapeInfo","logicalShape","isUniform","ei","ti","charAt","toUpperCase","ui","texShape","flatOffset","ni","ri","oi","isPacked","ai","ii","si","ci","li","JSON","parse","stringify","hi","fi","di","pi","vi","yi","xi","bi","wi","Ei","Ri","ki","Si","supportsBroadcasting","Ai","getCustomSetupFunc","minLoc","getUniformLocationNoThrow","maxLoc","gl","uniform1f","Ti","Di","Ni","Fi","_i","Oi","Mi","Bi","Pi","Li","Wi","Ui","Vi","zi","Gi","Hi","qi","Ki","ji","outPackingScheme","Xi","Yi","blockSize","getHeightCoordString","getWidthCoordString","getDepthCoordString","getOutputDepthSize","getInputSamplingString","$i","Qi","outTexUsage","Ji","Zi","ts","rs","os","valueLoc","as","is","sliceDim","ss","us","cs","Uint16Array","ls","texParameteri","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","TEXTURE_MIN_FILTER","NEAREST","TEXTURE_MAG_FILTER","hs","fs","ds","UNSIGNED_BYTE","ps","vs","gs","ms","ys","xs","PIXEL_PACK_BUFFER","STREAM_READ","readPixels","bs","getBufferSubData","ws","Cs","Es","Rs","createVertexBuffer","createIndexBuffer","createFloat32MatrixTexture","createFloat16MatrixTexture","createUnsignedBytesMatrixTexture","createPackedMatrixTexture","createFloat16PackedMatrixTexture","bindVertexProgramAttributeStreams","uploadDenseMatrixToTexture","uploadPixelDataToTexture","createBufferFromOutputTexture","downloadFloat32MatrixFromBuffer","downloadByteEncodedFloatMatrixFromOutputTexture","downloadPackedMatrixFromBuffer","downloadMatrixFromPackedOutputTexture","Is","outputTexture","program","disposed","vertexAttrsAreBound","itemsToPoll","textureFloatExtension","debug","textureHalfFloatExtension","colorBufferFloatExtension","colorBufferHalfFloatExtension","vertexBuffer","indexBuffer","framebuffer","textureConfig","finish","deleteBuffer","deleteMatrixTexture","downloadMatrixDriver","createBufferFromTexture","bindTextureToFrameBuffer","unbindTextureToFrameBuffer","createAndWaitForFence","createFence","pollFence","SYNC_GPU_COMMANDS_COMPLETE","flush","clientWaitSync","ALREADY_SIGNALED","CONDITION_SATISFIED","beginQuery","endQuery","isQueryAvailable","query","isFencePassed","downloadMatrixFromPackedTexture","attachShader","setProgram","deleteProgram","useProgram","getAttributeLocation","setInputMatrixTexture","throwIfNoProgram","setOutputMatrixTexture","setOutputMatrixTextureDriver","setOutputPackedMatrixTexture","setOutputMatrixWriteRegion","setOutputMatrixWriteRegionDriver","setOutputPackedMatrixWriteRegion","debugValidate","executeProgram","drawElements","TRIANGLES","UNSIGNED_SHORT","blockUntilAllProgramsCompleted","getQueryTimerExtension","disjointQueryTimerExtension","getQueryTimerExtensionWebGL2","getQueryTimerExtensionWebGL1","createQuery","TIME_ELAPSED_EXT","createQueryEXT","beginQueryEXT","endQueryEXT","waitForQueryAndGetTime","getQueryTime","getQueryParameter","QUERY_RESULT","getQueryObjectEXT","QUERY_RESULT_EXT","QUERY_RESULT_AVAILABLE","disjoint","GPU_DISJOINT_EXT","QUERY_RESULT_AVAILABLE_EXT","addItemToPoll","pollItems","isDoneFn","resolveFn","ks","texData","Ss","As","Ts","depthRadius","beta","Ds","Ns","Fs","_s","Os","seedLoc","Ms","Bs","Ps","Ls","Ws","Us","Vs","zs","Gs","Hs","qs","Ks","js","Xs","Ys","$s","Qs","numSegments","Js","Zs","tu","startLoc","uniform1iv","eu","nu","ru","gpgpu","numUsedTextures","numFreeTextures","freeTextures","logEnabled","usedTextures","acquireTexture","ou","au","shift","releaseTexture","getNumUsedTextures","getNumFreeTextures","iu","su","uu","cu","lu","fu","du","pu","vu","gu","mu","yu","xu","bu","wu","Cu","Eu","Ru","Iu","ku","Su","Au","Tu","Du","Fu","_u","Ou","Mu","Bu","Pu","Lu","Uu","pendingRead","pendingDisposal","WeakSet","dataRefCount","numBytesInGPU","uploadWaitMs","downloadWaitMs","warnedAboutMemory","pendingDeletes","binaryCache","gpgpuCreatedLocally","textureManager","numMBBeforeWarning","screen","devicePixelRatio","cpuBackend","checkNumericalProblems","usage","complexTensors","runWebGLProgram","convertAndCacheOnCPU","activeTimers","getValuesFromTexture","texture","programTimersStack","startTimer","startMs","endMs","endTimer","releaseGPUData","origDataId","computeBytes","getTexture","uploadToGPU","getDataInfo","getCPUBackend","shouldExecuteOnCPU","getGPGPUContext","makeOutput","compileAndRun","shallowSlice","packedUnaryOp","makeComplexComponentTensorInfo","packedBinaryOp","argReduce","argReducePacked","segOpCompute","argMinMaxReduce","complexSeparableBinaryOp","conv2dByMatMul","conv2dWithIm2Row","packedReshape","fftImpl","makeTensorInfo","unpackTensor","packTensor","uniformValues","getAndSaveBinary","source","webGLProgram","uniformLocations","inShapeInfos","outShapeInfo","infLoc","nanLoc","NaN","uniform1fv","getTextureManager","HTMLCanvasElement","remove","floatPrecisionValue","Vu","zu","charCodeAt","s0","s1","s2","double","quick","alea","Gu","xor128","Hu","xorwow","qu","Date","xorshift7","Ku","xor4096","ju","tychei","Xu","entropy","randomBytes","crypto","msCrypto","getRandomValues","plugins","pass","fromCharCode","require","Yu","$u","addN_","Qu","Ju","Zu","scale","offset","variance","varianceEpsilon","tc","ec","batchNormalization_","nc","batchNorm_","rc","oc","batchNormalization2d_","ac","batchNorm2d_","ic","sc","batchNormalization3d_","uc","batchNorm3d_","cc","lc","batchNormalization4d_","hc","batchNorm4d_","fc","broadcastTo_","inputShape","dc","clone_","pc","logicalAnd_","vc","logicalNot_","gc","logicalOr_","mc","logicalXor_","yc","where_","$condition","xc","bc","divNoNan_","wc","tile_","reps","Cc","eye_","Ec","multinomial_","logits2D","Rc","oneHot_","indices","onValue","offValue","Ic","pad_","paddings","constantValue","kc","pad1d_","Sc","pad2d_","Ac","pad3d_","Tc","pad4d_","Dc","rand_","_c","Oc","Mc","Bc","TEST_EPSILON_FLOAT16","expectArraysClose","testEpsilon","expectPromiseToFail","fail","expectArraysEqual","expectNumbersClose","expectValuesInRange","expectArrayBuffersEqual","expect","toEqual","Pc","stdDev","nextVal","truncated","upper","lower","nextValue","isValidTruncated","convertValue","Lc","randu","randn","Wc","canReturnFloat","range","Uc","randomGamma_","Vc","randomNormal_","zc","randomUniform_","Gc","square_","Hc","squaredDifference_","qc","truncatedNormal_","Kc","equal_","jc","equalStrict_","Xc","greater_","Yc","greaterEqual_","$c","greaterEqualStrict_","Qc","greaterStrict_","Jc","less_","Zc","lessEqual_","tl","lessEqualStrict_","el","lessStrict_","nl","notEqual_","rl","notEqualStrict_","ol","al","il","gather_","dimSize","sl","unsortedSegmentSum_","ul","cl","dy4D","dl","vl","ll","hl","dy5D","fl","conv1d_","conv2d_","pl","conv3d_","$filter","x5D","conv2dDerFilter_","x4D","conv2dDerInput_","ml","depthwiseConv2d_","yl","xl","depthwiseConv2dDerInput_","depthwiseConv2dDerFilter_","bl","separableConv2d_","wl","conv2dTranspose_","Cl","conv3dTranspose_","El","matMul_","Rl","dot_","Il","outerProduct_","kl","reverse_","Sl","reverse1d_","Al","reverse2d_","Tl","reverse3d_","Dl","reverse4d_","Nl","$dy","Fl","input4D","_l","maxPool_","Ol","avgPool_","Ml","pool_","Bl","maxPool3d_","input5D","Pl","avgPool3d_","Ll","maxPoolWithArgmax_","filterSize","includeBatchInIndex","indexes","Wl","slice_","begin","Ul","slice1d_","Vl","slice2d_","zl","slice3d_","Gl","slice4d_","Hl","ql","all_","Kl","any_","jl","argMax_","Xl","argMin_","Yl","logSumExp_","$l","max_","axes","Ql","mean_","Jl","min_","Zl","moments_","th","sum_","eh","prod_","nh","elu_","dy","rh","leakyRelu_","oh","prelu_","ah","relu_","ih","relu6_","sh","selu_","uh","localResponseNormalization_","ch","norm_","lh","basicLSTMCell_","hh","multiRNNCell_","fh","movingAverage_","dh","stridedSlice_","ph","topk_","vh","scatterND_","updates","gh","fft_","mh","ifft_","yh","rfft_","xh","irfft_","bh","wh","sparseToDense_","$sparseIndices","$sparseValues","$defaultValue","Ch","gatherND_","Eh","diag_","Rh","dropout_","Ih","Nh","kh","hannWindow_","Sh","hammingWindow_","Ah","frame_","Th","stft_","Dh","hannWindow","hammingWindow","frame","stft","Fh","NONE","MEAN","SUM","SUM_BY_NONZERO_WEIGHTS","_h","absoluteDifference_","Oh","computeWeightedLoss_","Mh","cosineDistance_","Bh","hingeLoss_","Ph","huberLoss_","Lh","logLoss_","Wh","meanSquaredError_","Uh","sigmoidCrossEntropy_","Vh","softmaxCrossEntropy_","zh","Reduction","absoluteDifference","computeWeightedLoss","cosineDistance","hingeLoss","huberLoss","logLoss","meanSquaredError","sigmoidCrossEntropy","softmaxCrossEntropy","Gh","Hh","bandPart_","qh","gramSchmidt_","Kh","qr_","jh","bandPart","gramSchmidt","Xh","NEGATIVE_INFINITY","maxOutputSize","iouThreshold","scoreThreshold","softNmsSigma","Yh","resizeBilinear_","alignCorners","newHeight","newWidth","$h","resizeNearestNeighbor_","batchImages","Qh","nonMaxSuppression_","boxes","scores","Zh","nonMaxSuppressionWithScore_","ef","cropAndResize_","images","boxInd","method","extrapolationValue","cropSize","nf","nonMaxSuppressionAsync","nonMaxSuppressionWithScore","nonMaxSuppressionWithScoreAsync","rf","of","af","sf","uf","fusedMatMul_","cf","fusedConv2d_","dilations","dimRoundingMode","lf","fusedDepthwiseConv2d_","hf","ff","linalg","losses","fused","signal","batchNorm2d","batchNormalization2d","batchNorm3d","batchNormalization3d","batchNorm4d","batchNormalization4d","broadcastTo","divNoNan","eye","pad1d","pad2d","pad3d","pad4d","rand","randomGamma","randomNormal","randomUniform","truncatedNormal","conv3dTranspose","op","booleanMaskAsync","concat1d","concat2d","concat3d","concat4d","outerProduct","reverse1d","reverse2d","reverse3d","reverse4d","maxPoolWithArgmax","slice1d","slice2d","slice3d","slice4d","moments","whereAsync","setdiff1dAsync","ones","scalar","tensor","tensor1d","tensor2d","tensor3d","tensor4d","tensor5d","tensor6d","zeros","basicLSTMCell","multiRNNCell","movingAverage","dropout","inTopKAsync","df","pf","POSITIVE_INFINITY","vf","gf","linear","mf","firstUse","broadcastedBinaryComplexOp","broadcastedBinaryOp","hypot","trunc","pool3d","maxPool3dPositions","fftBatch","isExponentOf2","fftRadix2","fourierTransformByMatmul","scatter","yf","xf","bf","wf","Cf","Ef","Rf","If","kf","Sf","Af","Tf","Df","Nf","Ff","_f","Of","Mf","pixels","numChannels","HTMLVideoElement","HTMLImageElement","videoWidth","videoHeight","drawImage","Bf","Pf","Lf","performance","textEncoder","TextEncoder","TextDecoder","Wf","Vf","util","hrtime","zf","uint16","uint8","Hf","quantization","qf","byteLength","Kf","Buffer","Blob","atob","btoa","jf","Xf","Yf","trim","$f","modelTopology","ArrayBuffer","dateSaved","modelTopologyType","modelTopologyBytes","weightSpecsBytes","weightSpecs","weightDataBytes","weightData","Qf","saveRouters","loadRouters","getInstance","instance","registerSaveRouter","registerLoadRouter","getSaveHandlers","getHandlers","getLoadHandlers","Jf","Zf","managers","registerManager","getManager","getSchemes","td","scheme","path","ed","load","removeModel","save","modelArtifactsInfo","nd","rd","od","indexedDB","mozIndexedDB","webkitIndexedDB","msIndexedDB","shimIndexedDB","ad","createObjectStore","keyPath","modelPath","databaseAction","open","onupgradeneeded","onsuccess","transaction","objectStore","close","modelArtifacts","onerror","oncomplete","put","URL_SCHEME","sd","startsWith","ud","listModels","getAll","cd","ld","hd","fd","dd","pd","vd","gd","info","topology","modelMetadata","md","yd","localStorage","LS","setItem","format","generatedBy","convertedBy","userDefinedMetadata","removeItem","getItem","byteOffset","xd","bd","key","Rd","Id","modelTopologyFileName","weightDataFileName","URL","createObjectURL","paths","weights","weightsManifest","jsonAnchor","download","href","dispatchEvent","MouseEvent","weightDataAnchor","kd","files","FileReader","onload","target","checkManifestAndWeightFiles","readAsArrayBuffer","readAsText","Sd","Ad","fetchFunc","requestInit","isBinary","onProgress","arrayBuffer","Td","manifestEntry","groupOffset","sizeBytes","Dd","DEFAULT_METHOD","weightPathPrefix","body","FormData","append","ok","responses","status","json","loadWeights","lastIndexOf","URL_SCHEME_REGEX","Nd","match","Fd","_d","Pd","Od","Md","saveHandler","Bd","browserFiles","browserHTTPRequest","concatenateArrayBuffers","decodeWeights","encodeWeights","group","specs","fromMemory","trainingConfig","getModelArtifactsInfoForJSON","http","isHTTPScheme","weightsLoaderFactory","withSaveHandler","copyModel","moveModel","Ld","confusionMatrix_","Wd","confusionMatrix","Ud","fromPixels_","ImageData","readyState","getImageData","Vd","toPixels","Uint8ClampedArray","putImageData","fromPixels","zd","getClassName","className","fromConfig","Gd","classNameMap","getMap","register","Hd","qd","Serializable","SerializationMap","registerClass","jd","gpgpu_util","webgl_util","forceHalfFloat","MathBackendWebGL","setWebGLContext","GPGPUContext","Xd","minimize","computeGradients","applyGradients","iterations_","incrementIterations","iterations","saveIterations","getWeights","setWeights","extractIterations","Yd","learningRate","rho","accumulatedGrads","accumulatedUpdates","originalName","getConfig","$d","initialAccumulatorValue","Qd","beta1","beta2","accumulatedFirstMoment","accumulatedSecondMoment","accBeta1","accBeta2","Jd","decay","accumulatedWeightedInfNorm","iteration","Zd","setLearningRate","tp","momentum","useNesterov","accumulations","setMomentum","ep","accumulatedMeanSquares","accumulatedMoments","accumulatedMeanGrads","centered","np","sgd","rmsprop","adam","adadelta","adamax","adagrad","rp","requestAnimationFrame","setImmediate","DataType","SaverDef","tf$1","AdadeltaOptimizer","AdagradOptimizer","AdamOptimizer","AdamaxOptimizer","Add","AddN","BroadcastTo","DataStorage","Div","Environment","FromPixels","FusedBatchNorm","Identity","KernelBackend","MaxPoolWithArgmax","MomentumOptimizer","NonMaxSuppressionV5","OneHot","Optimizer","PadV2","RMSPropOptimizer","Rank","SGDOptimizer","Square","SquaredDifference","Tensor","TensorBuffer","Tile","Transpose","Variable","backend_util","browser","deprecationWarn","disableDeprecationWarnings","enableDebugMode","enableProdMode","engine","env","gather_util","getBackend","getGradient","getKernel","getKernelsForBackend","grad","math","nextFrame","registerGradient","registerKernel","scatter_util","serialization","slice_util","sumOutType","tensor_util","test_util","train","unregisterGradient","unregisterKernel","valueAndGrad","valueAndGrads","variableGrads","version_core","webgl","__assign","__awaiter","__generator","DT_INVALID","DT_FLOAT","DT_DOUBLE","DT_INT32","DT_UINT8","DT_INT16","DT_INT8","DT_STRING","DT_COMPLEX64","DT_INT64","DT_BOOL","DT_QINT8","DT_QUINT8","DT_QINT32","DT_BFLOAT16","DT_FLOAT_REF","DT_DOUBLE_REF","DT_INT32_REF","DT_UINT8_REF","DT_INT16_REF","DT_INT8_REF","DT_STRING_REF","DT_COMPLEX64_REF","DT_INT64_REF","DT_BOOL_REF","DT_QINT8_REF","DT_QUINT8_REF","DT_QINT32_REF","DT_BFLOAT16_REF","LEGACY","V1","V2","CheckpointFormatVersion","CUSTOM_OPS","getRegisteredOp","getParamValue","inputParams","inputIndexStart","inputIndexEnd","getTensor","inputNames","attrParams","parseNodeName","currentContextIds","find","getNodeNameWithContextId","getNodeNameAndIndex","currentContextId","split$1","arithmetic","tfOpName","category","start","tfName","notSupported","end","basicMath","control","convolution","creation","dynamic","evaluation","graph","image$1","logical","matrices","normalization","reduction","sliceJoin","transformation","tfDeprecatedName","OperationMapper","opMappers","_instance","transformGraph","mapNode","mapSignatureEntries","children","signatureKey","nodes","placeholders","signature","attr","rawAttrs","getStringParam","getStringArrayParam","getNumberParam","getNumericArrayParam","getBoolParam","getBoolArrayParam","getTensorShapeParam","getTensorShapeArrayParam","getDtypeParam","getDtypeArrayParam","parseStringParam","decodeBase64","parseInt","parseDtypeParam","list","parseTensorShapeParam","unknownRank","NodeValueImpl","tensorMap","context","getInput","getAttr","TensorArray","maxSize","elementShape","identicalElementShapes","dynamicSize","clearAfterRead","tensors","closed_","nextId","clearAndClose","cleared","readMany","assertShapesMatchAllowUndefinedSize","written","writeMany","shapesEqualAllowUndefinedSize","executeOp$16","executeOp","executeOp$1","enterFrame","exitFrame","nextIteration","addTensorArray","getTensorArray","executeOp$2","executeOp$3","executeOp$4","executeOp$5","executeOp$6","executeOp$8","executeOp$7","executeOp$9","executeOp$10","executeOp$11","executeOp$12","executeOp$13","executeOp$14","executeOp$15","customExecutor","ExecutionContext","weightMap","tensorArrayMap","rootContext","frameName","iterationId","contexts","lastId","generateCurrentContextIds","newFrame","_currentContextIds","contextIdforContexts","getWeight","getExecutionSubgraph","isControlFlow","isDynamicShape","usedNodes","missingInputs","dynamicNode","syncInputs","CONTROL_FLOW_OPS","DYNAMIC_SHAPE_OPS","GraphExecutor","compiledMap","_weightMap","SEPERATOR","_outputs","_inputs","_signature","weightIds","getCompilationKey","compile","getNodesInTopologicalOrder","execute","mapInputs","checkInputs","checkInputShapeAndType","mapOutputs","checkOutputs","getFrozenTensorIds","checkTensorForDisposal","getTensorsForCurrentContenxt","executeAsync","executeWithControlFlow","currentContext","processStack","processChildNodes","GraphModel","modelUrl","loadOptions","executor","inputNodes","outputNodes","findIOHandler","handler","artifacts","producer","minConsumer","Instance","convertTensorMapToTensorsMap","predict","normalizeInputs","normalizeOutputs","loadGraphModel","fromTFHub","extendStatics","__extends","BaseModel","model","outputStride","preprocessInput","nameOutputResults","heatmapScores","heatmap","offsets","displacementFwd","displacementBwd","MobileNet","half","MaxHeap","priorityQueue","numberOfElements","getElementValue","enqueue","swim","dequeue","exchange","sink","empty","getValueAt","scoreIsMaximumInLocalWindow","partNames","NUM_KEYPOINTS","partIds","getOffsetPoint","getImageCoords","heatmapY","heatmapX","addVectors","parentChildrenTuples","parentToChildEdges","childToParentEdges","getStridedIndexNearPoint","traverseToTargetKeypoint","getDisplacement","position","part","decodePose","withinNmsRadiusOfCorrespondingPoint","keypoints","squaredDistance","getInstanceScore","decodeMultiplePoses","buildPartWithScoreQueue","argmax2d","getOffsetPoint$1","getOffsetPoints","valueOf","getOffsetVectors","decodeSinglePose","getPointsConfidence","MOBILENET_BASE_URL","RESNET50_BASE_URL","imageNetMean","ResNet","toTensorBuffers3D","toValidInputResolution","isValidInputResolution","validateInputResolution","getValidInputResolutionDimensions","VALID_OUTPUT_STRIDES","getInputTensorDimensions","padAndResizeTo","resized","toInputTensor","padding","scaleAndFlipPoses","scalePose","scalePoses","flipPoseHorizontal","flipPosesHorizontal","MOBILENET_V1_CONFIG","architecture","multiplier","inputResolution","VALID_ARCHITECTURE","VALID_STRIDE","MobileNetV1","ResNet50","VALID_MULTIPLIER","VALID_QUANT_BYTES","SINGLE_PERSON_INFERENCE_CONFIG","flipHorizontal","MULTI_PERSON_INFERENCE_CONFIG","maxDetections","nmsRadius","PoseNet","assertValidOutputStride","assertValidResolution","baseModel","estimateMultiplePoses","validateMultiPersonInputConfig","estimateSinglePose","estimatePoses","decodingMethod","loadMobileNet","quantBytes","tf","mobileNetCheckpoint","loadResNet","resNet50Checkpoint","validateModelConfig","VideoState","PoseBody","Extension","internal_getCodeGenArgs","blockIconURI","init","runtime","ioDevices","_loop","DIMENSIONS","tfCoordsToScratch","projectStarted","setTransparency","globalVideoTransparency","toggleVideo","globalVideoState","hasPose","poseState","async","video","getFrame","dimensions","estimatePoseOnImage","estimateThrottleTimeout","imageElement","bodyModel","ensureBodyModelLoaded","posenet.load","disableVideo","enableVideo","mirror","transparency","trans","setPreviewGhost","defineBlocks","bodyOptions","handlerOptions","goToBodyPartBlock","goToPart","arg","options","acceptsReporters","bodyPart","includes","operation","point","setXY","videoToggleBlock","videoToggle","video_state","setVideoTransparencyBlock","setVideoTransparency"],"mappings":"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"}