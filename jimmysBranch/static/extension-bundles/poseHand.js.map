{"version":3,"file":"poseHand.js","sources":["../../../../extensions/src/poseHand/node_modules/@tensorflow/tfjs-core/dist/tf-core.esm.js","../../../../extensions/src/poseHand/node_modules/@tensorflow/tfjs-converter/dist/tf-converter.esm.js","../../../../extensions/src/poseHand/node_modules/@tensorflow-models/handpose/dist/handpose.esm.js","../../../../extensions/src/poseHand/index.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nvar t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};function e(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}function n(t,e,n,r){return new(n||(n=Promise))((function(o,a){function i(t){try{u(r.next(t))}catch(t){a(t)}}function s(t){try{u(r.throw(t))}catch(t){a(t)}}function u(t){t.done?o(t.value):new n((function(e){e(t.value)})).then(i,s)}u((r=r.apply(t,e||[])).next())}))}function r(t,e){var n,r,o,a,i={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return a={next:s(0),throw:s(1),return:s(2)},\"function\"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function s(a){return function(s){return function(a){if(n)throw new TypeError(\"Generator is already executing.\");for(;i;)try{if(n=1,r&&(o=2&a[0]?r.return:a[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,a[1])).done)return o;switch(r=0,o&&(a=[2&a[0],o.value]),a[0]){case 0:case 1:o=a;break;case 4:return i.label++,{value:a[1],done:!1};case 5:i.label++,r=a[1],a=[0];continue;case 7:a=i.ops.pop(),i.trys.pop();continue;default:if(!(o=(o=i.trys).length>0&&o[o.length-1])&&(6===a[0]||2===a[0])){i=0;continue}if(3===a[0]&&(!o||a[1]>o[0]&&a[1]<o[3])){i.label=a[1];break}if(6===a[0]&&i.label<o[1]){i.label=o[1],o=a;break}if(o&&i.label<o[2]){i.label=o[2],i.ops.push(a);break}o[2]&&i.ops.pop(),i.trys.pop();continue}a=e.call(t,i)}catch(t){a=[6,t],r=0}finally{n=o=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,s])}}}var o=function(){function t(t){this.global=t,this.flags={},this.flagRegistry={},this.urlFlags={},this.populateURLFlags()}return t.prototype.setPlatform=function(t,e){null!=this.platform&&console.warn(\"Platform \"+this.platformName+\" has already been set. Overwriting the platform with \"+e+\".\"),this.platformName=t,this.platform=e},t.prototype.registerFlag=function(t,e,n){if(this.flagRegistry[t]={evaluationFn:e,setHook:n},null!=this.urlFlags[t]){var r=this.urlFlags[t];console.warn(\"Setting feature override from URL \"+t+\": \"+r+\".\"),this.set(t,r)}},t.prototype.get=function(t){return t in this.flags?this.flags[t]:(this.flags[t]=this.evaluateFlag(t),this.flags[t])},t.prototype.getNumber=function(t){return this.get(t)},t.prototype.getBool=function(t){return this.get(t)},t.prototype.getFlags=function(){return this.flags},Object.defineProperty(t.prototype,\"features\",{get:function(){return this.flags},enumerable:!0,configurable:!0}),t.prototype.set=function(t,e){if(null==this.flagRegistry[t])throw new Error(\"Cannot set flag \"+t+\" as it has not been registered.\");this.flags[t]=e,null!=this.flagRegistry[t].setHook&&this.flagRegistry[t].setHook(e)},t.prototype.evaluateFlag=function(t){if(null==this.flagRegistry[t])throw new Error(\"Cannot evaluate flag '\"+t+\"': no evaluation function found.\");return this.flagRegistry[t].evaluationFn()},t.prototype.setFlags=function(t){this.flags=Object.assign({},t)},t.prototype.reset=function(){this.flags={},this.urlFlags={},this.populateURLFlags()},t.prototype.populateURLFlags=function(){var t=this;if(void 0!==this.global&&void 0!==this.global.location&&void 0!==this.global.location.search){var e,n,r=(e=this.global.location.search,n={},e.replace(/[?&]([^=?&]+)(?:=([^&]*))?/g,(function(t){for(var e=[],r=1;r<arguments.length;r++)e[r-1]=arguments[r];return a(n,e[0],e[1]),e.join(\"=\")})),n);if(\"tfjsflags\"in r)r.tfjsflags.split(\",\").forEach((function(e){var n=e.split(\":\"),r=n[0],o=n[1];t.urlFlags[r]=function(t,e){if(\"true\"===(e=e.toLowerCase())||\"false\"===e)return\"true\"===e;if(\"\"+ +e===e)return+e;throw new Error(\"Could not parse value flag value \"+e+\" for flag \"+t+\".\")}(r,o)}))}},t}();function a(t,e,n){t[decodeURIComponent(e)]=decodeURIComponent(n||\"\")}function i(){return s}var s=null;var u=new Map,c=new Map;function l(t,e){var n=m(t,e);return u.get(n)}function h(t){return c.get(t)}function f(t){for(var e=u.entries(),n=[];;){var r=e.next(),o=r.done,a=r.value;if(o)break;var i=a[0],s=a[1];i.split(\"_\")[0]===t&&n.push(s)}return n}function d(t){var e=t.kernelName,n=t.backendName,r=m(e,n);if(u.has(r))throw new Error(\"The kernel '\"+e+\"' for backend '\"+n+\"' is already registered\");u.set(r,t)}function p(t){var e=t.kernelName;c.has(e)&&console.warn(\"Overriding the gradient for '\"+e+\"'\"),c.set(e,t)}function v(t,e){var n=m(t,e);if(!u.has(n))throw new Error(\"The kernel '\"+t+\"' for backend '\"+e+\"' is not registered\");u.delete(n)}function g(t){if(!c.has(t))throw new Error(\"The gradient '\"+t+\"' for backend is not registered\");c.delete(t)}function m(t,e){return e+\"_\"+t}function y(t){for(var e=t.length,n=0,r=0;e>0;)r=Math.random()*e|0,n=t[--e],t[e]=t[r],t[r]=n}function x(t,e,n){return Math.max(t,Math.min(e,n))}function b(t){return t%2==0?t:t+1}function w(t){for(var e=0,n=0;n<t.length;n++)e+=t[n];return e}function C(t,e){if(!t)throw new Error(\"string\"==typeof e?e:e())}function E(t,e,n){void 0===n&&(n=\"\"),C(S(t,e),(function(){return n+\" Shapes \"+t+\" and \"+e+\" must match\"}))}function R(t){C(null!=t,(function(){return\"The input to the tensor constructor must be a non-null value.\"}))}function I(t,e,n){if(void 0===e&&(e=[]),void 0===n&&(n=!1),null==e&&(e=[]),Array.isArray(t)||V(t)&&!n)for(var r=0;r<t.length;++r)I(t[r],e,n);else e.push(t);return e}function k(t){if(0===t.length)return 1;for(var e=t[0],n=1;n<t.length;n++)e*=t[n];return e}function S(t,e){if(t===e)return!0;if(null==t||null==e)return!1;if(t.length!==e.length)return!1;for(var n=0;n<t.length;n++)if(t[n]!==e[n])return!1;return!0}function A(t){return t%1==0}function T(t){if(null!=Math.tanh)return Math.tanh(t);if(t===1/0)return 1;if(t===-1/0)return-1;var e=Math.exp(2*t);return(e-1)/(e+1)}function D(t){var e=Math.ceil(Math.sqrt(t));return[e,Math.ceil(t/e)]}function N(t,e){return e<=t.length?t:t+\" \".repeat(e-t.length)}function F(t,e,n){return void 0===e&&(e=function(t){return 0}),new Promise((function(r,o){var a=0,i=function(){if(t())r();else{a++;var s=e(a);null!=n&&a>=n?o():setTimeout(i,s)}};i()}))}function _(t,e){for(var n=1,r=-1,o=0;o<t.length;++o)if(t[o]>=0)n*=t[o];else if(-1===t[o]){if(-1!==r)throw Error(\"Shapes can only have 1 implicit size. Found -1 at dim \"+r+\" and dim \"+o);r=o}else if(t[o]<0)throw Error(\"Shapes can not be < 0. Found \"+t[o]+\" at dim \"+o);if(-1===r){if(e>0&&e!==n)throw Error(\"Size(\"+e+\") must match the product of shape \"+t);return t}if(0===n)throw Error(\"Cannot infer the missing size in [\"+t+\"] when there are 0 elements\");if(e%n!=0)throw Error(\"The implicit shape can't be a fractional number. Got \"+e+\" / \"+n);var a=t.slice();return a[r]=e/n,a}function O(t,e){var n=e.length;return C((t=null==t?e.map((function(t,e){return e})):[].concat(t)).every((function(t){return t>=-n&&t<n})),(function(){return\"All values in axis param must be in range [-\"+n+\", \"+n+\") but got axis \"+t})),C(t.every((function(t){return A(t)})),(function(){return\"All values in axis param must be integers but got axis \"+t})),t.map((function(t){return t<0?n+t:t}))}function M(t,e){for(var n=[],r=[],o=null!=e&&Array.isArray(e)&&0===e.length,a=null==e||o?null:O(e,t).sort(),i=0,s=0;s<t.length;++s){if(null!=a){if(a[i]===s&&1!==t[s])throw new Error(\"Can't squeeze axis \"+s+\" since its dim '\"+t[s]+\"' is not 1\");(null==a[i]||a[i]>s)&&1===t[s]&&(n.push(t[s]),r.push(s)),a[i]<=s&&i++}1!==t[s]&&(n.push(t[s]),r.push(s))}return{newShape:n,keptDims:r}}function B(t,e){var n=null;if(null==t||\"float32\"===t)n=new Float32Array(e);else if(\"int32\"===t)n=new Int32Array(e);else{if(\"bool\"!==t)throw new Error(\"Unknown data type \"+t);n=new Uint8Array(e)}return n}function P(t,e){var n=null;if(null==t||\"float32\"===t)n=new Float32Array(e);else if(\"int32\"===t)n=new Int32Array(e);else if(\"bool\"===t)n=new Uint8Array(e);else{if(\"string\"!==t)throw new Error(\"Unknown data type \"+t);n=new Array(e)}return n}function L(t,e){for(var n=0;n<t.length;n++){var r=t[n];if(isNaN(r)||!isFinite(r))throw Error(\"A tensor of type \"+e+\" being uploaded contains \"+r+\".\")}}function W(t){return\"bool\"===t||\"complex64\"===t||\"float32\"===t||\"int32\"===t||\"string\"===t}function U(t,e){return\"complex64\"!==e&&((\"float32\"!==e||\"complex64\"===t)&&((\"int32\"!==e||\"float32\"===t||\"complex64\"===t)&&(\"bool\"!==e||\"bool\"!==t)))}function V(t){return t instanceof Float32Array||t instanceof Int32Array||t instanceof Uint8Array}function z(t){if(\"float32\"===t||\"int32\"===t)return 4;if(\"complex64\"===t)return 8;if(\"bool\"===t)return 1;throw new Error(\"Unknown dtype \"+t)}function G(t){if(null==t)return 0;var e=0;return t.forEach((function(t){return e+=t.length})),e}function H(t){return\"string\"==typeof t||t instanceof String}function q(t){return\"boolean\"==typeof t}function K(t){return\"number\"==typeof t}function j(t){return Array.isArray(t)?j(t[0]):t instanceof Float32Array?\"float32\":t instanceof Int32Array||t instanceof Uint8Array?\"int32\":K(t)?\"float32\":H(t)?\"string\":q(t)?\"bool\":\"float32\"}function X(t){return!!(t&&t.constructor&&t.call&&t.apply)}function Y(t,e){for(var n=e;n<t;++n)if(t%n==0)return n;return t}function $(t){var e=t.length;if(e<2)return[];var n=new Array(e-1);n[e-2]=t[e-1];for(var r=e-3;r>=0;--r)n[r]=n[r+1]*t[r+1];return n}function Q(t,e,n){if(\"string\"===e)throw new Error(\"Cannot convert a string[] to a TypedArray\");if(Array.isArray(t)&&(t=I(t)),n&&L(t,e),function(t,e){return t instanceof Float32Array&&\"float32\"===e||t instanceof Int32Array&&\"int32\"===e||t instanceof Uint8Array&&\"bool\"===e}(t,e))return t;if(null==e||\"float32\"===e||\"complex64\"===e)return new Float32Array(t);if(\"int32\"===e)return new Int32Array(t);if(\"bool\"===e){for(var r=new Uint8Array(t.length),o=0;o<r.length;++o)0!==Math.round(t[o])&&(r[o]=1);return r}throw new Error(\"Unknown data type \"+e)}function J(t,e){if(0===t.length)return e[0];var n=t.reduce((function(t,e){return t*e}));if(0===n)return[];if(n!==e.length)throw new Error(\"[\"+t+\"] does not match the input size.\");return function t(e,n,r){var o=new Array;if(1===n.length)for(var a=n[0],i=0;i<a;i++)o[i]=r[e+i];else{a=n[0];var s=n.slice(1),u=s.reduce((function(t,e){return t*e}));for(i=0;i<a;i++)o[i]=t(e+i*u,s,r)}return o}(0,t,e)}function Z(t,e){for(var n=tt(t,e),r=0;r<n.length;r++)n[r]=1;return n}function tt(t,e){if(null==e||\"float32\"===e||\"complex64\"===e)return new Float32Array(t);if(\"int32\"===e)return new Int32Array(t);if(\"bool\"===e)return new Uint8Array(t);throw new Error(\"Unknown data type \"+e)}function et(){return i().platform.now()}function nt(t){t.forEach((function(e){C(Number.isInteger(e)&&e>=0,(function(){return\"Tensor must have a shape comprised of positive integers but got shape [\"+t+\"].\"}))}))}function rt(t,e){return void 0===e&&(e=\"utf-8\"),e=e||\"utf-8\",i().platform.encode(t,e)}function ot(t,e){return void 0===e&&(e=\"utf-8\"),e=e||\"utf-8\",i().platform.decode(t,e)}function at(t,e,n){if(0===e)return 0;if(1===e)return t[0];for(var r=t[t.length-1],o=0;o<t.length-1;++o)r+=n[o]*t[o];return r}function it(t,e,n){if(0===e)return[];if(1===e)return[t];for(var r=new Array(e),o=0;o<r.length-1;++o)r[o]=Math.floor(t/n[o]),t-=r[o]*n[o];return r[r.length-1]=t,r}var st=Object.freeze({shuffle:y,clamp:x,nearestLargerEven:b,sum:w,randUniform:function(t,e){var n=Math.random();return e*n+(1-n)*t},distSquared:function(t,e){for(var n=0,r=0;r<t.length;r++){var o=Number(t[r])-Number(e[r]);n+=o*o}return n},assert:C,assertShapesMatch:E,assertNonNull:R,flatten:I,sizeFromShape:k,isScalarShape:function(t){return 0===t.length},arraysEqual:S,isInt:A,tanh:T,sizeToSquarishShape:D,createShuffledIndices:function(t){for(var e=new Uint32Array(t),n=0;n<t;++n)e[n]=n;return y(e),e},rightPad:N,repeatedTry:F,inferFromImplicitShape:_,parseAxisParam:O,squeezeShape:M,getTypedArrayFromDType:B,getArrayFromDType:P,checkConversionForErrors:L,isValidDtype:W,hasEncodingLoss:U,isTypedArray:V,bytesPerElement:z,bytesFromStringArray:G,isString:H,isBoolean:q,isNumber:K,inferDtype:j,isFunction:X,nearestDivisor:Y,computeStrides:$,toTypedArray:Q,toNestedArray:J,makeOnesTypedArray:Z,makeZerosTypedArray:tt,now:et,assertNonNegativeIntegerDimensions:nt,fetch:function(t,e){return i().platform.fetch(t,e)},encodeString:rt,decodeString:ot,locToIndex:at,indexToLoc:it}),ut=function(){function t(t,e){this.backendTimer=t,this.logger=e,null==e&&(this.logger=new ct)}return t.prototype.profileKernel=function(t,e,n){var r,o=this,a=this.backendTimer.time((function(){r=n()}));return r.forEach((function(n){n.data().then((function(r){!function(t,e,n){if(\"float32\"!==e)return!1;for(var r=0;r<t.length;r++){var o=t[r];if(isNaN(o)||!isFinite(o))return console.warn(\"Found \"+o+\" in the result of '\"+n+\"'\"),!0}}(r,n.dtype,t),a.then((function(a){var i=\"\";null!=a.getExtraProfileInfo&&(i=a.getExtraProfileInfo()),o.logger.logKernelProfile(t,n,r,a.kernelMs,e,i)}))}))})),r},t}();var ct=function(){function t(){}return t.prototype.logKernelProfile=function(t,e,n,r,o,a){var i=\"number\"==typeof r?N(r+\"ms\",9):r.error,s=N(t,25),u=e.rank,c=e.size,l=N(e.shape.toString(),14),h=\"\";for(var f in o){var d=o[f].shape||e.shape,p=d.length;h+=f+\": \"+p+\"D \"+(p>0?d:\"\")+\" \"}console.log(\"%c\"+s+\"\\t%c\"+i+\"\\t%c\"+u+\"D \"+l+\"\\t%c\"+c+\"\\t%c\"+h+\"\\t%c\"+a,\"font-weight:bold\",\"color:red\",\"color:blue\",\"color: orange\",\"color: green\",\"color: steelblue\")},t}();var lt=20,ht=3,ft=7;function dt(t,e,n,r){var o=$(e),a=function(t,e,n,r){var o=k(e),a=r[r.length-1],i=new Array(a).fill(0),s=e.length,u=\"complex64\"===n?gt(t):t;if(s>1)for(var c=0;c<o/a;c++)for(var l=c*a,h=0;h<a;h++)i[h]=Math.max(i[h],pt(u[l+h],0,n).length);return i}(t,e,n,o),i=e.length,s=function t(e,n,r,o,a,i){void 0===i&&(i=!0);var s=\"complex64\"===r?2:1,u=n[0],c=n.length;if(0===c){return\"complex64\"===r?[pt(gt(e)[0],0,r)]:\"bool\"===r?[vt(e[0])]:[e[0].toString()]}if(1===c){if(u>lt){var l=ht*s,h=Array.from(e.slice(0,l)),f=Array.from(e.slice((u-ht)*s,u*s));return\"complex64\"===r&&(h=gt(h),f=gt(f)),[\"[\"+h.map((function(t,e){return pt(t,a[e],r)})).join(\", \")+\", ..., \"+f.map((function(t,e){return pt(t,a[u-ht+e],r)})).join(\", \")+\"]\"]}return[\"[\"+(\"complex64\"===r?gt(e):Array.from(e)).map((function(t,e){return pt(t,a[e],r)})).join(\", \")+\"]\"]}var d=n.slice(1),p=o.slice(1),v=o[0]*s,g=[];if(u>lt){for(var m=0;m<ht;m++){var y=(x=m*v)+v;g.push.apply(g,t(e.slice(x,y),d,r,p,a,!1))}g.push(\"...\");for(m=u-ht;m<u;m++){y=(x=m*v)+v;g.push.apply(g,t(e.slice(x,y),d,r,p,a,m===u-1))}}else for(m=0;m<u;m++){var x;y=(x=m*v)+v;g.push.apply(g,t(e.slice(x,y),d,r,p,a,m===u-1))}var b=2===c?\",\":\"\";g[0]=\"[\"+g[0]+b;for(m=1;m<g.length-1;m++)g[m]=\" \"+g[m]+b;var w=\",\\n\";for(m=2;m<c;m++)w+=\"\\n\";return g[g.length-1]=\" \"+g[g.length-1]+\"]\"+(i?\"\":w),g}(t,e,n,o,a),u=[\"Tensor\"];return r&&(u.push(\"  dtype: \"+n),u.push(\"  rank: \"+i),u.push(\"  shape: [\"+e+\"]\"),u.push(\"  values:\")),u.push(s.map((function(t){return\"    \"+t})).join(\"\\n\")),u.join(\"\\n\")}function pt(t,e,n){return N(Array.isArray(t)?parseFloat(t[0].toFixed(ft))+\" + \"+parseFloat(t[1].toFixed(ft))+\"j\":H(t)?\"'\"+t+\"'\":\"bool\"===n?vt(t):parseFloat(t.toFixed(ft)).toString(),e)}function vt(t){return 0===t?\"false\":\"true\"}function gt(t){for(var e=[],n=0;n<t.length;n+=2)e.push([t[n],t[n+1]]);return e}var mt=function(){function t(t,e,n){var r=this;if(this.dtype=e,this.shape=t.slice(),this.size=k(t),null!=n){var o=n.length;C(o===this.size,(function(){return\"Length of values '\"+o+\"' does not match the size inferred by the shape '\"+r.size+\"'.\"}))}if(\"complex64\"===e)throw new Error(\"complex64 dtype TensorBuffers are not supported. Please create a TensorBuffer for the real and imaginary parts separately and call tf.complex(real, imag).\");this.values=n||P(e,this.size),this.strides=$(t)}return t.prototype.set=function(t){for(var e=this,n=[],r=1;r<arguments.length;r++)n[r-1]=arguments[r];0===n.length&&(n=[0]),C(n.length===this.rank,(function(){return\"The number of provided coordinates (\"+n.length+\") must match the rank (\"+e.rank+\")\"}));var o=this.locToIndex(n);this.values[o]=t},t.prototype.get=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];0===t.length&&(t=[0]);for(var n=0,r=0,o=t;r<o.length;r++){var a=o[r];if(a<0||a>=this.shape[n]){var i=\"Requested out of range element at \"+t+\".   Buffer shape=\"+this.shape;throw new Error(i)}n++}for(var s=t[t.length-1],u=0;u<t.length-1;++u)s+=this.strides[u]*t[u];return this.values[s]},t.prototype.locToIndex=function(t){if(0===this.rank)return 0;if(1===this.rank)return t[0];for(var e=t[t.length-1],n=0;n<t.length-1;++n)e+=this.strides[n]*t[n];return e},t.prototype.indexToLoc=function(t){if(0===this.rank)return[];if(1===this.rank)return[t];for(var e=new Array(this.shape.length),n=0;n<e.length-1;++n)e[n]=Math.floor(t/this.strides[n]),t-=e[n]*this.strides[n];return e[e.length-1]=t,e},Object.defineProperty(t.prototype,\"rank\",{get:function(){return this.shape.length},enumerable:!0,configurable:!0}),t.prototype.toTensor=function(){return yt().makeTensor(this.values,this.shape,this.dtype)},t}(),yt=null,xt=null,bt=null;var wt=function(){function t(t,e,n,r){this.kept=!1,this.isDisposedInternal=!1,this.shape=t.slice(),this.dtype=e||\"float32\",this.size=k(t),this.strides=$(t),this.dataId=n,this.id=r,this.rankType=this.rank<5?this.rank.toString():\"higher\"}return t.prototype.flatten=function(){return this.throwIfDisposed(),this.as1D()},t.prototype.asScalar=function(){return this.throwIfDisposed(),C(1===this.size,(function(){return\"The array must have only 1 element.\"})),this.reshape([])},t.prototype.as1D=function(){return this.throwIfDisposed(),this.reshape([this.size])},t.prototype.as2D=function(t,e){return this.throwIfDisposed(),this.reshape([t,e])},t.prototype.as3D=function(t,e,n){return this.throwIfDisposed(),this.reshape([t,e,n])},t.prototype.as4D=function(t,e,n,r){return this.throwIfDisposed(),this.reshape([t,e,n,r])},t.prototype.as5D=function(t,e,n,r,o){return this.throwIfDisposed(),this.reshape([t,e,n,r,o])},t.prototype.asType=function(t){return this.throwIfDisposed(),xt.cast(this,t)},Object.defineProperty(t.prototype,\"rank\",{get:function(){return this.shape.length},enumerable:!0,configurable:!0}),t.prototype.buffer=function(){return n(this,void 0,void 0,(function(){var t;return r(this,(function(e){switch(e.label){case 0:return[4,this.data()];case 1:return t=e.sent(),[2,xt.buffer(this.shape,this.dtype,t)]}}))}))},t.prototype.bufferSync=function(){return xt.buffer(this.shape,this.dtype,this.dataSync())},t.prototype.array=function(){return n(this,void 0,void 0,(function(){var t;return r(this,(function(e){switch(e.label){case 0:return[4,this.data()];case 1:return t=e.sent(),[2,J(this.shape,t)]}}))}))},t.prototype.arraySync=function(){return J(this.shape,this.dataSync())},t.prototype.data=function(){return n(this,void 0,void 0,(function(){var t,e;return r(this,(function(n){switch(n.label){case 0:return this.throwIfDisposed(),t=yt().read(this.dataId),\"string\"!==this.dtype?[3,2]:[4,t];case 1:e=n.sent();try{return[2,e.map((function(t){return ot(t)}))]}catch(t){throw new Error(\"Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().\")}n.label=2;case 2:return[2,t]}}))}))},t.prototype.dataSync=function(){this.throwIfDisposed();var t=yt().readSync(this.dataId);if(\"string\"===this.dtype)try{return t.map((function(t){return ot(t)}))}catch(t){throw new Error(\"Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().\")}return t},t.prototype.bytes=function(){return n(this,void 0,void 0,(function(){var t;return r(this,(function(e){switch(e.label){case 0:return this.throwIfDisposed(),[4,yt().read(this.dataId)];case 1:return t=e.sent(),\"string\"===this.dtype?[2,t]:[2,new Uint8Array(t.buffer)]}}))}))},t.prototype.dispose=function(){this.isDisposed||(yt().disposeTensor(this),this.isDisposedInternal=!0)},Object.defineProperty(t.prototype,\"isDisposed\",{get:function(){return this.isDisposedInternal},enumerable:!0,configurable:!0}),t.prototype.throwIfDisposed=function(){if(this.isDisposed)throw new Error(\"Tensor is disposed.\")},t.prototype.toFloat=function(){return this.asType(\"float32\")},t.prototype.toInt=function(){return this.asType(\"int32\")},t.prototype.toBool=function(){return this.asType(\"bool\")},t.prototype.print=function(t){return void 0===t&&(t=!1),xt.print(this,t)},t.prototype.reshape=function(t){return this.throwIfDisposed(),xt.reshape(this,t)},t.prototype.reshapeAs=function(t){return this.throwIfDisposed(),this.reshape(t.shape)},t.prototype.expandDims=function(t){return void 0===t&&(t=0),xt.expandDims(this,t)},t.prototype.cumsum=function(t,e,n){return void 0===t&&(t=0),void 0===e&&(e=!1),void 0===n&&(n=!1),xt.cumsum(this,t,e,n)},t.prototype.squeeze=function(t){return this.throwIfDisposed(),xt.squeeze(this,t)},t.prototype.clone=function(){return this.throwIfDisposed(),xt.clone(this)},t.prototype.toString=function(t){return void 0===t&&(t=!1),dt(this.dataSync(),this.shape,this.dtype,t)},t.prototype.gather=function(t,e){return void 0===e&&(e=0),this.throwIfDisposed(),xt.gather(this,t,e)},t.prototype.matMul=function(t,e,n){return void 0===e&&(e=!1),void 0===n&&(n=!1),this.throwIfDisposed(),xt.matMul(this,t,e,n)},t.prototype.dot=function(t){return this.throwIfDisposed(),xt.dot(this,t)},t.prototype.norm=function(t,e,n){return void 0===t&&(t=\"euclidean\"),void 0===e&&(e=null),void 0===n&&(n=!1),this.throwIfDisposed(),xt.norm(this,t,e,n)},t.prototype.slice=function(t,e){return this.throwIfDisposed(),xt.slice(this,t,e)},t.prototype.reverse=function(t){return this.throwIfDisposed(),xt.reverse(this,t)},t.prototype.concat=function(e,n){return void 0===n&&(n=0),this.throwIfDisposed(),e instanceof t&&(e=[e]),xt.concat([this].concat(e),n)},t.prototype.split=function(t,e){return void 0===e&&(e=0),this.throwIfDisposed(),xt.split(this,t,e)},t.prototype.stack=function(t,e){return void 0===e&&(e=0),xt.stack([this,t],e)},t.prototype.unstack=function(t){return void 0===t&&(t=0),xt.unstack(this,t)},t.prototype.batchNormalization=function(t,e,n,r,o){return void 0===n&&(n=.001),bt(\"tf.batchNormalization() is going away. Use tf.batchNorm() instead, and note the positional argument change of scale, offset, and varianceEpsilon\"),this.batchNorm(t,e,o,r,n)},t.prototype.all=function(t,e){return void 0===t&&(t=null),void 0===e&&(e=!1),this.throwIfDisposed(),xt.all(this,t,e)},t.prototype.any=function(t,e){return void 0===t&&(t=null),void 0===e&&(e=!1),this.throwIfDisposed(),xt.any(this,t,e)},t.prototype.logSumExp=function(t,e){return void 0===t&&(t=null),void 0===e&&(e=!1),this.throwIfDisposed(),xt.logSumExp(this,t,e)},t.prototype.sum=function(t,e){return void 0===t&&(t=null),void 0===e&&(e=!1),this.throwIfDisposed(),xt.sum(this,t,e)},t.prototype.prod=function(t,e){return void 0===t&&(t=null),void 0===e&&(e=!1),this.throwIfDisposed(),xt.prod(this,t,e)},t.prototype.mean=function(t,e){return void 0===t&&(t=null),void 0===e&&(e=!1),this.throwIfDisposed(),xt.mean(this,t,e)},t.prototype.min=function(t,e){return void 0===t&&(t=null),void 0===e&&(e=!1),this.throwIfDisposed(),xt.min(this,t,e)},t.prototype.max=function(t,e){return void 0===t&&(t=null),void 0===e&&(e=!1),this.throwIfDisposed(),xt.max(this,t,e)},t.prototype.argMin=function(t){return void 0===t&&(t=null),this.throwIfDisposed(),xt.argMin(this,t)},t.prototype.argMax=function(t){return void 0===t&&(t=null),this.throwIfDisposed(),xt.argMax(this,t)},t.prototype.cast=function(t){return this.throwIfDisposed(),xt.cast(this,t)},t.prototype.addStrict=function(t){return this.throwIfDisposed(),xt.addStrict(this,t)},t.prototype.atan2=function(t){return this.throwIfDisposed(),xt.atan2(this,t)},t.prototype.sub=function(t){return this.throwIfDisposed(),xt.sub(this,t)},t.prototype.subStrict=function(t){return this.throwIfDisposed(),xt.subStrict(this,t)},t.prototype.pow=function(t){return this.throwIfDisposed(),xt.pow(this,t)},t.prototype.powStrict=function(t){return this.throwIfDisposed(),xt.powStrict(this,t)},t.prototype.mul=function(t){return this.throwIfDisposed(),xt.mul(this,t)},t.prototype.mulStrict=function(t){return this.throwIfDisposed(),xt.mulStrict(this,t)},t.prototype.floorDiv=function(t){return this.throwIfDisposed(),xt.floorDiv(this,t)},t.prototype.divStrict=function(t){return this.throwIfDisposed(),xt.divStrict(this,t)},t.prototype.minimum=function(t){return this.throwIfDisposed(),xt.minimum(this,t)},t.prototype.minimumStrict=function(t){return this.throwIfDisposed(),xt.minimumStrict(this,t)},t.prototype.maximum=function(t){return this.throwIfDisposed(),xt.maximum(this,t)},t.prototype.maximumStrict=function(t){return this.throwIfDisposed(),xt.maximumStrict(this,t)},t.prototype.mod=function(t){return this.throwIfDisposed(),xt.mod(this,t)},t.prototype.modStrict=function(t){return this.throwIfDisposed(),xt.modStrict(this,t)},t.prototype.squaredDifferenceStrict=function(t){return this.throwIfDisposed(),xt.squaredDifferenceStrict(this,t)},t.prototype.notEqual=function(t){return this.throwIfDisposed(),xt.notEqual(this,t)},t.prototype.notEqualStrict=function(t){return this.throwIfDisposed(),xt.notEqualStrict(this,t)},t.prototype.less=function(t){return this.throwIfDisposed(),xt.less(this,t)},t.prototype.lessStrict=function(t){return this.throwIfDisposed(),xt.lessStrict(this,t)},t.prototype.equal=function(t){return this.throwIfDisposed(),xt.equal(this,t)},t.prototype.equalStrict=function(t){return this.throwIfDisposed(),xt.equalStrict(this,t)},t.prototype.lessEqual=function(t){return this.throwIfDisposed(),xt.lessEqual(this,t)},t.prototype.lessEqualStrict=function(t){return this.throwIfDisposed(),xt.lessEqualStrict(this,t)},t.prototype.greater=function(t){return this.throwIfDisposed(),xt.greater(this,t)},t.prototype.greaterStrict=function(t){return this.throwIfDisposed(),xt.greaterStrict(this,t)},t.prototype.greaterEqual=function(t){return this.throwIfDisposed(),xt.greaterEqual(this,t)},t.prototype.greaterEqualStrict=function(t){return this.throwIfDisposed(),xt.greaterEqualStrict(this,t)},t.prototype.logicalAnd=function(t){return this.throwIfDisposed(),xt.logicalAnd(this,t)},t.prototype.logicalOr=function(t){return this.throwIfDisposed(),xt.logicalOr(this,t)},t.prototype.logicalNot=function(){return this.throwIfDisposed(),xt.logicalNot(this)},t.prototype.logicalXor=function(t){return this.throwIfDisposed(),xt.logicalXor(this,t)},t.prototype.where=function(t,e){return this.throwIfDisposed(),xt.where(t,this,e)},t.prototype.neg=function(){return this.throwIfDisposed(),xt.neg(this)},t.prototype.ceil=function(){return this.throwIfDisposed(),xt.ceil(this)},t.prototype.floor=function(){return this.throwIfDisposed(),xt.floor(this)},t.prototype.sign=function(){return this.throwIfDisposed(),xt.sign(this)},t.prototype.isNaN=function(){return this.throwIfDisposed(),xt.isNaN(this)},t.prototype.isInf=function(){return this.throwIfDisposed(),xt.isInf(this)},t.prototype.isFinite=function(){return this.throwIfDisposed(),xt.isFinite(this)},t.prototype.exp=function(){return this.throwIfDisposed(),xt.exp(this)},t.prototype.expm1=function(){return this.throwIfDisposed(),xt.expm1(this)},t.prototype.log=function(){return this.throwIfDisposed(),xt.log(this)},t.prototype.log1p=function(){return this.throwIfDisposed(),xt.log1p(this)},t.prototype.sqrt=function(){return this.throwIfDisposed(),xt.sqrt(this)},t.prototype.rsqrt=function(){return this.throwIfDisposed(),xt.rsqrt(this)},t.prototype.square=function(){return this.throwIfDisposed(),xt.square(this)},t.prototype.reciprocal=function(){return this.throwIfDisposed(),xt.reciprocal(this)},t.prototype.abs=function(){return this.throwIfDisposed(),xt.abs(this)},t.prototype.clipByValue=function(t,e){return this.throwIfDisposed(),xt.clipByValue(this,t,e)},t.prototype.relu=function(){return this.throwIfDisposed(),xt.relu(this)},t.prototype.relu6=function(){return this.throwIfDisposed(),xt.relu6(this)},t.prototype.elu=function(){return this.throwIfDisposed(),xt.elu(this)},t.prototype.selu=function(){return this.throwIfDisposed(),xt.selu(this)},t.prototype.leakyRelu=function(t){return void 0===t&&(t=.2),this.throwIfDisposed(),xt.leakyRelu(this,t)},t.prototype.prelu=function(t){return this.throwIfDisposed(),xt.prelu(this,t)},t.prototype.sigmoid=function(){return this.throwIfDisposed(),xt.sigmoid(this)},t.prototype.logSigmoid=function(){return this.throwIfDisposed(),xt.logSigmoid(this)},t.prototype.softplus=function(){return this.throwIfDisposed(),xt.softplus(this)},t.prototype.zerosLike=function(){return this.throwIfDisposed(),xt.zerosLike(this)},t.prototype.onesLike=function(){return this.throwIfDisposed(),xt.onesLike(this)},t.prototype.sin=function(){return this.throwIfDisposed(),xt.sin(this)},t.prototype.cos=function(){return this.throwIfDisposed(),xt.cos(this)},t.prototype.tan=function(){return this.throwIfDisposed(),xt.tan(this)},t.prototype.asin=function(){return this.throwIfDisposed(),xt.asin(this)},t.prototype.acos=function(){return this.throwIfDisposed(),xt.acos(this)},t.prototype.atan=function(){return this.throwIfDisposed(),xt.atan(this)},t.prototype.sinh=function(){return this.throwIfDisposed(),xt.sinh(this)},t.prototype.cosh=function(){return this.throwIfDisposed(),xt.cosh(this)},t.prototype.tanh=function(){return this.throwIfDisposed(),xt.tanh(this)},t.prototype.asinh=function(){return this.throwIfDisposed(),xt.asinh(this)},t.prototype.acosh=function(){return this.throwIfDisposed(),xt.acosh(this)},t.prototype.atanh=function(){return this.throwIfDisposed(),xt.atanh(this)},t.prototype.erf=function(){return this.throwIfDisposed(),xt.erf(this)},t.prototype.round=function(){return this.throwIfDisposed(),xt.round(this)},t.prototype.step=function(t){return void 0===t&&(t=0),this.throwIfDisposed(),xt.step(this,t)},t.prototype.softmax=function(t){return void 0===t&&(t=-1),this.throwIfDisposed(),xt.softmax(this,t)},t.prototype.logSoftmax=function(t){return void 0===t&&(t=-1),this.throwIfDisposed(),xt.logSoftmax(this,t)},t.prototype.resizeBilinear=function(t,e){return void 0===e&&(e=!1),this.throwIfDisposed(),xt.image.resizeBilinear(this,t,e)},t.prototype.resizeNearestNeighbor=function(t,e){return void 0===e&&(e=!1),this.throwIfDisposed(),xt.image.resizeNearestNeighbor(this,t,e)},t.prototype.conv1d=function(t,e,n,r,o,a){return void 0===r&&(r=\"NWC\"),void 0===o&&(o=1),this.throwIfDisposed(),xt.conv1d(this,t,e,n,r,o,a)},t.prototype.conv2d=function(t,e,n,r,o,a){return void 0===r&&(r=\"NHWC\"),void 0===o&&(o=[1,1]),this.throwIfDisposed(),xt.conv2d(this,t,e,n,r,o,a)},t.prototype.conv2dTranspose=function(t,e,n,r,o){return this.throwIfDisposed(),xt.conv2dTranspose(this,t,e,n,r,o)},t.prototype.depthwiseConv2D=function(t,e,n,r,o,a){return void 0===r&&(r=\"NHWC\"),void 0===o&&(o=[1,1]),this.throwIfDisposed(),xt.depthwiseConv2d(this,t,e,n,r,o,a)},t.prototype.separableConv2d=function(t,e,n,r,o,a){return void 0===o&&(o=[1,1]),void 0===a&&(a=\"NHWC\"),this.throwIfDisposed(),xt.separableConv2d(this,t,e,n,r,o,a)},t.prototype.avgPool=function(t,e,n,r){return this.throwIfDisposed(),xt.avgPool(this,t,e,n,r)},t.prototype.maxPool=function(t,e,n,r){return this.throwIfDisposed(),xt.maxPool(this,t,e,n,r)},t.prototype.localResponseNormalization=function(t,e,n,r){return void 0===t&&(t=5),void 0===e&&(e=1),void 0===n&&(n=1),void 0===r&&(r=.5),xt.localResponseNormalization(this,t,e,n,r)},t.prototype.pool=function(t,e,n,r,o){return this.throwIfDisposed(),xt.pool(this,t,e,n,r,o)},t.prototype.variable=function(t,e,n){return void 0===t&&(t=!0),this.throwIfDisposed(),yt().makeVariable(this,t,e,n)},t.prototype.unsortedSegmentSum=function(t,e){return this.throwIfDisposed(),xt.unsortedSegmentSum(this,t,e)},t.prototype.batchToSpaceND=function(t,e){return this.throwIfDisposed(),xt.batchToSpaceND(this,t,e)},t.prototype.spaceToBatchND=function(t,e){return this.throwIfDisposed(),xt.spaceToBatchND(this,t,e)},t.prototype.topk=function(t,e){return void 0===t&&(t=1),void 0===e&&(e=!0),this.throwIfDisposed(),xt.topk(this,t,e)},t.prototype.stridedSlice=function(t,e,n,r,o,a,i,s){return void 0===r&&(r=0),void 0===o&&(o=0),void 0===a&&(a=0),void 0===i&&(i=0),void 0===s&&(s=0),this.throwIfDisposed(),xt.stridedSlice(this,t,e,n,r,o,a,i,s)},t.prototype.depthToSpace=function(t,e){return this.throwIfDisposed(),xt.depthToSpace(this,t,e)},t.prototype.fft=function(){return this.throwIfDisposed(),xt.spectral.fft(this)},t.prototype.ifft=function(){return this.throwIfDisposed(),xt.spectral.ifft(this)},t.prototype.rfft=function(){return this.throwIfDisposed(),xt.spectral.rfft(this)},t.prototype.irfft=function(){return this.throwIfDisposed(),xt.spectral.irfft(this)},t}();Object.defineProperty(wt,Symbol.hasInstance,{value:function(t){return!!t&&null!=t.dataId&&null!=t.shape&&null!=t.dtype}});var Ct,Et,Rt,It,kt,St=function(t){function n(e,n,r,o){var a=t.call(this,e.shape,e.dtype,e.dataId,o)||this;return a.trainable=n,a.name=r,a}return e(n,t),n.prototype.assign=function(t){if(t.dtype!==this.dtype)throw new Error(\"dtype of the new value (\"+t.dtype+\") and previous value (\"+this.dtype+\") must match\");if(!S(t.shape,this.shape))throw new Error(\"shape of the new value (\"+t.shape+\") and previous value (\"+this.shape+\") must match\");yt().disposeTensor(this),this.dataId=t.dataId,yt().incRef(this,null)},n.prototype.dispose=function(){yt().disposeVariable(this),this.isDisposedInternal=!0},n}(wt);Object.defineProperty(St,Symbol.hasInstance,{value:function(t){return t instanceof wt&&null!=t.assign&&t.assign instanceof Function}}),function(t){t.R0=\"R0\",t.R1=\"R1\",t.R2=\"R2\",t.R3=\"R3\",t.R4=\"R4\",t.R5=\"R5\",t.R6=\"R6\"}(Ct||(Ct={})),function(t){t.float32=\"float32\",t.int32=\"int32\",t.bool=\"int32\",t.complex64=\"complex64\"}(Et||(Et={})),function(t){t.float32=\"float32\",t.int32=\"int32\",t.bool=\"bool\",t.complex64=\"complex64\"}(Rt||(Rt={})),function(t){t.float32=\"float32\",t.int32=\"float32\",t.bool=\"float32\",t.complex64=\"complex64\"}(It||(It={})),function(t){t.float32=\"complex64\",t.int32=\"complex64\",t.bool=\"complex64\",t.complex64=\"complex64\"}(kt||(kt={}));var At={float32:It,int32:Et,bool:Rt,complex64:kt};function Tt(t,e){if(\"string\"===t||\"string\"===e){if(\"string\"===t&&\"string\"===e)return\"string\";throw new Error(\"Can not upcast \"+t+\" with \"+e)}return At[t][e]}function Dt(t){return Tt(t,\"int32\")}function Nt(t,e){if(t.dtype===e.dtype)return[t,e];var n=Tt(t.dtype,e.dtype);return[t.cast(n),e.cast(n)]}function Ft(t,e){C(t.dtype===e.dtype,(function(){return\"The dtypes of the first(\"+t.dtype+\") and second(\"+e.dtype+\") input must match\"}))}function _t(t){var e=[];return function t(e,n,r){if(null==e)return;if(e instanceof wt)return void n.push(e);if(o=e,!Array.isArray(o)&&\"object\"!=typeof o)return;var o;var a=e;for(var i in a){var s=a[i];r.has(s)||(r.add(s),t(s,n,r))}}(t,e,new Set),e}var Ot,Mt=Object.freeze({makeTypesMatch:Nt,assertTypesMatch:Ft,isTensorInList:function(t,e){return e.some((function(e){return e.id===t.id}))},getTensorsInContainer:_t}),Bt=function(){function t(){this.registeredVariables={},this.nextTapeNodeId=0,this.numBytes=0,this.numTensors=0,this.numStringTensors=0,this.numDataBuffers=0,this.gradientDepth=0,this.kernelDepth=0,this.scopeStack=[],this.numDataMovesStack=[],this.nextScopeId=0,this.tensorInfo=new WeakMap,this.profiling=!1,this.activeProfile={newBytes:0,newTensors:0,peakBytes:0,kernels:[],result:null}}return t.prototype.dispose=function(){for(var t in this.registeredVariables)this.registeredVariables[t].dispose()},t}(),Pt=function(){function t(t){this.ENV=t,this.registry={},this.registryFactory={},this.pendingBackendInitId=0,this.state=new Bt}return t.prototype.ready=function(){return n(this,void 0,void 0,(function(){var t,e,n;return r(this,(function(r){switch(r.label){case 0:if(null!=this.pendingBackendInit)return[2,this.pendingBackendInit.then((function(){}))];if(null!=this.backendInstance)return[2];t=this.getSortedBackends(),e=0,r.label=1;case 1:return e<t.length?(n=t[e],[4,this.initializeBackend(n).success]):[3,5];case 2:return r.sent()?[4,this.setBackend(n)]:[3,4];case 3:return r.sent(),[2];case 4:return e++,[3,1];case 5:throw new Error(\"Could not initialize any backends, all backend initializations failed.\")}}))}))},Object.defineProperty(t.prototype,\"backend\",{get:function(){if(null!=this.pendingBackendInit)throw new Error(\"Backend '\"+this.backendName+\"' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods\");if(null==this.backendInstance){var t=this.initializeBackendsAndReturnBest(),e=t.name;if(t.asyncInit)throw new Error(\"The highest priority backend '\"+e+\"' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods\");this.setBackend(e)}return this.backendInstance},enumerable:!0,configurable:!0}),t.prototype.backendNames=function(){return Object.keys(this.registryFactory)},t.prototype.findBackend=function(t){if(!(t in this.registry)){if(!(t in this.registryFactory))return null;if(this.initializeBackend(t).asyncInit)return null}return this.registry[t]},t.prototype.findBackendFactory=function(t){return t in this.registryFactory?this.registryFactory[t].factory:null},t.prototype.registerBackend=function(t,e,n){return void 0===n&&(n=1),t in this.registryFactory?(console.warn(t+\" backend was already registered. Reusing existing backend factory.\"),!1):(this.registryFactory[t]={factory:e,priority:n},!0)},t.prototype.setBackend=function(t){return n(this,void 0,void 0,(function(){var e,n,o;return r(this,(function(r){switch(r.label){case 0:if(null==this.registryFactory[t])throw new Error(\"Backend name '\"+t+\"' not found in registry\");return this.backendName=t,null!=this.registry[t]?[3,4]:(this.backendInstance=null,e=this.initializeBackend(t),n=e.success,e.asyncInit?[4,n]:[3,2]);case 1:return o=r.sent(),[3,3];case 2:o=n,r.label=3;case 3:if(!o)return[2,!1];r.label=4;case 4:return this.backendInstance=this.registry[t],this.setupRegisteredKernels(),this.profiler=new ut(this.backendInstance),[2,!0]}}))}))},t.prototype.setupRegisteredKernels=function(){var t=this;f(this.backendName).forEach((function(e){null!=e.setupFunc&&e.setupFunc(t.backendInstance)}))},t.prototype.disposeRegisteredKernels=function(t){var e=this;f(t).forEach((function(n){null!=n.disposeFunc&&n.disposeFunc(e.registry[t])}))},t.prototype.initializeBackend=function(t){var e=this,n=this.registryFactory[t];if(null==n)throw new Error(\"Cannot initialize backend \"+t+\", no registration found.\");try{var r=n.factory();if(Promise.resolve(r)===r){var o=++this.pendingBackendInitId,a=r.then((function(n){return!(o<e.pendingBackendInitId)&&(e.registry[t]=n,e.pendingBackendInit=null,!0)})).catch((function(n){return!(o<e.pendingBackendInitId)&&(e.pendingBackendInit=null,console.warn(\"Initialization of backend \"+t+\" failed\"),console.warn(n.stack||n.message),!1)}));return this.pendingBackendInit=a,{success:a,asyncInit:!0}}return this.registry[t]=r,{success:!0,asyncInit:!1}}catch(e){return console.warn(\"Initialization of backend \"+t+\" failed\"),console.warn(e.stack||e.message),{success:!1,asyncInit:!1}}},t.prototype.removeBackend=function(t){if(!(t in this.registryFactory))throw new Error(t+\" backend not found in registry\");this.backendName===t&&null!=this.pendingBackendInit&&this.pendingBackendInitId++,t in this.registry&&(this.disposeRegisteredKernels(t),this.registry[t].dispose(),delete this.registry[t]),delete this.registryFactory[t],this.backendName===t&&(this.pendingBackendInit=null,this.backendName=null,this.backendInstance=null)},t.prototype.getSortedBackends=function(){var t=this;if(0===Object.keys(this.registryFactory).length)throw new Error(\"No backend found in registry.\");return Object.keys(this.registryFactory).sort((function(e,n){return t.registryFactory[n].priority-t.registryFactory[e].priority}))},t.prototype.initializeBackendsAndReturnBest=function(){for(var t=this.getSortedBackends(),e=0;e<t.length;e++){var n=t[e],r=this.initializeBackend(n),o=r.success,a=r.asyncInit;if(a||o)return{name:n,asyncInit:a}}throw new Error(\"Could not initialize any backends, all backend initializations failed.\")},t.prototype.moveData=function(t,e){var n=this.state.tensorInfo.get(e),r=n.backend,o=this.readSync(e);r.disposeData(e),n.backend=t,t.move(e,o,n.shape,n.dtype),this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack[this.state.numDataMovesStack.length-1]++},t.prototype.tidy=function(t,e){var n,r=this,o=null;if(null==e){if(\"function\"!=typeof t)throw new Error(\"Please provide a function to tidy()\");e=t}else{if(\"string\"!=typeof t&&!(t instanceof String))throw new Error(\"When calling with two arguments, the first argument to tidy() must be a string\");if(\"function\"!=typeof e)throw new Error(\"When calling with two arguments, the 2nd argument to tidy() must be a function\");o=t}return this.scopedRun((function(){return r.startScope(o)}),(function(){return r.endScope(n)}),(function(){return(n=e())instanceof Promise&&console.error(\"Cannot return a Promise inside of tidy.\"),n}))},t.prototype.scopedRun=function(t,e,n){t();try{var r=n();return e(),r}catch(t){throw e(),t}},t.prototype.nextTensorId=function(){return t.nextTensorId++},t.prototype.nextVariableId=function(){return t.nextVariableId++},t.prototype.clone=function(t){var e=this.makeTensorFromDataId(t.dataId,t.shape,t.dtype),n={x:t};return this.addTapeNode(this.state.activeScope.name,n,[e],(function(t){return{x:function(){return t.toFloat()}}}),[],{}),e},t.prototype.runKernel=function(t,e,n,r,o){return this.runKernelFunc(null,e,null,t,n,r,o)},t.prototype.shouldCheckForMemLeaks=function(){return this.ENV.getBool(\"IS_TEST\")},t.prototype.checkKernelForMemLeak=function(t,e,n){var r=this.backend.numDataIds(),o=0;n.forEach((function(t){o+=\"complex64\"===t.dtype?3:1}));var a=this.state.numDataMovesStack[this.state.numDataMovesStack.length-1],i=r-e-o-a;if(i>0)throw new Error(\"Backend '\"+this.backendName+\"' has an internal memory leak (\"+i+\" data ids) after running '\"+t+\"'\")},t.prototype.runKernelFunc=function(t,e,n,r,o,a,i){var s,u=this,c=[],h=this.isTapeOn();null==r&&(r=null!=this.state.activeScope?this.state.activeScope.name:\"\");var f,d=this.state.numBytes,p=this.state.numTensors;this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack.push(0);var v,g=l(r,this.backendName);if(null!=g)f=function(){var t=u.backend.numDataIds();v=g.kernelFunc({inputs:e,attrs:o,backend:u.backend});var n=Array.isArray(v)?v:[v];u.shouldCheckForMemLeaks()&&u.checkKernelForMemLeak(r,t,n);var s=n.map((function(t){var e=t.dataId,n=t.shape,r=t.dtype;return u.makeTensorFromDataId(e,n,r)}));if(h){var l=u.getTensorsForGradient(r,e,s);if(null==l){null==i&&(i=[]);var f=s.filter((function(t,e){return i[e]}));l=(a||[]).slice().concat(f)}c=u.saveTensorsForBackwardMode(l)}return s};else{var m=function(t){h&&(c=t.map((function(t){return u.keep(u.clone(t))})))};f=function(){var e=u.backend.numDataIds();v=u.tidy((function(){return t(u.backend,m)}));var n=Array.isArray(v)?v:[v];return u.shouldCheckForMemLeaks()&&u.checkKernelForMemLeak(r,e,n),n}}return this.scopedRun((function(){return u.state.kernelDepth++}),(function(){return u.state.kernelDepth--}),(function(){s=u.ENV.getBool(\"DEBUG\")?u.profiler.profileKernel(r,e,(function(){return f()})):f()})),h&&this.addTapeNode(r,e,s,n,c,o),this.state.profiling&&this.state.activeProfile.kernels.push({name:r,bytesAdded:this.state.numBytes-d,totalBytesSnapshot:this.state.numBytes,tensorsAdded:this.state.numTensors-p,totalTensorsSnapshot:this.state.numTensors,inputShapes:Object.keys(e).map((function(t){return e[t].shape})),outputShapes:s.map((function(t){return t.shape}))}),Array.isArray(v)?s:s[0]},t.prototype.saveTensorsForBackwardMode=function(t){var e=this;return t.map((function(t){return e.keep(e.clone(t))}))},t.prototype.getTensorsForGradient=function(t,e,n){var r=h(t);if(null!=r){var o=r.inputsToSave||[],a=r.outputsToSave||[],i=void 0;r.saveAllInputs?(C(Array.isArray(e),(function(){return\"saveAllInputs is true, expected inputs to be an array.\"})),i=Object.keys(e).map((function(t){return e[t]}))):i=o.map((function(t){return e[t]}));var s=n.filter((function(t,e){return a[e]}));return i.concat(s)}return null},t.prototype.makeTensor=function(t,e,n,r){if(null==t)throw new Error(\"Values passed to engine.makeTensor() are null\");n=n||\"float32\",r=r||this.backend;var o=t;\"string\"===n&&H(t[0])&&(o=t.map((function(t){return rt(t)})));var a=r.write(o,e,n),i=new wt(e,n,a,this.nextTensorId());if(this.incRef(i,r),\"string\"===n){var s=this.state.tensorInfo.get(a),u=G(o);this.state.numBytes+=u-s.bytes,s.bytes=u}return i},t.prototype.makeTensorFromDataId=function(t,e,n,r){var o=new wt(e,n=n||\"float32\",t,this.nextTensorId());return this.incRef(o,r),o},t.prototype.makeVariable=function(t,e,n,r){void 0===e&&(e=!0),n=n||this.nextVariableId().toString(),null!=r&&r!==t.dtype&&(t=t.asType(r));var o=new St(t,e,n,this.nextTensorId());if(null!=this.state.registeredVariables[o.name])throw new Error(\"Variable with name \"+o.name+\" was already registered\");return this.state.registeredVariables[o.name]=o,this.incRef(o,this.backend),o},t.prototype.incRef=function(t,e){var n=this.state.tensorInfo.has(t.dataId)?this.state.tensorInfo.get(t.dataId).refCount:0;if(this.state.numTensors++,\"string\"===t.dtype&&this.state.numStringTensors++,0===n){this.state.numDataBuffers++;var r=0;\"complex64\"!==t.dtype&&\"string\"!==t.dtype&&(r=t.size*z(t.dtype)),this.state.tensorInfo.set(t.dataId,{backend:e||this.backend,dtype:t.dtype,shape:t.shape,bytes:r,refCount:0}),this.state.numBytes+=r}this.state.tensorInfo.get(t.dataId).refCount++,t instanceof St||this.track(t)},t.prototype.disposeTensor=function(t){if(this.state.tensorInfo.has(t.dataId)){this.state.numTensors--,\"string\"===t.dtype&&this.state.numStringTensors--;var e=this.state.tensorInfo.get(t.dataId);e.refCount<=1?(\"complex64\"!==t.dtype&&(this.state.numBytes-=e.bytes),this.state.numDataBuffers--,e.backend.disposeData(t.dataId),this.state.tensorInfo.delete(t.dataId)):this.state.tensorInfo.get(t.dataId).refCount--}},t.prototype.disposeVariables=function(){for(var t in this.state.registeredVariables){var e=this.state.registeredVariables[t];this.disposeVariable(e)}},t.prototype.disposeVariable=function(t){this.disposeTensor(t),null!=this.state.registeredVariables[t.name]&&delete this.state.registeredVariables[t.name]},t.prototype.memory=function(){var t=this.backend.memory();return t.numTensors=this.state.numTensors,t.numDataBuffers=this.state.numDataBuffers,t.numBytes=this.state.numBytes,this.state.numStringTensors>0&&(t.unreliable=!0,null==t.reasons&&(t.reasons=[]),t.reasons.push(\"Memory usage by string tensors is approximate (2 bytes per character)\")),t},t.prototype.profile=function(t){return n(this,void 0,void 0,(function(){var e,n;return r(this,(function(r){return this.state.profiling=!0,e=this.state.numBytes,n=this.state.numTensors,this.state.activeProfile.kernels=[],this.state.activeProfile.result=t(),this.state.profiling=!1,this.state.activeProfile.peakBytes=Math.max.apply(Math,this.state.activeProfile.kernels.map((function(t){return t.totalBytesSnapshot}))),this.state.activeProfile.newBytes=this.state.numBytes-e,this.state.activeProfile.newTensors=this.state.numTensors-n,[2,this.state.activeProfile]}))}))},t.prototype.isTapeOn=function(){return this.state.gradientDepth>0&&0===this.state.kernelDepth},t.prototype.addTapeNode=function(t,e,n,r,o,a){var i=this,s={id:this.state.nextTapeNodeId++,kernelName:t,inputs:e,outputs:n,saved:o},u=h(t);null!=u&&(r=u.gradFunc),null!=r&&(s.gradient=function(t){return t=t.map((function(t,e){if(null==t){var r=n[e],o=tt(r.size,r.dtype);return i.makeTensor(o,r.shape,r.dtype)}return t})),r(t.length>1?t:t[0],o,a)}),this.state.activeTape.push(s)},t.prototype.keep=function(t){return t.kept=!0,t},t.prototype.startTape=function(){0===this.state.gradientDepth&&(this.state.activeTape=[]),this.state.gradientDepth++},t.prototype.endTape=function(){this.state.gradientDepth--},t.prototype.startScope=function(t){var e={track:[],name:\"unnamed scope\",id:this.state.nextScopeId++};t&&(e.name=t),this.state.scopeStack.push(e),this.state.activeScope=e},t.prototype.endScope=function(t){for(var e=this,n=_t(t),r=new Set(n.map((function(t){return t.id}))),o=0;o<this.state.activeScope.track.length;o++){var a=this.state.activeScope.track[o];a.kept||r.has(a.id)||a.dispose()}var i=this.state.scopeStack.pop();this.state.activeScope=0===this.state.scopeStack.length?null:this.state.scopeStack[this.state.scopeStack.length-1],n.forEach((function(t){t.kept||t.scopeId!==i.id||e.track(t)}))},t.prototype.gradients=function(t,e,n,r){var o=this;if(void 0===r&&(r=!1),C(e.length>0,(function(){return\"gradients() received an empty list of xs.\"})),null!=n&&\"float32\"!==n.dtype)throw new Error(\"dy must have 'float32' dtype, but has '\"+n.dtype+\"'\");var a=this.scopedRun((function(){return o.startTape()}),(function(){return o.endTape()}),(function(){return o.tidy(\"forward\",t)}));C(a instanceof wt,(function(){return\"The result y returned by f() must be a tensor.\"}));var i=function(t,e,n){for(var r={},o={},a=0;a<e.length;a++)r[e[a].id]=!0;for(a=0;a<t.length;a++){var i=(p=t[a]).inputs;for(var s in i){for(var u=i[s],c=!1,l=0;l<e.length;l++)if(r[u.id]){p.outputs.forEach((function(t){return r[t.id]=!0})),c=!0,o[p.id]=!0;break}if(c)break}}var h={};h[n.id]=!0;var f={};for(a=t.length-1;a>=0;a--)for(i=(p=t[a]).inputs,l=0;l<p.outputs.length;l++)if(h[p.outputs[l].id]){for(var s in i)h[i[s].id]=!0,f[p.id]=!0;break}var d=[];for(a=0;a<t.length;a++){var p;if(o[(p=t[a]).id]&&f[p.id]){var v={};for(var s in p.inputs){var g=p.inputs[s];r[g.id]&&(v[s]=g)}var m=Object.assign({},p);m.inputs=v,m.outputs=p.outputs,d.push(m)}}return d}(this.state.activeTape,e,a);if(!r&&0===i.length&&e.length>0)throw new Error(\"Cannot compute gradient of y=f(x) with respect to x. Make sure that the f you passed encloses all operations that lead from x to y.\");return this.tidy(\"backward\",(function(){var t,r,s={};s[a.id]=null==n?(t=a.shape,r=Z(k(t),\"float32\"),Lt.makeTensor(r,t,\"float32\")):n,function(t,e,n){for(var r=function(r){var o=e[r],a=[];if(o.outputs.forEach((function(e){var n=t[e.id];null!=n?a.push(n):a.push(null)})),null==o.gradient)throw new Error(\"Cannot compute gradient: gradient function not found for \"+o.kernelName+\".\");var i=o.gradient(a),s=function(e){if(!(e in i))throw new Error(\"Cannot backprop through input \"+e+\". Available gradients found: \"+Object.keys(i)+\".\");var r=n((function(){return i[e]()}));if(\"float32\"!==r.dtype)throw new Error(\"Error in gradient for op \"+o.kernelName+\". The gradient of input \"+e+\" must have 'float32' dtype, but has '\"+r.dtype+\"'\");var a=o.inputs[e];if(!S(r.shape,a.shape))throw new Error(\"Error in gradient for op \"+o.kernelName+\". The gradient of input '\"+e+\"' has shape '\"+r.shape+\"', which does not match the shape of the input '\"+a.shape+\"'\");if(null==t[a.id])t[a.id]=r;else{var s=t[a.id];t[a.id]=s.add(r),s.dispose()}};for(var u in o.inputs)s(u)},o=e.length-1;o>=0;o--)r(o)}(s,i,(function(t){return o.tidy(t)}));var u=e.map((function(t){return s[t.id]}));return 0===o.state.gradientDepth&&(o.state.activeTape.forEach((function(t){for(var e=0,n=t.saved;e<n.length;e++){n[e].dispose()}})),o.state.activeTape=null),{value:a,grads:u}}))},t.prototype.customGrad=function(t){var e=this;return C(X(t),(function(){return\"The f passed in customGrad(f) must be a function.\"})),function(){for(var n,r=[],o=0;o<arguments.length;o++)r[o]=arguments[o];C(r.every((function(t){return t instanceof wt})),(function(){return\"The args passed in customGrad(f)(x1, x2,...) must all be tensors\"}));var a={};return r.forEach((function(t,e){a[e]=t})),e.runKernelFunc((function(e,o){return C((n=t.apply(void 0,r.concat([o]))).value instanceof wt,(function(){return\"The function f passed in customGrad(f) must return an object where `obj.value` is a tensor\"})),C(X(n.gradFunc),(function(){return\"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function.\"})),n.value}),a,(function(t,e){var o=n.gradFunc(t,e),a=Array.isArray(o)?o:[o];C(a.length===r.length,(function(){return\"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns the same number of tensors as inputs passed to f(...).\"})),C(a.every((function(t){return t instanceof wt})),(function(){return\"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns a list of only tensors.\"}));var i={};return a.forEach((function(t,e){i[e]=function(){return t}})),i}))}},t.prototype.readSync=function(t){return this.state.tensorInfo.get(t).backend.readSync(t)},t.prototype.read=function(t){return this.state.tensorInfo.get(t).backend.read(t)},t.prototype.time=function(t){return n(this,void 0,void 0,(function(){var e,n;return r(this,(function(r){switch(r.label){case 0:return e=et(),[4,this.backend.time(t)];case 1:return(n=r.sent()).wallMs=et()-e,[2,n]}}))}))},t.prototype.track=function(t){return null!=this.state.activeScope&&(t.scopeId=this.state.activeScope.id,this.state.activeScope.track.push(t)),t},Object.defineProperty(t.prototype,\"registeredVariables\",{get:function(){return this.state.registeredVariables},enumerable:!0,configurable:!0}),t.prototype.reset=function(){for(var t in this.pendingBackendInitId++,this.state.dispose(),this.ENV.reset(),this.state=new Bt,this.registry)this.disposeRegisteredKernels(t),this.registry[t].dispose(),delete this.registry[t];this.backendName=null,this.backendInstance=null,this.pendingBackendInit=null},t.nextTensorId=0,t.nextVariableId=0,t}();var Lt=function(){var t=function(){if(null==Ot){var t=void 0;if(\"undefined\"!=typeof window)t=window;else if(\"undefined\"!=typeof global)t=global;else if(\"undefined\"!=typeof process)t=process;else{if(\"undefined\"==typeof self)throw new Error(\"Could not find a global object\");t=self}Ot=t}return Ot}();if(null==t._tfengine){var e=new o(t);t._tfengine=new Pt(e)}return function(t){s=t}(t._tfengine.ENV),yt=function(){return t._tfengine},t._tfengine}();function Wt(){return\"undefined\"!=typeof window&&null!=window.document||\"undefined\"!=typeof WorkerGlobalScope}var Ut=i();Ut.registerFlag(\"DEBUG\",(function(){return!1}),(function(t){t&&console.warn(\"Debugging mode is ON. The output of every math call will be downloaded to CPU and checked for NaNs. This significantly impacts performance.\")})),Ut.registerFlag(\"IS_BROWSER\",(function(){return Wt()})),Ut.registerFlag(\"IS_NODE\",(function(){return\"undefined\"!=typeof process&&void 0!==process.versions&&void 0!==process.versions.node})),Ut.registerFlag(\"IS_CHROME\",(function(){return\"undefined\"!=typeof navigator&&null!=navigator&&null!=navigator.userAgent&&/Chrome/.test(navigator.userAgent)&&/Google Inc/.test(navigator.vendor)})),Ut.registerFlag(\"PROD\",(function(){return!1})),Ut.registerFlag(\"TENSORLIKE_CHECK_SHAPE_CONSISTENCY\",(function(){return Ut.getBool(\"DEBUG\")})),Ut.registerFlag(\"DEPRECATION_WARNINGS_ENABLED\",(function(){return!0})),Ut.registerFlag(\"IS_TEST\",(function(){return!1}));var Vt,zt,Gt,Ht={},qt={alpha:!1,antialias:!1,premultipliedAlpha:!1,preserveDrawingBuffer:!1,depth:!1,stencil:!1,failIfMajorPerformanceCaveat:!0};function Kt(t,e){Ht[t]=e}function jt(t){t in Ht||(Ht[t]=function(t){if(1!==t&&2!==t)throw new Error(\"Cannot get WebGL rendering context, WebGL is disabled.\");var e=function(t){if(\"undefined\"!=typeof OffscreenCanvas&&2===t)return new OffscreenCanvas(300,150);if(\"undefined\"!=typeof document)return document.createElement(\"canvas\");throw new Error(\"Cannot create a canvas in this context\")}(t);if(e.addEventListener(\"webglcontextlost\",(function(e){e.preventDefault(),delete Ht[t]}),!1),1===t)return e.getContext(\"webgl\",qt)||e.getContext(\"experimental-webgl\",qt);return e.getContext(\"webgl2\",qt)}(t));var e=Ht[t];return e.isContextLost()?(delete Ht[t],jt(t)):(e.disable(e.DEPTH_TEST),e.disable(e.STENCIL_TEST),e.disable(e.BLEND),e.disable(e.DITHER),e.disable(e.POLYGON_OFFSET_FILL),e.disable(e.SAMPLE_COVERAGE),e.enable(e.SCISSOR_TEST),e.enable(e.CULL_FACE),e.cullFace(e.BACK),Ht[t])}function Xt(t,e){return[e,t]}function Yt(t){var e=k(t);return D(Math.ceil(e/4))}function $t(t,e){return[Math.max(1,Math.ceil(e/2)),Math.max(1,Math.ceil(t/2))]}function Qt(t,e){var n,r,o,a,s,u,c,l,h,f=t;return 2===i().getNumber(\"WEBGL_VERSION\")?(n=f.R32F,r=f.R16F,o=f.RGBA16F,a=f.RGBA32F,s=f.RED,u=4,c=1,l=f.HALF_FLOAT,h=f.FLOAT):(n=t.RGBA,r=t.RGBA,o=t.RGBA,a=f.RGBA,s=t.RGBA,u=4,c=4,l=null!=e?e.HALF_FLOAT_OES:null,h=t.FLOAT),{internalFormatFloat:n,internalFormatHalfFloat:r,internalFormatPackedHalfFloat:o,internalFormatPackedFloat:a,textureFormatFloat:s,downloadTextureFormat:t.RGBA,downloadUnpackNumChannels:u,defaultNumChannels:c,textureTypeHalfFloat:l,textureTypeFloat:h}}function Jt(t,e,n){var r=n();return e&&function(t){var e=t.getError();if(e!==t.NO_ERROR)throw new Error(\"WebGL Error: \"+ne(t,e))}(t),r}!function(t){t[t.DENSE=0]=\"DENSE\",t[t.SHARED_BATCH=1]=\"SHARED_BATCH\"}(Vt||(Vt={})),function(t){t[t.RENDER=0]=\"RENDER\",t[t.UPLOAD=1]=\"UPLOAD\",t[t.PIXELS=2]=\"PIXELS\",t[t.DOWNLOAD=3]=\"DOWNLOAD\"}(zt||(zt={})),function(t){t[t.UNPACKED_FLOAT16=0]=\"UNPACKED_FLOAT16\",t[t.UNPACKED_FLOAT32=1]=\"UNPACKED_FLOAT32\",t[t.PACKED_4X1_UNSIGNED_BYTE=2]=\"PACKED_4X1_UNSIGNED_BYTE\",t[t.PACKED_2X2_FLOAT32=3]=\"PACKED_2X2_FLOAT32\",t[t.PACKED_2X2_FLOAT16=4]=\"PACKED_2X2_FLOAT16\"}(Gt||(Gt={}));var Zt=5.96e-8,te=65504;function ee(t){return!!(i().getBool(\"WEBGL_RENDER_FLOAT32_ENABLED\")||0===t||Zt<Math.abs(t)&&Math.abs(t)<te)}function ne(t,e){switch(e){case t.NO_ERROR:return\"NO_ERROR\";case t.INVALID_ENUM:return\"INVALID_ENUM\";case t.INVALID_VALUE:return\"INVALID_VALUE\";case t.INVALID_OPERATION:return\"INVALID_OPERATION\";case t.INVALID_FRAMEBUFFER_OPERATION:return\"INVALID_FRAMEBUFFER_OPERATION\";case t.OUT_OF_MEMORY:return\"OUT_OF_MEMORY\";case t.CONTEXT_LOST_WEBGL:return\"CONTEXT_LOST_WEBGL\";default:return\"Unknown error code \"+e}}function re(t,e,n){return ke(t,e,(function(){return t.getExtension(n)}),'Extension \"'+n+'\" not supported on this browser.')}function oe(t,e,n){var r=ke(t,e,(function(){return t.createShader(t.VERTEX_SHADER)}),\"Unable to create vertex WebGLShader.\");if(Jt(t,e,(function(){return t.shaderSource(r,n)})),Jt(t,e,(function(){return t.compileShader(r)})),!1===t.getShaderParameter(r,t.COMPILE_STATUS))throw console.log(t.getShaderInfoLog(r)),new Error(\"Failed to compile vertex shader.\");return r}function ae(t,e,n){var r=ke(t,e,(function(){return t.createShader(t.FRAGMENT_SHADER)}),\"Unable to create fragment WebGLShader.\");if(Jt(t,e,(function(){return t.shaderSource(r,n)})),Jt(t,e,(function(){return t.compileShader(r)})),!1===t.getShaderParameter(r,t.COMPILE_STATUS))throw function(t,e){var n=ue.exec(e);if(null==n)return console.log(\"Couldn't parse line number in error: \"+e),void console.log(t);for(var r=+n[1],o=t.split(\"\\n\"),a=o.length.toString().length+2,i=o.map((function(t,e){return N((e+1).toString(),a)+t})),s=0,u=0;u<i.length;u++)s=Math.max(i[u].length,s);var c=i.slice(0,r-1),l=i.slice(r-1,r),h=i.slice(r);console.log(c.join(\"\\n\")),console.log(e.split(\"\\n\")[0]),console.log(\"%c \"+N(l[0],s),\"border:1px solid red; background-color:#e3d2d2; color:#a61717\"),console.log(h.join(\"\\n\"))}(n,t.getShaderInfoLog(r)),new Error(\"Failed to compile fragment shader.\");return r}var ie,se,ue=/ERROR: [0-9]+:([0-9]+):/g;function ce(t,e){return ke(t,e,(function(){return t.createProgram()}),\"Unable to create WebGLProgram.\")}function le(t,e,n){if(Jt(t,e,(function(){return t.linkProgram(n)})),!1===t.getProgramParameter(n,t.LINK_STATUS))throw console.log(t.getProgramInfoLog(n)),new Error(\"Failed to link vertex and fragment shaders.\")}function he(t,e,n){if(Jt(t,e,(function(){return t.validateProgram(n)})),!1===t.getProgramParameter(n,t.VALIDATE_STATUS))throw console.log(t.getProgramInfoLog(n)),new Error(\"Shader program validation failed.\")}function fe(t,e,n){var r=ke(t,e,(function(){return t.createBuffer()}),\"Unable to create WebGLBuffer\");return Jt(t,e,(function(){return t.bindBuffer(t.ARRAY_BUFFER,r)})),Jt(t,e,(function(){return t.bufferData(t.ARRAY_BUFFER,n,t.STATIC_DRAW)})),r}function de(t,e,n){var r=ke(t,e,(function(){return t.createBuffer()}),\"Unable to create WebGLBuffer\");return Jt(t,e,(function(){return t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,r)})),Jt(t,e,(function(){return t.bufferData(t.ELEMENT_ARRAY_BUFFER,n,t.STATIC_DRAW)})),r}function pe(t,e){return ke(t,e,(function(){return t.createTexture()}),\"Unable to create WebGLTexture.\")}function ve(t,e){var n=i().getNumber(\"WEBGL_MAX_TEXTURE_SIZE\");if(t<=0||e<=0){var r=\"[\"+t+\"x\"+e+\"]\";throw new Error(\"Requested texture size \"+r+\" is invalid.\")}if(t>n||e>n){r=\"[\"+t+\"x\"+e+\"]\";throw new Error(\"Requested texture size \"+r+\" greater than WebGL maximum on this browser / GPU \"+(\"[\"+n+\"x\"+n+\"]\")+\".\")}}function ge(t,e){return ke(t,e,(function(){return t.createFramebuffer()}),\"Unable to create WebGLFramebuffer.\")}function me(t,e,n,r,o,a,i,s){var u=t.getAttribLocation(n,r);return-1!==u&&(Jt(t,e,(function(){return t.bindBuffer(t.ARRAY_BUFFER,o)})),Jt(t,e,(function(){return t.vertexAttribPointer(u,a,t.FLOAT,!1,i,s)})),Jt(t,e,(function(){return t.enableVertexAttribArray(u)})),!0)}function ye(t,e,n,r){Se(t,r),Jt(t,e,(function(){return t.activeTexture(t.TEXTURE0+r)})),Jt(t,e,(function(){return t.bindTexture(t.TEXTURE_2D,n)}))}function xe(t,e,n,r){return ke(t,e,(function(){return t.getUniformLocation(n,r)}),'uniform \"'+r+'\" not present in program.')}function be(t,e,n){return t.getUniformLocation(e,n)}function we(t,e,n,r,o,a){Jt(t,e,(function(){return ye(t,e,r,a)})),Jt(t,e,(function(){return t.uniform1i(o,a)}))}function Ce(t,e,n,r){Jt(t,e,(function(){return t.bindFramebuffer(t.FRAMEBUFFER,r)})),Jt(t,e,(function(){return t.framebufferTexture2D(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.TEXTURE_2D,n,0)}))}function Ee(t,e,n){Jt(t,e,(function(){return t.bindFramebuffer(t.FRAMEBUFFER,n)})),Jt(t,e,(function(){return t.framebufferTexture2D(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.TEXTURE_2D,null,0)}))}function Re(t){var e=t.checkFramebufferStatus(t.FRAMEBUFFER);if(e!==t.FRAMEBUFFER_COMPLETE)throw new Error(\"Error binding framebuffer: \"+Ie(t,e))}function Ie(t,e){switch(e){case t.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:return\"FRAMEBUFFER_INCOMPLETE_ATTACHMENT\";case t.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:return\"FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT\";case t.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:return\"FRAMEBUFFER_INCOMPLETE_DIMENSIONS\";case t.FRAMEBUFFER_UNSUPPORTED:return\"FRAMEBUFFER_UNSUPPORTED\";default:return\"unknown error \"+e}}function ke(t,e,n,r){var o=Jt(t,e,(function(){return n()}));if(null==o)throw new Error(r);return o}function Se(t,e){var n=t.MAX_COMBINED_TEXTURE_IMAGE_UNITS-1,r=e+t.TEXTURE0;if(r<t.TEXTURE0||r>n)throw new Error(\"textureUnit must be in \"+(\"[gl.TEXTURE0, gl.TEXTURE\"+n+\"]\")+\".\")}function Ae(t,e){return void 0===e&&(e=2),k(t.slice(0,t.length-e))}function Te(t){if(0===t.length)throw Error(\"Cannot get rows and columns of an empty shape array.\");return[t.length>1?t[t.length-2]:1,t[t.length-1]]}function De(t){var e=[1,1,1];return 0===t.length||1===t.length&&1===t[0]||(e=[Ae(t)].concat(Te(t))),e}function Ne(t,e){var n;void 0===e&&(e=!1);var r=i().getNumber(\"WEBGL_MAX_TEXTURE_SIZE\");if(e&&(r*=2,1===(t=t.map((function(e,n){return n>=t.length-2?b(t[n]):t[n]}))).length&&(t=[2,t[0]])),2!==t.length){var o=M(t);t=o.newShape}var a=k(t);if(t.length<=1&&a<=r)return[1,a];if(2===t.length&&t[0]<=r&&t[1]<=r)return t;if(3===t.length&&t[0]*t[1]<=r&&t[2]<=r)return[t[0]*t[1],t[2]];if(3===t.length&&t[0]<=r&&t[1]*t[2]<=r)return[t[0],t[1]*t[2]];if(4===t.length&&t[0]*t[1]*t[2]<=r&&t[3]<=r)return[t[0]*t[1]*t[2],t[3]];if(4===t.length&&t[0]<=r&&t[1]*t[2]*t[3]<=r)return[t[0],t[1]*t[2]*t[3]];if(e){var s=Ae(t),u=2,c=2;return t.length&&(u=(n=Te(t))[0],c=n[1]),D(a=s*(u/2)*(c/2)).map((function(t){return 2*t}))}return D(a)}function Fe(t){return t%2==0}function _e(t,e){if(S(t=t.slice(-2),e=e.slice(-2)))return!0;if(!t.length||!e.length)return!0;if(0===t[0]||0===t[1]||0===e[0]||0===e[1])return!0;if(t.length!==e.length){var n=t.slice(-1)[0],r=e.slice(-1)[0];if(n===r)return!0;if(Fe(n)&&Fe(r)&&(1===t[0]||1===e[0]))return!0}return t[1]===e[1]&&Fe(t[0])&&Fe(e[0])}function Oe(t){if(null==ie){var e=jt(t);ie=e.getParameter(e.MAX_TEXTURE_SIZE)}return ie}function Me(t){if(null==se){var e=jt(t);se=e.getParameter(e.MAX_TEXTURE_IMAGE_UNITS)}return Math.min(16,se)}function Be(t){if(0===t)return 0;var e=jt(t);return Pe(e,\"EXT_disjoint_timer_query_webgl2\")&&2===t?2:Pe(e,\"EXT_disjoint_timer_query\")?1:0}function Pe(t,e){return null!=t.getExtension(e)}function Le(t){try{if(null!=jt(t))return!0}catch(t){return!1}return!1}function We(t){if(0===t)return!1;var e=jt(t);if(1===t){if(!Pe(e,\"OES_texture_float\"))return!1}else if(!Pe(e,\"EXT_color_buffer_float\"))return!1;return Ve(e)}function Ue(t){if(0===t)return!1;var e=jt(t);if(1!==t){if(Pe(e,\"EXT_color_buffer_float\"))return Ve(e);if(Pe(e,\"EXT_color_buffer_half_float\")){var n=e.getExtension(\"EXT_color_buffer_half_float\");return function(t,e){var n=Qt(t,e),r=t.createTexture();t.bindTexture(t.TEXTURE_2D,r);t.texImage2D(t.TEXTURE_2D,0,n.internalFormatHalfFloat,1,1,0,n.textureFormatFloat,n.textureTypeHalfFloat,null);var o=t.createFramebuffer();t.bindFramebuffer(t.FRAMEBUFFER,o),t.framebufferTexture2D(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.TEXTURE_2D,r,0);var a=t.checkFramebufferStatus(t.FRAMEBUFFER)===t.FRAMEBUFFER_COMPLETE;return t.bindTexture(t.TEXTURE_2D,null),t.bindFramebuffer(t.FRAMEBUFFER,null),t.deleteTexture(r),t.deleteFramebuffer(o),a}(e,n)}return!1}return!!Pe(e,\"OES_texture_float\")&&(!!Pe(e,\"WEBGL_color_buffer_float\")&&Ve(e))}function Ve(t){var e=Qt(t),n=t.createTexture();t.bindTexture(t.TEXTURE_2D,n);t.texImage2D(t.TEXTURE_2D,0,e.internalFormatFloat,1,1,0,e.textureFormatFloat,e.textureTypeFloat,null);var r=t.createFramebuffer();t.bindFramebuffer(t.FRAMEBUFFER,r),t.framebufferTexture2D(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.TEXTURE_2D,n,0);var o=t.checkFramebufferStatus(t.FRAMEBUFFER)===t.FRAMEBUFFER_COMPLETE;return t.bindTexture(t.TEXTURE_2D,null),t.bindFramebuffer(t.FRAMEBUFFER,null),t.deleteTexture(n),t.deleteFramebuffer(r),o}function ze(t){return 2===t&&null!=jt(t).fenceSync}var Ge=Object.freeze({callAndCheck:Jt,canBeRepresented:ee,getWebGLErrorMessage:ne,getExtensionOrThrow:re,createVertexShader:oe,createFragmentShader:ae,createProgram:ce,linkProgram:le,validateProgram:he,createStaticVertexBuffer:fe,createStaticIndexBuffer:de,getNumChannels:function(){return 2===i().getNumber(\"WEBGL_VERSION\")?1:4},createTexture:pe,validateTextureSize:ve,createFramebuffer:ge,bindVertexBufferToProgramAttribute:me,bindTextureUnit:ye,unbindTextureUnit:function(t,e,n){Se(t,n),Jt(t,e,(function(){return t.activeTexture(t.TEXTURE0+n)})),Jt(t,e,(function(){return t.bindTexture(t.TEXTURE_2D,null)}))},getProgramUniformLocationOrThrow:xe,getProgramUniformLocation:be,bindTextureToProgramUniformSampler:we,bindCanvasToFramebuffer:function(t,e){Jt(t,e,(function(){return t.bindFramebuffer(t.FRAMEBUFFER,null)})),Jt(t,e,(function(){return t.viewport(0,0,t.canvas.width,t.canvas.height)})),Jt(t,e,(function(){return t.scissor(0,0,t.canvas.width,t.canvas.height)}))},bindColorTextureToFramebuffer:Ce,unbindColorTextureFromFramebuffer:Ee,validateFramebuffer:Re,getFramebufferErrorMessage:Ie,getBatchDim:Ae,getRowsCols:Te,getShapeAs3D:De,getTextureShapeFromLogicalShape:Ne,isReshapeFree:_e,getWebGLMaxTextureSize:Oe,resetMaxTextureSize:function(){ie=null},resetMaxTexturesInShader:function(){se=null},getMaxTexturesInShader:Me,getWebGLDisjointQueryTimerVersion:Be,hasExtension:Pe,isWebGLVersionEnabled:Le,isCapableOfRenderingToFloatTexture:We,isDownloadFloatTextureEnabled:Ue,isWebGLFenceEnabled:ze}),He=i();function qe(){i().set(\"PROD\",!0)}function Ke(){i().set(\"DEBUG\",!0)}function je(){i().set(\"DEPRECATION_WARNINGS_ENABLED\",!1),console.warn(\"TensorFlow.js deprecation warnings have been disabled.\")}function Xe(t){i().getBool(\"DEPRECATION_WARNINGS_ENABLED\")&&console.warn(t+\" You can disable deprecation warnings with tf.disableDeprecationWarnings().\")}function Ye(){Lt.disposeVariables()}function $e(){return Lt}function Qe(){return Lt.memory()}function Je(t){return Lt.profile(t)}function Ze(t,e){return Lt.tidy(t,e)}function tn(t){_t(t).forEach((function(t){return t.dispose()}))}function en(t){return Lt.keep(t)}function nn(t){return Lt.time(t)}function rn(t){return Lt.setBackend(t)}function on(){return Lt.ready()}function an(){return Lt.backendName}function sn(t){Lt.removeBackend(t)}function un(t){return Lt.findBackend(t)}function cn(t){return Lt.findBackendFactory(t)}function ln(t,e,n){return void 0===n&&(n=1),Lt.registerBackend(t,e,n)}function hn(){return Lt.backend}function fn(t,e){i().setPlatform(t,e)}function dn(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];i().getBool(\"IS_TEST\")||console.warn.apply(console,t)}function pn(t,e){var n=t;if(V(t))return\"string\"===e?[]:[t.length];if(!Array.isArray(t))return[];for(var r=[];Array.isArray(n)||V(n)&&\"string\"!==e;)r.push(n.length),n=n[0];return Array.isArray(t)&&i().getBool(\"TENSORLIKE_CHECK_SHAPE_CONSISTENCY\")&&function t(e,n,r){if(r=r||[],!Array.isArray(e)&&!V(e))return void C(0===n.length,(function(){return\"Element arr[\"+r.join(\"][\")+\"] is a primitive, but should be an array/TypedArray of \"+n[0]+\" elements\"}));C(n.length>0,(function(){return\"Element arr[\"+r.join(\"][\")+\"] should be a primitive, but is an array of \"+e.length+\" elements\"})),C(e.length===n[0],(function(){return\"Element arr[\"+r.join(\"][\")+\"] should have \"+n[0]+\" elements, but has \"+e.length+\" elements\"}));for(var o=n.slice(1),a=0;a<e.length;++a)t(e[a],o,r.concat(a))}(t,r,[]),r}function vn(t,e,n,r){if(null!=t&&(\"numeric\"!==t&&t!==e||\"numeric\"===t&&\"string\"===e))throw new Error(\"Argument '\"+n+\"' passed to '\"+r+\"' must be \"+t+\" tensor, but got \"+e+\" tensor\")}function gn(t,e,n,r){if(void 0===r&&(r=\"numeric\"),t instanceof wt)return vn(r,t.dtype,e,n),t;var o=j(t);if(\"string\"!==o&&[\"bool\",\"int32\",\"float32\"].indexOf(r)>=0&&(o=r),vn(r,o,e,n),null==t||!V(t)&&!Array.isArray(t)&&\"number\"!=typeof t&&\"boolean\"!=typeof t&&\"string\"!=typeof t){var a=null==t?\"null\":t.constructor.name;throw new Error(\"Argument '\"+e+\"' passed to '\"+n+\"' must be a Tensor or TensorLike, but got '\"+a+\"'\")}var s=pn(t,o);V(t)||Array.isArray(t)||(t=[t]);var u=\"string\"!==o?Q(t,o,i().getBool(\"DEBUG\")):I(t,[],!0);return Lt.makeTensor(u,s,o)}function mn(t,e,n,r){if(void 0===r&&(r=\"numeric\"),!Array.isArray(t))throw new Error(\"Argument \"+e+\" passed to \"+n+\" must be a `Tensor[]` or `TensorLike[]`\");return t.map((function(t,r){return gn(t,e+\"[\"+r+\"]\",n)}),r)}function yn(t,e){for(var n=0;n<t.length;++n)if(t[t.length-n-1]!==e-1-n)return!1;return!0}function xn(t,e,n){for(var r=t.length+e.length,o=[],a=0,i=0,s=0;s<r;s++)-1===n.indexOf(s)?o.push(t[a++]):o.push(e[i++]);return o}function bn(t,e){for(var n=[],r=t.length,o=0;o<r;o++)-1===e.indexOf(o)&&n.push(t[o]);return[n,e.map((function(e){return t[e]}))]}function wn(t,e){return xn(t,e.map((function(t){return 1})),e)}function Cn(t,e,n){C(yn(e,n),(function(){return t+\" supports only inner-most axes for now. Got axes \"+e+\" and rank-\"+n+\" input.\"}))}function En(t,e){if(yn(t,e))return null;for(var n=[],r=0;r<e;++r)-1===t.indexOf(r)&&n.push(r);return t.forEach((function(t){return n.push(t)})),n}function Rn(t){return t.map((function(t,e){return[e,t]})).sort((function(t,e){return t[1]-e[1]})).map((function(t){return t[0]}))}function In(t,e){for(var n=[],r=e-t;r<e;++r)n.push(r);return n}function kn(t,e){var n=t[0].length;t.forEach((function(t,e){C(t.length===n,(function(){return\"Error in concat\"+n+\"D: rank of tensors[\"+e+\"] must be the same as the rank of the rest (\"+n+\")\"}))})),C(e>=0&&e<n,(function(){return\"Error in concat\"+n+\"D: axis must be between 0 and \"+(n-1)+\".\"}));var r=t[0];t.forEach((function(t,o){for(var a=0;a<n;a++)C(a===e||t[a]===r[a],(function(){return\"Error in concat\"+n+\"D: Shape of tensors[\"+o+\"] (\"+t+\") does not match the shape of the rest (\"+r+\") along the non-concatenated axis \"+o+\".\"}))}))}function Sn(t,e){for(var n=t[0].slice(),r=1;r<t.length;r++)n[e]+=t[r][e];return n}function An(t){var e=Object.keys(t);if(1!==e.length)throw new Error(\"Please provide an object with a single key (operation name) mapping to a function. Got an object with \"+e.length+\" keys.\");var n=e[0],r=t[n];n.endsWith(\"_\")&&(n=n.substring(0,n.length-1));var o=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];Lt.startScope(n);try{var o=r.apply(void 0,t);return o instanceof Promise&&console.error(\"Cannot return a Promise inside of tidy.\"),Lt.endScope(o),o}catch(t){throw Lt.endScope(null),t}};return Object.defineProperty(o,\"name\",{value:n,configurable:!0}),o}He.registerFlag(\"HAS_WEBGL\",(function(){return He.getNumber(\"WEBGL_VERSION\")>0})),He.registerFlag(\"WEBGL_VERSION\",(function(){return Le(2)?2:Le(1)?1:0})),He.registerFlag(\"WEBGL_BUFFER_SUPPORTED\",(function(){return 2===He.get(\"WEBGL_VERSION\")})),He.registerFlag(\"WEBGL_CPU_FORWARD\",(function(){return!0})),He.registerFlag(\"WEBGL_FORCE_F16_TEXTURES\",(function(){return!1})),He.registerFlag(\"WEBGL_PACK\",(function(){return He.getBool(\"HAS_WEBGL\")})),He.registerFlag(\"WEBGL_PACK_NORMALIZATION\",(function(){return He.getBool(\"WEBGL_PACK\")})),He.registerFlag(\"WEBGL_PACK_CLIP\",(function(){return He.getBool(\"WEBGL_PACK\")})),He.registerFlag(\"WEBGL_PACK_DEPTHWISECONV\",(function(){return!1})),He.registerFlag(\"WEBGL_PACK_BINARY_OPERATIONS\",(function(){return He.getBool(\"WEBGL_PACK\")})),He.registerFlag(\"WEBGL_PACK_UNARY_OPERATIONS\",(function(){return He.getBool(\"WEBGL_PACK\")})),He.registerFlag(\"WEBGL_PACK_ARRAY_OPERATIONS\",(function(){return He.getBool(\"WEBGL_PACK\")})),He.registerFlag(\"WEBGL_PACK_IMAGE_OPERATIONS\",(function(){return He.getBool(\"WEBGL_PACK\")})),He.registerFlag(\"WEBGL_PACK_REDUCE\",(function(){return He.getBool(\"WEBGL_PACK\")})),He.registerFlag(\"WEBGL_LAZILY_UNPACK\",(function(){return He.getBool(\"WEBGL_PACK\")})),He.registerFlag(\"WEBGL_CONV_IM2COL\",(function(){return He.getBool(\"WEBGL_PACK\")})),He.registerFlag(\"WEBGL_MAX_TEXTURE_SIZE\",(function(){return Oe(He.getNumber(\"WEBGL_VERSION\"))})),He.registerFlag(\"WEBGL_MAX_TEXTURES_IN_SHADER\",(function(){return Me(He.getNumber(\"WEBGL_VERSION\"))})),He.registerFlag(\"WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION\",(function(){var t=He.getNumber(\"WEBGL_VERSION\");return 0===t?0:Be(t)})),He.registerFlag(\"WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE\",(function(){return He.getNumber(\"WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION\")>0&&(t=navigator.userAgent||navigator.vendor||window.opera,!(/(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(t)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\\-(n|u)|c55\\/|capi|ccwa|cdm\\-|cell|chtm|cldc|cmd\\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\\-s|devi|dica|dmob|do(c|p)o|ds(12|\\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\\-|_)|g1 u|g560|gene|gf\\-5|g\\-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd\\-(m|p|t)|hei\\-|hi(pt|ta)|hp( i|ip)|hs\\-c|ht(c(\\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\\-(20|go|ma)|i230|iac( |\\-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc\\-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|\\-[a-w])|libw|lynx|m1\\-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m\\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\\-2|po(ck|rt|se)|prox|psio|pt\\-g|qa\\-a|qc(07|12|21|32|60|\\-[2-7]|i\\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\\-|oo|p\\-)|sdk\\/|se(c(\\-|0|1)|47|mc|nd|ri)|sgh\\-|shar|sie(\\-|m)|sk\\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\\-|v\\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\\-|tdg\\-|tel(i|m)|tim\\-|t\\-mo|to(pl|sh)|ts(70|m\\-|m3|m5)|tx\\-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\\-|your|zeto|zte\\-/i.test(t.substr(0,4))));var t})),He.registerFlag(\"WEBGL_RENDER_FLOAT32_CAPABLE\",(function(){return We(He.getNumber(\"WEBGL_VERSION\"))})),He.registerFlag(\"WEBGL_RENDER_FLOAT32_ENABLED\",(function(){return!He.getBool(\"WEBGL_FORCE_F16_TEXTURES\")&&He.getBool(\"WEBGL_RENDER_FLOAT32_CAPABLE\")})),He.registerFlag(\"WEBGL_DOWNLOAD_FLOAT_ENABLED\",(function(){return Ue(He.getNumber(\"WEBGL_VERSION\"))})),He.registerFlag(\"WEBGL_FENCE_API_ENABLED\",(function(){return ze(He.getNumber(\"WEBGL_VERSION\"))})),He.registerFlag(\"WEBGL_SIZE_UPLOAD_UNIFORM\",(function(){return He.getBool(\"WEBGL_RENDER_FLOAT32_ENABLED\")?4:0})),bt=Xe;var Tn=An({complex_:function(t,e){var n=gn(t,\"real\",\"complex\"),r=gn(e,\"imag\",\"complex\");return E(n.shape,r.shape,\"real and imag shapes, \"+n.shape+\" and \"+r.shape+\", must match in call to tf.complex().\"),Lt.runKernelFunc((function(t){return t.complex(n,r)}),{$real:n,$imag:r})}}),Dn=An({real_:function(t){var e=gn(t,\"input\",\"real\");return Lt.runKernelFunc((function(t){return t.real(e)}),{$input:e})}}),Nn=An({imag_:function(t){var e=gn(t,\"input\",\"imag\");return Lt.runKernelFunc((function(t){return t.imag(e)}),{$input:e})}});function Fn(t,e,n){return _n(t,e,pn(t,n),n)}function _n(t,e,n,r){if(null==r&&(r=j(t)),\"complex64\"===r)throw new Error(\"Cannot construct a complex64 tensor directly. Please use tf.complex(real, imag).\");if(!V(t)&&!Array.isArray(t)&&\"number\"!=typeof t&&\"boolean\"!=typeof t&&\"string\"!=typeof t)throw new Error(\"values passed to tensor(values) must be a number/boolean/string or an array of numbers/booleans/strings, or a TypedArray\");if(null!=e){nt(e);var o=k(e),a=k(n);C(o===a,(function(){return\"Based on the provided shape, [\"+e+\"], the tensor should have \"+o+\" values but has \"+a}));for(var s=0;s<n.length;++s){var u=n[s],c=s!==n.length-1||u!==k(e.slice(s));C(n[s]===e[s]||!c,(function(){return\"Error creating a new Tensor. Inferred shape (\"+n+\") does not match the provided shape (\"+e+\"). \"}))}}return V(t)||Array.isArray(t)||(t=[t]),e=e||n,t=\"string\"!==r?Q(t,r,i().getBool(\"DEBUG\")):I(t,[],!0),Lt.makeTensor(t,e,r)}function On(t,e){if((V(t)&&\"string\"!==e||Array.isArray(t))&&\"complex64\"!==e)throw new Error(\"Error creating a new Scalar: value must be a primitive (number|boolean|string)\");if(\"string\"===e&&V(t)&&!(t instanceof Uint8Array))throw new Error(\"When making a scalar from encoded string, the value must be `Uint8Array`.\");return _n(t,[],[],e)}function Mn(t,e){R(t);var n=pn(t,e);if(1!==n.length)throw new Error(\"tensor1d() requires values to be a flat/TypedArray\");return _n(t,null,n,e)}function Bn(t,e,n){if(R(t),null!=e&&2!==e.length)throw new Error(\"tensor2d() requires shape to have two numbers\");var r=pn(t,n);if(2!==r.length&&1!==r.length)throw new Error(\"tensor2d() requires values to be number[][] or flat/TypedArray\");if(1===r.length&&null==e)throw new Error(\"tensor2d() requires shape to be provided when `values` are a flat/TypedArray\");return _n(t,e,r,n)}function Pn(t,e,n){if(R(t),null!=e&&3!==e.length)throw new Error(\"tensor3d() requires shape to have three numbers\");var r=pn(t,n);if(3!==r.length&&1!==r.length)throw new Error(\"tensor3d() requires values to be number[][][] or flat/TypedArray\");if(1===r.length&&null==e)throw new Error(\"tensor3d() requires shape to be provided when `values` are a flat array\");return _n(t,e,r,n)}function Ln(t,e,n){if(R(t),null!=e&&4!==e.length)throw new Error(\"tensor4d() requires shape to have four numbers\");var r=pn(t,n);if(4!==r.length&&1!==r.length)throw new Error(\"tensor4d() requires values to be number[][][][] or flat/TypedArray\");if(1===r.length&&null==e)throw new Error(\"tensor4d() requires shape to be provided when `values` are a flat array\");return _n(t,e,r,n)}function Wn(t,e,n){if(R(t),null!=e&&5!==e.length)throw new Error(\"tensor5d() requires shape to have five numbers\");var r=pn(t,n);if(5!==r.length&&1!==r.length)throw new Error(\"tensor5d() requires values to be number[][][][][] or flat/TypedArray\");if(1===r.length&&null==e)throw new Error(\"tensor5d() requires shape to be provided when `values` are a flat array\");return _n(t,e,r,n)}function Un(t,e,n){if(R(t),null!=e&&6!==e.length)throw new Error(\"tensor6d() requires shape to have six numbers\");var r=pn(t,n);if(6!==r.length&&1!==r.length)throw new Error(\"tensor6d() requires values to be number[][][][][][] or flat/TypedArray\");if(1===r.length&&null==e)throw new Error(\"tensor6d() requires shape to be provided when `values` are a flat array\");return _n(t,e=e||r,r,n)}function Vn(t,e,n,r){return void 0===e&&(e=!0),Lt.makeVariable(t,e,n,r)}function zn(t,e){if(void 0===e&&(e=\"float32\"),\"complex64\"===e){var n=zn(t,\"float32\"),r=Gn(t,\"float32\");return Tn(n,r)}var o=Z(k(t),e);return Lt.makeTensor(o,t,e)}function Gn(t,e){if(void 0===e&&(e=\"float32\"),\"complex64\"===e){var n=Gn(t,\"float32\"),r=Gn(t,\"float32\");return Tn(n,r)}var o=tt(k(t),e);return Lt.makeTensor(o,t,e)}function Hn(t,e,n){return Lt.runKernelFunc((function(r){return r.fill(t,e,n)}),{})}function qn(t,e,n){if(n<=0)throw new Error(\"The number of values should be positive.\");return Lt.runKernelFunc((function(r){return r.linspace(t,e,n)}),{})}function Kn(t,e,n,r){if(void 0===n&&(n=1),void 0===r&&(r=\"float32\"),0===n)throw new Error(\"Cannot have a step of zero\");if(t===e||t<e&&n<0||e<t&&n>1)return Gn([0],r);var o=tt(Math.abs(Math.ceil((e-t)/n)),r);e<t&&1===n&&(n=-1),o[0]=t;for(var a=1;a<o.length;a++)o[a]=o[a-1]+n;return Mn(o,r)}var jn=An({onesLike_:function(t){var e=gn(t,\"x\",\"onesLike\");if(\"complex64\"===e.dtype){var n=jn(Dn(e)),r=Xn(Nn(e));return Tn(n,r)}return Lt.runKernelFunc((function(t){return t.onesLike(e)}),{x:e},(function(t,e){return{x:function(){return Xn(t)}}}),\"OnesLike\")}}),Xn=An({zerosLike_:function(t){var e=gn(t,\"x\",\"zerosLike\");return Lt.runKernelFunc((function(t){return t.zerosLike(e)}),{x:e},(function(t,e){return{x:function(){return Xn(t)}}}),\"ZerosLike\")}});var Yn=An({concat_:function(t,e){void 0===e&&(e=0),C(t.length>=1,(function(){return\"Pass at least one tensor to concat\"}));var n=mn(t,\"tensors\",\"concat\");\"complex64\"===n[0].dtype&&n.forEach((function(t){if(\"complex64\"!==t.dtype)throw new Error(\"Cannot concatenate complex64 tensors with a tensor\\n          with dtype \"+t.dtype+\". \")})),e=O(e,n[0].shape)[0];var r=Sn(n.map((function(t){return t.shape})),e);if(0===k(r))return Fn([],r);if(1===(n=n.filter((function(t){return t.size>0}))).length)return n[0];var o=n.map((function(t){return t.shape}));kn(o,e);var a=n,i={axis:e};return Lt.runKernelFunc((function(t){return t.concat(n,e)}),a,(function(t){var n=o.map((function(t){return t[e]}));return tr(t,n,e).map((function(t){return function(){return t}}))}),\"Concat\",i)}}),$n=An({concat1d_:function(t){return Yn(t,0)}}),Qn=An({concat2d_:function(t,e){return Yn(t,e)}}),Jn=An({concat3d_:function(t,e){return Yn(t,e)}}),Zn=An({concat4d_:function(t,e){return Yn(t,e)}}),tr=An({split_:function(t,e,n){void 0===n&&(n=0);var r,o=gn(t,\"x\",\"split\");return n=O(n,o.shape)[0],\"number\"==typeof e?(C(o.shape[n]%e==0,(function(){return\"Number of splits must evenly divide the axis.\"})),r=new Array(e).fill(o.shape[n]/e)):(C(o.shape[n]===e.reduce((function(t,e){return t+e})),(function(){return\"The sum of sizes must match the size of the axis dimension.\"})),r=e),Lt.runKernelFunc((function(t){return t.split(o,r,n)}),{$x:o},(function(t){return{$x:function(){return Yn(t,n)}}}))}});function er(t,e,n){return void 0===e&&(e=\"float32\"),e=e||\"float32\",nt(t),new mt(t,e,n)}function nr(t,e){void 0===e&&(e=!1),console.log(t.toString(e))}var rr=An({batchToSpaceND_:function(t,e,n){var r=gn(t,\"x\",\"batchToSpaceND\"),o=e.reduce((function(t,e){return t*e}));return C(r.rank>=1+e.length,(function(){return\"input rank is \"+r.rank+\" but should be > than blockShape.length \"+e.length})),C(n.length===e.length,(function(){return\"crops.length is \"+n.length+\" but should be equal to blockShape.length  \"+e.length})),C(r.shape[0]%o==0,(function(){return\"input tensor batch is \"+r.shape[0]+\" but is not divisible by the product of the elements of blockShape \"+e.join(\" * \")+\" === \"+o})),Lt.runKernelFunc((function(t){return t.batchToSpaceND(r,e,n)}),{$x:r},(function(t){return{$x:function(){return t.spaceToBatchND(e,n)}}}))}}),or=An({cast_:function(t,e){var n=gn(t,\"x\",\"cast\");if(!W(e))throw new Error(\"Failed to cast to unknown dtype \"+e);if(\"string\"===e&&\"string\"!==n.dtype||\"string\"!==e&&\"string\"===n.dtype)throw new Error(\"Only strings can be casted to strings\");var r={dtype:e};return Lt.runKernelFunc((function(t){return t.cast(n,e)}),{x:n},(function(t){return{x:function(){return t.clone()}}}),\"Cast\",r)}}),ar=An({cumsum_:function(t,e,n,r){void 0===e&&(e=0),void 0===n&&(n=!1),void 0===r&&(r=!1);var o=gn(t,\"x\",\"cumsum\"),a=En([e|=0],o.rank),i=o;null!=a&&(i=o.transpose(a));var s=In(1,o.rank)[0],u=Lt.runKernelFunc((function(t){return t.cumsum(i,s,n,r)}),{permutedX:i},(function(t){return{permutedX:function(){return t.cumsum(e,n,!r)}}}));return null!=a&&(u=u.transpose(a)),u}}),ir=An({depthToSpace_:function(t,e,n){void 0===n&&(n=\"NHWC\");var r=gn(t,\"x\",\"depthToSpace\"),o=\"NHWC\"===n?r.shape[1]:r.shape[2],a=\"NHWC\"===n?r.shape[2]:r.shape[3],i=\"NHWC\"===n?r.shape[3]:r.shape[1];return C(o*e>=0,(function(){return\"Negative dimension size caused by overflow when multiplying\\n      \"+o+\" and \"+e+\"  for depthToSpace with input shape\\n      \"+r.shape})),C(a*e>=0,(function(){return\"Negative dimension size caused by overflow when multiplying\\n      \"+a+\" and \"+e+\" for depthToSpace with input shape\\n          \"+r.shape})),C(i%(e*e)==0,(function(){return\"Dimension size must be evenly divisible by \"+e*e+\" but is \"+i+\" for depthToSpace with input shape \"+r.shape})),Lt.runKernelFunc((function(t){return t.depthToSpace(r,e,n)}),{$x:r})}}),sr=An({expandDims_:function(t,e){void 0===e&&(e=0);var n=gn(t,\"x\",\"expandDims\",null);C(e<=n.rank,(function(){return\"Axis must be <= rank of the tensor\"}));var r=n.shape.slice();return e<0&&(C(-(n.rank+1)<=e,(function(){return\"Axis must be in the interval [\"+-(n.rank+1)+\", \"+n.rank+\"]\"})),e=n.rank+e+1),r.splice(e,0,1),ur(n,r)}}),ur=An({reshape_:function(t,e){var n=gn(t,\"x\",\"reshape\",null);e=_(e,n.size),C(n.size===k(e),(function(){return\"new shape and old shape must have the same number of elements.\"}));var r={shape:e};return Lt.runKernelFunc((function(t){return t.reshape(n,e)}),{x:n},(function(t){return{x:function(){return t.reshape(n.shape)}}}),\"Reshape\",r)}}),cr=An({spaceToBatchND_:function(t,e,n){var r=gn(t,\"x\",\"spaceToBatchND\");return C(r.rank>=1+e.length,(function(){return\"input rank \"+r.rank+\" should be > than [blockShape] \"+e.length})),C(n.length===e.length,(function(){return\"paddings.shape[0] \"+n.length+\" must be equal to [blockShape] \"+e.length})),C(r.shape.reduce((function(t,r,o){return o>0&&o<=e.length?t&&(r+n[o-1][0]+n[o-1][1])%e[o-1]==0:t}),!0),(function(){return\"input spatial dimensions \"+r.shape.slice(1)+\" with paddings \"+n.toString()+\" must be divisible by blockShapes \"+e.toString()})),Lt.runKernelFunc((function(t){return t.spaceToBatchND(r,e,n)}),{$x:r},(function(t){return{$x:function(){return t.batchToSpaceND(e,n)}}}))}}),lr=An({squeeze_:function(t,e){var n=gn(t,\"x\",\"squeeze\");return ur(n,M(n.shape,e).newShape)}}),hr=An({stack_:function(t,e){void 0===e&&(e=0);var n=mn(t,\"tensors\",\"stack\");if(C(n.length>=1,(function(){return\"Pass at least one tensor to tf.stack\"})),1===n.length)return n[0].expandDims(e);var r=n[0].rank,o=n[0].shape,a=n[0].dtype;C(e<=r,(function(){return\"Axis must be <= rank of the tensor\"})),n.forEach((function(t){E(o,t.shape,\"All tensors passed to stack must have matching shapes\")})),n.forEach((function(t){C(a===t.dtype,(function(){return\"All tensors passed to stack must have matching dtypes\"}))}));var i=n.map((function(t){return t.expandDims(e)}));return Yn(i,e)}}),fr=An({unstack_:function(t,e){void 0===e&&(e=0),e=e||0;var n=gn(t,\"x\",\"unstack\");C(e>=-n.shape.length&&e<n.shape.length,(function(){return\"Axis = \"+e+\" is not in [-\"+n.shape.length+\", \"+n.shape.length+\")\"})),e<0&&(e+=n.shape.length);var r={axis:e};return Lt.runKernelFunc((function(t){return t.unstack(n,e)}),{x:n},(function(t){return{x:function(){return hr(t,e)}}}),\"Unpack\",r)}}),dr=function(t,e){return n(this,void 0,void 0,(function(){var n,o,a,i,s,u,c,l,h,f;return r(this,(function(r){switch(r.label){case 0:return n=gn(t,\"x\",\"setdiff1d\"),o=gn(e,\"y\",\"setdiff1d\"),C(n.dtype===o.dtype,(function(){return\"x and y should have the same dtype, but got x (\"+n.dtype+\") and y (\"+o.dtype+\").\"})),C(1===n.rank,(function(){return\"x should be 1D tensor, but got x (\"+n.shape+\").\"})),C(1===o.rank,(function(){return\"y should be 1D tensor, but got y (\"+o.shape+\").\"})),[4,n.data()];case 1:return a=r.sent(),[4,o.data()];case 2:for(i=r.sent(),s=new Set(i),u=0,h=0;h<a.length;h++)s.has(a[h])||u++;for(c=new mt([u],n.dtype),l=new mt([u],\"int32\"),h=0,f=0;h<a.length;h++)s.has(a[h])||(c.values[f]=a[h],l.values[f]=h,f++);return[2,[c.toTensor(),l.toTensor()]]}}))}))};function pr(t,e,n,r){void 0===r&&(r=!0);var o=[];if(r)(o=o.concat(e.slice(0))).push(t[0]/n),o=o.concat(t.slice(1));else{o=o.concat(t[0]);for(var a=e.length,i=0;i<a;++i)o=o.concat([t[i+1]/e[i],e[i]]);o=o.concat(t.slice(a+1))}return o}function vr(t,e,n){void 0===n&&(n=!0);var r=[];if(n){r.push(e);for(var o=e+1;o<t;++o)o<=2*e?(r.push(o),r.push(o-(e+1))):r.push(o)}else{var a=[],i=[];for(o=1;o<t;++o)o>=2*e+1||o%2==1?i.push(o):a.push(o);r.push.apply(r,a),r.push(0),r.push.apply(r,i)}return r}function gr(t,e,n,r){void 0===r&&(r=!0);var o=[];r?o.push(t[0]/n):o.push(t[0]*n);for(var a=1;a<t.length;++a)a<=e.length?r?o.push(e[a-1]*t[a]):o.push(t[a]/e[a-1]):o.push(t[a]);return o}function mr(t,e){for(var n=[0],r=0;r<e;++r)n.push(t[r][0]);return n}function yr(t,e,n){for(var r=t.slice(0,1),o=0;o<n;++o)r.push(t[o+1]-e[o][0]-e[o][1]);return r}var xr=\"Add\",br=\"AddN\",wr=\"Div\",Cr=\"FusedBatchNorm\",Er=\"SquaredDifference\",Rr=\"Square\",Ir=\"Transpose\",kr=\"NonMaxSuppressionV5\",Sr=\"BroadcastTo\",Ar=\"OneHot\",Tr=\"Identity\",Dr=\"Tile\",Nr=\"PadV2\",Fr=\"FromPixels\",_r=\"MaxPoolWithArgmax\";var Or=An({add_:function(t,e){var n,r=gn(t,\"a\",\"add\"),o=gn(e,\"b\",\"add\");n=Nt(r,o),r=n[0],o=n[1];var a={a:r,b:o};return Lt.runKernelFunc((function(t,e){var n=t.add(r,o);return e([r,o]),n}),a,null,xr)}});function Mr(t,e){for(var n=t.length,r=[],o=0;o<n;o++){var a=n-1-o,i=t[a]||1;(e[e.length-1-o]||1)>1&&1===i&&r.unshift(a)}return r}function Br(t,e){for(var n=[],r=0;r<e.length;r++){var o=t[t.length-r-1],a=e.length-r-1,i=e[a];(null==o||1===o&&i>1)&&n.unshift(a)}return n}function Pr(t,e){for(var n=[],r=Math.max(t.length,e.length),o=0;o<r;o++){var a=t[t.length-o-1];null==a&&(a=1);var i=e[e.length-o-1];if(null==i&&(i=1),1===a)n.unshift(i);else if(1===i)n.unshift(a);else{if(a!==i)throw Error(\"Operands could not be broadcast together with shapes \"+t+\" and \"+e+\".\");n.unshift(a)}}return n}var Lr=An({abs_:function(t){var e=gn(t,\"x\",\"abs\");return\"complex64\"===e.dtype?Lt.runKernelFunc((function(t){return t.complexAbs(e)}),{$x:e}):Lt.runKernelFunc((function(t,n){var r=t.abs(e);return n([e]),r}),{x:e},(function(t,e){var n=e[0];return{x:function(){return t.mul(n.toFloat().step(-1))}}}),\"Abs\")}}),Wr=An({acos_:function(t){var e=gn(t,\"x\",\"acos\");return Lt.runKernelFunc((function(t,n){var r=t.acos(e);return n([e]),r}),{$x:e},(function(t,e){var n=e[0];return{$x:function(){return t.divStrict(On(1).sub(n.toFloat().square()).sqrt()).neg()}}}))}}),Ur=An({acosh_:function(t){var e=gn(t,\"x\",\"acosh\");return Lt.runKernelFunc((function(t,n){var r=t.acosh(e);return n([e]),r}),{$x:e},(function(t,e){var n=e[0];return{$x:function(){return t.divStrict(n.toFloat().square().sub(1).sqrt())}}}))}}),Vr=An({asin_:function(t){var e=gn(t,\"x\",\"asin\");return Lt.runKernelFunc((function(t,n){var r=t.asin(e);return n([e]),r}),{$x:e},(function(t,e){var n=e[0];return{$x:function(){return t.divStrict(On(1).sub(n.toFloat().square()).sqrt())}}}))}}),zr=An({asinh_:function(t){var e=gn(t,\"x\",\"asinh\");return Lt.runKernelFunc((function(t,n){var r=t.asinh(e);return n([e]),r}),{$x:e},(function(t,e){var n=e[0];return{$x:function(){return t.divStrict(On(1).add(n.toFloat().square()).sqrt())}}}))}}),Gr=An({atan_:function(t){var e=gn(t,\"x\",\"atan\");return Lt.runKernelFunc((function(t,n){var r=t.atan(e);return n([e]),r}),{$x:e},(function(t,e){var n=e[0];return{$x:function(){return t.div(n.toFloat().square().add(1))}}}))}}),Hr=An({atanh_:function(t){var e=gn(t,\"x\",\"atanh\");return Lt.runKernelFunc((function(t,n){var r=t.atanh(e);return n([e]),r}),{$x:e},(function(t,e){var n=e[0];return{$x:function(){return t.div(On(1).sub(n.toFloat().square()))}}}))}}),qr=An({ceil_:function(t){var e=gn(t,\"x\",\"ceil\");return Lt.runKernelFunc((function(t){return t.ceil(e)}),{$x:e},(function(t){return{$x:function(){return Xn(t)}}}))}}),Kr=An({clipByValue_:function(t,e,n){var r=gn(t,\"x\",\"clipByValue\");C(e<=n,(function(){return\"Error in clip: min (\"+e+\") must be less than or equal to max (\"+n+\").\"}));var o=[r],a={min:e,max:n};return Lt.runKernelFunc((function(t,o){var a=t.clip(r,e,n);return o([r]),a}),{x:r},(function(t,r){var o=r[0];return{x:function(){return t.where(o.greaterEqual(e).logicalAnd(o.lessEqual(n)),Xn(t))}}}),\"ClipByValue\",a,o)}}),jr=An({cos_:function(t){var e=gn(t,\"x\",\"cos\"),n=[e];return Lt.runKernelFunc((function(t,n){var r=t.cos(e);return n([e]),r}),{x:e},(function(t,e){var n=e[0];return{x:function(){return n.toFloat().sin().neg().mul(t)}}}),\"Cos\",{},n)}}),Xr=An({cosh_:function(t){var e=gn(t,\"x\",\"cosh\");return Lt.runKernelFunc((function(t,n){var r=t.cosh(e);return n([e]),r}),{$x:e},(function(t,e){var n=e[0];return{$x:function(){return n.toFloat().sinh().mulStrict(t)}}}))}}),Yr=An({erf_:function(t){var e=gn(t,\"x\",\"erf\");return C(\"int32\"===e.dtype||\"float32\"===e.dtype,(function(){return\"Input dtype must be `int32` or `float32`.\"})),\"int32\"===e.dtype&&(e=e.toFloat()),Lt.runKernelFunc((function(t,n){var r=t.erf(e);return n([e]),r}),{$x:e},(function(t,e){var n=e[0];return{$x:function(){return t.mul(n.square().neg().exp().mul(2/Math.sqrt(Math.PI)))}}}))}}),$r=An({exp_:function(t){var e=gn(t,\"x\",\"exp\");return Lt.runKernelFunc((function(t,n){var r=t.exp(e);return n([r]),r}),{x:e},(function(t,e){return{x:function(){return t.mulStrict(e[0])}}}),\"Exp\",{},[],[!0])}}),Qr=An({expm1_:function(t){var e=gn(t,\"x\",\"expm1\");return Lt.runKernelFunc((function(t,n){var r=t.expm1(e);return n([e]),r}),{$x:e},(function(t,e){var n=e[0];return{$x:function(){return t.mul(n.exp())}}}))}}),Jr=An({floor_:function(t){var e=gn(t,\"x\",\"floor\");return Lt.runKernelFunc((function(t){return t.floor(e)}),{$x:e},(function(t){return{$x:function(){return Xn(t)}}}))}}),Zr=An({log_:function(t){var e=gn(t,\"x\",\"log\"),n=[e];return Lt.runKernelFunc((function(t,n){var r=t.log(e);return n([e]),r}),{x:e},(function(t,e){var n=e[0];return{x:function(){return t.div(n.toFloat())}}}),\"Log\",{},n)}}),to=An({log1p_:function(t){var e=gn(t,\"x\",\"log1p\");return Lt.runKernelFunc((function(t,n){var r=t.log1p(e);return n([e]),r}),{$x:e},(function(t,e){var n=e[0];return{$x:function(){return t.div(n.add(1))}}}))}}),eo=An({logSigmoid_:function(t){var e=gn(t,\"x\",\"logSigmoid\");return Lt.runKernelFunc((function(t,n){var r=t.softplus(e.neg()).neg();return n([e]),r}),{$x:e},(function(t,e){var n=e[0];return{$x:function(){return t.mul(n.neg().sigmoid())}}}))}}),no=An({neg_:function(t){var e=gn(t,\"x\",\"neg\"),n=[e];return Lt.runKernelFunc((function(t){return t.neg(e)}),{x:e},(function(t){return{x:function(){return t.neg()}}}),\"Neg\",{},n)}}),ro=An({reciprocal_:function(t){var e=gn(t,\"x\",\"reciprocal\");return Lt.runKernelFunc((function(t,n){var r=t.reciprocal(e);return n([e]),r}),{$x:e},(function(t,e){var n=e[0];return{$x:function(){return t.div(n.square().neg())}}}))}}),oo=An({round_:function(t){var e=gn(t,\"x\",\"round\");return Lt.runKernelFunc((function(t){return t.round(e)}),{$x:e},(function(t){return{$x:function(){return Xn(t)}}}))}}),ao=An({rsqrt_:function(t){var e=gn(t,\"x\",\"rsqrt\"),n=[e];return Lt.runKernelFunc((function(t,n){var r=t.rsqrt(e);return n([e]),r}),{x:e},(function(t,e){var n=e[0];return{x:function(){return t.div(n.pow(1.5).mul(2)).neg()}}}),\"Rsqrt\",{},n)}}),io=An({sigmoid_:function(t){var e=gn(t,\"x\",\"sigmoid\");return Lt.runKernelFunc((function(t,n){var r=t.sigmoid(e);return n([r]),r}),{x:e},(function(t,e){var n=e[0];return{x:function(){return t.mul(n.mul(On(1).sub(n)))}}}),\"Sigmoid\")}}),so=An({sign_:function(t){var e=gn(t,\"x\",\"sign\");return Lt.runKernelFunc((function(t){return t.sign(e)}),{$x:e},(function(t){return{$x:function(){return Xn(t)}}}))}}),uo=An({isNaN_:function(t){var e=gn(t,\"x\",\"isNaN\");return Lt.runKernelFunc((function(t){return t.isNaN(e)}),{$x:e},(function(t){return{$x:function(){return Xn(t)}}}))}}),co=An({isInf_:function(t){var e=gn(t,\"x\",\"isInf\");return Lt.runKernelFunc((function(t){return t.isInf(e)}),{$x:e},(function(t){return{$x:function(){return Xn(t)}}}))}}),lo=An({isFinite_:function(t){var e=gn(t,\"x\",\"isFinite\");return Lt.runKernelFunc((function(t){return t.isFinite(e)}),{$x:e},(function(t){return{$x:function(){return Xn(t)}}}))}}),ho=An({sin_:function(t){var e=gn(t,\"x\",\"sin\"),n=[e];return Lt.runKernelFunc((function(t,n){var r=t.sin(e);return n([e]),r}),{x:e},(function(t,e){var n=e[0];return{x:function(){return n.toFloat().cos().mul(t)}}}),\"Sin\",{},n)}}),fo=An({sinh_:function(t){var e=gn(t,\"x\",\"sinh\");return Lt.runKernelFunc((function(t,n){var r=t.sinh(e);return n([e]),r}),{$x:e},(function(t,e){var n=e[0];return{$x:function(){return n.toFloat().cosh().mulStrict(t)}}}))}}),po=An({softplus_:function(t){var e=gn(t,\"x\",\"softplus\");return Lt.runKernelFunc((function(t,n){var r=t.softplus(e);return n([e]),r}),{$x:e},(function(t,e){var n=e[0];return{$x:function(){return t.mul(n.sigmoid())}}}))}}),vo=An({sqrt_:function(t){var e=gn(t,\"x\",\"sqrt\");return Lt.runKernelFunc((function(t,n){var r=t.sqrt(e);return n([e]),r}),{$x:e},(function(t,e){var n=e[0];return{$x:function(){return t.div(n.toFloat().sqrt().mul(2))}}}))}}),go=An({step_:function(t,e){void 0===e&&(e=0);var n=gn(t,\"x\",\"step\");return Lt.runKernelFunc((function(t){return t.step(n,e)}),{$x:n},(function(t){return{$x:function(){return Xn(t)}}}))}}),mo=An({tan_:function(t){var e=gn(t,\"x\",\"tan\");return Lt.runKernelFunc((function(t,n){var r=t.tan(e);return n([e]),r}),{$x:e},(function(t,e){var n=e[0];return{$x:function(){return t.div(n.cos().square())}}}))}}),yo=An({tanh_:function(t){var e=gn(t,\"x\",\"tanh\");return Lt.runKernelFunc((function(t,n){var r=t.tanh(e);return n([r]),r}),{x:e},(function(t,e){var n=e[0];return{x:function(){return On(1).sub(n.square()).mulStrict(t)}}}),\"Tanh\",{},null,[!0])}});var xo=An({addStrict_:function(t,e){var n=gn(t,\"a\",\"addStrict\"),r=gn(e,\"b\",\"addStrict\");return E(n.shape,r.shape,\"Error in addStrict: \"),n.add(r)}}),bo=An({atan2_:function(t,e){var n,r=gn(t,\"a\",\"atan2\"),o=gn(e,\"b\",\"atan2\");n=Nt(r,o),r=n[0],o=n[1];var a=Pr(r.shape,o.shape);return Lt.runKernelFunc((function(t,e){var n=t.atan2(r,o);return e([r,o]),n}),{$a:r,$b:o},(function(t,e){var n=e[0],r=e[1];return{$a:function(){var e=Or(n.square(),r.square()),o=t.mul(r.div(e)),i=Br(n.shape,a);return i.length>0&&(o=o.sum(i)),o.reshape(n.shape)},$b:function(){var e=Or(n.square(),r.square()),o=no(t.mul(n.div(e))),i=Br(r.shape,a);return i.length>0&&(o=o.sum(i)),o.reshape(r.shape)}}}))}}),wo=An({divStrict_:function(t,e){var n=gn(t,\"a\",\"div\"),r=gn(e,\"b\",\"div\");return E(n.shape,r.shape,\"Error in divideStrict: \"),n.div(r)}}),Co=An({floorDiv_:function(t,e){var n,r=gn(t,\"a\",\"floorDiv\"),o=gn(e,\"b\",\"floorDiv\");n=Nt(r,o),r=n[0],o=n[1];var a=Pr(r.shape,o.shape);return Lt.runKernelFunc((function(t,e){var n=t.floorDiv(r,o);return e([r,o]),n}),{a:r,b:o},(function(t,e){var n=e[0],r=e[1];return{a:function(){var e=t.div(r.toFloat()),o=Br(n.shape,a);return o.length>0?e.sum(o).reshape(n.shape):e},b:function(){var e=t.mul(n.toFloat()),o=Br(r.shape,a);o.length>0&&(e=e.sum(o).reshape(r.shape));var i=r.square();return e.div(i.toFloat()).neg()}}}),\"FloorDiv\")}}),Eo=An({maximum_:function(t,e){var n,r=gn(t,\"a\",\"maximum\"),o=gn(e,\"b\",\"maximum\");return n=Nt(r,o),r=n[0],o=n[1],\"bool\"===r.dtype&&(r=r.toInt(),o=o.toInt()),Pr(r.shape,o.shape),Lt.runKernelFunc((function(t,e){var n=t.maximum(r,o);return e([r,o]),n}),{a:r,b:o},(function(t,e){var n=e[0],r=e[1];return{a:function(){return t.mul(n.greaterEqual(r).toFloat())},b:function(){return t.mul(n.less(r).toFloat())}}}),\"Maximum\")}}),Ro=An({maximumStrict_:function(t,e){var n=gn(t,\"a\",\"maximumStrict\"),r=gn(e,\"b\",\"maximumStrict\");return E(n.shape,r.shape,\"Error in maximumStrict: \"),n.maximum(r)}}),Io=An({minimum_:function(t,e){var n,r=gn(t,\"a\",\"minimum\"),o=gn(e,\"b\",\"minimum\");return n=Nt(r,o),r=n[0],o=n[1],\"bool\"===r.dtype&&(r=r.toInt(),o=o.toInt()),Pr(r.shape,o.shape),Lt.runKernelFunc((function(t,e){var n=t.minimum(r,o);return e([r,o]),n}),{a:r,b:o},(function(t,e){var n=e[0],r=e[1];return{a:function(){return t.mul(n.lessEqual(r).toFloat())},b:function(){return t.mul(n.greater(r).toFloat())}}}),\"Minimum\")}}),ko=An({minimumStrict_:function(t,e){var n=gn(t,\"a\",\"minimumStrict\"),r=gn(e,\"b\",\"minimumStrict\");return E(n.shape,r.shape,\"Error in minimumStrict: \"),n.minimum(r)}}),So=An({mod_:function(t,e){var n,r=gn(t,\"a\",\"mod\"),o=gn(e,\"b\",\"mod\");n=Nt(r,o),r=n[0],o=n[1];var a=Pr(r.shape,o.shape);return Lt.runKernelFunc((function(t,e){var n=t.mod(r,o);return e([r,o]),n}),{$a:r,$b:o},(function(t,e){var n=e[0],r=e[1];return{$a:function(){var e=Br(n.shape,a);return e.length>0?t.sum(e).reshape(n.shape):t},$b:function(){var e=t.mul(n.div(r).floor().neg()),o=Br(r.shape,a);return o.length>0?e.sum(o).reshape(r.shape):e}}}))}}),Ao=An({modStrict_:function(t,e){var n=gn(t,\"a\",\"modStrict\"),r=gn(e,\"b\",\"modStrict\");return E(n.shape,r.shape,\"Error in modStrict: \"),n.mod(r)}}),To=An({mul_:function(t,e){var n,r=gn(t,\"a\",\"mul\"),o=gn(e,\"b\",\"mul\");n=Nt(r,o),r=n[0],o=n[1];var a=Pr(r.shape,o.shape);return Lt.runKernelFunc((function(t,e){var n=t.multiply(r,o);return e([r,o]),n}),{a:r,b:o},(function(t,e){var n=e[0],r=e[1];return{a:function(){var e=t.mul(r.toFloat()),o=Br(n.shape,a);return o.length>0?e.sum(o).reshape(n.shape):e},b:function(){var e=t.mul(n.toFloat()),o=Br(r.shape,a);return o.length>0?e.sum(o).reshape(r.shape):e}}}),\"Mul\")}}),Do=An({mulStrict_:function(t,e){var n=gn(t,\"a\",\"mul\"),r=gn(e,\"b\",\"mul\");return E(n.shape,r.shape,\"Error in multiplyStrict: \"),n.mul(r)}}),No=An({pow_:function(t,e){var n,r=gn(t,\"base\",\"pow\"),o=gn(e,\"exp\",\"pow\");n=Nt(r,o),r=n[0],o=n[1];var a=Pr(r.shape,o.shape),i=[r,o];return Lt.runKernelFunc((function(t,e){var n=t.pow(r,o);return e([r,o,n]),n}),{a:r,b:o},(function(t,e){var n=e[0],r=e[1],o=e[2];return{a:function(){var e=r.toFloat(),o=t.mul(e.mul(n.pow(e.sub(On(1))))),i=Br(n.shape,a);return i.length>0&&(o=o.sum(i)),o.reshape(n.shape)},b:function(){var e=n.greater(0),i=n.log().where(e,Xn(n)),s=t.mul(o.mul(i)),u=Br(r.shape,a);return u.length>0&&(s=s.sum(u)),s.reshape(r.shape)}}}),\"Pow\",{},i,[!0])}}),Fo=An({powStrict_:function(t,e){return E(t.shape,e.shape,\"Error in powStrict: \"),t.pow(e)}}),_o=An({squaredDifferenceStrict_:function(t,e){var n=gn(t,\"a\",\"squaredDifferenceStrict\"),r=gn(e,\"b\",\"squaredDifferenceStrict\");return E(n.shape,r.shape,\"Error in squaredDifferenceStrict: \"),n.squaredDifference(r)}}),Oo=An({sub_:function(t,e){var n,r=gn(t,\"a\",\"sub\"),o=gn(e,\"b\",\"sub\");n=Nt(r,o),r=n[0],o=n[1];var a=Pr(r.shape,o.shape);return Lt.runKernelFunc((function(t){return t.subtract(r,o)}),{a:r,b:o},(function(t){return{a:function(){var e=t,n=Br(r.shape,a);return n.length>0&&(e=e.sum(n)),e.reshape(r.shape)},b:function(){var e=t,n=Br(o.shape,a);return n.length>0&&(e=e.sum(n)),e.neg().reshape(o.shape)}}}),\"Sub\")}}),Mo=An({subStrict_:function(t,e){var n=gn(t,\"a\",\"subStrict\"),r=gn(e,\"b\",\"subStrict\");return E(n.shape,r.shape,\"Error in subStrict: \"),n.sub(r)}});var Bo=An({div_:function(t,e){var n,r=gn(t,\"a\",\"div\"),o=gn(e,\"b\",\"div\");if(n=Nt(r,o),r=n[0],o=n[1],\"int32\"===r.dtype&&\"int32\"===o.dtype)return Co(r,o);var a={a:r,b:o};return Lt.runKernelFunc((function(t,e){var n=t.realDivide(r,o);return e([r,o]),n}),a,null,wr,{})}});function Po(t,e){if(t.rank<1)throw new Error(\"tf.gatherND() expects the input to be rank 1 or higher, but the rank was \"+t.rank+\".\");if(e.rank<1)throw new Error(\"tf.gatherND() expects the indices to be rank 1 or higher, but the rank was \"+e.rank+\".\");if(\"int32\"!==e.dtype)throw new Error(\"tf.gatherND() expects the indices to be int32 type, but the dtype was \"+e.dtype+\".\");if(e.shape[e.rank-1]>t.rank)throw new Error(\"index innermost dimension length must be <= tensor rank; saw: \"+e.shape[e.rank-1]+\" vs. \"+t.rank);if(0===t.size)throw new Error(\"Requested more than 0 entries, but input is empty. Input shape: \"+t.shape+\".\");for(var n=e.shape,r=n[n.length-1],o=1,a=0;a<n.length-1;++a)o*=n[a];var i=t.shape,s=n.slice();s.pop();var u=1;for(a=r;a<t.rank;++a)u*=i[a],s.push(i[a]);var c=$(t.shape).map((function(t){return t/u})).concat([1]).slice(0,r);return[s,o,u,c]}var Lo=Object.freeze({prepareAndValidate:Po}),Wo=30;function Uo(t){return t<=Wo?t:Y(t,Math.floor(Math.sqrt(t)))}function Vo(t,e,n){var r=e.rank>1?e.shape[e.rank-1]:1,o=e.rank>1?e.rank-1:1,a=\"Must have updates.shape = indices.shape[:batchDim] + shape[sliceDim:], got updates.shape: \"+n.shape+\", indices.shape: \"+e.shape+\", shape: \"+t+\", sliceDim: \"+r+\", and batchDim: \"+o+\".\";if(n.rank<o)throw new Error(a+\" update.rank < \"+o+\". \");if(t.length<r+(n.rank-o))throw new Error(a+\" Output shape length < \"+(r+(n.rank-o)));if(n.rank!==o+t.length-r)throw new Error(a+\" update.rank != \"+(o+t.length-r));for(var i=0;i<o;++i)if(n.shape[i]!==e.shape[i])throw new Error(a+\" updates.shape[\"+i+\"] (\"+n.shape[i]+\") != indices.shape[\"+i+\"] (\"+e.shape[i]+\").\");for(i=0;i<n.rank-o;++i)if(n.shape[i+o]!==t[i+r])throw new Error(a+\" updates.shape[\"+(i+o)+\"] (\"+n.shape[i+o]+\") != shape[\"+(i+o)+\"] (\"+t[i+o]+\")\")}function zo(t,e,n){if(e.rank<1)throw new Error(\"tf.scatterND() expects the indices to be rank 1 or higher, but the rank was \"+e.rank+\".\");if(t.rank<1)throw new Error(\"tf.scatterND() expects the updates to be rank 1 or higher, but the rank was \"+t.rank+\".\");if(\"int32\"!==e.dtype)throw new Error(\"The dtype of 'indices' should be int32, but got dtype: \"+e.dtype);if(n.length<1)throw new Error(\"Output rank must be greater or equal to 1, but got shape: \"+n);if(0===n.length){if(0===e.size)throw new Error(\"Indices specified for empty output. indices shape: \"+e.shape);if(0===t.size)throw new Error(\"Updates specified for empty output. updates shape: \"+t.shape)}Vo(n,e,t)}function Go(t,e,n){for(var r=e.shape.length,o=r>1?e.shape[r-1]:1,a=n.length,i=1,s=o;s<a;++s)i*=n[s];var u=o<1?1:o;return{sliceRank:o,numUpdates:k(e.shape)/u,sliceSize:i,strides:$(n.slice(0,o)).concat([1]),outputSize:k(n)}}var Ho=Object.freeze({validateUpdateShape:Vo,validateInput:zo,calculateShapes:Go});function qo(t,e,n){C(t.rank===e.length,(function(){return\"Error in slice\"+t.rank+\"D: Length of begin \"+e+\" must match the rank of the array (\"+t.rank+\").\"})),C(t.rank===n.length,(function(){return\"Error in slice\"+t.rank+\"D: Length of size \"+n+\" must match the rank of the array (\"+t.rank+\").\"}));for(var r=function(r){C(e[r]+n[r]<=t.shape[r],(function(){return\"Error in slice\"+t.rank+\"D: begin[\"+r+\"] + size[\"+r+\"] (\"+(e[r]+n[r])+\") would overflow input.shape[\"+r+\"] (\"+t.shape[r]+\")\"}))},o=0;o<t.rank;++o)r(o)}function Ko(t){for(var e=[],n=0;t>0;)1&t&&e.push(n),t/=2,n++;return e}function jo(t,e,n){for(var r=[],o=0;o<t.length;o++)r[o]=Math.ceil((e[o]-t[o])/n[o]);return r}function Xo(t,e,n,r,o){var a=e[o],i=n[o]||1;(t&1<<o||null==a)&&(a=i>0?Number.MIN_SAFE_INTEGER:Number.MAX_SAFE_INTEGER);var s=r[o];return a<0&&(a+=s),a=x(0,a,s-1)}function Yo(t,e,n,r,o){var a=e[o],i=n[o]||1;(t&1<<o||null==a)&&(a=i>0?Number.MAX_SAFE_INTEGER:Number.MIN_SAFE_INTEGER);var s=r[o];return a<0&&(a+=s),a=i>0?x(0,a,s):x(-1,a,s-1)}function $o(t,e,n){for(var r=n.length,o=0;o<n.length;o++)if(n[o]>1){r=o;break}for(o=r+1;o<n.length;o++)if(e[o]>0||n[o]!==t[o])return!1;return!0}function Qo(t,e){for(var n=t.length>0?t[t.length-1]:1,r=0;r<t.length-1;r++)n+=t[r]*e[r];return n}var Jo=Object.freeze({assertParamsValid:qo,maskToAxes:Ko,computeOutShape:jo,startForAxis:Xo,stopForAxis:Yo,isSliceContinous:$o,computeFlatOffset:Qo});function Zo(t){return C(X(t),(function(){return\"The f passed in grad(f) must be a function\"})),function(e,n){var r=gn(e,\"x\",\"tf.grad\",null),o=null!=n?gn(n,\"dy\",\"tf.grad\"):null;return Lt.tidy((function(){var e=Lt.gradients((function(){return t(r)}),[r],o),n=e.value,a=e.grads;return null!=o&&E(n.shape,o.shape,\"The shape of dy passed in grad(f)(x, dy) must match the shape returned by f(x)\"),aa(a),a[0]}))}}function ta(t){return C(X(t),(function(){return\"The f passed in grads(f) must be a function\"})),function(e,n){C(Array.isArray(e),(function(){return\"The args passed in grads(f)(args) must be an array of `Tensor`s or `TensorLike`s\"}));var r=mn(e,\"args\",\"tf.grads\",null),o=null!=n?gn(n,\"dy\",\"tf.grads\"):null;return Lt.tidy((function(){var e=Lt.gradients((function(){return t.apply(void 0,r)}),r,o),n=e.value,a=e.grads;return null!=o&&E(n.shape,o.shape,\"The shape of dy passed in grads(f)([x1,...], dy) must match the shape returned by f([x1,...])\"),aa(a),a}))}}function ea(t){return C(X(t),(function(){return\"The f passed in valueAndGrad(f) must be a function\"})),function(e,n){C(e instanceof wt,(function(){return\"The x passed in valueAndGrad(f)(x) must be a tensor\"})),C(null==n||n instanceof wt,(function(){return\"The dy passed in valueAndGrad(f)(x, dy) must be a tensor\"}));var r=Lt.gradients((function(){return t(e)}),[e],n),o=r.grads,a=r.value;return aa(o),{grad:o[0],value:a}}}function na(t){return C(X(t),(function(){return\"The f passed in valueAndGrads(f) must be a function\"})),function(e,n){C(Array.isArray(e)&&e.every((function(t){return t instanceof wt})),(function(){return\"The args passed in valueAndGrads(f)(args) must be array of tensors\"})),C(null==n||n instanceof wt,(function(){return\"The dy passed in valueAndGrads(f)(args, dy) must be a tensor\"}));var r=Lt.gradients((function(){return t.apply(void 0,e)}),e,n);return null!=n&&E(r.value.shape,n.shape,\"The shape of dy passed in valueAndGrads(f)([x1,...], dy) must match the shape returned by f([x1,...])\"),aa(r.grads),r}}function ra(t,e){C(X(t),(function(){return\"The f passed in variableGrads(f) must be a function\"})),C(null==e||Array.isArray(e)&&e.every((function(t){return t instanceof St})),(function(){return\"The varList passed in variableGrads(f, varList) must be an array of variables\"}));var n=null!=e;if(!n)for(var r in e=[],Lt.registeredVariables)e.push(Lt.registeredVariables[r]);var o=n?e.filter((function(t){return!t.trainable})):null,a=e.length;C((e=e.filter((function(t){return t.trainable}))).length>0,(function(){return\"variableGrads() expects at least one of the input variables to be trainable, but none of the \"+a+\" variables is trainable.\"}));var i=Lt.gradients(t,e,null,!0),s=i.value,u=i.grads;C(u.some((function(t){return null!=t})),(function(){return\"Cannot find a connection between any variable and the result of the loss function y=f(x). Please make sure the operations that use variables are inside the function f passed to minimize().\"})),C(0===s.rank,(function(){return\"The f passed in variableGrads(f) must return a scalar, but it returned a rank-\"+s.rank+\" tensor\"}));var c={};return e.forEach((function(t,e){null!=u[e]&&(c[t.name]=u[e])})),null!=o&&o.forEach((function(t){return c[t.name]=null})),{value:s,grads:c}}function oa(t){return Lt.customGrad(t)}function aa(t){if(t.filter((function(t){return null==t})).length>0)throw new Error(\"Cannot compute gradient of y=f(x) with respect to x. Make sure that\\n    the f you passed encloses all operations that lead from x to y.\")}var ia=An({softmax_:function(t,e){void 0===e&&(e=-1);var n=gn(t,\"logits\",\"softmax\",\"float32\");if(-1===e&&(e=n.rank-1),e!==n.rank-1)throw Error(\"Softmax along a non-last dimension is not yet supported. Logits was rank \"+n.rank+\" and dim was \"+e);return Lt.runKernelFunc((function(t,r){var o=t.softmax(n,e);return r([o]),o}),{logits:n},(function(t,n){var r=n[0],o=t.mul(r);return{logits:function(){return o.sub(o.sum([e],!0).mul(r))}}}),\"Softmax\",{dim:e},[],[!0])}}),sa=An({logSoftmax_:function(t,e){void 0===e&&(e=-1);var n=gn(t,\"logits\",\"logSoftmax\");if(-1===e&&(e=n.rank-1),e!==n.rank-1)throw Error(\"Log Softmax along a non-last dimension is not yet supported. Logits was rank \"+n.rank+\" and axis was \"+e);return oa((function(t,n){var r=t.max(e,!0),o=t.sub(r),a=o.toFloat().sub(o.exp().sum(e,!0).log());n([a]);return{value:a,gradFunc:function(t,n){var r=n[0].exp();return t.sub(t.sum(e,!0).mul(r))}}}))(n)}});var ua=An({transpose_:function(t,e){var n=gn(t,\"x\",\"transpose\");if(null==e&&(e=n.shape.map((function(t,e){return e})).reverse()),C(n.rank===e.length,(function(){return\"Error in transpose: rank of input \"+n.rank+\" must match length of perm \"+e+\".\"})),e.forEach((function(t){C(t>=0&&t<n.rank,(function(){return\"All entries in 'perm' must be between 0 and \"+(n.rank-1)+\" but got \"+e}))})),n.rank<=1)return n.clone();var r={perm:e};return Lt.runKernelFunc((function(t){return t.transpose(n,e)}),{x:n},null,\"Transpose\",r)}}),ca=function(){function t(t,e){this.backend=t,this.dataMover=e,this.data=new WeakMap,this.dataIdsCount=0}return t.prototype.get=function(t){return this.data.has(t)||this.dataMover.moveData(this.backend,t),this.data.get(t)},t.prototype.set=function(t,e){this.dataIdsCount++,this.data.set(t,e)},t.prototype.has=function(t){return this.data.has(t)},t.prototype.delete=function(t){return this.dataIdsCount--,this.data.delete(t)},t.prototype.numDataIds=function(){return this.dataIdsCount},t}(),la=function(){function t(){}return t.prototype.time=function(t){return ha(\"time\")},t.prototype.read=function(t){return ha(\"read\")},t.prototype.readSync=function(t){return ha(\"readSync\")},t.prototype.numDataIds=function(){return ha(\"numDataIds\")},t.prototype.disposeData=function(t){return ha(\"disposeData\")},t.prototype.write=function(t,e,n){return ha(\"write\")},t.prototype.move=function(t,e,n,r){return ha(\"move\")},t.prototype.memory=function(){return ha(\"memory\")},t.prototype.floatPrecision=function(){return ha(\"floatPrecision\")},t.prototype.epsilon=function(){return 32===this.floatPrecision()?1e-7:1e-4},t.prototype.batchMatMul=function(t,e,n,r){return ha(\"batchMatMul\")},t.prototype.fusedBatchMatMul=function(t){t.a,t.b,t.transposeA,t.transposeB,t.bias,t.activation,t.preluActivationWeights;return ha(\"fusedBatchMatMul\")},t.prototype.slice=function(t,e,n){return ha(\"slice\")},t.prototype.stridedSlice=function(t,e,n,r){return ha(\"stridedSlice\")},t.prototype.unstack=function(t,e){return ha(\"unstack\")},t.prototype.reverse=function(t,e){return ha(\"reverse\")},t.prototype.concat=function(t,e){return ha(\"concat\")},t.prototype.neg=function(t){return ha(\"neg\")},t.prototype.add=function(t,e){return ha(\"add\")},t.prototype.addN=function(t){return ha(\"addN\")},t.prototype.subtract=function(t,e){return ha(\"subtract\")},t.prototype.multiply=function(t,e){return ha(\"multiply\")},t.prototype.realDivide=function(t,e){return ha(\"realDivide\")},t.prototype.floorDiv=function(t,e){return ha(\"floorDiv\")},t.prototype.sum=function(t,e){return ha(\"sum\")},t.prototype.prod=function(t,e){return ha(\"prod\")},t.prototype.unsortedSegmentSum=function(t,e,n){return ha(\"unsortedSegmentSum\")},t.prototype.argMin=function(t,e){return ha(\"argMin\")},t.prototype.argMax=function(t,e){return ha(\"argMax\")},t.prototype.equal=function(t,e){return ha(\"equal\")},t.prototype.notEqual=function(t,e){return ha(\"notEqual\")},t.prototype.less=function(t,e){return ha(\"less\")},t.prototype.lessEqual=function(t,e){return ha(\"lessEqual\")},t.prototype.greater=function(t,e){return ha(\"greater\")},t.prototype.greaterEqual=function(t,e){return ha(\"greaterEqual\")},t.prototype.logicalNot=function(t){return ha(\"logicalNot\")},t.prototype.logicalAnd=function(t,e){return ha(\"logicalAnd\")},t.prototype.logicalOr=function(t,e){return ha(\"logicalOr\")},t.prototype.where=function(t){return ha(\"where\")},t.prototype.select=function(t,e,n){return ha(\"select\")},t.prototype.topk=function(t,e,n){return ha(\"topk\")},t.prototype.min=function(t,e){return ha(\"min\")},t.prototype.minimum=function(t,e){return ha(\"minimum\")},t.prototype.mod=function(t,e){return ha(\"mod\")},t.prototype.max=function(t,e){return ha(\"max\")},t.prototype.maximum=function(t,e){return ha(\"maximum\")},t.prototype.all=function(t,e){return ha(\"all\")},t.prototype.any=function(t,e){return ha(\"any\")},t.prototype.squaredDifference=function(t,e){return ha(\"squaredDifference\")},t.prototype.ceil=function(t){return ha(\"ceil\")},t.prototype.floor=function(t){return ha(\"floor\")},t.prototype.round=function(t){return ha(\"round\")},t.prototype.sign=function(t){return ha(\"sign\")},t.prototype.isNaN=function(t){return ha(\"isNaN\")},t.prototype.isInf=function(t){return ha(\"isInf\")},t.prototype.isFinite=function(t){return ha(\"isFinite\")},t.prototype.pow=function(t,e){return ha(\"pow\")},t.prototype.exp=function(t){return ha(\"exp\")},t.prototype.expm1=function(t){return ha(\"expm1\")},t.prototype.softmax=function(t,e){return ha(\"softmax\")},t.prototype.log=function(t){return ha(\"log\")},t.prototype.log1p=function(t){return ha(\"log1p\")},t.prototype.sqrt=function(t){return ha(\"sqrt\")},t.prototype.rsqrt=function(t){return ha(\"rsqrt\")},t.prototype.square=function(t){return ha(\"square\")},t.prototype.reciprocal=function(t){return ha(\"reciprocal\")},t.prototype.relu=function(t){return ha(\"relu\")},t.prototype.relu6=function(t){return ha(\"relu6\")},t.prototype.prelu=function(t,e){return ha(\"prelu\")},t.prototype.elu=function(t){return ha(\"elu\")},t.prototype.eluDer=function(t,e){return ha(\"eluDer\")},t.prototype.selu=function(t){return ha(\"selu\")},t.prototype.int=function(t){return ha(\"int\")},t.prototype.clip=function(t,e,n){return ha(\"clip\")},t.prototype.abs=function(t){return ha(\"abs\")},t.prototype.complexAbs=function(t){return ha(\"complexAbs\")},t.prototype.sigmoid=function(t){return ha(\"sigmoid\")},t.prototype.softplus=function(t){return ha(\"softplus\")},t.prototype.sin=function(t){return ha(\"sin\")},t.prototype.cos=function(t){return ha(\"cos\")},t.prototype.tan=function(t){return ha(\"tan\")},t.prototype.asin=function(t){return ha(\"asin\")},t.prototype.acos=function(t){return ha(\"acos\")},t.prototype.atan=function(t){return ha(\"atan\")},t.prototype.atan2=function(t,e){return ha(\"atan2\")},t.prototype.sinh=function(t){return ha(\"sinh\")},t.prototype.cosh=function(t){return ha(\"cosh\")},t.prototype.tanh=function(t){return ha(\"tanh\")},t.prototype.asinh=function(t){return ha(\"asinh\")},t.prototype.acosh=function(t){return ha(\"acosh\")},t.prototype.atanh=function(t){return ha(\"atanh\")},t.prototype.erf=function(t){return ha(\"erf\")},t.prototype.step=function(t,e){return ha(\"step\")},t.prototype.fusedConv2d=function(t){t.input,t.filter,t.convInfo,t.bias,t.activation,t.preluActivationWeights;return ha(\"fusedConv2d\")},t.prototype.conv2d=function(t,e,n){return ha(\"conv2d\")},t.prototype.conv2dDerInput=function(t,e,n){return ha(\"conv2dDerInput\")},t.prototype.conv2dDerFilter=function(t,e,n){return ha(\"conv2dDerFilter\")},t.prototype.fusedDepthwiseConv2D=function(t){t.input,t.filter,t.convInfo,t.bias,t.activation,t.preluActivationWeights;return ha(\"fusedDepthwiseConv2D\")},t.prototype.depthwiseConv2D=function(t,e,n){return ha(\"depthwiseConv2D\")},t.prototype.depthwiseConv2DDerInput=function(t,e,n){return ha(\"depthwiseConv2DDerInput\")},t.prototype.depthwiseConv2DDerFilter=function(t,e,n){return ha(\"depthwiseConv2DDerFilter\")},t.prototype.conv3d=function(t,e,n){return ha(\"conv3d\")},t.prototype.conv3dDerInput=function(t,e,n){return ha(\"conv3dDerInput\")},t.prototype.conv3dDerFilter=function(t,e,n){return ha(\"conv3dDerFilter\")},t.prototype.maxPool=function(t,e){return ha(\"maxPool\")},t.prototype.maxPoolBackprop=function(t,e,n,r){return ha(\"maxPoolBackprop\")},t.prototype.avgPool=function(t,e){return ha(\"avgPool\")},t.prototype.avgPoolBackprop=function(t,e,n){return ha(\"avgPoolBackprop\")},t.prototype.avgPool3d=function(t,e){return ha(\"avgPool3d\")},t.prototype.avgPool3dBackprop=function(t,e,n){return ha(\"avgPool3dBackprop\")},t.prototype.maxPool3d=function(t,e){return ha(\"maxPool3d\")},t.prototype.maxPool3dBackprop=function(t,e,n,r){return ha(\"maxPool3dBackprop\")},t.prototype.reshape=function(t,e){return ha(\"reshape\")},t.prototype.cast=function(t,e){return ha(\"cast\")},t.prototype.tile=function(t,e){return ha(\"tile\")},t.prototype.pad=function(t,e,n){return ha(\"pad\")},t.prototype.transpose=function(t,e){return ha(\"transpose\")},t.prototype.gather=function(t,e,n){return ha(\"gather\")},t.prototype.gatherND=function(t,e){return ha(\"gatherND\")},t.prototype.scatterND=function(t,e,n){return ha(\"scatterND\")},t.prototype.batchToSpaceND=function(t,e,n){return ha(\"batchToSpaceND\")},t.prototype.spaceToBatchND=function(t,e,n){return ha(\"spaceToBatchND\")},t.prototype.resizeBilinear=function(t,e,n,r){return ha(\"resizeBilinear\")},t.prototype.resizeBilinearBackprop=function(t,e,n){return ha(\"resizeBilinearBackprop\")},t.prototype.resizeNearestNeighbor=function(t,e,n,r){return ha(\"resizeNearestNeighbor\")},t.prototype.resizeNearestNeighborBackprop=function(t,e,n){return ha(\"resizeNearestNeighborBackprop\")},t.prototype.batchNormalization=function(t,e,n,r,o,a){return ha(\"batchNormalization\")},t.prototype.localResponseNormalization4D=function(t,e,n,r,o){return ha(\"localResponseNormalization4D\")},t.prototype.LRNGrad=function(t,e,n,r,o,a,i){return ha(\"LRNGrad\")},t.prototype.multinomial=function(t,e,n,r){return ha(\"multinomial\")},t.prototype.oneHot=function(t,e,n,r){return ha(\"oneHot\")},t.prototype.cumsum=function(t,e,n,r){return ha(\"cumsum\")},t.prototype.nonMaxSuppression=function(t,e,n,r,o){return ha(\"nonMaxSuppression\")},t.prototype.fft=function(t){return ha(\"fft\")},t.prototype.ifft=function(t){return ha(\"ifft\")},t.prototype.complex=function(t,e){return ha(\"complex\")},t.prototype.real=function(t){return ha(\"real\")},t.prototype.imag=function(t){return ha(\"imag\")},t.prototype.cropAndResize=function(t,e,n,r,o,a){return ha(\"cropAndResize\")},t.prototype.depthToSpace=function(t,e,n){return ha(\"depthToSpace\")},t.prototype.split=function(t,e,n){return ha(\"split\")},t.prototype.sparseToDense=function(t,e,n,r){return ha(\"sparseToDense\")},t.prototype.diag=function(t){return ha(\"diag\")},t.prototype.fill=function(t,e,n){return ha(\"fill\")},t.prototype.onesLike=function(t){return ha(\"onesLike\")},t.prototype.zerosLike=function(t){return ha(\"zerosLike\")},t.prototype.linspace=function(t,e,n){return ha(\"linspace\")},t.prototype.dispose=function(){return ha(\"dispose\")},t}();function ha(t){throw new Error(\"'\"+t+\"' not yet implemented or not found in the registry. Did you forget to import the kernel?\")}function fa(t,e,n,r,o,a,i){void 0===i&&(i=\"channelsLast\");var s,u=ma(e),c=u[0],l=u[1];if(\"channelsLast\"===i)s=[c,l,t[3],t[3]];else{if(\"channelsFirst\"!==i)throw new Error(\"Unknown dataFormat \"+i);s=[c,l,t[1],t[1]]}return pa(t,s,n,r,o,a,!1,i)}function da(t,e,n,r,o,a,i){void 0===i&&(i=\"NDHWC\");var s,u,c=ya(e),l=c[0],h=c[1],f=c[2];if(\"NDHWC\"===i)u=\"channelsLast\",s=[l,h,f,t[4],t[4]];else{if(\"NCDHW\"!==i)throw new Error(\"Unknown dataFormat \"+i);u=\"channelsFirst\",s=[l,h,f,t[1],t[1]]}return va(t,s,n,r,o,!1,u,a)}function pa(t,e,n,r,o,a,i,s){void 0===i&&(i=!1),void 0===s&&(s=\"channelsLast\");var u=[-1,-1,-1,-1],c=u[0],l=u[1],h=u[2],f=u[3];if(\"channelsLast\"===s)c=t[0],l=t[1],h=t[2],f=t[3];else{if(\"channelsFirst\"!==s)throw new Error(\"Unknown dataFormat \"+s);c=t[0],f=t[1],l=t[2],h=t[3]}var d,p=e[0],v=e[1],g=e[3],m=ma(n),y=m[0],x=m[1],b=ma(r),w=b[0],E=b[1],R=xa(p,w),I=xa(v,E),k=function(t,e,n,r,o,a,i,s){var u,c,l;if(\"number\"==typeof t){u={top:t,bottom:t,left:t,right:t,type:0===t?\"VALID\":\"NUMBER\"};var h=function(t,e,n,r,o){null==r&&(r=ga(t,e,n));var a=t[0],i=t[1],s=ba((a-e+2*r)/n+1,o);C(A(s),(function(){return\"The output # of rows (\"+s+\") must be an integer. Change the stride and/or zero pad parameters\"}));var u=ba((i-e+2*r)/n+1,o);return C(A(u),(function(){return\"The output # of columns (\"+u+\") must be an integer. Change the stride and/or zero pad parameters\"})),[s,u]}([e,n],a,r,t,s);c=h[0],l=h[1]}else if(\"same\"===t){c=Math.ceil(e/r),l=Math.ceil(n/o);var f=Math.max(0,(c-1)*r+a-e),d=Math.max(0,(l-1)*o+i-n),p=Math.floor(f/2),v=f-p,g=Math.floor(d/2);u={top:p,bottom:v,left:g,right:d-g,type:\"SAME\"}}else{if(\"valid\"!==t)throw Error(\"Unknown padding parameter: \"+t);u={top:0,bottom:0,left:0,right:0,type:\"VALID\"},c=Math.ceil((e-a+1)/r),l=Math.ceil((n-i+1)/o)}return{padInfo:u,outHeight:c,outWidth:l}}(o,l,h,y,x,R,I,a),S=k.padInfo,T=k.outHeight,D=k.outWidth,N=i?g*f:g;return\"channelsFirst\"===s?d=[c,N,T,D]:\"channelsLast\"===s&&(d=[c,T,D,N]),{batchSize:c,dataFormat:s,inHeight:l,inWidth:h,inChannels:f,outHeight:T,outWidth:D,outChannels:N,padInfo:S,strideHeight:y,strideWidth:x,filterHeight:p,filterWidth:v,effectiveFilterHeight:R,effectiveFilterWidth:I,dilationHeight:w,dilationWidth:E,inShape:t,outShape:d,filterShape:e}}function va(t,e,n,r,o,a,i,s){void 0===a&&(a=!1),void 0===i&&(i=\"channelsLast\");var u=[-1,-1,-1,-1,-1],c=u[0],l=u[1],h=u[2],f=u[3],d=u[4];if(\"channelsLast\"===i)c=t[0],l=t[1],h=t[2],f=t[3],d=t[4];else{if(\"channelsFirst\"!==i)throw new Error(\"Unknown dataFormat \"+i);c=t[0],d=t[1],l=t[2],h=t[3],f=t[4]}var p,v=e[0],g=e[1],m=e[2],y=e[4],x=ya(n),b=x[0],w=x[1],E=x[2],R=ya(r),I=R[0],k=R[1],S=R[2],T=xa(v,I),D=xa(g,k),N=xa(m,S),F=function(t,e,n,r,o,a,i,s,u,c,l){var h,f,d,p;if(\"number\"==typeof t){h={top:t,bottom:t,left:t,right:t,front:t,back:t,type:0===t?\"VALID\":\"NUMBER\"};var v=function(t,e,n,r,o,a){null==o&&(o=ga(t,e,r));var i=t[0],s=t[1],u=t[2],c=ba((i-e+2*o)/r+1,a);C(A(c),(function(){return\"The output # of depths (\"+c+\") must be an integer. Change the stride and/or zero pad parameters\"}));var l=ba((s-e+2*o)/r+1,a);C(A(l),(function(){return\"The output # of rows (\"+l+\") must be an integer. Change the stride and/or zero pad parameters\"}));var h=ba((u-e+2*o)/r+1,a);return C(A(h),(function(){return\"The output # of columns (\"+h+\") must be an integer. Change the stride and/or zero pad parameters\"})),[c,l,h,n]}([e,n,r,1],s,1,o,t,l);f=v[0],d=v[1],p=v[2]}else if(\"same\"===t){f=Math.ceil(e/o),d=Math.ceil(n/a),p=Math.ceil(r/i);var g=(f-1)*o+s-e,m=(d-1)*a+u-n,y=(p-1)*i+c-r,x=Math.floor(g/2),b=g-x,w=Math.floor(m/2),E=m-w,R=Math.floor(y/2);h={top:w,bottom:E,left:R,right:y-R,front:x,back:b,type:\"SAME\"}}else{if(\"valid\"!==t)throw Error(\"Unknown padding parameter: \"+t);h={top:0,bottom:0,left:0,right:0,front:0,back:0,type:\"VALID\"},f=Math.ceil((e-s+1)/o),d=Math.ceil((n-u+1)/a),p=Math.ceil((r-c+1)/i)}return{padInfo:h,outDepth:f,outHeight:d,outWidth:p}}(o,l,h,f,b,w,E,T,D,N,s),_=F.padInfo,O=F.outDepth,M=F.outHeight,B=F.outWidth,P=a?y*d:y;return\"channelsFirst\"===i?p=[c,P,O,M,B]:\"channelsLast\"===i&&(p=[c,O,M,B,P]),{batchSize:c,dataFormat:i,inDepth:l,inHeight:h,inWidth:f,inChannels:d,outDepth:O,outHeight:M,outWidth:B,outChannels:P,padInfo:_,strideDepth:b,strideHeight:w,strideWidth:E,filterDepth:v,filterHeight:g,filterWidth:m,effectiveFilterDepth:T,effectiveFilterHeight:D,effectiveFilterWidth:N,dilationDepth:I,dilationHeight:k,dilationWidth:S,inShape:t,outShape:p,filterShape:e}}function ga(t,e,n,r){void 0===r&&(r=1);var o=xa(e,r);return Math.floor((t[0]*(n-1)-n+o)/2)}function ma(t){return\"number\"==typeof t?[t,t,t]:2===t.length?[t[0],t[1],1]:t}function ya(t){return\"number\"==typeof t?[t,t,t]:t}function xa(t,e){return e<=1?t:t+(t-1)*(e-1)}function ba(t,e){if(!e)return t;switch(e){case\"round\":return Math.round(t);case\"ceil\":return Math.ceil(t);case\"floor\":return Math.floor(t);default:throw new Error(\"Unknown roundingMode \"+e)}}function wa(t){var e=ma(t),n=e[0],r=e[1],o=e[2];return 1===n&&1===r&&1===o}function Ca(t,e){return wa(t)||wa(e)}function Ea(t){if(\"NHWC\"===t)return\"channelsLast\";if(\"NCHW\"===t)return\"channelsFirst\";throw new Error(\"Unknown dataFormat \"+t)}function Ra(t,e,n){if(\"complex64\"===e){if(\"complex64\"===t.dtype)return t.clone();var r=Gn(t.shape),o=t.toFloat(),a=n.complex(o,r);return r.dispose(),o.dispose(),a}if(!U(t.dtype,e))return Lt.makeTensorFromDataId(t.dataId,t.shape,e);if(\"complex64\"===t.dtype){var i=n.real(t);a=i.cast(e);return i.dispose(),a}if(\"int32\"===e)return n.int(t);if(\"bool\"===e){var s=On(0,t.dtype);a=n.notEqual(t,s);return s.dispose(),a}throw new Error(\"Error in Cast: failed to cast \"+t.dtype+\" to \"+e)}function Ia(t,e){return Lt.makeTensorFromDataId(t.dataId,e,t.dtype)}function ka(t,e,n){var r=(e-t)/(n-1),o=tt(n,\"float32\");o[0]=t;for(var a=1;a<o.length;a++)o[a]=o[a-1]+r;return Mn(o,\"float32\")}var Sa=Object.freeze({castTensor:Ra,reshapeTensor:Ia,linspaceImpl:ka,upcastType:Tt,axesAreInnerMostDims:yn,combineLocations:xn,computeOutAndReduceShapes:bn,expandShapeToKeepDim:wn,assertAxesAreInnerMostDims:Cn,getAxesPermutation:En,getUndoAxesPermutation:Rn,getInnerMostAxes:In,getBroadcastDims:Mr,getReductionAxes:Br,assertAndGetBroadcastShape:Pr,assertParamsConsistent:kn,computeOutShape:Sn,computePool2DInfo:fa,computePool3DInfo:da,computeConv2DInfo:pa,computeConv3DInfo:va,computeDefaultPad:ga,tupleValuesAreOne:wa,eitherStridesOrDilationsAreOne:Ca,convertConv2DDataFormat:Ea,PARALLELIZE_THRESHOLD:Wo,computeOptimalWindowSize:Uo});function Aa(t,e){if(t.length!==e.length)throw new Error(\"Cannot merge real and imag arrays of different lengths. real:\"+t.length+\", imag: \"+e.length+\".\");for(var n=new Float32Array(2*t.length),r=0;r<n.length;r+=2)n[r]=t[r/2],n[r+1]=e[r/2];return n}function Ta(t,e){return{real:t[2*e],imag:t[2*e+1]}}function Da(t,e,n,r){t[2*r]=e,t[2*r+1]=n}function Na(t,e,n){var r=(n?2:-2)*Math.PI*(t/e);return{real:Math.cos(r),imag:Math.sin(r)}}function Fa(t,e,n){var r=function(t,e,n){return function(t,e,n){var r=0,o=t.length,a=0,i=!1;for(;r<o;){var s=n(e,t[a=r+(o-r>>>1)]);s>0?r=a+1:(o=a,i=!s)}return i?r:-r-1}(t,e,n||_a)}(t,e,n),o=r<0?-(r+1):r;t.splice(o,0,e)}function _a(t,e){return t>e?1:t<e?-1:0}function Oa(t,e,n,r,o){return Ba(t,e,n,r,o,0).selectedIndices}function Ma(t,e,n,r,o,a){var i=Ba(t,e,n,r,o,a,!0);return i.numValidOutputs.dispose(),{selectedIndices:i.selectedIndices,selectedScores:i.selectedScores}}function Ba(t,e,n,r,o,a,i,s){void 0===i&&(i=!1),void 0===s&&(s=!1);for(var u=Array.from(e).map((function(t,e){return{score:t,boxIndex:e,suppressBeginIndex:0}})).filter((function(t){return t.score>o})).sort(Wa),c=a>0?-.5/a:0,l=[],h=[];l.length<n&&u.length>0;){var f=u.pop(),d=f.score,p=f.boxIndex,v=f.suppressBeginIndex;if(d<o)break;for(var g=!1,m=l.length-1;m>=v;--m){var y=Pa(t,p,l[m]);if(y>=r){g=!0;break}if(f.score=f.score*La(r,c,y),f.score<=o)break}f.suppressBeginIndex=l.length,g||(f.score===d?(l.push(p),h.push(f.score)):f.score>o&&Fa(u,f,Wa))}var x=l.length;return s&&(l.fill(0,x),h.fill(0,x)),{selectedIndices:Mn(l,\"int32\"),selectedScores:Mn(h,\"float32\"),numValidOutputs:On(x,\"int32\")}}function Pa(t,e,n){var r=t.subarray(4*e,4*e+4),o=t.subarray(4*n,4*n+4),a=Math.min(r[0],r[2]),i=Math.min(r[1],r[3]),s=Math.max(r[0],r[2]),u=Math.max(r[1],r[3]),c=Math.min(o[0],o[2]),l=Math.min(o[1],o[3]),h=Math.max(o[0],o[2]),f=Math.max(o[1],o[3]),d=(s-a)*(u-i),p=(h-c)*(f-l);if(d<=0||p<=0)return 0;var v=Math.max(a,c),g=Math.max(i,l),m=Math.min(s,h),y=Math.min(u,f),x=Math.max(m-v,0)*Math.max(y-g,0);return x/(d+p-x)}function La(t,e,n){var r=Math.exp(e*n*n);return n<=t?r:0}function Wa(t,e){return t.score-e.score||t.score===e.score&&e.boxIndex-t.boxIndex}function Ua(t,e,n){var r=new Array(t.rank).fill(0),o=t.shape.slice();return e.map((function(e){o[n]=e;var a=t.slice(r,o);return r[n]+=e,a}))}function Va(t,e){for(var n=new Array(t.rank),r=0;r<n.length;r++)n[r]=t.shape[r]*e[r];var o=er(n,t.dtype);for(r=0;r<o.values.length;++r){for(var a=o.indexToLoc(r),i=new Array(t.rank),s=0;s<i.length;s++)i[s]=a[s]%t.shape[s];var u=t.locToIndex(i);o.values[r]=t.values[u]}return o.toTensor()}function za(t,e,n,r,o){for(var a=e[e.length-1],i=[t.length/a,a],s=i[0],u=i[1],c=B(n,s*r),l=B(\"int32\",s*r),h=0;h<s;h++){for(var f=h*u,d=t.subarray(f,f+u),p=[],v=0;v<d.length;v++)p.push({value:d[v],index:v});p.sort((function(t,e){return e.value-t.value}));var g=h*r,m=c.subarray(g,g+r),y=l.subarray(g,g+r);for(v=0;v<r;v++)m[v]=p[v].value,y[v]=p[v].index}var x=e.slice();return x[x.length-1]=r,[Fn(c,x,n),Fn(l,x,\"int32\")]}function Ga(t,e){for(var n=[],r=0;r<e.length;r++)e[r]&&n.push(r);var o=er(t,\"int32\"),a=er([n.length,t.length],\"int32\");for(r=0;r<n.length;r++){var i=o.indexToLoc(n[r]),s=r*t.length;a.values.set(i,s)}return a.toTensor()}var Ha=function(t,e){this.outputShape=[],this.outputShape=t,this.variableNames=e.map((function(t,e){return\"T\"+e}));var n=[];this.variableNames.forEach((function(t){n.push(\"float v\"+t+\" = get\"+t+\"AtOutCoords();\")}));var r=this.variableNames.map((function(t){return\"v\"+t})).join(\" + \");this.userCode=\"\\n      void main() {\\n        \"+n.join(\"\\n        \")+\"\\n\\n        float result = \"+r+\";\\n        setOutput(result);\\n      }\\n    \"},qa=function(t,e){this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t,this.variableNames=e.map((function(t,e){return\"T\"+e}));var n=[];this.variableNames.forEach((function(t){n.push(\"vec4 v\"+t+\" = get\"+t+\"AtOutCoords();\")}));var r=this.variableNames.map((function(t){return\"v\"+t})).join(\" + \");this.userCode=\"\\n      void main() {\\n        \"+n.join(\"\\n        \")+\"\\n\\n        vec4 result = \"+r+\";\\n        setOutput(result);\\n      }\\n    \"},Ka=function(t,e,n){this.variableNames=[\"A\"];var r=t.windowSize,o=t.batchSize,a=t.inSize,i=Math.ceil(a/r);n||this.variableNames.push(\"bestIndicesA\"),this.outputShape=[o,i];var s=\"max\"===e?\">\":\"<\",u=n?\"inOffset + i;\":\"round(getBestIndicesA(batch, inOffset + i));\";this.userCode=\"\\n      void main() {\\n        ivec2 coords = getOutputCoords();\\n        int batch = coords[0];\\n        int outIdx = coords[1];\\n        int inOffset = outIdx * \"+r+\";\\n\\n        int bestIndex = inOffset;\\n        float bestValue = getA(batch, bestIndex);\\n\\n        for (int i = 0; i < \"+r+\"; i++) {\\n          int inIdx = \"+u+\";\\n          float candidate = getA(batch, inIdx);\\n          if (candidate \"+s+\" bestValue) {\\n            bestValue = candidate;\\n            bestIndex = inIdx;\\n          }\\n        }\\n        setOutput(float(bestIndex));\\n      }\\n    \"};function ja(t,e){return[\"x\",\"y\",\"z\",\"w\",\"u\",\"v\"].slice(0,e).map((function(e){return t+\".\"+e}))}function Xa(t,e){return 1===e?[t]:ja(t,e)}function Ya(){var t,e,n,r,o,a,s,u,c,l;return 2===i().getNumber(\"WEBGL_VERSION\")?(t=\"#version 300 es\",e=\"in\",n=\"out\",r=\"in\",o=\"texture\",a=\"outputColor\",s=\"out vec4 outputColor;\",u=\"\\n      bool isnan_custom(float val) {\\n        return (val > 0.0 || val < 0.0) ? false : val != 0.0;\\n      }\\n\\n      bvec4 isnan_custom(vec4 val) {\\n        return bvec4(isnan_custom(val.x),\\n          isnan_custom(val.y), isnan_custom(val.z), isnan_custom(val.w));\\n      }\\n\\n      #define isnan(value) isnan_custom(value)\\n    \",c=\"\",l=\"\\n      #define round(value) newRound(value)\\n      int newRound(float value) {\\n        return int(floor(value + 0.5));\\n      }\\n\\n      ivec4 newRound(vec4 value) {\\n        return ivec4(floor(value + vec4(0.5)));\\n      }\\n    \"):(t=\"\",e=\"attribute\",n=\"varying\",r=\"varying\",o=\"texture2D\",a=\"gl_FragColor\",s=\"\",u=\"\\n      #define isnan(value) isnan_custom(value)\\n      bool isnan_custom(float val) {\\n        return (val > 0. || val < 1. || val == 0.) ? false : true;\\n      }\\n      bvec4 isnan_custom(vec4 val) {\\n        return bvec4(isnan(val.x), isnan(val.y), isnan(val.z), isnan(val.w));\\n      }\\n    \",c=\"\\n      uniform float INFINITY;\\n\\n      bool isinf(float val) {\\n        return abs(val) == INFINITY;\\n      }\\n      bvec4 isinf(vec4 val) {\\n        return equal(abs(val), vec4(INFINITY));\\n      }\\n    \",l=\"\\n      int round(float value) {\\n        return int(floor(value + 0.5));\\n      }\\n\\n      ivec4 round(vec4 value) {\\n        return ivec4(floor(value + vec4(0.5)));\\n      }\\n    \"),{version:t,attribute:e,varyingVs:n,varyingFs:r,texture2D:o,output:a,defineOutput:s,defineSpecialNaN:u,defineSpecialInf:c,defineRound:l}}function $a(t,e,n){void 0===n&&(n=\"index\");var r=$(e);return r.map((function(e,o){return\"int \"+t[o]+\" = \"+n+\" / \"+e+\"; \"+(o===r.length-1?\"int \"+t[o+1]+\" = \"+n+\" - \"+t[o]+\" * \"+e:\"index -= \"+t[o]+\" * \"+e)+\";\"})).join(\"\")}function Qa(t){var e=$(t).map((function(t){return t.toString()}));return\"\\n  int getFlatIndex(ivec3 coords) {\\n    return coords.x * \"+e[0]+\" + coords.y * \"+e[1]+\" + coords.z;\\n  }\\n\"}var Ja=\"\\n  const float FLOAT_MAX = 1.70141184e38;\\n  const float FLOAT_MIN = 1.17549435e-38;\\n\\n  lowp vec4 encode_float(highp float v) {\\n    if (isnan(v)) {\\n      return vec4(255, 255, 255, 255);\\n    }\\n\\n    highp float av = abs(v);\\n\\n    if(av < FLOAT_MIN) {\\n      return vec4(0.0, 0.0, 0.0, 0.0);\\n    } else if(v > FLOAT_MAX) {\\n      return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;\\n    } else if(v < -FLOAT_MAX) {\\n      return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;\\n    }\\n\\n    highp vec4 c = vec4(0,0,0,0);\\n\\n    highp float e = floor(log2(av));\\n    highp float m = exp2(fract(log2(av))) - 1.0;\\n\\n    c[2] = floor(128.0 * m);\\n    m -= c[2] / 128.0;\\n    c[1] = floor(32768.0 * m);\\n    m -= c[1] / 32768.0;\\n    c[0] = floor(8388608.0 * m);\\n\\n    highp float ebias = e + 127.0;\\n    c[3] = floor(ebias / 2.0);\\n    ebias -= c[3] * 2.0;\\n    c[2] += floor(ebias) * 128.0;\\n\\n    c[3] += 128.0 * step(0.0, -v);\\n\\n    return c / 255.0;\\n  }\\n\";function Za(t,e,n,r){var o=[];t.forEach((function(t){var e=k(t.shapeInfo.logicalShape);t.shapeInfo.isUniform?o.push(\"uniform float \"+t.name+(e>1?\"[\"+e+\"]\":\"\")+\";\"):(o.push(\"uniform sampler2D \"+t.name+\";\"),o.push(\"uniform int offset\"+t.name+\";\"))}));var a,i,s=o.join(\"\\n\"),u=t.map((function(t){return function(t,e,n){void 0===n&&(n=!1);var r=\"\";r+=n?ei(t):ti(t);var o=t.shapeInfo.logicalShape,a=e.logicalShape;o.length<=a.length&&(r+=n?function(t,e){var n,r=t.name,o=r.charAt(0).toUpperCase()+r.slice(1),a=\"get\"+o+\"AtOutCoords\",i=t.shapeInfo.logicalShape.length,s=e.logicalShape.length,u=Mr(t.shapeInfo.logicalShape,e.logicalShape),c=ui(s),l=s-i,h=[\"x\",\"y\",\"z\",\"w\",\"u\",\"v\"];n=0===i?\"\":s<2&&u.length>=1?\"coords = 0;\":u.map((function(t){return\"coords.\"+h[t+l]+\" = 0;\"})).join(\"\\n\");var f=\"\";f=s<2&&i>0?\"coords\":t.shapeInfo.logicalShape.map((function(t,e){return\"coords.\"+h[e+l]})).join(\", \");var d=\"return outputValue;\",p=1===k(t.shapeInfo.logicalShape),v=1===k(e.logicalShape);if(1!==i||p||v){if(p&&!v)d=1===s?\"\\n        return vec4(outputValue.x, outputValue.x, 0., 0.);\\n      \":\"\\n        return vec4(outputValue.x);\\n      \";else if(u.length){var g=i-2,m=i-1;u.indexOf(g)>-1&&u.indexOf(m)>-1?d=\"return vec4(outputValue.x);\":u.indexOf(g)>-1?d=\"return vec4(outputValue.x, outputValue.y, outputValue.x, outputValue.y);\":u.indexOf(m)>-1&&(d=\"return vec4(outputValue.xx, outputValue.zz);\")}}else d=\"\\n      return vec4(outputValue.xy, outputValue.xy);\\n    \";return\"\\n    vec4 \"+a+\"() {\\n      \"+c+\" coords = getOutputCoords();\\n      \"+n+\"\\n      vec4 outputValue = get\"+o+\"(\"+f+\");\\n      \"+d+\"\\n    }\\n  \"}(t,e):function(t,e){var n=t.name,r=n.charAt(0).toUpperCase()+n.slice(1),o=\"get\"+r+\"AtOutCoords\",a=e.texShape,i=t.shapeInfo.texShape,s=t.shapeInfo.logicalShape.length,u=e.logicalShape.length;if(!t.shapeInfo.isUniform&&s===u&&null==t.shapeInfo.flatOffset&&S(i,a))return\"\\n      float \"+o+\"() {\\n        return sampleTexture(\"+n+\", resultUV);\\n      }\\n    \";var c,l=ui(u),h=Mr(t.shapeInfo.logicalShape,e.logicalShape),f=u-s,d=[\"x\",\"y\",\"z\",\"w\",\"u\",\"v\"];c=0===s?\"\":u<2&&h.length>=1?\"coords = 0;\":h.map((function(t){return\"coords.\"+d[t+f]+\" = 0;\"})).join(\"\\n\");var p=\"\";p=u<2&&s>0?\"coords\":t.shapeInfo.logicalShape.map((function(t,e){return\"coords.\"+d[e+f]})).join(\", \");return\"\\n    float \"+o+\"() {\\n      \"+l+\" coords = getOutputCoords();\\n      \"+c+\"\\n      return get\"+r+\"(\"+p+\");\\n    }\\n  \"}(t,e));return r}(t,e,r)})).join(\"\\n\"),c=e.texShape,l=Ya(),h=function(t){return\"\\n    float sampleTexture(sampler2D textureSampler, vec2 uv) {\\n      return \"+t.texture2D+\"(textureSampler, uv).r;\\n    }\\n  \"}(l),f=function(t){return t.version+\"\\n    precision highp float;\\n    precision highp int;\\n    precision highp sampler2D;\\n    \"+t.varyingFs+\" vec2 resultUV;\\n    \"+t.defineOutput+\"\\n    const vec2 halfCR = vec2(0.5, 0.5);\\n\\n    struct ivec5\\n    {\\n      int x;\\n      int y;\\n      int z;\\n      int w;\\n      int u;\\n    };\\n\\n    struct ivec6\\n    {\\n      int x;\\n      int y;\\n      int z;\\n      int w;\\n      int u;\\n      int v;\\n    };\\n\\n    uniform float NAN;\\n    \"+t.defineSpecialNaN+\"\\n    \"+t.defineSpecialInf+\"\\n    \"+t.defineRound+\"\\n\\n    int imod(int x, int y) {\\n      return x - y * (x / y);\\n    }\\n\\n    int idiv(int a, int b, float sign) {\\n      int res = a / b;\\n      int mod = imod(a, b);\\n      if (sign < 0. && mod != 0) {\\n        res -= 1;\\n      }\\n      return res;\\n    }\\n\\n    //Based on the work of Dave Hoskins\\n    //https://www.shadertoy.com/view/4djSRW\\n    #define HASHSCALE1 443.8975\\n    float random(float seed){\\n      vec2 p = resultUV * seed;\\n      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);\\n      p3 += dot(p3, p3.yzx + 19.19);\\n      return fract((p3.x + p3.y) * p3.z);\\n    }\\n\\n    \"+ni+\"\\n    \"+ri+\"\\n    \"+oi+\"\\n  \"}(l);return e.isPacked?(a=function(t,e){switch(t.length){case 0:return\"\\n    int getOutputCoords() {\\n      return 0;\\n    }\\n  \";case 1:return function(t,e){var n=[Math.ceil(e[0]/2),Math.ceil(e[1]/2)];if(1===n[0])return\"\\n      int getOutputCoords() {\\n        return 2 * int(resultUV.x * \"+n[1]+\".0);\\n      }\\n    \";if(1===n[1])return\"\\n      int getOutputCoords() {\\n        return 2 * int(resultUV.y * \"+n[0]+\".0);\\n      }\\n    \";return\"\\n    int getOutputCoords() {\\n      ivec2 resTexRC = ivec2(resultUV.yx *\\n                             vec2(\"+n[0]+\", \"+n[1]+\"));\\n      return 2 * (resTexRC.x * \"+n[1]+\" + resTexRC.y);\\n    }\\n  \"}(0,e);case 2:return function(t,e){var n=[Math.ceil(e[0]/2),Math.ceil(e[1]/2)];if(S(t,e))return\"\\n      ivec2 getOutputCoords() {\\n        return 2 * ivec2(resultUV.yx * vec2(\"+n[0]+\", \"+n[1]+\"));\\n      }\\n    \";var r=Math.ceil(t[1]/2);return\"\\n    ivec2 getOutputCoords() {\\n      ivec2 resTexRC = ivec2(resultUV.yx *\\n                             vec2(\"+n[0]+\", \"+n[1]+\"));\\n\\n      int index = resTexRC.x * \"+n[1]+\" + resTexRC.y;\\n      int r = 2 * (index / \"+r+\");\\n      int c = imod(index, \"+r+\") * 2;\\n\\n      return ivec2(r, c);\\n    }\\n  \"}(t,e);case 3:return n=t,r=e,o=[Math.ceil(r[0]/2),Math.ceil(r[1]/2)],a=Math.ceil(n[2]/2),i=a*Math.ceil(n[1]/2),\"\\n    ivec3 getOutputCoords() {\\n      ivec2 resTexRC = ivec2(resultUV.yx *\\n                             vec2(\"+o[0]+\", \"+o[1]+\"));\\n      int index = resTexRC.x * \"+o[1]+\" + resTexRC.y;\\n\\n      int b = index / \"+i+\";\\n      index -= b * \"+i+\";\\n\\n      int r = 2 * (index / \"+a+\");\\n      int c = imod(index, \"+a+\") * 2;\\n\\n      return ivec3(b, r, c);\\n    }\\n  \";default:return function(t,e){for(var n=[Math.ceil(e[0]/2),Math.ceil(e[1]/2)],r=Math.ceil(t[t.length-1]/2),o=r*Math.ceil(t[t.length-2]/2),a=o,i=\"\",s=\"b, r, c\",u=2;u<t.length-1;u++)a*=t[t.length-u-1],i=\"\\n      int b\"+u+\" = index / \"+a+\";\\n      index -= b\"+u+\" * \"+a+\";\\n    \"+i,s=\"b\"+u+\", \"+s;return\"\\n    ivec\"+t.length+\" getOutputCoords() {\\n      ivec2 resTexRC = ivec2(resultUV.yx *\\n                             vec2(\"+n[0]+\", \"+n[1]+\"));\\n      int index = resTexRC.x * \"+n[1]+\" + resTexRC.y;\\n\\n      \"+i+\"\\n\\n      int b = index / \"+o+\";\\n      index -= b * \"+o+\";\\n\\n      int r = 2 * (index / \"+r+\");\\n      int c = imod(index, \"+r+\") * 2;\\n\\n      return ivec\"+t.length+\"(\"+s+\");\\n    }\\n  \"}(t,e)}var n,r,o,a,i}(e.logicalShape,c),i=function(t){return\"\\n    void setOutput(vec4 val) {\\n      \"+t.output+\" = val;\\n    }\\n  \"}(l)):(a=function(t,e){switch(t.length){case 0:return\"\\n    int getOutputCoords() {\\n      return 0;\\n    }\\n  \";case 1:return function(t,e){if(1===e[0])return\"\\n      int getOutputCoords() {\\n        return int(resultUV.x * \"+e[1]+\".0);\\n      }\\n    \";if(1===e[1])return\"\\n      int getOutputCoords() {\\n        return int(resultUV.y * \"+e[0]+\".0);\\n      }\\n    \";return\"\\n    int getOutputCoords() {\\n      ivec2 resTexRC = ivec2(resultUV.yx *\\n                             vec2(\"+e[0]+\", \"+e[1]+\"));\\n      return resTexRC.x * \"+e[1]+\" + resTexRC.y;\\n    }\\n  \"}(0,e);case 2:return function(t,e){if(S(t,e))return\"\\n      ivec2 getOutputCoords() {\\n        return ivec2(resultUV.yx * vec2(\"+e[0]+\", \"+e[1]+\"));\\n      }\\n    \";if(1===t[1])return\"\\n      ivec2 getOutputCoords() {\\n        ivec2 resTexRC = ivec2(resultUV.yx *\\n                               vec2(\"+e[0]+\", \"+e[1]+\"));\\n        int index = resTexRC.x * \"+e[1]+\" + resTexRC.y;\\n        return ivec2(index, 0);\\n      }\\n    \";if(1===t[0])return\"\\n      ivec2 getOutputCoords() {\\n        ivec2 resTexRC = ivec2(resultUV.yx *\\n                               vec2(\"+e[0]+\", \"+e[1]+\"));\\n        int index = resTexRC.x * \"+e[1]+\" + resTexRC.y;\\n        return ivec2(0, index);\\n      }\\n    \";return\"\\n    ivec2 getOutputCoords() {\\n      ivec2 resTexRC = ivec2(resultUV.yx *\\n                             vec2(\"+e[0]+\", \"+e[1]+\"));\\n      int index = resTexRC.x * \"+e[1]+\" + resTexRC.y;\\n      int r = index / \"+t[1]+\";\\n      int c = index - r * \"+t[1]+\";\\n      return ivec2(r, c);\\n    }\\n  \"}(t,e);case 3:return n=e,r=$a([\"r\",\"c\",\"d\"],t),\"\\n    ivec3 getOutputCoords() {\\n      ivec2 resTexRC = ivec2(resultUV.yx *\\n                             vec2(\"+n[0]+\", \"+n[1]+\"));\\n      int index = resTexRC.x * \"+n[1]+\" + resTexRC.y;\\n      \"+r+\"\\n      return ivec3(r, c, d);\\n    }\\n  \";case 4:return function(t,e){var n=$a([\"r\",\"c\",\"d\",\"d2\"],t);return\"\\n    ivec4 getOutputCoords() {\\n      ivec2 resTexRC = ivec2(resultUV.yx *\\n        vec2(\"+e[0]+\", \"+e[1]+\"));\\n      int index = resTexRC.x * \"+e[1]+\" + resTexRC.y;\\n      \"+n+\"\\n      return ivec4(r, c, d, d2);\\n    }\\n  \"}(t,e);case 5:return function(t,e){var n=$a([\"r\",\"c\",\"d\",\"d2\",\"d3\"],t);return\"\\n    ivec5 getOutputCoords() {\\n      ivec2 resTexRC = ivec2(resultUV.yx * vec2(\"+e[0]+\",\\n                             \"+e[1]+\"));\\n\\n      int index = resTexRC.x * \"+e[1]+\" + resTexRC.y;\\n\\n      \"+n+\"\\n\\n      ivec5 outShape = ivec5(r, c, d, d2, d3);\\n      return outShape;\\n    }\\n  \"}(t,e);case 6:return function(t,e){var n=$a([\"r\",\"c\",\"d\",\"d2\",\"d3\",\"d4\"],t);return\"\\n    ivec6 getOutputCoords() {\\n      ivec2 resTexRC = ivec2(resultUV.yx *\\n        vec2(\"+e[0]+\", \"+e[1]+\"));\\n      int index = resTexRC.x * \"+e[1]+\" + resTexRC.y;\\n\\n      \"+n+\"\\n\\n      ivec6 result = ivec6(r, c, d, d2, d3, d4);\\n      return result;\\n    }\\n  \"}(t,e);default:throw new Error(t.length+\"-D output sampling is not yet supported\")}var n,r}(e.logicalShape,c),i=function(t){return\"\\n    void setOutput(float val) {\\n      \"+t.output+\" = vec4(val, 0, 0, 0);\\n    }\\n  \"}(l)),r&&(f+=ai),[f,h,i,s,a,u,n].join(\"\\n\")}function ti(t){var e=t.shapeInfo.logicalShape;switch(e.length){case 0:return function(t){var e=t.name,n=\"get\"+e.charAt(0).toUpperCase()+e.slice(1);if(t.shapeInfo.isUniform)return\"float \"+n+\"() {return \"+e+\";}\";var r=t.shapeInfo.texShape,o=r[0],a=r[1];if(1===o&&1===a)return\"\\n      float \"+n+\"() {\\n        return sampleTexture(\"+e+\", halfCR);\\n      }\\n    \";var i=t.shapeInfo.texShape,s=i[0],u=i[1],c=ii(e);return\"\\n    float \"+n+\"() {\\n      vec2 uv = uvFromFlat(\"+s+\", \"+u+\", \"+c+\");\\n      return sampleTexture(\"+e+\", uv);\\n    }\\n  \"}(t);case 1:return function(t){var e=t.name,n=\"get\"+e.charAt(0).toUpperCase()+e.slice(1);if(t.shapeInfo.isUniform)return\"\\n      float \"+n+\"(int index) {\\n        \"+si(t)+\"\\n      }\\n    \";var r=t.shapeInfo.texShape,o=r[0],a=r[1];if(1===a&&1===o)return\"\\n      float \"+n+\"(int index) {\\n        return sampleTexture(\"+e+\", halfCR);\\n      }\\n    \";var i=ii(e);if(1===a)return\"\\n      float \"+n+\"(int index) {\\n        vec2 uv = vec2(0.5, (float(index + \"+i+\") + 0.5) / \"+o+\".0);\\n        return sampleTexture(\"+e+\", uv);\\n      }\\n    \";if(1===o)return\"\\n      float \"+n+\"(int index) {\\n        vec2 uv = vec2((float(index + \"+i+\") + 0.5) / \"+a+\".0, 0.5);\\n        return sampleTexture(\"+e+\", uv);\\n      }\\n    \";return\"\\n    float \"+n+\"(int index) {\\n      vec2 uv = uvFromFlat(\"+o+\", \"+a+\", index + \"+i+\");\\n      return sampleTexture(\"+e+\", uv);\\n    }\\n  \"}(t);case 2:return function(t){var e=t.shapeInfo.logicalShape,n=t.name,r=\"get\"+n.charAt(0).toUpperCase()+n.slice(1),o=t.shapeInfo.texShape;if(null!=o&&S(e,o)){var a=o[0],i=o[1];return\"\\n    float \"+r+\"(int row, int col) {\\n      vec2 uv = (vec2(col, row) + halfCR) / vec2(\"+i+\".0, \"+a+\".0);\\n      return sampleTexture(\"+n+\", uv);\\n    }\\n  \"}var s=M(e),u=s.newShape,c=s.keptDims,l=u;if(l.length<e.length){var h=ci(t,l);return\"\\n      \"+ti(h)+\"\\n      float \"+r+\"(int row, int col) {\\n        return \"+r+\"(\"+li([\"row\",\"col\"],c)+\");\\n      }\\n    \"}if(t.shapeInfo.isUniform)return\"\\n      float \"+r+\"(int row, int col) {\\n        int index = round(dot(vec2(row, col), vec2(\"+e[1]+\", 1)));\\n        \"+si(t)+\"\\n      }\\n    \";var f=o[0],d=o[1],p=ii(n);if(1===d)return\"\\n    float \"+r+\"(int row, int col) {\\n      float index = dot(vec3(row, col, \"+p+\"), vec3(\"+e[1]+\", 1, 1));\\n      vec2 uv = vec2(0.5, (index + 0.5) / \"+f+\".0);\\n      return sampleTexture(\"+n+\", uv);\\n    }\\n  \";if(1===f)return\"\\n    float \"+r+\"(int row, int col) {\\n      float index = dot(vec3(row, col, \"+p+\"), vec3(\"+e[1]+\", 1, 1));\\n      vec2 uv = vec2((index + 0.5) / \"+d+\".0, 0.5);\\n      return sampleTexture(\"+n+\", uv);\\n    }\\n  \";return\"\\n  float \"+r+\"(int row, int col) {\\n    // Explicitly use integer operations as dot() only works on floats.\\n    int index = row * \"+e[1]+\" + col + \"+p+\";\\n    vec2 uv = uvFromFlat(\"+f+\", \"+d+\", index);\\n    return sampleTexture(\"+n+\", uv);\\n  }\\n\"}(t);case 3:return function(t){var e=t.shapeInfo.logicalShape,n=t.name,r=\"get\"+n.charAt(0).toUpperCase()+n.slice(1),o=e[1]*e[2],a=e[2],i=M(e),s=i.newShape,u=i.keptDims,c=s;if(c.length<e.length){var l=ci(t,c);return\"\\n        \"+ti(l)+\"\\n        float \"+r+\"(int row, int col, int depth) {\\n          return \"+r+\"(\"+li([\"row\",\"col\",\"depth\"],u)+\");\\n        }\\n      \"}if(t.shapeInfo.isUniform)return\"\\n      float \"+r+\"(int row, int col, int depth) {\\n        int index = round(dot(vec3(row, col, depth),\\n                          vec3(\"+o+\", \"+a+\", 1)));\\n        \"+si(t)+\"\\n      }\\n    \";var h=t.shapeInfo.texShape,f=h[0],d=h[1],p=t.shapeInfo.flatOffset;if(d===o&&null==p)return\"\\n        float \"+r+\"(int row, int col, int depth) {\\n          float texR = float(row);\\n          float texC = dot(vec2(col, depth), vec2(\"+a+\", 1));\\n          vec2 uv = (vec2(texC, texR) + halfCR) /\\n                     vec2(\"+d+\".0, \"+f+\".0);\\n          return sampleTexture(\"+n+\", uv);\\n        }\\n      \";if(d===a&&null==p)return\"\\n    float \"+r+\"(int row, int col, int depth) {\\n      float texR = dot(vec2(row, col), vec2(\"+e[1]+\", 1));\\n      float texC = float(depth);\\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(\"+d+\".0, \"+f+\".0);\\n      return sampleTexture(\"+n+\", uv);\\n    }\\n  \";var v=ii(n);return\"\\n      float \"+r+\"(int row, int col, int depth) {\\n        // Explicitly use integer operations as dot() only works on floats.\\n        int index = row * \"+o+\" + col * \"+a+\" + depth + \"+v+\";\\n        vec2 uv = uvFromFlat(\"+f+\", \"+d+\", index);\\n        return sampleTexture(\"+n+\", uv);\\n      }\\n  \"}(t);case 4:return function(t){var e=t.shapeInfo.logicalShape,n=t.name,r=\"get\"+n.charAt(0).toUpperCase()+n.slice(1),o=e[3],a=e[2]*o,i=e[1]*a,s=M(e),u=s.newShape,c=s.keptDims;if(u.length<e.length){var l=ci(t,u);return\"\\n      \"+ti(l)+\"\\n      float \"+r+\"(int row, int col, int depth, int depth2) {\\n        return \"+r+\"(\"+li([\"row\",\"col\",\"depth\",\"depth2\"],c)+\");\\n      }\\n    \"}if(t.shapeInfo.isUniform)return\"\\n      float \"+r+\"(int row, int col, int depth, int depth2) {\\n        int index = round(dot(vec4(row, col, depth, depth2),\\n                          vec4(\"+i+\", \"+a+\", \"+o+\", 1)));\\n        \"+si(t)+\"\\n      }\\n    \";var h=t.shapeInfo.flatOffset,f=t.shapeInfo.texShape,d=f[0],p=f[1];if(p===i&&null==h)return\"\\n      float \"+r+\"(int row, int col, int depth, int depth2) {\\n        float texR = float(row);\\n        float texC =\\n            dot(vec3(col, depth, depth2),\\n                vec3(\"+a+\", \"+o+\", 1));\\n        vec2 uv = (vec2(texC, texR) + halfCR) /\\n                   vec2(\"+p+\".0, \"+d+\".0);\\n        return sampleTexture(\"+n+\", uv);\\n      }\\n    \";if(p===o&&null==h)return\"\\n      float \"+r+\"(int row, int col, int depth, int depth2) {\\n        float texR = dot(vec3(row, col, depth),\\n                         vec3(\"+e[1]*e[2]+\", \"+e[2]+\", 1));\\n        float texC = float(depth2);\\n        vec2 uv = (vec2(texC, texR) + halfCR) /\\n                  vec2(\"+p+\".0, \"+d+\".0);\\n        return sampleTexture(\"+n+\", uv);\\n      }\\n    \";var v=ii(n);return\"\\n    float \"+r+\"(int row, int col, int depth, int depth2) {\\n      // Explicitly use integer operations as dot() only works on floats.\\n      int index = row * \"+i+\" + col * \"+a+\" +\\n          depth * \"+o+\" + depth2;\\n      vec2 uv = uvFromFlat(\"+d+\", \"+p+\", index + \"+v+\");\\n      return sampleTexture(\"+n+\", uv);\\n    }\\n  \"}(t);case 5:return function(t){var e=t.shapeInfo.logicalShape,n=t.name,r=\"get\"+n.charAt(0).toUpperCase()+n.slice(1),o=e[4],a=e[3]*o,i=e[2]*a,s=e[1]*i,u=M(e),c=u.newShape,l=u.keptDims;if(c.length<e.length){var h=ci(t,c);return\"\\n      \"+ti(h)+\"\\n      float \"+r+\"(int row, int col, int depth, int depth2, int depth3) {\\n        return \"+r+\"(\"+li([\"row\",\"col\",\"depth\",\"depth2\",\"depth3\"],l)+\");\\n      }\\n    \"}if(t.shapeInfo.isUniform)return\"\\n      float \"+r+\"(int row, int col, int depth, int depth2, int depth3) {\\n        float index = dot(\\n          vec4(row, col, depth, depth2),\\n          vec4(\"+s+\", \"+i+\", \"+a+\", \"+o+\")) +\\n          depth3;\\n        \"+si(t)+\"\\n      }\\n    \";var f=t.shapeInfo.flatOffset,d=t.shapeInfo.texShape,p=d[0],v=d[1];if(v===s&&null==f)return\"\\n      float \"+r+\"(int row, int col, int depth, int depth2, int depth3) {\\n        int texR = row;\\n        float texC = dot(vec4(col, depth, depth2, depth3),\\n                         vec4(\"+i+\", \"+a+\", \"+o+\", 1));\\n        vec2 uv = (vec2(texC, texR) + halfCR) /\\n                   vec2(\"+v+\".0, \"+p+\".0);\\n        return sampleTexture(\"+n+\", uv);\\n      }\\n    \";if(v===o&&null==f)return\"\\n      float \"+r+\"(int row, int col, int depth, int depth2, int depth3) {\\n        float texR = dot(\\n          vec4(row, col, depth, depth2),\\n          vec4(\"+e[1]*e[2]*e[3]+\",\\n               \"+e[2]*e[3]+\", \"+e[3]+\", 1));\\n        int texC = depth3;\\n        vec2 uv = (vec2(texC, texR) + halfCR) /\\n                  vec2(\"+v+\".0, \"+p+\".0);\\n        return sampleTexture(\"+n+\", uv);\\n      }\\n    \";var g=ii(n);return\"\\n    float \"+r+\"(int row, int col, int depth, int depth2, int depth3) {\\n      // Explicitly use integer operations as dot() only works on floats.\\n      int index = row * \"+s+\" + col * \"+i+\" + depth * \"+a+\" +\\n          depth2 * \"+o+\" + depth3 + \"+g+\";\\n      vec2 uv = uvFromFlat(\"+p+\", \"+v+\", index);\\n      return sampleTexture(\"+n+\", uv);\\n    }\\n  \"}(t);case 6:return function(t){var e=t.shapeInfo.logicalShape,n=t.name,r=\"get\"+n.charAt(0).toUpperCase()+n.slice(1),o=M(e),a=o.newShape,i=o.keptDims;if(a.length<e.length){var s=ci(t,a);return\"\\n      \"+ti(s)+\"\\n      float \"+r+\"(int row, int col, int depth,\\n                    int depth2, int depth3, int depth4) {\\n        return \"+r+\"(\"+li([\"row\",\"col\",\"depth\",\"depth2\",\"depth3\",\"depth4\"],i)+\");\\n      }\\n    \"}var u=e[5],c=e[4]*u,l=e[3]*c,h=e[2]*l,f=e[1]*h;if(t.shapeInfo.isUniform)return\"\\n      float \"+r+\"(int row, int col, int depth,\\n                  int depth2, int depth3, int depth4) {\\n        int index = round(dot(\\n          vec4(row, col, depth, depth2),\\n          vec4(\"+f+\", \"+h+\", \"+l+\", \"+c+\")) +\\n          dot(\\n            vec2(depth3, depth4),\\n            vec2(\"+u+\", 1)));\\n        \"+si(t)+\"\\n      }\\n    \";var d=t.shapeInfo.flatOffset,p=t.shapeInfo.texShape,v=p[0],g=p[1];if(g===f&&null==d)return\"\\n      float \"+r+\"(int row, int col, int depth,\\n                    int depth2, int depth3, int depth4) {\\n        int texR = row;\\n        float texC = dot(vec4(col, depth, depth2, depth3),\\n          vec4(\"+h+\", \"+l+\", \"+c+\", \"+u+\")) +\\n               float(depth4);\\n        vec2 uv = (vec2(texC, texR) + halfCR) /\\n                   vec2(\"+g+\".0, \"+v+\".0);\\n        return sampleTexture(\"+n+\", uv);\\n      }\\n    \";if(g===u&&null==d)return\"\\n      float \"+r+\"(int row, int col, int depth,\\n                    int depth2, int depth3, int depth4) {\\n        float texR = dot(vec4(row, col, depth, depth2),\\n          vec4(\"+e[1]*e[2]*e[3]*e[4]+\",\\n               \"+e[2]*e[3]*e[4]+\",\\n               \"+e[3]*e[4]+\",\\n               \"+e[4]+\")) + float(depth3);\\n        int texC = depth4;\\n        vec2 uv = (vec2(texC, texR) + halfCR) /\\n                  vec2(\"+g+\".0, \"+v+\".0);\\n        return sampleTexture(\"+n+\", uv);\\n      }\\n    \";var m=ii(n);return\"\\n    float \"+r+\"(int row, int col, int depth,\\n                  int depth2, int depth3, int depth4) {\\n      // Explicitly use integer operations as dot() only works on floats.\\n      int index = row * \"+f+\" + col * \"+h+\" + depth * \"+l+\" +\\n          depth2 * \"+c+\" + depth3 * \"+u+\" + depth4 + \"+m+\";\\n      vec2 uv = uvFromFlat(\"+v+\", \"+g+\", index);\\n      return sampleTexture(\"+n+\", uv);\\n    }\\n  \"}(t);default:throw new Error(e.length+\"-D input sampling is not yet supported\")}}function ei(t){var e,n,r;switch(t.shapeInfo.logicalShape.length){case 0:return e=t.name,n=\"get\"+e.charAt(0).toUpperCase()+e.slice(1),r=Ya(),\"\\n    vec4 \"+n+\"() {\\n      return \"+r.texture2D+\"(\"+e+\", halfCR);\\n    }\\n  \";case 1:return function(t){var e=t.name,n=\"get\"+e.charAt(0).toUpperCase()+e.slice(1),r=t.shapeInfo.texShape,o=[Math.ceil(r[0]/2),Math.ceil(r[1]/2)],a=Ya();return\"\\n    vec4 \"+n+\"(int index) {\\n      vec2 uv = packedUVfrom1D(\\n        \"+o[0]+\", \"+o[1]+\", index);\\n      return \"+a.texture2D+\"(\"+e+\", uv);\\n    }\\n  \"}(t);case 2:return function(t){var e=t.shapeInfo.logicalShape,n=t.name,r=\"get\"+n.charAt(0).toUpperCase()+n.slice(1),o=t.shapeInfo.texShape,a=o[0],i=o[1],s=Ya();if(null!=o&&S(e,o))return\"\\n      vec4 \"+r+\"(int row, int col) {\\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(\"+i+\".0, \"+a+\".0);\\n\\n        return \"+s.texture2D+\"(\"+n+\", uv);\\n      }\\n    \";var u=[Math.ceil(o[0]/2),Math.ceil(o[1]/2)],c=Math.ceil(e[1]/2);return\"\\n    vec4 \"+r+\"(int row, int col) {\\n      vec2 uv = packedUVfrom2D(\"+c+\", \"+u[0]+\", \"+u[1]+\", row, col);\\n      return \"+s.texture2D+\"(\"+n+\", uv);\\n    }\\n  \"}(t);case 3:return function(t){var e=t.shapeInfo.logicalShape,n=t.name,r=\"get\"+n.charAt(0).toUpperCase()+n.slice(1),o=t.shapeInfo.texShape,a=[Math.ceil(o[0]/2),Math.ceil(o[1]/2)];if(1===e[0]){var i=e.slice(1),s=ci(t,i);return\"\\n        \"+ei(s)+\"\\n        vec4 \"+r+\"(int b, int row, int col) {\\n          return \"+r+\"(\"+li([\"b\",\"row\",\"col\"],[1,2])+\");\\n        }\\n      \"}var u=a[0],c=a[1],l=Math.ceil(e[2]/2),h=l*Math.ceil(e[1]/2),f=Ya();return\"\\n    vec4 \"+r+\"(int b, int row, int col) {\\n      vec2 uv = packedUVfrom3D(\\n        \"+u+\", \"+c+\", \"+h+\", \"+l+\", b, row, col);\\n      return \"+f.texture2D+\"(\"+n+\", uv);\\n    }\\n  \"}(t);default:return function(t){for(var e=t.shapeInfo.logicalShape,n=e.length,r=t.name,o=\"get\"+r.charAt(0).toUpperCase()+r.slice(1),a=t.shapeInfo.texShape,i=[Math.ceil(a[0]/2),Math.ceil(a[1]/2)],s=i[0],u=i[1],c=Math.ceil(e[n-1]/2),l=c*Math.ceil(e[n-2]/2),h=\"int b, int row, int col\",f=\"b * \"+l+\" + (row / 2) * \"+c+\" + (col / 2)\",d=2;d<n-1;d++)h=\"int b\"+d+\", \"+h,l*=e[n-d-1],f=\"b\"+d+\" * \"+l+\" + \"+f;var p=Ya();return\"\\n    vec4 \"+o+\"(\"+h+\") {\\n      int index = \"+f+\";\\n      int texR = index / \"+u+\";\\n      int texC = index - texR * \"+u+\";\\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(\"+u+\", \"+s+\");\\n      return \"+p.texture2D+\"(\"+r+\", uv);\\n    }\\n  \"}(t)}}var ni=\"\\nvec2 uvFromFlat(int texNumR, int texNumC, int index) {\\n  int texR = index / texNumC;\\n  int texC = index - texR * texNumC;\\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\\n}\\nvec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\\n  int texelIndex = index / 2;\\n  int texR = texelIndex / texNumC;\\n  int texC = texelIndex - texR * texNumC;\\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\\n}\\n\",ri=\"\\nvec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,\\n  int texNumC, int row, int col) {\\n  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\\n  int texR = texelIndex / texNumC;\\n  int texC = texelIndex - texR * texNumC;\\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\\n}\\n\",oi=\"\\nvec2 packedUVfrom3D(int texNumR, int texNumC,\\n    int texelsInBatch, int texelsInLogicalRow, int b,\\n    int row, int col) {\\n  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\\n  int texR = index / texNumC;\\n  int texC = index - texR * texNumC;\\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\\n}\\n\",ai=\"\\n  float getChannel(vec4 frag, vec2 innerDims) {\\n    vec2 modCoord = mod(innerDims, 2.);\\n    return modCoord.x == 0. ?\\n      (modCoord.y == 0. ? frag.r : frag.g) :\\n      (modCoord.y == 0. ? frag.b : frag.a);\\n  }\\n  float getChannel(vec4 frag, int dim) {\\n    float modCoord = mod(float(dim), 2.);\\n    return modCoord == 0. ? frag.r : frag.g;\\n  }\\n\";function ii(t){return\"offset\"+t}function si(t){var e=t.name,n=k(t.shapeInfo.logicalShape);return n<2?\"return \"+e+\";\":\"\\n    for (int i = 0; i < \"+n+\"; i++) {\\n      if (i == index) {\\n        return \"+e+\"[i];\\n      }\\n    }\\n  \"}function ui(t){if(t<=1)return\"int\";if(2===t)return\"ivec2\";if(3===t)return\"ivec3\";if(4===t)return\"ivec4\";if(5===t)return\"ivec5\";if(6===t)return\"ivec6\";throw Error(\"GPU for rank \"+t+\" is not yet supported\")}function ci(t,e){var n=JSON.parse(JSON.stringify(t));return n.shapeInfo.logicalShape=e,n}function li(t,e){return e.map((function(e){return t[e]})).join(\", \")}var hi=function(t,e,n,r){this.variableNames=[\"A\"],this.packedInputs=!0,this.packedOutput=!0,C(t.length>2,(function(){return\"Packed arg\"+(n.charAt(0).toUpperCase()+n.slice(1))+\" supports only inputs with rank above 2.\"}));var o=t[t.length-1],a=Math.ceil(o/e);this.outputShape=t.slice(0,-1),a>1&&this.outputShape.push(a),r||this.variableNames.push(\"bestIndicesA\");var i,s,u=this.outputShape,c=u.length,l=ui(c),h=Xa(\"coords\",c);if(1===a){var f=ui(s=c+1);i=\"\\n        \"+f+\" sourceLocR = \"+f+\"(\"+h.join()+\", 0);\\n        ++\"+h[c-1]+\";\\n        \"+f+\" sourceLocG = \"+f+\"(\"+h.join()+\", 0);\\n        ++\"+h[c-2]+\";\\n        \"+f+\" sourceLocA = \"+f+\"(\"+h.join()+\", 0);\\n        --\"+h[c-1]+\";\\n        \"+f+\" sourceLocB = \"+f+\"(\"+h.join()+\", 0);\\n        --\"+h[c-2]+\";\"}else s=c,i=\"\\n        \"+l+\" sourceLocR = coords;\\n        ++\"+h[c-1]+\";\\n        \"+l+\" sourceLocG = coords;\\n        ++\"+h[c-2]+\";\\n        \"+l+\" sourceLocA = coords;\\n        --\"+h[c-1]+\";\\n        \"+l+\" sourceLocB = coords;\\n        --\"+h[c-2]+\";\";var d=[\"x\",\"y\",\"z\",\"w\",\"u\",\"v\"].slice(0,s),p=\".\"+d[s-1],v=d.map((function(t){return\"int \"+t})),g=Xa(\"sourceLocR\",s-1).concat(\"inIdx.r\"),m=Xa(\"sourceLocG\",s-1).concat(\"inIdx.g\"),y=Xa(\"sourceLocB\",s-1).concat(\"inIdx.b\"),x=Xa(\"sourceLocA\",s-1).concat(\"inIdx.a\"),b=\"max\"===n?\"greaterThan\":\"lessThan\",w=r?\"\":\"\\n          inIdx = round(vec4(getBestIndicesAChannel(\"+g.join()+\"),\\n                             getBestIndicesAChannel(\"+m.join()+\"),\\n                             getBestIndicesAChannel(\"+y.join()+\"),\\n                             getBestIndicesAChannel(\"+x.join()+\")));\",E=\"vec4(\\n            getAChannel(\"+g.join()+\"),\\n            hasNextCol ? getAChannel(\"+m.join()+\") : 0.,\\n            hasNextRow ? getAChannel(\"+y.join()+\") : 0.,\\n            hasNextRow && hasNextCol ? getAChannel(\"+x.join()+\") : 0.)\",R=r?\"\":\"\\n      float getBestIndicesAChannel(\"+v.join()+\") {\\n        return getChannel(getBestIndicesA(\"+d.join()+\"),\\n                                          vec2(\"+d.slice(-2).join()+\"));\\n      }\";this.userCode=\"\\n      float getAChannel(\"+v.join()+\") {\\n        return getChannel(getA(\"+d.join()+\"),\\n                               vec2(\"+d.slice(-2).join()+\"));\\n      }\\n      \"+R+\"\\n      void main() {\\n        \"+l+\" coords = getOutputCoords();\\n        bool hasNextCol = \"+h[c-1]+\" < \"+(u[c-1]-1)+\";\\n        bool hasNextRow = \"+h[c-2]+\" < \"+(u[c-2]-1)+\";\\n        \"+i+\"\\n        ivec4 srcIdx = ivec4(sourceLocR\"+p+\", sourceLocG\"+p+\",\\n          sourceLocB\"+p+\", sourceLocA\"+p+\") * \"+e+\";\\n        ivec4 inIdx = srcIdx;\\n        vec4 bestIndex = vec4(inIdx);\\n        vec4 bestValue = \"+E+\";\\n\\n        for (int i = 0; i < \"+e+\"; i++) {\\n          inIdx = srcIdx;\\n          \"+w+\"\\n          vec4 candidate = \"+E+\";\\n          bvec4 nan = isnan(candidate);\\n          bvec4 replace = bvec4(\\n            vec4(\"+b+\"(candidate, bestValue)) * (vec4(1.0) - vec4(nan)));\\n\\n          bestValue = vec4(replace.x  ? candidate.x : bestValue.x,\\n                           replace.y  ? candidate.y : bestValue.y,\\n                           replace.z  ? candidate.z : bestValue.z,\\n                           replace.w  ? candidate.w : bestValue.w);\\n          bestIndex = mix(bestIndex, vec4(inIdx), vec4(replace));\\n          srcIdx++;\\n        }\\n        setOutput(bestIndex);\\n      }\\n    \"},fi=function(t){this.variableNames=[\"dy\"],this.outputShape=t.inShape;var e=t.filterHeight,n=t.filterWidth,r=t.strideHeight,o=t.strideWidth,a=t.dilationHeight,i=t.dilationWidth,s=t.effectiveFilterHeight,u=t.effectiveFilterWidth,c=s-1-t.padInfo.top,l=u-1-t.padInfo.left,h=1/(e*n);this.userCode=\"\\n      const ivec2 pads = ivec2(\"+c+\", \"+l+\");\\n      const float avgMultiplier = float(\"+h+\");\\n\\n      void main() {\\n        ivec4 coords = getOutputCoords();\\n        int b = coords[0];\\n        int d = coords[3];\\n\\n        ivec2 dyRCCorner = coords.yz - pads;\\n        int dyRCorner = dyRCCorner.x;\\n        int dyCCorner = dyRCCorner.y;\\n\\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\\n        // ? = to be determined. : = across all values in that axis.\\n        float dotProd = 0.0;\\n        for (int wR = 0; wR < \"+s+\";\\n            wR += \"+a+\") {\\n          float dyR = float(dyRCorner + wR) / \"+r+\".0;\\n\\n          if (dyR < 0.0 || dyR >= \"+t.outHeight+\".0 || fract(dyR) > 0.0) {\\n            continue;\\n          }\\n          int idyR = int(dyR);\\n\\n          for (int wC = 0; wC < \"+u+\";\\n            wC+= \"+i+\") {\\n            float dyC = float(dyCCorner + wC) / \"+o+\".0;\\n\\n            if (dyC < 0.0 || dyC >= \"+t.outWidth+\".0 ||\\n                fract(dyC) > 0.0) {\\n              continue;\\n            }\\n            int idyC = int(dyC);\\n\\n            float dyValue = getDy(b, idyR, idyC, d);\\n\\n            dotProd += dyValue * avgMultiplier;\\n          }\\n        }\\n        setOutput(dotProd);\\n      }\\n    \"},di=function(t){this.variableNames=[\"dy\"],this.outputShape=t.inShape;var e=t.filterDepth,n=t.filterHeight,r=t.filterWidth,o=t.strideDepth,a=t.strideHeight,i=t.strideWidth,s=t.dilationDepth,u=t.dilationHeight,c=t.dilationWidth,l=t.effectiveFilterDepth,h=t.effectiveFilterHeight,f=t.effectiveFilterWidth,d=l-1-t.padInfo.front,p=h-1-t.padInfo.top,v=f-1-t.padInfo.left,g=1/(e*n*r);this.userCode=\"\\n      const ivec3 pads = ivec3(\"+d+\", \"+p+\", \"+v+\");\\n      const float avgMultiplier = float(\"+g+\");\\n\\n      void main() {\\n        ivec5 coords = getOutputCoords();\\n        int batch = coords.x;\\n        int ch = coords.u;\\n\\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\\n        int dyDCorner = dyCorner.x;\\n        int dyRCorner = dyCorner.y;\\n        int dyCCorner = dyCorner.z;\\n\\n        // Convolve dy(?, ?, ?, d) with pos mask(:, :, :, ch) to get\\n        // dx(xD, xR, xC, ch).\\n        // ? = to be determined. : = across all values in that axis.\\n        float dotProd = 0.0;\\n\\n        for (int wD = 0; wD < \"+l+\";\\n            wD += \"+s+\") {\\n          float dyD = float(dyDCorner + wD) / \"+o+\".0;\\n\\n          if (dyD < 0.0 || dyD >= \"+t.outDepth+\".0 || fract(dyD) > 0.0) {\\n            continue;\\n          }\\n          int idyD = int(dyD);\\n\\n          for (int wR = 0; wR < \"+h+\";\\n              wR += \"+u+\") {\\n            float dyR = float(dyRCorner + wR) / \"+a+\".0;\\n\\n            if (dyR < 0.0 || dyR >= \"+t.outHeight+\".0 ||\\n                fract(dyR) > 0.0) {\\n              continue;\\n            }\\n            int idyR = int(dyR);\\n\\n            for (int wC = 0; wC < \"+f+\";\\n                wC += \"+c+\") {\\n              float dyC = float(dyCCorner + wC) / \"+i+\".0;\\n\\n              if (dyC < 0.0 || dyC >= \"+t.outWidth+\".0 ||\\n                  fract(dyC) > 0.0) {\\n                continue;\\n              }\\n              int idyC = int(dyC);\\n\\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\\n\\n              dotProd += dyValue * avgMultiplier;\\n            }\\n          }\\n        }\\n        setOutput(dotProd);\\n      }\\n    \"},pi=function(t,e,n,r,o,a){this.outputShape=[],this.variableNames=[\"x\",\"mean\",\"variance\"],Pr(t,e),Pr(t,n);var i=\"0.0\";null!=r&&(Pr(t,r),this.variableNames.push(\"offset\"),i=\"getOffsetAtOutCoords()\");var s=\"1.0\";null!=o&&(Pr(t,o),this.variableNames.push(\"scale\"),s=\"getScaleAtOutCoords()\"),this.outputShape=t,this.userCode=\"\\n      void main() {\\n        float x = getXAtOutCoords();\\n        float mean = getMeanAtOutCoords();\\n        float variance = getVarianceAtOutCoords();\\n        float offset = \"+i+\";\\n        float scale = \"+s+\";\\n        float inv = scale * inversesqrt(variance + float(\"+a+\"));\\n        setOutput(dot(vec3(x, -mean, offset), vec3(inv, inv, 1)));\\n      }\\n    \"},vi=function(t,e,n,r,o,a){this.packedInputs=!0,this.packedOutput=!0,this.variableNames=[\"x\",\"mean\",\"variance\"],Pr(t,e),Pr(t,n);var i=\"vec4(0.0)\";null!=r&&(Pr(t,r),this.variableNames.push(\"offset\"),i=\"getOffsetAtOutCoords()\");var s=\"vec4(1.0)\";null!=o&&(Pr(t,o),this.variableNames.push(\"scale\"),s=\"getScaleAtOutCoords()\"),this.outputShape=t,this.userCode=\"\\n      void main() {\\n        vec4 offset = \"+i+\";\\n        vec4 scale = \"+s+\";\\n\\n        vec4 x = getXAtOutCoords();\\n        vec4 mean = getMeanAtOutCoords();\\n        vec4 variance = getVarianceAtOutCoords();\\n\\n        vec4 inv = scale * inversesqrt(variance + vec4(\"+a+\"));\\n\\n        setOutput((x - mean) * inv + offset);\\n      }\\n    \"},gi=\"return areal * breal - aimag * bimag;\",mi=\"return areal * bimag + aimag * breal;\",yi=function(t,e,n){this.variableNames=[\"AReal\",\"AImag\",\"BReal\",\"BImag\"],this.outputShape=Pr(e,n),this.userCode=\"\\n      float binaryOpComplex(\\n          float areal, float aimag, float breal, float bimag) {\\n        \"+t+\"\\n      }\\n\\n      void main() {\\n        float areal = getARealAtOutCoords();\\n        float aimag = getAImagAtOutCoords();\\n        float breal = getBRealAtOutCoords();\\n        float bimag = getBImagAtOutCoords();\\n        setOutput(binaryOpComplex(areal, aimag, breal, bimag));\\n      }\\n    \"},xi=\"return a + b;\",bi=\"return a - b;\",wi=\"return a * b;\",Ci=\"\\nif (a == b) {\\n  return 1.0;\\n};\\nreturn a / b;\",Ei=\"return (a < 0.) ? b * a : a;\",Ri=function(t,e,n){this.variableNames=[\"A\",\"B\"],this.outputShape=Pr(e,n),this.userCode=\"\\n      float binaryOperation(float a, float b) {\\n        \"+t+\"\\n      }\\n\\n      void main() {\\n        float a = getAAtOutCoords();\\n        float b = getBAtOutCoords();\\n        setOutput(binaryOperation(a, b));\\n      }\\n    \"},Ii=\"\\n  // vec4 one = vec4(equal(a, b));\\n  // return one + (vec4(1.0) - one) * a / b;\\n  vec4 result = a / b;\\n  if(a.x == b.x) {\\n    result.x = 1.;\\n  }\\n  if(a.y == b.y) {\\n    result.y = 1.;\\n  }\\n  if(a.z == b.z) {\\n    result.z = 1.;\\n  }\\n  if(a.w == b.w) {\\n    result.w = 1.;\\n  }\\n\\n  return result;\\n\",ki=\"\\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\\n\",Si=function(t,e,n,r){void 0===r&&(r=!1),this.variableNames=[\"A\",\"B\"],this.supportsBroadcasting=!0,this.packedInputs=!0,this.packedOutput=!0,this.outputShape=Pr(e,n);var o=this.outputShape.length,a=\"\";if(r)if(0===o||1===k(this.outputShape))a=\"\\n          result.y = 0.;\\n          result.z = 0.;\\n          result.w = 0.;\\n        \";else if(a=\"\\n          \"+ui(o)+\" coords = getOutputCoords();\\n        \",1===o)a+=\"\\n            result.y = (coords + 1) >= \"+this.outputShape[0]+\" ? 0. : result.y;\\n            result.z = 0.;\\n            result.w = 0.;\\n          \";else{var i=Xa(\"coords\",o);a+=\"\\n            bool nextRowOutOfBounds =\\n              (\"+i[o-2]+\" + 1) >= \"+this.outputShape[o-2]+\";\\n            bool nextColOutOfBounds =\\n              (\"+i[o-1]+\" + 1) >= \"+this.outputShape[o-1]+\";\\n            result.y = nextColOutOfBounds ? 0. : result.y;\\n            result.z = nextRowOutOfBounds ? 0. : result.z;\\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\\n          \"}this.userCode=\"\\n      vec4 binaryOperation(vec4 a, vec4 b) {\\n        \"+t+\"\\n      }\\n\\n      void main() {\\n        vec4 a = getAAtOutCoords();\\n        vec4 b = getBAtOutCoords();\\n\\n        vec4 result = binaryOperation(a, b);\\n        \"+a+\"\\n\\n        setOutput(result);\\n      }\\n    \"},Ai=function(){function t(t){this.variableNames=[\"A\"],this.outputShape=t,this.userCode=\"\\n      uniform float minVal;\\n      uniform float maxVal;\\n\\n      void main() {\\n        float value = getAAtOutCoords();\\n        if (isnan(value)) {\\n          setOutput(value);\\n          return;\\n        }\\n\\n        setOutput(clamp(value, minVal, maxVal));\\n      }\\n    \"}return t.prototype.getCustomSetupFunc=function(t,e){var n=this;return function(r,o){null==n.minLoc&&(n.minLoc=r.getUniformLocationNoThrow(o,\"minVal\"),n.maxLoc=r.getUniformLocationNoThrow(o,\"maxVal\")),r.gl.uniform1f(n.minLoc,t),r.gl.uniform1f(n.maxLoc,e)}},t}(),Ti=function(){function t(t){this.variableNames=[\"A\"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t,this.userCode=\"\\n      uniform float minVal;\\n      uniform float maxVal;\\n\\n      void main() {\\n        vec4 value = getAAtOutCoords();\\n\\n        if (any(isnan(value))) {\\n          setOutput(value);\\n          return;\\n        }\\n\\n        setOutput(clamp(value, vec4(minVal), vec4(maxVal)));\\n      }\\n    \"}return t.prototype.getCustomSetupFunc=function(t,e){var n=this;return function(r,o){null==n.minLoc&&(n.minLoc=r.getUniformLocationNoThrow(o,\"minVal\"),n.maxLoc=r.getUniformLocationNoThrow(o,\"maxVal\")),r.gl.uniform1f(n.minLoc,t),r.gl.uniform1f(n.maxLoc,e)}},t}(),Di=function(t){this.variableNames=[\"real\",\"imag\"],this.outputShape=t,this.userCode=\"\\n      void main() {\\n        float re = abs(getRealAtOutCoords());\\n        float im = abs(getImagAtOutCoords());\\n        float mx = max(re, im);\\n\\n        // sadly the length function in glsl is not underflow-safe\\n        // (at least not on Intel GPUs). So the safe solution is\\n        // to ensure underflow-safety in all cases.\\n        setOutput(\\n          mx == 0.0 ? 0.0 : mx * length(vec2(1, min(re, im)/mx))\\n        );\\n      }\\n    \"},Ni=function(t){this.outputShape=[],this.outputShape=Sn(t,1),this.variableNames=t.map((function(t,e){return\"T\"+e}));var e=new Array(t.length-1);e[0]=t[0][1];for(var n=1;n<e.length;n++)e[n]=e[n-1]+t[n][1];var r=[\"if (yC < \"+e[0]+\") setOutput(getT0(yR, yC));\"];for(n=1;n<e.length;n++){var o=e[n-1];r.push(\"else if (yC < \"+e[n]+\") setOutput(getT\"+n+\"(yR, yC-\"+o+\"));\")}var a=e.length,i=e[e.length-1];r.push(\"else setOutput(getT\"+a+\"(yR, yC-\"+i+\"));\"),this.userCode=\"\\n      void main() {\\n        ivec2 coords = getOutputCoords();\\n        int yR = coords.x;\\n        int yC = coords.y;\\n\\n        \"+r.join(\"\\n        \")+\"\\n      }\\n    \"},Fi=function(t,e){this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[],this.outputShape=Sn(t,e);var n=this.outputShape,r=n.length,o=ui(r),a=Xa(\"coords\",r),i=[\"x\",\"y\",\"z\",\"w\",\"u\",\"v\"].slice(0,r);this.variableNames=t.map((function(t,e){return\"T\"+e}));var s=new Array(t.length-1);s[0]=t[0][e];for(var u=1;u<s.length;u++)s[u]=s[u-1]+t[u][e];var c=i[e],l=i.slice(-2),h=i.join(),f=\"if (\"+c+\" < \"+s[0]+\") {\\n        return getChannel(\\n            getT0(\"+h+\"), vec2(\"+l.join()+\"));\\n        }\";for(u=1;u<s.length;u++){var d=s[u-1];f+=\"\\n        if (\"+c+\" < \"+s[u]+\"  && \"+c+\" >= \"+s[u-1]+\") {\\n          return getChannel(\\n            getT\"+u+\"(\"+_i(i,c,d)+\"),\\n            vec2(\"+_i(l,c,d)+\"));\\n        }\"}var p=s.length,v=s[s.length-1];f+=\"\\n        return getChannel(\\n          getT\"+p+\"(\"+_i(i,c,v)+\"),\\n          vec2(\"+_i(l,c,v)+\"));\",this.userCode=\"\\n      float getValue(\"+i.map((function(t){return\"int \"+t}))+\") {\\n        \"+f+\"\\n      }\\n\\n      void main() {\\n        \"+o+\" coords = getOutputCoords();\\n        vec4 result = vec4(getValue(\"+a+\"), 0., 0., 0.);\\n\\n        \"+a[r-1]+\" = \"+a[r-1]+\" + 1;\\n        if (\"+a[r-1]+\" < \"+n[r-1]+\") {\\n          result.g = getValue(\"+a+\");\\n        }\\n\\n        \"+a[r-2]+\" = \"+a[r-2]+\" + 1;\\n        if (\"+a[r-2]+\" < \"+n[r-2]+\") {\\n          result.a = getValue(\"+a+\");\\n        }\\n\\n        \"+a[r-1]+\" = \"+a[r-1]+\" - 1;\\n        if (\"+a[r-2]+\" < \"+n[r-2]+\" &&\\n            \"+a[r-1]+\" < \"+n[r-1]+\") {\\n          result.b = getValue(\"+a+\");\\n        }\\n        setOutput(result);\\n      }\\n    \"};function _i(t,e,n){var r=t.indexOf(e);return t.map((function(t,e){return e===r?t+\" - \"+n:t})).join()}var Oi=function(t){this.variableNames=[\"x\",\"dy\"],this.outputShape=t.filterShape;var e=t.strideHeight,n=t.strideWidth,r=t.padInfo.top,o=t.padInfo.left,a=\"channelsLast\"===t.dataFormat;this.userCode=\"\\n      void main() {\\n        ivec4 coords = getOutputCoords();\\n        int wR = coords.x;\\n        int wC = coords.y;\\n        int d1 = coords.z;\\n        int d2 = coords.w;\\n\\n        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).\\n        // ? = to be determined. : = across all values in that axis.\\n        float dotProd = 0.0;\\n\\n        for (int b = 0; b < \"+t.batchSize+\"; b++) {\\n          for (int yR = 0; yR < \"+t.outHeight+\"; yR++) {\\n            int xR = wR + yR * \"+e+\" - \"+r+\";\\n\\n            if (xR < 0 || xR >= \"+t.inHeight+\") {\\n              continue;\\n            }\\n\\n            for (int yC = 0; yC < \"+t.outWidth+\"; yC++) {\\n              int xC = wC + yC * \"+n+\" - \"+o+\";\\n\\n              if (xC < 0 || xC >= \"+t.inWidth+\") {\\n                continue;\\n              }\\n\\n              if (\"+a+\") {\\n                float dyValue = getDy(b, yR, yC, d2);\\n                float xValue = getX(b, xR, xC, d1);\\n                dotProd += (xValue * dyValue);\\n              } else {\\n                float dyValue = getDy(b, d2, yR, yC);\\n                float xValue = getX(b, d1, xR, xC);\\n                dotProd += (xValue * dyValue);\\n              }\\n\\n            }\\n          }\\n        }\\n        setOutput(dotProd);\\n      }\\n    \"},Mi=function(t){this.variableNames=[\"dy\",\"W\"],this.outputShape=t.inShape;var e=t.filterHeight,n=t.filterWidth,r=t.strideHeight,o=t.strideWidth,a=\"channelsLast\"===t.dataFormat,i=e-1-t.padInfo.top,s=n-1-t.padInfo.left,u=a?1:2,c=a?2:3,l=a?3:1;this.userCode=\"\\n      const ivec2 pads = ivec2(\"+i+\", \"+s+\");\\n\\n      void main() {\\n        ivec4 coords = getOutputCoords();\\n        int batch = coords[0];\\n        int d1 = coords[\"+l+\"];\\n\\n        ivec2 dyCorner = ivec2(coords[\"+u+\"], coords[\"+c+\"]) - pads;\\n        int dyRCorner = dyCorner.x;\\n        int dyCCorner = dyCorner.y;\\n\\n        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\\n        // ? = to be determined. : = across all values in that axis.\\n        float dotProd = 0.0;\\n        for (int wR = 0; wR < \"+e+\"; wR++) {\\n          float dyR = float(dyRCorner + wR) / \"+r+\".0;\\n\\n          if (dyR < 0.0 || dyR >= \"+t.outHeight+\".0 || fract(dyR) > 0.0) {\\n            continue;\\n          }\\n          int idyR = int(dyR);\\n\\n          int wRPerm = \"+e+\" - 1 - wR;\\n\\n          for (int wC = 0; wC < \"+n+\"; wC++) {\\n            float dyC = float(dyCCorner + wC) / \"+o+\".0;\\n\\n            if (dyC < 0.0 || dyC >= \"+t.outWidth+\".0 ||\\n                fract(dyC) > 0.0) {\\n              continue;\\n            }\\n            int idyC = int(dyC);\\n\\n            int wCPerm = \"+n+\" - 1 - wC;\\n\\n            for (int d2 = 0; d2 < \"+t.outChannels+\"; d2++) {\\n\\n              if (\"+a+\") {\\n                float xValue = getDy(batch, idyR, idyC, d2);\\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\\n                dotProd += xValue * wValue;\\n              } else {\\n                float xValue = getDy(batch, d2, idyR, idyC);\\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\\n                dotProd += xValue * wValue;\\n              }\\n\\n            }\\n          }\\n        }\\n        setOutput(dotProd);\\n      }\\n    \"},Bi=function(t){this.variableNames=[\"x\",\"dy\"],this.outputShape=t.filterShape;var e=t.strideDepth,n=t.strideHeight,r=t.strideWidth,o=t.padInfo.front,a=t.padInfo.top,i=t.padInfo.left;this.userCode=\"\\n      void main() {\\n        ivec5 coords = getOutputCoords();\\n        int wF = coords.x;\\n        int wR = coords.y;\\n        int wC = coords.z;\\n        int d1 = coords.w;\\n        int d2 = coords.u;\\n\\n        float dotProd = 0.0;\\n\\n        for (int b = 0; b < \"+t.batchSize+\"; b++) {\\n          for (int yF = 0; yF < \"+t.outDepth+\"; yF++) {\\n            int xF = wF + yF * \"+e+\" - \"+o+\";\\n\\n            if (xF < 0 || xF >= \"+t.inDepth+\") {\\n              continue;\\n            }\\n\\n            for (int yR = 0; yR < \"+t.outHeight+\"; yR++) {\\n              int xR = wR + yR * \"+n+\" - \"+a+\";\\n\\n              if (xR < 0 || xR >= \"+t.inHeight+\") {\\n                continue;\\n              }\\n\\n              for (int yC = 0; yC < \"+t.outWidth+\"; yC++) {\\n                int xC = wC + yC * \"+r+\" - \"+i+\";\\n\\n                if (xC < 0 || xC >= \"+t.inWidth+\") {\\n                  continue;\\n                }\\n\\n                float dyValue = getDy(b, yF, yR, yC, d2);\\n                float xValue = getX(b, xF, xR, xC, d1);\\n                dotProd += (xValue * dyValue);\\n              }\\n            }\\n          }\\n        }\\n        setOutput(dotProd);\\n      }\\n    \"},Pi=function(t){this.variableNames=[\"dy\",\"W\"],this.outputShape=t.inShape;var e=t.filterDepth,n=t.filterHeight,r=t.filterWidth,o=t.strideDepth,a=t.strideHeight,i=t.strideWidth,s=e-1-t.padInfo.front,u=n-1-t.padInfo.top,c=r-1-t.padInfo.left;this.userCode=\"\\n      const ivec3 pads = ivec3(\"+s+\", \"+u+\", \"+c+\");\\n\\n      void main() {\\n        ivec5 coords = getOutputCoords();\\n        int batch = coords.x;\\n        int d1 = coords.u;\\n\\n\\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\\n        int dyFCorner = dyCorner.x;\\n        int dyRCorner = dyCorner.y;\\n        int dyCCorner = dyCorner.z;\\n\\n        float dotProd = 0.0;\\n        for (int wF = 0; wF < \"+e+\"; wF++) {\\n          float dyF = float(dyFCorner + wF) / \"+o+\".0;\\n\\n          if (dyF < 0.0 || dyF >= \"+t.outDepth+\".0 || fract(dyF) > 0.0) {\\n            continue;\\n          }\\n          int idyF = int(dyF);\\n\\n          int wFPerm = \"+e+\" - 1 - wF;\\n\\n          for (int wR = 0; wR < \"+n+\"; wR++) {\\n            float dyR = float(dyRCorner + wR) / \"+a+\".0;\\n\\n            if (dyR < 0.0 || dyR >= \"+t.outHeight+\".0 ||\\n              fract(dyR) > 0.0) {\\n              continue;\\n            }\\n            int idyR = int(dyR);\\n\\n            int wRPerm = \"+n+\" - 1 - wR;\\n\\n            for (int wC = 0; wC < \"+r+\"; wC++) {\\n              float dyC = float(dyCCorner + wC) / \"+i+\".0;\\n\\n              if (dyC < 0.0 || dyC >= \"+t.outWidth+\".0 ||\\n                  fract(dyC) > 0.0) {\\n                continue;\\n              }\\n              int idyC = int(dyC);\\n\\n              int wCPerm = \"+r+\" - 1 - wC;\\n\\n              for (int d2 = 0; d2 < \"+t.outChannels+\"; d2++) {\\n                float xValue = getDy(batch, idyF, idyR, idyC, d2);\\n                float wValue = getW(wFPerm, wRPerm, wCPerm, d1, d2);\\n                dotProd += xValue * wValue;\\n              }\\n            }\\n          }\\n        }\\n        setOutput(dotProd);\\n      }\\n    \"},Li=function(t){this.variableNames=[\"x\",\"dy\"],this.outputShape=t.filterShape;var e=t.strideHeight,n=t.strideWidth,r=t.padInfo.top,o=t.padInfo.left,a=t.outChannels/t.inChannels;this.userCode=\"\\n      void main() {\\n        ivec4 coords = getOutputCoords();\\n        int wR = coords.x;\\n        int wC = coords.y;\\n        int d1 = coords.z;\\n        int dm = coords.w;\\n        int d2 = d1 * \"+a+\" + dm;\\n\\n        float dotProd = 0.0;\\n\\n        // TO DO: Vec4 over the batch size\\n        for (int b = 0; b < \"+t.batchSize+\"; b++) {\\n          for (int yR = 0; yR < \"+t.outHeight+\"; yR++) {\\n            int xR = wR + yR * \"+e+\" - \"+r+\";\\n\\n            if (xR < 0 || xR >= \"+t.inHeight+\") {\\n              continue;\\n            }\\n\\n            for (int yC = 0; yC < \"+t.outWidth+\"; yC++) {\\n              int xC = wC + yC * \"+n+\" - \"+o+\";\\n\\n              if (xC < 0 || xC >= \"+t.inWidth+\") {\\n                continue;\\n              }\\n\\n              float dyValue = getDy(b, yR, yC, d2);\\n              float xValue = getX(b, xR, xC, d1);\\n              dotProd += (xValue * dyValue);\\n            }\\n          }\\n        }\\n        setOutput(dotProd);\\n      }\\n    \"},Wi=function(t){this.variableNames=[\"dy\",\"W\"],this.outputShape=t.inShape;var e=t.filterHeight,n=t.filterWidth,r=t.strideHeight,o=t.strideWidth,a=e-1-t.padInfo.top,i=n-1-t.padInfo.left,s=t.outChannels/t.inChannels;this.userCode=\"\\n      const ivec2 pads = ivec2(\"+a+\", \"+i+\");\\n\\n      void main() {\\n        ivec4 coords = getOutputCoords();\\n        int batch = coords[0];\\n        int d1 = coords[3];\\n        ivec2 dyCorner = coords.yz - pads;\\n        int dyRCorner = dyCorner.x;\\n        int dyCCorner = dyCorner.y;\\n\\n        float dotProd = 0.0;\\n\\n        for (int wR = 0; wR < \"+e+\"; wR++) {\\n          float dyR = float(dyRCorner + wR) / \"+r+\".0;\\n\\n          if (dyR < 0.0 || dyR >= \"+t.outHeight+\".0 || fract(dyR) > 0.0) {\\n            continue;\\n          }\\n          int idyR = int(dyR);\\n\\n          int wRPerm = \"+e+\" - 1 - wR;\\n\\n          for (int wC = 0; wC < \"+n+\"; wC++) {\\n            float dyC = float(dyCCorner + wC) / \"+o+\".0;\\n\\n            if (dyC < 0.0 || dyC >= \"+t.outWidth+\".0 ||\\n                fract(dyC) > 0.0) {\\n              continue;\\n            }\\n            int idyC = int(dyC);\\n\\n            int wCPerm = \"+n+\" - 1 - wC;\\n\\n            // TO DO: Vec4 over the channelMul\\n            for (int dm = 0; dm < \"+s+\"; dm++) {\\n              int d2 = d1 * \"+s+\" + dm;\\n              float xValue = getDy(batch, idyR, idyC, d2);\\n              float wValue = getW(wRPerm, wCPerm, d1, dm);\\n              dotProd += xValue * wValue;\\n            }\\n          }\\n        }\\n        setOutput(dotProd);\\n      }\\n    \"},Ui=function(t,e,n,r){void 0===e&&(e=!1),void 0===n&&(n=null),void 0===r&&(r=!1),this.variableNames=[\"x\",\"W\"],this.outputShape=t.outShape;var o=t.padInfo.top,a=t.padInfo.left,i=t.strideHeight,s=t.strideWidth,u=t.dilationHeight,c=t.dilationWidth,l=t.filterHeight,h=t.filterWidth,f=4*Math.floor(t.inChannels/4),d=t.inChannels%4,p=\"channelsLast\"===t.dataFormat,v=p?1:2,g=p?2:3,m=p?3:1,y=\"\",x=\"\";n&&(y=r?\"float activation(float a) {\\n          float b = getPreluActivationWeightsAtOutCoords();\\n          \"+n+\"\\n        }\":\"\\n          float activation(float x) {\\n            \"+n+\"\\n          }\\n        \",x=\"result = activation(result);\");var b=e?\"result += getBiasAtOutCoords();\":\"\";e&&this.variableNames.push(\"bias\"),r&&this.variableNames.push(\"preluActivationWeights\"),this.userCode=\"\\n      \"+y+\"\\n\\n      const ivec2 strides = ivec2(\"+i+\", \"+s+\");\\n      const ivec2 pads = ivec2(\"+o+\", \"+a+\");\\n\\n      void main() {\\n        ivec4 coords = getOutputCoords();\\n        int batch = coords[0];\\n        int d2 = coords[\"+m+\"];\\n\\n        ivec2 xRCCorner =\\n            ivec2(coords[\"+v+\"], coords[\"+g+\"]) * strides - pads;\\n        int xRCorner = xRCCorner.x;\\n        int xCCorner = xRCCorner.y;\\n\\n        // Convolve x(?, ?, d1) with w(:, :, d1, d2) to get y(yR, yC, d2).\\n        // ? = to be determined. : = across all values in that axis.\\n        float dotProd = 0.0;\\n        for (int wR = 0; wR < \"+l+\"; wR++) {\\n          int xR = xRCorner + wR * \"+u+\";\\n\\n          if (xR < 0 || xR >= \"+t.inHeight+\") {\\n            continue;\\n          }\\n\\n          for (int wC = 0; wC < \"+h+\"; wC++) {\\n            int xC = xCCorner + wC * \"+c+\";\\n\\n            if (xC < 0 || xC >= \"+t.inWidth+\") {\\n              continue;\\n            }\\n\\n            for (int d1 = 0; d1 < \"+f+\"; d1 += 4) {\\n              vec4 wValues = vec4(\\n                getW(wR, wC, d1, d2),\\n                getW(wR, wC, d1 + 1, d2),\\n                getW(wR, wC, d1 + 2, d2),\\n                getW(wR, wC, d1 + 3, d2)\\n              );\\n\\n              if (\"+p+\") {\\n                vec4 xValues = vec4(\\n                  getX(batch, xR, xC, d1),\\n                  getX(batch, xR, xC, d1 + 1),\\n                  getX(batch, xR, xC, d1 + 2),\\n                  getX(batch, xR, xC, d1 + 3)\\n                );\\n                dotProd += dot(xValues, wValues);\\n              } else {\\n                vec4 xValues = vec4(\\n                  getX(batch, d1, xR, xC),\\n                  getX(batch, d1 + 1, xR, xC),\\n                  getX(batch, d1 + 2, xR, xC),\\n                  getX(batch, d1 + 3, xR, xC)\\n                );\\n                dotProd += dot(xValues, wValues);\\n              }\\n            }\\n\\n            if (\"+(1===d)+\") {\\n\\n              if (\"+p+\") {\\n                dotProd +=\\n                    getX(batch, xR, xC, \"+f+\") *\\n                    getW(wR, wC, \"+f+\", d2);\\n              } else {\\n                dotProd +=\\n                    getX(batch, \"+f+\", xR, xC) *\\n                    getW(wR, wC, \"+f+\", d2);\\n              }\\n\\n            } else if (\"+(2===d)+\") {\\n              vec2 wValues = vec2(\\n                getW(wR, wC, \"+f+\", d2),\\n                getW(wR, wC, \"+f+\" + 1, d2)\\n              );\\n\\n              if (\"+p+\") {\\n                vec2 xValues = vec2(\\n                  getX(batch, xR, xC, \"+f+\"),\\n                  getX(batch, xR, xC, \"+f+\" + 1)\\n                );\\n                dotProd += dot(xValues, wValues);\\n              } else {\\n                vec2 xValues = vec2(\\n                  getX(batch, \"+f+\", xR, xC),\\n                  getX(batch, \"+f+\" + 1, xR, xC)\\n                );\\n                dotProd += dot(xValues, wValues);\\n              }\\n\\n            } else if (\"+(3===d)+\") {\\n              vec3 wValues = vec3(\\n                getW(wR, wC, \"+f+\", d2),\\n                getW(wR, wC, \"+f+\" + 1, d2),\\n                getW(wR, wC, \"+f+\" + 2, d2)\\n              );\\n\\n              if (\"+p+\") {\\n                vec3 xValues = vec3(\\n                  getX(batch, xR, xC, \"+f+\"),\\n                  getX(batch, xR, xC, \"+f+\" + 1),\\n                  getX(batch, xR, xC, \"+f+\" + 2)\\n                );\\n                dotProd += dot(xValues, wValues);\\n              } else {\\n                vec3 xValues = vec3(\\n                  getX(batch, \"+f+\", xR, xC),\\n                  getX(batch, \"+f+\" + 1, xR, xC),\\n                  getX(batch, \"+f+\" + 2, xR, xC)\\n                );\\n                dotProd += dot(xValues, wValues);\\n              }\\n\\n            }\\n          }\\n        }\\n\\n        float result = dotProd;\\n        \"+b+\"\\n        \"+x+\"\\n        setOutput(result);\\n      }\\n    \"},Vi=function(t){this.variableNames=[\"x\",\"W\"],this.outputShape=t.outShape;var e=t.padInfo.front,n=t.padInfo.top,r=t.padInfo.left,o=t.strideDepth,a=t.strideHeight,i=t.strideWidth,s=t.dilationDepth,u=t.dilationHeight,c=t.dilationWidth,l=t.filterDepth,h=t.filterHeight,f=t.filterWidth,d=4*Math.floor(t.inChannels/4),p=t.inChannels%4;this.userCode=\"\\n      const ivec3 strides = ivec3(\"+o+\", \"+a+\", \"+i+\");\\n      const ivec3 pads = ivec3(\"+e+\", \"+n+\", \"+r+\");\\n\\n      void main() {\\n        ivec5 coords = getOutputCoords();\\n        int batch = coords.x;\\n        int d2 = coords.u;\\n\\n        ivec3 xFRCCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\\n        int xFCorner = xFRCCorner.x;\\n        int xRCorner = xFRCCorner.y;\\n        int xCCorner = xFRCCorner.z;\\n\\n        // Convolve x(?, ?, ?, d1) with w(:, :, :, d1, d2) to get\\n        // y(yF, yR, yC, d2). ? = to be determined. : = across all\\n        // values in that axis.\\n        float dotProd = 0.0;\\n        for (int wF = 0; wF < \"+l+\"; wF++) {\\n          int xF = xFCorner + wF * \"+s+\";\\n\\n          if (xF < 0 || xF >= \"+t.inDepth+\") {\\n            continue;\\n          }\\n\\n          for (int wR = 0; wR < \"+h+\"; wR++) {\\n            int xR = xRCorner + wR * \"+u+\";\\n\\n            if (xR < 0 || xR >= \"+t.inHeight+\") {\\n              continue;\\n            }\\n\\n            for (int wC = 0; wC < \"+f+\"; wC++) {\\n              int xC = xCCorner + wC * \"+c+\";\\n\\n              if (xC < 0 || xC >= \"+t.inWidth+\") {\\n                continue;\\n              }\\n\\n              for (int d1 = 0; d1 < \"+d+\"; d1 += 4) {\\n                vec4 xValues = vec4(\\n                  getX(batch, xF, xR, xC, d1),\\n                  getX(batch, xF, xR, xC, d1 + 1),\\n                  getX(batch, xF, xR, xC, d1 + 2),\\n                  getX(batch, xF, xR, xC, d1 + 3)\\n                );\\n                vec4 wValues = vec4(\\n                  getW(wF, wR, wC, d1, d2),\\n                  getW(wF, wR, wC, d1 + 1, d2),\\n                  getW(wF, wR, wC, d1 + 2, d2),\\n                  getW(wF, wR, wC, d1 + 3, d2)\\n                );\\n\\n                dotProd += dot(xValues, wValues);\\n              }\\n\\n              if (\"+(1===p)+\") {\\n                dotProd +=\\n                  getX(batch, xF, xR, xC, \"+d+\") *\\n                  getW(wF, wR, wC, \"+d+\", d2);\\n              } else if (\"+(2===p)+\") {\\n                vec2 xValues = vec2(\\n                  getX(batch, xF, xR, xC, \"+d+\"),\\n                  getX(batch, xF, xR, xC, \"+d+\" + 1)\\n                );\\n                vec2 wValues = vec2(\\n                  getW(wF, wR, wC, \"+d+\", d2),\\n                  getW(wF, wR, wC, \"+d+\" + 1, d2)\\n                );\\n                dotProd += dot(xValues, wValues);\\n              } else if (\"+(3===p)+\") {\\n                vec3 xValues = vec3(\\n                  getX(batch, xF, xR, xC, \"+d+\"),\\n                  getX(batch, xF, xR, xC, \"+d+\" + 1),\\n                  getX(batch, xF, xR, xC, \"+d+\" + 2)\\n                );\\n                vec3 wValues = vec3(\\n                  getW(wF, wR, wC, \"+d+\", d2),\\n                  getW(wF, wR, wC, \"+d+\" + 1, d2),\\n                  getW(wF, wR, wC, \"+d+\" + 2, d2)\\n                );\\n                dotProd += dot(xValues, wValues);\\n              }\\n            }\\n          }\\n        }\\n        setOutput(dotProd);\\n      }\\n    \"},zi=function(t,e,n,r){void 0===e&&(e=!1),void 0===n&&(n=null),void 0===r&&(r=!1),this.variableNames=[\"x\",\"W\"],this.outputShape=t.outShape;var o=t.inHeight,a=t.inWidth,i=t.padInfo.top,s=t.padInfo.left,u=t.strideHeight,c=t.strideWidth,l=t.dilationHeight,h=t.dilationWidth,f=t.filterHeight,d=t.filterWidth,p=t.outChannels/t.inChannels,v=\"\",g=\"\";n&&(v=r?\"float activation(float a) {\\n          float b = getPreluActivationWeightsAtOutCoords();\\n          \"+n+\"\\n        }\":\"\\n          float activation(float x) {\\n            \"+n+\"\\n          }\\n        \",g=\"result = activation(result);\");var m=e?\"result += getBiasAtOutCoords();\":\"\";e&&this.variableNames.push(\"bias\"),r&&this.variableNames.push(\"preluActivationWeights\"),this.userCode=\"\\n      \"+v+\"\\n\\n      const ivec2 strides = ivec2(\"+u+\", \"+c+\");\\n      const ivec2 pads = ivec2(\"+i+\", \"+s+\");\\n\\n      void main() {\\n        ivec4 coords = getOutputCoords();\\n        int batch = coords.x;\\n        ivec2 xRCCorner = coords.yz * strides - pads;\\n        int d2 = coords.w;\\n        int d1 = d2 / \"+p+\";\\n        int q = d2 - d1 * \"+p+\";\\n\\n        int xRCorner = xRCCorner.x;\\n        int xCCorner = xRCCorner.y;\\n\\n        // Convolve x(?, ?, d1) with w(:, :, d1, q) to get y(yR, yC, d2).\\n        // ? = to be determined. : = across all values in that axis.\\n        float dotProd = 0.0;\\n        // TO DO(dsmilkov): Flatten the two for loops and vec4 the operations.\\n        for (int wR = 0; wR < \"+f+\"; wR++) {\\n          int xR = xRCorner + wR * \"+l+\";\\n\\n          if (xR < 0 || xR >= \"+o+\") {\\n            continue;\\n          }\\n\\n          for (int wC = 0; wC < \"+d+\"; wC++) {\\n            int xC = xCCorner + wC * \"+h+\";\\n\\n            if (xC < 0 || xC >= \"+a+\") {\\n              continue;\\n            }\\n\\n            float xVal = getX(batch, xR, xC, d1);\\n            float wVal = getW(wR, wC, d1, q);\\n            dotProd += xVal * wVal;\\n          }\\n        }\\n\\n        float result = dotProd;\\n        \"+m+\"\\n        \"+g+\"\\n        setOutput(result);\\n      }\\n    \"},Gi=function(t,e,n,r){void 0===e&&(e=!1),void 0===n&&(n=null),void 0===r&&(r=!1),this.variableNames=[\"x\",\"W\"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t.outShape;for(var o=t.inHeight,a=t.inWidth,i=t.padInfo.top,s=t.padInfo.left,u=t.strideHeight,c=t.strideWidth,l=t.dilationHeight,h=t.dilationWidth,f=t.filterHeight,d=t.filterWidth,p=d,v=\"int xR; int xC; int xCOffset;\",g=0;g<f;g++)for(var m=0;m<d;m++)v+=\"\\n          vec4 xTexelR\"+g+\"C\"+2*m+\" = vec4(0.);\\n          vec4 wR\"+g+\"C\"+m+\" = vec4(0.);\\n          vec4 xR\"+g+\"C\"+m+\" = vec4(0.);\";for(g=0;g<f;g++)for(var y=0;y<p;y++){if(v+=\"\\n          xR = xRCorner + \"+g*l+\";\\n          xC = xCCorner + \"+(m=2*y)*h+\";\\n        \",1===c){if(m<d&&(v+=s%2==1?\"\\n                xCOffset = xC + 1;\\n                if(xR >= 0 && xR < \"+o+\" && xCOffset >= 0 && xCOffset < \"+a+\") {\\n                  xTexelR\"+g+\"C\"+m+\" = getX(batch, xR, xCOffset, d1);\\n\\n                  // Need to manually clear unused channels in case\\n                  // we're reading from recycled texture.\\n                  if(xCOffset + 1 >= \"+a+\") {\\n                    xTexelR\"+g+\"C\"+m+\".zw = vec2(0.);\\n                  }\\n                } else {\\n                  xTexelR\"+g+\"C\"+m+\" = vec4(0.);\\n                }\\n\\n                xCOffset = xC + 1 - 2;\\n                if(xR >= 0 && xR < \"+o+\" && xCOffset >= 0 && xCOffset < \"+a+\") {\\n                  vec4 previous = getX(batch, xR, xCOffset, d1);\\n\\n                  // Need to manually clear unused channels in case\\n                  // we're reading from recycled texture.\\n                  if(xCOffset + 1 >= \"+a+\") {\\n                    previous.zw = vec2(0.);\\n                  }\\n\\n                  xR\"+g+\"C\"+m+\" = vec4(previous.zw, xTexelR\"+g+\"C\"+m+\".xy);\\n                } else {\\n                  xR\"+g+\"C\"+m+\" = vec4(0, 0, xTexelR\"+g+\"C\"+m+\".xy);\\n                }\\n              \":\"\\n                if(xR >= 0 && xR < \"+o+\" && xC >= 0 && xC < \"+a+\") {\\n                  xTexelR\"+g+\"C\"+m+\" = getX(batch, xR, xC, d1);\\n                } else {\\n                  xTexelR\"+g+\"C\"+m+\" = vec4(0.);\\n                }\\n\\n                xR\"+g+\"C\"+m+\" = xTexelR\"+g+\"C\"+m+\";\\n              \",m+1<d)){var x=s%2==0?b(h):h;h%2==0&&s%2==1||h%2!=0&&s%2!=1?(v+=\"\\n                  xCOffset = xC + \"+s%2+\" + \"+x+\";\\n\\n                  if(xR >= 0 && xR < \"+o+\" &&\\n                    xCOffset >= 0 && xCOffset < \"+a+\") {\\n                    xTexelR\"+g+\"C\"+(m+2)+\" = getX(batch, xR, xCOffset, d1);\\n                  }\\n                \",h>1&&(v+=\"\\n                    xCOffset -= 2;\\n                    if(xR >= 0 && xR < \"+o+\" &&\\n                      xCOffset >= 0 && xCOffset < \"+a+\") {\\n                      xTexelR\"+g+\"C\"+m+\" = getX(batch, xR, xCOffset, d1);\\n                    } else {\\n                      xTexelR\"+g+\"C\"+m+\" = vec4(0.);\\n                    }\\n                  \"),v+=\"\\n                  xR\"+g+\"C\"+(m+1)+\" = vec4(\\n                    xTexelR\"+g+\"C\"+m+\".zw, xTexelR\"+g+\"C\"+(m+2)+\".xy);\\n                \"):v+=\"\\n                  xCOffset = xC + \"+x+\";\\n\\n                  if(xR >= 0 && xR < \"+o+\" &&\\n                    xCOffset >= 0 && xCOffset < \"+a+\") {\\n                    xTexelR\"+g+\"C\"+(m+2)+\" = getX(batch, xR, xCOffset, d1);\\n                  }\\n\\n                  xR\"+g+\"C\"+(m+1)+\" = xTexelR\"+g+\"C\"+(m+2)+\";\\n                \"}}else m<d&&(v+=\"\\n              if(xR >= 0 && xR < \"+o+\") {\\n            \",s%2==1?(v+=\"\\n                xCOffset = xC + 1 - \"+c+\";\\n                if(xCOffset >= 0 && xCOffset < \"+a+\") {\\n                  xTexelR\"+g+\"C\"+m+\" = getX(batch, xR, xCOffset, d1);\\n                } else {\\n                  xTexelR\"+g+\"C\"+m+\" = vec4(0.);\\n                }\\n\\n                if(xC + 1 >= 0 && xC + 1 < \"+a+\") {\\n                  xTexelR\"+g+\"C\"+(m+2)+\" = getX(batch, xR, xC + 1, d1);\\n                } else {\\n                  xTexelR\"+g+\"C\"+(m+2)+\" = vec4(0.);\\n                }\\n\\n                xR\"+g+\"C\"+m+\" = vec4(\\n                  xTexelR\"+g+\"C\"+m+\".zw, xTexelR\"+g+\"C\"+(m+2)+\".zw);\\n              \",m+1<d&&(v+=\"\\n                  vec4 final = vec4(0.);\\n                  xCOffset = xC + 1 + \"+c+\";\\n                  if(xCOffset >= 0 && xCOffset < \"+a+\") {\\n                    final = getX(batch, xR, xCOffset, d1);\\n                  }\\n                  xR\"+g+\"C\"+(m+1)+\" = vec4(xTexelR\"+g+\"C\"+(m+2)+\".xy, final.xy);\\n                \")):(v+=\"\\n                if(xC >= 0 && xC < \"+a+\") {\\n                  xTexelR\"+g+\"C\"+m+\" = getX(batch, xR, xC, d1);\\n                } else {\\n                  xTexelR\"+g+\"C\"+m+\" = vec4(0.);\\n                }\\n\\n                xCOffset = xC + \"+c+\";\\n                if(xCOffset >= 0 && xCOffset < \"+a+\") {\\n                  xTexelR\"+g+\"C\"+(m+2)+\" = getX(batch, xR, xCOffset, d1);\\n                } else {\\n                  xTexelR\"+g+\"C\"+(m+2)+\" = vec4(0.);\\n                }\\n\\n                xR\"+g+\"C\"+m+\" = vec4(\\n                  xTexelR\"+g+\"C\"+m+\".xy, xTexelR\"+g+\"C\"+(m+2)+\".xy);\\n              \",m+1<d&&(v+=\"\\n                  xR\"+g+\"C\"+(m+1)+\" = vec4(\\n                    xTexelR\"+g+\"C\"+m+\".zw, xTexelR\"+g+\"C\"+(m+2)+\".zw);\\n                \")),v+=\"}\");m<d&&(v+=\"\\n            vec4 wTexelR\"+g+\"C\"+m+\" = getW(\"+g+\", \"+m+\", d1, q);\\n            wR\"+g+\"C\"+m+\" = vec4(wTexelR\"+g+\"C\"+m+\".xz, wTexelR\"+g+\"C\"+m+\".xz);\\n          \",m+1<d&&(v+=\"\\n              vec4 wTexelR\"+g+\"C\"+(m+1)+\" = getW(\"+g+\", \"+(m+1)+\", d1, q);\\n              wR\"+g+\"C\"+(m+1)+\" =\\n                vec4(wTexelR\"+g+\"C\"+(m+1)+\".xz, wTexelR\"+g+\"C\"+(m+1)+\".xz);\"))}for(g=0;g<f;g++)for(m=0;m<d;m++)v+=\"dotProd += xR\"+g+\"C\"+m+\" * wR\"+g+\"C\"+m+\";\";var w=\"\",C=\"\";n&&(w=r?\"vec4 activation(vec4 a) {\\n          vec4 b = getPreluActivationWeightsAtOutCoords();\\n          \"+n+\"\\n        }\":\"vec4 activation(vec4 x) {\\n          \"+n+\"\\n        }\",C=\"result = activation(result);\");var E=e?\"result += getBiasAtOutCoords();\":\"\";e&&this.variableNames.push(\"bias\"),r&&this.variableNames.push(\"preluActivationWeights\"),this.userCode=\"\\n      \"+w+\"\\n\\n      const ivec2 strides = ivec2(\"+u+\", \"+c+\");\\n      const ivec2 pads = ivec2(\"+i+\", \"+s+\");\\n\\n      void main() {\\n\\n        ivec4 coords = getOutputCoords();\\n        int batch = coords.x;\\n        ivec2 xRCCorner = coords.yz * strides - pads;\\n        int d2 = coords.w;\\n        int d1 = d2;\\n        int q = 0;\\n        int xRCorner = xRCCorner.x;\\n        int xCCorner = xRCCorner.y;\\n\\n        vec4 dotProd = vec4(0.);\\n\\n        \"+v+\"\\n\\n        vec4 result = dotProd;\\n        \"+E+\"\\n        \"+C+\"\\n        setOutput(result);\\n      }\\n    \"},Hi=function(t,e,n,r,o){this.variableNames=[\"Image\",\"Boxes\",\"BoxInd\"],this.outputShape=[];var a=t[0],i=t[1],s=t[2],u=t[3],c=e[0],l=n[0],h=n[1];this.outputShape=[c,l,h,u];var f=\"bilinear\"===r?1:0,d=[i-1+\".0\",s-1+\".0\"],p=d[0],v=d[1],g=l>1?[\"\"+(i-1)/(l-1),\"(y2-y1) * height_ratio\",\"y1*\"+p+\" + float(y)*(height_scale)\"]:[\"0.0\",\"0.0\",\"0.5 * (y1+y2) * \"+p],m=g[0],y=g[1],x=g[2],b=h>1?[\"\"+(s-1)/(h-1),\"(x2-x1) * width_ratio\",\"x1*\"+v+\" + float(x)*(width_scale)\"]:[\"0.0\",\"0.0\",\"0.5 * (x1+x2) * \"+v],w=b[0],C=b[1],E=b[2];this.userCode=\"\\n      const float height_ratio = float(\"+m+\");\\n      const float width_ratio = float(\"+w+\");\\n      void main() {\\n        ivec4 coords = getOutputCoords();\\n        int b = coords[0];\\n        int y = coords[1];\\n        int x = coords[2];\\n        int d = coords[3];\\n\\n        // get box vals\\n        float y1 = getBoxes(b,0);\\n        float x1 = getBoxes(b,1);\\n        float y2 = getBoxes(b,2);\\n        float x2 = getBoxes(b,3);\\n\\n        // get image in batch index\\n        int bInd = round(getBoxInd(b));\\n        if(bInd < 0 || bInd >= \"+a+\") {\\n          return;\\n        }\\n\\n        float height_scale = \"+y+\";\\n        float width_scale = \"+C+\";\\n\\n        float in_y = \"+x+\";\\n        if( in_y < 0.0 || in_y > \"+p+\" ) {\\n          setOutput(float(\"+o+\"));\\n          return;\\n        }\\n        float in_x = \"+E+\";\\n        if( in_x < 0.0 || in_x > \"+v+\" ) {\\n          setOutput(float(\"+o+\"));\\n          return;\\n        }\\n\\n        vec2 sourceFracIndexCR = vec2(in_x,in_y);\\n        if(\"+f+\" == 1) {\\n          // Compute the four integer indices.\\n          ivec2 sourceFloorCR = ivec2(sourceFracIndexCR);\\n          ivec2 sourceCeilCR = ivec2(ceil(sourceFracIndexCR));\\n\\n          float topLeft = getImage(b, sourceFloorCR.y, sourceFloorCR.x, d);\\n          float bottomLeft = getImage(b, sourceCeilCR.y, sourceFloorCR.x, d);\\n          float topRight = getImage(b, sourceFloorCR.y, sourceCeilCR.x, d);\\n          float bottomRight = getImage(b, sourceCeilCR.y, sourceCeilCR.x, d);\\n\\n          vec2 fracCR = sourceFracIndexCR - vec2(sourceFloorCR);\\n\\n          float top = topLeft + (topRight - topLeft) * fracCR.x;\\n          float bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR.x;\\n          float newValue = top + (bottom - top) * fracCR.y;\\n          setOutput(newValue);\\n        } else {\\n          // Compute the coordinators of nearest neighbor point.\\n          ivec2 sourceNearestCR = ivec2(floor(\\n            sourceFracIndexCR + vec2(0.5,0.5)));\\n          float newValue = getImage(b, sourceNearestCR.y, sourceNearestCR.x, d);\\n          setOutput(newValue);\\n        }\\n      }\\n    \"},qi=function(t,e,n){this.variableNames=[\"x\"],this.outputShape=t;var r=t.length,o=t[t.length-1],a=n?\"<\":\">\";this.userCode=\"\\n      int getIndex(int i) {\\n        \"+(n?\"return \"+o+\" -i - 1;\":\"return i;\")+\"\\n      }\\n\\n      void main() {\\n        \"+ui(r)+\" coords = getOutputCoords();\\n        int end = \"+Ki(r,\"coords\")+\";\\n        float val = 0.0;\\n        for (int i = \"+o+\" - 1; i >= 0; i -= 1) {\\n          int idx = getIndex(i);\\n          if (idx \"+a+\" end) {\\n            continue;\\n          }\\n          if (idx == end && \"+e+\") {\\n            continue;\\n          }\\n          \"+Ki(r,\"coords\")+\" = idx;\\n          val += getX(\"+function(t,e){if(1===t)return\"\"+e;if(2===t)return e+\".x, \"+e+\".y\";if(3===t)return e+\".x, \"+e+\".y, \"+e+\".z\";if(4===t)return e+\".x, \"+e+\".y, \"+e+\".z, \"+e+\".w\";throw Error(\"Cumulative sum for rank \"+t+\" is not yet supported\")}(r,\"coords\")+\");\\n        }\\n        setOutput(val);\\n      }\\n    \"};function Ki(t,e){if(1===t)return\"\"+e;if(2===t)return e+\".y\";if(3===t)return e+\".z\";if(4===t)return e+\".w\";throw Error(\"Cumulative sum for rank \"+t+\" is not yet supported\")}var ji=function(t){this.variableNames=[\"A\"],this.packedInputs=!1,this.packedOutput=!0,this.outPackingScheme=Vt.DENSE;var e=Yt(t),n=Ya();this.outputShape=t,this.userCode=\"\\n      ivec3 outCoordsFromFlatIndex(int index) {\\n        \"+$a([\"r\",\"c\",\"d\"],t)+\"\\n        return ivec3(r, c, d);\\n      }\\n\\n      void main() {\\n        ivec2 resTexRC = ivec2(resultUV.yx *\\n          vec2(\"+e[0]+\", \"+e[1]+\"));\\n        int index = 4 * (resTexRC.x * \"+e[1]+\" + resTexRC.y);\\n\\n        vec4 result = vec4(0.);\\n\\n        for (int i=0; i<4; i++) {\\n          int flatIndex = index + i;\\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\\n          result[i] = getA(rc.x, rc.y, rc.z);\\n        }\\n\\n        \"+n.output+\" = result;\\n      }\\n    \"},Xi=function(t){this.variableNames=[\"A\"],this.packedInputs=!0,this.packedOutput=!0,this.outPackingScheme=Vt.DENSE;var e=Yt(t),n=Ya();this.outputShape=t,this.userCode=\"\\n      ivec3 outCoordsFromFlatIndex(int index) {\\n        \"+$a([\"r\",\"c\",\"d\"],t)+\"\\n        return ivec3(r, c, d);\\n      }\\n\\n      void main() {\\n        ivec2 resTexRC = ivec2(resultUV.yx *\\n          vec2(\"+e[0]+\", \"+e[1]+\"));\\n        int index = 4 * (resTexRC.x * \"+e[1]+\" + resTexRC.y);\\n\\n        vec4 result = vec4(0.);\\n\\n        for (int i=0; i<4; i++) {\\n          int flatIndex = index + i;\\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\\n          result[i] = getChannel(getA(rc.x, rc.y, rc.z), vec2(rc.y, rc.z));\\n        }\\n\\n        \"+n.output+\" = result;\\n      }\\n    \"},Yi=function(){function t(t,e,n){this.variableNames=[\"x\"],this.outputShape=[],this.outputShape=t,this.blockSize=e,this.dataFormat=n,this.userCode=\"\\n    void main() {\\n      ivec4 coords = getOutputCoords();\\n      int b = coords[0];\\n      int h = \"+this.getHeightCoordString()+\";\\n      int w = \"+this.getWidthCoordString()+\";\\n      int d = \"+this.getDepthCoordString()+\";\\n\\n      int in_h = h / \"+e+\";\\n      int offset_h = imod(h, \"+e+\");\\n      int in_w = w / \"+e+\";\\n      int offset_w = imod(w, \"+e+\");\\n      int offset_d = (offset_h * \"+e+\" + offset_w) *\\n        \"+this.getOutputDepthSize()+\";\\n      int in_d = d + offset_d;\\n\\n      float result = \"+this.getInputSamplingString()+\";\\n      setOutput(result);\\n    }\\n  \"}return t.prototype.getHeightCoordString=function(){return\"NHWC\"===this.dataFormat?\"coords[1]\":\"coords[2]\"},t.prototype.getWidthCoordString=function(){return\"NHWC\"===this.dataFormat?\"coords[2]\":\"coords[3]\"},t.prototype.getDepthCoordString=function(){return\"NHWC\"===this.dataFormat?\"coords[3]\":\"coords[1]\"},t.prototype.getOutputDepthSize=function(){return\"NHWC\"===this.dataFormat?this.outputShape[3]:this.outputShape[1]},t.prototype.getInputSamplingString=function(){return\"NHWC\"===this.dataFormat?\"getX(b, in_h, in_w, in_d)\":\"getX(b, in_d, in_h, in_w)\"},t}(),$i=function(t){this.variableNames=[\"X\"],this.outputShape=[t,t],this.userCode=\"\\n      void main() {\\n          ivec2 coords = getOutputCoords();\\n          float val = coords[0] == coords[1] ? getX(coords[0]) : 0.0;\\n          setOutput(val);\\n      }\\n    \"},Qi=function(t){this.variableNames=[\"A\"],this.outTexUsage=zt.DOWNLOAD;var e=Ya();this.outputShape=t,this.userCode=\"\\n      \"+Ja+\"\\n\\n      void main() {\\n        float x = getAAtOutCoords();\\n        \"+e.output+\" = encode_float(x);\\n      }\\n    \"},Ji=function(t){this.variableNames=[\"A\"],this.packedInputs=!0,this.packedOutput=!1,this.outTexUsage=zt.DOWNLOAD;var e=Ya();this.outputShape=t,this.userCode=\"\\n      \"+Ja+\"\\n\\n      void main() {\\n        ivec3 coords = getOutputCoords();\\n        float x = getChannel(getAAtOutCoords(), vec2(coords.y, coords.z));\\n        \"+e.output+\" = encode_float(x);\\n      }\\n    \"},Zi=function(t,e,n){void 0===n&&(n=!1),this.variableNames=[\"A\"];var r=Ya(),o=e[0],a=e[1];this.outputShape=t;var i=\"result\";n&&(i=\"floor(result * 255. + 0.5)\"),this.userCode=\"\\n      \"+Qa(t)+\"\\n\\n      void main() {\\n        ivec3 coords = getOutputCoords();\\n\\n        int flatIndex = getFlatIndex(coords);\\n        int offset = imod(flatIndex, 4);\\n\\n        flatIndex = idiv(flatIndex, 4, 1.);\\n        \\n        int r = flatIndex / \"+a+\";\\n        int c = imod(flatIndex, \"+a+\");\\n        vec2 uv = (vec2(c, r) + halfCR) / vec2(\"+a+\".0, \"+o+\".0);\\n        vec4 values = \"+r.texture2D+\"(A, uv);\\n\\n        float result;\\n\\n        if(offset == 0) {\\n          result = values[0];\\n        } else if(offset == 1) {\\n          result = values[1];\\n        } else if(offset == 2) {\\n          result = values[2];\\n        } else {\\n          result = values[3];\\n        }\\n\\n        \"+r.output+\" = vec4(\"+i+\", 0., 0., 0.);\\n      }\\n    \"},ts=function(t,e,n){void 0===n&&(n=!1),this.variableNames=[\"A\"],this.packedInputs=!1,this.packedOutput=!0;var r=Ya(),o=e[0],a=e[1];this.outputShape=t;var i=\"\",s=\"result\";n&&(s=\"floor(result * 255. + 0.5)\");for(var u=0;u<=1;u++)for(var c=0;c<=1;c++){var l=2*u+c;i+=\"\\n          localCoords = coords;\\n          if(localCoords[2] + \"+c+\" < \"+t[2]+\") {\\n            localCoords[2] += \"+c+\";\\n            if(localCoords[1] + \"+u+\" < \"+t[1]+\") {\\n              localCoords[1] += \"+u+\";\\n\\n              flatIndex = getFlatIndex(localCoords);\\n              offset = imod(flatIndex, 4);\\n\\n              flatIndex = idiv(flatIndex, 4, 1.);\\n\\n              r = flatIndex / \"+a+\";\\n              c = imod(flatIndex, \"+a+\");\\n              uv = (vec2(c, r) + halfCR) / vec2(\"+a+\".0, \"+o+\".0);\\n              values = \"+r.texture2D+\"(A, uv);\\n\\n              if(offset == 0) {\\n                result[\"+l+\"] = values[0];\\n              } else if(offset == 1) {\\n                result[\"+l+\"] = values[1];\\n              } else if(offset == 2) {\\n                result[\"+l+\"] = values[2];\\n              } else {\\n                result[\"+l+\"] = values[3];\\n              }\\n            }\\n          }\\n        \"}this.userCode=\"\\n      \"+Qa(t)+\"\\n\\n      void main() {\\n        ivec3 coords = getOutputCoords();\\n\\n        vec4 result = vec4(0.);\\n        int flatIndex, r, c, offset;\\n        ivec3 localCoords;\\n        vec2 uv;\\n        vec4 values;\\n\\n        \"+i+\"\\n\\n        \"+r.output+\" = \"+s+\";\\n      }\\n    \"},es=\"return real * expR - imag * expI;\",ns=\"return real * expI + imag * expR;\",rs=function(t,e,n){this.variableNames=[\"real\",\"imag\"];var r=e[1];this.outputShape=e;var o=n?\"2.0 * \"+Math.PI:\"-2.0 * \"+Math.PI,a=n?r+\".0\":\"1.0\";this.userCode=\"\\n      const float exponentMultiplier = \"+o+\";\\n\\n      float unaryOpComplex(float real, float expR, float imag, float expI) {\\n        \"+t+\"\\n      }\\n\\n      float mulMatDFT(int batch, int index) {\\n        float indexRatio = float(index) / float(\"+r+\");\\n        float exponentMultiplierTimesIndexRatio =\\n            exponentMultiplier * indexRatio;\\n\\n        float result = 0.0;\\n\\n        for (int i = 0; i < \"+r+\"; i++) {\\n          // x = (-2|2 * PI / N) * index * i;\\n          float x = exponentMultiplierTimesIndexRatio * float(i);\\n          float expR = cos(x);\\n          float expI = sin(x);\\n          float real = getReal(batch, i);\\n          float imag = getImag(batch, i);\\n\\n          result +=\\n              unaryOpComplex(real, expR, imag, expI) / \"+a+\";\\n        }\\n\\n        return result;\\n      }\\n\\n      void main() {\\n        ivec2 coords = getOutputCoords();\\n        setOutput(mulMatDFT(coords[0], coords[1]));\\n      }\\n    \"},os=function(){function t(t,e){this.outputShape=[],this.variableNames=[\"x\"],this.outputShape=t,this.userCode=\"\\n      uniform float value;\\n      void main() {\\n        // Input can be obtained from uniform value.\\n        setOutput(value);\\n      }\\n    \"}return t.prototype.getCustomSetupFunc=function(t){var e=this;return function(n,r){null==e.valueLoc&&(e.valueLoc=n.getUniformLocationNoThrow(r,\"value\")),n.gl.uniform1f(e.valueLoc,t)}},t}(),as=function(t,e,n){this.variableNames=[\"A\",\"indices\"];var r=t.slice();r[n]=e,this.outputShape=r,this.rank=r.length;var o=ui(this.rank),a=function(t,e){var n=t.length;if(n>4)throw Error(\"Gather for rank \"+n+\" is not yet supported\");if(1===n)return\"int(getIndices(resRC))\";for(var r=[\"resRC.x\",\"resRC.y\",\"resRC.z\",\"resRC.w\"],o=[],a=0;a<t.length;a++)a===e?o.push(\"int(getIndices(\"+r[a]+\"))\"):o.push(\"\"+r[a]);return o.join()}(t,n);this.userCode=\"\\n      void main() {\\n        \"+o+\" resRC = getOutputCoords();\\n        setOutput(getA(\"+a+\"));\\n      }\\n    \"};var is=function(t,e,n){this.sliceDim=t,this.strides=e,this.variableNames=[\"x\",\"indices\"],this.outputShape=n;var r=ui(e.length),o=ui(n.length),a=this.sliceDim>1?\"strides[j]\":\"strides\";this.userCode=\"\\n        \"+r+\" strides = \"+r+\"(\"+this.strides+\");\\n         void main() {\\n          \"+o+\" coords = getOutputCoords();\\n          int flattenIndex = 0;\\n          for (int j = 0; j < \"+this.sliceDim+\"; j++) {\\n            int index = round(getIndices(coords[0], j));\\n            flattenIndex += index * \"+a+\";\\n          }\\n          setOutput(getX(flattenIndex, coords[1]));\\n        }\\n      \"};function ss(t,e){var n=Ya();return oe(t,e,n.version+\"\\n    precision highp float;\\n    \"+n.attribute+\" vec3 clipSpacePos;\\n    \"+n.attribute+\" vec2 uv;\\n    \"+n.varyingVs+\" vec2 resultUV;\\n\\n    void main() {\\n      gl_Position = vec4(clipSpacePos, 1);\\n      resultUV = uv;\\n    }\")}function us(t,e){return fe(t,e,new Float32Array([-1,1,0,0,1,-1,-1,0,0,0,1,1,0,1,1,1,-1,0,1,0]))}function cs(t,e){return de(t,e,new Uint16Array([0,1,2,2,1,3]))}function ls(t,e,n,r,o,a,i){ve(n,r);var s=pe(t,e),u=t.TEXTURE_2D;return Jt(t,e,(function(){return t.bindTexture(u,s)})),Jt(t,e,(function(){return t.texParameteri(u,t.TEXTURE_WRAP_S,t.CLAMP_TO_EDGE)})),Jt(t,e,(function(){return t.texParameteri(u,t.TEXTURE_WRAP_T,t.CLAMP_TO_EDGE)})),Jt(t,e,(function(){return t.texParameteri(u,t.TEXTURE_MIN_FILTER,t.NEAREST)})),Jt(t,e,(function(){return t.texParameteri(u,t.TEXTURE_MAG_FILTER,t.NEAREST)})),Jt(t,e,(function(){return t.texImage2D(u,0,o,n,r,0,a,i,null)})),Jt(t,e,(function(){return t.bindTexture(t.TEXTURE_2D,null)})),s}function hs(t,e,n,r,o){var a=Xt(n,r);return ls(t,e,a[0],a[1],o.internalFormatFloat,o.textureFormatFloat,t.FLOAT)}function fs(t,e,n,r,o){var a=Xt(n,r);return ls(t,e,a[0],a[1],o.internalFormatHalfFloat,o.textureFormatFloat,o.textureTypeHalfFloat)}function ds(t,e,n,r,o){var a=Xt(n,r);return ls(t,e,a[0],a[1],t.RGBA,t.RGBA,t.UNSIGNED_BYTE)}function ps(t,e,n,r,o){var a=$t(n,r);return ls(t,e,a[0],a[1],o.internalFormatPackedFloat,t.RGBA,t.FLOAT)}function vs(t,e,n,r,o){var a=$t(n,r);return ls(t,e,a[0],a[1],o.internalFormatPackedHalfFloat,t.RGBA,o.textureTypeHalfFloat)}function gs(t,e,n,r){return Jt(t,e,(function(){return t.bindBuffer(t.ARRAY_BUFFER,r)})),me(t,e,n,\"clipSpacePos\",r,3,20,0)&&me(t,e,n,\"uv\",r,2,20,12)}function ms(t,e,n,r,o,a,i){var s,u,c;Jt(t,e,(function(){return t.bindTexture(t.TEXTURE_2D,n)})),a instanceof Uint8Array?(s=new Uint8Array(r*o*4),u=t.UNSIGNED_BYTE,c=t.RGBA):(s=new Float32Array(r*o*4),u=t.FLOAT,c=i.internalFormatPackedFloat),s.set(a),Jt(t,e,(function(){return t.texImage2D(t.TEXTURE_2D,0,c,r,o,0,t.RGBA,u,s)})),Jt(t,e,(function(){return t.bindTexture(t.TEXTURE_2D,null)}))}function ys(t,e,n,r){Jt(t,e,(function(){return t.bindTexture(t.TEXTURE_2D,n)})),r.data instanceof Uint8Array?Jt(t,e,(function(){return t.texImage2D(t.TEXTURE_2D,0,t.RGBA,r.width,r.height,0,t.RGBA,t.UNSIGNED_BYTE,r.data)})):Jt(t,e,(function(){return t.texImage2D(t.TEXTURE_2D,0,t.RGBA,t.RGBA,t.UNSIGNED_BYTE,r)})),Jt(t,e,(function(){return t.bindTexture(t.TEXTURE_2D,null)}))}function xs(t,e,n,r,o){var a=t.createBuffer();Jt(t,e,(function(){return t.bindBuffer(t.PIXEL_PACK_BUFFER,a)}));var i=16*n*r;return Jt(t,e,(function(){return t.bufferData(t.PIXEL_PACK_BUFFER,i,t.STREAM_READ)})),Jt(t,e,(function(){return t.readPixels(0,0,r,n,t.RGBA,t.FLOAT,0)})),Jt(t,e,(function(){return t.bindBuffer(t.PIXEL_PACK_BUFFER,null)})),a}function bs(t,e,n){var r=t,o=new Float32Array(n);return r.bindBuffer(r.PIXEL_PACK_BUFFER,e),r.getBufferSubData(r.PIXEL_PACK_BUFFER,0,o),r.bindBuffer(r.PIXEL_PACK_BUFFER,null),o}function ws(t,e,n,r,o){var a=Xt(n,r),i=a[0],s=a[1],u=new Uint8Array(n*r*4);return Jt(t,e,(function(){return t.readPixels(0,0,i,s,o.downloadTextureFormat,t.UNSIGNED_BYTE,u)})),new Float32Array(u.buffer)}function Cs(t,e,n,r,o,a,i,s){var u=t,c=new Float32Array(function(t,e){var n=$t(t,e);return n[0]*n[1]*4}(a,i));return u.bindBuffer(u.PIXEL_PACK_BUFFER,e),u.getBufferSubData(u.PIXEL_PACK_BUFFER,0,c),u.bindBuffer(u.PIXEL_PACK_BUFFER,null),c}function Es(t,e,n,r){var o=new Float32Array(n*r*4);return Jt(t,e,(function(){return t.readPixels(0,0,r,n,t.RGBA,t.FLOAT,o)})),o}var Rs=Object.freeze({createVertexShader:ss,createVertexBuffer:us,createIndexBuffer:cs,createFloat32MatrixTexture:hs,createFloat16MatrixTexture:fs,createUnsignedBytesMatrixTexture:ds,createPackedMatrixTexture:ps,createFloat16PackedMatrixTexture:vs,bindVertexProgramAttributeStreams:gs,uploadDenseMatrixToTexture:ms,uploadPixelDataToTexture:ys,createBufferFromOutputTexture:xs,downloadFloat32MatrixFromBuffer:bs,downloadByteEncodedFloatMatrixFromOutputTexture:ws,downloadPackedMatrixFromBuffer:Cs,downloadMatrixFromPackedOutputTexture:Es}),Is=function(){function t(t){this.outputTexture=null,this.program=null,this.disposed=!1,this.vertexAttrsAreBound=!1,this.itemsToPoll=[];var e=i().getNumber(\"WEBGL_VERSION\");null!=t?(this.gl=t,Kt(e,t)):this.gl=jt(e);var n=\"WEBGL_color_buffer_float\";if(1===i().getNumber(\"WEBGL_VERSION\")){if(this.textureFloatExtension=re(this.gl,this.debug,\"OES_texture_float\"),Pe(this.gl,\"OES_texture_half_float\"))this.textureHalfFloatExtension=re(this.gl,this.debug,\"OES_texture_half_float\");else if(i().get(\"WEBGL_FORCE_F16_TEXTURES\"))throw new Error(\"GL context does not support half float textures, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.\");if(this.colorBufferFloatExtension=this.gl.getExtension(n),Pe(this.gl,\"EXT_color_buffer_half_float\"))this.colorBufferHalfFloatExtension=re(this.gl,this.debug,\"EXT_color_buffer_half_float\");else if(i().get(\"WEBGL_FORCE_F16_TEXTURES\"))throw new Error(\"GL context does not support color renderable half floats, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.\")}else if(n=\"EXT_color_buffer_float\",Pe(this.gl,n))this.colorBufferFloatExtension=this.gl.getExtension(n);else{if(!Pe(this.gl,\"EXT_color_buffer_half_float\"))throw new Error(\"GL context does not support color renderable floats\");this.colorBufferHalfFloatExtension=this.gl.getExtension(\"EXT_color_buffer_half_float\")}this.vertexBuffer=us(this.gl,this.debug),this.indexBuffer=cs(this.gl,this.debug),this.framebuffer=ge(this.gl,this.debug),this.textureConfig=Qt(this.gl,this.textureHalfFloatExtension)}return Object.defineProperty(t.prototype,\"debug\",{get:function(){return i().getBool(\"DEBUG\")},enumerable:!0,configurable:!0}),t.prototype.dispose=function(){var t=this;if(!this.disposed){null!=this.program&&console.warn(\"Disposing a GPGPUContext that still has a bound WebGLProgram. This is probably a resource leak, delete the program with GPGPUContext.deleteProgram before disposing.\"),null!=this.outputTexture&&console.warn(\"Disposing a GPGPUContext that still has a bound output matrix texture.  This is probably a resource leak, delete the output matrix texture with GPGPUContext.deleteMatrixTexture before disposing.\");var e=this.gl;Jt(e,this.debug,(function(){return e.finish()})),Jt(e,this.debug,(function(){return e.bindFramebuffer(e.FRAMEBUFFER,null)})),Jt(e,this.debug,(function(){return e.deleteFramebuffer(t.framebuffer)})),Jt(e,this.debug,(function(){return e.bindBuffer(e.ARRAY_BUFFER,null)})),Jt(e,this.debug,(function(){return e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,null)})),Jt(e,this.debug,(function(){return e.deleteBuffer(t.indexBuffer)})),this.disposed=!0}},t.prototype.createFloat32MatrixTexture=function(t,e){return this.throwIfDisposed(),hs(this.gl,this.debug,t,e,this.textureConfig)},t.prototype.createFloat16MatrixTexture=function(t,e){return this.throwIfDisposed(),fs(this.gl,this.debug,t,e,this.textureConfig)},t.prototype.createUnsignedBytesMatrixTexture=function(t,e){return this.throwIfDisposed(),ds(this.gl,this.debug,t,e,this.textureConfig)},t.prototype.uploadPixelDataToTexture=function(t,e){this.throwIfDisposed(),ys(this.gl,this.debug,t,e)},t.prototype.uploadDenseMatrixToTexture=function(t,e,n,r){this.throwIfDisposed(),ms(this.gl,this.debug,t,e,n,r,this.textureConfig)},t.prototype.createFloat16PackedMatrixTexture=function(t,e){return this.throwIfDisposed(),vs(this.gl,this.debug,t,e,this.textureConfig)},t.prototype.createPackedMatrixTexture=function(t,e){return this.throwIfDisposed(),ps(this.gl,this.debug,t,e,this.textureConfig)},t.prototype.deleteMatrixTexture=function(t){var e=this;this.throwIfDisposed(),this.outputTexture===t&&(Ee(this.gl,this.debug,this.framebuffer),this.outputTexture=null),Jt(this.gl,this.debug,(function(){return e.gl.deleteTexture(t)}))},t.prototype.downloadByteEncodedFloatMatrixFromOutputTexture=function(t,e,n){var r=this;return this.downloadMatrixDriver(t,(function(){return ws(r.gl,r.debug,e,n,r.textureConfig)}))},t.prototype.downloadPackedMatrixFromBuffer=function(t,e,n,r,o,a){return Cs(this.gl,t,0,0,0,o,a,this.textureConfig)},t.prototype.downloadFloat32MatrixFromBuffer=function(t,e){return bs(this.gl,t,e)},t.prototype.createBufferFromTexture=function(t,e,n){this.bindTextureToFrameBuffer(t);var r=xs(this.gl,this.debug,e,n,this.textureConfig);return this.unbindTextureToFrameBuffer(),r},t.prototype.createAndWaitForFence=function(){var t=this.createFence(this.gl);return this.pollFence(t)},t.prototype.createFence=function(t){var e,n,r=this;if(i().getBool(\"WEBGL_FENCE_API_ENABLED\")){var o=t,a=o.fenceSync(o.SYNC_GPU_COMMANDS_COMPLETE,0);t.flush(),n=function(){var t=o.clientWaitSync(a,0,0);return t===o.ALREADY_SIGNALED||t===o.CONDITION_SATISFIED},e=a}else i().getNumber(\"WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION\")>0?(e=this.beginQuery(),this.endQuery(),n=function(){return r.isQueryAvailable(e,i().getNumber(\"WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION\"))}):n=function(){return!0};return{query:e,isFencePassed:n}},t.prototype.downloadMatrixFromPackedTexture=function(t,e,n){var r=this;return this.downloadMatrixDriver(t,(function(){return Es(r.gl,r.debug,e,n)}))},t.prototype.createProgram=function(t){this.throwIfDisposed();var e=this.gl,n=ae(e,this.debug,t),r=ss(e,this.debug),o=ce(e,this.debug);return Jt(e,this.debug,(function(){return e.attachShader(o,r)})),Jt(e,this.debug,(function(){return e.attachShader(o,n)})),le(e,this.debug,o),this.debug&&he(e,this.debug,o),this.vertexAttrsAreBound||(this.setProgram(o),this.vertexAttrsAreBound=gs(e,this.debug,this.program,this.vertexBuffer)),o},t.prototype.deleteProgram=function(t){var e=this;this.throwIfDisposed(),t===this.program&&(this.program=null),null!=t&&Jt(this.gl,this.debug,(function(){return e.gl.deleteProgram(t)}))},t.prototype.setProgram=function(t){var e=this;this.throwIfDisposed(),this.program=t,null!=this.program&&this.debug&&he(this.gl,this.debug,this.program),Jt(this.gl,this.debug,(function(){return e.gl.useProgram(t)}))},t.prototype.getUniformLocation=function(t,e,n){return void 0===n&&(n=!0),this.throwIfDisposed(),n?xe(this.gl,this.debug,t,e):be(this.gl,t,e)},t.prototype.getAttributeLocation=function(t,e){var n=this;return this.throwIfDisposed(),Jt(this.gl,this.debug,(function(){return n.gl.getAttribLocation(t,e)}))},t.prototype.getUniformLocationNoThrow=function(t,e){return this.throwIfDisposed(),this.gl.getUniformLocation(t,e)},t.prototype.setInputMatrixTexture=function(t,e,n){this.throwIfDisposed(),this.throwIfNoProgram(),we(this.gl,this.debug,this.program,t,e,n)},t.prototype.setOutputMatrixTexture=function(t,e,n){this.setOutputMatrixTextureDriver(t,n,e)},t.prototype.setOutputPackedMatrixTexture=function(t,e,n){this.throwIfDisposed();var r=$t(e,n),o=r[0],a=r[1];this.setOutputMatrixTextureDriver(t,o,a)},t.prototype.setOutputMatrixWriteRegion=function(t,e,n,r){this.setOutputMatrixWriteRegionDriver(n,t,r,e)},t.prototype.setOutputPackedMatrixWriteRegion=function(t,e,n,r){throw new Error(\"setOutputPackedMatrixWriteRegion not implemented.\")},t.prototype.debugValidate=function(){null!=this.program&&he(this.gl,this.debug,this.program),Re(this.gl)},t.prototype.executeProgram=function(){this.throwIfDisposed(),this.throwIfNoProgram();var t=this.gl;this.debug&&this.debugValidate(),Jt(t,this.debug,(function(){return t.drawElements(t.TRIANGLES,6,t.UNSIGNED_SHORT,0)}))},t.prototype.blockUntilAllProgramsCompleted=function(){var t=this;this.throwIfDisposed(),Jt(this.gl,this.debug,(function(){return t.gl.finish()}))},t.prototype.getQueryTimerExtension=function(){return null==this.disjointQueryTimerExtension&&(this.disjointQueryTimerExtension=re(this.gl,this.debug,2===i().getNumber(\"WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION\")?\"EXT_disjoint_timer_query_webgl2\":\"EXT_disjoint_timer_query\")),this.disjointQueryTimerExtension},t.prototype.getQueryTimerExtensionWebGL2=function(){return this.getQueryTimerExtension()},t.prototype.getQueryTimerExtensionWebGL1=function(){return this.getQueryTimerExtension()},t.prototype.beginQuery=function(){if(2===i().getNumber(\"WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION\")){var t=this.gl,e=this.getQueryTimerExtensionWebGL2(),n=t.createQuery();return t.beginQuery(e.TIME_ELAPSED_EXT,n),n}var r=this.getQueryTimerExtensionWebGL1(),o=r.createQueryEXT();return r.beginQueryEXT(r.TIME_ELAPSED_EXT,o),o},t.prototype.endQuery=function(){if(2!==i().getNumber(\"WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION\")){var t=this.getQueryTimerExtensionWebGL1();t.endQueryEXT(t.TIME_ELAPSED_EXT)}else{var e=this.gl,n=this.getQueryTimerExtensionWebGL2();e.endQuery(n.TIME_ELAPSED_EXT)}},t.prototype.waitForQueryAndGetTime=function(t){return n(this,void 0,void 0,(function(){var e=this;return r(this,(function(n){switch(n.label){case 0:return[4,F((function(){return e.disposed||e.isQueryAvailable(t,i().getNumber(\"WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION\"))}))];case 1:return n.sent(),[2,this.getQueryTime(t,i().getNumber(\"WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION\"))]}}))}))},t.prototype.getQueryTime=function(t,e){if(0===e)return null;if(2===e){var n=this.gl;return n.getQueryParameter(t,n.QUERY_RESULT)/1e6}var r=this.getQueryTimerExtensionWebGL1();return r.getQueryObjectEXT(t,r.QUERY_RESULT_EXT)/1e6},t.prototype.isQueryAvailable=function(t,e){if(0===e)return!0;if(2===e){var n=this.gl,r=this.getQueryTimerExtensionWebGL2(),o=n.getQueryParameter(t,n.QUERY_RESULT_AVAILABLE);return null==this.disjoint&&(this.disjoint=this.gl.getParameter(r.GPU_DISJOINT_EXT)),o&&!this.disjoint}o=(r=this.getQueryTimerExtensionWebGL1()).getQueryObjectEXT(t,r.QUERY_RESULT_AVAILABLE_EXT);return null==this.disjoint&&(this.disjoint=this.gl.getParameter(r.GPU_DISJOINT_EXT)),o&&!this.disjoint},t.prototype.pollFence=function(t){var e=this;return new Promise((function(n){e.addItemToPoll((function(){return t.isFencePassed()}),(function(){return n()}))}))},t.prototype.pollItems=function(){for(var t=function(t){for(var e=0;e<t.length;++e){if(!t[e]())break}return e-1}(this.itemsToPoll.map((function(t){return t.isDoneFn}))),e=0;e<=t;++e){(0,this.itemsToPoll[e].resolveFn)()}this.itemsToPoll=this.itemsToPoll.slice(t+1)},t.prototype.addItemToPoll=function(t,e){var n=this;this.itemsToPoll.push({isDoneFn:t,resolveFn:e}),this.itemsToPoll.length>1||F((function(){return n.pollItems(),0===n.itemsToPoll.length}))},t.prototype.bindTextureToFrameBuffer=function(t){this.throwIfDisposed(),Ce(this.gl,this.debug,t,this.framebuffer),this.debug&&Re(this.gl)},t.prototype.unbindTextureToFrameBuffer=function(){null!=this.outputTexture?(Ce(this.gl,this.debug,this.outputTexture,this.framebuffer),this.debug&&Re(this.gl)):Ee(this.gl,this.debug,this.framebuffer)},t.prototype.downloadMatrixDriver=function(t,e){this.bindTextureToFrameBuffer(t);var n=e();return this.unbindTextureToFrameBuffer(),n},t.prototype.setOutputMatrixTextureDriver=function(t,e,n){this.throwIfDisposed();var r=this.gl;Ce(r,this.debug,t,this.framebuffer),this.debug&&Re(r),this.outputTexture=t,Jt(r,this.debug,(function(){return r.viewport(0,0,e,n)})),Jt(r,this.debug,(function(){return r.scissor(0,0,e,n)}))},t.prototype.setOutputMatrixWriteRegionDriver=function(t,e,n,r){var o=this;this.throwIfDisposed(),Jt(this.gl,this.debug,(function(){return o.gl.scissor(t,e,n,r)}))},t.prototype.throwIfDisposed=function(){if(this.disposed)throw new Error(\"Attempted to use disposed GPGPUContext.\")},t.prototype.throwIfNoProgram=function(){if(null==this.program)throw new Error(\"No GPU program is currently set.\")},t}();function ks(t,e){if(t.length!==e.length)throw Error(\"Binary was compiled with \"+t.length+\" inputs, but was executed with \"+e.length+\" inputs\");t.forEach((function(t,n){var r=t.logicalShape,o=e[n],a=o.shape;if(!S(r,a))throw Error(\"Binary was compiled with different shapes than the current args. Shapes \"+r+\" and \"+a+\" must match\");if(!t.isUniform||!o.isUniform){var i=t.texShape,s=o.isUniform?null:o.texData.texShape;if(!S(i,s))throw Error(\"Binary was compiled with different texture shapes than the current args. Shape \"+i+\" and \"+s+\" must match\")}}))}var Ss=function(t,e,n){this.variableNames=[\"A\"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t;for(var r=n.filterWidth,o=n.inChannels,a=n.strideWidth,i=n.strideHeight,s=n.padInfo,u=n.outWidth,c=n.dilationWidth,l=n.dilationHeight,h=n.dataFormat,f=s.left,d=s.top,p=o*r,v=Ya(),g=\"channelsLast\"===h,m=g?0:1,y=g?1:2,x=\"\",b=0;b<=1;b++)for(var w=0;w<=1;w++)x+=\"\\n          blockIndex = rc.y + \"+w+\";\\n          pos = rc.x + \"+b+\";\\n\\n          if(blockIndex < \"+t[1]+\" && pos < \"+t[0]+\") {\\n            offsetY = int(blockIndex / (\"+u+\")) * \"+i+\" - \"+d+\";\\n            d0 = offsetY + \"+l+\" * (pos / \"+p+\");\\n\\n            if(d0 < \"+e[m]+\" && d0 >= 0) {\\n\\n              offsetX = int(mod(float(blockIndex), \"+u+\".) * \"+a+\". - \"+f+\".);\\n              d1 = offsetX + \"+c+\" * (int(mod(float(pos), \"+p+\".) / \"+o+\".));\\n\\n              if(d1 < \"+e[y]+\" && d1 >= 0) {\\n\\n                ch = int(mod(float(pos), \"+o+\".));\\n\\n                if (\"+g+\") {\\n                  innerDims = vec2(d1, ch);\\n                  result[\"+(2*b+w)+\"] = getChannel(\\n                    getA(d0, int(innerDims.x),\\n                    int(innerDims.y)), innerDims);\\n                } else {\\n                  innerDims = vec2(d0, d1);\\n                  result[\"+(2*b+w)+\"] = getChannel(\\n                    getA(ch, int(innerDims.x),\\n                    int(innerDims.y)), innerDims);\\n                }\\n              }\\n            }\\n          }\\n        \";this.userCode=\"\\n      void main() {\\n        ivec2 rc = getOutputCoords();\\n\\n        vec4 result = vec4(0);\\n\\n        int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\\n        vec2 innerDims;\\n\\n        \"+x+\"\\n\\n        \"+v.output+\" = result;\\n      }\\n    \"},As=function(t,e,n,r,o){this.variableNames=[\"x\"],this.outputShape=[];var a,i=e,s=t[3]-1;this.outputShape=t;var u=\"float(\"+n+\") + float(\"+r+\") * sum\";a=.5===o?\"inversesqrt(\"+u+\")\":1===o?\"1.0/(\"+u+\")\":\"exp(log(\"+u+\") * float(-\"+o+\"));\",this.userCode=\"\\n      void main() {\\n        ivec4 coords = getOutputCoords();\\n        int b = coords[0];\\n        int r = coords[1];\\n        int c = coords[2];\\n        int d = coords[3];\\n        float x = getX(b, r, c, d);\\n        float sum = 0.0;\\n        for (int j = -\"+i+\"; j <= \"+i+\"; j++) {\\n          int idx = d + j;\\n          if (idx >= 0 && idx <=  \"+s+\") {\\n            float z = getX(b, r, c, idx);\\n            sum += z * z;\\n          }\\n        }\\n        float val = x * \"+a+\";\\n        setOutput(val);\\n      }\\n    \"},Ts=function(t,e,n,r,o){this.variableNames=[\"inputImage\",\"outputImage\",\"dy\"],this.outputShape=[],this.outputShape=t,this.depth=t[3],this.depthRadius=e,this.bias=n,this.alpha=r,this.beta=o,this.userCode=\"\\n      void main() {\\n        ivec4 coords = getOutputCoords();\\n        int b = coords[0];\\n        int r = coords[1];\\n        int c = coords[2];\\n\\n        float result = 0.0;\\n        for (int d = 0; d < \"+this.depth+\"; ++d) {\\n          int depthBegin = int(max(0.0, float(d - \"+e+\")));\\n          int depthEnd = int(min(float(\"+this.depth+\"),\\n              float(d + \"+e+\" + 1)));\\n\\n          const int MIN_DEPTH_BEGIN = 0;\\n          const int MAX_DEPTH_END = \"+this.depth+\";\\n\\n          float norm = 0.0;\\n          for (int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k) {\\n            if (k < depthBegin){\\n              continue;\\n            }\\n            else if (k >= depthBegin && k < depthEnd) {\\n              norm += getInputImage(b, r, c, k) * getInputImage(b, r, c, k);\\n            }\\n            else {\\n              break;\\n            }\\n          }\\n\\n          norm = float(\"+r+\") * norm + float(\"+n+\");\\n\\n          for(int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k){\\n            if (k < depthBegin){\\n              continue;\\n            }\\n            else if (k >= depthBegin && k < depthEnd){\\n              float dyi = -2.0 * float(\"+r+\")\\n                * float(\"+o+\")\\n                * getInputImage(b ,r ,c, k) * getOutputImage(b, r, c, d)\\n                / norm;\\n              if (k == d) {\\n                dyi += pow(norm, -1.0 * \"+o+\");\\n              }\\n              if (k == coords[3]) {\\n                dyi *= getDy(b, r, c, d);\\n                result += dyi;\\n              }\\n            }\\n            else {\\n              break;\\n            }\\n          }\\n      }\\n      setOutput(result);\\n      }\\n    \"},Ds=function(t,e,n,r,o){this.variableNames=[\"x\"],this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0;var a,i=e,s=t[3]-1;this.outputShape=t;var u=\"float(\"+n+\") + float(\"+r+\") * sum\";a=.5===o?\"inversesqrt(\"+u+\")\":1===o?\"1.0/(\"+u+\")\":\"exp(log(\"+u+\") * float(-\"+o+\"));\",this.userCode=\"\\n      void main() {\\n        ivec4 coords = getOutputCoords();\\n        int b = coords.x;\\n        int r = coords.y;\\n        int c = coords.z;\\n        int d = coords.w;\\n\\n        bool hasNextCol = d < \"+this.outputShape[3]+\";\\n        bool hasNextRow = c < \"+this.outputShape[2]+\";\\n\\n        vec4 sum = vec4(0.);\\n        vec4 xFragAtOutputCoords = getX(b, r, c, d);\\n\\n        vec4 xAtOutputCoords = vec4(\\n          getChannel(xFragAtOutputCoords, vec2(c, d)),\\n          hasNextCol ?\\n            getChannel(xFragAtOutputCoords, vec2(c, d + 1)) : 0.0,\\n          hasNextRow ?\\n            getChannel(xFragAtOutputCoords , vec2(c + 1, d)) : 0.0,\\n          (hasNextRow && hasNextCol) ?\\n            getChannel(xFragAtOutputCoords, vec2(c + 1, d + 1)) : 0.0\\n        );\\n\\n        int firstChannel = d - \"+i+\";\\n        vec2 cache = vec2(0.);\\n        if(firstChannel >= 0){\\n          vec4 firstChannelFrag = getX(b, r, c, firstChannel);\\n          cache.x = getChannel(firstChannelFrag, vec2(c, firstChannel));\\n            if(hasNextRow){\\n              cache.y = getChannel(firstChannelFrag, vec2(c + 1, firstChannel));\\n            }\\n        }\\n\\n        ivec2 depth = ivec2(d, d + 1);\\n        for (int j = - \"+i+\"; j <= \"+i+\"; j++) {\\n          ivec2 idx = depth + j;\\n          bvec2 aboveLowerBound = greaterThanEqual(idx, ivec2(0));\\n          bvec2 belowUpperBound = lessThanEqual(idx, ivec2(\"+s+\"));\\n\\n          bool depthInRange = aboveLowerBound.x && belowUpperBound.x;\\n          bool depthPlusOneInRange = aboveLowerBound.y && belowUpperBound.y;\\n\\n          if(depthInRange || depthPlusOneInRange){\\n            vec4 z = vec4(0.);\\n            vec4 xFragAtCurrentDepth;\\n            z.xz = cache.xy;\\n            if(depthPlusOneInRange && hasNextCol){\\n              xFragAtCurrentDepth = idx.y != d ?\\n                getX(b, r, c, idx.y) : xFragAtOutputCoords;\\n              z.y = getChannel(xFragAtCurrentDepth, vec2(c, idx.y));\\n              if(hasNextRow){\\n                z.w = getChannel(xFragAtCurrentDepth, vec2(c + 1, idx.y));\\n              }\\n            }\\n            cache.xy = z.yw;\\n            sum += z * z;\\n          }\\n        }\\n        vec4 result = xAtOutputCoords * \"+a+\";\\n        setOutput(result);\\n      }\\n    \"},Ns=function(t){this.variableNames=[\"dy\",\"maxPos\"],this.outputShape=t.inShape;var e=t.strideHeight,n=t.strideWidth,r=t.dilationHeight,o=t.effectiveFilterHeight,a=t.effectiveFilterWidth,i=o-1-t.padInfo.top,s=a-1-t.padInfo.left,u=o*a-1;this.userCode=\"\\n      const ivec2 pads = ivec2(\"+i+\", \"+s+\");\\n\\n      void main() {\\n        ivec4 coords = getOutputCoords();\\n        int b = coords[0];\\n        int d = coords[3];\\n\\n        ivec2 dyRCCorner = coords.yz - pads;\\n        int dyRCorner = dyRCCorner.x;\\n        int dyCCorner = dyRCCorner.y;\\n\\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\\n        // ? = to be determined. : = across all values in that axis.\\n        float dotProd = 0.0;\\n        for (int wR = 0; wR < \"+o+\";\\n          wR += \"+r+\") {\\n          float dyR = float(dyRCorner + wR) / \"+e+\".0;\\n\\n          if (dyR < 0.0 || dyR >= \"+t.outHeight+\".0 || fract(dyR) > 0.0) {\\n            continue;\\n          }\\n          int idyR = int(dyR);\\n\\n          for (int wC = 0; wC < \"+a+\"; wC++) {\\n            float dyC = float(dyCCorner + wC) / \"+n+\".0;\\n\\n            if (dyC < 0.0 || dyC >= \"+t.outWidth+\".0 ||\\n                fract(dyC) > 0.0) {\\n              continue;\\n            }\\n            int idyC = int(dyC);\\n\\n            float dyValue = getDy(b, idyR, idyC, d);\\n            int maxPosValue = \"+u+\" - int(getMaxPos(b, idyR, idyC, d));\\n\\n            // Get the current value, check it against the value from the\\n            // position matrix.\\n            int curPosValue = wR * \"+a+\" + wC;\\n            float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\\n\\n            dotProd += dyValue * mask;\\n          }\\n        }\\n        setOutput(dotProd);\\n      }\\n    \"},Fs=function(t){this.variableNames=[\"dy\",\"maxPos\"],this.outputShape=t.inShape;var e=t.strideDepth,n=t.strideHeight,r=t.strideWidth,o=t.dilationDepth,a=t.dilationHeight,i=t.dilationWidth,s=t.effectiveFilterDepth,u=t.effectiveFilterHeight,c=t.effectiveFilterWidth,l=s-1-t.padInfo.front,h=u-1-t.padInfo.top,f=c-1-t.padInfo.left,d=s*u*c-1;this.userCode=\"\\n      const ivec3 pads = ivec3(\"+l+\", \"+h+\", \"+f+\");\\n\\n      void main() {\\n        ivec5 coords = getOutputCoords();\\n        int batch = coords.x;\\n        int ch = coords.u;\\n\\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\\n        int dyDCorner = dyCorner.x;\\n        int dyRCorner = dyCorner.y;\\n        int dyCCorner = dyCorner.z;\\n\\n        // Convolve dy(?, ?, ?, ch) with pos mask(:, :, :, d) to get\\n        // dx(xD, xR, xC, ch).\\n        // ? = to be determined. : = across all values in that axis.\\n        float dotProd = 0.0;\\n\\n        for (int wD = 0; wD < \"+s+\";\\n           wD += \"+o+\") {\\n          float dyD = float(dyDCorner + wD) / \"+e+\".0;\\n\\n          if (dyD < 0.0 || dyD >= \"+t.outDepth+\".0 || fract(dyD) > 0.0) {\\n            continue;\\n          }\\n          int idyD = int(dyD);\\n\\n          for (int wR = 0; wR < \"+u+\";\\n              wR += \"+a+\") {\\n            float dyR = float(dyRCorner + wR) / \"+n+\".0;\\n\\n            if (dyR < 0.0 || dyR >= \"+t.outHeight+\".0 ||\\n                fract(dyR) > 0.0) {\\n              continue;\\n            }\\n            int idyR = int(dyR);\\n\\n            for (int wC = 0; wC < \"+c+\";\\n                wC += \"+i+\") {\\n              float dyC = float(dyCCorner + wC) / \"+r+\".0;\\n\\n              if (dyC < 0.0 || dyC >= \"+t.outWidth+\".0 ||\\n                  fract(dyC) > 0.0) {\\n                continue;\\n              }\\n              int idyC = int(dyC);\\n\\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\\n              int maxPosValue = \"+d+\" -\\n                  int(getMaxPos(batch, idyD, idyR, idyC, ch));\\n\\n              // Get the current value, check it against the value from the\\n              // position matrix.\\n              int curPosValue =\\n                  wD * \"+u+\" * \"+c+\" +\\n                  wR * \"+c+\" + wC;\\n              float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\\n\\n              dotProd += dyValue * mask;\\n            }\\n          }\\n        }\\n        setOutput(dotProd);\\n      }\\n    \"},_s=function(t,e,n,r,o,a,i){void 0===n&&(n=!1),void 0===r&&(r=!1),void 0===o&&(o=!1),void 0===a&&(a=null),void 0===i&&(i=!1),this.variableNames=[\"matrixA\",\"matrixB\"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e;var s=n?t[1]:t[2],u=Math.ceil(s/2),c=n?\"i * 2, rc.y\":\"rc.y, i * 2\",l=r?\"rc.z, i * 2\":\"i * 2, rc.z\",h=n?[\"a.xxyy\",\"a.zzww\"]:[\"a.xxzz\",\"a.yyww\"],f=r?[\"b.xzxz\",\"b.ywyw\"]:[\"b.xyxy\",\"b.zwzw\"],d=\"\",p=\"\";a&&(d=i?\"vec4 activation(vec4 a) {\\n          vec4 b = getPreluActivationWeightsAtOutCoords();\\n          \"+a+\"\\n        }\":\"vec4 activation(vec4 x) {\\n          \"+a+\"\\n        }\",p=\"result = activation(result);\");var v=o?\"result += getBiasAtOutCoords();\":\"\";o&&this.variableNames.push(\"bias\"),i&&this.variableNames.push(\"preluActivationWeights\"),this.userCode=\"\\n      \"+d+\"\\n\\n      const float sharedDimension = \"+u+\".0;\\n\\n      vec4 dot2x2ARowBCol(ivec3 rc) {\\n        vec4 result = vec4(0);\\n        for (int i = 0; i < \"+u+\"; i++) {\\n          vec4 a = getMatrixA(rc.x, \"+c+\");\\n          vec4 b = getMatrixB(rc.x, \"+l+\");\\n\\n          // These swizzled products need to be separately added.\\n          // See: https://github.com/tensorflow/tfjs/issues/1735\\n          result += (\"+h[0]+\" * \"+f[0]+\");\\n          result += (\"+h[1]+\" * \"+f[1]+\");\\n        }\\n        return result;\\n      }\\n\\n      void main() {\\n        ivec3 rc = getOutputCoords();\\n        vec4 result = dot2x2ARowBCol(rc);\\n\\n        \"+v+\"\\n\\n        \"+p+\"\\n\\n        setOutput(result);\\n      }\\n    \"},Os=function(){function t(t,e,n){this.variableNames=[\"probs\"],this.outputShape=[t,n],this.userCode=\"\\n      uniform float seed;\\n\\n      void main() {\\n        ivec2 coords = getOutputCoords();\\n        int batch = coords[0];\\n\\n        float r = random(seed);\\n        float cdf = 0.0;\\n\\n        for (int i = 0; i < \"+(e-1)+\"; i++) {\\n          cdf += getProbs(batch, i);\\n\\n          if (r < cdf) {\\n            setOutput(float(i));\\n            return;\\n          }\\n        }\\n\\n        // If no other event happened, last event happened.\\n        setOutput(float(\"+(e-1)+\"));\\n      }\\n    \"}return t.prototype.getCustomSetupFunc=function(t){var e=this;return function(n,r){null==e.seedLoc&&(e.seedLoc=n.getUniformLocation(r,\"seed\")),n.gl.uniform1f(e.seedLoc,t)}},t}(),Ms=function(t,e,n,r){this.variableNames=[\"indices\"],this.outputShape=[t,e],this.userCode=\"\\n      void main() {\\n        ivec2 coords = getOutputCoords();\\n        int index = round(getIndices(coords.x));\\n        setOutput(mix(float(\"+r+\"), float(\"+n+\"),\\n                      float(index == coords.y)));\\n      }\\n    \"},Bs=function(t){this.variableNames=[\"A\"],this.packedInputs=!1,this.packedOutput=!0,this.outputShape=t;var e=t.length;if(0===e)this.userCode=\"\\n        void main() {\\n          setOutput(vec4(getA(), 0., 0., 0.));\\n        }\\n      \";else{var n=Xa(\"rc\",e),r=ui(e),o=function(t,e,n){if(1===t)return\"rc > \"+e[0];for(var r=\"\",o=t-2;o<t;o++)r+=n[o]+\" >= \"+e[o],o<t-1&&(r+=\"||\");return r}(e,t,n),a=function(t,e,n,r){if(1===t)return\"\";var o=r.slice(-2);return\"\\n    int r = \"+o[0]+\";\\n    int c = \"+o[1]+\";\\n    int rp1 = r + 1;\\n    int cp1 = c + 1;\\n\\n    bool cEdge = cp1 >= \"+e+\";\\n    bool rEdge = rp1 >= \"+n+\";\\n  \"}(e,t[t.length-1],t[t.length-2],n),i=function(t,e){var n=t.length,r=function(t,e){for(var n=[],r=0;r<=1;r++)for(var o=0;o<=1;o++){for(var a=(0===r?\"r\":\"rp1\")+\", \"+(0===o?\"c\":\"cp1\"),i=2;i<t;i++)a=e[e.length-1-i]+\",\"+a;n.push(a)}return n}(n,e);return 1===n?\"getA(rc),\\n            rc + 1 >= \"+t[0]+\" ? 0. : getA(rc + 1),\\n            0, 0\":\"getA(\"+r[0]+\"),\\n          cEdge ? 0. : getA(\"+r[1]+\"),\\n          rEdge ? 0. : getA(\"+r[2]+\"),\\n          rEdge || cEdge ? 0. : getA(\"+r[3]+\")\"}(t,n);this.userCode=\"\\n        void main() {\\n          \"+r+\" rc = getOutputCoords();\\n\\n          if(\"+o+\") {\\n            setOutput(vec4(0));\\n          } else {\\n            \"+a+\"\\n\\n            setOutput(vec4(\"+i+\"));\\n          }\\n        }\\n      \"}};var Ps=function(t,e,n){this.variableNames=[\"x\"],this.outputShape=e.map((function(e,n){return e[0]+t[n]+e[1]}));var r=t.length,o=ui(r),a=e.map((function(t){return t[0]})).join(\",\"),i=e.map((function(e,n){return e[0]+t[n]})).join(\",\"),s=[\"coords[0]\",\"coords[1]\",\"coords[2]\",\"coords[3]\"].slice(0,r);this.userCode=1!==r?\"\\n      \"+o+\" start = \"+o+\"(\"+a+\");\\n      \"+o+\" end = \"+o+\"(\"+i+\");\\n\\n      void main() {\\n        \"+o+\" outC = getOutputCoords();\\n        if (any(lessThan(outC, start)) || any(greaterThanEqual(outC, end))) {\\n          setOutput(float(\"+n+\"));\\n        } else {\\n          \"+o+\" coords = outC - start;\\n          setOutput(getX(\"+s+\"));\\n        }\\n      }\\n    \":\"\\n        int start = \"+a+\";\\n        int end = \"+i+\";\\n\\n        void main() {\\n          int outC = getOutputCoords();\\n          if (outC < start || outC >= end) {\\n            setOutput(float(\"+n+\"));\\n          } else {\\n            setOutput(getX(outC - start));\\n          }\\n        }\\n      \"},Ls=function(t,e,n){this.variableNames=[\"x\"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e.map((function(e,n){return e[0]+t[n]+e[1]}));for(var r=t.length,o=ui(r),a=e.map((function(t){return t[0]})).join(\",\"),i=e.map((function(e,n){return e[0]+t[n]})).join(\",\"),s=Xa(\"rc\",r),u=Xa(\"source\",r),c=s[r-1]+\" < \"+this.outputShape[r-1],l=1===r?\"source\":\"vec2(\"+u.slice(-2).join()+\")\",h=[o+\" rc = outputLoc;\",s[r-1]+\" += 1;\\n       if(\"+c+\") {\\n      \",1===r?\"\":\"}\\n       rc = outputLoc;\\n       \"+s[r-2]+\" += 1;\\n       if(\"+s[r-2]+\" < \"+this.outputShape[r-2]+\") {\",1===r?\"\":\"  \"+s[r-1]+\" += 1;\\n         if(\"+c+\") {\"],f=1===r?\"rc < start || rc >= end\":\"any(lessThan(rc, start)) || any(greaterThanEqual(rc, end))\",d=\"\",p=0,v=1===r?2:4;p<v;p++)d+=\"\\n        \"+h[p]+\"\\n        if (\"+f+\") {\\n          result[\"+p+\"] = float(\"+n+\");\\n        } else {\\n          \"+o+\" source = rc - start;\\n          result[\"+p+\"] = getChannel(getX(\"+u.join()+\"), \"+l+\");\\n        }\\n      \";d+=1===r?\"} \":\"}}\",this.userCode=\"\\n      const \"+o+\" start = \"+o+\"(\"+a+\");\\n      const \"+o+\" end = \"+o+\"(\"+i+\");\\n\\n      void main() {\\n        \"+o+\" outputLoc = getOutputCoords();\\n        vec4 result = vec4(0.);\\n        \"+d+\"\\n        setOutput(result);\\n      }\\n    \"},Ws=function(t,e,n,r,o){if(void 0===r&&(r=!1),void 0===o&&(o=!1),this.variableNames=[\"x\"],\"avg\"===e&&n)throw new Error(\"Cannot compute positions for average pool.\");var a=t.filterWidth,i=t.strideHeight,s=t.strideWidth,u=t.dilationHeight,c=t.dilationWidth,l=t.effectiveFilterHeight,h=t.effectiveFilterWidth,f=t.padInfo.top,d=t.padInfo.left;this.outputShape=t.outShape;var p=\"avg\"===e,v=\"((batch  * \"+t.inHeight+\" + xR) * \"+t.inWidth+\" + xC) * \"+t.inChannels+\" + d\",g=\"(xR * \"+t.inWidth+\" + xC) * \"+t.inChannels+\" + d\",m=\"0.0\";if(p||(m=\"-1.0 / 1e-20\"),n)this.userCode=\"\\n        const ivec2 strides = ivec2(\"+i+\", \"+s+\");\\n        const ivec2 pads = ivec2(\"+f+\", \"+d+\");\\n\\n        void main() {\\n          ivec4 coords = getOutputCoords();\\n          int batch = coords[0];\\n          int d = coords[3];\\n\\n          ivec2 xRCCorner = coords.yz * strides - pads;\\n          int xRCorner = xRCCorner.x;\\n          int xCCorner = xRCCorner.y;\\n\\n          // max/min x(?, ?, d) to get y(yR, yC, d).\\n          // ? = to be determined\\n          float minMaxValue = 0.0;\\n          float minMaxValueFound = 0.0;\\n          int minMaxPosition = 0;\\n          float avgValue = 0.0;\\n\\n          for (int wR = 0; wR < \"+l+\";\\n              wR += \"+u+\") {\\n            int xR = xRCorner + wR;\\n\\n            if (xR < 0 || xR >= \"+t.inHeight+\") {\\n              continue;\\n            }\\n\\n            for (int wC = 0; wC < \"+h+\";\\n                wC += \"+c+\") {\\n              int xC = xCCorner + wC;\\n\\n              if (xC < 0 || xC >= \"+t.inWidth+\") {\\n                continue;\\n              }\\n\\n              float value = getX(batch, xR, xC, d);\\n\\n              // If a min / max value has already been found, use it. If not,\\n              // use the current value.\\n              float currMinMaxValue = mix(\\n                  value, minMaxValue, minMaxValueFound);\\n              if (value >= currMinMaxValue) {\\n                minMaxValue = value;\\n                minMaxValueFound = 1.0;\\n                minMaxPosition = \"+(r?o?v:g:\"wR * \"+h+\" + wC\")+\";\\n              }\\n            }\\n          }\\n          setOutput(float(minMaxPosition));\\n        }\\n      \";else{var y=e+\"(\"+e+\"(\"+e+\"(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])\";\"avg\"===e&&(y=\"avgValue / count\");var x=4*Math.floor(a/4),b=a%4,w=\"\\n      if (\"+p+\") {\\n        avgValue += dot(values, ones);\\n      } else {\\n        minMaxValue = max(values, minMaxValue);\\n      }\\n    \";this.userCode=\"\\n      const ivec2 strides = ivec2(\"+i+\", \"+s+\");\\n      const ivec2 pads = ivec2(\"+f+\", \"+d+\");\\n      const float initializationValue = \"+m+\";\\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\\n\\n      float count = 0.0;\\n\\n      float getValue(int batch, int xR, int xC, int d) {\\n        if (xC < 0 || xC >= \"+t.inWidth+\") {\\n          return initializationValue;\\n        }\\n        count += 1.0;\\n        return getX(batch, xR, xC, d);\\n      }\\n\\n      void main() {\\n        ivec4 coords = getOutputCoords();\\n        int batch = coords[0];\\n        int d = coords[3];\\n\\n        ivec2 xRCCorner = coords.yz * strides - pads;\\n        int xRCorner = xRCCorner.x;\\n        int xCCorner = xRCCorner.y;\\n\\n        // max/min x(?, ?, d) to get y(yR, yC, d).\\n        // ? = to be determined\\n        vec4 minMaxValue = vec4(\"+m+\");\\n        float avgValue = 0.0;\\n        count = 0.0;\\n\\n        for (int wR = 0; wR < \"+l+\";\\n            wR += \"+u+\") {\\n          int xR = xRCorner + wR;\\n\\n          if (xR < 0 || xR >= \"+t.inHeight+\") {\\n            continue;\\n          }\\n\\n          for (int wC = 0; wC < \"+x+\"; wC += 4) {\\n            int xC = xCCorner + wC * \"+c+\";\\n\\n            vec4 values = vec4(\\n              getValue(batch, xR, xC, d),\\n              getValue(batch, xR, xC + \"+c+\", d),\\n              getValue(batch, xR, xC + 2 * \"+c+\", d),\\n              getValue(batch, xR, xC + 3 * \"+c+\", d)\\n            );\\n\\n            \"+w+\"\\n          }\\n\\n          int xC = xCCorner + \"+x+\";\\n          if (\"+(1===b)+\") {\\n            vec4 values = vec4(\\n              getValue(batch, xR, xC, d),\\n              initializationValue,\\n              initializationValue,\\n              initializationValue\\n            );\\n\\n            \"+w+\"\\n          } else if (\"+(2===b)+\") {\\n            vec4 values = vec4(\\n              getValue(batch, xR, xC, d),\\n              getValue(batch, xR, xC + \"+c+\", d),\\n              initializationValue,\\n              initializationValue\\n            );\\n\\n            \"+w+\"\\n          } else if (\"+(3===b)+\") {\\n            vec4 values = vec4(\\n              getValue(batch, xR, xC, d),\\n              getValue(batch, xR, xC + \"+c+\", d),\\n              getValue(batch, xR, xC + 2 * \"+c+\", d),\\n              initializationValue\\n            );\\n\\n            \"+w+\"\\n          }\\n        }\\n        setOutput(\"+y+\");\\n      }\\n    \"}},Us=function(t,e,n,r,o){if(void 0===r&&(r=!1),void 0===o&&(o=!1),this.variableNames=[\"x\"],\"avg\"===e&&n)throw new Error(\"Cannot compute positions for average pool.\");var a=t.filterWidth,i=t.strideDepth,s=t.strideHeight,u=t.strideWidth,c=t.dilationDepth,l=t.dilationHeight,h=t.dilationWidth,f=t.effectiveFilterDepth,d=t.effectiveFilterHeight,p=t.effectiveFilterWidth,v=t.padInfo.front,g=t.padInfo.top,m=t.padInfo.left;this.outputShape=t.outShape;var y=\"avg\"===e,x=\"0.0\";if(y||(x=\"-1.0 / 1e-20\"),n)this.userCode=\"\\n        const ivec3 strides =\\n            ivec3(\"+i+\", \"+s+\", \"+u+\");\\n        const ivec3 pads = ivec3(\"+v+\", \"+g+\", \"+m+\");\\n\\n        void main() {\\n          ivec5 coords = getOutputCoords();\\n          int batch = coords.x;\\n          int ch = coords.u;\\n\\n          ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\\n          int xDCorner = xCorner.x;\\n          int xRCorner = xCorner.y;\\n          int xCCorner = xCorner.z;\\n\\n          // max/min x(?, ?, ?, ch) to get y(yD, yR, yC, ch).\\n          // ? = to be determined\\n          float minMaxValue = 0.0;\\n          float minMaxValueFound = 0.0;\\n          int minMaxPosition = 0;\\n\\n          for (int wD = 0; wD < \"+f+\";\\n              wD += \"+c+\") {\\n            int xD = xDCorner + wD;\\n\\n            if (xD < 0 || xD >= \"+t.inDepth+\") {\\n              continue;\\n            }\\n\\n            for (int wR = 0; wR < \"+d+\";\\n                wR += \"+l+\") {\\n              int xR = xRCorner + wR;\\n\\n              if (xR < 0 || xR >= \"+t.inHeight+\") {\\n                continue;\\n              }\\n\\n              for (int wC = 0; wC < \"+p+\";\\n                  wC += \"+h+\") {\\n                int xC = xCCorner + wC;\\n\\n                if (xC < 0 || xC >= \"+t.inWidth+\") {\\n                  continue;\\n                }\\n\\n                float value = getX(batch, xD, xR, xC, ch);\\n\\n                // If a min / max value has already been found, use it. If not,\\n                // use the current value.\\n                float currMinMaxValue = mix(\\n                    value, minMaxValue, minMaxValueFound);\\n                if (value >= currMinMaxValue) {\\n                  minMaxValue = value;\\n                  minMaxValueFound = 1.0;\\n                  minMaxPosition = \"+(r?o?\"(((batch * \"+t.inDepth+\" + xD) * \"+t.inHeight+\" + xR) * \"+t.inWidth+\" + xC) * \"+t.inChannels+\" + ch\":\"((xD * \"+t.inHeight+\" + xR) * \"+t.inWidth+\" + xC) * \"+t.inChannels+\" + ch\":\"wD * \"+d+\" * \"+p+\" +\\n                      wR * \"+p+\" + wC\")+\";\\n                }\\n              }\\n            }\\n          }\\n          setOutput(float(minMaxPosition));\\n        }\\n      \";else{var b=e+\"(\"+e+\"(\"+e+\"(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])\";\"avg\"===e&&(b=\"avgValue / count\");var w=4*Math.floor(a/4),C=a%4,E=\"\\n      if (\"+y+\") {\\n        avgValue += dot(values, ones);\\n      } else {\\n        minMaxValue = max(values, minMaxValue);\\n      }\\n    \";this.userCode=\"\\n      const ivec3 strides =\\n        ivec3(\"+i+\", \"+s+\", \"+u+\");\\n      const ivec3 pads = ivec3(\"+v+\", \"+g+\", \"+m+\");\\n      const float initializationValue = \"+x+\";\\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\\n\\n      float count = 0.0;\\n\\n      float getValue(int batch, int xD, int xR, int xC, int ch) {\\n        if (xC < 0 || xC >= \"+t.inWidth+\") {\\n          return initializationValue;\\n        }\\n        count += 1.0;\\n        return getX(batch, xD, xR, xC, ch);\\n      }\\n\\n      void main() {\\n        ivec5 coords = getOutputCoords();\\n        int batch = coords.x;\\n        int ch = coords.u;\\n\\n        ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\\n        int xDCorner = xCorner.x;\\n        int xRCorner = xCorner.y;\\n        int xCCorner = xCorner.z;\\n\\n        // max/min x(?, ?, ?, d) to get y(yD, yR, yC, ch).\\n        // ? = to be determined\\n        vec4 minMaxValue = vec4(\"+x+\");\\n        float avgValue = 0.0;\\n        count = 0.0;\\n\\n        for (int wD = 0; wD < \"+f+\";\\n            wD += \"+c+\") {\\n          int xD = xDCorner + wD;\\n\\n          if (xD < 0 || xD >= \"+t.inDepth+\") {\\n            continue;\\n          }\\n\\n          for (int wR = 0; wR < \"+d+\";\\n            wR += \"+l+\") {\\n            int xR = xRCorner + wR;\\n\\n            if (xR < 0 || xR >= \"+t.inHeight+\") {\\n              continue;\\n            }\\n\\n            for (int wC = 0; wC < \"+w+\"; wC += 4) {\\n              int xC = xCCorner + wC * \"+h+\";\\n\\n              vec4 values = vec4(\\n                getValue(batch, xD, xR, xC, ch),\\n                getValue(batch, xD, xR, xC + \"+h+\", ch),\\n                getValue(batch, xD, xR, xC + 2 * \"+h+\", ch),\\n                getValue(batch, xD, xR, xC + 3 * \"+h+\", ch)\\n              );\\n\\n              \"+E+\"\\n            }\\n\\n            int xC = xCCorner + \"+w+\";\\n            if (\"+(1===C)+\") {\\n              vec4 values = vec4(\\n                getValue(batch, xD, xR, xC, ch),\\n                initializationValue,\\n                initializationValue,\\n                initializationValue\\n              );\\n\\n              \"+E+\"\\n            } else if (\"+(2===C)+\") {\\n              vec4 values = vec4(\\n                getValue(batch, xD, xR, xC, ch),\\n                getValue(batch, xD, xR, xC + \"+h+\", ch),\\n                initializationValue,\\n                initializationValue\\n              );\\n\\n              \"+E+\"\\n            } else if (\"+(3===C)+\") {\\n              vec4 values = vec4(\\n                getValue(batch, xD, xR, xC, ch),\\n                getValue(batch, xD, xR, xC + \"+h+\", ch),\\n                getValue(batch, xD, xR, xC + 2 * \"+h+\", ch),\\n                initializationValue\\n              );\\n\\n              \"+E+\"\\n            }\\n          }\\n          setOutput(\"+b+\");\\n        }\\n      }\\n    \"}},Vs=function(t,e){this.variableNames=[\"x\"];var n=t.windowSize,r=t.batchSize,o=t.inSize,a=Math.ceil(o/n);this.outputShape=[r,a];var i=\"0.0\",s=\"\";\"prod\"===e?i=\"1.0\":\"min\"===e?(i=\"1.0 / 1e-20\",s=\"min\"):\"max\"===e&&(i=\"-1.0 / 1e-20\",s=\"max\");var u=e+\"(\"+e+\"(\"+e+\"(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])\";\"sum\"===e?u=\"sumValue\":\"prod\"===e?u=\"prodValue\":\"all\"===e?u=\"allValue\":\"any\"===e&&(u=\"anyValue\");var c=4*Math.floor(n/4),l=n%4,h=\"\\n      if (\"+(\"sum\"===e)+\") {\\n        sumValue += dot(values, ones);\\n      } else if (\"+(\"prod\"===e)+\") {\\n        vec2 tmp = vec2(values[0], values[1]) * vec2(values[2], values[3]);\\n        prodValue *= tmp[0] * tmp[1];\\n      } else {\\n        minMaxValue = \"+s+\"(values, minMaxValue);\\n      }\\n    \",f=\"vec4\";\"all\"===e?(i=\"1.0\",h=\"\\n        bool reducedAllValue = all(values);\\n        float floatedReducedAllValue = float(reducedAllValue);\\n        allValue = float(allValue >= 1.0 && floatedReducedAllValue >= 1.0);\\n      \",f=\"bvec4\"):\"any\"===e&&(i=\"0.0\",h=\"\\n        bool reducedAnyValue = any(values);\\n        float floatedReducedAnyValue = float(reducedAnyValue);\\n        anyValue = float(anyValue >= 1.0 || floatedReducedAnyValue >= 1.0);\\n      \",f=\"bvec4\");var d=\"\";o%n>0&&(d=\"\\n        if (inIdx < 0 || inIdx >= \"+o+\") {\\n          return initializationValue;\\n        }\\n      \"),this.userCode=\"\\n      const float initializationValue = \"+i+\";\\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\\n\\n      float getValue(int batch, int inIdx) {\\n        \"+d+\"\\n        return getX(batch, inIdx);\\n      }\\n\\n      void main() {\\n        ivec2 coords = getOutputCoords();\\n        int batch = coords[0];\\n        int outIdx = coords[1];\\n        int inOffset = outIdx * \"+n+\";\\n\\n        vec4 minMaxValue = vec4(\"+i+\");\\n        float prodValue = 1.0;\\n        float sumValue = 0.0;\\n        float allValue = 1.0;\\n        float anyValue = 0.0;\\n\\n        for (int i = 0; i < \"+c+\"; i += 4) {\\n          int inIdx = inOffset + i;\\n          \"+f+\" values = \"+f+\"(\\n            getValue(batch, inIdx),\\n            getValue(batch, inIdx + 1),\\n            getValue(batch, inIdx + 2),\\n            getValue(batch, inIdx + 3)\\n          );\\n\\n          \"+h+\"\\n        }\\n\\n        int inIdx = inOffset + \"+c+\";\\n        if (\"+(1===l)+\") {\\n          \"+f+\" values = \"+f+\"(\\n            getValue(batch, inIdx),\\n            initializationValue,\\n            initializationValue,\\n            initializationValue\\n          );\\n\\n          \"+h+\"\\n        } else if (\"+(2===l)+\") {\\n          \"+f+\" values = \"+f+\"(\\n            getValue(batch, inIdx),\\n            getValue(batch, inIdx + 1),\\n            initializationValue,\\n            initializationValue\\n          );\\n\\n          \"+h+\"\\n        } else if (\"+(3===l)+\") {\\n          \"+f+\" values = \"+f+\"(\\n            getValue(batch, inIdx),\\n            getValue(batch, inIdx + 1),\\n            getValue(batch, inIdx + 2),\\n            initializationValue\\n          );\\n\\n          \"+h+\"\\n        }\\n        setOutput(\"+u+\");\\n      }\\n    \"},zs=function(t,e){this.variableNames=[\"A\"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t;for(var n=\"\",r=0;r<4;r++){var o=\"thisRC = rc;\";r%2==1&&(o+=\"thisRC.z += 1;\"),r>1&&(o+=\"thisRC.y += 1;\"),n+=\"\\n        \"+o+\"\\n        \"+(r>0?\"if(thisRC.y < rows && thisRC.z < cols){\":\"\")+\"\\n          int flatIndex = getFlatIndex(thisRC);\\n\\n          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flatIndex);\\n          vec2 inputRCInnerDims = vec2(float(inputRC.y),float(inputRC.z));\\n\\n          result[\"+r+\"] =\\n            getChannel(getA(inputRC.x, inputRC.y, inputRC.z), inputRCInnerDims);\\n        \"+(r>0?\"}\":\"\")+\"\\n      \"}this.userCode=\"\\n      \\n    ivec3 inputCoordsFromReshapedOutCoords(int index) {\\n      \"+$a([\"r\",\"c\",\"d\"],e)+\"\\n      return ivec3(r, c, d);\\n    }\\n  \\n      \"+Qa(t)+\"\\n\\n      void main() {\\n        ivec3 rc = getOutputCoords();\\n\\n        vec4 result = vec4(0.);\\n\\n        ivec3 thisRC;\\n        int rows = \"+t[1]+\";\\n        int cols = \"+t[2]+\";\\n\\n        \"+n+\"\\n\\n        setOutput(result);\\n      }\\n    \"};var Gs=function(t,e,n){this.variableNames=[\"dy\"],this.outputShape=[],this.outputShape=e.shape;var r=e.shape,o=r[1],a=r[2],i=t.shape,s=i[1],u=i[2],c=[n&&s>1?o-1:o,n&&u>1?a-1:a],l=[n&&s>1?s-1:s,n&&u>1?u-1:u],h=c[0]/l[0],f=c[1]/l[1],d=1/h,p=1/f,v=2*Math.ceil(d)+2,g=2*Math.ceil(p)+2;this.userCode=\"\\n      void main() {\\n        ivec4 coords = getOutputCoords();\\n        int b = coords[0];\\n        int d = coords[3];\\n        int r = coords[1];\\n        int c = coords[2];\\n\\n        float accumulator = 0.0;\\n\\n        const float heightScale = float(\"+h+\");\\n        const float widthScale = float(\"+f+\");\\n\\n        const float invHeightScale = float(\"+d+\");\\n        const float invWidthScale = float(\"+p+\");\\n\\n        const int winHeight = int(\"+v+\");\\n        const int winWidth = int(\"+g+\");\\n\\n        // Compute bounds for where in dy we will look\\n        float startRLerp = floor(float(r) * invHeightScale);\\n        int startDyR = int(startRLerp - float(winHeight / 2));\\n\\n        float startCLerp = floor(float(c) * invWidthScale);\\n        int startDyC = int(startCLerp - float(winWidth / 2));\\n\\n        // Loop over dy\\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\\n          int dyR = dyROffset + startDyR;\\n\\n          // Guard against the window exceeding the bounds of dy\\n          if (dyR < 0 || dyR >= \"+s+\") {\\n            continue;\\n          }\\n\\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\\n            int dyC = dyCOffset + startDyC;\\n\\n            // Guard against the window exceeding the bounds of dy\\n            if (dyC < 0 || dyC >= \"+u+\") {\\n              continue;\\n            }\\n\\n            float dxR = float(dyR) * heightScale;\\n            int topDxRIndex = int(floor(dxR));\\n            int bottomDxRIndex = int(min(ceil(dxR), \"+(o-1)+\".0));\\n            float dxRLerp = dxR - float(topDxRIndex);\\n            float inverseDxRLerp = 1.0 - dxRLerp;\\n\\n            float dxC = float(dyC) * widthScale;\\n            int leftDxCIndex = int(floor(dxC));\\n            int rightDxCIndex = int(min(ceil(dxC), \"+(a-1)+\".0));\\n            float dxCLerp = dxC - float(leftDxCIndex);\\n            float inverseDxCLerp = 1.0 - dxCLerp;\\n\\n            if (r == topDxRIndex && c == leftDxCIndex) {\\n              // topLeft\\n              accumulator +=\\n                getDy(b, dyR, dyC, d) * inverseDxRLerp * inverseDxCLerp;\\n            }\\n\\n            if (r == topDxRIndex && c == rightDxCIndex) {\\n              // topRight\\n              accumulator += getDy(b, dyR, dyC, d) * inverseDxRLerp * dxCLerp;\\n            }\\n\\n            if (r == bottomDxRIndex && c == leftDxCIndex) {\\n              // bottomLeft\\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * inverseDxCLerp;\\n            }\\n\\n            if (r == bottomDxRIndex && c == rightDxCIndex) {\\n              // bottomRight\\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * dxCLerp;\\n            }\\n          }\\n        }\\n        // End loop over dy\\n\\n        setOutput(accumulator);\\n      }\\n    \"},Hs=function(t,e,n,r){this.variableNames=[\"A\"],this.outputShape=[];var o=t[0],a=t[1],i=t[2],s=t[3];this.outputShape=[o,e,n,s];var u=[r&&e>1?a-1:a,r&&n>1?i-1:i],c=[r&&e>1?e-1:e,r&&n>1?n-1:n];this.userCode=\"\\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\\n          \"+u[0]/c[0]+\",\\n          \"+u[1]/c[1]+\");\\n      const vec2 inputShapeRC = vec2(\"+a+\".0, \"+i+\".0);\\n\\n      void main() {\\n        ivec4 coords = getOutputCoords();\\n        int b = coords[0];\\n        int d = coords[3];\\n        ivec2 yRC = coords.yz;\\n\\n        // Fractional source index.\\n        vec2 sourceFracIndexRC = vec2(yRC) * effectiveInputOverOutputRatioRC;\\n\\n        // Compute the four integer indices.\\n        ivec2 sourceFloorRC = ivec2(sourceFracIndexRC);\\n        ivec2 sourceCeilRC = ivec2(\\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\\n\\n        float topLeft = getA(b, sourceFloorRC.x, sourceFloorRC.y, d);\\n        float bottomLeft = getA(b, sourceCeilRC.x, sourceFloorRC.y, d);\\n        float topRight = getA(b, sourceFloorRC.x, sourceCeilRC.y, d);\\n        float bottomRight = getA(b, sourceCeilRC.x, sourceCeilRC.y, d);\\n\\n        vec2 fracRC = sourceFracIndexRC - vec2(sourceFloorRC);\\n\\n        float top = topLeft + (topRight - topLeft) * fracRC.y;\\n        float bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;\\n        float newValue = top + (bottom - top) * fracRC.x;\\n\\n        setOutput(newValue);\\n      }\\n    \"},qs=function(t,e,n,r){this.variableNames=[\"A\"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[];var o=t[0],a=t[1],i=t[2],s=t[3];this.outputShape=[o,e,n,s];var u=[r&&e>1?a-1:a,r&&n>1?i-1:i],c=[r&&e>1?e-1:e,r&&n>1?n-1:n];this.userCode=\"\\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\\n          \"+u[0]/c[0]+\",\\n          \"+u[1]/c[1]+\",\\n          \"+u[1]/c[1]+\");\\n      const vec3 inputShapeRC = vec3(\"+a+\".0, \"+i+\".0,\\n                                     \"+i+\".0);\\n\\n      float getAValue(int b, int r, int c, int d) {\\n        return getChannel(getA(b, r, c, d), vec2(c, d));\\n      }\\n\\n      void main() {\\n        ivec4 coords = getOutputCoords();\\n        int b = coords[0];\\n        int d = coords[3];\\n        // Calculate values for next column in yRC.z.\\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\\n\\n        // Fractional source index.\\n        vec3 sourceFracIndexRC = vec3(yRC) * effectiveInputOverOutputRatioRC;\\n\\n        // Compute the four integer indices.\\n        ivec3 sourceFloorRC = ivec3(sourceFracIndexRC);\\n        ivec3 sourceCeilRC = ivec3(\\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\\n\\n        // Should we calculate next column and row elements in 2x2 packed cell.\\n        bool hasNextCol = d < \"+(s-1)+\";\\n        bool hasNextRow = coords.z < \"+(n-1)+\";\\n\\n        // In parallel, construct four corners for all four components in\\n        // packed 2x2 cell.\\n        vec4 topLeft = vec4(\\n          getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d),\\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d + 1)\\n                     : 0.0,\\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d)\\n                     : 0.0,\\n          (hasNextRow && hasNextCol) ?\\n            getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d + 1) : 0.0);\\n\\n        vec4 bottomLeft = vec4(\\n          getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d),\\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d + 1)\\n                     : 0.0,\\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d)\\n                     : 0.0,\\n          (hasNextRow && hasNextCol) ?\\n            getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d + 1) : 0.0);\\n\\n        vec4 topRight = vec4(\\n          getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d),\\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d + 1)\\n                     : 0.0,\\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d)\\n                     : 0.0,\\n          (hasNextRow && hasNextCol) ?\\n            getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d + 1) : 0.0);\\n\\n        vec4 bottomRight = vec4(\\n          getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d),\\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d + 1)\\n                     : 0.0,\\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d)\\n                     : 0.0,\\n          (hasNextRow && hasNextCol) ?\\n            getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d + 1) : 0.0);\\n\\n        vec3 fracRC = sourceFracIndexRC - vec3(sourceFloorRC);\\n\\n        vec4 top = mix(topLeft, topRight, fracRC.yyzz);\\n        vec4 bottom = mix(bottomLeft, bottomRight, fracRC.yyzz);\\n        vec4 newValue = mix(top, bottom, fracRC.x);\\n\\n        setOutput(newValue);\\n      }\\n    \"},Ks=function(t,e,n){this.variableNames=[\"dy\"],this.outputShape=[],this.outputShape=e.shape;var r=e.shape,o=r[1],a=r[2],i=t.shape,s=i[1],u=i[2],c=[n&&s>1?o-1:o,n&&u>1?a-1:a],l=[n&&s>1?s-1:s,n&&u>1?u-1:u],h=c[0]/l[0],f=c[1]/l[1],d=1/h,p=1/f,v=2*Math.ceil(d)+2,g=2*Math.ceil(p)+2;this.userCode=\"\\n      void main() {\\n        ivec4 coords = getOutputCoords();\\n        int b = coords[0];\\n        int d = coords[3];\\n        int r = coords[1];\\n        int c = coords[2];\\n\\n        float accumulator = 0.0;\\n\\n        const float heightScale = float(\"+h+\");\\n        const float widthScale = float(\"+f+\");\\n\\n        const float invHeightScale = float(\"+d+\");\\n        const float invWidthScale = float(\"+p+\");\\n\\n        const int winHeight = int(\"+v+\");\\n        const int winWidth = int(\"+g+\");\\n\\n        // Compute bounds for where in dy we will look\\n        float startRLerp = floor(float(r) * invHeightScale);\\n        int startDyR = int(floor(startRLerp - float(winHeight / 2)));\\n\\n        float startCLerp = floor(float(c) * invWidthScale);\\n        int startDyC = int(floor(startCLerp - float(winWidth / 2)));\\n\\n        // Loop over dy\\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\\n          int dyR = dyROffset + startDyR;\\n\\n          // Guard against the window exceeding the bounds of dy\\n          if (dyR < 0 || dyR >= \"+s+\") {\\n            continue;\\n          }\\n\\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\\n            int dyC = dyCOffset + startDyC;\\n\\n            // Guard against the window exceeding the bounds of dy\\n            if (dyC < 0 || dyC >= \"+u+\") {\\n              continue;\\n            }\\n\\n            float sourceFracRow =\\n              float(\"+c[0]+\") *\\n                (float(dyR) / float(\"+l[0]+\"));\\n\\n            float sourceFracCol =\\n                float(\"+c[1]+\") *\\n                  (float(dyC) / float(\"+l[1]+\"));\\n\\n            int sourceNearestRow = int(min(\\n                float(int(\"+o+\") - 1),\\n                \"+n+\" ? float(round(sourceFracRow)) :\\n                                  float(floor(sourceFracRow))));\\n\\n            int sourceNearestCol = int(min(\\n                float(int(\"+a+\") - 1),\\n                \"+n+\" ? float(round(sourceFracCol)) :\\n                                  float(floor(sourceFracCol))));\\n\\n            if (r == sourceNearestRow && c == sourceNearestCol) {\\n              accumulator += getDy(b, dyR, dyC, d);\\n            }\\n          }\\n        }\\n        // End loop over dy\\n\\n        setOutput(accumulator);\\n      }\\n    \"},js=function(t,e,n,r){this.variableNames=[\"A\"],this.outputShape=[];var o=t[0],a=t[1],i=t[2],s=t[3];this.outputShape=[o,e,n,s];var u=[r&&e>1?a-1:a,r&&n>1?i-1:i],c=[r&&e>1?e-1:e,r&&n>1?n-1:n],l=r?\"0.5\":\"0.0\";this.userCode=\"\\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\\n          \"+u[0]/c[0]+\",\\n          \"+u[1]/c[1]+\");\\n      const vec2 inputShapeRC = vec2(\"+a+\".0, \"+i+\".0);\\n\\n      void main() {\\n        ivec4 coords = getOutputCoords();\\n        int b = coords[0];\\n        int d = coords[3];\\n        ivec2 yRC = coords.yz;\\n\\n        // Fractional source index.\\n        vec2 sourceFracIndexRC = vec2(yRC) * effectiveInputOverOutputRatioRC;\\n\\n        // Compute the coordinators of nearest neighbor point.\\n        ivec2 sourceNearestRC = ivec2(\\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + \"+l+\")));\\n\\n        float newValue = getA(b, sourceNearestRC.x, sourceNearestRC.y, d);\\n\\n        setOutput(newValue);\\n      }\\n    \"},Xs=function(t,e){this.variableNames=[\"x\"];var n=t.length;if(n>4)throw new Error(\"WebGL backend: Reverse of rank-\"+n+\" tensor is not yet supported\");if(this.outputShape=t,1!==n){var r=t.map((function(n,r){return function(n){return-1!==e.indexOf(n)&&1!==t[n]?t[n]+\" - coords[\"+n+\"] - 1\":\"coords[\"+n+\"]\"}(r)})).join(\",\"),o=ui(n);this.userCode=\"\\n      void main() {\\n        \"+o+\" coords = getOutputCoords();\\n        setOutput(getX(\"+r+\"));\\n      }\\n    \"}else this.userCode=\"\\n        void main() {\\n          int coord = getOutputCoords();\\n          setOutput(getX(\"+t[0]+\" - coord - 1));\\n        }\\n      \"},Ys=function(t,e){this.variableNames=[\"x\"],this.packedInputs=!0,this.packedOutput=!0;var n=t.length;if(n>4)throw new Error(\"WebGL backend: Reverse of rank-\"+n+\" tensor is not yet supported\");this.outputShape=t;var r=Xa(\"rc\",n),o=r[n-1]+\" + 1 < \"+this.outputShape[n-1],a=r[n-2]+\" + 1 < \"+this.outputShape[n-2],i=ui(n);function s(n){var r=t.map((function(r,o){return function(n,r){return-1!==e.indexOf(n)&&1!==t[n]?t[n]+\" - \"+r[n]+\" - 1\":\"\"+r[n]}(o,n)}));return\"getChannel(getX(\"+r.join(\",\")+\"), vec2(\"+r.slice(-2).join(\",\")+\"))\"}this.userCode=1===n?\"\\n        void main(){\\n          int rc = getOutputCoords();\\n          vec4 result = vec4(0.);\\n          result.r = getChannel(getX(\"+t[0]+\" - rc - 1),\\n            \"+t[0]+\" - rc - 1);\\n          if(\"+o+\"){\\n              result.g = getChannel(getX(\"+t[0]+\" - (rc  + 1) - 1),\\n                \"+t[0]+\" - (rc  + 1) - 1);\\n          }\\n          setOutput(result);\\n        }\\n      \":\"\\n        void main() {\\n          \"+i+\" rc = getOutputCoords();\\n          vec4 result = vec4(0.);\\n          result.r = \"+function(t){return s(t)}(r.slice())+\";\\n          if(\"+o+\"){\\n            result.g = \"+function(t){return t[n-1]=\"(\"+t[n-1]+\" + 1)\",s(t)}(r.slice())+\";\\n          }\\n          if(\"+a+\") {\\n            result.b = \"+function(t){return t[n-2]=\"(\"+t[n-2]+\" + 1)\",s(t)}(r.slice())+\";\\n            if(\"+o+\") {\\n              result.a = \"+function(t){return t[n-1]=\"(\"+t[n-1]+\" + 1)\",t[n-2]=\"(\"+t[n-2]+\" + 1)\",s(t)}(r.slice())+\";\\n            }\\n          }\\n          setOutput(result);\\n        }\\n    \"},$s=function(t,e,n,r,o,a,i){void 0===i&&(i=!0),this.variableNames=[\"updates\",\"indices\",\"defaultValue\"],this.outputShape=a;var s=ui(o.length),u=ui(a.length),c=\"\";1===n?c=\"i\":2===n&&(c=\"i, j\");var l=\"getIndices(\"+c+\")\",h=\"\";1===r?h=\"i\":2===r&&(h=\"i, coords[1]\");var f=\"getUpdates(\"+h+\")\",d=e>1?\"strides[j]\":\"strides\";this.userCode=\"\\n        \"+s+\" strides = \"+s+\"(\"+o+\");\\n\\n        void main() {\\n          \"+u+\" coords = getOutputCoords();\\n          float sum = 0.0;\\n          bool found = false;\\n          for (int i = 0; i < \"+t+\"; i++) {\\n            int flattenedIndex = 0;\\n            for (int j = 0; j < \"+e+\"; j++) {\\n              int index = round(\"+l+\");\\n              flattenedIndex += index * \"+d+\";\\n            }\\n            if (flattenedIndex == coords[0]) {\\n              sum += \"+f+\";\\n              found = true;\\n            }\\n          }\\n          setOutput(mix(getDefaultValue(), sum, float(found)));\\n        }\\n      \"},Qs=function(t,e){this.variableNames=[\"x\",\"segmentIds\"];var n=t.windowSize,r=t.batchSize,o=t.inSize,a=t.numSegments,i=a*Math.ceil(o/n);this.outputShape=[r,i];var s=4*Math.floor(n/4),u=n%4,c=\"\\n        sumValue += dot(values, segFilter);\\n    \",l=\"\";o%n>0&&(l=\"\\n        if (inIdx < 0 || inIdx >= \"+o+\") {\\n          return initializationValue;\\n        }\\n      \");var h=\"\";o%n>0&&(h=\"\\n        if (inIdx < 0 || inIdx >= \"+o+\") {\\n          return -1.0;\\n        }\\n      \"),this.userCode=\"\\n      const float initializationValue = 0.0;\\n\\n      float getValue(int batch, int inIdx) {\\n        \"+l+\"\\n        return getX(batch, inIdx);\\n      }\\n\\n      float getSegmentIdAtIndex(int inIdx) {\\n        \"+h+\"\\n        return getSegmentIds(inIdx);\\n      }\\n\\n      void main() {\\n        ivec2 coords = getOutputCoords();\\n        int batch = coords[0];\\n        int outIdx = coords[1];\\n        int inOffset = int(floor(float(outIdx) / float(\\n          \"+a+\")) * float(\"+n+\"));\\n        int currentSeg = int(mod(float(outIdx), float(\"+a+\")));\\n\\n        float sumValue = 0.0;\\n\\n        for (int i = 0; i < \"+s+\"; i += 4) {\\n          int inIdx = inOffset + i;\\n          vec4 values = vec4(\\n            getValue(batch, inIdx),\\n            getValue(batch, inIdx + 1),\\n            getValue(batch, inIdx + 2),\\n            getValue(batch, inIdx + 3)\\n          );\\n\\n          vec4 segFilter = vec4(\\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\\n            int(getSegmentIdAtIndex(inIdx + 3)) == currentSeg ? 1 : 0\\n          );\\n\\n          \"+c+\"\\n        }\\n\\n        int inIdx = inOffset + \"+s+\";\\n        if (\"+(1===u)+\") {\\n          vec4 values = vec4(\\n            getValue(batch, inIdx),\\n            initializationValue,\\n            initializationValue,\\n            initializationValue\\n          );\\n\\n          int inIdxSeg = int(getSegmentIdAtIndex(inIdx));\\n\\n          vec4 segFilter = vec4(\\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\\n            0,\\n            0,\\n            0\\n          );\\n\\n          \"+c+\"\\n        } else if (\"+(2===u)+\") {\\n          vec4 values = vec4(\\n            getValue(batch, inIdx),\\n            getValue(batch, inIdx + 1),\\n            initializationValue,\\n            initializationValue\\n          );\\n\\n          vec4 segFilter = vec4(\\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\\n              0,\\n              0\\n          );\\n\\n          \"+c+\"\\n        } else if (\"+(3===u)+\") {\\n          vec4 values = vec4(\\n            getValue(batch, inIdx),\\n            getValue(batch, inIdx + 1),\\n            getValue(batch, inIdx + 2),\\n            initializationValue\\n          );\\n\\n          vec4 segFilter = vec4(\\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\\n            0\\n          );\\n\\n          \"+c+\"\\n        }\\n        setOutput(sumValue);\\n      }\\n    \"},Js=function(t,e,n){var r,o;if(this.variableNames=[\"c\",\"a\",\"b\"],this.outputShape=e,n>4)throw Error(\"Where for rank \"+n+\" is not yet supported\");if(1===n)o=\"resRC\",r=\"resRC\";else{for(var a=[\"resRC.x\",\"resRC.y\",\"resRC.z\",\"resRC.w\"],i=[],s=[],u=0;u<e.length;u++)s.push(\"\"+a[u]),u<t&&i.push(\"\"+a[u]);r=i.join(),o=s.join()}var c=ui(n);this.userCode=\"\\n      void main() {\\n        \"+c+\" resRC = getOutputCoords();\\n        float cVal = getC(\"+r+\");\\n        if (cVal >= 1.0) {\\n          setOutput(getA(\"+o+\"));\\n        } else {\\n          setOutput(getB(\"+o+\"));\\n        }\\n      }\\n    \"},Zs=function(){function t(t){this.variableNames=[\"source\"],this.outputShape=t,this.rank=t.length;var e,n=ui(this.rank),r=\"uniform int start[\"+this.rank+\"];\",o=function(t){if(1===t)return\"sourceLoc\";if(t<=6)return tu.slice(0,t).map((function(t){return\"sourceLoc.\"+t})).join(\",\");throw Error(\"Slicing for rank \"+t+\" is not yet supported\")}(this.rank);e=\"\\n        \"+n+\" sourceLoc;\\n        \"+n+\" coords = getOutputCoords();\\n        \"+t.map((function(t,e){return\"sourceLoc.\"+tu[e]+\" = start[\"+e+\"] + coords.\"+tu[e]+\";\"})).join(\"\\n\")+\"\\n      \",this.userCode=\"\\n      \"+r+\"\\n      void main() {\\n        \"+e+\"\\n        setOutput(getSource(\"+o+\"));\\n      }\\n    \"}return t.prototype.getCustomSetupFunc=function(t){var e=this;if(t.length!==this.rank)throw Error(\"The rank (\"+this.rank+\") of the program must match the length of start (\"+t.length+\")\");return function(n,r){null==e.startLoc&&(e.startLoc=n.getUniformLocationNoThrow(r,\"start\"),null==e.startLoc)||n.gl.uniform1iv(e.startLoc,t)}},t}(),tu=[\"x\",\"y\",\"z\",\"w\",\"u\",\"v\"];var eu=function(){function t(t){this.variableNames=[\"source\"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t,this.rank=t.length;var e=ui(this.rank),n=Xa(\"coords\",this.rank),r=Xa(\"sourceLoc\",this.rank),o=1===this.rank?\"sourceLoc\":\"vec2(\"+r.slice(-2).join()+\")\",a=\"getChannel(getSource(\"+r.join()+\"), \"+o+\")\",i=\"\\n      result.x = \"+a+\";\\n      if (++\"+n[this.rank-1]+\" < \"+t[this.rank-1]+\") {\\n        ++\"+r[this.rank-1]+\";\\n        result.y = \"+a+\";\\n        --\"+r[this.rank-1]+\";\\n      }\\n    \",s=1===this.rank?\"\":\"\\n      --\"+n[this.rank-1]+\";\\n      if (++\"+n[this.rank-2]+\" < \"+t[this.rank-2]+\") {\\n        ++\"+r[this.rank-2]+\";\\n        result.z = \"+a+\";\\n        if (++\"+n[this.rank-1]+\" < \"+t[this.rank-1]+\") {\\n          ++\"+r[this.rank-1]+\";\\n          result.w = \"+a+\";\\n        }\\n      }\\n    \",u=this.rank<=4?\"sourceLoc = coords +\\n            \"+e+\"(\"+t.map((function(t,e){return\"start[\"+e+\"]\"})).join()+\");\":t.map((function(t,e){return r[e]+\" = \"+n[e]+\" + start[\"+e+\"];\"})).join(\"\\n\");this.userCode=\"\\n      uniform int start[\"+this.rank+\"];\\n      void main() {\\n        \"+e+\" coords = getOutputCoords();\\n        \"+e+\" sourceLoc;\\n        \"+u+\"\\n        vec4 result = vec4(0.);\\n        \"+i+\"\\n        \"+s+\"\\n        setOutput(result);\\n      }\\n    \"}return t.prototype.getCustomSetupFunc=function(t){var e=this;if(t.length!==this.rank)throw Error(\"The rank (\"+this.rank+\") of the program must match the length of start (\"+t.length+\")\");return function(n,r){null==e.startLoc&&(e.startLoc=n.getUniformLocationNoThrow(r,\"start\"),null==e.startLoc)||n.gl.uniform1iv(e.startLoc,t)}},t}(),nu=function(t,e,n){this.variableNames=[\"x\"],this.outputShape=n;var r=n.length,o=ui(n.length),a=ui(n.length),i=\"\";if(1===r)i=\"coords * strides + begin\";else{var s=0;i=n.map((function(t,e){return s++,1===n.length?\"coords * strides[\"+e+\"] + begin[\"+e+\"]\":\"coords[\"+(s-1)+\"] * strides[\"+e+\"] + begin[\"+e+\"]\"})).join(\",\")}this.userCode=\"\\n      \"+o+\" begin = \"+o+\"(\"+t+\");\\n      \"+o+\" strides = \"+o+\"(\"+e+\");\\n\\n      void main() {\\n        \"+a+\" coords = getOutputCoords();\\n        setOutput(getX(\"+i+\"));\\n      }\\n    \"},ru=function(){function t(t){this.gpgpu=t,this.numUsedTextures=0,this.numFreeTextures=0,this.freeTextures={},this.logEnabled=!1,this.usedTextures={}}return t.prototype.acquireTexture=function(t,e,n){var r,o=ou(e,n),a=au(t,o,n);if(a in this.freeTextures||(this.freeTextures[a]=[]),a in this.usedTextures||(this.usedTextures[a]=[]),this.freeTextures[a].length>0){this.numFreeTextures--,this.numUsedTextures++,this.log();var i=this.freeTextures[a].shift();return this.usedTextures[a].push(i),i}return this.numUsedTextures++,this.log(),o===Gt.PACKED_2X2_FLOAT32?r=this.gpgpu.createPackedMatrixTexture(t[0],t[1]):o===Gt.PACKED_2X2_FLOAT16?r=this.gpgpu.createFloat16PackedMatrixTexture(t[0],t[1]):o===Gt.UNPACKED_FLOAT32?r=this.gpgpu.createFloat32MatrixTexture(t[0],t[1]):o===Gt.UNPACKED_FLOAT16?r=this.gpgpu.createFloat16MatrixTexture(t[0],t[1]):o===Gt.PACKED_4X1_UNSIGNED_BYTE&&(r=this.gpgpu.createUnsignedBytesMatrixTexture(t[0],t[1])),this.usedTextures[a].push(r),r},t.prototype.releaseTexture=function(t,e,n,r){if(null!=this.freeTextures){var o=au(e,ou(n,r),r);o in this.freeTextures||(this.freeTextures[o]=[]),this.freeTextures[o].push(t),this.numFreeTextures++,this.numUsedTextures--;var a=this.usedTextures[o],i=a.indexOf(t);if(i<0)throw new Error(\"Cannot release a texture that was never provided by this texture manager\");a.splice(i,1),this.log()}},t.prototype.log=function(){if(this.logEnabled){var t=this.numFreeTextures+this.numUsedTextures;console.log(\"Free/Used\",this.numFreeTextures+\" / \"+this.numUsedTextures,\"(\"+t+\")\")}},t.prototype.getNumUsedTextures=function(){return this.numUsedTextures},t.prototype.getNumFreeTextures=function(){return this.numFreeTextures},t.prototype.dispose=function(){var t=this;if(null!=this.freeTextures){for(var e in this.freeTextures)this.freeTextures[e].forEach((function(e){t.gpgpu.deleteMatrixTexture(e)}));for(var e in this.usedTextures)this.usedTextures[e].forEach((function(e){t.gpgpu.deleteMatrixTexture(e)}));this.freeTextures=null,this.usedTextures=null,this.numUsedTextures=0,this.numFreeTextures=0}},t}();function ou(t,e){if(t===zt.UPLOAD)return Gt.PACKED_2X2_FLOAT32;if(t===zt.RENDER||null==t)return function(t){return i().getBool(\"WEBGL_RENDER_FLOAT32_ENABLED\")?t?Gt.PACKED_2X2_FLOAT32:Gt.UNPACKED_FLOAT32:t?Gt.PACKED_2X2_FLOAT16:Gt.UNPACKED_FLOAT16}(e);if(t===zt.DOWNLOAD||t===zt.PIXELS)return Gt.PACKED_4X1_UNSIGNED_BYTE;throw new Error(\"Unknown logical texture type \"+t)}function au(t,e,n){return t[0]+\"_\"+t[1]+\"_\"+e+\"_\"+n}var iu=function(t,e){this.variableNames=[\"A\"];for(var n=new Array(t.length),r=0;r<n.length;r++)n[r]=t[r]*e[r];this.outputShape=n,this.rank=n.length;var o=ui(this.rank),a=function(t){var e=t.length;if(e>5)throw Error(\"Tile for rank \"+e+\" is not yet supported\");if(1===e)return\"imod(resRC, \"+t[0]+\")\";for(var n=[\"resRC.x\",\"resRC.y\",\"resRC.z\",\"resRC.w\",\"resRC.u\"],r=[],o=0;o<t.length;o++)r.push(\"imod(\"+n[o]+\", \"+t[o]+\")\");return r.join()}(t);this.userCode=\"\\n      void main() {\\n        \"+o+\" resRC = getOutputCoords();\\n        setOutput(getA(\"+a+\"));\\n      }\\n    \"};var su=1.7580993408473768,uu=1.0507009873554805,cu=function(t,e){this.variableNames=[\"A\"],this.outputShape=t,this.userCode=\"\\n      float unaryOperation(float x) {\\n        \"+e+\"\\n      }\\n\\n      void main() {\\n        float x = getAAtOutCoords();\\n        float y = unaryOperation(x);\\n\\n        setOutput(y);\\n      }\\n    \"},lu=\"if (isnan(x)) return x;\",hu=\"return x;\",fu=\"return abs(x);\",du=lu+\"\\n  return (x < 0.0) ? 0.0 : x;\\n\",pu=lu+\"\\n  return (x < 0.0) ? 0.0 : min(6.0, x);\\n\",vu=\"return (x >= 0.0) ? x : (exp(x) - 1.0);\",gu=\"\\n  // Stable and Attracting Fixed Point (0, 1) for Normalized Weights.\\n  // see: https://arxiv.org/abs/1706.02515\\n  float scaleAlpha = \"+su+\";\\n  float scale = \"+uu+\";\\n  return (x >= 0.0) ? scale * x : scaleAlpha * (exp(x) - 1.0);\\n\";var mu=\"return -x;\",yu=\"return ceil(x);\",xu=\"return floor(x);\",bu=\"return exp(x);\",wu=\"return exp(x) - 1.0;\",Cu=lu+\"\\n  return sin(x);\\n\",Eu=lu+\"\\n  return cos(x);\\n\",Ru=lu+\"\\n  if (abs(x) > 1.) {\\n    return NAN;\\n  }\\n  return asin(x);\\n\",Iu=lu+\"\\n  if (abs(x) > 1.) {\\n    return NAN;\\n  }\\n  return acos(x);\\n\",ku=lu+\"\\n  return atan(x);\\n\",Su=lu+\"return log(x + sqrt(x * x + 1.0));\",Au=lu+\"\\n  if (x < 1.0) return NAN;\\n  return log(x + sqrt(x * x - 1.0));\",Tu=lu+\"\\n  if ((x < -1.0) || (x > 1.0)) return NAN;\\n  return (log(1.0 + x) - log(1.0 - x)) / 2.0;\",Du=\"return x;\",Nu=\"return x;\",Fu=\"\\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\\n  bvec4 isNaN = isnan(x);\\n\\n  result.r = isNaN.r ? x.r : result.r;\\n  result.g = isNaN.g ? x.g : result.g;\\n  result.b = isNaN.b ? x.b : result.b;\\n  result.a = isNaN.a ? x.a : result.a;\\n\\n  return result;\\n\",_u=\"\\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\\n  bvec4 isNaN = isnan(x);\\n\\n  result.r = isNaN.r ? x.r : result.r;\\n  result.g = isNaN.g ? x.g : result.g;\\n  result.b = isNaN.b ? x.b : result.b;\\n  result.a = isNaN.a ? x.a : result.a;\\n\\n  return result;\\n\",Ou=\"\\n  vec4 result;\\n\\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\\n\\n  return result;\\n\",Mu=function(t,e){this.variableNames=[\"A\"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t,this.userCode=\"\\n      vec4 unaryOperation(vec4 x) {\\n        \"+e+\"\\n      }\\n\\n      void main() {\\n        vec4 x = getAAtOutCoords();\\n        vec4 y = unaryOperation(x);\\n\\n        setOutput(y);\\n      }\\n    \"},Bu=function(t){this.variableNames=[\"A\"],this.packedInputs=!0,this.packedOutput=!1,this.outputShape=t;var e=t.length,n=Xa(\"rc\",e),r=ui(e),o=function(t,e){if(1===t)return\"rc\";for(var n=\"\",r=0;r<t;r++)n+=e[r],r<t-1&&(n+=\",\");return n}(e,n),a=n.slice(-2),i=e<=1?\"rc\":\"vec2(\"+a.join(\",\")+\")\";this.userCode=\"\\n      void main() {\\n        \"+r+\" rc = getOutputCoords();\\n        vec4 packedInput = getA(\"+o+\");\\n\\n        setOutput(getChannel(packedInput, \"+i+\"));\\n      }\\n    \"},Pu={};function Lu(t,e){if(void 0===e&&(e=!1),\"linear\"===t)return e?Nu:hu;if(\"relu\"===t)return e?Fu:du;if(\"elu\"===t)return e?Ou:vu;if(\"relu6\"===t)return e?_u:pu;if(\"prelu\"===t)return e?ki:Ei;throw new Error(\"Activation \"+t+\" has not been implemented for the WebGL backend.\")}var Wu=600;var Uu=function(t){function o(e){var n,r=t.call(this)||this;if(r.pendingRead=new WeakMap,r.pendingDisposal=new WeakSet,r.dataRefCount=new WeakMap,r.numBytesInGPU=0,r.uploadWaitMs=0,r.downloadWaitMs=0,r.warnedAboutMemory=!1,r.pendingDeletes=0,r.disposed=!1,!i().getBool(\"HAS_WEBGL\"))throw new Error(\"WebGL is not supported on this device\");if(null==e){var o=jt(i().getNumber(\"WEBGL_VERSION\"));r.binaryCache=(n=i().getNumber(\"WEBGL_VERSION\"))in Pu?Pu[n]:(Pu[n]={},Pu[n]),r.gpgpu=new Is(o),r.canvas=o.canvas,r.gpgpuCreatedLocally=!0}else r.gpgpu=e,r.binaryCache={},r.gpgpuCreatedLocally=!1,r.canvas=e.gl.canvas;return r.textureManager=new ru(r.gpgpu),r.numMBBeforeWarning=null==i().global.screen?1024:i().global.screen.height*i().global.screen.width*window.devicePixelRatio*Wu/1024/1024,r.texData=new ca(r,Lt),r}return e(o,t),o.prototype.numDataIds=function(){return this.texData.numDataIds()+(this.cpuBackend?this.cpuBackend.numDataIds():0)-this.pendingDeletes},o.prototype.write=function(t,e,n){if(i().getBool(\"DEBUG\")&&this.checkNumericalProblems(t),\"complex64\"===n&&null!=t)throw new Error(\"Cannot write to a complex64 dtype. Please use tf.complex(real, imag).\");var r={};return this.texData.set(r,{shape:e,dtype:n,values:t,usage:zt.UPLOAD}),r},o.prototype.move=function(t,e,n,r){if(i().getBool(\"DEBUG\")&&this.checkNumericalProblems(e),\"complex64\"===r)throw new Error(\"Cannot write to a complex64 dtype. Please use tf.complex(real, imag).\");this.texData.set(t,{shape:n,dtype:r,values:e,usage:zt.UPLOAD})},o.prototype.readSync=function(t){var e=this.texData.get(t),n=e.values,r=e.dtype,o=e.complexTensors,a=e.slice,i=e.shape,s=e.isPacked;if(null!=a){var u=void 0;u=s?new Mu(i,Du):new cu(i,Du);var c=this.runWebGLProgram(u,[{dataId:t,shape:i,dtype:r}],r),l=this.readSync(c.dataId);return this.disposeData(c.dataId),l}if(null!=n)return this.convertAndCacheOnCPU(t);if(\"string\"===r)return n;var h,f,d=null!=this.activeTimers;(d&&(h=et()),\"complex64\"===r)?f=Aa(o.real.dataSync(),o.imag.dataSync()):f=this.getValuesFromTexture(t);return d&&(this.downloadWaitMs+=et()-h),this.convertAndCacheOnCPU(t,f)},o.prototype.read=function(t){return n(this,void 0,void 0,(function(){var e,n,o,a,s,u,c,l,h,f,d,p,v,g,m,y,x,b,w,C,E,R;return r(this,(function(r){switch(r.label){case 0:if(this.pendingRead.has(t))return e=this.pendingRead.get(t),[2,new Promise((function(t){return e.push(t)}))];if(n=this.texData.get(t),o=n.values,a=n.shape,s=n.slice,u=n.dtype,c=n.complexTensors,l=n.isPacked,null!=s)return h=void 0,h=l?new Mu(a,Du):new cu(a,Du),f=this.runWebGLProgram(h,[{dataId:t,shape:a,dtype:u}],u),d=this.read(f.dataId),this.disposeData(f.dataId),[2,d];if(null!=o)return[2,this.convertAndCacheOnCPU(t)];if(!i().getBool(\"WEBGL_DOWNLOAD_FLOAT_ENABLED\")&&2===i().getNumber(\"WEBGL_VERSION\"))throw new Error(\"tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and WEBGL_VERSION=2 not yet supported.\");return p=null,\"complex64\"!==u&&i().get(\"WEBGL_BUFFER_SUPPORTED\")&&(v=this.decode(t),g=this.texData.get(v.dataId),p=(R=this.gpgpu).createBufferFromTexture.apply(R,[g.texture].concat(Yt(a)))),this.pendingRead.set(t,[]),\"complex64\"===u?[3,2]:[4,this.gpgpu.createAndWaitForFence()];case 1:r.sent(),r.label=2;case 2:return\"complex64\"!==u?[3,4]:[4,Promise.all([c.real.data(),c.imag.data()])];case 3:return y=r.sent(),x=y[0],b=y[1],m=Aa(x,b),[3,5];case 4:null==p?m=this.getValuesFromTexture(t):(w=k(a),m=this.gpgpu.downloadFloat32MatrixFromBuffer(p,w)),r.label=5;case 5:return null!=v&&this.disposeData(v.dataId),C=this.convertAndCacheOnCPU(t,m),E=this.pendingRead.get(t),this.pendingRead.delete(t),E.forEach((function(t){return t(C)})),this.pendingDisposal.has(t)&&(this.pendingDisposal.delete(t),this.disposeData(t),this.pendingDeletes--),[2,C]}}))}))},o.prototype.checkNumericalProblems=function(t){if(null!=t)for(var e=0;e<t.length;e++){var n=t[e];if(!ee(n)){if(i().getBool(\"WEBGL_RENDER_FLOAT32_CAPABLE\"))throw Error(\"The value \"+n+\" cannot be represented with your current settings. Consider enabling float32 rendering: 'tf.env().set('WEBGL_RENDER_FLOAT32_ENABLED', true);'\");throw Error(\"The value \"+n+\" cannot be represented on this device.\")}}},o.prototype.getValuesFromTexture=function(t){var e,n=this.texData.get(t),r=n.shape,o=n.dtype,a=n.isPacked,s=k(r);if(i().getBool(\"WEBGL_DOWNLOAD_FLOAT_ENABLED\")){var u=this.decode(t),c=this.texData.get(u.dataId),l=(e=this.gpgpu).downloadMatrixFromPackedTexture.apply(e,[c.texture].concat(Yt(r))).subarray(0,s);return this.disposeData(u.dataId),l}var h=i().getBool(\"WEBGL_PACK\")&&!0===a,f=h?De(r):r,d=h?new Ji(f):new Qi(f),p=this.runWebGLProgram(d,[{shape:f,dtype:o,dataId:t}],\"float32\"),v=this.texData.get(p.dataId),g=this.gpgpu.downloadByteEncodedFloatMatrixFromOutputTexture(v.texture,v.texShape[0],v.texShape[1]).subarray(0,s);return this.disposeData(p.dataId),g},o.prototype.time=function(t){return n(this,void 0,void 0,(function(){var e,n,o,a,s,u,c;return r(this,(function(r){switch(r.label){case 0:return e=this.activeTimers,n=[],o=!1,null==this.programTimersStack?(this.programTimersStack=n,o=!0):this.activeTimers.push(n),this.activeTimers=n,t(),a=I(this.activeTimers.map((function(t){return t.query}))).filter((function(t){return null!=t})),s=I(this.activeTimers.map((function(t){return t.name}))).filter((function(t){return null!=t})),this.activeTimers=e,o&&(this.programTimersStack=null),u={uploadWaitMs:this.uploadWaitMs,downloadWaitMs:this.downloadWaitMs,kernelMs:null,wallMs:null},i().getNumber(\"WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE\")>0?[4,Promise.all(a)]:[3,2];case 1:return c=r.sent(),u.kernelMs=w(c),u.getExtraProfileInfo=function(){return c.map((function(t,e){return{name:s[e],ms:t}})).map((function(t){return t.name+\": \"+t.ms})).join(\", \")},[3,3];case 2:u.kernelMs={error:\"WebGL query timers are not supported in this environment.\"},r.label=3;case 3:return this.uploadWaitMs=0,this.downloadWaitMs=0,[2,u]}}))}))},o.prototype.memory=function(){return{unreliable:!1,numBytesInGPU:this.numBytesInGPU}},o.prototype.startTimer=function(){return i().getNumber(\"WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE\")>0?this.gpgpu.beginQuery():{startMs:et(),endMs:null}},o.prototype.endTimer=function(t){return i().getNumber(\"WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE\")>0?(this.gpgpu.endQuery(),t):(t.endMs=et(),t)},o.prototype.getQueryTime=function(t){return n(this,void 0,void 0,(function(){var e;return r(this,(function(n){return i().getNumber(\"WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE\")>0?[2,this.gpgpu.waitForQueryAndGetTime(t)]:[2,(e=t).endMs-e.startMs]}))}))},o.prototype.disposeData=function(t){if(!this.pendingDisposal.has(t)){if(this.pendingRead.has(t))return this.pendingDisposal.add(t),void this.pendingDeletes++;if(this.texData.has(t)){this.releaseGPUData(t);var e=this.texData.get(t).complexTensors;null!=e&&(e.real.dispose(),e.imag.dispose()),this.texData.delete(t)}}},o.prototype.releaseGPUData=function(t){var e=this.texData.get(t),n=e.texture,r=e.dtype,o=e.texShape,a=e.usage,i=e.isPacked,s=e.slice,u=s&&s.origDataId||t,c=this.dataRefCount.get(u);c>1?this.dataRefCount.set(u,c-1):(this.dataRefCount.delete(u),null!=n&&(this.numBytesInGPU-=this.computeBytes(o,r),this.textureManager.releaseTexture(n,o,a,i)));var l=this.texData.get(t);l.texture=null,l.texShape=null,l.isPacked=!1,l.slice=null},o.prototype.getTexture=function(t){return this.uploadToGPU(t),this.texData.get(t).texture},o.prototype.getDataInfo=function(t){return this.texData.get(t)},o.prototype.getCPUBackend=function(){return i().getBool(\"WEBGL_CPU_FORWARD\")?(null==this.cpuBackend&&(this.cpuBackend=Lt.findBackend(\"cpu\")),this.cpuBackend):null},o.prototype.shouldExecuteOnCPU=function(t,e){var n=this;return void 0===e&&(e=128),null!=this.getCPUBackend()&&t.every((function(t){return null==n.texData.get(t.dataId).texture&&k(t.shape)<e}))},o.prototype.getGPGPUContext=function(){return this.gpgpu},o.prototype.complex=function(t,e){var n=this.makeOutput(t.shape,\"complex64\");return this.texData.get(n.dataId).complexTensors={real:Lt.keep(t.clone()),imag:Lt.keep(e.clone())},n},o.prototype.real=function(t){return this.texData.get(t.dataId).complexTensors.real.clone()},o.prototype.imag=function(t){return this.texData.get(t.dataId).complexTensors.imag.clone()},o.prototype.slice=function(t,e,n){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.slice(t,e,n);if(0===k(n))return Fn([],n,t.dtype);var r=this.texData.get(t.dataId).isPacked,o=$o(t.shape,e,n);if(r||!o){var a=i().getBool(\"WEBGL_PACK_ARRAY_OPERATIONS\")?new eu(n):new Zs(n),s=a.getCustomSetupFunc(e);return this.compileAndRun(a,[t],null,s)}return this.uploadToGPU(t.dataId),this.shallowSlice(t,e,n)},o.prototype.shallowSlice=function(t,e,n){var r=this.texData.get(t.dataId),o=this.makeOutput(n,t.dtype),a=this.texData.get(o.dataId);Object.assign(a,r),a.shape=n,a.dtype=t.dtype;var i=Qo(e,t.strides);r.slice&&(i+=r.slice.flatOffset),a.slice={flatOffset:i,origDataId:r.slice&&r.slice.origDataId||t.dataId};var s=this.dataRefCount.get(a.slice.origDataId)||1;return this.dataRefCount.set(a.slice.origDataId,s+1),o},o.prototype.stridedSlice=function(t,e,n,r){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.stridedSlice(t,e,n,r);var o=jo(e,n,r);if(o.some((function(t){return 0===t})))return Fn([],o);var a=new nu(e,r,o);return this.compileAndRun(a,[t])},o.prototype.reverse=function(t,e){var n=i().getBool(\"WEBGL_PACK_ARRAY_OPERATIONS\")?new Ys(t.shape,e):new Xs(t.shape,e);return this.compileAndRun(n,[t])},o.prototype.concat=function(t,e){if(\"complex64\"===t[0].dtype){var n=t.map((function(t){return Dn(t)})),r=t.map((function(t){return Nn(t)}));return Tn(this.concat(n,e),this.concat(r,e))}if(this.shouldExecuteOnCPU(t))return this.cpuBackend.concat(t,e);if(1===t.length)return t[0];if(t.length>i().getNumber(\"WEBGL_MAX_TEXTURES_IN_SHADER\")){var o=Math.floor(t.length/2),a=this.concat(t.slice(0,o),e),s=this.concat(t.slice(o),e);return this.concat([a,s],e)}if(i().getBool(\"WEBGL_PACK_ARRAY_OPERATIONS\")&&t[0].rank>1){var u=new Fi(t.map((function(t){return t.shape})),e);return this.compileAndRun(u,t)}var c=Sn(t.map((function(t){return t.shape})),e),l=t.map((function(t){return t.as2D(-1,k(t.shape.slice(e)))})),h=new Ni(l.map((function(t){return t.shape})));return this.compileAndRun(h,l).reshape(c)},o.prototype.neg=function(t){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.neg(t);if(i().getBool(\"WEBGL_PACK_UNARY_OPERATIONS\"))return this.packedUnaryOp(t,mu,t.dtype);var e=new cu(t.shape,mu);return this.compileAndRun(e,[t])},o.prototype.batchMatMul=function(t,e,n,r){var o=n?t.shape[2]:t.shape[1],a=r?e.shape[1]:e.shape[2],i=n?t.shape[1]:t.shape[2],s=t.shape[0];if((1===o||1===a)&&i>1e3){n&&(t=ua(t,[0,2,1])),r&&(e=ua(e,[0,2,1]));var u=1===a?t:t.as3D(s,i,1),c=1===a?2:1,l=1===a?e.as3D(s,1,i):e;return this.multiply(u,l).sum(c,!0)}var h=Tt(t.dtype,e.dtype),f=new _s(t.shape,[s,o,a],n,r);return this.compileAndRun(f,[t,e],h)},o.prototype.fusedBatchMatMul=function(t){var e=t.a,n=t.b,r=t.transposeA,o=t.transposeB,a=t.bias,i=t.activation,s=t.preluActivationWeights,u=r?e.shape[2]:e.shape[1],c=o?n.shape[1]:n.shape[2],l=e.shape[0],h=Tt(e.dtype,n.dtype),f=null!=a,d=null!=s,p=i?Lu(i,!0):null,v=new _s(e.shape,[l,u,c],r,o,f,p,d),g=[e,n];return a&&g.push(a),s&&g.push(s),this.compileAndRun(v,g,h)},o.prototype.multiply=function(t,e){if(\"complex64\"===t.dtype){var n=this.texData.get(t.dataId),r=this.texData.get(e.dataId),o=new yi(gi,t.shape,e.shape),a=new yi(mi,t.shape,e.shape),s=[this.makeComplexComponentTensorInfo(t,n.complexTensors.real),this.makeComplexComponentTensorInfo(t,n.complexTensors.imag),this.makeComplexComponentTensorInfo(e,r.complexTensors.real),this.makeComplexComponentTensorInfo(e,r.complexTensors.imag)],u=this.compileAndRun(o,s),c=this.compileAndRun(a,s),l=this.complex(u,c);return u.dispose(),c.dispose(),l}if(this.shouldExecuteOnCPU([t,e]))return this.cpuBackend.multiply(t,e);if(i().getBool(\"WEBGL_PACK_BINARY_OPERATIONS\"))return this.packedBinaryOp(t,e,wi,t.dtype);var h=new Ri(wi,t.shape,e.shape);return this.compileAndRun(h,[t,e],t.dtype)},o.prototype.batchNormalization=function(t,e,n,r,o,a){var s=[t,e,n],u=null;null!=a&&(u=a.shape,s.push(a));var c=null;if(null!=o&&(c=o.shape,s.push(o)),i().getBool(\"WEBGL_PACK_NORMALIZATION\")){var l=new vi(t.shape,e.shape,n.shape,u,c,r);return this.compileAndRun(l,s)}var h=new pi(t.shape,e.shape,n.shape,u,c,r);return this.compileAndRun(h,s)},o.prototype.localResponseNormalization4D=function(t,e,n,r,o){var a=i().getBool(\"WEBGL_PACK_NORMALIZATION\")?new Ds(t.shape,e,n,r,o):new As(t.shape,e,n,r,o);return this.compileAndRun(a,[t])},o.prototype.LRNGrad=function(t,e,n,r,o,a,i){var s=new Ts(e.shape,r,o,a,i);return this.compileAndRun(s,[e,n,t])},o.prototype.tile=function(t,e){if(\"string\"===t.dtype){var n=this.readSync(t.dataId).map((function(t){return ot(t)}));return Va(er(t.shape,t.dtype,n),e)}var r=new iu(t.shape,e);return this.compileAndRun(r,[t])},o.prototype.pad=function(t,e,n){var r=i().getBool(\"WEBGL_PACK_ARRAY_OPERATIONS\")?new Ls(t.shape,e,n):new Ps(t.shape,e,n);return this.compileAndRun(r,[t])},o.prototype.gather=function(t,e,n){if(this.shouldExecuteOnCPU([t,e]))return this.cpuBackend.gather(t,e,n);var r=new as(t.shape,e.size,n);return this.compileAndRun(r,[t,e])},o.prototype.batchToSpaceND=function(t,e,n){C(t.rank<=4,(function(){return\"batchToSpaceND for rank > 4 with a WebGL backend not implemented yet\"}));var r=e.reduce((function(t,e){return t*e})),o=pr(t.shape,e,r),a=vr(o.length,e.length),i=gr(t.shape,e,r),s=mr(n,e.length),u=yr(i,n,e.length);return ua(t.reshape(o),a).reshape(i).slice(s,u)},o.prototype.spaceToBatchND=function(t,e,n){C(t.rank<=4,(function(){return\"spaceToBatchND for rank > 4 with a WebGL backend not implemented yet\"}));var r=e.reduce((function(t,e){return t*e})),o=[[0,0]];o.push.apply(o,n);for(var a=1+e.length;a<t.shape.length;++a)o.push([0,0]);var i=t.pad(o),s=pr(i.shape,e,r,!1),u=vr(s.length,e.length,!1),c=gr(i.shape,e,r,!1);return ua(i.reshape(s),u).reshape(c)},o.prototype.reduce=function(t,e,n){var r=t.shape[0],o=t.shape[1],a=Uo(o),i=new Vs({windowSize:a,inSize:o,batchSize:r},e),s=this.compileAndRun(i,[t],n);return 1===s.shape[1]?s:this.reduce(s,e,n)},o.prototype.argReduce=function(t,e,n){void 0===n&&(n=null);var r=t.shape[0],o=t.shape[1];null!=n&&(r=n.shape[0],o=n.shape[1]);var a=Uo(o),i=new Ka({windowSize:a,inSize:o,batchSize:r},e,null==n),s=[t];null!=n&&s.push(n);var u=this.compileAndRun(i,s,\"int32\");return 1===u.shape[1]?u:this.argReduce(t,e,u)},o.prototype.argReducePacked=function(t,e,n){void 0===n&&(n=null);var r=null!=n?n.shape:t.shape,o=Uo(r[r.length-1]),a=new hi(r,o,e,null==n),i=null==n?[t]:[t,n],s=this.compileAndRun(a,i,\"int32\");return s.rank===t.rank?this.argReducePacked(t,e,s):s},o.prototype.sum=function(t,e){Cn(\"sum\",e,t.rank);var n=bn(t.shape,e),r=n[0],o=k(n[1]),a=t.as2D(-1,o),i=Dt(t.dtype);return this.reduce(a,\"sum\",i).reshape(r)},o.prototype.prod=function(t,e){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.prod(t,e);var n=bn(t.shape,e),r=n[0],o=k(n[1]),a=t.as2D(-1,o),i=Dt(t.dtype);return this.reduce(a,\"prod\",i).reshape(r)},o.prototype.unsortedSegmentSum=function(t,e,n){var r=0,o=En([r],t.rank),a=t;null!=o&&(a=ua(t,o),r=In(1,t.rank)[0]);var i=function(t,e,n){for(var r=[],o=t.length,a=0;a<o;a++)a!==e?r.push(t[a]):r.push(n);return r}(a.shape,r,n),s=k([a.shape[r]]),u=a.as2D(-1,s),c=Dt(t.dtype),l=this.segOpCompute(u,\"unsortedSegmentSum\",e,c,n).reshape(i);return null!=o&&(l=ua(l,Rn(o))),l},o.prototype.segOpCompute=function(t,e,n,r,o){var a=t.shape[0],i=t.shape[1],s=function(t,e){var n,r=!1;for(t<=Wo?(n=t,r=!0):n=Y(t,Math.floor(Math.sqrt(t)));!r;)n>e||n===t?r=!0:n=Y(t,n+1);return n}(i,o),u=new Qs({windowSize:s,inSize:i,batchSize:a,numSegments:o},e),c=this.compileAndRun(u,[t,n],r);return c.shape[1]===o?c:(n=Kn(0,o).tile([i/s]),this.segOpCompute(c,e,n,r,o))},o.prototype.argMinMaxReduce=function(t,e,n){var r=[e];if(Cn(\"arg\"+n.charAt(0).toUpperCase()+n.slice(1),r,t.rank),!i().getBool(\"WEBGL_PACK_REDUCE\")||t.rank<=2){var o=bn(t.shape,r),a=o[0],s=k(o[1]),u=t.as2D(-1,s);return this.argReduce(u,n).reshape(a)}return this.argReducePacked(t,n)},o.prototype.argMin=function(t,e){return this.argMinMaxReduce(t,e,\"min\")},o.prototype.argMax=function(t,e){return this.argMinMaxReduce(t,e,\"max\")},o.prototype.cumsum=function(t,e,n,r){if(e!==t.rank-1)throw new Error(\"WebGL cumsum shader expects an inner-most axis=\"+(t.rank-1)+\" but got axis=\"+e);var o=new qi(t.shape,n,r);return this.compileAndRun(o,[t])},o.prototype.equal=function(t,e){if(i().getBool(\"WEBGL_PACK_BINARY_OPERATIONS\"))return this.packedBinaryOp(t,e,\"\\n  return vec4(equal(a, b));\\n\",\"bool\");var n=new Ri(\"return float(a == b);\",t.shape,e.shape);return this.compileAndRun(n,[t,e],\"bool\")},o.prototype.notEqual=function(t,e){if(i().getBool(\"WEBGL_PACK_BINARY_OPERATIONS\"))return this.packedBinaryOp(t,e,\"\\n  return vec4(notEqual(a, b));\\n\",\"bool\");var n=new Ri(\"return float(a != b);\",t.shape,e.shape);return this.compileAndRun(n,[t,e],\"bool\")},o.prototype.less=function(t,e){if(this.shouldExecuteOnCPU([t,e]))return this.cpuBackend.less(t,e);if(i().getBool(\"WEBGL_PACK_BINARY_OPERATIONS\"))return this.packedBinaryOp(t,e,\"\\n  return vec4(lessThan(a, b));\\n\",\"bool\");var n=new Ri(\"return float(a < b);\",t.shape,e.shape);return this.compileAndRun(n,[t,e],\"bool\")},o.prototype.lessEqual=function(t,e){if(i().getBool(\"WEBGL_PACK_BINARY_OPERATIONS\"))return this.packedBinaryOp(t,e,\"\\n  return vec4(lessThanEqual(a, b));\\n\",\"bool\");var n=new Ri(\"return float(a <= b);\",t.shape,e.shape);return this.compileAndRun(n,[t,e],\"bool\")},o.prototype.greater=function(t,e){if(this.shouldExecuteOnCPU([t,e]))return this.cpuBackend.greater(t,e);if(i().getBool(\"WEBGL_PACK_BINARY_OPERATIONS\"))return this.packedBinaryOp(t,e,\"\\n  return vec4(greaterThan(a, b));\\n\",\"bool\");var n=new Ri(\"return float(a > b);\",t.shape,e.shape);return this.compileAndRun(n,[t,e],\"bool\")},o.prototype.greaterEqual=function(t,e){if(i().getBool(\"WEBGL_PACK_BINARY_OPERATIONS\"))return this.packedBinaryOp(t,e,\"\\n  return vec4(greaterThanEqual(a, b));\\n\",\"bool\");var n=new Ri(\"return float(a >= b);\",t.shape,e.shape);return this.compileAndRun(n,[t,e],\"bool\")},o.prototype.logicalNot=function(t){var e=new cu(t.shape,\"return float(!(x >= 1.0));\");return this.compileAndRun(e,[t])},o.prototype.logicalAnd=function(t,e){if(i().getBool(\"WEBGL_PACK_BINARY_OPERATIONS\"))return this.packedBinaryOp(t,e,\"\\n  return vec4(\\n    vec4(greaterThanEqual(a, vec4(1.0))) *\\n    vec4(greaterThanEqual(b, vec4(1.0))));\\n\",\"bool\");var n=new Ri(\"return float(a >= 1.0 && b >= 1.0);\",t.shape,e.shape);return this.compileAndRun(n,[t,e],\"bool\")},o.prototype.logicalOr=function(t,e){if(i().getBool(\"WEBGL_PACK_BINARY_OPERATIONS\"))return this.packedBinaryOp(t,e,\"\\n  return min(\\n    vec4(greaterThanEqual(a, vec4(1.0))) +\\n    vec4(greaterThanEqual(b, vec4(1.0))),\\n    vec4(1.0));\\n\",\"bool\");var n=new Ri(\"return float(a >= 1.0 || b >= 1.0);\",t.shape,e.shape);return this.compileAndRun(n,[t,e],\"bool\")},o.prototype.select=function(t,e,n){var r=new Js(t.rank,e.shape,e.rank);return this.compileAndRun(r,[t,e,n],Tt(e.dtype,n.dtype))},o.prototype.where=function(t){dn(\"tf.where() in webgl locks the UI thread. Call tf.whereAsync() instead\");var e=t.dataSync();return Ga(t.shape,e)},o.prototype.topk=function(t,e,n){return za(t.dataSync(),t.shape,t.dtype,e)},o.prototype.min=function(t,e){Cn(\"min\",e,t.rank);var n=bn(t.shape,e),r=n[0],o=k(n[1]),a=t.as2D(-1,o);return this.reduce(a,\"min\",a.dtype).reshape(r)},o.prototype.minimum=function(t,e){if(this.shouldExecuteOnCPU([t,e]))return this.cpuBackend.minimum(t,e);var n=i().getBool(\"WEBGL_PACK_BINARY_OPERATIONS\")?new Si(\"\\n  vec4 result = vec4(min(a, b));\\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\\n  \\n  result.r = isNaN.r > 0. ? NAN : result.r;\\n  result.g = isNaN.g > 0. ? NAN : result.g;\\n  result.b = isNaN.b > 0. ? NAN : result.b;\\n  result.a = isNaN.a > 0. ? NAN : result.a;\\n\\n  return result;\\n\",t.shape,e.shape):new Ri(\"\\n  if (isnan(a)) return a;\\n  if (isnan(b)) return b;\\n\\n  return min(a, b);\\n\",t.shape,e.shape);return this.compileAndRun(n,[t,e])},o.prototype.mod=function(t,e){var n=i().getBool(\"WEBGL_PACK_BINARY_OPERATIONS\")?new Si(\"\\n  vec4 result = mod(a, b);\\n  vec4 isNaN = vec4(equal(b, vec4(0.0)));\\n  \\n  result.r = isNaN.r > 0. ? NAN : result.r;\\n  result.g = isNaN.g > 0. ? NAN : result.g;\\n  result.b = isNaN.b > 0. ? NAN : result.b;\\n  result.a = isNaN.a > 0. ? NAN : result.a;\\n\\n  return result;\\n\",t.shape,e.shape):new Ri(\"if (b == 0.0) return NAN;\\n  return mod(a, b);\",t.shape,e.shape);return this.compileAndRun(n,[t,e])},o.prototype.max=function(t,e){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.max(t,e);Cn(\"max\",e,t.rank);var n=bn(t.shape,e),r=n[0],o=k(n[1]),a=t.as2D(-1,o);return this.reduce(a,\"max\",a.dtype).reshape(r)},o.prototype.maximum=function(t,e){if(this.shouldExecuteOnCPU([t,e]))return this.cpuBackend.maximum(t,e);var n=i().getBool(\"WEBGL_PACK_BINARY_OPERATIONS\")?new Si(\"\\n  vec4 result = vec4(max(a, b));\\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\\n  \\n  result.r = isNaN.r > 0. ? NAN : result.r;\\n  result.g = isNaN.g > 0. ? NAN : result.g;\\n  result.b = isNaN.b > 0. ? NAN : result.b;\\n  result.a = isNaN.a > 0. ? NAN : result.a;\\n\\n  return result;\\n\",t.shape,e.shape):new Ri(\"\\n  if (isnan(a)) return a;\\n  if (isnan(b)) return b;\\n\\n  return max(a, b);\\n\",t.shape,e.shape);return this.compileAndRun(n,[t,e])},o.prototype.all=function(t,e){Cn(\"all\",e,t.rank);var n=bn(t.shape,e),r=n[0],o=k(n[1]),a=t.as2D(-1,o);return this.reduce(a,\"all\",a.dtype).reshape(r)},o.prototype.any=function(t,e){Cn(\"any\",e,t.rank);var n=bn(t.shape,e),r=n[0],o=k(n[1]),a=t.as2D(-1,o);return this.reduce(a,\"any\",a.dtype).reshape(r)},o.prototype.floorDiv=function(t,e){if(i().getBool(\"WEBGL_PACK_BINARY_OPERATIONS\"))return this.packedBinaryOp(t,e,\"\\n  ivec4 ia = round(a);\\n  ivec4 ib = round(b);\\n  bvec4 cond = notEqual(ib, ivec4(0));\\n  ivec4 result = ivec4(0);\\n  vec4 s = sign(a) * sign(b);\\n\\n  // Windows (D3D) wants guaranteed non-zero int division at compile-time.\\n  if (cond[0]) {\\n    result[0] = idiv(ia[0], ib[0], s[0]);\\n  }\\n  if (cond[1]) {\\n    result[1] = idiv(ia[1], ib[1], s[1]);\\n  }\\n  if (cond[2]) {\\n    result[2] = idiv(ia[2], ib[2], s[2]);\\n  }\\n  if (cond[3]) {\\n    result[3] = idiv(ia[3], ib[3], s[3]);\\n  }\\n  return vec4(result);\\n\",\"int32\");var n=new Ri(\"\\n  float s = sign(a) * sign(b);\\n  int ia = round(a);\\n  int ib = round(b);\\n  if (ib != 0) {\\n    // Windows (D3D) wants guaranteed non-zero int division at compile-time.\\n    return float(idiv(ia, ib, s));\\n  } else {\\n    return NAN;\\n  }\\n\",t.shape,e.shape);return this.compileAndRun(n,[t,e],\"int32\")},o.prototype.add=function(t,e){if(\"complex64\"===t.dtype&&\"complex64\"===e.dtype)return this.complexSeparableBinaryOp(t,e,xi);if(this.shouldExecuteOnCPU([t,e]))return this.cpuBackend.add(t,e);var n=Tt(t.dtype,e.dtype);if(i().getBool(\"WEBGL_PACK_BINARY_OPERATIONS\"))return this.packedBinaryOp(t,e,xi,n);var r=new Ri(xi,t.shape,e.shape);return this.compileAndRun(r,[t,e],n)},o.prototype.packedUnaryOp=function(t,e,n){var r=new Mu(t.shape,e);return this.compileAndRun(r,[t],n)},o.prototype.packedBinaryOp=function(t,e,n,r,o){void 0===o&&(o=!1);var a=new Si(n,t.shape,e.shape,o);return this.compileAndRun(a,[t,e],r)},o.prototype.complexSeparableBinaryOp=function(t,e,n){var r=this,o=this.texData.get(t.dataId),a=this.texData.get(e.dataId),i=[[o.complexTensors.real,a.complexTensors.real],[o.complexTensors.imag,a.complexTensors.imag]].map((function(o){var a=o[0],i=o[1],s=r.makeComplexComponentTensorInfo(t,a),u=r.makeComplexComponentTensorInfo(e,i),c=new Ri(n,t.shape,e.shape);return r.compileAndRun(c,[s,u],Tt(a.dtype,i.dtype))})),s=i[0],u=i[1],c=this.complex(s,u);return s.dispose(),u.dispose(),c},o.prototype.makeComplexComponentTensorInfo=function(t,e){return{dataId:e.dataId,dtype:e.dtype,shape:t.shape}},o.prototype.addN=function(t){if(1===t.length)return t[0];if(t.length>i().get(\"WEBGL_MAX_TEXTURES_IN_SHADER\")){var e=Math.floor(t.length/2),n=this.addN(t.slice(0,e)),r=this.addN(t.slice(e));return this.addN([n,r])}var o=t.map((function(t){return t.dtype})).reduce((function(t,e){return Tt(t,e)})),a=t.map((function(t){return t.shape})),s=i().getBool(\"WEBGL_PACK\")?new qa(t[0].shape,a):new Ha(t[0].shape,a);return this.compileAndRun(s,t,o)},o.prototype.subtract=function(t,e){if(\"complex64\"===t.dtype&&\"complex64\"===e.dtype)return this.complexSeparableBinaryOp(t,e,bi);if(this.shouldExecuteOnCPU([t,e]))return this.cpuBackend.subtract(t,e);var n=Tt(t.dtype,e.dtype);if(i().getBool(\"WEBGL_PACK_BINARY_OPERATIONS\"))return this.packedBinaryOp(t,e,bi,t.dtype);var r=new Ri(bi,t.shape,e.shape);return this.compileAndRun(r,[t,e],n)},o.prototype.pow=function(t,e){var n=i().getBool(\"WEBGL_PACK_BINARY_OPERATIONS\")?new Si(\"\\n  // isModRound1 has 1 for components with round(mod(b, 2.0)) == 1, 0 otherwise.\\n  vec4 isModRound1 = vec4(equal(round(mod(b, 2.0)), ivec4(1)));\\n  vec4 multiplier = sign(a) * isModRound1 + (vec4(1.0) - isModRound1);\\n  vec4 result = multiplier * pow(abs(a), b);\\n\\n  // Ensure that a^0 = 1, including 0^0 = 1 as this correspond to TF and JS\\n  bvec4 isExpZero = equal(b, vec4(0.0));\\n  result.r = isExpZero.r ? 1.0 : result.r;\\n  result.g = isExpZero.g ? 1.0 : result.g;\\n  result.b = isExpZero.b ? 1.0 : result.b;\\n  result.a = isExpZero.a ? 1.0 : result.a;\\n\\n  vec4 isNaN = vec4(lessThan(a, vec4(0.0))) * vec4(lessThan(floor(b), b));\\n  \\n  result.r = isNaN.r > 0. ? NAN : result.r;\\n  result.g = isNaN.g > 0. ? NAN : result.g;\\n  result.b = isNaN.b > 0. ? NAN : result.b;\\n  result.a = isNaN.a > 0. ? NAN : result.a;\\n\\n  return result;\\n\",t.shape,e.shape):new Ri(\"\\nif(a < 0.0 && floor(b) < b){\\n  return NAN;\\n}\\nif (b == 0.0) {\\n  return 1.0;\\n}\\nreturn (round(mod(b, 2.0)) != 1) ?\\n    pow(abs(a), b) : sign(a) * pow(abs(a), b);\\n\",t.shape,e.shape),r=Tt(t.dtype,e.dtype);return this.compileAndRun(n,[t,e],r)},o.prototype.ceil=function(t){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.ceil(t);if(i().getBool(\"WEBGL_PACK_UNARY_OPERATIONS\"))return this.packedUnaryOp(t,yu,t.dtype);var e=new cu(t.shape,yu);return this.compileAndRun(e,[t])},o.prototype.floor=function(t){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.floor(t);if(i().getBool(\"WEBGL_PACK_UNARY_OPERATIONS\"))return this.packedUnaryOp(t,xu,t.dtype);var e=new cu(t.shape,xu);return this.compileAndRun(e,[t])},o.prototype.sign=function(t){var e=new cu(t.shape,\"\\n  if (isnan(x)) { return 0.0; }\\n  return sign(x);\\n\");return this.compileAndRun(e,[t])},o.prototype.isNaN=function(t){var e=new cu(t.shape,\"return float(isnan(x));\");return this.compileAndRun(e,[t],\"bool\")},o.prototype.isInf=function(t){var e=new cu(t.shape,\"return float(isinf(x));\");return this.compileAndRun(e,[t],\"bool\")},o.prototype.isFinite=function(t){var e=new cu(t.shape,\"return float(!isnan(x) && !isinf(x));\");return this.compileAndRun(e,[t],\"bool\")},o.prototype.round=function(t){var e=new cu(t.shape,\"\\n  // OpenGL ES does not support round function.\\n  // The algorithm is based on banker's rounding.\\n  float base = floor(x);\\n  if ((x - base) < 0.5) {\\n    return floor(x);\\n  } else if ((x - base) > 0.5) {\\n    return ceil(x);\\n  } else {\\n    if (mod(base, 2.0) == 0.0) {\\n      return base;\\n    } else {\\n      return base + 1.0;\\n    }\\n  }\\n\");return this.compileAndRun(e,[t])},o.prototype.exp=function(t){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.exp(t);if(i().getBool(\"WEBGL_PACK_UNARY_OPERATIONS\"))return this.packedUnaryOp(t,bu,t.dtype);var e=new cu(t.shape,bu);return this.compileAndRun(e,[t])},o.prototype.expm1=function(t){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.expm1(t);if(i().getBool(\"WEBGL_PACK_UNARY_OPERATIONS\"))return this.packedUnaryOp(t,wu,t.dtype);var e=new cu(t.shape,wu);return this.compileAndRun(e,[t])},o.prototype.softmax=function(t,e){var n=O([e],t.shape),r=this.max(t,n),o=wn(r.shape,n),a=this.subtract(t,r.reshape(o)),i=this.exp(a),s=this.sum(i,n).reshape(o);return Bo(i,s)},o.prototype.log=function(t){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.log(t);if(i().getBool(\"WEBGL_PACK_UNARY_OPERATIONS\"))return this.packedUnaryOp(t,\"\\n  vec4 result = log(x);\\n  vec4 isNaN = vec4(lessThan(x, vec4(0.0)));\\n  result.r = isNaN.r == 1.0 ? NAN : result.r;\\n  result.g = isNaN.g == 1.0 ? NAN : result.g;\\n  result.b = isNaN.b == 1.0 ? NAN : result.b;\\n  result.a = isNaN.a == 1.0 ? NAN : result.a;\\n\\n  return result;\\n\",t.dtype);var e=new cu(t.shape,\"if (x < 0.0) return NAN;\\n  return log(x);\");return this.compileAndRun(e,[t])},o.prototype.log1p=function(t){var e=new cu(t.shape,\"return log(1.0 + x);\");return this.compileAndRun(e,[t])},o.prototype.sqrt=function(t){var e=new cu(t.shape,\"return sqrt(x);\");return this.compileAndRun(e,[t])},o.prototype.rsqrt=function(t){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.rsqrt(t);var e=new cu(t.shape,\"return inversesqrt(x);\");return this.compileAndRun(e,[t])},o.prototype.reciprocal=function(t){var e=new cu(t.shape,\"return 1.0 / x;\");return this.compileAndRun(e,[t])},o.prototype.relu=function(t){var e;return e=i().getBool(\"WEBGL_PACK\")?new Mu(t.shape,Fu):new cu(t.shape,du),this.compileAndRun(e,[t])},o.prototype.relu6=function(t){var e;return e=i().getBool(\"WEBGL_PACK\")?new Mu(t.shape,_u):new cu(t.shape,pu),this.compileAndRun(e,[t])},o.prototype.prelu=function(t,e){var n=i().getBool(\"WEBGL_PACK_BINARY_OPERATIONS\")?new Si(ki,t.shape,e.shape):new Ri(Ei,t.shape,e.shape);return this.compileAndRun(n,[t,e])},o.prototype.elu=function(t){if(i().getBool(\"WEBGL_PACK_UNARY_OPERATIONS\"))return this.packedUnaryOp(t,Ou,t.dtype);var e=new cu(t.shape,vu);return this.compileAndRun(e,[t])},o.prototype.eluDer=function(t,e){var n=i().getBool(\"WEBGL_PACK_BINARY_OPERATIONS\")?new Si(\"\\n  vec4 bGTEZero = vec4(greaterThanEqual(b, vec4(0.)));\\n  return (bGTEZero * a) + ((vec4(1.0) - bGTEZero) * (a * (b + vec4(1.0))));\\n\",t.shape,e.shape):new Ri(\"return (b >= 1.0) ? a : a * (b + 1.0);\",t.shape,e.shape);return this.compileAndRun(n,[t,e])},o.prototype.selu=function(t){var e=new cu(t.shape,gu);return this.compileAndRun(e,[t])},o.prototype.int=function(t){var e=new cu(t.shape,\"return float(int(x));\");return this.compileAndRun(e,[t],\"int32\")},o.prototype.clip=function(t,e,n){var r,o=(r=i().getBool(\"WEBGL_PACK_CLIP\")?new Ti(t.shape):new Ai(t.shape)).getCustomSetupFunc(e,n);return this.compileAndRun(r,[t],null,o)},o.prototype.abs=function(t){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.abs(t);if(i().getBool(\"WEBGL_PACK_UNARY_OPERATIONS\"))return this.packedUnaryOp(t,fu,t.dtype);var e=new cu(t.shape,fu);return this.compileAndRun(e,[t])},o.prototype.complexAbs=function(t){var e=this.texData.get(t.dataId),n=new Di(t.shape),r=[this.makeComplexComponentTensorInfo(t,e.complexTensors.real),this.makeComplexComponentTensorInfo(t,e.complexTensors.imag)];return this.compileAndRun(n,r)},o.prototype.sigmoid=function(t){var e=new cu(t.shape,\"return 1.0 / (1.0 + exp(-1.0 * x));\");return this.compileAndRun(e,[t])},o.prototype.softplus=function(t){var e=new cu(t.shape,\"\\n  float epsilon = 1.1920928955078125e-7;\\n  float threshold = log(epsilon) + 2.0;\\n\\n  bool too_large = x > -threshold;\\n  bool too_small = x < threshold;\\n\\n  float result;\\n  float exp_x = exp(x);\\n\\n  if (too_large){\\n    result = x;\\n  }\\n  else if (too_small){\\n    result = exp_x;\\n  }\\n  else{\\n    result = log(exp_x + 1.0);\\n  }\\n  return result;\\n\");return this.compileAndRun(e,[t])},o.prototype.sin=function(t){var e=new cu(t.shape,Cu);return this.compileAndRun(e,[t])},o.prototype.cos=function(t){var e=new cu(t.shape,Eu);return this.compileAndRun(e,[t])},o.prototype.tan=function(t){var e=new cu(t.shape,\"return tan(x);\");return this.compileAndRun(e,[t])},o.prototype.asin=function(t){var e=new cu(t.shape,Ru);return this.compileAndRun(e,[t])},o.prototype.acos=function(t){var e=new cu(t.shape,Iu);return this.compileAndRun(e,[t])},o.prototype.atan=function(t){var e=new cu(t.shape,ku);return this.compileAndRun(e,[t])},o.prototype.atan2=function(t,e){var n=i().getBool(\"WEBGL_PACK_BINARY_OPERATIONS\")?new Si(\"\\n  vec4 result = atan(a, b);\\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\\n  \\n  result.r = isNaN.r > 0. ? NAN : result.r;\\n  result.g = isNaN.g > 0. ? NAN : result.g;\\n  result.b = isNaN.b > 0. ? NAN : result.b;\\n  result.a = isNaN.a > 0. ? NAN : result.a;\\n\\n  return result;\\n\",t.shape,e.shape):new Ri(\"\\n  if (isnan(a)) return a;\\n  if (isnan(b)) return b;\\n\\n  return atan(a, b);\\n\",t.shape,e.shape);return this.compileAndRun(n,[t,e])},o.prototype.sinh=function(t){var e=new cu(t.shape,\"\\n  float e2x = exp(x);\\n  return (e2x - 1.0 / e2x) / 2.0;\\n\");return this.compileAndRun(e,[t])},o.prototype.cosh=function(t){var e=new cu(t.shape,\"\\n  float e2x = exp(-x);\\n  return (e2x + 1.0 / e2x) / 2.0;\\n\");return this.compileAndRun(e,[t])},o.prototype.tanh=function(t){var e=new cu(t.shape,\"\\n  float e2x = exp(-2.0 * abs(x));\\n  return sign(x) * (1.0 - e2x) / (1.0 + e2x);\\n\");return this.compileAndRun(e,[t])},o.prototype.asinh=function(t){var e=new cu(t.shape,Su);return this.compileAndRun(e,[t])},o.prototype.acosh=function(t){var e=new cu(t.shape,Au);return this.compileAndRun(e,[t])},o.prototype.atanh=function(t){var e=new cu(t.shape,Tu);return this.compileAndRun(e,[t])},o.prototype.erf=function(t){var e=new cu(t.shape,'\\n  // Error function is calculated approximately with elementary function.\\n  // See \"Handbook of Mathematical Functions with Formulas,\\n  // Graphs, and Mathematical Tables\", Abramowitz and Stegun.\\n  float p = 0.3275911;\\n  float a1 = 0.254829592;\\n  float a2 = -0.284496736;\\n  float a3 = 1.421413741;\\n  float a4 = -1.453152027;\\n  float a5 = 1.061405429;\\n\\n  float sign = sign(x);\\n  x = abs(x);\\n  float t = 1.0 / (1.0 + p * x);\\n  return sign * (1.0 - (((((a5*t + a4)*t) + a3)*t + a2)*t + a1)*t*exp(-x*x));\\n');return this.compileAndRun(e,[t])},o.prototype.step=function(t,e){var n=new cu(t.shape,function(t){return void 0===t&&(t=0),lu+\"\\n    return x > 0.0 ? 1.0 : float(\"+t+\");\\n  \"}(e));return this.compileAndRun(n,[t])},o.prototype.conv2dByMatMul=function(t,e,n,r,o,a){var s=t.shape,u=this.texData.get(t.dataId),c=n.inChannels,l=s[0]*s[1]*s[2],h=n.outChannels,f=\"channelsLast\"===n.dataFormat,d=(1===l||1===h)&&c>1e3,p=s[2]%2!=0&&!!u.isPacked;if(d||!i().getBool(\"WEBGL_LAZILY_UNPACK\")||!i().getBool(\"WEBGL_PACK_BINARY_OPERATIONS\")||!p){var v=f?s[0]*s[1]*s[2]:s[0]*s[2]*s[3],g=this.reshape(t,[1,v,n.inChannels]),m=this.reshape(e,[1,n.inChannels,n.outChannels]);return this.reshape(this.fusedBatchMatMul({a:g,b:m,transposeA:!1,transposeB:!1,bias:r,activation:o,preluActivationWeights:a}),n.outShape)}var y=f?s[0]*s[1]*(s[2]+1):s[0]*s[2]*(s[3]+1),x={dataId:t.dataId,shape:[1,y,n.inChannels],dtype:t.dtype},b=u.shape;u.shape=u.shape.slice(),u.shape[u.shape.length-2]++,C(_e(u.shape,x.shape),(function(){return\"packed reshape \"+u.shape+\" to \"+x.shape+\" isn't free\"}));var w=this.reshape(e,[1,n.inChannels,n.outChannels]),E=this.fusedBatchMatMul({a:x,b:w,transposeA:!1,transposeB:!1,bias:r,activation:o,preluActivationWeights:a}),R=this.texData.get(E.dataId);return C(R.isPacked,(function(){return\"batchMatMul result is expected to be packed\"})),u.shape=b,R.shape=n.outShape,Lt.makeTensorFromDataId(E.dataId,n.outShape,E.dtype)},o.prototype.conv2dWithIm2Row=function(t,e,n,r,o,a){var i=n.filterWidth,s=n.filterHeight,u=n.inChannels,c=n.outWidth,l=n.outHeight,h=\"channelsLast\"===n.dataFormat,f=i*s*u,d=l*c,p=[f,d],v=t.squeeze([0]),g=e.reshape([1,f,-1]),m=new Ss(p,v.shape,n),y=this.compileAndRun(m,[v]).reshape([1,p[0],p[1]]),x=null!=r,b=null!=a,w=o?Lu(o,!0):null,C=new _s(y.shape,[1,d,n.outChannels],!0,!1,x,w,b),E=[y,g];r&&E.push(r),b&&E.push(a);var R=this.compileAndRun(C,E);return h?R.reshape([1,l,c,n.outChannels]):R.reshape([1,n.outChannels,l,c])},o.prototype.fusedConv2d=function(t){var e=t.input,n=t.filter,r=t.convInfo,o=t.bias,a=t.activation,s=t.preluActivationWeights;if(1===r.filterHeight&&1===r.filterWidth&&1===r.dilationHeight&&1===r.dilationWidth&&1===r.strideHeight&&1===r.strideWidth&&(\"SAME\"===r.padInfo.type||\"VALID\"===r.padInfo.type))return this.conv2dByMatMul(e,n,r,o,a,s);if(i().getBool(\"WEBGL_CONV_IM2COL\")&&1===e.shape[0])return this.conv2dWithIm2Row(e,n,r,o,a,s);var u=null!=o,c=null!=s,l=a?Lu(a,!1):null,h=new Ui(r,u,l,c),f=[e,n];return o&&f.push(o),s&&f.push(s),this.compileAndRun(h,f)},o.prototype.conv2d=function(t,e,n){if(1===n.filterHeight&&1===n.filterWidth&&1===n.dilationHeight&&1===n.dilationWidth&&1===n.strideHeight&&1===n.strideWidth&&(\"SAME\"===n.padInfo.type||\"VALID\"===n.padInfo.type))return this.conv2dByMatMul(t,e,n);if(i().getBool(\"WEBGL_CONV_IM2COL\")&&1===t.shape[0])return this.conv2dWithIm2Row(t,e,n);var r=new Ui(n);return this.compileAndRun(r,[t,e])},o.prototype.conv2dDerInput=function(t,e,n){var r=new Mi(n);return this.compileAndRun(r,[t,e])},o.prototype.conv2dDerFilter=function(t,e,n){var r=new Oi(n);return this.compileAndRun(r,[t,e])},o.prototype.fusedDepthwiseConv2D=function(t){var e,n=t.input,r=t.filter,o=t.convInfo,a=t.bias,s=t.activation,u=t.preluActivationWeights,c=i().getBool(\"WEBGL_PACK_DEPTHWISECONV\")&&o.strideWidth<=2&&o.outChannels/o.inChannels==1,l=s?Lu(s,c):null,h=[n,r],f=null!=a,d=null!=u;return f&&h.push(a),d&&h.push(u),c?(e=new Gi(o,f,l,d),this.compileAndRun(e,h)):(e=new zi(o,f,l,d),this.compileAndRun(e,h))},o.prototype.depthwiseConv2D=function(t,e,n){var r;return i().getBool(\"WEBGL_PACK_DEPTHWISECONV\")&&n.strideWidth<=2&&n.outChannels/n.inChannels==1?(r=new Gi(n),this.compileAndRun(r,[t,e])):(r=new zi(n),this.compileAndRun(r,[t,e]))},o.prototype.depthwiseConv2DDerInput=function(t,e,n){var r=new Wi(n);return this.compileAndRun(r,[t,e])},o.prototype.depthwiseConv2DDerFilter=function(t,e,n){var r=new Li(n);return this.compileAndRun(r,[t,e])},o.prototype.conv3d=function(t,e,n){var r=new Vi(n);return this.compileAndRun(r,[t,e])},o.prototype.conv3dDerInput=function(t,e,n){var r=new Pi(n);return this.compileAndRun(r,[t,e])},o.prototype.conv3dDerFilter=function(t,e,n){var r=new Bi(n);return this.compileAndRun(r,[t,e])},o.prototype.maxPool=function(t,e){var n=new Ws(e,\"max\",!1);return this.compileAndRun(n,[t])},o.prototype.avgPool=function(t,e){var n=new Ws(e,\"avg\",!1);return this.compileAndRun(n,[t],\"float32\")},o.prototype.maxPoolBackprop=function(t,e,n,r){var o=new Ws(r,\"max\",!0),a=this.compileAndRun(o,[e]),i=new Ns(r),s=this.compileAndRun(i,[t,a],e.dtype);return a.dispose(),s},o.prototype.avgPoolBackprop=function(t,e,n){var r=new fi(n);return this.compileAndRun(r,[t],e.dtype)},o.prototype.cast=function(t,e){return Ra(t,e,this)},o.prototype.unstack=function(t,e){for(var n=t.shape[e],r=new Array(t.rank-1),o=0,a=0;a<t.rank;a++)a!==e&&(r[o++]=t.shape[a]);var i=new Array(t.rank).fill(0),s=t.shape.slice();s[e]=1;var u=new Array(n);for(a=0;a<u.length;a++)i[e]=a,u[a]=this.slice(t,i,s).reshape(r);return u},o.prototype.avgPool3d=function(t,e){var n=new Us(e,\"avg\",!1);return this.compileAndRun(n,[t],\"float32\")},o.prototype.avgPool3dBackprop=function(t,e,n){var r=new di(n);return this.compileAndRun(r,[t],e.dtype)},o.prototype.maxPool3d=function(t,e){var n=new Us(e,\"max\",!1);return this.compileAndRun(n,[t],\"float32\")},o.prototype.maxPool3dBackprop=function(t,e,n,r){var o=new Us(r,\"max\",!0),a=this.compileAndRun(o,[e]),i=new Fs(r),s=this.compileAndRun(i,[t,a],e.dtype);return a.dispose(),s},o.prototype.reshape=function(t,e){var n=this.texData.get(t.dataId);if(n.isPacked&&!_e(t.shape,e)&&(null===n.texture||!_e(n.shape,e))){var r=this.packedReshape(t,e);return Lt.makeTensorFromDataId(r.dataId,r.shape,r.dtype)}return Ia(t,e)},o.prototype.resizeBilinear=function(t,e,n,r){var o=i().getBool(\"WEBGL_PACK_IMAGE_OPERATIONS\")?new qs(t.shape,e,n,r):new Hs(t.shape,e,n,r);return this.compileAndRun(o,[t],\"float32\")},o.prototype.resizeBilinearBackprop=function(t,e,n){var r=new Gs(t,e,n);return this.compileAndRun(r,[t])},o.prototype.resizeNearestNeighbor=function(t,e,n,r){var o=new js(t.shape,e,n,r);return this.compileAndRun(o,[t])},o.prototype.resizeNearestNeighborBackprop=function(t,e,n){var r=new Ks(t,e,n);return this.compileAndRun(r,[t])},o.prototype.multinomial=function(t,e,n,r){var o=e?t:ia(t),a=o.shape[0],i=o.shape[1],s=new Os(a,i,n),u=s.getCustomSetupFunc(r);return this.compileAndRun(s,[o],\"int32\",u)},o.prototype.oneHot=function(t,e,n,r){var o=new Ms(t.size,e,n,r);return this.compileAndRun(o,[t])},o.prototype.diag=function(t){var e=new $i(t.size);return this.compileAndRun(e,[t])},o.prototype.nonMaxSuppression=function(t,e,n,r,o){return dn(\"tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead\"),Oa(t.dataSync(),e.dataSync(),n,r,o)},o.prototype.cropAndResize=function(t,e,n,r,o,a){var i=new Hi(t.shape,e.shape,r,o,a);return this.compileAndRun(i,[t,e,n],\"float32\")},o.prototype.depthToSpace=function(t,e,n){C(e>1,(function(){return\"blockSize should be > 1 for depthToSpace, but was: \"+e}));var r=t.shape[0],o=\"NHWC\"===n?t.shape[1]:t.shape[2],a=\"NHWC\"===n?t.shape[2]:t.shape[3],i=\"NHWC\"===n?t.shape[3]:t.shape[1],s=o*e,u=a*e,c=i/(e*e),l=new Yi(\"NHWC\"===n?[r,s,u,c]:[r,c,s,u],e,n);return this.compileAndRun(l,[t])},o.prototype.split=function(t,e,n){return Ua(t,e,n)},o.prototype.scatterND=function(t,e,n){var r=Go(0,t,n),o=r.sliceRank,a=r.numUpdates,i=r.sliceSize,s=r.strides,u=r.outputSize,c=[u/i,i],l=t.reshape([a,o]),h=e.reshape([a,i]);if(0===u)return Ia(Fn([]),n);var f=On(0),d=new $s(a,o,l.rank,h.rank,s,c);return this.compileAndRun(d,[h,l,f]).reshape(n)},o.prototype.sparseToDense=function(t,e,n,r){var o=Go(0,t,n),a=o.sliceRank,i=o.numUpdates,s=o.strides,u=o.outputSize,c=new $s(i,a,t.rank,e.rank,s,[u,1],!1);return this.compileAndRun(c,[e,t,r]).reshape(n)},o.prototype.fft=function(t){return this.fftImpl(t,!1)},o.prototype.ifft=function(t){return this.fftImpl(t,!0)},o.prototype.fftImpl=function(t,e){var n=this.texData.get(t.dataId),r=new rs(es,t.shape,e),o=new rs(ns,t.shape,e),a=[this.makeComplexComponentTensorInfo(t,n.complexTensors.real),this.makeComplexComponentTensorInfo(t,n.complexTensors.imag)],i=this.compileAndRun(r,a),s=this.compileAndRun(o,a),u=this.complex(i,s).as2D(t.shape[0],t.shape[1]);return i.dispose(),s.dispose(),u},o.prototype.gatherND=function(t,e){var n=e.shape,r=n[n.length-1],o=Po(t,e),a=o[0],i=o[1],s=o[2],u=o[3],c=e.reshape([i,r]),l=t.reshape([t.size/s,s]),h=new is(r,u,[i,s]);return this.compileAndRun(h,[l,c]).reshape(a)},o.prototype.fill=function(t,e,n){if(\"string\"===(n=n||j(e))){var r=P(n,k(t));return r.fill(e),Lt.makeTensor(r,t,n,this)}var o=new os(t,e),a=o.getCustomSetupFunc(e);return this.compileAndRun(o,[],n,a)},o.prototype.onesLike=function(t){if(\"string\"===t.dtype)throw new Error(\"onesLike is not supported under string dtype\");return this.fill(t.shape,1,t.dtype)},o.prototype.zerosLike=function(t){return this.fill(t.shape,\"string\"===t.dtype?\"\":0,t.dtype)},o.prototype.linspace=function(t,e,n){return ka(t,e,n)},o.prototype.makeTensorInfo=function(t,e){var n=this.write(null,t,e);return this.texData.get(n).usage=null,{dataId:n,shape:t,dtype:e}},o.prototype.makeOutput=function(t,e){var n=this.makeTensorInfo(t,e).dataId;return Lt.makeTensorFromDataId(n,t,e,this)},o.prototype.unpackTensor=function(t){var e=new Bu(t.shape);return this.runWebGLProgram(e,[t],t.dtype)},o.prototype.packTensor=function(t){var e=new Bs(t.shape);return this.runWebGLProgram(e,[t],t.dtype,null,!0)},o.prototype.packedReshape=function(t,e){var n=[Ae(t.shape)].concat(Te(t.shape)),r={dtype:t.dtype,shape:n,dataId:t.dataId},o=[Ae(e)].concat(Te(e)),a=new zs(o,n),i=this.runWebGLProgram(a,[r],t.dtype,null,!0);return{dataId:i.dataId,shape:e,dtype:i.dtype}},o.prototype.decode=function(t){var e,n=this.texData.get(t),r=n.isPacked,o=n.shape,a=n.dtype,i=De(o);e=r?new Xi(i):new ji(i);return{dtype:a,shape:o,dataId:this.runWebGLProgram(e,[{shape:i,dtype:a,dataId:t}],a,null,!0).dataId}},o.prototype.runWebGLProgram=function(t,e,n,r,o){var a=this;void 0===o&&(o=!1);var s=this.makeTensorInfo(t.outputShape,n),u=this.texData.get(s.dataId);if(t.packedOutput&&(u.isPacked=!0),t.outPackingScheme===Vt.DENSE){var c=Yt(t.outputShape);u.texShape=c.map((function(t){return 2*t}))}if(null!=t.outTexUsage&&(u.usage=t.outTexUsage),0===k(s.shape))return u.values=B(s.dtype,0),s;var l=[],h=e.map((function(e){if(\"complex64\"===e.dtype)throw new Error(\"GPGPUProgram does not support complex64 input. For complex64 dtypes, please separate the program into real and imaginary parts.\");var n=a.texData.get(e.dataId);if(null==n.texture){if(!t.packedInputs&&k(e.shape)<=i().getNumber(\"WEBGL_SIZE_UPLOAD_UNIFORM\"))return{shape:e.shape,texData:null,isUniform:!0,uniformValues:n.values};t.packedInputs&&(n.isPacked=!0,n.shape=e.shape)}else if(!!n.isPacked!=!!t.packedInputs)e=n.isPacked?a.unpackTensor(e):a.packTensor(e),l.push(e),n=a.texData.get(e.dataId);else if(n.isPacked&&!_e(n.shape,e.shape)){var r=e,o=e.shape;e.shape=n.shape,e=a.packedReshape(e,o),l.push(e),n=a.texData.get(e.dataId),r.shape=o}return a.uploadToGPU(e.dataId),{shape:e.shape,texData:n,isUniform:!1}}));this.uploadToGPU(s.dataId);var f,d={shape:s.shape,texData:u,isUniform:!1},p=function(t,e,n){var r=\"\";e.concat(n).forEach((function(t){var e=null!=t.texData&&null!=t.texData.slice&&t.texData.slice.flatOffset>0,n=t.isUniform?\"uniform\":t.texData.texShape;r+=t.shape+\"_\"+n+\"_\"+e}));var o=t.userCode,a=t.constructor.name;return a+=\"_\"+r+\"_\"+o}(t,h,d),v=this.getAndSaveBinary(p,(function(){return function(t,e,n,r){var o=e.userCode,a=n.map((function(t,n){var r={logicalShape:t.shape,texShape:t.isUniform?null:t.texData.texShape,isUniform:t.isUniform,isPacked:!t.isUniform&&t.texData.isPacked,flatOffset:null};return null!=t.texData&&null!=t.texData.slice&&t.texData.slice.flatOffset>0&&(r.flatOffset=t.texData.slice.flatOffset),{name:e.variableNames[n],shapeInfo:r}})),s=a.map((function(t){return t.shapeInfo})),u={logicalShape:r.shape,texShape:r.texData.texShape,isUniform:!1,isPacked:r.texData.isPacked,flatOffset:null},c=Za(a,u,o,e.packedInputs),l=t.createProgram(c),h=null,f=t.getUniformLocation(l,\"NAN\",!1);1===i().getNumber(\"WEBGL_VERSION\")&&(h=t.getUniformLocation(l,\"INFINITY\",!1));for(var d={},p=0;p<e.variableNames.length;p++){var v=e.variableNames[p];d[v]=t.getUniformLocation(l,v,!1),d[\"offset\"+v]=t.getUniformLocation(l,\"offset\"+v,!1)}return{program:e,source:c,webGLProgram:l,uniformLocations:d,inShapeInfos:s,outShapeInfo:u,infLoc:h,nanLoc:f}}(a.gpgpu,t,h,d)})),g=null!=this.activeTimers;if(g&&(f=this.startTimer()),function(t,e,n,r,o){ks(e.inShapeInfos,n),ks([e.outShapeInfo],[r]);var a=r.texData.texture,s=r.texData.texShape;r.texData.isPacked?t.setOutputPackedMatrixTexture(a,s[0],s[1]):t.setOutputMatrixTexture(a,s[0],s[1]),t.setProgram(e.webGLProgram),1===i().getNumber(\"WEBGL_VERSION\")&&null!==e.infLoc&&t.gl.uniform1f(e.infLoc,1/0),null!==e.nanLoc&&t.gl.uniform1f(e.nanLoc,NaN),n.forEach((function(n,r){var o=e.program.variableNames[r],a=e.uniformLocations[o],i=e.uniformLocations[\"offset\"+o];if(null!=a)if(n.isUniform)if(k(n.shape)<2)t.gl.uniform1f(a,n.uniformValues[0]);else{var s=n.uniformValues;s instanceof Float32Array||(s=new Float32Array(s)),t.gl.uniform1fv(a,s)}else null!=n.texData.slice&&null!=i&&t.gl.uniform1i(i,n.texData.slice.flatOffset),t.setInputMatrixTexture(n.texData.texture,a,r)})),null!=o&&o(t,e.webGLProgram),t.executeProgram()}(this.gpgpu,v,h,d,r),l.forEach((function(t){return a.disposeData(t.dataId)})),g&&(f=this.endTimer(f),this.activeTimers.push({name:t.constructor.name,query:this.getQueryTime(f)})),!i().getBool(\"WEBGL_LAZILY_UNPACK\")&&u.isPacked&&!1===o){var m=this.unpackTensor(s);return this.disposeData(s.dataId),m}return s},o.prototype.compileAndRun=function(t,e,n,r,o){void 0===o&&(o=!1),n=n||e[0].dtype;var a=this.runWebGLProgram(t,e,n,r,o);return Lt.makeTensorFromDataId(a.dataId,a.shape,a.dtype)},o.prototype.getAndSaveBinary=function(t,e){return t in this.binaryCache||(this.binaryCache[t]=e()),this.binaryCache[t]},o.prototype.getTextureManager=function(){return this.textureManager},o.prototype.dispose=function(){var t=this;if(!this.disposed){if(!i().getBool(\"IS_TEST\"))Object.keys(this.binaryCache).forEach((function(e){t.gpgpu.deleteProgram(t.binaryCache[e].webGLProgram),delete t.binaryCache[e]}));this.textureManager.dispose(),null!=this.canvas&&\"undefined\"!=typeof HTMLCanvasElement&&this.canvas instanceof HTMLCanvasElement?this.canvas.remove():this.canvas=null,this.gpgpuCreatedLocally&&(this.gpgpu.program=null,this.gpgpu.dispose()),this.disposed=!0}},o.prototype.floatPrecision=function(){var t=this;return null==this.floatPrecisionValue&&(this.floatPrecisionValue=Ze((function(){if(!i().get(\"WEBGL_RENDER_FLOAT32_ENABLED\")){var e=i().getBool(\"DEBUG\");i().set(\"DEBUG\",!1);var n=t.abs(On(1e-8)).dataSync()[0];if(i().set(\"DEBUG\",e),n>0)return 32}return 16}))),this.floatPrecisionValue},o.prototype.epsilon=function(){return 32===this.floatPrecision()?1e-7:1e-4},o.prototype.uploadToGPU=function(t){var e,n=this.texData.get(t),r=n.shape,o=n.dtype,a=n.values,i=n.texture,s=n.usage,u=n.isPacked;if(null==i){var c,l=null!=this.activeTimers;l&&(c=et());var h=n.texShape;if(null==h&&(h=Ne(r,u),n.texShape=h),null!=a){var f=De(r),d=void 0,p=h[1],v=h[0],g=a instanceof Uint8Array;u?(p=(e=$t(h[0],h[1]))[0],v=e[1],d=new ts(f,[v,p],g)):d=new Zi(f,[v,p],g);var m=this.makeTensorInfo([v,p],o);this.texData.get(m.dataId).usage=g?zt.PIXELS:zt.UPLOAD,this.gpgpu.uploadDenseMatrixToTexture(this.getTexture(m.dataId),p,v,a);var y=this.runWebGLProgram(d,[m],o,null,!0),x=this.texData.get(y.dataId);n.texture=x.texture,n.texShape=x.texShape,n.isPacked=x.isPacked,n.usage=x.usage,this.disposeData(m.dataId),this.texData.delete(y.dataId),n.values=null,l&&(this.uploadWaitMs+=et()-c)}else{var b=this.acquireTexture(h,s,o,u);n.texture=b}}},o.prototype.convertAndCacheOnCPU=function(t,e){var n=this.texData.get(t),r=n.dtype;return this.releaseGPUData(t),null!=e&&(n.values=function(t,e){if(\"float32\"===e||\"complex64\"===e)return t;if(\"int32\"===e||\"bool\"===e){for(var n=\"int32\"===e?new Int32Array(t.length):new Uint8Array(t.length),r=0;r<n.length;++r)n[r]=Math.round(t[r]);return n}throw new Error(\"Unknown dtype \"+e)}(e,r)),n.values},o.prototype.acquireTexture=function(t,e,n,r){if(this.numBytesInGPU+=this.computeBytes(t,n),!this.warnedAboutMemory&&this.numBytesInGPU>1024*this.numMBBeforeWarning*1024){var o=(this.numBytesInGPU/1024/1024).toFixed(2);this.warnedAboutMemory=!0,console.warn(\"High memory usage in GPU: \"+o+\" MB, most likely due to a memory leak\")}return this.textureManager.acquireTexture(t,e,r)},o.prototype.computeBytes=function(t,e){return t[0]*t[1]*z(e)},o}(la);Wt()&&Lt.registerBackend(\"webgl\",(function(){return new Uu}),2);\"undefined\"!=typeof globalThis?globalThis:\"undefined\"!=typeof window?window:\"undefined\"!=typeof global?global:\"undefined\"!=typeof self&&self;function Vu(t,e){return t(e={exports:{}},e.exports),e.exports}var zu=Vu((function(t){!function(t,e,n){function r(t){var e,n=this,r=(e=4022871197,function(t){t=t.toString();for(var n=0;n<t.length;n++){var r=.02519603282416938*(e+=t.charCodeAt(n));r-=e=r>>>0,e=(r*=e)>>>0,e+=4294967296*(r-=e)}return 2.3283064365386963e-10*(e>>>0)});n.next=function(){var t=2091639*n.s0+2.3283064365386963e-10*n.c;return n.s0=n.s1,n.s1=n.s2,n.s2=t-(n.c=0|t)},n.c=1,n.s0=r(\" \"),n.s1=r(\" \"),n.s2=r(\" \"),n.s0-=r(t),n.s0<0&&(n.s0+=1),n.s1-=r(t),n.s1<0&&(n.s1+=1),n.s2-=r(t),n.s2<0&&(n.s2+=1),r=null}function o(t,e){return e.c=t.c,e.s0=t.s0,e.s1=t.s1,e.s2=t.s2,e}function a(t,e){var n=new r(t),a=e&&e.state,i=n.next;return i.int32=function(){return 4294967296*n.next()|0},i.double=function(){return i()+11102230246251565e-32*(2097152*i()|0)},i.quick=i,a&&(\"object\"==typeof a&&o(a,n),i.state=function(){return o(n,{})}),i}e&&e.exports?e.exports=a:n&&n.amd?n((function(){return a})):this.alea=a}(0,t,!1)})),Gu=Vu((function(t){!function(t,e,n){function r(t){var e=this,n=\"\";e.x=0,e.y=0,e.z=0,e.w=0,e.next=function(){var t=e.x^e.x<<11;return e.x=e.y,e.y=e.z,e.z=e.w,e.w^=e.w>>>19^t^t>>>8},t===(0|t)?e.x=t:n+=t;for(var r=0;r<n.length+64;r++)e.x^=0|n.charCodeAt(r),e.next()}function o(t,e){return e.x=t.x,e.y=t.y,e.z=t.z,e.w=t.w,e}function a(t,e){var n=new r(t),a=e&&e.state,i=function(){return(n.next()>>>0)/4294967296};return i.double=function(){do{var t=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},i.int32=n.next,i.quick=i,a&&(\"object\"==typeof a&&o(a,n),i.state=function(){return o(n,{})}),i}e&&e.exports?e.exports=a:n&&n.amd?n((function(){return a})):this.xor128=a}(0,t,!1)})),Hu=Vu((function(t){!function(t,e,n){function r(t){var e=this,n=\"\";e.next=function(){var t=e.x^e.x>>>2;return e.x=e.y,e.y=e.z,e.z=e.w,e.w=e.v,(e.d=e.d+362437|0)+(e.v=e.v^e.v<<4^t^t<<1)|0},e.x=0,e.y=0,e.z=0,e.w=0,e.v=0,t===(0|t)?e.x=t:n+=t;for(var r=0;r<n.length+64;r++)e.x^=0|n.charCodeAt(r),r==n.length&&(e.d=e.x<<10^e.x>>>4),e.next()}function o(t,e){return e.x=t.x,e.y=t.y,e.z=t.z,e.w=t.w,e.v=t.v,e.d=t.d,e}function a(t,e){var n=new r(t),a=e&&e.state,i=function(){return(n.next()>>>0)/4294967296};return i.double=function(){do{var t=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},i.int32=n.next,i.quick=i,a&&(\"object\"==typeof a&&o(a,n),i.state=function(){return o(n,{})}),i}e&&e.exports?e.exports=a:n&&n.amd?n((function(){return a})):this.xorwow=a}(0,t,!1)})),qu=Vu((function(t){!function(t,e,n){function r(t){var e=this;e.next=function(){var t,n,r=e.x,o=e.i;return t=r[o],n=(t^=t>>>7)^t<<24,n^=(t=r[o+1&7])^t>>>10,n^=(t=r[o+3&7])^t>>>3,n^=(t=r[o+4&7])^t<<7,t=r[o+7&7],n^=(t^=t<<13)^t<<9,r[o]=n,e.i=o+1&7,n},function(t,e){var n,r=[];if(e===(0|e))r[0]=e;else for(e=\"\"+e,n=0;n<e.length;++n)r[7&n]=r[7&n]<<15^e.charCodeAt(n)+r[n+1&7]<<13;for(;r.length<8;)r.push(0);for(n=0;n<8&&0===r[n];++n);for(8==n?r[7]=-1:r[n],t.x=r,t.i=0,n=256;n>0;--n)t.next()}(e,t)}function o(t,e){return e.x=t.x.slice(),e.i=t.i,e}function a(t,e){null==t&&(t=+new Date);var n=new r(t),a=e&&e.state,i=function(){return(n.next()>>>0)/4294967296};return i.double=function(){do{var t=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},i.int32=n.next,i.quick=i,a&&(a.x&&o(a,n),i.state=function(){return o(n,{})}),i}e&&e.exports?e.exports=a:n&&n.amd?n((function(){return a})):this.xorshift7=a}(0,t,!1)})),Ku=Vu((function(t){!function(t,e,n){function r(t){var e=this;e.next=function(){var t,n,r=e.w,o=e.X,a=e.i;return e.w=r=r+1640531527|0,n=o[a+34&127],t=o[a=a+1&127],n^=n<<13,t^=t<<17,n^=n>>>15,t^=t>>>12,n=o[a]=n^t,e.i=a,n+(r^r>>>16)|0},function(t,e){var n,r,o,a,i,s=[],u=128;for(e===(0|e)?(r=e,e=null):(e+=\"\\0\",r=0,u=Math.max(u,e.length)),o=0,a=-32;a<u;++a)e&&(r^=e.charCodeAt((a+32)%e.length)),0===a&&(i=r),r^=r<<10,r^=r>>>15,r^=r<<4,r^=r>>>13,a>=0&&(i=i+1640531527|0,o=0==(n=s[127&a]^=r+i)?o+1:0);for(o>=128&&(s[127&(e&&e.length||0)]=-1),o=127,a=512;a>0;--a)r=s[o+34&127],n=s[o=o+1&127],r^=r<<13,n^=n<<17,r^=r>>>15,n^=n>>>12,s[o]=r^n;t.w=i,t.X=s,t.i=o}(e,t)}function o(t,e){return e.i=t.i,e.w=t.w,e.X=t.X.slice(),e}function a(t,e){null==t&&(t=+new Date);var n=new r(t),a=e&&e.state,i=function(){return(n.next()>>>0)/4294967296};return i.double=function(){do{var t=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},i.int32=n.next,i.quick=i,a&&(a.X&&o(a,n),i.state=function(){return o(n,{})}),i}e&&e.exports?e.exports=a:n&&n.amd?n((function(){return a})):this.xor4096=a}(0,t,!1)})),ju=Vu((function(t){!function(t,e,n){function r(t){var e=this,n=\"\";e.next=function(){var t=e.b,n=e.c,r=e.d,o=e.a;return t=t<<25^t>>>7^n,n=n-r|0,r=r<<24^r>>>8^o,o=o-t|0,e.b=t=t<<20^t>>>12^n,e.c=n=n-r|0,e.d=r<<16^n>>>16^o,e.a=o-t|0},e.a=0,e.b=0,e.c=-1640531527,e.d=1367130551,t===Math.floor(t)?(e.a=t/4294967296|0,e.b=0|t):n+=t;for(var r=0;r<n.length+20;r++)e.b^=0|n.charCodeAt(r),e.next()}function o(t,e){return e.a=t.a,e.b=t.b,e.c=t.c,e.d=t.d,e}function a(t,e){var n=new r(t),a=e&&e.state,i=function(){return(n.next()>>>0)/4294967296};return i.double=function(){do{var t=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},i.int32=n.next,i.quick=i,a&&(\"object\"==typeof a&&o(a,n),i.state=function(){return o(n,{})}),i}e&&e.exports?e.exports=a:n&&n.amd?n((function(){return a})):this.tychei=a}(0,t,!1)})),Xu=Vu((function(t){!function(e,n){var r,o=this,a=256,i=6,s=\"random\",u=n.pow(a,i),c=n.pow(2,52),l=2*c,h=a-1;function f(t,h,f){var m=[],y=v(function t(e,n){var r,o=[],a=typeof e;if(n&&\"object\"==a)for(r in e)try{o.push(t(e[r],n-1))}catch(t){}return o.length?o:\"string\"==a?e:e+\"\\0\"}((h=1==h?{entropy:!0}:h||{}).entropy?[t,g(e)]:null==t?function(){try{var t;return r&&(t=r.randomBytes)?t=t(a):(t=new Uint8Array(a),(o.crypto||o.msCrypto).getRandomValues(t)),g(t)}catch(t){var n=o.navigator,i=n&&n.plugins;return[+new Date,o,i,o.screen,g(e)]}}():t,3),m),x=new d(m),b=function(){for(var t=x.g(i),e=u,n=0;t<c;)t=(t+n)*a,e*=a,n=x.g(1);for(;t>=l;)t/=2,e/=2,n>>>=1;return(t+n)/e};return b.int32=function(){return 0|x.g(4)},b.quick=function(){return x.g(4)/4294967296},b.double=b,v(g(x.S),e),(h.pass||f||function(t,e,r,o){return o&&(o.S&&p(o,x),t.state=function(){return p(x,{})}),r?(n[s]=t,e):t})(b,y,\"global\"in h?h.global:this==n,h.state)}function d(t){var e,n=t.length,r=this,o=0,i=r.i=r.j=0,s=r.S=[];for(n||(t=[n++]);o<a;)s[o]=o++;for(o=0;o<a;o++)s[o]=s[i=h&i+t[o%n]+(e=s[o])],s[i]=e;(r.g=function(t){for(var e,n=0,o=r.i,i=r.j,s=r.S;t--;)e=s[o=h&o+1],n=n*a+s[h&(s[o]=s[i=h&i+e])+(s[i]=e)];return r.i=o,r.j=i,n})(a)}function p(t,e){return e.i=t.i,e.j=t.j,e.S=t.S.slice(),e}function v(t,e){for(var n,r=t+\"\",o=0;o<r.length;)e[h&o]=h&(n^=19*e[h&o])+r.charCodeAt(o++);return g(e)}function g(t){return String.fromCharCode.apply(0,t)}if(n[\"seed\"+s]=f,v(n.random(),e),t.exports){t.exports=f;try{r=require(\"crypto\")}catch(t){}}}([],Math)}));Xu.alea=zu,Xu.xor128=Gu,Xu.xorwow=Hu,Xu.xorshift7=qu,Xu.xor4096=Ku,Xu.tychei=ju;var Yu=Xu.alea;var $u=An({addN_:function(t){C(Array.isArray(t),(function(){return\"The argument passed to tf.addN() must be a list of tensors\"})),C(t.length>=1,(function(){return\"Must pass at least one tensor to tf.addN(), but got \"+t.length}));var e=t.map((function(t,e){return gn(t,\"tensors\"+e,\"addN\")})),n=e[0];e.forEach((function(t){if(t.dtype!==n.dtype)throw new Error(\"All tensors passed to tf.addN() must have the same dtype\")})),e.forEach((function(t){if(!S(t.shape,n.shape))throw new Error(\"All tensors passed to tf.addN() must have the same shape\")}));var r=e;return Lt.runKernelFunc((function(t,n){return t.addN(e)}),r,null,\"AddN\")}});function Qu(){Xe(\"tf.batchNormalization() is going away. Use tf.batchNorm() instead, and note the positional argument change of scale, offset, and varianceEpsilon\")}function Ju(t){return 0===t.rank||1===t.rank?t.as4D(1,1,1,t.size):2===t.rank?t.as4D(1,1,t.shape[0],t.shape[1]):3===t.rank?t.as4D(1,t.shape[0],t.shape[1],t.shape[2]):t}function Zu(t,e,n,r,o,a){null==a&&(a=.001);var i,s,u=gn(t,\"x\",\"batchNorm\"),c=gn(e,\"mean\",\"batchNorm\"),l=gn(n,\"variance\",\"batchNorm\");null!=o&&(i=gn(o,\"scale\",\"batchNorm\")),null!=r&&(s=gn(r,\"offset\",\"batchNorm\")),C(c.rank===l.rank,(function(){return\"Batch normalization gradient requires mean and variance to have equal ranks.\"})),C(null==s||c.rank===s.rank,(function(){return\"Batch normalization gradient requires mean and offset to have equal ranks.\"})),C(null==i||c.rank===i.rank,(function(){return\"Batch normalization gradient requires mean and scale to have equal ranks.\"}));var h={x:u,scale:i,offset:s,mean:c,variance:l},f={varianceEpsilon:a};return Lt.runKernelFunc((function(t,e){var n=Ju(u),r=t.batchNormalization(n,tc(c),tc(l),a,tc(i),tc(s));return e([u,c,l,i]),r}),h,null,\"FusedBatchNorm\",f).reshape(u.shape)}function tc(t){return null==t?null:0===t.rank?t.as1D():1===t.rank?t:2===t.rank?t.as4D(1,1,t.shape[0],t.shape[1]):3===t.rank?t.as4D(1,t.shape[0],t.shape[1],t.shape[2]):t}var ec=An({batchNormalization_:function(t,e,n,r,o,a){return void 0===r&&(r=.001),Qu(),Zu(t,e,n,a,o,r)}}),nc=An({batchNorm_:Zu});function rc(t,e,n,r,o,a){var i,s,u=gn(t,\"x\",\"batchNorm\"),c=gn(e,\"mean\",\"batchNorm\"),l=gn(n,\"variance\",\"batchNorm\");return null!=o&&(i=gn(o,\"scale\",\"batchNorm\")),null!=r&&(s=gn(r,\"offset\",\"batchNorm\")),C(2===u.rank,(function(){return\"Error in batchNorm3D: x must be rank 3 but got rank \"+u.rank+\".\"})),C(2===c.rank||1===c.rank,(function(){return\"Error in batchNorm2D: mean must be rank 2 or rank 1 but got rank \"+c.rank+\".\"})),C(2===l.rank||1===l.rank,(function(){return\"Error in batchNorm2D: variance must be rank 2 or rank 1 but got rank \"+l.rank+\".\"})),null!=i&&C(2===i.rank||1===i.rank,(function(){return\"Error in batchNorm2D: scale must be rank 2 or rank 1 but got rank \"+i.rank+\".\"})),null!=s&&C(2===s.rank||1===s.rank,(function(){return\"Error in batchNorm2D: offset must be rank 2 or rank 1 but got rank \"+s.rank+\".\"})),nc(u,c,l,s,i,a)}var oc=An({batchNormalization2d_:function(t,e,n,r,o,a){return void 0===r&&(r=.001),Qu(),rc(t,e,n,a,o,r)}}),ac=An({batchNorm2d_:rc});function ic(t,e,n,r,o,a){var i,s,u=gn(t,\"x\",\"batchNorm\"),c=gn(e,\"mean\",\"batchNorm\"),l=gn(n,\"variance\",\"batchNorm\");return null!=o&&(i=gn(o,\"scale\",\"batchNorm\")),null!=r&&(s=gn(r,\"offset\",\"batchNorm\")),C(3===u.rank,(function(){return\"Error in batchNorm3D: x must be rank 3 but got rank \"+u.rank+\".\"})),C(3===c.rank||1===c.rank,(function(){return\"Error in batchNorm3D: mean must be rank 3 or rank 1 but got rank \"+c.rank+\".\"})),C(3===l.rank||1===l.rank,(function(){return\"Error in batchNorm3D: variance must be rank 3 or rank 1 but got rank \"+l.rank+\".\"})),null!=i&&C(3===i.rank||1===i.rank,(function(){return\"Error in batchNorm3D: scale must be rank 3 or rank 1 but got rank \"+i.rank+\".\"})),null!=s&&C(3===s.rank||1===s.rank,(function(){return\"Error in batchNorm3D: offset must be rank 3 or rank 1 but got rank \"+s.rank+\".\"})),nc(u,c,l,s,i,a)}var sc=An({batchNormalization3d_:function(t,e,n,r,o,a){return void 0===r&&(r=.001),Qu(),ic(t,e,n,a,o,r)}}),uc=An({batchNorm3d_:ic});function cc(t,e,n,r,o,a){var i,s,u=gn(t,\"x\",\"batchNorm\"),c=gn(e,\"mean\",\"batchNorm\"),l=gn(n,\"variance\",\"batchNorm\");return null!=o&&(i=gn(o,\"scale\",\"batchNorm\")),null!=r&&(s=gn(r,\"offset\",\"batchNorm\")),C(4===u.rank,(function(){return\"Error in batchNorm4D: x must be rank 4 but got rank \"+u.rank+\".\"})),C(4===c.rank||1===c.rank,(function(){return\"Error in batchNorm4D: mean must be rank 4 or rank 1 but got rank \"+c.rank+\".\"})),C(4===l.rank||1===l.rank,(function(){return\"Error in batchNorm4D: variance must be rank 4 or rank 1 but got rank \"+l.rank+\".\"})),null!=i&&C(4===i.rank||1===i.rank,(function(){return\"Error in batchNorm4D: scale must be rank 4 or rank 1 but got rank \"+i.rank+\".\"})),null!=s&&C(4===s.rank||1===s.rank,(function(){return\"Error in batchNorm4D: offset must be rank 4 or rank 1 but got rank \"+s.rank+\".\"})),nc(u,c,l,s,i,a)}var lc=An({batchNormalization4d_:function(t,e,n,r,o,a){return void 0===r&&(r=.001),Qu(),cc(t,e,n,a,o,r)}}),hc=An({batchNorm4d_:cc});var fc=An({broadcastTo_:function(t,e){var n=gn(t,\"broadcastTo\",\"x\"),r=n.shape;if(e.some((function(t){return!(t>0)||t%1!=0})))throw new Error(\"broadcastTo(): Invalid broadcast shape [\"+e+\"].\");if(e.length<n.rank)throw new Error(\"broadcastTo(): shape.length=\"+e.length+\" < input.rank=\"+n.rank+\".\");if(e.length>n.rank){for(var o=n.shape.slice();o.length<e.length;)o.unshift(1);n=n.reshape(o)}for(var a=n.shape,i=Array.from(e),s=e.length-1;s>=0;s--)if(a[s]===e[s])i[s]=1;else if(1!==n.shape[s])throw new Error(\"broadcastTo(): [\"+r+\"] cannot be broadcast to [\"+e+\"].\");var u=i.map((function(t,e){return t>1?e:-1})).filter((function(t){return t>=0}));if(0===u.length)return n.clone();var c={x:n},l={shape:e,inputShape:a};return Lt.runKernelFunc((function(t){return t.tile(n,i)}),c,(function(t){return{x:function(){return t.sum(u,!0)}}}),Sr,l)}});var dc=An({clone_:function(t){var e=gn(t,\"x\",\"clone\",null);return Lt.runKernelFunc((function(){return Lt.makeTensorFromDataId(e.dataId,e.shape,e.dtype)}),{x:e},null,Tr)}});var pc=An({logicalAnd_:function(t,e){var n=gn(t,\"a\",\"logicalAnd\",\"bool\"),r=gn(e,\"b\",\"logicalAnd\",\"bool\");return Pr(n.shape,r.shape),Lt.runKernelFunc((function(t){return t.logicalAnd(n,r)}),{a:n,b:r},null,\"LogicalAnd\")}}),vc=An({logicalNot_:function(t){var e=gn(t,\"x\",\"logicalNot\",\"bool\");return Lt.runKernelFunc((function(t){return t.logicalNot(e)}),{$x:e})}}),gc=An({logicalOr_:function(t,e){var n=gn(t,\"a\",\"logicalOr\",\"bool\"),r=gn(e,\"b\",\"logicalOr\",\"bool\");return Pr(n.shape,r.shape),Lt.runKernelFunc((function(t){return t.logicalOr(n,r)}),{$a:n,$b:r})}}),mc=An({logicalXor_:function(t,e){var n=gn(t,\"a\",\"logicalXor\",\"bool\"),r=gn(e,\"b\",\"logicalXor\",\"bool\");return Pr(n.shape,r.shape),gc(t,e).logicalAnd(pc(t,e).logicalNot())}}),yc=An({where_:function(t,e,n){var r=gn(e,\"a\",\"where\"),o=gn(n,\"b\",\"where\"),a=gn(t,\"condition\",\"where\",\"bool\");return E(r.shape,o.shape,\"Error in where: \"),1===a.rank?C(a.shape[0]===r.shape[0],(function(){return\"The first dimension of `a` must match the size of `condition`.\"})):E(a.shape,o.shape,\"Error in where: \"),Lt.runKernelFunc((function(t,e){var n=t.select(a,r,o);return e([a]),n}),{$condition:a,$a:r,$b:o},(function(t,e){var n=e[0];return{$condition:function(){return Xn(n).toFloat()},$a:function(){return t.mul(n.cast(t.dtype))},$b:function(){return t.mul(n.logicalNot().cast(t.dtype))}}}))}}),xc=function(t){return n(this,void 0,void 0,(function(){var e,n,o;return r(this,(function(r){switch(r.label){case 0:return[4,(e=gn(t,\"condition\",\"whereAsync\",\"bool\")).data()];case 1:return n=r.sent(),o=Ga(e.shape,n),t!==e&&e.dispose(),[2,o]}}))}))};var bc=An({divNoNan_:function(t,e){var n,r=gn(t,\"a\",\"div\"),o=gn(e,\"b\",\"div\");r=(n=Nt(r,o))[0],o=n[1];var a=Bo(r,o),i=Xn(a),s=o.equal(i);return yc(s,i,a)}});var wc=An({tile_:function(t,e){var n=gn(t,\"x\",\"tile\",null);C(n.rank===e.length,(function(){return\"Error in transpose: rank of input \"+n.rank+\" must match length of reps \"+e+\".\"}));var r=[n],o={x:n},a={reps:e};return Lt.runKernelFunc((function(t,r){var o=t.tile(n,e);return r([n]),o}),o,null,Dr,a,r)}});var Cc=An({eye_:function(t,e,n,r){void 0===r&&(r=\"float32\"),null==e&&(e=t);for(var o=er([t,e],r),a=t<=e?t:e,i=0;i<a;++i)o.set(1,i,i);var s=o.toTensor().as2D(t,e);if(null==n)return s;if(1===n.length)return wc(sr(s,0),[n[0],1,1]);if(2===n.length)return wc(sr(sr(s,0),0),[n[0],n[1],1,1]);if(3===n.length)return wc(sr(sr(sr(s,0),0),0),[n[0],n[1],n[2],1,1]);throw new Error(\"eye() currently supports only 1D and 2D batchShapes, but received \"+n.length+\"D.\")}});var Ec=An({multinomial_:function(t,e,n,r){void 0===r&&(r=!1);var o=gn(t,\"logits\",\"multinomial\"),a=o.size,i=o.rank;if(a<2)throw new Error(\"Error in multinomial: you need at least 2 outcomes, but got \"+a+\".\");if(i>2)throw new Error(\"Rank of probabilities must be 1 or 2, but is \"+i);n=n||Math.random();var s=1===i?o.as2D(1,-1):o,u=Lt.runKernelFunc((function(t){return t.multinomial(s,r,e,n)}),{logits2D:s});return 1===i?u.as1D():u}});var Rc=An({oneHot_:function(t,e,n,r){if(void 0===n&&(n=1),void 0===r&&(r=0),e<2)throw new Error(\"Error in oneHot: depth must be >=2, but it is \"+e);var o=gn(t,\"indices\",\"oneHot\",\"int32\"),a=o.shape.concat([e]),i={indices:o=o.flatten()},s={depth:e,onValue:n,offValue:r};return Lt.runKernelFunc((function(t,a){return a([o]),t.oneHot(o,e,n,r)}),i,null,Ar,s).reshape(a)}});var Ic=An({pad_:function(t,e,n){void 0===n&&(n=0);var r=gn(t,\"x\",\"pad\");if(0===r.rank)throw new Error(\"pad(scalar) is not defined. Pass non-scalar to pad\");var o={paddings:e,constantValue:n},a={x:r};return Lt.runKernelFunc((function(t,o){return o([r]),t.pad(r,e,n)}),a,null,Nr,o)}});var kc=An({pad1d_:function(t,e,n){return void 0===n&&(n=0),C(2===e.length,(function(){return\"Invalid number of paddings. Must be length of 2.\"})),Ic(t,[e],n)}});var Sc=An({pad2d_:function(t,e,n){return void 0===n&&(n=0),C(2===e.length&&2===e[0].length&&2===e[1].length,(function(){return\"Invalid number of paddings. Must be length of 2 each.\"})),Ic(t,e,n)}});var Ac=An({pad3d_:function(t,e,n){return void 0===n&&(n=0),C(3===e.length&&2===e[0].length&&2===e[1].length&&2===e[2].length,(function(){return\"Invalid number of paddings. Must be length of 2 each.\"})),Ic(t,e,n)}});var Tc=An({pad4d_:function(t,e,n){return void 0===n&&(n=0),C(4===e.length&&2===e[0].length&&2===e[1].length&&2===e[2].length&&2===e[3].length,(function(){return\"Invalid number of paddings. Must be length of 2 each.\"})),Ic(t,e,n)}});var Dc=An({rand_:function(t,e,n){var r=k(t),o=null;if(null==n||\"float32\"===n)o=new Float32Array(r);else if(\"int32\"===n)o=new Int32Array(r);else{if(\"bool\"!==n)throw new Error(\"Unknown data type \"+n);o=new Uint8Array(r)}for(var a=0;a<r;a++)o[a]=e();return Lt.makeTensor(o,t,n)}}),Nc=.001,Fc=.1;function _c(){return 32===Lt.backend.floatPrecision()?Nc:Fc}function Oc(t,e,n){var r=!0;if((V(t)||V(e))&&(r=!1),V(t)&&V(e)&&(r=!0),r){var o=t.constructor.name,a=e.constructor.name;if(o!==a)throw new Error(\"Arrays are of different type. Actual: \"+o+\". Expected: \"+a)}if(Array.isArray(t)&&Array.isArray(e)){var i=pn(t),s=pn(e);if(!S(i,s))throw new Error(\"Arrays have different shapes. Actual: [\"+i+\"]. Expected: [\"+s+\"]\")}var u=V(t)?t:I(t),c=V(e)?e:I(e);if(u.length!==c.length)throw new Error(\"Arrays have different lengths actual: \"+u.length+\" vs expected: \"+c.length+\".\\nActual:   \"+u+\".\\nExpected: \"+c+\".\");for(var l=0;l<c.length;++l){var h=u[l],f=c[l];if(!n(h,f))throw new Error(\"Arrays differ: actual[\"+l+\"] = \"+h+\", expected[\"+l+\"] = \"+f+\".\\nActual:   \"+u+\".\\nExpected: \"+c+\".\")}}function Mc(t,e,n){return!isFinite(t)&&!isFinite(e)||!(isNaN(t)||isNaN(e)||Math.abs(t-e)>n)}var Bc=Object.freeze({TEST_EPSILON_FLOAT16:Fc,expectArraysClose:function(t,e,n){return null==n&&(n=_c()),Oc(t,e,(function(t,e){return Mc(t,e,n)}))},testEpsilon:_c,expectPromiseToFail:function(t,e){t().then((function(){return e.fail()}),(function(){return e()}))},expectArraysEqual:function(t,e){var n=\"string\"==typeof e||\"number\"==typeof e||\"boolean\"==typeof e?[e]:e;return H(t)||H(t[0])||H(e)||H(e[0])?Oc(t,n,(function(t,e){return t==e})):Oc(t,e,(function(t,e){return Mc(t,e,0)}))},expectNumbersClose:function(t,e,n){if(null==n&&(n=_c()),!Mc(t,e,n))throw new Error(\"Numbers differ: actual === \"+t+\", expected === \"+e)},expectValuesInRange:function(t,e,n){for(var r=0;r<t.length;r++)if(t[r]<e||t[r]>n)throw new Error(\"Value out of range:\"+t[r]+\" low: \"+e+\", high: \"+n)},expectArrayBuffersEqual:function(t,e){expect(new Float32Array(t)).toEqual(new Float32Array(e))}}),Pc=function(){function t(t,e,n,r,o){this.mean=t,this.stdDev=e,this.dtype=n,this.nextVal=NaN,this.truncated=r,this.truncated&&(this.upper=this.mean+2*this.stdDev,this.lower=this.mean-2*this.stdDev);var a=o||Math.random();this.random=Yu(a.toString())}return t.prototype.nextValue=function(){if(!isNaN(this.nextVal)){var t=this.nextVal;return this.nextVal=NaN,t}for(var e,n,r=!1;!r;){var o=void 0,a=void 0,i=void 0;do{i=(o=2*this.random()-1)*o+(a=2*this.random()-1)*a}while(i>=1||0===i);var s=Math.sqrt(-2*Math.log(i)/i);e=this.mean+this.stdDev*o*s,n=this.mean+this.stdDev*a*s,this.truncated&&!this.isValidTruncated(e)||(r=!0)}return this.truncated&&!this.isValidTruncated(n)||(this.nextVal=this.convertValue(n)),this.convertValue(e)},t.prototype.convertValue=function(t){return null==this.dtype||\"float32\"===this.dtype?t:Math.round(t)},t.prototype.isValidTruncated=function(t){return t<=this.upper&&t>=this.lower},t}(),Lc=function(){function t(t,e,n,r){this.alpha=t,this.beta=1/e,this.dtype=n;var o=r||Math.random();this.randu=Yu(o.toString()),this.randn=new Pc(0,1,n,!1,this.randu()),this.d=t<1?t+2/3:t-1/3,this.c=1/Math.sqrt(9*this.d)}return t.prototype.nextValue=function(){for(var t,e,n,r,o,a;;){do{r=this.randn.nextValue(),a=1+this.c*r}while(a<=0);if(a*=a*a,e=1-.331*(t=r*r)*t,n=.5*t+this.d*(1-a+Math.log(a)),(o=this.randu())<e||Math.log(o)<n)break}return a=1/this.beta*this.d*a,this.alpha<1&&(a*=Math.pow(this.randu(),1/this.alpha)),this.convertValue(a)},t.prototype.convertValue=function(t){return\"float32\"===this.dtype?t:Math.round(t)},t}(),Wc=function(){function t(t,e,n,r){var o=this;if(void 0===t&&(t=0),void 0===e&&(e=1),this.canReturnFloat=function(){return null==o.dtype||\"float32\"===o.dtype},this.min=t,this.range=e-t,this.dtype=n,null==r&&(r=Math.random()),\"number\"==typeof r&&(r=r.toString()),!this.canReturnFloat()&&this.range<=1)throw new Error(\"The difference between \"+t+\" - \"+e+\" <= 1 and dtype is not float\");this.random=Yu(r)}return t.prototype.convertValue=function(t){return this.canReturnFloat()?t:Math.round(t)},t.prototype.nextValue=function(){return this.convertValue(this.min+this.range*this.random())},t}();var Uc=An({randomGamma_:function(t,e,n,r,o){if(void 0===n&&(n=1),void 0===r&&(r=\"float32\"),null==n&&(n=1),null==r&&(r=\"float32\"),\"float32\"!==r&&\"int32\"!==r)throw new Error(\"Unsupported data type \"+r);for(var a=new Lc(e,n,r,o),i=er(t,r),s=0;s<i.values.length;s++)i.values[s]=a.nextValue();return i.toTensor()}});var Vc=An({randomNormal_:function(t,e,n,r,o){if(void 0===e&&(e=0),void 0===n&&(n=1),null!=r&&\"bool\"===r)throw new Error(\"Unsupported data type \"+r);for(var a=new Pc(e,n,r,!1,o),i=er(t,r),s=0;s<i.values.length;s++)i.values[s]=a.nextValue();return i.toTensor()}});var zc=An({randomUniform_:function(t,e,n,r,o){void 0===e&&(e=0),void 0===n&&(n=1),void 0===r&&(r=\"float32\");for(var a=er(t,r),i=new Wc(e,n,null,o),s=0;s<a.values.length;s++)a.values[s]=i.nextValue();return a.toTensor()}});var Gc=An({square_:function(t){var e=gn(t,\"x\",\"square\"),n=[e];return Lt.runKernelFunc((function(t,n){return n([e]),t.square(e)}),{x:e},null,\"Square\",{},n,[])}});var Hc=An({squaredDifference_:function(t,e){var n,r=gn(t,\"a\",\"squaredDifference\"),o=gn(e,\"b\",\"squaredDifference\");n=Nt(r,o),r=n[0],o=n[1],Pr(r.shape,o.shape);var a={a:r,b:o},i=[r,o];return Lt.runKernelFunc((function(t,e){var n=t.squaredDifference(r,o);return e([r,o]),n}),a,(function(t,e){var n=e[0],r=e[1],o=On(2);return{a:function(){return t.mul(n.sub(r).mul(o))},b:function(){return t.mul(r.sub(n).mul(o))}}}),Er,{},i,[])}});var qc=An({truncatedNormal_:function(t,e,n,r,o){if(void 0===e&&(e=0),void 0===n&&(n=1),null!=r&&\"bool\"===r)throw new Error(\"Unsupported data type $ { dtype }\");for(var a=new Pc(e,n,r,!0,o),i=er(t,r),s=0;s<i.values.length;s++)i.values[s]=a.nextValue();return i.toTensor()}});var Kc=An({equal_:function(t,e){var n,r=gn(t,\"a\",\"equal\"),o=gn(e,\"b\",\"equal\");return n=Nt(r,o),r=n[0],o=n[1],Pr(r.shape,o.shape),Lt.runKernelFunc((function(t){return t.equal(r,o)}),{$a:r,$b:o})}}),jc=An({equalStrict_:function(t,e){var n=gn(t,\"a\",\"equalStrict\"),r=gn(e,\"b\",\"equalStrict\");return E(n.shape,r.shape,\"Error in equalStrict: \"),n.equal(r)}}),Xc=An({greater_:function(t,e){var n,r=gn(t,\"a\",\"greater\"),o=gn(e,\"b\",\"greater\");return n=Nt(r,o),r=n[0],o=n[1],Pr(r.shape,o.shape),Lt.runKernelFunc((function(t){return t.greater(r,o)}),{a:r,b:o},null,\"Greater\")}}),Yc=An({greaterEqual_:function(t,e){var n,r=gn(t,\"a\",\"greaterEqual\"),o=gn(e,\"b\",\"greaterEqual\");return n=Nt(r,o),r=n[0],o=n[1],Pr(r.shape,o.shape),Lt.runKernelFunc((function(t,e){var n=t.greaterEqual(r,o);return e([r,o]),n}),{a:r,b:o},(function(t,e){var n=e[0],r=e[1];return{a:function(){return Xn(n)},b:function(){return Xn(r)}}}),\"GreaterEqual\")}}),$c=An({greaterEqualStrict_:function(t,e){var n=gn(t,\"a\",\"greaterEqualStrict\"),r=gn(e,\"b\",\"greaterEqualStrict\");return E(n.shape,r.shape,\"Error in greaterEqualStrict: \"),n.greaterEqual(r)}}),Qc=An({greaterStrict_:function(t,e){var n=gn(t,\"a\",\"greaterStrict\"),r=gn(e,\"b\",\"greaterStrict\");return E(n.shape,r.shape,\"Error in greaterStrict: \"),n.greater(r)}}),Jc=An({less_:function(t,e){var n,r=gn(t,\"a\",\"less\"),o=gn(e,\"b\",\"less\");return n=Nt(r,o),r=n[0],o=n[1],Pr(r.shape,o.shape),Lt.runKernelFunc((function(t){return t.less(r,o)}),{a:r,b:o},null,\"Less\")}}),Zc=An({lessEqual_:function(t,e){var n,r=gn(t,\"a\",\"lessEqual\"),o=gn(e,\"b\",\"lessEqual\");return n=Nt(r,o),r=n[0],o=n[1],Pr(r.shape,o.shape),Lt.runKernelFunc((function(t,e){var n=t.lessEqual(r,o);return e([r,o]),n}),{a:r,b:o},null,\"LessEqual\")}}),tl=An({lessEqualStrict_:function(t,e){var n=gn(t,\"a\",\"lessEqualStrict\"),r=gn(e,\"b\",\"lessEqualStrict\");return E(n.shape,r.shape,\"Error in lessEqualStrict: \"),n.lessEqual(r)}}),el=An({lessStrict_:function(t,e){var n=gn(t,\"a\",\"lessStrict\"),r=gn(e,\"b\",\"lessStrict\");return E(n.shape,r.shape,\"Error in lessStrict: \"),n.less(r)}}),nl=An({notEqual_:function(t,e){var n,r=gn(t,\"a\",\"notEqual\"),o=gn(e,\"b\",\"notEqual\");return n=Nt(r,o),r=n[0],o=n[1],Pr(r.shape,o.shape),Lt.runKernelFunc((function(t){return t.notEqual(r,o)}),{a:r,b:o},null,\"NotEqual\")}}),rl=An({notEqualStrict_:function(t,e){var n=gn(t,\"a\",\"notEqualStrict\"),r=gn(e,\"b\",\"notEqualStrict\");return E(n.shape,r.shape,\"Error in notEqualStrict: \"),n.notEqual(r)}});function ol(t,e){for(var n=[],r=t;r<e;++r)n.push(r);return n}function al(t){for(var e=[],n=0;n<t.length;++n)for(var r=0;r<t[n].length;++r)e.push(t[n][r]);return e}var il=An({gather_:function(t,e,n){void 0===n&&(n=0);var r=gn(t,\"x\",\"gather\"),o=gn(e,\"indices\",\"gather\",\"int32\");n=O(n,r.shape)[0];var a=function(t,e,n){for(var r=t.shape[n],o=[],a=1,i=1,s=0;s<n;s++)o.push(t.shape[s]),a*=t.shape[s];for(s=0;s<e.rank;s++)o.push(e.shape[s]);for(s=n+1;s<t.rank;s++)o.push(t.shape[s]),i*=t.shape[s];return{batchSize:a,sliceSize:i,dimSize:r,outputShape:o}}(r,o,n);return Lt.runKernelFunc((function(t,e){var a=t.gather(r,o.flatten(),n);return e([o]),a}),{x:r,indices:o},(function(t,e){var o=e[0];return{x:function(){var e=r.shape,a=o.size,i=e.slice(0,n),s=i.length,u=e.slice(n,e.length).slice(1),c=u.length,l=ol(0,s),h=ol(s+1,s+1+c),f=al([i,[a],u]),d=t.reshape(f),p=o.reshape([a]),v=al([[s],l,h]),g=d.transpose(v),m=sl(g,p,r.shape[n]),y=Rn(v);return m=m.transpose(y)},indices:function(){return o}}}),\"Gather\",{axis:n}).reshape(a.outputShape)}}),sl=An({unsortedSegmentSum_:function(t,e,n){var r=gn(t,\"x\",\"unsortedSegmentSum\"),o=gn(e,\"segmentIds\",\"unsortedSegmentSum\",\"int32\");return C(A(n),(function(){return\"numSegments must be of dtype int\"})),Lt.runKernelFunc((function(t,e){var a=t.unsortedSegmentSum(r,o,n);return e([o]),a}),{$x:r},(function(t,e){var n=e[0];return{$x:function(){return function(t,e){for(var n=Eo(e,Xn(e)),r=il(t,n),o=Yc(e,On(0,\"int32\")),a=r.rank-o.rank,i=0;i<a;++i)o=sr(o,i+1);o=pc(o,zn(r.shape,\"bool\"));var s=Xn(r);return yc(o,r,s)}(t,n)}}}))}});var ul=function(t,e,o){return n(this,void 0,void 0,(function(){var n,a,i,s,u,c,l,h,f,d,p,v,g;return r(this,(function(r){switch(r.label){case 0:for(n=gn(t,\"tensor\",\"boolMask\"),a=gn(e,\"mask\",\"boolMask\",\"bool\"),i=null==o?0:o,s=a.rank,u=n.shape,C(s>0,(function(){return\"mask cannot be scalar\"})),E(u.slice(i,i+s),a.shape,\"mask's shape must match the first K dimensions of tensor's shape,\"),c=1,l=i;l<i+s;l++)c*=u[l];return h=u.slice(0,i).concat([c],u.slice(i+s)),f=n.reshape(h),d=a.reshape([-1]),[4,xc(d)];case 1:return p=r.sent(),v=p.squeeze([1]),g=il(f,v,i),t!==n&&n.dispose(),e!==a&&a.dispose(),v.dispose(),f.dispose(),d.dispose(),p.dispose(),[2,g]}}))}))};function cl(t,e,n,r,o,a,i){void 0===a&&(a=\"NHWC\"),C(t.length===e.rank,(function(){return\"Length of inShape (\"+t.length+\") and rank of dy (\"+e.rank+\") must match\"}));var s=t,u=e,c=!1;3===e.rank&&(c=!0,u=e.as4D(1,e.shape[0],e.shape[1],e.shape[2]),s=[1,t[0],t[1],t[2]]),C(4===s.length,(function(){return\"Error in conv2dDerInput: inShape must be length 4, but got length \"+s.length+\".\"})),C(4===u.rank,(function(){return\"Error in conv2dDerInput: dy must be rank 4, but got rank \"+u.rank})),C(4===n.rank,(function(){return\"Error in conv2dDerInput: filter must be rank 4, but got rank \"+n.rank}));var l=\"NHWC\"===a?s[3]:s[1],h=\"NHWC\"===a?u.shape[3]:u.shape[1];C(l===n.shape[2],(function(){return\"Error in conv2dDerInput: depth of input (\"+l+\") must match input depth for filter \"+n.shape[2]+\".\"})),C(h===n.shape[3],(function(){return\"Error in conv2dDerInput: depth of output (\"+h+\") must match output depth for filter \"+n.shape[3]+\".\"})),null!=i&&C(A(o),(function(){return\"Error in conv2dDerInput: pad must be an integer when using, dimRoundingMode \"+i+\" but got pad \"+o+\".\"}));var f=Ea(a),d=pa(s,n.shape,r,1,o,i,!1,f),p=Lt.runKernelFunc((function(t,e){var r=t.conv2dDerInput(u,n,d);return e([n,u]),r}),{dy4D:u,filter:n},(function(t,e){var n=e[0],s=e[1];return{dy4D:function(){return dl(t,n,r,o,a,1,i)},filter:function(){return vl(t,s,n.shape,r,o,a,i)}}}));return c?p.as3D(p.shape[1],p.shape[2],p.shape[3]):p}function ll(t){var e=function(t){return\"number\"==typeof t?[t,t,t]:2===t.length?[t[0],t[1],1]:t}(t),n=e[0],r=e[1],o=e[2];return 1===n&&1===r&&1===o}function hl(t,e,n,r,o){C(t.length===e.rank,(function(){return\"Length of inShape (\"+t.length+\") and rank of dy (\"+e.rank+\") must match\"}));var a=t,i=e,s=!1;4===e.rank&&(s=!0,i=e.as5D(1,e.shape[0],e.shape[1],e.shape[2],e.shape[3]),a=[1,t[0],t[1],t[2],t[3]]);var u=a[4],c=i.shape[4];C(5===a.length,(function(){return\"Error in conv3dDerInput: inShape must be length 5, but got length \"+a.length+\".\"})),C(5===i.rank,(function(){return\"Error in conv3dDerInput: dy must be rank 5, but got rank \"+i.rank})),C(5===n.rank,(function(){return\"Error in conv3dDerInput: filter must be rank 5, but got rank \"+n.rank})),C(u===n.shape[3],(function(){return\"Error in conv3dDerInput: depth of input (\"+u+\") must match input depth for filter \"+n.shape[3]+\".\"})),C(c===n.shape[4],(function(){return\"Error in conv3dDerInput: depth of output (\"+c+\") must match output depth for filter \"+n.shape[4]+\".\"}));var l=va(a,n.shape,r,1,o),h=Lt.runKernelFunc((function(t){return t.conv3dDerInput(i,n,l)}),{dy5D:i});return s?h.as4D(h.shape[1],h.shape[2],h.shape[3],h.shape[4]):h}var fl=An({conv1d_:function(t,e,n,r,o,a,i){void 0===o&&(o=\"NWC\"),void 0===a&&(a=1);var s=gn(t,\"x\",\"conv1d\"),u=gn(e,\"filter\",\"conv1d\"),c=s,l=!1;2===s.rank&&(l=!0,c=s.as3D(1,s.shape[0],s.shape[1])),C(3===c.rank,(function(){return\"Error in conv1d: input must be rank 3, but got rank \"+c.rank+\".\"})),C(3===u.rank,(function(){return\"Error in conv1d: filter must be rank 3, but got rank \"+u.rank+\".\"})),null!=i&&C(A(r),(function(){return\"Error in conv1d: pad must be an integer when using, dimRoundingMode \"+i+\" but got pad \"+r+\".\"})),C(c.shape[2]===u.shape[1],(function(){return\"Error in conv1d: depth of input (\"+c.shape[2]+\") must match input depth for filter \"+u.shape[1]+\".\"})),C(Ca(n,a),(function(){return\"Error in conv1D: Either stride or dilation must be 1. Got stride \"+n+\" and dilation '\"+a+\"'\"})),C(\"NWC\"===o,(function(){return\"Error in conv1d: got dataFormat of \"+o+\" but only NWC is currently supported.\"}));var h=u.as4D(1,u.shape[0],u.shape[1],u.shape[2]),f=c.as4D(c.shape[0],1,c.shape[1],c.shape[2]),d=dl(f,h,[1,n],r,\"NHWC\",[1,a],i);return l?d.as2D(d.shape[2],d.shape[3]):d.as3D(d.shape[0],d.shape[2],d.shape[3])}}),dl=An({conv2d_:function(t,e,n,r,o,a,i){void 0===o&&(o=\"NHWC\"),void 0===a&&(a=[1,1]);var s=gn(t,\"x\",\"conv2d\"),u=gn(e,\"filter\",\"conv2d\"),c=s,l=!1;3===s.rank&&(l=!0,c=s.as4D(1,s.shape[0],s.shape[1],s.shape[2])),C(4===c.rank,(function(){return\"Error in conv2d: input must be rank 4, but got rank \"+c.rank+\".\"})),C(4===u.rank,(function(){return\"Error in conv2d: filter must be rank 4, but got rank \"+u.rank+\".\"})),null!=i&&C(A(r),(function(){return\"Error in conv2d: pad must be an integer when using, dimRoundingMode \"+i+\" but got pad \"+r+\".\"}));var h=\"NHWC\"===o?c.shape[3]:c.shape[1];C(h===u.shape[2],(function(){return\"Error in conv2d: depth of input (\"+h+\") must match input depth for filter \"+u.shape[2]+\".\"})),C(Ca(n,a),(function(){return\"Error in conv2D: Either strides or dilations must be 1. Got strides \"+n+\" and dilations '\"+a+\"'\"}));var f=Ea(o),d=pa(c.shape,u.shape,n,a,r,i,!1,f),p=[u,c],v=Lt.runKernelFunc((function(t,e){var n=t.conv2d(c,u,d);return e([u,c]),n}),{x:c,filter:u},(function(t,e){var i=e,s=i[0],u=i[1];return C(wa(a),(function(){return\"Error in gradient of conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '\"+a+\"'\"})),{x:function(){return gl(u.shape,t,s,n,r,o)},filter:function(){return vl(u,t,s.shape,n,r,o)}}}),\"Conv2D\",d,p);return l?v.as3D(v.shape[1],v.shape[2],v.shape[3]):v}}),pl=An({conv3d_:function(t,e,n,r,o,a){void 0===o&&(o=\"NDHWC\"),void 0===a&&(a=[1,1,1]);var i=gn(t,\"x\",\"conv3d\"),s=gn(e,\"filter\",\"conv3d\"),u=i,c=!1;4===i.rank&&(c=!0,u=i.as5D(1,i.shape[0],i.shape[1],i.shape[2],i.shape[3])),C(5===u.rank,(function(){return\"Error in conv3d: input must be rank 5, but got rank \"+u.rank+\".\"})),C(5===s.rank,(function(){return\"Error in conv3d: filter must be rank 5, but got rank \"+s.rank+\".\"})),C(u.shape[4]===s.shape[3],(function(){return\"Error in conv3d: depth of input (\"+u.shape[4]+\") must match input depth for filter \"+s.shape[3]+\".\"})),C(function(t,e){return ll(t)||ll(e)}(n,a),(function(){return\"Error in conv3D: Either strides or dilations must be 1. Got strides \"+n+\" and dilations '\"+a+\"'\"})),C(\"NDHWC\"===o,(function(){return\"Error in conv3d: got dataFormat of \"+o+\" but only NDHWC is currently supported.\"}));var l=va(u.shape,s.shape,n,a,r),h=Lt.runKernelFunc((function(t,e){var n=t.conv3d(u,s,l);return e([u,s]),n}),{x:u,$filter:s},(function(t,e){C(ll(a),(function(){return\"Error in gradient of conv3D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '\"+a+\"'\"}));var o=e[0],i=e[1];return{x:function(){return hl(o.shape,t,i,n,r)},$filter:function(){return function(t,e,n,r,o){var a=t;4===t.rank&&(a=t.as5D(1,t.shape[0],t.shape[1],t.shape[2],t.shape[3]));var i=e;4===i.rank&&(i=e.as5D(1,e.shape[0],e.shape[1],e.shape[2],e.shape[3]));C(5===a.rank,(function(){return\"Error in conv3dDerFilter: input must be rank 5, but got shape \"+a.shape+\".\"})),C(5===i.rank,(function(){return\"Error in conv3dDerFilter: dy must be rank 5, but got shape \"+i.shape+\".\"})),C(5===n.length,(function(){return\"Error in conv3dDerFilter: filterShape must be length 5, but got \"+n+\".\"})),C(a.shape[4]===n[3],(function(){return\"Error in conv3dDerFilter: depth of input \"+a.shape[4]+\") must match input depth in filter (\"+n[3]+\".\"})),C(i.shape[4]===n[4],(function(){return\"Error in conv3dDerFilter: depth of dy (\"+i.shape[4]+\") must match output depth for filter (\"+n[4]+\").\"}));var s=va(a.shape,n,r,1,o);return Lt.runKernelFunc((function(t){return t.conv3dDerFilter(a,i,s)}),{x5D:a,dy5D:i})}(o,t,i.shape,n,r)}}}));return c?h.as4D(h.shape[1],h.shape[2],h.shape[3],h.shape[4]):h}}),vl=An({conv2dDerFilter_:function(t,e,n,r,o,a,i){void 0===a&&(a=\"NHWC\");var s=t;3===t.rank&&(s=t.as4D(1,t.shape[0],t.shape[1],t.shape[2]));var u=e;3===u.rank&&(u=e.as4D(1,e.shape[0],e.shape[1],e.shape[2])),C(4===s.rank,(function(){return\"Error in conv2dDerFilter: input must be rank 4, but got shape \"+s.shape+\".\"})),C(4===u.rank,(function(){return\"Error in conv2dDerFilter: dy must be rank 4, but got shape \"+u.shape+\".\"})),C(4===n.length,(function(){return\"Error in conv2dDerFilter: filterShape must be length 4, but got \"+n+\".\"}));var c=\"NHWC\"===a?s.shape[3]:s.shape[1],l=\"NHWC\"===a?u.shape[3]:u.shape[1];C(c===n[2],(function(){return\"Error in conv2dDerFilter: depth of input \"+c+\") must match input depth in filter (\"+n[2]+\".\"})),C(l===n[3],(function(){return\"Error in conv2dDerFilter: depth of dy (\"+l+\") must match output depth for filter (\"+n[3]+\").\"})),null!=i&&C(A(o),(function(){return\"Error in conv2dDerFilter: pad must be an integer when using, dimRoundingMode \"+i+\" but got pad \"+o+\".\"}));var h=Ea(a),f=pa(s.shape,n,r,1,o,i,!1,h);return Lt.runKernelFunc((function(t){return t.conv2dDerFilter(s,u,f)}),{x4D:s,dy4D:u})}}),gl=An({conv2dDerInput_:cl}),ml=An({depthwiseConv2d_:function(t,e,n,r,o,a,i){void 0===o&&(o=\"NHWC\"),void 0===a&&(a=[1,1]);var s=gn(t,\"x\",\"depthwiseConv2d\"),u=gn(e,\"filter\",\"depthwiseConv2d\"),c=s,l=!1;3===s.rank&&(l=!0,c=s.as4D(1,s.shape[0],s.shape[1],s.shape[2])),C(4===c.rank,(function(){return\"Error in depthwiseConv2d: input must be rank 4, but got rank \"+c.rank+\".\"})),C(4===u.rank,(function(){return\"Error in depthwiseConv2d: filter must be rank 4, but got rank \"+u.rank+\".\"})),C(c.shape[3]===u.shape[2],(function(){return\"Error in depthwiseConv2d: number of input channels (\"+c.shape[3]+\") must match the inChannels dimension in filter \"+u.shape[2]+\".\"})),null==a&&(a=[1,1]),C(Ca(n,a),(function(){return\"Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides \"+n+\" and dilations '\"+a+\"'\"})),null!=i&&C(A(r),(function(){return\"Error in depthwiseConv2d: pad must be an integer when using, dimRoundingMode \"+i+\" but got pad \"+r+\".\"}));var h=pa(c.shape,u.shape,n,a,r,i,!0),f=[c,u],d=Lt.runKernelFunc((function(t,e){var n=t.depthwiseConv2D(c,u,h);return e([c,u]),n}),{x:c,filter:u},(function(t,e){C(wa(a),(function(){return\"Error in gradient of depthwiseConv2d: dilation rates greater than 1 are not yet supported. Got dilations '\"+a+\"'\"}));var n=e[0],r=e[1];return{x:function(){return yl(n.shape,t,r,h)},filter:function(){return xl(n,t,r.shape,h)}}}),\"DepthwiseConv2dNative\",h,f);return l?d.as3D(d.shape[1],d.shape[2],d.shape[3]):d}}),yl=An({depthwiseConv2dDerInput_:function(t,e,n,r){var o=e,a=!1;3===e.rank&&(a=!0,o=e.as4D(1,e.shape[0],e.shape[1],e.shape[2]));var i=Lt.runKernelFunc((function(t){return t.depthwiseConv2DDerInput(o,n,r)}),{dy4D:o});return a?i.as3D(i.shape[1],i.shape[2],i.shape[3]):i}}),xl=An({depthwiseConv2dDerFilter_:function(t,e,n,r){var o=t;3===t.rank&&(o=t.as4D(1,t.shape[0],t.shape[1],t.shape[2]));var a=e;return 3===a.rank&&(a=e.as4D(1,e.shape[0],e.shape[1],e.shape[2])),Lt.runKernelFunc((function(t){return t.depthwiseConv2DDerFilter(o,a,r)}),{x4D:o,dy4D:a})}}),bl=An({separableConv2d_:function(t,e,n,r,o,a,i){void 0===a&&(a=[1,1]),void 0===i&&(i=\"NHWC\");var s=gn(t,\"x\",\"separableConv2d\"),u=gn(e,\"depthwiseFilter\",\"separableConv2d\"),c=gn(n,\"pointwiseFilter\",\"separableConv2d\"),l=s,h=!1;if(3===s.rank&&(h=!0,l=s.as4D(1,s.shape[0],s.shape[1],s.shape[2])),\"NCHW\"===i)throw new Error(\"separableConv2d currently does not support dataFormat NCHW; only NHWC is supported\");C(4===l.rank,(function(){return\"Error in separableConv2d: input must be rank 4, but got rank \"+l.rank+\".\"})),C(4===u.rank,(function(){return\"Error in separableConv2d: depthwise filter must be rank 4, but got rank \"+u.rank+\".\"})),C(4===c.rank,(function(){return\"Error in separableConv2d: pointwise filter must be rank 4, but got rank \"+u.rank+\".\"})),C(1===c.shape[0],(function(){return\"Error in separableConv2d: the first dimension of pointwise filter  must be 1, but got \"+c.shape[0]+\".\"})),C(1===c.shape[1],(function(){return\"Error in separableConv2d: the second dimension of pointwise filter must be 1, but got \"+c.shape[1]+\".\"}));var f=u.shape[2],d=u.shape[3];C(c.shape[2]===f*d,(function(){return\"Error in separableConv2d: the third dimension of pointwise filter must be \"+f*d+\", but got \"+c.shape[2]+\".\"}));var p=ml(l,u,r,o,i,a),v=dl(p,c,1,\"valid\",i);return h?v.as3D(v.shape[1],v.shape[2],v.shape[3]):v}}),wl=An({conv2dTranspose_:function(t,e,n,r,o,a){return cl(n,gn(t,\"x\",\"conv2dTranspose\"),gn(e,\"filter\",\"conv2dTranspose\"),r,o,\"NHWC\",a)}}),Cl=An({conv3dTranspose_:function(t,e,n,r,o){return hl(n,gn(t,\"x\",\"conv3dTranspose\"),gn(e,\"filter\",\"conv3dTranspose\"),r,o)}});var El=An({matMul_:function(t,e,n,r){var o;void 0===n&&(n=!1),void 0===r&&(r=!1);var a=gn(t,\"a\",\"matMul\"),i=gn(e,\"b\",\"matMul\");o=Nt(a,i),a=o[0],i=o[1];var s=n?a.shape[a.rank-2]:a.shape[a.rank-1],u=r?i.shape[i.rank-1]:i.shape[i.rank-2],c=n?a.shape[a.rank-1]:a.shape[a.rank-2],l=r?i.shape[i.rank-2]:i.shape[i.rank-1],h=a.shape.slice(0,-2),f=i.shape.slice(0,-2),d=k(h),p=k(f);C(a.rank>=2&&i.rank>=2&&a.rank===i.rank,(function(){return\"Error in matMul: inputs must have the same rank of at least 2, got ranks \"+a.rank+\" and \"+i.rank+\".\"})),C(S(h,f),(function(){return\"Error in matMul: outer dimensions (\"+h+\") and (\"+f+\") of Tensors with shapes \"+a.shape+\" and \"+i.shape+\" must match.\"})),C(s===u,(function(){return\"Error in matMul: inner shapes (\"+s+\") and (\"+u+\") of Tensors with shapes \"+a.shape+\" and \"+i.shape+\" and transposeA=\"+n+\" and transposeB=\"+r+\" must match.\"}));var v=a.shape.slice(0,-2).concat([c,l]),g=n?a.as3D(d,s,c):a.as3D(d,c,s),m=r?i.as3D(p,l,u):i.as3D(p,u,l),y={transposeA:n,transposeB:r};return Lt.runKernelFunc((function(t,e){var o=t.batchMatMul(g,m,n,r);return e([g,m]),o}),{a:g,b:m},(function(t,e){var o=e,a=o[0],i=o[1];return n||r?!n&&r?{a:function(){return t.matMul(i,!1,!1)},b:function(){return t.matMul(a,!0,!1)}}:n&&!r?{a:function(){return i.matMul(t,!1,!0)},b:function(){return a.matMul(t,!1,!1)}}:{a:function(){return i.matMul(t,!0,!0)},b:function(){return t.matMul(a,!0,!0)}}:{a:function(){return t.matMul(i,!1,!0)},b:function(){return a.matMul(t,!0,!1)}}}),\"BatchMatMul\",y).reshape(v)}}),Rl=An({dot_:function(t,e){var n=gn(t,\"t1\",\"dot\"),r=gn(e,\"t2\",\"dot\");C(!(1!==n.rank&&2!==n.rank||1!==r.rank&&2!==r.rank),(function(){return\"Error in dot: inputs must all be rank 1 or 2, but got ranks \"+n.rank+\" and \"+r.rank+\".\"}));var o=1===n.rank?n.size:n.shape[1],a=1===r.rank?r.size:r.shape[0];return C(o===a,(function(){return\"Error in dot: inner dimensions of inputs must match, but got \"+o+\" and \"+a+\".\"})),1===n.rank&&1===r.rank?n.as2D(1,-1).matMul(r.as2D(-1,1)).asScalar():1===n.rank&&2===r.rank?n.as2D(1,-1).matMul(r.as2D(r.shape[0],r.shape[1])).as1D():2===n.rank&&1===r.rank?n.matMul(r.as2D(-1,1)).as1D():n.matMul(r.as2D(r.shape[0],r.shape[1]))}}),Il=An({outerProduct_:function(t,e){var n=gn(t,\"v1\",\"outerProduct\"),r=gn(e,\"v2\",\"outerProduct\");return C(1===n.rank&&1===r.rank,(function(){return\"Error in outerProduct: inputs must be rank 1, but got ranks \"+n.rank+\" and \"+r.rank+\".\"})),n.as2D(-1,1).matMul(r.as2D(1,-1))}});var kl=An({reverse_:function(t,e){var n=gn(t,\"x\",\"reverse\");if(0===n.rank)return n.clone();var r=O(e,n.shape);return Lt.runKernelFunc((function(t){return t.reverse(n,r)}),{$x:n},(function(t){return{$x:function(){return t.reverse(r)}}})).reshapeAs(n)}}),Sl=An({reverse1d_:function(t){var e=gn(t,\"x\",\"reverse\");return C(1===e.rank,(function(){return\"Error in reverse1D: x must be rank 1 but got rank \"+e.rank+\".\"})),kl(e,0)}}),Al=An({reverse2d_:function(t,e){var n=gn(t,\"x\",\"reverse\");return C(2===n.rank,(function(){return\"Error in reverse2D: x must be rank 2 but got rank \"+n.rank+\".\"})),kl(n,e)}}),Tl=An({reverse3d_:function(t,e){var n=gn(t,\"x\",\"reverse\");return C(3===n.rank,(function(){return\"Error in reverse3D: x must be rank 3 but got rank \"+n.rank+\".\"})),kl(n,e)}}),Dl=An({reverse4d_:function(t,e){var n=gn(t,\"x\",\"reverse\");return C(4===n.rank,(function(){return\"Error in reverse4D: x must be rank 4 but got rank \"+n.rank+\".\"})),kl(n,e)}});function Nl(t,e,n,r,o,a){var i=gn(t,\"x\",\"maxPool\"),s=i,u=!1;3===i.rank&&(u=!0,s=i.as4D(1,i.shape[0],i.shape[1],i.shape[2])),null==r&&(r=[1,1]),C(4===s.rank,(function(){return\"Error in maxPool: input must be rank 4 but got rank \"+s.rank+\".\"})),C(Ca(n,r),(function(){return\"Error in maxPool: Either strides or dilations must be 1. Got strides \"+n+\" and dilations '\"+r+\"'\"})),null!=a&&C(A(o),(function(){return\"Error in maxPool: pad must be an integer when using, dimRoundingMode \"+a+\" but got pad \"+o+\".\"}));var c=fa(s.shape,e,n,r,o,a);if(1===c.filterWidth&&1===c.filterHeight&&S(c.inShape,c.outShape))return i.clone();var l=[s],h=Lt.runKernelFunc((function(t,e){var n=t.maxPool(s,c);return e([s,n]),n}),{x:s},(function(t,a){var i=a[0],s=a[1];return{x:function(){return function(t,e,n,r,o,a,i,s){var u=gn(t,\"dy\",\"maxPoolBackprop\"),c=gn(e,\"input\",\"maxPoolBackprop\"),l=gn(n,\"output\",\"maxPoolBackprop\");C(c.rank===u.rank,(function(){return\"Rank of input (\"+c.rank+\") does not match rank of dy (\"+u.rank+\")\"})),null==a&&(a=[1,1]);C(Ca(o,a),(function(){return\"Error in maxPoolBackProp: Either strides or dilations must be 1. Got strides \"+o+\" and dilations '\"+a+\"'\"})),C(4===u.rank,(function(){return\"Error in maxPoolBackprop: dy must be rank 4 but got rank \"+u.rank+\".\"})),C(4===c.rank,(function(){return\"Error in maxPoolBackprop: input must be rank 4 but got rank \"+c.rank+\".\"})),null!=s&&C(A(i),(function(){return\"Error in maxPoolBackprop: pad must be an integer when using, dimRoundingMode \"+s+\" but got pad \"+i+\".\"}));var h=fa(c.shape,r,o,a,i,s);return Lt.runKernelFunc((function(t){return t.maxPoolBackprop(u,c,l,h)}),{$dy:u,$input:c})}(t,i,s,e,n,r,o)}}}),\"MaxPool\",c,l);return u?h.as3D(h.shape[1],h.shape[2],h.shape[3]):h}function Fl(t,e,n,r,o,a){var i=gn(t,\"x\",\"avgPool\",\"float32\");null==r&&(r=[1,1]),C(Ca(n,r),(function(){return\"Error in avgPool: Either strides or dilations must be 1. Got strides \"+n+\" and dilations '\"+r+\"'\"}));var s=i,u=!1;3===i.rank&&(u=!0,s=i.as4D(1,i.shape[0],i.shape[1],i.shape[2])),C(4===s.rank,(function(){return\"Error in avgPool: x must be rank 4 but got rank \"+s.rank+\".\"})),null!=a&&C(A(o),(function(){return\"Error in avgPool: pad must be an integer when using, dimRoundingMode \"+a+\" but got pad \"+o+\".\"}));var c=fa(s.shape,e,n,r,o,a);if(1===c.filterWidth&&1===c.filterHeight&&S(c.inShape,c.outShape))return i.clone();var l=Lt.runKernelFunc((function(t){return t.avgPool(s,c)}),{x:s},(function(t){return{x:function(){return function(t,e,n,r,o,a){var i=gn(t,\"dy\",\"avgPoolBackprop\"),s=gn(e,\"input\",\"avgPoolBackprop\");C(s.rank===i.rank,(function(){return\"Rank of input (\"+s.rank+\") does not match rank of dy (\"+i.rank+\")\"})),null==o&&(o=[1,1]);C(Ca(r,o),(function(){return\"Error in avgPoolBackprop: Either strides or dilations must be 1. Got strides \"+r+\" and dilations '\"+o+\"'\"}));var u=s,c=i,l=!1;3===s.rank&&(l=!0,u=s.as4D(1,s.shape[0],s.shape[1],s.shape[2]),c=i.as4D(1,i.shape[0],i.shape[1],i.shape[2]));C(4===c.rank,(function(){return\"Error in avgPoolBackprop: dy must be rank 4 but got rank \"+c.rank+\".\"})),C(4===u.rank,(function(){return\"Error in avgPoolBackprop: input must be rank 4 but got rank \"+u.rank+\".\"}));var h=fa(u.shape,n,r,o,a),f=Lt.runKernelFunc((function(t){return t.avgPoolBackprop(c,u,h)}),{dy4D:c,input4D:u});if(l)return f.as3D(f.shape[1],f.shape[2],f.shape[3]);return f}(t,s,e,n,r,o)}}}),\"AvgPool\",c);return l=l.cast(i.dtype),u?l.as3D(l.shape[1],l.shape[2],l.shape[3]):l}var _l=An({maxPool_:function(t,e,n,r,o){return Nl(t,e,n,1,r,o)}}),Ol=An({avgPool_:function(t,e,n,r,o){return Fl(t,e,n,1,r,o)}}),Ml=An({pool_:function(t,e,n,r,o,a){null==o&&(o=[1,1]),null==a&&(a=1),0===r&&(r=\"valid\");var i=gn(t,\"x\",\"maxPool\"),s=i,u=!1;3===i.rank&&(u=!0,s=i.as4D(1,i.shape[0],i.shape[1],i.shape[2])),C(Ca(a,o),(function(){return\"Error in pool: Either strides or dilations must be 1. Got strides \"+a+\" and dilations '\"+o+\"'\"}));var c,l=fa(s.shape,e,a,o,r),h=[l.dilationHeight,l.dilationWidth];c=\"same\"===r?function(t,e){var n=t.map((function(t,n){return t+(t-1)*(e[n]-1)})).map((function(t){return t-1})),r=n.map((function(t){return Math.floor(t/2)})),o=n.map((function(t,e){return t-r[e]}));return n.map((function(t,e){return[r[e],o[e]]}))}([l.filterHeight,l.filterWidth],h):[[0,0],[0,0]];var f=1===h[0]&&1===h[1],d=function(t,e,n){var r=n.map((function(t){return t[0]})),o=n.map((function(t){return t[1]})),a=t.concat(r,o),i=e.map((function(t,e){return(t-a[e]%t)%t})),s=o.map((function(t,e){return t+i[e]})),u=e.map((function(t,e){return[r[e],s[e]]})),c=e.map((function(t,e){return[0,i[e]]}));return[u,c]}([l.inHeight,l.inWidth],h,c),p=d[0],v=d[1],g=f?r:\"valid\",m=f?s:cr(s,h,p),y=(\"avg\"===n?function(){return Fl(m,e,a,1,g)}:function(){return Nl(m,e,a,1,g)})(),x=f?y:rr(y,h,v);return u?x.as3D(x.shape[1],x.shape[2],x.shape[3]):x}}),Bl=An({maxPool3d_:function(t,e,n,r,o,a,i){void 0===a&&(a=\"NDHWC\");var s=gn(t,\"x\",\"maxPool3d\"),u=s,c=!1;4===s.rank&&(c=!0,u=s.as5D(1,s.shape[0],s.shape[1],s.shape[2],s.shape[3])),null==i&&(i=[1,1,1]),C(5===u.rank,(function(){return\"Error in maxPool3d: x must be rank 5 but got rank \"+u.rank+\".\"})),C(\"NDHWC\"===a,(function(){return\"Error in maxPool3d: Only NDHWC is currently supported, but got dataFormat of \"+a})),C(Ca(n,i),(function(){return\"Error in maxPool3d: Either strides or dilations must be 1. Got strides \"+n+\" and dilations '\"+i+\"'\"})),null!=o&&C(A(r),(function(){return\"Error in maxPool3d: pad must be an integer when using, dimRoundingMode \"+o+\" but got pad \"+r+\".\"}));var l=da(u.shape,e,n,i,r,o,a),h=Lt.runKernelFunc((function(t,e){var n=t.maxPool3d(u,l);return e([u,n]),n}),{x:u},(function(t,a){var s=a[0],u=a[1];return{x:function(){return function(t,e,n,r,o,a,i,s){var u=gn(t,\"dy\",\"maxPool3dBackprop\"),c=gn(e,\"input\",\"maxPool3dBackprop\"),l=gn(n,\"output\",\"maxPool3dBackprop\"),h=u,f=c,d=l,p=!1;4===c.rank&&(p=!0,h=u.as5D(1,u.shape[0],u.shape[1],u.shape[2],u.shape[3]),f=c.as5D(1,c.shape[0],c.shape[1],c.shape[2],c.shape[3]),d=l.as5D(1,l.shape[0],l.shape[1],l.shape[2],l.shape[3]));C(5===h.rank,(function(){return\"Error in maxPool3dBackprop: dy must be rank 5 but got rank \"+h.rank+\".\"})),C(5===f.rank,(function(){return\"Error in maxPool3dBackprop: input must be rank 5 but got rank \"+f.rank+\".\"})),C(5===d.rank,(function(){return\"Error in maxPool3dBackprop: output must be rank 5 but got rank \"+d.rank+\".\"})),null==a&&(a=[1,1,1]);C(Ca(o,a),(function(){return\"Error in maxPool3dBackprop: Either strides or dilations must be 1. Got strides \"+o+\" and dilations '\"+a+\"'\"})),null!=s&&C(A(i),(function(){return\"Error in maxPool3dBackprop: pad must be an integer when using, dimRoundingMode \"+s+\" but got pad \"+i+\".\"}));var v=da(f.shape,r,o,a,i,s),g=Lt.runKernelFunc((function(t){return t.maxPool3dBackprop(h,f,d,v)}),{dy5D:h,input5D:f});if(p)return g.as4D(g.shape[1],g.shape[2],g.shape[3],g.shape[4]);return g}(t,s,u,e,n,i,r,o)}}}));return c?h.as4D(h.shape[1],h.shape[2],h.shape[3],h.shape[4]):h}}),Pl=An({avgPool3d_:function(t,e,n,r,o,a,i){void 0===a&&(a=\"NDHWC\");var s=gn(t,\"x\",\"avgPool3d\",\"float32\"),u=s,c=!1;4===s.rank&&(c=!0,u=s.as5D(1,s.shape[0],s.shape[1],s.shape[2],s.shape[3])),null==i&&(i=[1,1,1]),C(5===u.rank,(function(){return\"Error in avgPool3d: x must be rank 5 but got rank \"+u.rank+\".\"})),C(\"NDHWC\"===a,(function(){return\"Error in avgPool3d: Only NDHWC is currently supported, but got dataFormat of \"+a})),C(Ca(n,i),(function(){return\"Error in avgPool3d: Either strides or dilations must be 1. Got strides \"+n+\" and dilations '\"+i+\"'\"})),null!=o&&C(A(r),(function(){return\"Error in avgPool3d: pad must be an integer when using, dimRoundingMode \"+o+\" but got pad \"+r+\".\"}));var l=da(u.shape,e,n,i,r,o,a),h=Lt.runKernelFunc((function(t){return t.avgPool3d(u,l)}),{x:u},(function(t){return{x:function(){return function(t,e,n,r,o,a,i){var s=gn(t,\"dy\",\"avgPool3dBackprop\"),u=gn(e,\"input\",\"avgPool3dBackprop\"),c=s,l=u,h=!1;4===u.rank&&(h=!0,c=s.as5D(1,s.shape[0],s.shape[1],s.shape[2],s.shape[3]),l=u.as5D(1,u.shape[0],u.shape[1],u.shape[2],u.shape[3]));C(5===c.rank,(function(){return\"Error in avgPool3dBackprop: dy must be rank 5 but got rank \"+c.rank+\".\"})),C(5===l.rank,(function(){return\"Error in avgPool3dBackprop: input must be rank 5 but got rank \"+l.rank+\".\"})),null==o&&(o=[1,1,1]);C(Ca(r,o),(function(){return\"Error in avgPool3dBackprop: Either strides or dilations must be 1. Got strides \"+r+\" and dilations '\"+o+\"'\"})),null!=i&&C(A(a),(function(){return\"Error in maxPool3dBackprop: pad must be an integer when using, dimRoundingMode \"+i+\" but got pad \"+a+\".\"}));var f=da(l.shape,n,r,o,a,i),d=Lt.runKernelFunc((function(t){return t.avgPool3dBackprop(c,l,f)}),{dy5D:c,input5D:l});if(h)return d.as4D(d.shape[1],d.shape[2],d.shape[3],d.shape[4]);return d}(t,u,e,n,i,r,o)}}}));return h=h.cast(u.dtype),c?h.as4D(h.shape[1],h.shape[2],h.shape[3],h.shape[4]):h}}),Ll=An({maxPoolWithArgmax_:function(t,e,n,r,o){void 0===o&&(o=!1);var a=gn(t,\"x\",\"maxPoolWithArgmax\"),i={filterSize:e,strides:n,pad:r,includeBatchInIndex:o},s=Lt.runKernel(\"MaxPoolWithArgmax\",{x:a},i);return{result:s[0],indexes:s[1]}}});var Wl=An({slice_:function(t,e,n){var r,o,a=gn(t,\"x\",\"slice\");if(0===a.rank)throw new Error(\"Slicing scalar is not possible\");(r=\"number\"==typeof e?[e].concat(new Array(a.rank-1).fill(0)):e.length<a.rank?e.concat(new Array(a.rank-e.length).fill(0)):e.slice()).forEach((function(t){C(-1!==t,(function(){return\"slice() does not support negative begin indexing.\"}))})),o=(o=null==n?new Array(a.rank).fill(-1):\"number\"==typeof n?[n].concat(new Array(a.rank-1).fill(-1)):n.length<a.rank?n.concat(new Array(a.rank-n.length).fill(-1)):n).map((function(t,e){return t>=0?t:(C(-1===t,(function(){return\"Negative size values should be exactly -1 but got \"+t+\" for the slice() size at index \"+e+\".\"})),a.shape[e]-r[e])})),qo(a,r,o);var i=a.shape,s={begin:r,size:o};return Lt.runKernelFunc((function(t){return t.slice(a,r,o)}),{x:a},(function(t){for(var e=[],n=0;n<t.rank;n++)e.push([r[n],i[n]-r[n]-o[n]]);return{x:function(){return Ic(t,e)}}}),\"Slice\",s)}}),Ul=An({slice1d_:function(t,e,n){var r=gn(t,\"x\",\"slice1d\");return C(1===r.rank,(function(){return\"slice1d expects a rank-1 tensor, but got a rank-\"+r.rank+\" tensor\"})),Wl(r,[e],[n])}}),Vl=An({slice2d_:function(t,e,n){var r=gn(t,\"x\",\"slice2d\");return C(2===r.rank,(function(){return\"slice2d expects a rank-2 tensor, but got a rank-\"+r.rank+\" tensor\"})),Wl(r,e,n)}}),zl=An({slice3d_:function(t,e,n){var r=gn(t,\"x\",\"slice3d\");return C(3===r.rank,(function(){return\"slice3d expects a rank-3 tensor, but got a rank-\"+r.rank+\" tensor\"})),Wl(r,e,n)}}),Gl=An({slice4d_:function(t,e,n){var r=gn(t,\"x\",\"slice4d\");return C(4===r.rank,(function(){return\"slice4d expects a rank-4 tensor, but got a rank-\"+r.rank+\" tensor\"})),Wl(r,e,n)}});function Hl(t,e,n,r,o){return e.rank<n.rank&&(e=e.reshape(wn(e.shape,r))),t.rank<n.rank&&(t=t.reshape(wn(t.shape,r))),{x:function(){var r=t.mul(n.equal(e).cast(t.dtype));return null==o?r:r.transpose(o)}}}var ql=An({all_:function(t,e,n){void 0===e&&(e=null),void 0===n&&(n=!1);var r=gn(t,\"x\",\"all\",\"bool\"),o=O(e,r.shape),a=o,i=En(a,r.rank);null!=i&&(r=r.transpose(i),a=In(a.length,r.rank));var s=Lt.runKernelFunc((function(t){return t.all(r,a)}),{$x:r});if(n){var u=wn(s.shape,o);return s.reshape(u)}return s}}),Kl=An({any_:function(t,e,n){void 0===e&&(e=null),void 0===n&&(n=!1);var r=gn(t,\"x\",\"any\",\"bool\"),o=O(e,r.shape),a=o,i=En(a,r.rank);null!=i&&(r=r.transpose(i),a=In(a.length,r.rank));var s=Lt.runKernelFunc((function(t){return t.any(r,a)}),{$x:r});if(n){var u=wn(s.shape,o);return s.reshape(u)}return s}}),jl=An({argMax_:function(t,e){void 0===e&&(e=0);var n=gn(t,\"x\",\"argMax\");null==e&&(e=0);var r=O(e,n.shape),o=En(r,n.rank);null!=o&&(n=n.transpose(o),r=In(r.length,n.rank));var a={axis:r[0]},i=[n];return Lt.runKernelFunc((function(t,e){var o=t.argMax(n,r[0]);return e([n]),o}),{x:n},(function(t,e){var n=e[0];return{x:function(){return Xn(n)}}}),\"ArgMax\",a,i)}}),Xl=An({argMin_:function(t,e){void 0===e&&(e=0);var n=gn(t,\"x\",\"argMin\");null==e&&(e=0);var r=O(e,n.shape),o=En(r,n.rank);return null!=o&&(n=n.transpose(o),r=In(r.length,n.rank)),Lt.runKernelFunc((function(t,e){var o=t.argMin(n,r[0]);return e([n]),o}),{$x:n},(function(t,e){var n=e[0];return{$x:function(){return Xn(n)}}}))}}),Yl=An({logSumExp_:function(t,e,n){void 0===e&&(e=null),void 0===n&&(n=!1);var r=gn(t,\"x\",\"logSumExp\"),o=O(e,r.shape),a=r.max(o,!0),i=r.sub(a).exp().sum(o).log(),s=a.reshape(i.shape).add(i);if(n){var u=wn(s.shape,o);return s.reshape(u)}return s}}),$l=An({max_:function(t,e,n){void 0===e&&(e=null),void 0===n&&(n=!1);var r=gn(t,\"x\",\"max\"),o=r,a=O(e,r.shape),i=a,s=En(i,r.rank);null!=s&&(r=r.transpose(s),i=In(i.length,r.rank));var u=[r],c=Lt.runKernelFunc((function(t,e){var n=t.max(r,i);return e([o,n]),n}),{x:r},(function(t,e){return Hl(t,e[1],e[0],a,s)}),\"Max\",{axes:i},u,[!0]);if(n){var l=wn(c.shape,a);c=c.reshape(l)}return c}}),Ql=An({mean_:function(t,e,n){void 0===e&&(e=null),void 0===n&&(n=!1);var r=gn(t,\"x\",\"mean\"),o=O(e,r.shape),a=k(bn(r.shape,o)[1]);return oa((function(t){var r=On(a);return{value:(r.dtype===t.dtype?t:t.cast(r.dtype)).div(r).sum(e,n),gradFunc:function(e){var n=t.shape.slice();return o.forEach((function(t){n[t]=1})),e.reshape(n).mul(zn(t.shape,\"float32\")).div(a)}}}))(r)}}),Jl=An({min_:function(t,e,n){void 0===e&&(e=null),void 0===n&&(n=!1);var r=gn(t,\"x\",\"min\"),o=r,a=O(e,r.shape),i=a,s=En(i,r.rank);null!=s&&(r=r.transpose(s),i=In(i.length,r.rank));var u=[r],c=Lt.runKernelFunc((function(t,e){var n=t.min(r,i);return e([o,n]),n}),{x:r},(function(t,e){return Hl(t,e[1],e[0],a,s)}),\"Min\",{axes:i},u,[!0]);if(n){var l=wn(c.shape,a);c=c.reshape(l)}return c}}),Zl=An({moments_:function(t,e,n){void 0===e&&(e=null),void 0===n&&(n=!1);var r=O(e,(t=gn(t,\"x\",\"moments\")).shape),o=t.mean(r,n),a=o.shape;n||(a=wn(o.shape,r));var i=t.toFloat().sub(o.reshape(a)).square();return{mean:o,variance:i.mean(r,n)}}}),th=An({sum_:function(t,e,n){void 0===e&&(e=null),void 0===n&&(n=!1);var r=gn(t,\"x\",\"sum\");\"bool\"===r.dtype&&(r=r.toInt());var o=O(e,r.shape);return oa((function(t){var e=En(o,t.rank),r=o,a=t;null!=e&&(a=t.transpose(e),r=In(r.length,t.rank));var i=function(e){var n=t.shape.slice();return o.forEach((function(t){n[t]=1})),e.reshape(n).mul(zn(t.shape,\"float32\"))},s={axes:r},u=Lt.runKernelFunc((function(t){return t.sum(a,r)}),{x:a},(function(t){return{x:function(){return i(t)}}}),\"Sum\",s);if(n){var c=wn(u.shape,o);u=u.reshape(c)}return{value:u,gradFunc:i}}))(r)}}),eh=An({prod_:function(t,e,n){void 0===e&&(e=null),void 0===n&&(n=!1);var r=gn(t,\"x\",\"prod\");\"bool\"===r.dtype&&(r=r.toInt());var o=O(e,r.shape),a=En(o,r.rank),i=o,s=r;null!=a&&(s=r.transpose(a),i=In(i.length,r.rank));var u=Lt.runKernelFunc((function(t){return t.prod(s,i)}),{permutedX:s});if(n){var c=wn(u.shape,o);u=u.reshape(c)}return u}});var nh=An({elu_:function(t){var e=gn(t,\"x\",\"elu\");return Lt.runKernelFunc((function(t,n){var r=t.elu(e);return n([r]),r}),{$x:e},(function(t,e){var n=e[0];return{$x:function(){return Lt.runKernelFunc((function(e){return e.eluDer(t,n)}),{dy:t,y:n})}}}))}}),rh=An({leakyRelu_:function(t,e){void 0===e&&(e=.2);var n=gn(t,\"x\",\"leakyRelu\");return Eo(On(e).mul(n),n)}}),oh=An({prelu_:function(t,e){var n=gn(t,\"x\",\"prelu\"),r=gn(e,\"alpha\",\"prelu\");return Lt.runKernelFunc((function(t,e){var o=t.prelu(n,r);return e([n,r]),o}),{x:n,alpha:r},(function(t,e){var n=e[0],r=e[1],o=n.greater(0);return{x:function(){return yc(o,t,t.mul(r))},alpha:function(){var e=yc(o,Xn(t),t.mul(n)),a=Br(r.shape,t.shape);return a.length>0&&(e=e.sum(a)),e.reshape(r.shape)}}}),\"Prelu\")}}),ah=An({relu_:function(t){var e=gn(t,\"x\",\"relu\");return\"bool\"===e.dtype?e.toInt():Lt.runKernelFunc((function(t,n){var r=t.relu(e);return n([e]),r}),{x:e},(function(t,e){var n=e[0];return{x:function(){return t.mulStrict(n.step().toFloat())}}}),\"Relu\")}}),ih=An({relu6_:function(t){var e=gn(t,\"x\",\"relu6\");return\"bool\"===e.dtype?e.toInt():Lt.runKernelFunc((function(t,n){var r=t.relu6(e);return n([e]),r}),{x:e},(function(t,e){var n=e[0],r=n.lessEqual(6).mul(n.step());return{x:function(){return t.mulStrict(r.toFloat())}}}),\"Relu6\")}}),sh=An({selu_:function(t){var e=gn(t,\"x\",\"selu\");return Lt.runKernelFunc((function(t,n){var r=t.selu(e);return n([e]),r}),{$x:e},(function(t,e){var n=e[0];return{$x:function(){var e=n.greater(On(0)),r=On(su),o=On(uu),a=t.mul(o),i=t.mul(r).mul(n.toFloat().exp());return yc(e,a,i)}}}))}});var uh=An({localResponseNormalization_:function(t,e,n,r,o){void 0===e&&(e=5),void 0===n&&(n=1),void 0===r&&(r=1),void 0===o&&(o=.5);var a=gn(t,\"x\",\"localResponseNormalization\");C(4===a.rank||3===a.rank,(function(){return\"Error in localResponseNormalization: x must be rank 3 or 4 but got\\n               rank \"+a.rank+\".\"})),C(A(e),(function(){return\"Error in localResponseNormalization: depthRadius must be an integer but got depthRadius \"+e+\".\"}));var i=a,s=!1;3===a.rank&&(s=!0,i=a.as4D(1,a.shape[0],a.shape[1],a.shape[2]));var u=Lt.runKernelFunc((function(t,a){var s=t.localResponseNormalization4D(i,e,n,r,o);return a([i,s]),s}),{x4D:i},(function(t,a){var i=a[0],s=a[1];return{x4D:function(){return Lt.runKernelFunc((function(a){return a.LRNGrad(t,i,s,e,n,r,o)}),{})}}}));return s?u.as3D(u.shape[1],u.shape[2],u.shape[3]):u}});var ch=An({norm_:function(t,e,n,r){void 0===e&&(e=\"euclidean\"),void 0===n&&(n=null),void 0===r&&(r=!1);var o=function t(e,n,r){void 0===r&&(r=null);if(0===e.rank)return e.abs();if(1!==e.rank&&null===r)return t(e.reshape([-1]),n,r);if(1===e.rank||\"number\"==typeof r||Array.isArray(r)&&1===r.length){if(1===n)return e.abs().sum(r);if(n===1/0)return e.abs().max(r);if(n===-1/0)return e.abs().min(r);if(\"euclidean\"===n||2===n)return e.abs().pow(On(2,\"int32\")).sum(r).sqrt();throw new Error(\"Error in norm: invalid ord value: \"+n)}if(Array.isArray(r)&&2===r.length){if(1===n)return e.abs().sum(r[0]).max(r[1]-1);if(n===1/0)return e.abs().sum(r[1]).max(r[0]);if(n===-1/0)return e.abs().sum(r[1]).min(r[0]);if(\"fro\"===n||\"euclidean\"===n)return e.square().sum(r).sqrt();throw new Error(\"Error in norm: invalid ord value: \"+n)}throw new Error(\"Error in norm: invalid axis: \"+r)}(t=gn(t,\"x\",\"norm\"),e,n),a=o.shape;if(r){var i=O(n,t.shape);a=wn(o.shape,i)}return o.reshape(a)}});var lh=An({basicLSTMCell_:function(t,e,n,r,o,a){var i=gn(t,\"forgetBias\",\"basicLSTMCell\"),s=gn(e,\"lstmKernel\",\"basicLSTMCell\"),u=gn(n,\"lstmBias\",\"basicLSTMCell\"),c=gn(r,\"data\",\"basicLSTMCell\"),l=gn(o,\"c\",\"basicLSTMCell\"),h=gn(a,\"h\",\"basicLSTMCell\"),f=c.concat(h,1).matMul(s).add(u),d=f.shape[0],p=f.shape[1]/4,v=[d,p],g=f.slice([0,0],v),m=f.slice([0,p],v),y=f.slice([0,2*p],v),x=f.slice([0,3*p],v),b=g.sigmoid().mulStrict(m.tanh()).addStrict(l.mulStrict(i.add(y).sigmoid())),w=b.tanh().mulStrict(x.sigmoid());return[b,w]}}),hh=An({multiRNNCell_:function(t,e,n,r){for(var o=gn(e,\"data\",\"multiRNNCell\"),a=mn(n,\"c\",\"multiRNNCell\"),i=mn(r,\"h\",\"multiRNNCell\"),s=o,u=[],c=0;c<t.length;c++){var l=t[c](s,a[c],i[c]);u.push(l[0]),u.push(l[1]),s=l[1]}var h=[],f=[];for(c=0;c<u.length;c+=2)h.push(u[c]),f.push(u[c+1]);return[h,f]}});var fh=An({movingAverage_:function(t,e,n,r,o){void 0===o&&(o=!0);var a=gn(t,\"v\",\"movingAverage\"),i=gn(e,\"x\",\"movingAverage\"),s=gn(n,\"decay\",\"movingAverage\");Ft(a,i),C(S(a.shape,i.shape),(function(){return\"Shape mismatch in v and x\"}));var u=On(1),c=u.sub(s),l=i.sub(a).mul(c);if(o){C(null!=r,(function(){return\"When using zeroDebias: true, step is required.\"}));var h=gn(r,\"step\",\"movingAverage\");l=l.div(u.sub(No(s,h)))}return a.add(l)}});var dh=An({stridedSlice_:function(t,e,n,r,o,a,i,s,u){if(void 0===o&&(o=0),void 0===a&&(a=0),void 0===i&&(i=0),void 0===s&&(s=0),void 0===u&&(u=0),null==r&&(r=new Array(e.length)),0!==i)throw new Error(\"ellipsis mask is not yet supported\");var c=gn(t,\"x\",\"stridedSlice\"),l=Ko(s),h=c.shape.slice();l.forEach((function(t){e[t]=0,n[t]=1,h.splice(t,0,1)})),c=c.reshape(h);for(var f=0;f<c.rank;f++)e[f]=Xo(o,e,r,c.shape,f),n[f]=Yo(a,n,r,c.shape,f),r[f]=r[f]||1;var d=Ko(u);d.forEach((function(t){n[t]=e[t]+1,r[t]=1}));var p=jo(e,n,r),v=p.filter((function(t,e){return-1===d.indexOf(e)}));return r.every((function(t){return 1===t}))?Wl(c,e,p).reshape(v):Lt.runKernelFunc((function(t){return t.stridedSlice(c,e,n,r)}),{$x:c}).reshape(v)}});var ph=An({topk_:function(t,e,n){void 0===e&&(e=1),void 0===n&&(n=!0);var r=gn(t,\"x\",\"topk\");if(0===r.rank)throw new Error(\"topk() expects the input to be of rank 1 or higher\");var o=r.shape[r.shape.length-1];if(e>o)throw new Error(\"'k' passed to topk() must be <= the last dimension (\"+o+\") but got \"+e);var a=Lt.runKernelFunc((function(t){return t.topk(r,e,n)}),{$x:r});return{values:a[0],indices:a[1]}}});var vh=An({scatterND_:function(t,e,n){var r=gn(t,\"indices\",\"scatterND\",\"int32\"),o=gn(e,\"updates\",\"scatterND\");return zo(o,r,n),Lt.runKernelFunc((function(t){return t.scatterND(r,o,n)}),{indices:r,updates:o},null,\"ScatterNd\",{shape:n})}});var gh=An({fft_:function(t){C(\"complex64\"===t.dtype,(function(){return\"The dtype for tf.spectral.fft() must be complex64 but got \"+t.dtype+\".\"}));var e=t.shape[t.shape.length-1],n=t.size/e,r=t.as2D(n,e);return Lt.runKernelFunc((function(t){return t.fft(r)}),{input:t}).reshape(t.shape)}}),mh=An({ifft_:function(t){C(\"complex64\"===t.dtype,(function(){return\"The dtype for tf.spectral.ifft() must be complex64 but got \"+t.dtype+\".\"}));var e=t.shape[t.shape.length-1],n=t.size/e,r=t.as2D(n,e);return Lt.runKernelFunc((function(t){return t.ifft(r)}),{input:t}).reshape(t.shape)}}),yh=An({rfft_:function(t,e){C(\"float32\"===t.dtype,(function(){return\"The dtype for rfft() must be real value but got \"+t.dtype}));var n,r=t.shape[t.shape.length-1],o=t.size/r;if(null!=e&&e<r){var a=t.shape.map((function(t){return 0})),i=t.shape.map((function(t){return t}));i[t.shape.length-1]=e,n=t.slice(a,i),r=e}else if(null!=e&&e>r){var s=t.shape.map((function(t){return t}));s[t.shape.length-1]=e-r,n=t.concat(Gn(s),t.shape.length-1),r=e}else n=t;var u=n.zerosLike(),c=Tn(n,u).as2D(o,r),l=gh(c),h=Math.floor(r/2)+1,f=Dn(l),d=Nn(l),p=f.split([h,r-h],f.shape.length-1),v=d.split([h,r-h],d.shape.length-1),g=n.shape.slice();return g[n.shape.length-1]=h,Tn(p[0],v[0]).reshape(g)}}),xh=An({irfft_:function(t){var e=t.shape[t.shape.length-1],n=t.size/e;if(e<=2){var r=t.as2D(n,e),o=mh(r);return Dn(o)}var a=[n,2*(e-1)],i=Dn(t).as2D(n,e),s=Nn(t).as2D(n,e),u=i.slice([0,1],[n,e-2]).reverse(1),c=s.slice([0,1],[n,e-2]).reverse(1).mul(On(-1)),l=i.concat(u,1),h=s.concat(c,1);return r=Tn(l,h).as2D(a[0],a[1]),o=mh(r),Dn(o)}}),bh=Object.freeze({fft:gh,ifft:mh,rfft:yh,irfft:xh});var wh=An({sparseToDense_:function(t,e,n,r){void 0===r&&(r=0);var o=gn(t,\"sparseIndices\",\"sparseToDense\",\"int32\"),a=gn(e,\"sparseValues\",\"sparseToDense\"),i=gn(r,\"defaultValue\",\"sparseToDense\",a.dtype);return function(t,e,n,r){if(\"int32\"!==t.dtype)throw new Error(\"tf.sparseToDense() expects the indices to be int32 type, but the dtype was \"+t.dtype+\".\");if(t.rank>2)throw new Error(\"sparseIndices should be a scalar, vector, or matrix, but got shape \"+t.shape+\".\");var o=t.rank>0?t.shape[0]:1,a=t.rank>1?t.shape[1]:1;if(n.length!==a)throw new Error(\"outputShape has incorrect number of elements:, \"+n.length+\", should be: \"+a+\".\");var i=e.size;if(0!==e.rank&&(1!==e.rank||i!==o))throw new Error(\"sparseValues has incorrect shape \"+e.shape+\", should be [] or [\"+o+\"]\");if(e.dtype!==r.dtype)throw new Error(\"sparseValues.dtype must match defaultValues.dtype\")}(o,a,n,i),Lt.runKernelFunc((function(t){return t.sparseToDense(o,a,n,i)}),{$sparseIndices:o,$sparseValues:a,$defaultValue:i})}});var Ch=An({gatherND_:function(t,e){var n=gn(e,\"indices\",\"gatherND\",\"int32\"),r=gn(t,\"x\",\"gatherND\");return Lt.runKernelFunc((function(t){return t.gatherND(r,n)}),{x:r,indices:n},null,\"GatherNd\")}});var Eh=An({diag_:function(t){var e=gn(t,\"x\",\"diag\").flatten(),n=t.shape.concat(t.shape);return Lt.runKernelFunc((function(t){return t.diag(e)}),{$x:e}).reshape(n)}});var Rh=An({dropout_:function(t,e,n,r){var o=gn(t,\"x\",\"dropout\");if(C(\"float32\"===o.dtype,(function(){return\"x has to be a floating point tensor since it's going to be scaled, but got a \"+o.dtype+\" tensor instead.\"})),C(e>=0&&e<1,(function(){return\"rate must be a float in the range [0, 1), but got \"+e+\".\"})),0===e)return t instanceof wt?o.clone():o;var a=function(t,e){if(null==e)return t.shape.slice();if(S(t.shape,e))return e;if(t.shape.length===e.length){for(var n=[],r=0;r<t.shape.length;r++)null==e[r]&&null!=t.shape[r]?n.push(t.shape[r]):n.push(e[r]);return n}return e}(o,n),i=1-e,s=zc(a,0,1,\"float32\",r).add(i).floor().div(i);return o.mul(s)}});function Ih(t,e,n){for(var r=1-t%2,o=new Float32Array(t),a=0;a<t;++a){var i=2*Math.PI*a/(t+r-1);o[a]=e-n*Math.cos(i)}return Mn(o,\"float32\")}var kh=An({hannWindow_:function(t){return Ih(t,.5,.5)}}),Sh=An({hammingWindow_:function(t){return Ih(t,.54,.46)}}),Ah=An({frame_:function(t,e,n,r,o){void 0===r&&(r=!1),void 0===o&&(o=0);for(var a=0,i=[];a+e<=t.size;)i.push(Wl(t,a,e)),a+=n;if(r)for(;a<t.size;){var s=a+e-t.size,u=Yn([Wl(t,a,e-s),Hn([s],o)]);i.push(u),a+=n}return 0===i.length?Bn([],[0,e]):Yn(i).as2D(i.length,e)}}),Th=An({stft_:function(t,e,n,r,o){var a;void 0===o&&(o=kh),null==r&&(a=e,r=Math.floor(Math.pow(2,Math.ceil(Math.log(a)/Math.log(2)))));for(var i=Ah(t,e,n),s=To(i,o(e)),u=[],c=0;c<i.shape[0];c++)u.push(yh(s.slice([c,0],[1,e]),r));return Yn(u)}}),Dh=Object.freeze({hannWindow:kh,hammingWindow:Sh,frame:Ah,stft:Th});var Nh,Fh=function(t,e,o){return void 0===o&&(o=1),n(this,void 0,void 0,(function(){var n,a,i,s,u,c,l,h,f,d,p,v,g,m;return r(this,(function(r){switch(r.label){case 0:return n=gn(t,\"predictions\",\"inTopK\"),a=gn(e,\"targets\",\"inTopK\"),C(n.rank>1,(function(){return\"inTopK() expects the predictions to be of rank 2 or higher, but got \"+n.rank})),C(n.rank-1===a.rank,(function(){return\"predictions rank should be 1 larger than targets rank, but got predictions rank \"+n.rank+\" and targets rank \"+a.rank})),E(n.shape.slice(0,n.shape.length-1),a.shape,\"predictions's shape should be align with the targets' shape, except the last dimension.\"),i=n.shape[n.shape.length-1],C(o>0&&o<=i,(function(){return\"'k' passed to inTopK() must be > 0 && <= the predictions last dimension (\"+i+\"), but got \"+o})),[4,n.data()];case 1:return s=r.sent(),[4,a.data()];case 2:for(u=r.sent(),c=[s.length/i,i],h=c[1],f=B(\"bool\",l=c[0]),d=0;d<l;d++){for(p=d*h,v=s.subarray(p,p+h),g=[],m=0;m<v.length;m++)g.push({value:v[m],index:m});for(g.sort((function(t,e){return e.value-t.value})),f[d]=0,m=0;m<o;m++)if(g[m].index===u[d]){f[d]=1;break}}return t!==n&&n.dispose(),e!==a&&a.dispose(),[2,Fn(f,a.shape,\"bool\")]}}))}))};!function(t){t[t.NONE=0]=\"NONE\",t[t.MEAN=1]=\"MEAN\",t[t.SUM=2]=\"SUM\",t[t.SUM_BY_NONZERO_WEIGHTS=3]=\"SUM_BY_NONZERO_WEIGHTS\"}(Nh||(Nh={}));var _h=An({absoluteDifference_:function(t,e,n,r){void 0===r&&(r=Nh.SUM_BY_NONZERO_WEIGHTS);var o=gn(t,\"labels\",\"absoluteDifference\"),a=gn(e,\"predictions\",\"absoluteDifference\"),i=null;null!=n&&(i=gn(n,\"weights\",\"absoluteDifference\")),E(o.shape,a.shape,\"Error in absoluteDifference: \");var s=o.sub(a).abs();return Oh(s,i,r)}}),Oh=An({computeWeightedLoss_:function(t,e,n){void 0===n&&(n=Nh.SUM_BY_NONZERO_WEIGHTS);var r=gn(t,\"losses\",\"computeWeightedLoss\"),o=null;null!=e&&(o=gn(e,\"weights\",\"computeWeightedLoss\"));var a=null==o?r:r.mul(o);if(n===Nh.NONE)return a;if(n===Nh.SUM)return a.sum();if(n===Nh.MEAN){if(null==o)return a.mean();var i=r.size/o.size,s=a.sum().div(o.sum());return i>1?s.div(On(i)):s}if(n===Nh.SUM_BY_NONZERO_WEIGHTS){if(null==o)return a.sum().div(On(r.size));var u=o.mul(zn(r.shape)).notEqual(On(0)).sum().toFloat();return a.sum().div(u)}throw Error(\"Unknown reduction: \"+n)}}),Mh=An({cosineDistance_:function(t,e,n,r,o){void 0===o&&(o=Nh.SUM_BY_NONZERO_WEIGHTS);var a=gn(t,\"labels\",\"cosineDistance\"),i=gn(e,\"predictions\",\"cosineDistance\"),s=null;null!=r&&(s=gn(r,\"weights\",\"cosineDistance\")),E(a.shape,i.shape,\"Error in cosineDistance: \");var u=On(1).sub(a.mul(i).sum(n,!0));return Oh(u,s,o)}}),Bh=An({hingeLoss_:function(t,e,n,r){void 0===r&&(r=Nh.SUM_BY_NONZERO_WEIGHTS);var o=gn(t,\"labels\",\"hingeLoss\"),a=gn(e,\"predictions\",\"hingeLoss\"),i=null;null!=n&&(i=gn(n,\"weights\",\"hingeLoss\")),E(o.shape,a.shape,\"Error in hingeLoss: \");var s=On(1);o=On(2).mul(o).sub(s);var u=s.sub(o.mul(a)).relu();return Oh(u,i,r)}}),Ph=An({huberLoss_:function(t,e,n,r,o){void 0===r&&(r=1),void 0===o&&(o=Nh.SUM_BY_NONZERO_WEIGHTS);var a=gn(t,\"labels\",\"huberLoss\"),i=gn(e,\"predictions\",\"huberLoss\"),s=null;null!=n&&(s=gn(n,\"weights\",\"huberLoss\")),E(a.shape,i.shape,\"Error in huberLoss: \");var u=On(r),c=i.sub(a).abs(),l=Io(c,u),h=c.sub(l),f=On(.5).mul(l.square()).add(u.mul(h));return Oh(f,s,o)}}),Lh=An({logLoss_:function(t,e,n,r,o){void 0===r&&(r=1e-7),void 0===o&&(o=Nh.SUM_BY_NONZERO_WEIGHTS);var a=gn(t,\"labels\",\"logLoss\"),i=gn(e,\"predictions\",\"logLoss\"),s=null;null!=n&&(s=gn(n,\"weights\",\"logLoss\")),E(a.shape,i.shape,\"Error in logLoss: \");var u=On(1),c=On(r),l=a.mul(i.add(c).log()).neg().sub(u.sub(a).mul(u.sub(i).add(c).log()));return Oh(l,s,o)}}),Wh=An({meanSquaredError_:function(t,e,n,r){void 0===r&&(r=Nh.SUM_BY_NONZERO_WEIGHTS);var o=gn(t,\"labels\",\"meanSquaredError\"),a=gn(e,\"predictions\",\"meanSquaredError\"),i=null;null!=n&&(i=gn(n,\"weights\",\"meanSquaredError\")),E(o.shape,a.shape,\"Error in meanSquaredError: \");var s=o.squaredDifference(a);return Oh(s,i,r)}}),Uh=An({sigmoidCrossEntropy_:function(t,e,n,r,o){void 0===r&&(r=0),void 0===o&&(o=Nh.SUM_BY_NONZERO_WEIGHTS);var a=gn(t,\"multiClassLabels\",\"sigmoidCrossEntropy\"),i=gn(e,\"logits\",\"sigmoidCrossEntropy\"),s=null;if(null!=n&&(s=gn(n,\"weights\",\"sigmoidCrossEntropy\")),E(a.shape,i.shape,\"Error in sigmoidCrossEntropy: \"),r>0){var u=On(r),c=On(1),l=On(.5);a=a.mul(c.sub(u)).add(l.mul(u))}var h=function(t,e){var n=gn(t,\"labels\",\"sigmoidCrossEntropyWithLogits\"),r=gn(e,\"logits\",\"sigmoidCrossEntropyWithLogits\");E(n.shape,r.shape,\"Error in sigmoidCrossEntropyWithLogits: \");var o=r.relu(),a=r.mul(n),i=r.abs().neg().exp().log1p();return o.sub(a).add(i)}(a,i);return Oh(h,s,o)}}),Vh=An({softmaxCrossEntropy_:function(t,e,n,r,o){void 0===r&&(r=0),void 0===o&&(o=Nh.SUM_BY_NONZERO_WEIGHTS);var a=gn(t,\"onehotLabels\",\"softmaxCrossEntropy\"),i=gn(e,\"logits\",\"softmaxCrossEntropy\"),s=null;if(null!=n&&(s=gn(n,\"weights\",\"softmaxCrossEntropy\")),E(a.shape,i.shape,\"Error in softmaxCrossEntropy: \"),r>0){var u=On(r),c=On(1),l=On(a.shape[1]);a=a.mul(c.sub(u)).add(u.div(l))}var h=function(t,e,n){if(void 0===n&&(n=-1),-1===n&&(n=e.rank-1),n!==e.rank-1)throw Error(\"Softmax cross entropy along a non-last dimension is not yet supported. Labels / logits was rank \"+e.rank+\" and dim was \"+n);return oa((function(t,e,r){var o=e.logSumExp([n],!0),a=e.toFloat().sub(o);r([t,a]);return{value:a.mul(t).neg().sum([n]),gradFunc:function(t,e){var r=e[0],o=e[1],a=wn(t.shape,[n]);return[t.reshape(a).mul(r.toFloat().sub(o.exp())),t.reshape(a).mul(o.exp().sub(r.toFloat()))]}}}))(t,e)}(a,i);return Oh(h,s,o)}}),zh=Object.freeze({get Reduction(){return Nh},absoluteDifference:_h,computeWeightedLoss:Oh,cosineDistance:Mh,hingeLoss:Bh,huberLoss:Ph,logLoss:Lh,meanSquaredError:Wh,sigmoidCrossEntropy:Uh,softmaxCrossEntropy:Vh});function Gh(t,e){return void 0===e&&(e=!1),Lt.tidy((function(){if(2!==t.shape.length)throw new Error(\"qr2d() requires a 2D Tensor, but got a \"+t.shape.length+\"D Tensor.\");for(var n=t.shape[0],r=t.shape[1],o=Cc(n),a=t.clone(),i=Bn([[1]],[1,1]),s=i.clone(),u=n>=r?r:n,c=function(t){var e,u=a,c=s,l=o;e=Lt.tidy((function(){var e=a.slice([t,t],[n-t,1]),u=e.norm(),c=a.slice([t,t],[1,1]),l=Bn([[-1]]).where(c.greater(0),Bn([[1]])),h=c.sub(l.mul(u)),f=e.div(h);s=1===f.shape[0]?i.clone():i.concat(f.slice([1,0],[f.shape[0]-1,f.shape[1]]),0);var d=l.matMul(h).div(u).neg(),p=a.slice([t,0],[n-t,r]),v=d.mul(s),g=s.transpose();if(0===t)a=p.sub(v.matMul(g.matMul(p)));else{var m=p.sub(v.matMul(g.matMul(p)));a=a.slice([0,0],[t,r]).concat(m,0)}var y=v.transpose(),x=o.slice([0,t],[n,o.shape[1]-t]);if(0===t)o=x.sub(x.matMul(s).matMul(y));else{var b=x.sub(x.matMul(s).matMul(y));o=o.slice([0,0],[n,t]).concat(b,1)}return[s,a,o]})),s=e[0],a=e[1],o=e[2],tn([u,c,l])},l=0;l<u;++l)c(l);return!e&&n>r&&(o=o.slice([0,0],[n,r]),a=a.slice([0,0],[r,r])),[o,a]}))}var Hh=An({bandPart_:function(t,e,n){if(e%1!=0)throw new Error(\"bandPart(): numLower must be an integer, got \"+e+\".\");if(n%1!=0)throw new Error(\"bandPart(): numUpper must be an integer, got \"+n+\".\");var r=gn(t,\"a\",\"bandPart\");if(r.rank<2)throw new Error(\"bandPart(): Rank must be at least 2, got \"+r.rank+\".\");var o=r.shape,a=r.shape.slice(-2),i=a[0],s=a[1];if(!(e<=i))throw new Error(\"bandPart(): numLower (\"+e+\") must not be greater than the number of rows (\"+i+\").\");if(!(n<=s))throw new Error(\"bandPart(): numUpper (\"+n+\") must not be greater than the number of columns (\"+s+\").\");e<0&&(e=i),n<0&&(n=s);var u=Kn(0,i,1,\"int32\").reshape([-1,1]),c=Kn(0,s,1,\"int32\"),l=Oo(u,c),h=pc(l.lessEqual(On(+e,\"int32\")),l.greaterEqual(On(-n,\"int32\"))),f=Gn([i,s],r.dtype);return hr(fr(r.reshape([-1,i,s])).map((function(t){return yc(h,t,f)}))).reshape(o)}}),qh=An({gramSchmidt_:function(t){var e;if(Array.isArray(t)){e=!1,C(null!=t&&t.length>0,(function(){return\"Gram-Schmidt process: input must not be null, undefined, or empty\"}));for(var n=t[0].shape[0],r=function(e){C(t[e].shape[0]===n,(function(){return\"Gram-Schmidt: Non-unique lengths found in the input vectors: (\"+t[e].shape[0]+\" vs. \"+n+\")\"}))},o=1;o<t.length;++o)r(o)}else e=!0,t=tr(t,t.shape[0],0).map((function(t){return lr(t,[0])}));C(t.length<=t[0].shape[0],(function(){return\"Gram-Schmidt: Number of vectors (\"+t.length+\") exceeds number of dimensions (\"+t[0].shape[0]+\").\"}));var a=[],i=t,s=function(t){a.push(Lt.tidy((function(){var e=i[t];if(t>0)for(var n=0;n<t;++n){var r=th(a[n].mulStrict(e)).mul(a[n]);e=e.sub(r)}return e.div(ch(e,\"euclidean\"))})))};for(o=0;o<t.length;++o)s(o);return e?hr(a,0):a}}),Kh=An({qr_:function(t,e){if(void 0===e&&(e=!1),t.rank<2)throw new Error(\"qr() requires input tensor to have a rank >= 2, but got rank \"+t.rank);if(2===t.rank)return Gh(t,e);var n=t.shape.slice(0,t.shape.length-2).reduce((function(t,e){return t*e})),r=fr(t.reshape([n,t.shape[t.shape.length-2],t.shape[t.shape.length-1]]),0),o=[],a=[];return r.forEach((function(t){var n=Gh(t,e),r=n[0],i=n[1];o.push(r),a.push(i)})),[hr(o,0).reshape(t.shape),hr(a,0).reshape(t.shape)]}}),jh=Object.freeze({bandPart:Hh,gramSchmidt:qh,qr:Kh});function Xh(t,e,n,r,o,a){null==r&&(r=.5),null==o&&(o=Number.NEGATIVE_INFINITY),null==a&&(a=0);var i=t.shape[0];return n=Math.min(n,i),C(0<=r&&r<=1,(function(){return\"iouThreshold must be in [0, 1], but was '\"+r+\"'\"})),C(2===t.rank,(function(){return\"boxes must be a 2D tensor, but was of rank '\"+t.rank+\"'\"})),C(4===t.shape[1],(function(){return\"boxes must have 4 columns, but 2nd dimension was \"+t.shape[1]})),C(1===e.rank,(function(){return\"scores must be a 1D tensor\"})),C(e.shape[0]===i,(function(){return\"scores has incompatible shape with boxes. Expected \"+i+\", but was \"+e.shape[0]})),C(0<=a&&a<=1,(function(){return\"softNmsSigma must be in [0, 1], but was '\"+a+\"'\"})),{maxOutputSize:n,iouThreshold:r,scoreThreshold:o,softNmsSigma:a}}var Yh=An({resizeBilinear_:function(t,e,n){void 0===n&&(n=!1);var r=gn(t,\"images\",\"resizeBilinear\");C(3===r.rank||4===r.rank,(function(){return\"Error in resizeBilinear: x must be rank 3 or 4, but got rank \"+r.rank+\".\"})),C(2===e.length,(function(){return\"Error in resizeBilinear: new shape must 2D, but got shape \"+e+\".\"}));var o=r,a=!1;3===r.rank&&(a=!0,o=r.as4D(1,r.shape[0],r.shape[1],r.shape[2]));var i=e[0],s=e[1],u=Lt.runKernelFunc((function(t,e){return e([o]),t.resizeBilinear(o,i,s,n)}),{x:o},(function(t,e){return{x:function(){return Lt.runKernelFunc((function(r){return r.resizeBilinearBackprop(t,e[0],n)}),{})}}}),\"ResizeBilinear\",{alignCorners:n,newHeight:i,newWidth:s});return a?u.as3D(u.shape[1],u.shape[2],u.shape[3]):u}}),$h=An({resizeNearestNeighbor_:function(t,e,n){void 0===n&&(n=!1);var r=gn(t,\"images\",\"resizeNearestNeighbor\");C(3===r.rank||4===r.rank,(function(){return\"Error in resizeNearestNeighbor: x must be rank 3 or 4, but got rank \"+r.rank+\".\"})),C(2===e.length,(function(){return\"Error in resizeNearestNeighbor: new shape must 2D, but got shape \"+e+\".\"})),C(\"float32\"===r.dtype||\"int32\"===r.dtype,(function(){return\"`images` must have `int32` or `float32` as dtype\"}));var o=r,a=!1;3===r.rank&&(a=!0,o=r.as4D(1,r.shape[0],r.shape[1],r.shape[2]));var i=e[0],s=e[1],u=Lt.runKernelFunc((function(t,e){return e([o]),t.resizeNearestNeighbor(o,i,s,n)}),{batchImages:o},(function(t,e){return{batchImages:function(){return Lt.runKernelFunc((function(r){return r.resizeNearestNeighborBackprop(t,e[0],n)}),{})}}}));return a?u.as3D(u.shape[1],u.shape[2],u.shape[3]):u}}),Qh=An({nonMaxSuppression_:function(t,e,n,r,o){void 0===r&&(r=.5),void 0===o&&(o=Number.NEGATIVE_INFINITY);var a=gn(t,\"boxes\",\"nonMaxSuppression\"),i=gn(e,\"scores\",\"nonMaxSuppression\"),s=Xh(a,i,n,r,o);n=s.maxOutputSize,r=s.iouThreshold,o=s.scoreThreshold;var u={maxOutputSize:n,iouThreshold:r,scoreThreshold:o};return Lt.runKernelFunc((function(t){return t.nonMaxSuppression(a,i,n,r,o)}),{boxes:a,scores:i},null,\"NonMaxSuppressionV3\",u)}}),Jh=function(t,e,o,a,i){return void 0===a&&(a=.5),void 0===i&&(i=Number.NEGATIVE_INFINITY),n(this,void 0,void 0,(function(){var n,s,u,c,l,h,f;return r(this,(function(r){switch(r.label){case 0:return n=gn(t,\"boxes\",\"nonMaxSuppressionAsync\"),s=gn(e,\"scores\",\"nonMaxSuppressionAsync\"),u=Xh(n,s,o,a,i),o=u.maxOutputSize,a=u.iouThreshold,i=u.scoreThreshold,[4,Promise.all([n.data(),s.data()])];case 1:return c=r.sent(),l=c[0],h=c[1],f=Oa(l,h,o,a,i),n!==t&&n.dispose(),s!==e&&s.dispose(),[2,f]}}))}))},Zh=An({nonMaxSuppressionWithScore_:function(t,e,n,r,o,a){void 0===r&&(r=.5),void 0===o&&(o=Number.NEGATIVE_INFINITY),void 0===a&&(a=0);var i=gn(t,\"boxes\",\"nonMaxSuppression\"),s=gn(e,\"scores\",\"nonMaxSuppression\"),u=Xh(i,s,n,r,o,a),c={maxOutputSize:n=u.maxOutputSize,iouThreshold:r=u.iouThreshold,scoreThreshold:o=u.scoreThreshold,softNmsSigma:a=u.softNmsSigma},l=Lt.runKernel(\"NonMaxSuppressionV5\",{boxes:i,scores:s},c);return{selectedIndices:l[0],selectedScores:l[1]}}}),tf=function(t,e,o,a,i,s){return void 0===a&&(a=.5),void 0===i&&(i=Number.NEGATIVE_INFINITY),void 0===s&&(s=0),n(this,void 0,void 0,(function(){var n,u,c,l,h,f,d;return r(this,(function(r){switch(r.label){case 0:return n=gn(t,\"boxes\",\"nonMaxSuppressionAsync\"),u=gn(e,\"scores\",\"nonMaxSuppressionAsync\"),c=Xh(n,u,o,a,i,s),o=c.maxOutputSize,a=c.iouThreshold,i=c.scoreThreshold,s=c.softNmsSigma,[4,Promise.all([n.data(),u.data()])];case 1:return l=r.sent(),h=l[0],f=l[1],d=Ma(h,f,o,a,i,s),n!==t&&n.dispose(),u!==e&&u.dispose(),[2,d]}}))}))},ef=An({cropAndResize_:function(t,e,n,r,o,a){var i=gn(t,\"image\",\"cropAndResize\"),s=gn(e,\"boxes\",\"cropAndResize\",\"float32\"),u=gn(n,\"boxInd\",\"cropAndResize\",\"int32\");o=o||\"bilinear\",a=a||0;var c=s.shape[0];return C(4===i.rank,(function(){return\"Error in cropAndResize: image must be rank 4,but got rank \"+i.rank+\".\"})),C(2===s.rank&&4===s.shape[1],(function(){return\"Error in cropAndResize: boxes must be have size [\"+c+\",4] but had shape \"+s.shape+\".\"})),C(1===u.rank&&u.shape[0]===c,(function(){return\"Error in cropAndResize: boxInd must be have size [\"+c+\"] but had shape \"+s.shape+\".\"})),C(2===r.length,(function(){return\"Error in cropAndResize: cropSize must be of length 2, but got length \"+r.length+\".\"})),C(r[0]>=1&&r[1]>=1,(function(){return\"cropSize must be atleast [1,1], but was \"+r})),C(\"bilinear\"===o||\"nearest\"===o,(function(){return\"method must be bilinear or nearest, but was \"+o})),Lt.runKernelFunc((function(t,e){return t.cropAndResize(i,s,u,r,o,a)}),{images:i,boxes:s,boxInd:u},null,\"CropAndResize\",{method:o,extrapolationValue:a,cropSize:r})}}),nf=Object.freeze({resizeBilinear:Yh,resizeNearestNeighbor:$h,nonMaxSuppression:Qh,nonMaxSuppressionAsync:Jh,nonMaxSuppressionWithScore:Zh,nonMaxSuppressionWithScoreAsync:tf,cropAndResize:ef}),rf=function(t,e){return!(t>0)||\"linear\"===e},of=function(t,e,n){if(null==n||\"linear\"===n)return t;if(\"relu\"===n)return t.mul(e.step());throw new Error(\"Gradient for activation \"+n+\" has not been implemented yet.\")},af=function(t,e){var n=e,r=Br(t.shape,e.shape);return r.length>0&&(n=n.sum(r)),n.reshape(t.shape)},sf=function(t,e,n){if(\"linear\"===e)return t;if(\"relu\"===e)return ah(t);if(\"elu\"===e)return nh(t);if(\"relu6\"===e)return ih(t);if(\"prelu\"===e)return oh(t,n);throw new Error(\"Unknown fused activation \"+e+\".\")};var uf=An({fusedMatMul_:function(t){var e,n=t.a,r=t.b,o=t.transposeA,a=void 0!==o&&o,i=t.transposeB,s=void 0!==i&&i,u=t.bias,c=t.activation,l=void 0===c?\"linear\":c,h=t.preluActivationWeights;if(!1===rf(Lt.state.gradientDepth,l)){var f=El(n,r,a,s);return null!=u&&(f=Or(f,u)),sf(f,l,h)}var d=gn(n,\"a\",\"fused matMul\"),p=gn(r,\"b\",\"fused matMul\");e=Nt(d,p),d=e[0],p=e[1];var v=a?d.shape[d.rank-2]:d.shape[d.rank-1],g=s?p.shape[p.rank-1]:p.shape[p.rank-2],m=a?d.shape[d.rank-1]:d.shape[d.rank-2],y=s?p.shape[p.rank-2]:p.shape[p.rank-1],x=d.shape.slice(0,-2),b=p.shape.slice(0,-2),w=k(x),E=k(b);C(d.rank>=2&&p.rank>=2&&d.rank===p.rank,(function(){return\"Error in fused matMul: inputs must have the same rank of at least 2, got ranks \"+d.rank+\" and \"+p.rank+\".\"})),C(S(x,b),(function(){return\"Error in fused matMul: outer dimensions (\"+x+\") and (\"+b+\") of Tensors with shapes \"+d.shape+\" and \"+p.shape+\" must match.\"})),C(v===g,(function(){return\"Error in fused matMul: inner shapes (\"+v+\") and (\"+g+\") of Tensors with shapes \"+d.shape+\" and \"+p.shape+\" and transposeA=\"+a+\" and transposeB=\"+s+\" must match.\"}));var R,I,A=d.shape.slice(0,-2).concat([m,y]),T=a?d.as3D(w,v,m):d.as3D(w,m,v),D=s?p.as3D(E,y,g):p.as3D(E,g,y);null!=u&&Pr(A,(R=Nt(R=gn(u,\"bias\",\"fused matMul\"),d)[0]).shape),null!=h&&(I=gn(h,\"prelu weights\",\"fused matMul\"));var N={a:T,b:D};null!=u&&(N.bias=R),null!=h&&(N.preluActivationWeights=I);var F=[T,D];return Lt.runKernelFunc((function(t,e){var n=t.fusedBatchMatMul({a:T,b:D,transposeA:a,transposeB:s,bias:R,activation:l,preluActivationWeights:I});return e([T,D,n]),n}),N,(function(t,e){var n=e[0],r=e[1],o=e[2],i=of(t,o,l),c={};return null!=u&&(c={bias:function(){return af(R,i)}}),a||s?!a&&s?Object.assign({a:function(){return i.matMul(r,!1,!1)},b:function(){return i.matMul(n,!0,!1)}},c):a&&!s?Object.assign({a:function(){return r.matMul(i,!1,!0)},b:function(){return n.matMul(i,!1,!1)}},c):Object.assign({a:function(){return r.matMul(i,!0,!0)},b:function(){return i.matMul(n,!0,!0)}},c):Object.assign({a:function(){return i.matMul(r,!1,!0)},b:function(){return n.matMul(i,!0,!1)}},c)}),\"_FusedMatMul\",{transposeA:a,transposeB:s,activation:l},F,[!0]).reshape(A)}}),cf=An({fusedConv2d_:function(t){var e=t.x,n=t.filter,r=t.strides,o=t.pad,a=t.dataFormat,i=void 0===a?\"NHWC\":a,s=t.dilations,u=void 0===s?[1,1]:s,c=t.dimRoundingMode,l=t.bias,h=t.activation,f=void 0===h?\"linear\":h,d=t.preluActivationWeights;if(f=f||\"linear\",!1===rf(Lt.state.gradientDepth,f)){var p=dl(e,n,r,o,i,u,c);return null!=l&&(p=Or(p,l)),sf(p,f,d)}var v=gn(e,\"x\",\"conv2d\"),g=gn(n,\"filter\",\"conv2d\"),m=v,y=!1;3===v.rank&&(y=!0,m=v.as4D(1,v.shape[0],v.shape[1],v.shape[2])),C(4===m.rank,(function(){return\"Error in fused conv2d: input must be rank 4, but got rank \"+m.rank+\".\"})),C(4===g.rank,(function(){return\"Error in fused conv2d: filter must be rank 4, but got rank \"+g.rank+\".\"})),null!=c&&C(A(o),(function(){return\"Error in fused conv2d: pad must be an integer when using, dimRoundingMode \"+c+\" but got pad \"+o+\".\"})),C(m.shape[3]===g.shape[2],(function(){return\"Error in conv2d: depth of input (\"+m.shape[3]+\") must match input depth for filter \"+g.shape[2]+\".\"})),C(Ca(r,u),(function(){return\"Error in conv2D: Either strides or dilations must be 1. Got strides \"+r+\" and dilations '\"+u+\"'\"})),C(\"NHWC\"===i,(function(){return\"Error in conv2d: got dataFormat of \"+i+\" but only NHWC is currently supported.\"}));var x,b,w=pa(m.shape,g.shape,r,u,o,c);null!=l&&(x=Nt(x=gn(l,\"bias\",\"fused conv2d\"),v)[0],Pr(w.outShape,x.shape)),null!=d&&(b=gn(d,\"prelu weights\",\"fused conv2d\"));var E={x:m,filter:g};null!=l&&(E.bias=x),null!=d&&(E.preluActivationWeights=b);var R=[g,m],I=Lt.runKernelFunc((function(t,e){var n=t.fusedConv2d({input:m,filter:g,convInfo:w,bias:x,activation:f,preluActivationWeights:b});return e([g,m,n]),n}),E,(function(t,e){var n=e,a=n[0],i=n[1],s=n[2],c=of(t,s,f);C(wa(u),(function(){return\"Error in gradient of fused conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '\"+u+\"'\"}));var h={};return null!=l&&(h={bias:function(){return af(x,c)}}),Object.assign({x:function(){return gl(i.shape,c,a,r,o)},filter:function(){return vl(i,c,a.shape,r,o)}},h)}),\"FusedConv2D\",{convInfo:w,activation:f},R,[!0]);return y?I.as3D(I.shape[1],I.shape[2],I.shape[3]):I}}),lf=An({fusedDepthwiseConv2d_:function(t){var e=t.x,n=t.filter,r=t.strides,o=t.pad,a=t.dataFormat,i=void 0===a?\"NHWC\":a,s=t.dilations,u=void 0===s?[1,1]:s,c=t.dimRoundingMode,l=t.bias,h=t.activation,f=void 0===h?\"linear\":h,d=t.preluActivationWeights;if(!1===rf(Lt.state.gradientDepth,f)){var p=ml(e,n,r,o,i,u,c);return null!=l&&(p=Or(p,l)),sf(p,f,d)}var v=gn(e,\"x\",\"depthwiseConv2d\"),g=gn(n,\"filter\",\"depthwiseConv2d\"),m=v,y=!1;3===v.rank&&(y=!0,m=v.as4D(1,v.shape[0],v.shape[1],v.shape[2])),C(4===m.rank,(function(){return\"Error in fused depthwiseConv2d: input must be rank 4, but got rank \"+m.rank+\".\"})),C(4===g.rank,(function(){return\"Error in fused depthwiseConv2d: filter must be rank 4, but got rank \"+g.rank+\".\"})),C(m.shape[3]===g.shape[2],(function(){return\"Error in fused depthwiseConv2d: number of input channels (\"+m.shape[3]+\") must match the inChannels dimension in filter \"+g.shape[2]+\".\"})),null==u&&(u=[1,1]),C(Ca(r,u),(function(){return\"Error in fused depthwiseConv2d: Either strides or dilations must be 1. Got strides \"+r+\" and dilations '\"+u+\"'\"})),null!=c&&C(A(o),(function(){return\"Error in fused depthwiseConv2d: pad must be an integer when using dimRoundingMode \"+c+\" but got pad \"+o+\".\"}));var x,b,w=pa(m.shape,g.shape,r,u,o,c,!0);null!=l&&(x=Nt(x=gn(l,\"bias\",\"fused conv2d\"),v)[0],Pr(w.outShape,x.shape)),null!=d&&(b=gn(d,\"prelu weights\",\"fused depthwiseConv2d\"));var E={x:m,filter:g};null!=l&&(E.bias=x),null!=d&&(E.preluActivationWeights=b);var R=[g,m],I=Lt.runKernelFunc((function(t,e){var n=t.fusedDepthwiseConv2D({input:m,filter:g,convInfo:w,bias:x,activation:f,preluActivationWeights:b});return e([g,m,n]),n}),E,(function(t,e){C(wa(u),(function(){return\"Error in gradient of fused depthwiseConv2d: dilation rates greater than 1 are not yet supported. Got dilations '\"+u+\"'\"}));var n=e[0],r=e[1],o=e[2],a=of(t,o,f),i={};return null!=l&&(i={bias:function(){return af(x,a)}}),Object.assign({x:function(){return yl(r.shape,a,n,w)},filter:function(){return xl(r,a,n.shape,w)}},i)}),\"FusedDepthwiseConv2D\",{convInfo:w,activation:f},R,[!0]);return y?I.as3D(I.shape[1],I.shape[2],I.shape[3]):I}}),hf=Object.freeze({matMul:uf,conv2d:cf,depthwiseConv2d:lf}),ff=Object.freeze({image:nf,linalg:jh,losses:zh,spectral:bh,fused:hf,signal:Dh,add:Or,addN:$u,batchNorm:nc,batchNormalization:ec,batchNorm2d:ac,batchNormalization2d:oc,batchNorm3d:uc,batchNormalization3d:sc,batchNorm4d:hc,batchNormalization4d:lc,broadcastTo:fc,clone:dc,div:Bo,divNoNan:bc,eye:Cc,multinomial:Ec,oneHot:Rc,pad:Ic,pad1d:kc,pad2d:Sc,pad3d:Ac,pad4d:Tc,rand:Dc,randomGamma:Uc,randomNormal:Vc,randomUniform:zc,square:Gc,squaredDifference:Hc,tile:wc,truncatedNormal:qc,conv1d:fl,conv2d:dl,conv3d:pl,depthwiseConv2d:ml,separableConv2d:bl,conv2dTranspose:wl,conv3dTranspose:Cl,op:An,booleanMaskAsync:ul,complex:Tn,real:Dn,imag:Nn,concat:Yn,concat1d:$n,concat2d:Qn,concat3d:Jn,concat4d:Zn,split:tr,matMul:El,dot:Rl,outerProduct:Il,reverse:kl,reverse1d:Sl,reverse2d:Al,reverse3d:Tl,reverse4d:Dl,maxPool:_l,avgPool:Ol,pool:Ml,maxPool3d:Bl,avgPool3d:Pl,maxPoolWithArgmax:Ll,slice:Wl,slice1d:Ul,slice2d:Vl,slice3d:zl,slice4d:Gl,abs:Lr,acos:Wr,acosh:Ur,asin:Vr,asinh:zr,atan:Gr,atanh:Hr,ceil:qr,clipByValue:Kr,cos:jr,cosh:Xr,erf:Yr,exp:$r,expm1:Qr,floor:Jr,log:Zr,log1p:to,logSigmoid:eo,neg:no,reciprocal:ro,round:oo,rsqrt:ao,sigmoid:io,sign:so,isNaN:uo,isInf:co,isFinite:lo,sin:ho,sinh:fo,softplus:po,sqrt:vo,step:go,tan:mo,tanh:yo,all:ql,any:Kl,argMax:jl,argMin:Xl,logSumExp:Yl,max:$l,mean:Ql,min:Jl,moments:Zl,sum:th,prod:eh,equal:Kc,equalStrict:jc,greater:Xc,greaterEqual:Yc,greaterEqualStrict:$c,greaterStrict:Qc,less:Jc,lessEqual:Zc,lessEqualStrict:tl,lessStrict:el,notEqual:nl,notEqualStrict:rl,addStrict:xo,atan2:bo,divStrict:wo,floorDiv:Co,maximum:Eo,maximumStrict:Ro,minimum:Io,minimumStrict:ko,mod:So,modStrict:Ao,mul:To,mulStrict:Do,pow:No,powStrict:Fo,squaredDifferenceStrict:_o,sub:Oo,subStrict:Mo,elu:nh,leakyRelu:rh,prelu:oh,relu:ah,relu6:ih,selu:sh,logicalAnd:pc,logicalNot:vc,logicalOr:gc,logicalXor:mc,where:yc,whereAsync:xc,buffer:er,print:nr,batchToSpaceND:rr,cast:or,cumsum:ar,depthToSpace:ir,expandDims:sr,reshape:ur,spaceToBatchND:cr,squeeze:lr,stack:hr,unstack:fr,setdiff1dAsync:dr,fill:Hn,linspace:qn,ones:zn,range:Kn,scalar:On,tensor:Fn,tensor1d:Mn,tensor2d:Bn,tensor3d:Pn,tensor4d:Ln,tensor5d:Wn,tensor6d:Un,variable:Vn,zeros:Gn,onesLike:jn,zerosLike:Xn,transpose:ua,softmax:ia,logSoftmax:sa,localResponseNormalization:uh,norm:ch,gather:il,unsortedSegmentSum:sl,basicLSTMCell:lh,multiRNNCell:hh,movingAverage:fh,stridedSlice:dh,topk:ph,scatterND:vh,fft:gh,ifft:mh,rfft:yh,irfft:xh,sparseToDense:wh,gatherND:Ch,diag:Eh,dropout:Rh,hannWindow:kh,hammingWindow:Sh,frame:Ah,stft:Th,inTopKAsync:Fh});function df(t,e){Array.isArray(t)||(t=[t]),t.forEach((function(t){null!=t&&C(\"complex64\"!==t.dtype,(function(){return e+\" does not support complex64 tensors.\"}))}))}function pf(t,e,n,r,o,a){for(var i=o.strideHeight,s=o.strideWidth,u=o.dilationHeight,c=o.dilationWidth,l=o.effectiveFilterHeight,h=o.effectiveFilterWidth,f=o.padInfo.top,d=o.padInfo.left,p=\"max\"===a?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,v=er(o.outShape,n),g=v.values,m=o.outShape[1]*o.outShape[2]*o.outShape[3],y=o.outShape[2]*o.outShape[3],x=o.outShape[3],b=0;b<o.batchSize;++b)for(var w=b*m,C=b*r[0],E=0;E<o.inChannels;++E)for(var R=0;R<o.outHeight;++R)for(var I=R*i-f,k=Math.max(0,I),S=Math.min(o.inHeight,l+I),A=w+R*y,T=0;T<o.outWidth;++T){for(var D=T*s-d,N=Math.max(0,D),F=Math.min(o.inWidth,h+D),_=p,O=0,M=0,B=k;B<S;B+=u){for(var P=C+B*r[1],L=N;L<F;L+=c){var W=t[P+L*r[2]+E];\"max\"===a&&W>_?_=W:\"avg\"===a&&(O+=W,M++)}if(isNaN(_))break}g[A+T*x+E]=\"avg\"===a?O/M:_}return v}function vf(t,e,n,r,o,a){void 0===o&&(o=!1),void 0===a&&(a=!1);for(var i=er(r.outShape,\"int32\"),s=r.strideHeight,u=r.strideWidth,c=r.dilationHeight,l=r.dilationWidth,h=r.effectiveFilterHeight,f=r.effectiveFilterWidth,d=r.padInfo.top,p=r.padInfo.left,v=er(e,n,t),g=0;g<r.batchSize;++g)for(var m=0;m<r.inChannels;++m)for(var y=0;y<r.outHeight;++y){for(var x=y*s-d,b=x;b<0;)b+=c;for(var w=Math.min(r.inHeight,h+x),C=0;C<r.outWidth;++C){for(var E=C*u-p,R=E;R<0;)R+=l;for(var I=Math.min(r.inWidth,f+E),k=Number.NEGATIVE_INFINITY,S=-1,A=b;A<w;A+=c)for(var T=A-x,D=R;D<I;D+=l){var N=D-E,F=v.get(g,A,D,m);F>k&&(k=F,S=o?a?((g*r.inHeight+A)*r.inWidth+D)*r.inChannels+m:(A*r.inWidth+D)*r.inChannels+m:T*f+N)}i.set(S,g,y,C,m)}}return i}function gf(t,e,n,r){if(\"linear\"===n)return t.linear(e);if(\"relu\"===n)return t.relu(e);if(\"elu\"===n)return t.elu(e);if(\"relu6\"===n)return t.relu6(e);if(\"prelu\"===n)return t.prelu(e,r);throw new Error(\"Activation \"+n+\" has not been implemented for the CPU backend.\")}var mf=function(t){function o(){var e=t.call(this)||this;return e.blockSize=48,e.firstUse=!0,e.data=new ca(e,Lt),e}return e(o,t),o.prototype.write=function(t,e,n){this.firstUse&&(this.firstUse=!1,i().get(\"IS_NODE\")&&dn(\"\\n============================\\nHi there 👋. Looks like you are running TensorFlow.js in Node.js. To speed things up dramatically, install our node backend, which binds to TensorFlow C++, by running npm i @tensorflow/tfjs-node, or npm i @tensorflow/tfjs-node-gpu if you have CUDA. Then call require('@tensorflow/tfjs-node'); (-gpu suffix for CUDA) at the start of your program. Visit https://github.com/tensorflow/tfjs-node for more details.\\n============================\"));var r={};return this.data.set(r,{values:t,dtype:n}),r},o.prototype.move=function(t,e,n,r){this.data.set(t,{values:e,dtype:r})},o.prototype.numDataIds=function(){return this.data.numDataIds()},o.prototype.read=function(t){return n(this,void 0,void 0,(function(){return r(this,(function(e){return[2,this.readSync(t)]}))}))},o.prototype.readSync=function(t){var e=this.data.get(t),n=e.dtype,r=e.complexTensors;return\"complex64\"===n?Aa(this.readSync(r.real.dataId),this.readSync(r.imag.dataId)):this.data.get(t).values},o.prototype.bufferSync=function(t){var e=this.readSync(t.dataId),n=e;if(\"string\"===t.dtype)try{n=e.map((function(t){return ot(t)}))}catch(t){throw new Error(\"Failed to decode encoded string bytes into utf-8\")}return er(t.shape,t.dtype,n)},o.prototype.makeOutput=function(t,e,n){var r=this.write(t,e,n);return Lt.makeTensorFromDataId(r,e,n,this)},o.prototype.disposeData=function(t){if(this.data.has(t)){var e=this.data.get(t).complexTensors;null!=e&&(e.real.dispose(),e.imag.dispose()),this.data.delete(t)}},o.prototype.time=function(t){return n(this,void 0,void 0,(function(){var e;return r(this,(function(n){return e=et(),t(),[2,{kernelMs:et()-e}]}))}))},o.prototype.memory=function(){return{unreliable:!0,reasons:[\"The reported memory is an upper bound. Due to automatic garbage collection, the true allocated memory may be less.\"]}},o.prototype.complex=function(t,e){var n=this.makeOutput(null,t.shape,\"complex64\");return this.data.get(n.dataId).complexTensors={real:Lt.keep(t.clone()),imag:Lt.keep(e.clone())},n},o.prototype.real=function(t){return this.data.get(t.dataId).complexTensors.real.clone()},o.prototype.imag=function(t){return this.data.get(t.dataId).complexTensors.imag.clone()},o.prototype.slice=function(t,e,n){if(df(t,\"slice\"),$o(t.shape,e,n)){var r=Qo(e,t.strides),o=k(n);return Fn(this.readSync(t.dataId).subarray(r,r+o),n,t.dtype)}for(var a=er(n,t.dtype),i=this.bufferSync(t),s=0;s<a.size;++s){var u=a.indexToLoc(s).map((function(t,n){return t+e[n]}));a.values[s]=i.get.apply(i,u)}return a.toTensor()},o.prototype.stridedSlice=function(t,e,n,r){df(t,\"stridedSlice\");var o=jo(e,n,r);if(o.some((function(t){return 0===t})))return Fn([],o);for(var a=er(o,t.dtype),i=this.bufferSync(t),s=0;s<a.size;s++){for(var u=a.indexToLoc(s),c=new Array(u.length),l=0;l<c.length;l++)c[l]=u[l]*r[l]+e[l];a.set.apply(a,[i.get.apply(i,c)].concat(u))}return a.toTensor()},o.prototype.diag=function(t){for(var e=this.readSync(t.dataId),n=er([t.size,t.size],t.dtype),r=n.values,o=0;o<e.length;o++)r[o*t.size+o]=e[o];return n.toTensor()},o.prototype.unstack=function(t,e){for(var n=t.shape[e],r=new Array(t.rank-1),o=0,a=0;a<t.rank;a++)a!==e&&(r[o++]=t.shape[a]);var i=new Array(t.rank).fill(0),s=t.shape.slice();s[e]=1;var u=new Array(n);for(a=0;a<u.length;a++)i[e]=a,u[a]=this.slice(t,i,s).reshape(r);return u},o.prototype.reverse=function(t,e){df(t,\"reverse\");for(var n=er(t.shape,t.dtype),r=this.bufferSync(t),o=function(o){var a=n.indexToLoc(o),i=a.slice();e.forEach((function(e){return i[e]=t.shape[e]-1-i[e]})),n.set.apply(n,[r.get.apply(r,i)].concat(a))},a=0;a<n.size;a++)o(a);return n.toTensor()},o.prototype.concat=function(t,e){var n=this;if(\"complex64\"===t[0].dtype){var r=t.map((function(t){return Dn(t)})),o=t.map((function(t){return Nn(t)}));return Tn(this.concat(r,e),this.concat(o,e))}var a=t.map((function(t){var n=k(t.shape.slice(e));return t.as2D(-1,n)})),i=Sn(a.map((function(t){return t.shape})),1),s=er(i,t[0].dtype).values;if(1===a[0].shape[0]){var u=0;a.forEach((function(t){s.set(n.readSync(t.dataId),u),u+=t.size}))}else{var c=0;a.forEach((function(t){for(var e=n.readSync(t.dataId),r=0,o=0;o<t.shape[0];++o)for(var a=o*i[1]+c,u=0;u<t.shape[1];++u)s[a+u]=e[r++];c+=t.shape[1]}))}var l=Sn(t.map((function(t){return t.shape})),e);return Fn(s,l,t[0].dtype)},o.prototype.neg=function(t){return df(t,\"neg\"),this.multiply(On(-1),t)},o.prototype.add=function(t,e){return\"complex64\"===t.dtype||\"complex64\"===e.dtype?this.broadcastedBinaryComplexOp(t.cast(\"complex64\"),e.cast(\"complex64\"),(function(t,e,n,r){return{real:t+n,imag:e+r}})):this.broadcastedBinaryOp(t,e,Tt(t.dtype,e.dtype),(function(t,e){return t+e}))},o.prototype.addN=function(t){var e=this;df(t,\"addN\");for(var n=t.map((function(t){return e.readSync(t.dataId)})),r=er(t[0].shape,t[0].dtype),o=r.values,a=0;a<t.length;a++)for(var i=n[a],s=0;s<o.length;s++)o[s]+=i[s];return r.toTensor()},o.prototype.softmax=function(t,e){var n=O([e],t.shape),r=this.max(t,n),o=wn(r.shape,n),a=this.subtract(t,r.reshape(o)),i=this.exp(a),s=this.sum(i,n).reshape(o);return Bo(i,s)},o.prototype.subtract=function(t,e){return\"complex64\"===t.dtype||\"complex64\"===e.dtype?this.broadcastedBinaryComplexOp(t.cast(\"complex64\"),e.cast(\"complex64\"),(function(t,e,n,r){return{real:t-n,imag:e-r}})):this.broadcastedBinaryOp(t,e,Tt(t.dtype,e.dtype),(function(t,e){return t-e}))},o.prototype.pow=function(t,e){return df([t,e],\"pow\"),this.broadcastedBinaryOp(t,e,t.dtype,(function(t,e){return Math.pow(t,e)}))},o.prototype.batchMatMul=function(t,e,n,r){df([t,e],\"matMul\");for(var o=n?t.shape[1]:t.shape[2],a=n?t.shape[2]:t.shape[1],i=r?e.shape[1]:e.shape[2],s=t.shape[0],u=this.readSync(t.dataId),c=this.readSync(e.dataId),l=n?[t.strides[0],1,t.strides[1]]:[t.strides[0],t.strides[1],1],h=l[0],f=l[1],d=l[2],p=r?[1,e.strides[1],e.strides[0]]:[e.strides[1],1,e.strides[0]],v=p[0],g=p[1],m=p[2],y=a*i,x=er([s,a,i],t.dtype),b=x.values,w=this.blockSize,C=0;C<s;C++)for(var E=0;E<a;E+=w)for(var R=0;R<i;R+=w)for(var I=0;I<o;I+=w)for(var k=Math.min(E+w,a),S=Math.min(R+w,i),A=Math.min(I+w,o),T=E;T<k;T++)for(var D=R;D<S;D++){for(var N=0,F=I;F<A;F++)N+=u[C*h+T*f+F*d]*c[F*v+D*g+C*m];b[C*y+(T*i+D)]+=N}return x.toTensor()},o.prototype.fusedBatchMatMul=function(t){var e=t.a,n=t.b,r=t.transposeA,o=t.transposeB,a=t.bias,i=t.activation,s=t.preluActivationWeights,u=this.batchMatMul(e,n,r,o);return a&&(u=this.add(u,a)),i&&(u=gf(this,u,i,s)),u},o.prototype.multiply=function(t,e){return\"complex64\"===t.dtype||\"complex64\"===e.dtype?this.broadcastedBinaryComplexOp(t.cast(\"complex64\"),e.cast(\"complex64\"),(function(t,e,n,r){return{real:t*n-e*r,imag:t*r+e*n}})):this.broadcastedBinaryOp(t,e,Tt(t.dtype,e.dtype),(function(t,e){return t*e}))},o.prototype.floorDiv=function(t,e){df([t,e],\"floorDiv\");return this.broadcastedBinaryOp(t,e,\"int32\",(function(t,e){return Math.floor(t/e)}))},o.prototype.sum=function(t,e){df(t,\"sum\"),Cn(\"sum\",e,t.rank);for(var n=bn(t.shape,e),r=n[0],o=n[1],a=Gn(r,Tt(t.dtype,\"int32\")),i=k(o),s=this.readSync(a.dataId),u=this.readSync(t.dataId),c=0;c<s.length;++c){for(var l=c*i,h=0,f=0;f<i;++f)h+=u[l+f];s[c]=h}return a},o.prototype.prod=function(t,e){df(t,\"sum\");for(var n=bn(t.shape,e),r=n[0],o=n[1],a=Gn(r,Tt(t.dtype,\"int32\")),i=k(o),s=this.readSync(a.dataId),u=this.readSync(t.dataId),c=0;c<s.length;++c){for(var l=c*i,h=1,f=0;f<i;++f)h*=u[l+f];s[c]=h}return a},o.prototype.unsortedSegmentSum=function(t,e,n){df(t,\"unsortedSegmentSum\");for(var r=[],o=t.rank-e.rank,a=0;a<o;++a)e=e.expandDims(a+1);for(a=0;a<n;++a){var i=On(a,\"int32\"),s=Kc(i,e).asType(\"float32\").mul(t).sum(0);r.push(s)}return hr(r)},o.prototype.argMin=function(t,e){df(t,\"argMin\");var n=[e];Cn(\"argMin\",n,t.rank);for(var r=bn(t.shape,n),o=r[0],a=r[1],i=Gn(o,\"int32\"),s=k(a),u=this.readSync(i.dataId),c=this.readSync(t.dataId),l=0;l<u.length;++l){for(var h=l*s,f=c[h],d=0,p=0;p<s;++p){var v=c[h+p];v<f&&(f=v,d=p)}u[l]=d}return i},o.prototype.argMax=function(t,e){df(t,\"argMax\");var n=[e];Cn(\"argMax\",n,t.rank);for(var r=bn(t.shape,n),o=r[0],a=r[1],i=Gn(o,\"int32\"),s=k(a),u=this.readSync(i.dataId),c=this.readSync(t.dataId),l=0;l<u.length;++l){for(var h=l*s,f=c[h],d=0,p=0;p<s;++p){var v=c[h+p];v>f&&(f=v,d=p)}u[l]=d}return i},o.prototype.cumsum=function(t,e,n,r){if(df(t,\"cumsum\"),e!==t.rank-1)throw new Error(\"backend.cumsum in CPU expects an inner-most axis=\"+(t.rank-1)+\" but got axis=\"+e);for(var o=Tt(t.dtype,\"int32\"),a=Gn(t.shape,o),i=this.readSync(a.dataId),s=this.readSync(t.dataId),u=t.shape[t.rank-1],c=r?function(t,e){return t+u-e-1}:function(t,e){return t+e},l=0;l<s.length;l+=u)for(var h=0;h<u;h++){var f=c(l,h);if(0===h)i[f]=n?0:s[f];else{var d=c(l,h-1);i[f]=n?s[d]+i[d]:s[f]+i[d]}}return a},o.prototype.equal=function(t,e){return df([t,e],\"equal\"),this.broadcastedBinaryOp(t,e,\"bool\",(function(t,e){return t===e?1:0}))},o.prototype.notEqual=function(t,e){return df([t,e],\"notEqual\"),this.broadcastedBinaryOp(t,e,\"bool\",(function(t,e){return t!==e?1:0}))},o.prototype.less=function(t,e){return df([t,e],\"less\"),this.broadcastedBinaryOp(t,e,\"bool\",(function(t,e){return t<e?1:0}))},o.prototype.lessEqual=function(t,e){return df([t,e],\"lessEqual\"),this.broadcastedBinaryOp(t,e,\"bool\",(function(t,e){return t<=e?1:0}))},o.prototype.greater=function(t,e){return df([t,e],\"greater\"),this.broadcastedBinaryOp(t,e,\"bool\",(function(t,e){return t>e?1:0}))},o.prototype.greaterEqual=function(t,e){return df([t,e],\"greaterEqual\"),this.broadcastedBinaryOp(t,e,\"bool\",(function(t,e){return t>=e?1:0}))},o.prototype.logicalNot=function(t){df(t,\"logicalNot\");for(var e=this.readSync(t.dataId),n=new Uint8Array(e.length),r=0;r<e.length;++r)n[r]=e[r]?0:1;return this.makeOutput(n,t.shape,\"bool\")},o.prototype.logicalAnd=function(t,e){return df([t,e],\"logicalAnd\"),this.broadcastedBinaryOp(t,e,\"bool\",(function(t,e){return t&&e}))},o.prototype.logicalOr=function(t,e){return df([t,e],\"logicalOr\"),this.broadcastedBinaryOp(t,e,\"bool\",(function(t,e){return t||e}))},o.prototype.select=function(t,e,n){df([t,e,n],\"select\");for(var r=this.readSync(t.dataId),o=this.readSync(e.dataId),a=this.readSync(n.dataId),i=Gn(e.shape,Tt(e.dtype,n.dtype)),s=this.readSync(i.dataId),u=0,c=0===t.rank||t.rank>1||1===e.rank?1:k(e.shape.slice(1)),l=0;l<r.length;l++)for(var h=0;h<c;h++)1===r[l]?s[u++]=o[l]:s[u++]=a[l];return i},o.prototype.where=function(t){df([t],\"where\");var e=this.readSync(t.dataId);return Ga(t.shape,e)},o.prototype.topk=function(t,e,n){return df(t,\"topk\"),za(this.readSync(t.dataId),t.shape,t.dtype,e)},o.prototype.min=function(t,e){df(t,\"min\"),Cn(\"min\",e,t.rank);for(var n=bn(t.shape,e),r=n[0],o=n[1],a=Gn(r,t.dtype),i=k(o),s=this.readSync(a.dataId),u=this.readSync(t.dataId),c=0;c<s.length;++c){for(var l=c*i,h=u[l],f=0;f<i;++f){var d=u[l+f];d<h&&(h=d)}s[c]=h}return a},o.prototype.minimum=function(t,e){return df([t,e],\"minimum\"),this.broadcastedBinaryOp(t,e,t.dtype,(function(t,e){return Math.min(t,e)}))},o.prototype.mod=function(t,e){return df([t,e],\"mod\"),this.broadcastedBinaryOp(t,e,t.dtype,(function(t,e){var n=t%e;return t<0&&e<0||t>=0&&e>=0?n:(n+e)%e}))},o.prototype.max=function(t,e){df(t,\"max\"),Cn(\"max\",e,t.rank);for(var n=bn(t.shape,e),r=n[0],o=n[1],a=Gn(r,t.dtype),i=k(o),s=this.readSync(a.dataId),u=this.readSync(t.dataId),c=0;c<s.length;++c){for(var l=c*i,h=u[l],f=0;f<i;++f){var d=u[l+f];d>h&&(h=d)}s[c]=h}return a},o.prototype.maximum=function(t,e){return df([t,e],\"maximum\"),this.broadcastedBinaryOp(t,e,t.dtype,(function(t,e){return Math.max(t,e)}))},o.prototype.all=function(t,e){df(t,\"all\"),Cn(\"all\",e,t.rank);for(var n=bn(t.shape,e),r=n[0],o=n[1],a=Gn(r,t.dtype),i=k(o),s=this.readSync(a.dataId),u=this.readSync(t.dataId),c=0;c<s.length;++c){for(var l=c*i,h=u[l],f=0;f<i;++f){var d=u[l+f];h=h&&d}s[c]=h}return a},o.prototype.any=function(t,e){df(t,\"any\"),Cn(\"any\",e,t.rank);for(var n=bn(t.shape,e),r=n[0],o=n[1],a=Gn(r,t.dtype),i=k(o),s=this.readSync(a.dataId),u=this.readSync(t.dataId),c=0;c<s.length;++c){for(var l=c*i,h=u[l],f=0;f<i;++f){var d=u[l+f];h=h||d}s[c]=h}return a},o.prototype.squaredDifference=function(t,e){return df([t,e],\"squaredDifference\"),this.broadcastedBinaryOp(t,e,t.dtype,(function(t,e){var n=t-e;return n*n}))},o.prototype.ceil=function(t){df(t,\"ceil\");for(var e=this.readSync(t.dataId),n=new Float32Array(e.length),r=0;r<e.length;++r)n[r]=Math.ceil(e[r]);return this.makeOutput(n,t.shape,\"float32\")},o.prototype.floor=function(t){df(t,\"floor\");for(var e=this.readSync(t.dataId),n=new Float32Array(e.length),r=0;r<e.length;++r)n[r]=Math.floor(e[r]);return this.makeOutput(n,t.shape,\"float32\")},o.prototype.sign=function(t){df(t,\"x\");for(var e=this.readSync(t.dataId),n=new Float32Array(e.length),r=0;r<e.length;++r)e[r]<0?n[r]=-1:e[r]>0?n[r]=1:n[r]=0;return this.makeOutput(n,t.shape,\"float32\")},o.prototype.isNaN=function(t){df(t,\"x\");for(var e=this.readSync(t.dataId),n=new Uint8Array(e.length),r=0;r<e.length;++r)Number.isNaN(e[r])&&(n[r]=1);return this.makeOutput(n,t.shape,\"bool\")},o.prototype.isInf=function(t){df(t,\"x\");for(var e=this.readSync(t.dataId),n=new Uint8Array(e.length),r=0;r<e.length;++r)Math.abs(e[r])===1/0&&(n[r]=1);return this.makeOutput(n,t.shape,\"bool\")},o.prototype.isFinite=function(t){df(t,\"x\");for(var e=this.readSync(t.dataId),n=new Uint8Array(e.length),r=0;r<e.length;++r)Number.isFinite(e[r])&&(n[r]=1);return this.makeOutput(n,t.shape,\"bool\")},o.prototype.round=function(t){df(t,\"round\");for(var e=this.readSync(t.dataId),n=new Float32Array(e.length),r=0;r<e.length;++r){var o=Math.floor(e[r]);e[r]-o<.5?n[r]=Math.floor(e[r]):e[r]-o>.5?n[r]=Math.ceil(e[r]):n[r]=o%2==0?o:o+1}return this.makeOutput(n,t.shape,\"float32\")},o.prototype.exp=function(t){df(t,\"exp\");for(var e=this.readSync(t.dataId),n=new Float32Array(e.length),r=0;r<e.length;++r)n[r]=Math.exp(e[r]);return this.makeOutput(n,t.shape,\"float32\")},o.prototype.expm1=function(t){df(t,\"expm1\");for(var e=this.readSync(t.dataId),n=new Float32Array(e.length),r=0;r<e.length;++r)n[r]=Math.expm1(e[r]);return this.makeOutput(n,t.shape,\"float32\")},o.prototype.log=function(t){df(t,\"log\");for(var e=this.readSync(t.dataId),n=new Float32Array(e.length),r=0;r<e.length;++r){var o=e[r];n[r]=Math.log(o)}return this.makeOutput(n,t.shape,\"float32\")},o.prototype.log1p=function(t){df(t,\"log1p\");for(var e=this.readSync(t.dataId),n=new Float32Array(e.length),r=0;r<e.length;++r){var o=e[r];n[r]=Math.log1p(o)}return this.makeOutput(n,t.shape,\"float32\")},o.prototype.sqrt=function(t){df(t,\"sqrt\");for(var e=this.readSync(t.dataId),n=new Float32Array(e.length),r=0;r<e.length;++r){var o=e[r];n[r]=Math.sqrt(o)}return this.makeOutput(n,t.shape,\"float32\")},o.prototype.rsqrt=function(t){df(t,\"rsqrt\");for(var e=this.readSync(t.dataId),n=new Float32Array(e.length),r=0;r<e.length;++r){var o=e[r];n[r]=1/Math.sqrt(o)}return this.makeOutput(n,t.shape,\"float32\")},o.prototype.reciprocal=function(t){df(t,\"reciprocal\");for(var e=this.readSync(t.dataId),n=new Float32Array(e.length),r=0;r<e.length;++r)n[r]=1/e[r];return this.makeOutput(n,t.shape,\"float32\")},o.prototype.linear=function(t){return t},o.prototype.relu=function(t){df(t,\"relu\");for(var e=Gn(t.shape,t.dtype),n=this.readSync(e.dataId),r=this.readSync(t.dataId),o=0;o<r.length;++o)n[o]=Math.max(0,r[o]);return e},o.prototype.relu6=function(t){df(t,\"relu\");for(var e=Gn(t.shape,t.dtype),n=this.readSync(e.dataId),r=this.readSync(t.dataId),o=0;o<r.length;++o)n[o]=Math.min(Math.max(0,r[o]),6);return e},o.prototype.prelu=function(t,e){return df([t,e],\"prelu\"),this.broadcastedBinaryOp(t,e,t.dtype,(function(t,e){return t<0?e*t:t}))},o.prototype.elu=function(t){df(t,\"elu\");for(var e=new Float32Array(t.size),n=this.readSync(t.dataId),r=0;r<n.length;++r){var o=n[r];e[r]=o>=0?o:Math.exp(o)-1}return this.makeOutput(e,t.shape,\"float32\")},o.prototype.eluDer=function(t,e){df([t,e],\"eluDer\");for(var n=new Float32Array(e.size),r=this.readSync(e.dataId),o=this.readSync(t.dataId),a=0;a<r.length;++a){var i=r[a];n[a]=i>=1?o[a]:o[a]*(i+1)}return this.makeOutput(n,e.shape,\"float32\")},o.prototype.selu=function(t){df(t,\"selu\");for(var e=su,n=uu,r=new Float32Array(t.size),o=this.readSync(t.dataId),a=0;a<o.length;++a){var i=o[a];r[a]=i>=0?n*i:e*(Math.exp(i)-1)}return this.makeOutput(r,t.shape,\"float32\")},o.prototype.clip=function(t,e,n){df(t,\"clip\");for(var r=new Float32Array(t.size),o=this.readSync(t.dataId),a=0;a<o.length;++a){var i=o[a];r[a]=i>n?n:i<e?e:i}return this.makeOutput(r,t.shape,\"float32\")},o.prototype.abs=function(t){for(var e=new Float32Array(t.size),n=this.readSync(t.dataId),r=0;r<n.length;++r)e[r]=Math.abs(n[r]);return this.makeOutput(e,t.shape,\"float32\")},o.prototype.complexAbs=function(t){for(var e=new Float32Array(t.size),n=this.readSync(t.dataId),r=0;r<t.size;++r){var o=n[2*r],a=n[2*r+1];e[r]=Math.hypot(o,a)}return this.makeOutput(e,t.shape,\"float32\")},o.prototype.int=function(t){df(t,\"int\");for(var e=new Int32Array(t.size),n=this.readSync(t.dataId),r=0;r<n.length;++r)e[r]=n[r];return this.makeOutput(e,t.shape,\"int32\")},o.prototype.sigmoid=function(t){df(t,\"sigmoid\");for(var e=new Float32Array(t.size),n=this.readSync(t.dataId),r=0;r<n.length;++r)e[r]=1/(1+Math.exp(-n[r]));return this.makeOutput(e,t.shape,\"float32\")},o.prototype.softplus=function(t){df(t,\"softplus\");for(var e=Math.log(1.1920928955078125e-7)+2,n=new Float32Array(t.size),r=this.readSync(t.dataId),o=0;o<r.length;++o){var a=r[o]>-e,i=r[o]<e,s=Math.exp(r[o]),u=void 0;u=i?s:a?r[o]:Math.log(1+s),n[o]=u}return this.makeOutput(n,t.shape,\"float32\")},o.prototype.sin=function(t){df(t,\"sin\");for(var e=new Float32Array(t.size),n=this.readSync(t.dataId),r=0;r<n.length;++r)e[r]=Math.sin(n[r]);return this.makeOutput(e,t.shape,\"float32\")},o.prototype.cos=function(t){df(t,\"cos\");for(var e=new Float32Array(t.size),n=this.readSync(t.dataId),r=0;r<n.length;++r)e[r]=Math.cos(n[r]);return this.makeOutput(e,t.shape,\"float32\")},o.prototype.tan=function(t){df(t,\"tan\");for(var e=new Float32Array(t.size),n=this.readSync(t.dataId),r=0;r<n.length;++r)e[r]=Math.tan(n[r]);return this.makeOutput(e,t.shape,\"float32\")},o.prototype.asin=function(t){df(t,\"asin\");for(var e=new Float32Array(t.size),n=this.readSync(t.dataId),r=0;r<n.length;++r)e[r]=Math.asin(n[r]);return this.makeOutput(e,t.shape,\"float32\")},o.prototype.acos=function(t){df(t,\"acos\");for(var e=new Float32Array(t.size),n=this.readSync(t.dataId),r=0;r<n.length;++r)e[r]=Math.acos(n[r]);return this.makeOutput(e,t.shape,\"float32\")},o.prototype.atan=function(t){df(t,\"atan\");for(var e=new Float32Array(t.size),n=this.readSync(t.dataId),r=0;r<n.length;++r)e[r]=Math.atan(n[r]);return this.makeOutput(e,t.shape,\"float32\")},o.prototype.atan2=function(t,e){return df([t,e],\"atan2\"),this.broadcastedBinaryOp(t,e,t.dtype,(function(t,e){return Math.atan2(t,e)}))},o.prototype.sinh=function(t){df(t,\"sinh\");for(var e=new Float32Array(t.size),n=this.readSync(t.dataId),r=0;r<n.length;++r)e[r]=Math.sinh(n[r]);return this.makeOutput(e,t.shape,\"float32\")},o.prototype.cosh=function(t){df(t,\"cosh\");for(var e=new Float32Array(t.size),n=this.readSync(t.dataId),r=0;r<n.length;++r)e[r]=Math.cosh(n[r]);return this.makeOutput(e,t.shape,\"float32\")},o.prototype.tanh=function(t){df(t,\"tanh\");for(var e=new Float32Array(t.size),n=this.readSync(t.dataId),r=0;r<n.length;++r)e[r]=T(n[r]);return this.makeOutput(e,t.shape,\"float32\")},o.prototype.asinh=function(t){df(t,\"asinh\");for(var e=new Float32Array(t.size),n=this.readSync(t.dataId),r=0;r<n.length;++r)e[r]=Math.asinh(n[r]);return this.makeOutput(e,t.shape,\"float32\")},o.prototype.acosh=function(t){df(t,\"acosh\");for(var e=new Float32Array(t.size),n=this.readSync(t.dataId),r=0;r<n.length;++r)e[r]=Math.acosh(n[r]);return this.makeOutput(e,t.shape,\"float32\")},o.prototype.atanh=function(t){df(t,\"atanh\");for(var e=new Float32Array(t.size),n=this.readSync(t.dataId),r=0;r<n.length;++r)e[r]=Math.atanh(n[r]);return this.makeOutput(e,t.shape,\"float32\")},o.prototype.erf=function(t){df(t,\"erf\");for(var e=new Float32Array(t.size),n=this.readSync(t.dataId),r=0;r<n.length;++r){var o=Math.sign(n[r]),a=Math.abs(n[r]),i=1/(1+.3275911*a);e[r]=o*(1-((((1.061405429*i-1.453152027)*i+1.421413741)*i-.284496736)*i+.254829592)*i*Math.exp(-a*a))}return this.makeOutput(e,t.shape,\"float32\")},o.prototype.step=function(t,e){void 0===e&&(e=0),df(t,\"step\");for(var n=new Float32Array(t.size),r=this.readSync(t.dataId),o=0;o<r.length;++o){var a=r[o];isNaN(a)?n[o]=NaN:n[o]=a>0?1:e}return this.makeOutput(n,t.shape,\"float32\")},o.prototype.fusedConv2d=function(t){var e=t.input,n=t.filter,r=t.convInfo,o=t.bias,a=t.activation,i=t.preluActivationWeights,s=this.conv2d(e,n,r);return o&&(s=this.add(s,o)),a&&(s=gf(this,s,a,i)),s},o.prototype.conv2d=function(t,e,n){df([t,e],\"conv2d\");for(var r=n.filterHeight,o=n.filterWidth,a=n.dilationHeight,i=n.dilationWidth,s=n.padInfo.left,u=n.padInfo.top,c=\"channelsLast\"===n.dataFormat,l=er(n.outShape,t.dtype),h=t.strides[0],f=c?t.strides[1]:t.strides[2],d=c?t.strides[2]:1,p=c?1:t.strides[1],v=l.strides[0],g=c?l.strides[1]:l.strides[2],m=c?l.strides[2]:1,y=c?1:l.strides[1],x=this.readSync(t.dataId),b=this.readSync(e.dataId),w=l.values,C=0;C<n.batchSize;++C)for(var E=C*h,R=C*v,I=0;I<n.outHeight;++I)for(var k=R+I*g,S=I*n.strideHeight-u,A=0;A<r;A++){var T=S+A*a;if(!(T<0||T>=n.inHeight))for(var D=A*e.strides[0],N=E+T*f,F=0;F<n.outWidth;++F)for(var _=k+F*m,O=F*n.strideWidth-s,M=0;M<o;M++){var B=O+M*i;if(!(B<0||B>=n.inWidth))for(var P=N+B*d,L=D+M*e.strides[1],W=0;W<n.inChannels;++W){for(var U=x[P+W*p],V=0;V<n.outChannels;++V)w[_+V*y]+=U*b[L+V];L+=n.outChannels}}}return l.toTensor()},o.prototype.conv3d=function(t,e,n){for(var r=n.filterDepth,o=n.filterHeight,a=n.filterWidth,i=n.dilationDepth,s=n.dilationHeight,u=n.dilationWidth,c=n.padInfo.front,l=n.padInfo.left,h=n.padInfo.top,f=er(n.outShape,t.dtype),d=this.readSync(t.dataId),p=this.readSync(e.dataId),v=f.values,g=0;g<n.batchSize;++g)for(var m=g*t.strides[0],y=g*f.strides[0],x=0;x<n.outDepth;++x)for(var b=y+x*f.strides[1],w=x*n.strideDepth-c,C=0;C<r;C++){var E=w+C*i;if(!(E<0||E>=n.inDepth))for(var R=C*e.strides[0],I=m+E*t.strides[1],k=0;k<n.outHeight;++k)for(var S=b+k*f.strides[2],A=k*n.strideHeight-h,T=0;T<o;T++){var D=A+T*s;if(!(D<0||D>=n.inHeight))for(var N=R+T*e.strides[1],F=I+D*t.strides[2],_=0;_<n.outWidth;++_)for(var O=S+_*n.outChannels,M=_*n.strideWidth-l,B=0;B<a;B++){var P=M+B*u;if(!(P<0||P>=n.inWidth))for(var L=N+B*e.strides[2],W=F+P*n.inChannels,U=L,V=0;V<n.inChannels;++V){for(var z=d[W+V],G=0;G<n.outChannels;++G)v[O+G]+=z*p[U+G];U+=n.outChannels}}}}return f.toTensor()},o.prototype.conv2dDerInput=function(t,e,n){df([t,e],\"conv2dDerInput\");for(var r=er(n.inShape,\"float32\"),o=r.values,a=this.readSync(t.dataId),i=this.readSync(e.dataId),s=e.strides,u=s[0],c=s[1],l=s[2],h=n.batchSize,f=n.filterHeight,d=n.filterWidth,p=n.inChannels,v=n.inHeight,g=n.inWidth,m=n.outChannels,y=n.outHeight,x=n.outWidth,b=n.strideHeight,w=n.strideWidth,C=n.dataFormat,E=f-1-n.padInfo.top,R=d-1-n.padInfo.left,I=\"channelsLast\"===C,k=r.strides[0],S=I?r.strides[1]:r.strides[2],A=I?r.strides[2]:1,T=I?1:r.strides[1],D=t.strides[0],N=I?t.strides[1]:t.strides[2],F=I?t.strides[2]:1,_=I?1:t.strides[1],O=0;O<h;++O)for(var M=0;M<p;++M)for(var B=0;B<v;++B)for(var P=B-E,L=Math.max(0,Math.ceil(P/b)),W=Math.min(y,(f+P)/b),U=0;U<g;++U){for(var V=U-R,z=Math.max(0,Math.ceil(V/w)),G=Math.min(x,(d+V)/w),H=0,q=L;q<W;++q)for(var K=q*b-P,j=z;j<G;++j)for(var X=D*O+N*q+F*j,Y=u*(f-1-K)+c*(d-1-(j*w-V))+l*M,$=0;$<m;++$){H+=a[X+_*$]*i[Y+$]}o[k*O+S*B+A*U+T*M]=H}return r.toTensor()},o.prototype.conv3dDerInput=function(t,e,n){for(var r=er(n.inShape,\"float32\"),o=r.values,a=r.strides,i=a[0],s=a[1],u=a[2],c=a[3],l=this.readSync(t.dataId),h=t.strides,f=h[0],d=h[1],p=h[2],v=h[3],g=this.readSync(e.dataId),m=e.strides,y=m[0],x=m[1],b=m[2],w=m[3],C=n.batchSize,E=n.filterDepth,R=n.filterHeight,I=n.filterWidth,k=n.inChannels,S=n.inDepth,A=n.inHeight,T=n.inWidth,D=n.outChannels,N=n.outDepth,F=n.outHeight,_=n.outWidth,O=n.strideDepth,M=n.strideHeight,B=n.strideWidth,P=E-1-n.padInfo.front,L=R-1-n.padInfo.top,W=I-1-n.padInfo.left,U=0;U<C;++U)for(var V=0;V<k;++V)for(var z=0;z<S;++z)for(var G=z-P,H=Math.max(0,Math.ceil(G/O)),q=Math.min(N,(E+G)/O),K=0;K<A;++K)for(var j=K-L,X=Math.max(0,Math.ceil(j/M)),Y=Math.min(F,(R+j)/M),$=0;$<T;++$){for(var Q=$-W,J=Math.max(0,Math.ceil(Q/B)),Z=Math.min(_,(I+Q)/B),tt=0,et=H;et<q;++et)for(var nt=et*O-G,rt=X;rt<Y;++rt)for(var ot=rt*M-j,at=J;at<Z;++at)for(var it=f*U+d*et+p*rt+v*at,st=y*(E-1-nt)+x*(R-1-ot)+b*(I-1-(at*B-Q))+w*V,ut=0;ut<D;++ut){tt+=l[it+ut]*g[st+ut]}o[i*U+s*z+u*K+c*$+V]=tt}return r.toTensor()},o.prototype.conv2dDerFilter=function(t,e,n){df([t,e],\"conv2dDerFilter\");for(var r=n.strideHeight,o=n.strideWidth,a=n.filterHeight,i=n.filterWidth,s=\"channelsLast\"===n.dataFormat,u=er(n.filterShape,\"float32\"),c=n.padInfo.left,l=n.padInfo.top,h=this.bufferSync(t),f=this.bufferSync(e),d=0;d<a;++d)for(var p=Math.max(0,Math.ceil((l-d)/r)),v=Math.min(n.outHeight,(n.inHeight+l-d)/r),g=0;g<i;++g)for(var m=Math.max(0,Math.ceil((c-g)/o)),y=Math.min(n.outWidth,(n.inWidth+c-g)/o),x=0;x<n.inChannels;++x)for(var b=0;b<n.outChannels;++b){for(var w=0,C=0;C<n.batchSize;++C)for(var E=p;E<v;++E)for(var R=d+E*r-l,I=m;I<y;++I){var k=g+I*o-c;w+=s?h.get(C,R,k,x)*f.get(C,E,I,b):h.get(C,x,R,k)*f.get(C,b,E,I)}u.set(w,d,g,x,b)}return u.toTensor()},o.prototype.conv3dDerFilter=function(t,e,n){for(var r=n.strideDepth,o=n.strideHeight,a=n.strideWidth,i=n.filterDepth,s=n.filterHeight,u=n.filterWidth,c=er(n.filterShape,\"float32\"),l=c.values,h=c.strides,f=h[0],d=h[1],p=h[2],v=h[3],g=this.readSync(e.dataId),m=e.strides,y=m[0],x=m[1],b=m[2],w=m[3],C=this.readSync(t.dataId),E=t.strides,R=E[0],I=E[1],k=E[2],S=E[3],A=n.padInfo.front,T=n.padInfo.left,D=n.padInfo.top,N=0;N<i;++N)for(var F=Math.max(0,Math.ceil((A-N)/r)),_=Math.min(n.outDepth,(n.inDepth+A-N)/r),O=N*f,M=0;M<s;++M)for(var B=Math.max(0,Math.ceil((D-M)/o)),P=Math.min(n.outHeight,(n.inHeight+D-M)/o),L=M*d+O,W=0;W<u;++W)for(var U=Math.max(0,Math.ceil((T-W)/a)),V=Math.min(n.outWidth,(n.inWidth+T-W)/a),z=W*p+L,G=0;G<n.inChannels;++G)for(var H=G*v+z,q=0;q<n.outChannels;++q){for(var K=0,j=0;j<n.batchSize;++j)for(var X=j*R,Y=j*y,$=F;$<_;++$)for(var Q=(N+$*r-A)*I+X,J=$*x+Y,Z=B;Z<P;++Z)for(var tt=(M+Z*o-D)*k+Q,et=Z*b+J,nt=U;nt<V;++nt){var rt=nt*w+et;K+=C[(W+nt*a-T)*S+tt+G]*g[rt+q]}l[H+q]=K}return c.toTensor()},o.prototype.fusedDepthwiseConv2D=function(t){var e=t.input,n=t.filter,r=t.convInfo,o=t.bias,a=t.activation,i=t.preluActivationWeights,s=this.depthwiseConv2D(e,n,r);return o&&(s=this.add(s,o)),a&&(s=gf(this,s,a,i)),s},o.prototype.depthwiseConv2D=function(t,e,n){df([t,e],\"depthwiseConv2D\");for(var r=n.filterHeight,o=n.filterWidth,a=n.dilationHeight,i=n.dilationWidth,s=n.padInfo.left,u=n.padInfo.top,c=n.outChannels/n.inChannels,l=er(n.outShape,t.dtype),h=this.readSync(t.dataId),f=this.readSync(e.dataId),d=l.values,p=0;p<n.batchSize;++p)for(var v=p*t.strides[0],g=p*l.strides[0],m=0;m<n.outHeight;++m)for(var y=g+m*l.strides[1],x=m*n.strideHeight-s,b=0;b<r;++b){var w=x+b*a;if(!(w<0||w>=n.inHeight))for(var C=b*e.strides[0],E=v+w*t.strides[1],R=0;R<n.outWidth;++R)for(var I=y+R*l.strides[2],k=R*n.strideWidth-u,S=0;S<o;++S){var A=k+S*i;if(!(A<0||A>=n.inWidth))for(var T=C+S*e.strides[1],D=E+A*n.inChannels,N=I,F=T,_=0;_<n.inChannels;++_){for(var O=h[D+_],M=0;M<c;++M)d[N+M]+=O*f[F+M];N+=c,F+=c}}}return l.toTensor()},o.prototype.depthwiseConv2DDerInput=function(t,e,n){df([t,e],\"depthwiseConv2DDerInput\");for(var r=er(n.inShape,\"float32\"),o=r.values,a=r.strides,i=a[0],s=a[1],u=a[2],c=this.readSync(t.dataId),l=t.strides,h=l[0],f=l[1],d=l[2],p=this.readSync(e.dataId),v=e.strides,g=v[0],m=v[1],y=v[2],x=n.batchSize,b=n.filterHeight,w=n.filterWidth,C=n.inChannels,E=n.inHeight,R=n.inWidth,I=n.outChannels,k=n.outHeight,S=n.outWidth,A=n.strideHeight,T=n.strideWidth,D=b-1-n.padInfo.top,N=w-1-n.padInfo.left,F=I/C,_=0;_<x;++_)for(var O=0;O<C;++O)for(var M=0;M<E;++M)for(var B=M-D,P=Math.max(0,Math.ceil(B/A)),L=Math.min(k,(b+B)/A),W=0;W<R;++W){for(var U=W-N,V=Math.max(0,Math.ceil(U/T)),z=Math.min(S,(w+U)/T),G=0,H=P;H<L;++H)for(var q=H*A-B,K=V;K<z;++K)for(var j=h*_+f*H+d*K,X=g*(b-1-q)+m*(w-1-(K*T-U))+y*O,Y=0;Y<F;++Y){G+=c[j+(O*F+Y)]*p[X+Y]}o[i*_+s*M+u*W+O]=G}return r.toTensor()},o.prototype.depthwiseConv2DDerFilter=function(t,e,n){df([t,e],\"depthwiseConv2DDerFilter\");for(var r=n.strideHeight,o=n.strideWidth,a=n.filterHeight,i=n.filterWidth,s=er(n.filterShape,\"float32\"),u=n.padInfo.left,c=n.padInfo.top,l=n.outChannels/n.inChannels,h=this.bufferSync(t),f=this.bufferSync(e),d=0;d<a;++d)for(var p=Math.max(0,Math.ceil((c-d)/r)),v=Math.min(n.outHeight,(n.inHeight+c-d)/r),g=0;g<i;++g)for(var m=Math.max(0,Math.ceil((u-g)/o)),y=Math.min(n.outWidth,(n.inWidth+u-g)/o),x=0;x<n.outChannels;++x){for(var b=Math.trunc(x/l),w=x%l,C=0,E=0;E<n.batchSize;++E)for(var R=p;R<v;++R)for(var I=d+R*r-c,k=m;k<y;++k){var S=g+k*o-u;C+=h.get(E,I,S,b)*f.get(E,R,k,x)}s.set(C,d,g,b,w)}return s.toTensor()},o.prototype.tile=function(t,e){return df(t,\"tile\"),Va(this.bufferSync(t),e)},o.prototype.pad=function(t,e,n){df(t,\"pad\");var r=e.map((function(e,n){return e[0]+t.shape[n]+e[1]})),o=e.map((function(t){return t[0]})),a=this.bufferSync(t),i=er(r,t.dtype);0!==n&&i.values.fill(n);for(var s=0;s<t.size;s++){var u=a.indexToLoc(s),c=u.map((function(t,e){return t+o[e]}));i.set.apply(i,[a.get.apply(a,u)].concat(c))}return i.toTensor()},o.prototype.gather=function(t,e,n){df([t,e],\"gather\");var r=t.shape.slice(),o=this.readSync(e.dataId);r[n]=o.length;for(var a=er(r,t.dtype),i=this.bufferSync(t),s=0;s<a.size;++s){var u=a.indexToLoc(s),c=u.slice();c[n]=o[u[n]];var l=i.locToIndex(c);a.values[s]=i.values[l]}return a.toTensor()},o.prototype.batchToSpaceND=function(t,e,n){df([t],\"batchToSpaceND\");var r=e.reduce((function(t,e){return t*e})),o=pr(t.shape,e,r),a=vr(o.length,e.length),i=gr(t.shape,e,r),s=mr(n,e.length),u=yr(i,n,e.length);return ua(t.reshape(o),a).reshape(i).slice(s,u)},o.prototype.spaceToBatchND=function(t,e,n){df([t],\"spaceToBatchND\");var r=e.reduce((function(t,e){return t*e})),o=[[0,0]];o.push.apply(o,n);for(var a=1+e.length;a<t.shape.length;++a)o.push([0,0]);var i=t.pad(o),s=pr(i.shape,e,r,!1),u=vr(s.length,e.length,!1),c=gr(i.shape,e,r,!1);return ua(i.reshape(s),u).reshape(c)},o.prototype.maxPool=function(t,e){return df(t,\"maxPool\"),pf(this.readSync(t.dataId),t.shape,t.dtype,t.strides,e,\"max\").toTensor()},o.prototype.maxPoolBackprop=function(t,e,n,r){df([e,n],\"maxPoolBackprop\");for(var o=this.readSync(e.dataId),a=er(r.outShape,e.dtype,vf(o,e.shape,e.dtype,r).values),i=r.strideHeight,s=r.strideWidth,u=r.dilationHeight,c=r.dilationWidth,l=r.effectiveFilterHeight,h=r.effectiveFilterWidth,f=h-1-r.padInfo.left,d=l-1-r.padInfo.top,p=er(e.shape,\"float32\"),v=this.bufferSync(t),g=0;g<r.batchSize;++g)for(var m=0;m<r.inChannels;++m)for(var y=0;y<r.inHeight;++y)for(var x=0;x<r.inWidth;++x){for(var b=y-d,w=x-f,C=0,E=0;E<l;E+=u){var R=(b+E)/i;if(!(R<0||R>=r.outHeight||Math.floor(R)!==R))for(var I=0;I<h;I+=c){var k=(w+I)/s;if(!(k<0||k>=r.outWidth||Math.floor(k)!==k)){var S=l*h-1-a.get(g,R,k,m)===E*h+I?1:0;if(0!==S)C+=v.get(g,R,k,m)*S}}}p.set(C,g,y,x,m)}return p.toTensor()},o.prototype.avgPoolBackprop=function(t,e,n){df([t,e],\"avgPoolBackprop\");for(var r=n.strideHeight,o=n.strideWidth,a=n.filterHeight,i=n.filterWidth,s=n.dilationHeight,u=n.dilationWidth,c=n.effectiveFilterHeight,l=n.effectiveFilterWidth,h=l-1-n.padInfo.left,f=c-1-n.padInfo.top,d=er(e.shape,\"float32\"),p=1/(a*i),v=this.bufferSync(t),g=0;g<n.batchSize;++g)for(var m=0;m<n.inChannels;++m)for(var y=0;y<n.inHeight;++y)for(var x=0;x<n.inWidth;++x){for(var b=y-f,w=x-h,C=0,E=0;E<c;E+=s){var R=(b+E)/r;if(!(R<0||R>=n.outHeight||Math.floor(R)!==R))for(var I=0;I<l;I+=u){var k=(w+I)/o;if(!(k<0||k>=n.outWidth||Math.floor(k)!==k))C+=v.get(g,R,k,m)}}d.set(C*p,g,y,x,m)}return d.toTensor()},o.prototype.pool3d=function(t,e,n){df(t,\"pool3d\");for(var r=e.strideDepth,o=e.strideHeight,a=e.strideWidth,i=e.dilationDepth,s=e.dilationHeight,u=e.dilationWidth,c=e.effectiveFilterDepth,l=e.effectiveFilterHeight,h=e.effectiveFilterWidth,f=e.padInfo.front,d=e.padInfo.top,p=e.padInfo.left,v=\"max\"===n?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,g=this.readSync(t.dataId),m=er(e.outShape,t.dtype),y=m.values,x=e.outShape[1]*e.outShape[2]*e.outShape[3]*e.outShape[4],b=e.outShape[2]*e.outShape[3]*e.outShape[4],w=e.outShape[3]*e.outShape[4],C=e.outShape[4],E=0;E<e.batchSize;++E)for(var R=E*x,I=E*t.strides[0],k=0;k<e.inChannels;++k)for(var S=0;S<e.outDepth;++S){for(var A=S*r-f,T=A;T<0;)T+=i;for(var D=Math.min(e.inDepth,c+A),N=R+S*b,F=0;F<e.outHeight;++F){for(var _=F*o-d,O=_;O<0;)O+=s;for(var M=Math.min(e.inHeight,l+_),B=N+F*w,P=0;P<e.outWidth;++P){for(var L=P*a-p,W=L;W<0;)W+=u;for(var U=Math.min(e.inWidth,h+L),V=B+P*C,z=v,G=0,H=0,q=T;q<D;q+=i){for(var K=I+q*t.strides[1],j=O;j<M;j+=s){for(var X=K+j*t.strides[2],Y=W;Y<U;Y+=u){var $=g[X+Y*t.strides[3]+k];if(\"max\"===n&&$>z?z=$:\"avg\"===n&&(G+=$,H++),isNaN(z))break}if(isNaN(z))break}if(isNaN(z))break}y[V+k]=\"avg\"===n?G/H:z}}}return m.toTensor()},o.prototype.avgPool3d=function(t,e){return df(t,\"avgPool3d\"),this.pool3d(t,e,\"avg\").toFloat()},o.prototype.avgPool3dBackprop=function(t,e,n){df([t,e],\"avgPool3dBackprop\");for(var r=n.strideDepth,o=n.strideHeight,a=n.strideWidth,i=n.filterDepth,s=n.filterHeight,u=n.filterWidth,c=n.dilationDepth,l=n.dilationHeight,h=n.dilationWidth,f=n.effectiveFilterDepth,d=n.effectiveFilterHeight,p=n.effectiveFilterWidth,v=f-1-n.padInfo.front,g=p-1-n.padInfo.left,m=d-1-n.padInfo.top,y=er(e.shape,\"float32\"),x=1/(i*s*u),b=this.bufferSync(t),w=0;w<n.batchSize;++w)for(var C=0;C<n.inChannels;++C)for(var E=0;E<n.inDepth;++E)for(var R=0;R<n.inHeight;++R)for(var I=0;I<n.inWidth;++I){for(var k=E-v,S=R-m,A=I-g,T=0,D=0;D<f;D+=c){var N=(k+D)/r;if(!(N<0||N>=n.outDepth||Math.floor(N)!==N))for(var F=0;F<d;F+=l){var _=(S+F)/o;if(!(_<0||_>=n.outHeight||Math.floor(_)!==_))for(var O=0;O<p;O+=h){var M=(A+O)/a;if(!(M<0||M>=n.outWidth||Math.floor(M)!==M))T+=b.get(w,N,_,M,C)}}}y.set(T*x,w,E,R,I,C)}return y.toTensor()},o.prototype.maxPool3d=function(t,e){return df(t,\"maxPool3d\"),this.pool3d(t,e,\"max\").toFloat()},o.prototype.maxPool3dPositions=function(t,e){for(var n=er(e.outShape,\"int32\"),r=e.strideDepth,o=e.strideHeight,a=e.strideWidth,i=e.dilationDepth,s=e.dilationHeight,u=e.dilationWidth,c=e.effectiveFilterDepth,l=e.effectiveFilterHeight,h=e.effectiveFilterWidth,f=e.padInfo.front,d=e.padInfo.top,p=e.padInfo.left,v=this.bufferSync(t),g=0;g<e.batchSize;++g)for(var m=0;m<e.inChannels;++m)for(var y=0;y<e.outDepth;++y){for(var x=y*r-f,b=x;b<0;)b+=i;for(var w=Math.min(e.inDepth,c+x),C=0;C<e.outHeight;++C){for(var E=C*o-d,R=E;R<0;)R+=s;for(var I=Math.min(e.inHeight,l+E),k=0;k<e.outWidth;++k){for(var S=k*a-p,A=S;A<0;)A+=u;for(var T=Math.min(e.inWidth,h+S),D=Number.NEGATIVE_INFINITY,N=-1,F=b;F<w;F+=i)for(var _=F-x,O=R;O<I;O+=s)for(var M=O-E,B=A;B<T;B+=u){var P=B-S,L=v.get(g,F,O,B,m);L>=D&&(D=L,N=_*l*h+M*l+P)}n.set(N,g,y,C,k,m)}}}return n.toTensor()},o.prototype.maxPool3dBackprop=function(t,e,n,r){df([e,n],\"maxPool3dBackprop\");for(var o=this.maxPool3dPositions(e,r),a=r.strideDepth,i=r.strideHeight,s=r.strideWidth,u=r.dilationDepth,c=r.dilationHeight,l=r.dilationWidth,h=r.effectiveFilterDepth,f=r.effectiveFilterHeight,d=r.effectiveFilterWidth,p=h-1-r.padInfo.front,v=d-1-r.padInfo.left,g=f-1-r.padInfo.top,m=er(e.shape,\"float32\"),y=this.bufferSync(o),x=this.bufferSync(t),b=0;b<r.batchSize;++b)for(var w=0;w<r.inChannels;++w)for(var C=0;C<r.inDepth;++C)for(var E=0;E<r.inHeight;++E)for(var R=0;R<r.inWidth;++R){for(var I=C-p,k=E-g,S=R-v,A=0,T=0;T<h;T+=u){var D=(I+T)/a;if(!(D<0||D>=r.outDepth||Math.floor(D)!==D))for(var N=0;N<f;N+=c){var F=(k+N)/i;if(!(F<0||F>=r.outHeight||Math.floor(F)!==F))for(var _=0;_<d;_+=l){var O=(S+_)/s;if(!(O<0||O>=r.outWidth||Math.floor(O)!==O)){var M=h*f*d-1-y.get(b,D,F,O,w)===T*f*d+N*d+_?1:0;if(0!==M)A+=x.get(b,D,F,O,w)*M}}}}m.set(A,b,C,E,R,w)}return m.toTensor()},o.prototype.cast=function(t,e){return Ra(t,e,this)},o.prototype.reshape=function(t,e){return Ia(t,e)},o.prototype.avgPool=function(t,e){return df(t,\"avgPool\"),df(t,\"maxPool\"),pf(this.readSync(t.dataId),t.shape,t.dtype,t.strides,e,\"avg\").toTensor().toFloat()},o.prototype.resizeBilinear=function(t,e,n,r){df(t,\"resizeBilinear\");for(var o=t.shape,a=o[0],i=o[1],s=o[2],u=o[3],c=this.readSync(t.dataId),l=new Float32Array(k([a,e,n,u])),h=[r&&e>1?i-1:i,r&&n>1?s-1:s],f=[r&&e>1?e-1:e,r&&n>1?n-1:n],d=0,p=h[0]/f[0],v=h[1]/f[1],g=0;g<a;g++)for(var m=0;m<e;m++)for(var y=p*m,x=Math.floor(y),b=y-x,w=Math.min(i-1,Math.ceil(y)),C=g*t.strides[0]+x*t.strides[1],E=g*t.strides[0]+w*t.strides[1],R=0;R<n;R++)for(var I=v*R,S=Math.floor(I),A=I-S,T=Math.min(s-1,Math.ceil(I)),D=C+S*t.strides[2],N=E+S*t.strides[2],F=C+T*t.strides[2],_=E+T*t.strides[2],O=0;O<u;O++){var M=c[D+O],B=c[N+O],P=M+(c[F+O]-M)*A,L=P+(B+(c[_+O]-B)*A-P)*b;l[d++]=L}return Fn(l,[a,e,n,u])},o.prototype.resizeBilinearBackprop=function(t,e,n){df([t,e],\"resizeBilinearBackprop\");for(var r=e.shape,o=r[0],a=r[1],i=r[2],s=r[3],u=t.shape,c=u[1],l=u[2],h=new Float32Array(o*a*i*s),f=[n&&c>1?a-1:a,n&&l>1?i-1:i],d=[n&&c>1?c-1:c,n&&l>1?l-1:l],p=f[0]/d[0],v=f[1]/d[1],g=this.readSync(t.dataId),m=0,y=0;y<o;y++)for(var x=y*e.strides[0],b=0;b<c;b++)for(var w=b*p,C=Math.floor(w),E=Math.min(Math.ceil(w),a-1),R=x+C*e.strides[1],I=x+E*e.strides[1],k=w-C,S=1-k,A=0;A<l;A++)for(var T=A*v,D=Math.floor(T),N=Math.min(Math.ceil(T),i-1),F=T-D,_=1-F,O=R+D*e.strides[2],M=R+N*e.strides[2],B=I+D*e.strides[2],P=I+N*e.strides[2],L=S*_,W=S*F,U=k*_,V=k*F,z=0;z<s;z++){var G=g[m++];h[O+z]+=G*L,h[M+z]+=G*W,h[B+z]+=G*U,h[P+z]+=G*V}return Ln(h,[o,i,a,s],e.dtype)},o.prototype.resizeNearestNeighbor=function(t,e,n,r){df(t,\"resizeNearestNeighbor\");for(var o=t.shape,a=o[0],i=o[1],s=o[2],u=o[3],c=this.readSync(t.dataId),l=new Float32Array(a*e*n*u),h=[r&&e>1?i-1:i,r&&n>1?s-1:s],f=[r&&e>1?e-1:e,r&&n>1?n-1:n],d=h[0]/f[0],p=h[1]/f[1],v=0,g=0;g<a;g++)for(var m=g*t.strides[0],y=0;y<e;y++)for(var x=d*y,b=m+Math.min(i-1,r?Math.round(x):Math.floor(x))*t.strides[1],w=0;w<n;w++)for(var C=p*w,E=b+Math.min(s-1,r?Math.round(C):Math.floor(C))*t.strides[2],R=0;R<u;R++){var I=c[E+R];l[v++]=I}return Fn(l,[a,e,n,u],t.dtype)},o.prototype.resizeNearestNeighborBackprop=function(t,e,n){df([t,e],\"resizeNearestNeighborBackprop\");for(var r=e.shape,o=r[0],a=r[1],i=r[2],s=r[3],u=t.shape,c=u[1],l=u[2],h=new Float32Array(o*a*i*s),f=this.readSync(t.dataId),d=[n&&c>1?a-1:a,n&&l>1?i-1:i],p=[n&&c>1?c-1:c,n&&l>1?l-1:l],v=d[0]/p[0],g=d[1]/p[1],m=1/v,y=1/g,x=2*Math.ceil(m)+2,b=2*Math.ceil(y)+2,w=0;w<o;w++)for(var C=w*e.strides[0],E=0;E<a;E++)for(var R=C+E*e.strides[1],I=Math.floor(E*m),k=Math.floor(I-x/2),S=0;S<i;S++)for(var A=R+S*e.strides[2],T=Math.floor(S*y),D=Math.floor(T-b/2),N=0;N<s;N++){for(var F=0,_=0;_<x;_++){var O=_+k;if(!(O<0||O>=c)){var M=C+O*t.strides[1],B=O*v;if(E===Math.min(a-1,n?Math.round(B):Math.floor(B)))for(var P=0;P<b;P++){var L=P+D;if(!(L<0||L>=l)){var W=M+L*t.strides[2],U=L*g;S===Math.min(i-1,n?Math.round(U):Math.floor(U))&&(F+=f[W+N])}}}}h[A+N]=F}return Ln(h,e.shape,e.dtype)},o.prototype.batchNormalization=function(t,e,n,r,o,a){df([t,e,n,o,a],\"batchNorm\");for(var i=this.readSync(t.dataId),s=this.readSync(e.dataId),u=this.readSync(n.dataId),c=o?this.readSync(o.dataId):new Float32Array([1]),l=a?this.readSync(a.dataId):new Float32Array([0]),h=new Float32Array(i.length),f=l.length,d=c.length,p=u.length,v=s.length,g=0,m=0,y=0,x=0,b=0;b<i.length;++b)h[b]=l[g++]+(i[b]-s[m++])*c[y++]/Math.sqrt(u[x++]+r),g>=f&&(g=0),m>=v&&(m=0),y>=d&&(y=0),x>=p&&(x=0);return Ln(h,t.shape)},o.prototype.localResponseNormalization4D=function(t,e,n,r,o){df(t,\"localResponseNormalization4D\");var a=t.shape[3],i=a-1,s=this.readSync(t.dataId),u=t.size,c=new Float32Array(u);function l(t){for(var n=t%a,r=t-n+Math.max(0,n-e),o=t-n+Math.min(n+e,i),u=0;r<=o;r++){var c=s[r];u+=c*c}return u}for(var h=0;h<u;h++){var f=l(h),d=s[h]*Math.pow(n+r*f,-o);c[h]=d}return Ln(c,t.shape)},o.prototype.LRNGrad=function(t,e,n,r,o,a,i){df(t,\"LRNGrad\");for(var s=t.shape[3],u=this.readSync(t.dataId),c=this.readSync(e.dataId),l=this.readSync(n.dataId),h=new Float32Array(t.size),f=t.size,d=0;d<f;d++){for(var p=d%s,v=d-p+Math.max(0,p-r),g=d-p+Math.min(s,p+r+1),m=0,y=v;y<g;y++)m+=Math.pow(c[y],2);m=a*m+o;for(y=v;y<g;y++){var x=-2*a*i*c[y]*l[d]/m;d===y&&(x+=Math.pow(m,-i)),x*=u[d],h[y]+=x}}return Ln(h,t.shape)},o.prototype.multinomial=function(t,e,n,r){df(t,\"multinomial\");for(var o=e?t:ia(t),a=o.shape[0],i=o.shape[1],s=Gn([a,n],\"int32\"),u=this.readSync(s.dataId),c=this.readSync(o.dataId),l=0;l<a;++l){var h=l*i,f=new Float32Array(i-1);f[0]=c[h];for(var d=1;d<f.length;++d)f[d]=f[d-1]+c[h+d];for(var p=Yu(r.toString()),v=l*n,g=0;g<n;++g){var m=p();u[v+g]=f.length;for(var y=0;y<f.length;y++)if(m<f[y]){u[v+g]=y;break}}}return s},o.prototype.oneHot=function(t,e,n,r){df(t,\"oneHot\");var o=new Float32Array(t.size*e);o.fill(r);for(var a=this.readSync(t.dataId),i=0;i<t.size;++i)a[i]>=0&&a[i]<e&&(o[i*e+a[i]]=n);return Bn(o,[t.size,e],\"int32\")},o.prototype.nonMaxSuppression=function(t,e,n,r,o){return df(t,\"nonMaxSuppression\"),Oa(this.readSync(t.dataId),this.readSync(e.dataId),n,r,o)},o.prototype.fft=function(t){return this.fftBatch(t,!1)},o.prototype.ifft=function(t){return this.fftBatch(t,!0)},o.prototype.fftBatch=function(t,e){for(var n=t.shape[0],r=t.shape[1],o=er(t.shape,\"float32\"),a=er(t.shape,\"float32\"),i=Dn(t).as2D(n,r),s=Nn(t).as2D(n,r),u=0;u<n;u++)for(var c=i.slice([u,0],[1,r]),l=s.slice([u,0],[1,r]),h=Tn(c,l),f=this.readSync(this.fftImpl(h,e).dataId),d=0;d<r;d++){var p=Ta(f,d);o.values[u*r+d]=p.real,a.values[u*r+d]=p.imag}return Tn(o.toTensor(),a.toTensor()).as2D(n,r)},o.prototype.fftImpl=function(t,e){var n=t.as1D(),r=n.size;if(this.isExponentOf2(r)){var o=this.fftRadix2(n,r,e).as2D(t.shape[0],t.shape[1]);return e&&(o=Tn(Dn(o).div(On(r)),Nn(o).div(On(r)))),o}var a=this.readSync(t.dataId),i=function(t){for(var e=new Float32Array(t.length/2),n=new Float32Array(t.length/2),r=0;r<t.length;r+=2)e[r/2]=t[r],n[r/2]=t[r+1];return{real:e,imag:n}}(this.fourierTransformByMatmul(a,r,e));return Tn(i.real,i.imag).as2D(t.shape[0],t.shape[1])},o.prototype.isExponentOf2=function(t){return 0==(t&t-1)},o.prototype.fftRadix2=function(t,e,n){if(1===e)return t;var r=this.readSync(t.dataId),o=e/2,a=function(t){for(var e=Math.ceil(t.length/4),n=new Float32Array(e),r=new Float32Array(e),o=0;o<t.length;o+=4)n[Math.floor(o/4)]=t[o],r[Math.floor(o/4)]=t[o+1];return{real:n,imag:r}}(r),i=Tn(a.real,a.imag).as1D(),s=function(t){for(var e=Math.floor(t.length/4),n=new Float32Array(e),r=new Float32Array(e),o=2;o<t.length;o+=4)n[Math.floor(o/4)]=t[o],r[Math.floor(o/4)]=t[o+1];return{real:n,imag:r}}(r),u=Tn(s.real,s.imag).as1D();i=this.fftRadix2(i,o,n),u=this.fftRadix2(u,o,n);var c=function(t,e){for(var n=new Float32Array(t/2),r=new Float32Array(t/2),o=0;o<Math.ceil(t/2);o++){var a=(e?2:-2)*Math.PI*(o/t);n[o]=Math.cos(a),r[o]=Math.sin(a)}return{real:n,imag:r}}(e,n),l=Tn(c.real,c.imag).mul(u),h=i.add(l),f=i.sub(l),d=Dn(h).concat(Dn(f)),p=Nn(h).concat(Nn(f));return Tn(d,p).as1D()},o.prototype.fourierTransformByMatmul=function(t,e,n){for(var r=new Float32Array(2*e),o=0;o<e;o++){for(var a=0,i=0,s=0;s<e;s++){var u=Na(o*s,e,n),c=Ta(t,s);a+=c.real*u.real-c.imag*u.imag,i+=c.real*u.imag+c.imag*u.real}n&&(a/=e,i/=e),Da(r,a,i,o)}return r},o.prototype.depthToSpace=function(t,e,n){C(\"NHWC\"===n,(function(){return\"Only NHWC dataFormat supported on CPU for depthToSpace. Got \"+n})),C(e>1,(function(){return\"blockSize should be > 1 for depthToSpace, but was: \"+e}));for(var r=t.shape[0],o=t.shape[1],a=t.shape[2],i=t.shape[3],s=o*e,u=a*e,c=i/(e*e),l=this.readSync(t.dataId),h=new Float32Array(r*s*u*c),f=0,d=0;d<r;++d)for(var p=0;p<s;++p)for(var v=Math.floor(p/e),g=p%e,m=0;m<u;++m)for(var y=Math.floor(m/e),x=(g*e+m%e)*c,b=0;b<c;++b){var w=b+x+i*(y+a*(v+o*d));h[f++]=l[w]}return Ln(h,[r,s,u,c])},o.prototype.broadcastedBinaryOp=function(t,e,n,r){var o=Pr(t.shape,e.shape),a=er(o,n),i=this.readSync(t.dataId),s=this.readSync(e.dataId),u=Mr(t.shape,o),c=Mr(e.shape,o),l=a.values;if(u.length+c.length===0)for(var h=0;h<l.length;++h)l[h]=r(i[h%i.length],s[h%s.length]);else{var f=this.bufferSync(t),d=this.bufferSync(e),p=function(n){var o=a.indexToLoc(n),h=o.slice(-t.rank);u.forEach((function(t){return h[t]=0}));var p=f.locToIndex(h),v=o.slice(-e.rank);c.forEach((function(t){return v[t]=0}));var g=d.locToIndex(v);l[n]=r(i[p],s[g])};for(h=0;h<l.length;++h)p(h)}return a.toTensor()},o.prototype.broadcastedBinaryComplexOp=function(t,e,n){var r=Pr(t.shape,e.shape),o=er(r,\"float32\"),a=er(r,\"float32\"),i=this.readSync(t.dataId),s=this.readSync(e.dataId),u=Mr(t.shape,r),c=Mr(e.shape,r),l=o.values,h=a.values;if(u.length+c.length===0)for(var f=0;f<l.length;f++){var d=f%i.length,p=f%s.length,v=n(i[2*d],i[2*d+1],s[2*p],s[2*p+1]);l[f]=v.real,h[f]=v.imag}else{var g=this.bufferSync(this.data.get(t.dataId).complexTensors.real),m=this.bufferSync(this.data.get(e.dataId).complexTensors.real),y=function(r){var a=o.indexToLoc(r),f=a.slice(-t.rank);u.forEach((function(t){return f[t]=0}));var d=g.locToIndex(f),p=a.slice(-e.rank);c.forEach((function(t){return p[t]=0}));var v=m.locToIndex(p),y=n(i[2*d],i[2*d+1],s[2*v],s[2*v+1]);l[r]=y.real,h[r]=y.imag};for(f=0;f<l.length;f++)y(f)}return this.complex(o.toTensor(),a.toTensor())},o.prototype.split=function(t,e,n){return Ua(t,e,n)},o.prototype.dispose=function(){},o.prototype.floatPrecision=function(){return 32},o.prototype.epsilon=function(){return 1e-7},o.prototype.cropAndResize=function(t,e,n,r,o,a){for(var i=t.shape,s=i[0],u=i[1],c=i[2],l=i[3],h=e.shape[0],f=r[0],d=r[1],p=er([h,f,d,l],\"float32\"),v=this.readSync(e.dataId),g=this.readSync(n.dataId),m=this.readSync(t.dataId),y=t.strides,x=p.strides,b=0;b<h;b++){var w=4*b,C=v[w],E=v[w+1],R=v[w+2],I=v[w+3],k=g[b];if(!(k>=s))for(var S=f>1?(R-C)*(u-1)/(f-1):0,A=d>1?(I-E)*(c-1)/(d-1):0,T=0;T<f;T++){var D=f>1?C*(u-1)+T*S:.5*(C+R)*(u-1);if(D<0||D>u-1)for(var N=0;N<d;N++)for(var F=0;F<l;F++){var _=F+N*x[2]+T*x[1]+b*x[0];p.values[_]=a}else if(\"bilinear\"===o){var O=Math.floor(D),M=Math.ceil(D),B=D-O;for(N=0;N<d;N++){if((q=d>1?E*(c-1)+N*A:.5*(E+I)*(c-1))<0||q>c-1)for(F=0;F<l;F++){_=F+N*x[2]+T*x[1]+b*x[0];p.values[_]=a}else{var P=Math.floor(q),L=Math.ceil(q),W=q-P;for(F=0;F<l;F++){var U=m[_=F+P*y[2]+O*y[1]+k*y[0]],V=m[_=F+L*y[2]+O*y[1]+k*y[0]],z=m[_=F+P*y[2]+M*y[1]+k*y[0]],G=U+(V-U)*W,H=z+(m[_=F+L*y[2]+M*y[1]+k*y[0]]-z)*W;_=F+N*x[2]+T*x[1]+b*x[0],p.values[_]=G+(H-G)*B}}}}else for(N=0;N<d;++N){var q;if((q=d>1?E*(c-1)+N*A:.5*(E+I)*(c-1))<0||q>c-1)for(F=0;F<l;F++){_=F+N*x[2]+T*x[1]+b*x[0];p.values[_]=a}else{var K=Math.round(q),j=Math.round(D);for(F=0;F<l;F++){var X=F+K*y[2]+j*y[1]+k*y[0],Y=F+N*x[2]+T*x[1]+b*x[0];p.values[Y]=m[X]}}}}}return p.toTensor()},o.prototype.sparseToDense=function(t,e,n,r){var o=Go(0,t,n),a=o.sliceRank,i=o.numUpdates,s=o.sliceSize,u=o.strides,c=o.outputSize;return this.scatter(t,e,n,c,s,i,a,u,r,!1)},o.prototype.gatherND=function(t,e){var n=e.shape,r=n[n.length-1],o=Po(t,e),a=o[0],i=o[1],s=o[2],u=o[3];if(0===i)return Fn([],a,t.dtype);for(var c=new mt([i,s],t.dtype),l=this.readSync(e.dataId),h=this.readSync(t.dataId),f=0;f<i;f++){for(var d=[],p=0,v=0;v<r;v++){var g=l[f*r+v];p+=g*u[v],d.push(g)}if(p<0||p>=t.size/s)throw new Error(\"Invalid indices: \"+d+\" does not index into \"+t.shape);for(var m=0;m<s;m++)c.values[f*s+m]=h[p*s+m]}return c.toTensor().reshape(a)},o.prototype.scatterND=function(t,e,n){var r=Go(0,t,n),o=r.sliceRank,a=r.numUpdates,i=r.sliceSize,s=r.strides,u=r.outputSize,c=On(0);return this.scatter(t,e,n,u,i,a,o,s,c,!0)},o.prototype.fill=function(t,e,n){var r=P(n=n||j(e),k(t));return r.fill(e),Lt.makeTensor(r,t,n,this)},o.prototype.onesLike=function(t){if(\"string\"===t.dtype)throw new Error(\"onesLike is not supported for string tensors\");return this.fill(t.shape,1,t.dtype)},o.prototype.zerosLike=function(t){var e=P(t.dtype,k(t.shape));return this.makeOutput(e,t.shape,t.dtype)},o.prototype.linspace=function(t,e,n){return ka(t,e,n)},o.prototype.scatter=function(t,e,n,r,o,a,i,s,u,c){var l=[r/o,o],h=this.readSync(t.dataId),f=this.readSync(e.dataId);if(0===r)return Fn([],n,e.dtype);var d=new mt(l,e.dtype);d.values.fill(this.readSync(u.dataId)[0]);for(var p=0;p<a;p++){for(var v=[],g=0,m=0;m<i;m++){var y=h[p*i+m];v.push(y),g+=y*s[m]}if(g<0||g>=r/o)throw new Error(\"Invalid indices: \"+v+\" does not index into \"+n);for(var x=0;x<o;x++)c?d.values[g*o+x]+=f[p*o+x]:d.values[g*o+x]=0===e.rank?f[0]:f[p*o+x]}return d.toTensor().reshape(n)},o}(la);function yf(t,e){return{kernelName:t,backendName:\"cpu\",kernelFunc:function(n){var r=n.inputs,o=n.backend,a=r,i=a.a,s=a.b,u=o;df([i,s],t);var c=u.data.get(i.dataId).values,l=u.data.get(s.dataId).values,h=e(i.shape,s.shape,c,l,i.dtype),f=h[0],d=h[1];return{dataId:u.write(f,d,i.dtype),shape:d,dtype:i.dtype}}}}function xf(t){return function(e,n,r,o,a){var i=Pr(e,n),s=i.length,u=$(i),c=B(a,k(i)),l=e.length,h=n.length,f=$(e),d=$(n),p=Mr(e,i),v=Mr(n,i);if(p.length+v.length===0)for(var g=0;g<c.length;++g)c[g]=t(r[g%r.length],o[g%o.length]);else{var m=function(e){var n=it(e,s,u),a=n.slice(-l);p.forEach((function(t){return a[t]=0}));var i=at(a,l,f),g=n.slice(-h);v.forEach((function(t){return g[t]=0}));var m=at(g,h,d);c[e]=t(r[i],o[m])};for(g=0;g<c.length;++g)m(g)}return[c,i]}}Lt.registerBackend(\"cpu\",(function(){return new mf}),1);var bf=xf((function(t,e){return t/e})),wf=yf(wr,bf);var Cf={kernelName:\"MaxPoolWithArgmax\",backendName:\"cpu\",kernelFunc:function(t){var e=t.inputs,n=t.attrs,r=t.backend,o=e.x,a=n,i=a.filterSize,s=a.strides,u=a.pad,c=a.includeBatchInIndex,l=r;df(o,\"MaxPoolWithArgmax\");var h=l.data.get(o.dataId).values,f=fa(o.shape,i,s,[1,1],u),d=function(t,e,n,r,o){var a=pf(t,0,n,$(e),o,\"max\"),i=vf(t,e,n,o,!0,r);return[a.values,i.values]}(h,o.shape,o.dtype,c,f),p=d[0],v=d[1],g=l.write(p,f.outShape,o.dtype),m=l.write(v,f.outShape,o.dtype);return[{dataId:g,shape:f.outShape,dtype:o.dtype},{dataId:m,shape:f.outShape,dtype:\"int32\"}]}},Ef={kernelName:\"NonMaxSuppressionV5\",backendName:\"cpu\",kernelFunc:function(t){var e=t.inputs,n=t.backend,r=t.attrs,o=e,a=o.boxes,i=o.scores,s=r,u=s.maxOutputSize,c=s.iouThreshold,l=s.scoreThreshold,h=s.softNmsSigma,f=n;df(a,\"NonMaxSuppressionWithScore\");var d=Ma(f.data.get(a.dataId).values,f.data.get(i.dataId).values,u,c,l,h);return[d.selectedIndices,d.selectedScores]}},Rf={kernelName:\"Square\",backendName:\"cpu\",kernelFunc:function(t){var e=t.inputs,n=t.backend,r=e.x,o=n;df(r,\"square\");for(var a=o.data.get(r.dataId).values,i=new Float32Array(a.length),s=0;s<a.length;++s){var u=a[s];i[s]=u*u}return{dataId:o.write(i,r.shape,r.dtype),shape:r.shape,dtype:r.dtype}}},If=xf((function(t,e){var n=t-e;return n*n}));function kf(t,e,n,r,o){for(var a=k(e),i=e.length,s=$(e),u=$(o),c=B(n,k(o)),l=0;l<a;++l){for(var h=it(l,i,s),f=new Array(h.length),d=0;d<f.length;d++)f[d]=h[r[d]];c[at(f,i,u)]=t[l]}return c}for(var Sf=0,Af=[Ef,Rf,yf(Er,If),wf,{kernelName:\"Transpose\",backendName:\"cpu\",kernelFunc:function(t){var e=t.inputs,n=t.attrs,r=t.backend,o=e.x,a=n.perm,i=r;df(o,\"transpose\");for(var s=o.shape.length,u=new Array(s),c=0;c<u.length;c++)u[c]=o.shape[a[c]];var l=kf(i.data.get(o.dataId).values,o.shape,o.dtype,a,u);return{dataId:i.write(l,u,o.dtype),shape:u,dtype:o.dtype}}},Cf];Sf<Af.length;Sf++){d(Af[Sf])}var Tf,Df=function(t){this.variableNames=[\"A\"];var e=Ya(),n=t[0],r=t[1];this.outputShape=t,this.userCode=\"\\n      void main() {\\n        ivec3 coords = getOutputCoords();\\n        int texR = coords[0];\\n        int texC = coords[1];\\n        int depth = coords[2];\\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(\"+r+\".0, \"+n+\".0);\\n\\n        vec4 values = \"+e.texture2D+\"(A, uv);\\n        float value;\\n        if (depth == 0) {\\n          value = values.r;\\n        } else if (depth == 1) {\\n          value = values.g;\\n        } else if (depth == 2) {\\n          value = values.b;\\n        } else if (depth == 3) {\\n          value = values.a;\\n        }\\n\\n        setOutput(floor(value * 255.0 + 0.5));\\n      }\\n    \"},Nf=function(t){this.variableNames=[\"A\"],this.packedInputs=!1,this.packedOutput=!0;var e=Ya(),n=t[0],r=t[1];this.outputShape=t,this.userCode=\"\\n      void main() {\\n        ivec3 coords = getOutputCoords();\\n        int texR = coords[0];\\n        int texC = coords[1];\\n        int depth = coords[2];\\n\\n        vec4 result = vec4(0.);\\n\\n        for(int row=0; row<=1; row++) {\\n          for(int col=0; col<=1; col++) {\\n            texC = coords[1] + row;\\n            depth = coords[2] + col;\\n\\n            vec2 uv = (vec2(texC, texR) + halfCR) /\\n                       vec2(\"+r+\".0, \"+n+\".0);\\n            vec4 values = \"+e.texture2D+\"(A, uv);\\n            float value;\\n            if (depth == 0) {\\n              value = values.r;\\n            } else if (depth == 1) {\\n              value = values.g;\\n            } else if (depth == 2) {\\n              value = values.b;\\n            } else if (depth == 3) {\\n              value = values.a;\\n            }\\n\\n            result[row * 2 + col] = floor(value * 255.0 + 0.5);\\n          }\\n        }\\n\\n        \"+e.output+\" = result;\\n      }\\n    \"};var Ff=function(t,e){this.variableNames=[\"A\"];for(var n=new Array(t.length),r=0;r<n.length;r++)n[r]=t[e[r]];this.outputShape=n,this.rank=n.length;var o=ui(this.rank),a=function(t){var e=t.length;if(e>6)throw Error(\"Transpose for rank \"+e+\" is not yet supported\");for(var n=[\"resRC.x\",\"resRC.y\",\"resRC.z\",\"resRC.w\",\"resRC.u\",\"resRC.v\"],r=new Array(e),o=0;o<t.length;o++)r[t[o]]=n[o];return r.join()}(e);this.userCode=\"\\n    void main() {\\n      \"+o+\" resRC = getOutputCoords();\\n      setOutput(getA(\"+a+\"));\\n    }\\n    \"};var _f=function(t,e){this.variableNames=[\"A\"],this.packedInputs=!0,this.packedOutput=!0;for(var n=new Array(t.length),r=0;r<n.length;r++)n[r]=t[e[r]];if(this.outputShape=n,this.rank=n.length,this.rank>6)throw Error(\"Packed transpose for rank \"+this.rank+\" is not yet supported.\");var o=ui(this.rank),a=ja(\"rc\",this.rank),i=new Array(this.rank);for(r=0;r<e.length;r++)i[e[r]]=a[r];var s=\"vec2(\"+i.slice(-2).join()+\")\",u=\"++\"+a[this.rank-1]+\" < \"+n[this.rank-1],c=\"getChannel(getA(\"+i.join()+\"), \"+s+\")\";this.userCode=\"\\n    void main() {\\n      \"+o+\" rc = getOutputCoords();\\n      vec4 result = vec4(0.);\\n      result[0] = \"+c+\";\\n      if(\"+u+\") {\\n        result[1] = \"+c+\";\\n      }\\n      --\"+a[this.rank-1]+\";\\n      if(++\"+a[this.rank-2]+\" < \"+n[this.rank-2]+\") {\\n        result[2] = \"+c+\";\\n        if(\"+u+\") {\\n          result[3] = \"+c+\";\\n        }\\n      }\\n      setOutput(result);\\n    }\\n    \"};for(var Of=0,Mf=[{kernelName:\"FromPixels\",backendName:\"webgl\",kernelFunc:function(t){var e=t.inputs,n=t.backend,r=t.attrs,o=e.pixels,a=r.numChannels,s=\"undefined\"!=typeof HTMLVideoElement&&o instanceof HTMLVideoElement,u=\"undefined\"!=typeof HTMLImageElement&&o instanceof HTMLImageElement,c=s?[o.videoWidth,o.videoHeight]:[o.width,o.height],l=c[0],h=c[1],f=[h,l],d=[h,l,a];(u||s)&&(null==Tf&&(Tf=document.createElement(\"canvas\").getContext(\"2d\")),Tf.canvas.width=l,Tf.canvas.height=h,Tf.drawImage(o,0,0,l,h),o=Tf.canvas);var p=n.makeTensorInfo(f,\"int32\");n.texData.get(p.dataId).usage=zt.PIXELS,n.gpgpu.uploadPixelDataToTexture(n.getTexture(p.dataId),o);var v=i().getBool(\"WEBGL_PACK\")?new Nf(d):new Df(d),g=n.runWebGLProgram(v,[p],\"int32\");return n.disposeData(p.dataId),g}},{kernelName:wr,backendName:\"webgl\",kernelFunc:function(t){var e=t.inputs,n=t.backend,r=e;return function(t,e,n){var r=new Ri(Ci,t.shape,e.shape);return i().getBool(\"WEBGL_PACK_BINARY_OPERATIONS\")&&(r=new Si(Ii,t.shape,e.shape,!0)),n.runWebGLProgram(r,[t,e],\"float32\")}(r.a,r.b,n)}},{kernelName:\"NonMaxSuppressionV5\",backendName:\"webgl\",kernelFunc:function(t){var e=t.inputs,n=t.backend,r=t.attrs;dn(\"tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead\");var o=e,a=o.boxes,i=o.scores,s=r,u=s.maxOutputSize,c=s.iouThreshold,l=s.scoreThreshold,h=s.softNmsSigma,f=n,d=Ma(f.readSync(a.dataId),f.readSync(i.dataId),u,c,l,h);return[d.selectedIndices,d.selectedScores]}},{kernelName:\"Square\",backendName:\"webgl\",kernelFunc:function(t){var e=t.inputs,n=t.backend,r=e.x,o=n,a=new cu(r.shape,\"return x * x;\");return o.runWebGLProgram(a,[r],r.dtype)}},{kernelName:Er,backendName:\"webgl\",kernelFunc:function(t){var e=t.inputs,n=t.backend,r=e,o=r.a,a=r.b,s=n,u=i().getBool(\"WEBGL_PACK_BINARY_OPERATIONS\")?new Si(\"return (a - b) * (a - b);\",o.shape,a.shape):new Ri(\"return (a - b) * (a - b);\",o.shape,a.shape);return s.compileAndRun(u,[o,a])}},{kernelName:\"Transpose\",backendName:\"webgl\",kernelFunc:function(t){for(var e,n=t.inputs,r=t.attrs,o=t.backend,a=n.x,s=r.perm,u=o,c=a.shape.length,l=new Array(c),h=0;h<l.length;h++)l[h]=a.shape[s[h]];if(u.shouldExecuteOnCPU([a])){var f=kf(u.texData.get(a.dataId).values,a.shape,a.dtype,s,l);e=u.makeTensorInfo(l,a.dtype),u.texData.get(e.dataId).values=f}else e=function(t,e,n){var r=i().getBool(\"WEBGL_PACK_ARRAY_OPERATIONS\")?new _f(t.shape,e):new Ff(t.shape,e);return n.runWebGLProgram(r,[t],t.dtype)}(a,s,u);return e}},{kernelName:\"MaxPoolWithArgmax\",backendName:\"webgl\",kernelFunc:function(t){var e=t.inputs,n=t.attrs,r=t.backend,o=e.x,a=n,i=a.filterSize,s=a.strides,u=a.pad,c=a.includeBatchInIndex,l=r;C(4===o.shape.length,(function(){return\"Error in maxPool: input must be rank 4 but got rank \"+o.shape.length+\".\"}));var h=[1,1];C(Ca(s,h),(function(){return\"Error in maxPool: Either strides or dilations must be 1. Got strides \"+s+\" and dilations '\"+h+\"'\"}));var f=fa(o.shape,i,s,h,u),d=function(t,e,n,r){var o=new Ws(n,\"max\",!1),a=r.runWebGLProgram(o,[t],\"float32\");return o=new Ws(n,\"max\",!0,!0,e),[a,r.runWebGLProgram(o,[t],\"float32\")]}(o,c,f,l);return[d[0],d[1]]}}];Of<Mf.length;Of++){d(Mf[Of])}for(var Bf=0,Pf=[{kernelName:xr,inputsToSave:[\"a\",\"b\"],gradFunc:function(t,e){var n=e[0],r=e[1],o=Pr(n.shape,r.shape);return{a:function(){var e=t,r=Br(n.shape,o);return r.length>0&&(e=e.sum(r)),e.reshape(n.shape)},b:function(){var e=t,n=Br(r.shape,o);return n.length>0&&(e=e.sum(n)),e.reshape(r.shape)}}}},{kernelName:\"AddN\",saveAllInputs:!0,gradFunc:function(t,e){var n={};return e.forEach((function(e,r){n[r]=function(){return t.clone()}})),n}},{kernelName:Sr,gradFunc:function(t,e,n){for(var r=n,o=r.inputShape,a=r.shape,i=Array.from(a),s=o.length-1;s>=0;s--)if(o[s]===a[s])i[s]=1;else if(1!==o[s])throw new Error(\"broadcastTo(): [\"+o+\"] cannot be broadcast to [\"+a+\"].\");var u=[];for(s=0;s<i.length;s++)i[s]>1&&u.push(s);return{x:function(){return t.sum(u,!0)}}}},{kernelName:wr,inputsToSave:[\"a\",\"b\"],gradFunc:function(t,e){var n=e[0],r=e[1],o=Pr(n.shape,r.shape);return{a:function(){var e=Bo(t,r.toFloat()),a=Br(n.shape,o);return a.length>0?th(e,a).reshape(n.shape):e},b:function(){var e=t.mul(n.toFloat()),a=Br(r.shape,o);a.length>0&&(e=th(e,a).reshape(r.shape));var i=Gc(r);return no(Bo(e,i.toFloat()))}}}},{kernelName:\"FusedBatchNorm\",inputsToSave:[\"x\",\"mean\",\"variance\",\"scale\"],gradFunc:function(t,e,n){var r=n.varianceEpsilon,o=e[0],a=e[1],i=e[2],s=e[3],u=Ju(o),c=null==s?On(1):s,l=Br(a.shape,u.shape),h=[];if(1===a.rank){for(var f=0;f<u.shape.length-1;++f)h.push(u.shape[f]);h.push(1)}var d=Oo(o,a),p=To(t,c),v=ao(Or(i,On(r))),g=To(To(To(v,v),v),On(-.5));return{x:function(){return 1===a.rank?ur(To(To(t,wc(v.as4D(1,1,1,a.shape[0]),h)),c),o.shape):ur(To(To(t,v),c),o.shape)},mean:function(){var t=To(To(v,On(-1)),p);return 1===a.rank&&(t=th(t,l)),ur(t,a.shape)},variance:function(){var t=To(To(g,d),p);return 1===a.rank&&(t=th(t,l)),ur(t,a.shape)},scale:function(){var e=To(d,v),n=To(t,e);return 1===a.rank&&(n=th(n,l)),ur(n,a.shape)},offset:function(){var e=t;return 1===a.rank&&(e=th(e,l)),ur(e,a.shape)}}}},{kernelName:Tr,gradFunc:function(t){return{x:function(){return t.toFloat()}}}},{kernelName:Ar,inputsToSave:[\"indices\"],gradFunc:function(t,e){var n=e[0];return{indices:function(){return Gn(n.shape,\"float32\")}}}},{kernelName:Nr,inputsToSave:[\"x\"],gradFunc:function(t,e,n){var r=e[0],o=n.paddings.map((function(t){return t[0]}));return{x:function(){return t.slice(o,r.shape)}}}},{kernelName:\"Square\",inputsToSave:[\"x\"],gradFunc:function(t,e){var n=e[0];return{x:function(){return t.mul(n.toFloat().mul(2))}}}},{kernelName:Er,inputsToSave:[\"a\",\"b\"],gradFunc:function(t,e){var n=e[0],r=e[1],o=On(2);return{a:function(){return To(t,To(o,Oo(n,r)))},b:function(){return To(t,To(o,Oo(r,n)))}}}},{kernelName:Dr,inputsToSave:[\"x\"],gradFunc:function(t,e,n){var r=e[0],o=n.reps;return{x:function(){var e=Xn(r);if(1===r.rank)for(var n=0;n<o[0];++n)e=e.add(t.slice([n*r.shape[0]],[r.shape[0]]));else if(2===r.rank)for(n=0;n<o[0];++n)for(var a=0;a<o[1];++a)e=e.add(t.slice([n*r.shape[0],a*r.shape[1]],[r.shape[0],r.shape[1]]));else if(3===r.rank)for(n=0;n<o[0];++n)for(a=0;a<o[1];++a)for(var i=0;i<o[2];++i)e=e.add(t.slice([n*r.shape[0],a*r.shape[1],i*r.shape[2]],[r.shape[0],r.shape[1],r.shape[2]]));else{if(4!==r.rank)throw new Error(\"Gradient for tile operation is not implemented for rank-\"+r.rank+\" tensors yet.\");for(n=0;n<o[0];++n)for(a=0;a<o[1];++a)for(i=0;i<o[2];++i)for(var s=0;s<o[3];++s)e=e.add(t.slice([n*r.shape[0],a*r.shape[1],i*r.shape[2],s*r.shape[3]],[r.shape[0],r.shape[1],r.shape[2],r.shape[3]]))}return e}}}},{kernelName:\"Transpose\",gradFunc:function(t,e,n){var r=Rn(n.perm);return{x:function(){return ua(t,r)}}}}];Bf<Pf.length;Bf++){p(Pf[Bf])}var Lf=function(){function t(){}return t.prototype.fetch=function(t,e){return fetch(t,e)},t.prototype.now=function(){return performance.now()},t.prototype.encode=function(t,e){if(\"utf-8\"!==e&&\"utf8\"!==e)throw new Error(\"Browser's encoder only supports utf-8, but got \"+e);return null==this.textEncoder&&(this.textEncoder=new TextEncoder),this.textEncoder.encode(t)},t.prototype.decode=function(t,e){return new TextDecoder(e).decode(t)},t}();i().get(\"IS_BROWSER\")&&i().setPlatform(\"browser\",new Lf);var Wf,Uf=function(){return require(\"node-fetch\")},Vf=function(){function t(){this.util=require(\"util\"),this.textEncoder=new this.util.TextEncoder}return t.prototype.fetch=function(t,e){return null!=i().global.fetch?i().global.fetch(t,e):(null==Wf&&(Wf=Uf()),Wf(t,e))},t.prototype.now=function(){var t=process.hrtime();return 1e3*t[0]+t[1]/1e6},t.prototype.encode=function(t,e){if(\"utf-8\"!==e&&\"utf8\"!==e)throw new Error(\"Node built-in encoder only supports utf-8, but got \"+e);return this.textEncoder.encode(t)},t.prototype.decode=function(t,e){return 0===t.length?\"\":new this.util.TextDecoder(e).decode(t)},t}();i().get(\"IS_NODE\")&&i().setPlatform(\"node\",new Vf);var zf={float32:4,int32:4,uint16:2,uint8:1,bool:1},Gf=4;function Hf(t,e){for(var n={},r=0,o=function(e){var o=e.name,a=e.dtype,i=e.shape,s=k(i),u=void 0;if(\"quantization\"in e){var c=e.quantization;if(\"uint8\"!==c.dtype&&\"uint16\"!==c.dtype)throw new Error(\"Weight \"+e.name+\" has unknown quantization dtype \"+c.dtype+\". Supported quantization dtypes are: 'uint8' and 'uint16'.\");var l=zf[c.dtype],h=t.slice(r,r+s*l),f=\"uint8\"===c.dtype?new Uint8Array(h):new Uint16Array(h);if(\"float32\"===a)u=Float32Array.from(f,(function(t){return t*c.scale+c.min}));else{if(\"int32\"!==a)throw new Error(\"Unsupported dtype in weight '\"+o+\"': \"+a);u=Int32Array.from(f,(function(t){return Math.round(t*c.scale+c.min)}))}r+=s*l}else if(\"string\"===a){var d=k(e.shape);u=[];for(var p=0;p<d;p++){var v=new Uint32Array(t.slice(r,r+Gf))[0];r+=Gf;var g=new Uint8Array(t.slice(r,r+v));u.push(g),r+=v}}else{var m=zf[a];h=t.slice(r,r+s*m);if(\"float32\"===a)u=new Float32Array(h);else if(\"int32\"===a)u=new Int32Array(h);else{if(\"bool\"!==a)throw new Error(\"Unsupported dtype in weight '\"+o+\"': \"+a);u=new Uint8Array(h)}r+=s*m}n[o]=Fn(u,i,a)},a=0,i=e;a<i.length;a++){o(i[a])}return n}function qf(t){if(null===t)throw new Error(\"Invalid input value: \"+JSON.stringify(t));var e=0,n=[];t.forEach((function(t){if(e+=t.byteLength,n.push(t.byteLength===t.buffer.byteLength?t:new t.constructor(t)),!(t instanceof Float32Array||t instanceof Int32Array||t instanceof Uint8Array))throw new Error(\"Unsupported TypedArray subtype: \"+t.constructor.name)}));var r=new Uint8Array(e),o=0;return n.forEach((function(t){r.set(new Uint8Array(t.buffer),o),o+=t.byteLength})),r.buffer}var Kf=\"undefined\"!=typeof Buffer&&(\"undefined\"==typeof Blob||\"undefined\"==typeof atob||\"undefined\"==typeof btoa);function jf(t){return Kf?Buffer.byteLength(t):new Blob([t]).size}function Xf(t){var e=0;t.forEach((function(t){e+=t.byteLength}));var n=new Uint8Array(e),r=0;return t.forEach((function(t){n.set(new Uint8Array(t),r),r+=t.byteLength})),n.buffer}function Yf(t){for(t=t.trim();t.endsWith(\"/\");)t=t.slice(0,t.length-1);var e=t.split(\"/\");return e[e.length-1]}function $f(t){if(t.modelTopology instanceof ArrayBuffer)throw new Error(\"Expected JSON model topology, received ArrayBuffer.\");return{dateSaved:new Date,modelTopologyType:\"JSON\",modelTopologyBytes:null==t.modelTopology?0:jf(JSON.stringify(t.modelTopology)),weightSpecsBytes:null==t.weightSpecs?0:jf(JSON.stringify(t.weightSpecs)),weightDataBytes:null==t.weightData?0:t.weightData.byteLength}}var Qf=function(){function t(){this.saveRouters=[],this.loadRouters=[]}return t.getInstance=function(){return null==t.instance&&(t.instance=new t),t.instance},t.registerSaveRouter=function(e){t.getInstance().saveRouters.push(e)},t.registerLoadRouter=function(e){t.getInstance().loadRouters.push(e)},t.getSaveHandlers=function(e){return t.getHandlers(e,\"save\")},t.getLoadHandlers=function(e,n){return t.getHandlers(e,\"load\",n)},t.getHandlers=function(e,n,r){var o=[];return(\"load\"===n?t.getInstance().loadRouters:t.getInstance().saveRouters).forEach((function(t){var n=t(e,r);null!==n&&o.push(n)})),o},t}(),Jf=\"://\",Zf=function(){function t(){this.managers={}}return t.getInstance=function(){return null==t.instance&&(t.instance=new t),t.instance},t.registerManager=function(e,n){C(null!=e,(function(){return\"scheme must not be undefined or null.\"})),e.endsWith(Jf)&&(e=e.slice(0,e.indexOf(Jf))),C(e.length>0,(function(){return\"scheme must not be an empty string.\"}));var r=t.getInstance();C(null==r.managers[e],(function(){return\"A model store manager is already registered for scheme '\"+e+\"'.\"})),r.managers[e]=n},t.getManager=function(t){var e=this.getInstance().managers[t];if(null==e)throw new Error(\"Cannot find model manager for scheme '\"+t+\"'\");return e},t.getSchemes=function(){return Object.keys(this.getInstance().managers)},t}();function td(t){if(-1===t.indexOf(Jf))throw new Error(\"The url string provided does not contain a scheme. Supported schemes are: \"+Zf.getSchemes().join(\",\"));return{scheme:t.split(Jf)[0],path:t.split(Jf)[1]}}function ed(t,e,o){return void 0===o&&(o=!1),n(this,void 0,void 0,(function(){var n,a,i,s,u,c,l,h,f;return r(this,(function(r){switch(r.label){case 0:return C(t!==e,(function(){return\"Old path and new path are the same: '\"+t+\"'\"})),C((n=Qf.getLoadHandlers(t)).length>0,(function(){return\"Copying failed because no load handler is found for source URL \"+t+\".\"})),C(n.length<2,(function(){return\"Copying failed because more than one (\"+n.length+\") load handlers for source URL \"+t+\".\"})),a=n[0],C((i=Qf.getSaveHandlers(e)).length>0,(function(){return\"Copying failed because no save handler is found for destination URL \"+e+\".\"})),C(i.length<2,(function(){return\"Copying failed because more than one (\"+n.length+\") save handlers for destination URL \"+e+\".\"})),s=i[0],u=td(t).scheme,c=td(t).path,l=u===td(t).scheme,[4,a.load()];case 1:return h=r.sent(),o&&l?[4,Zf.getManager(u).removeModel(c)]:[3,3];case 2:r.sent(),r.label=3;case 3:return[4,s.save(h)];case 4:return f=r.sent(),!o||l?[3,6]:[4,Zf.getManager(u).removeModel(c)];case 5:r.sent(),r.label=6;case 6:return[2,f.modelArtifactsInfo]}}))}))}var nd=\"models_store\",rd=\"model_info_store\";function od(){if(!i().getBool(\"IS_BROWSER\"))throw new Error(\"Failed to obtain IndexedDB factory because the current environmentis not a web browser.\");var t=window||self,e=t.indexedDB||t.mozIndexedDB||t.webkitIndexedDB||t.msIndexedDB||t.shimIndexedDB;if(null==e)throw new Error(\"The current browser does not appear to support IndexedDB.\");return e}function ad(t){var e=t.result;e.createObjectStore(nd,{keyPath:\"modelPath\"}),e.createObjectStore(rd,{keyPath:\"modelPath\"})}var id=function(){function t(t){if(this.indexedDB=od(),null==t||!t)throw new Error(\"For IndexedDB, modelPath must not be null, undefined or empty.\");this.modelPath=t}return t.prototype.save=function(t){return n(this,void 0,void 0,(function(){return r(this,(function(e){if(t.modelTopology instanceof ArrayBuffer)throw new Error(\"BrowserLocalStorage.save() does not support saving model topology in binary formats yet.\");return[2,this.databaseAction(this.modelPath,t)]}))}))},t.prototype.load=function(){return n(this,void 0,void 0,(function(){return r(this,(function(t){return[2,this.databaseAction(this.modelPath)]}))}))},t.prototype.databaseAction=function(t,e){var n=this;return new Promise((function(t,r){var o=n.indexedDB.open(\"tensorflowjs\",1);o.onupgradeneeded=function(){return ad(o)},o.onsuccess=function(){var a=o.result;if(null==e){var i=a.transaction(nd,\"readonly\"),s=i.objectStore(nd).get(n.modelPath);s.onsuccess=function(){if(null==s.result)return a.close(),r(new Error(\"Cannot find model with path '\"+n.modelPath+\"' in IndexedDB.\"));t(s.result.modelArtifacts)},s.onerror=function(t){return a.close(),r(s.error)},i.oncomplete=function(){return a.close()}}else{var u,c=$f(e),l=a.transaction(rd,\"readwrite\"),h=l.objectStore(rd),f=h.put({modelPath:n.modelPath,modelArtifactsInfo:c});f.onsuccess=function(){var o=(u=a.transaction(nd,\"readwrite\")).objectStore(nd).put({modelPath:n.modelPath,modelArtifacts:e,modelArtifactsInfo:c});o.onsuccess=function(){return t({modelArtifactsInfo:c})},o.onerror=function(t){var e=(h=l.objectStore(rd)).delete(n.modelPath);e.onsuccess=function(){return a.close(),r(o.error)},e.onerror=function(t){return a.close(),r(o.error)}}},f.onerror=function(t){return a.close(),r(f.error)},l.oncomplete=function(){null==u?a.close():u.oncomplete=function(){return a.close()}}}},o.onerror=function(t){return r(o.error)}}))},t.URL_SCHEME=\"indexeddb://\",t}(),sd=function(t){return i().getBool(\"IS_BROWSER\")&&!Array.isArray(t)&&t.startsWith(id.URL_SCHEME)?(e=t.slice(id.URL_SCHEME.length),new id(e)):null;var e};Qf.registerSaveRouter(sd),Qf.registerLoadRouter(sd);var ud=function(){function t(){this.indexedDB=od()}return t.prototype.listModels=function(){return n(this,void 0,void 0,(function(){var t=this;return r(this,(function(e){return[2,new Promise((function(e,n){var r=t.indexedDB.open(\"tensorflowjs\",1);r.onupgradeneeded=function(){return ad(r)},r.onsuccess=function(){var t=r.result,o=t.transaction(rd,\"readonly\"),a=o.objectStore(rd).getAll();a.onsuccess=function(){for(var t={},n=0,r=a.result;n<r.length;n++){var o=r[n];t[o.modelPath]=o.modelArtifactsInfo}e(t)},a.onerror=function(e){return t.close(),n(a.error)},o.oncomplete=function(){return t.close()}},r.onerror=function(t){return n(r.error)}}))]}))}))},t.prototype.removeModel=function(t){return n(this,void 0,void 0,(function(){var e=this;return r(this,(function(n){var r;return t=(r=t).startsWith(id.URL_SCHEME)?r.slice(id.URL_SCHEME.length):r,[2,new Promise((function(n,r){var o=e.indexedDB.open(\"tensorflowjs\",1);o.onupgradeneeded=function(){return ad(o)},o.onsuccess=function(){var e,a=o.result,i=a.transaction(rd,\"readwrite\"),s=i.objectStore(rd),u=s.get(t);u.onsuccess=function(){if(null==u.result)return a.close(),r(new Error(\"Cannot find model with path '\"+t+\"' in IndexedDB.\"));var o=s.delete(t),i=function(){var o=(e=a.transaction(nd,\"readwrite\")).objectStore(nd).delete(t);o.onsuccess=function(){return n(u.result.modelArtifactsInfo)},o.onerror=function(t){return r(u.error)}};o.onsuccess=i,o.onerror=function(t){return i(),a.close(),r(u.error)}},u.onerror=function(t){return a.close(),r(u.error)},i.oncomplete=function(){null==e?a.close():e.oncomplete=function(){return a.close()}}},o.onerror=function(t){return r(o.error)}}))]}))}))},t}();if(i().getBool(\"IS_BROWSER\"))try{Zf.registerManager(id.URL_SCHEME,new ud)}catch(t){}var cd=\"/\",ld=\"tensorflowjs_models\",hd=\"info\",fd=\"model_topology\",dd=\"weight_specs\",pd=\"weight_data\",vd=\"model_metadata\";function gd(t){return{info:[ld,t,hd].join(cd),topology:[ld,t,fd].join(cd),weightSpecs:[ld,t,dd].join(cd),weightData:[ld,t,pd].join(cd),modelMetadata:[ld,t,vd].join(cd)}}function md(t){var e=t.split(cd);if(e.length<3)throw new Error(\"Invalid key format: \"+t);return e.slice(1,e.length-1).join(cd)}var yd=function(){function t(t){if(!i().getBool(\"IS_BROWSER\")||\"undefined\"==typeof window||void 0===window.localStorage)throw new Error(\"The current environment does not support local storage.\");if(this.LS=window.localStorage,null==t||!t)throw new Error(\"For local storage, modelPath must not be null, undefined or empty.\");this.modelPath=t,this.keys=gd(this.modelPath)}return t.prototype.save=function(t){return n(this,void 0,void 0,(function(){var e,n,o;return r(this,(function(r){if(t.modelTopology instanceof ArrayBuffer)throw new Error(\"BrowserLocalStorage.save() does not support saving model topology in binary formats yet.\");e=JSON.stringify(t.modelTopology),n=JSON.stringify(t.weightSpecs),o=$f(t);try{return this.LS.setItem(this.keys.info,JSON.stringify(o)),this.LS.setItem(this.keys.topology,e),this.LS.setItem(this.keys.weightSpecs,n),this.LS.setItem(this.keys.weightData,function(t){if(Kf)return Buffer.from(t).toString(\"base64\");for(var e=new Uint8Array(t),n=\"\",r=0,o=e.length;r<o;r++)n+=String.fromCharCode(e[r]);return btoa(n)}(t.weightData)),this.LS.setItem(this.keys.modelMetadata,JSON.stringify({format:t.format,generatedBy:t.generatedBy,convertedBy:t.convertedBy,userDefinedMetadata:t.userDefinedMetadata})),[2,{modelArtifactsInfo:o}]}catch(t){throw this.LS.removeItem(this.keys.info),this.LS.removeItem(this.keys.topology),this.LS.removeItem(this.keys.weightSpecs),this.LS.removeItem(this.keys.weightData),this.LS.removeItem(this.keys.modelMetadata),new Error(\"Failed to save model '\"+this.modelPath+\"' to local storage: size quota being exceeded is a possible cause of this failure: modelTopologyBytes=\"+o.modelTopologyBytes+\", weightSpecsBytes=\"+o.weightSpecsBytes+\", weightDataBytes=\"+o.weightDataBytes+\".\")}return[2]}))}))},t.prototype.load=function(){return n(this,void 0,void 0,(function(){var t,e,n,o,a,i,s;return r(this,(function(r){if(null==(t=JSON.parse(this.LS.getItem(this.keys.info))))throw new Error(\"In local storage, there is no model with name '\"+this.modelPath+\"'\");if(\"JSON\"!==t.modelTopologyType)throw new Error(\"BrowserLocalStorage does not support loading non-JSON model topology yet.\");if(e={},null==(n=JSON.parse(this.LS.getItem(this.keys.topology))))throw new Error(\"In local storage, the topology of model '\"+this.modelPath+\"' is missing.\");if(e.modelTopology=n,null==(o=JSON.parse(this.LS.getItem(this.keys.weightSpecs))))throw new Error(\"In local storage, the weight specs of model '\"+this.modelPath+\"' are missing.\");if(e.weightSpecs=o,null!=(a=this.LS.getItem(this.keys.modelMetadata))&&(i=JSON.parse(a),e.format=i.format,e.generatedBy=i.generatedBy,e.convertedBy=i.convertedBy,e.userDefinedMetadata=i.userDefinedMetadata),null==(s=this.LS.getItem(this.keys.weightData)))throw new Error(\"In local storage, the binary weight values of model '\"+this.modelPath+\"' are missing.\");return e.weightData=function(t){if(Kf){var e=Buffer.from(t,\"base64\");return e.buffer.slice(e.byteOffset,e.byteOffset+e.byteLength)}for(var n=atob(t),r=new Uint8Array(n.length),o=0;o<n.length;++o)r.set([n.charCodeAt(o)],o);return r.buffer}(s),[2,e]}))}))},t.URL_SCHEME=\"localstorage://\",t}(),xd=function(t){return i().getBool(\"IS_BROWSER\")&&!Array.isArray(t)&&t.startsWith(yd.URL_SCHEME)?(e=t.slice(yd.URL_SCHEME.length),new yd(e)):null;var e};Qf.registerSaveRouter(xd),Qf.registerLoadRouter(xd);var bd=function(){function t(){C(i().getBool(\"IS_BROWSER\"),(function(){return\"Current environment is not a web browser\"})),C(\"undefined\"==typeof window||void 0!==window.localStorage,(function(){return\"Current browser does not appear to support localStorage\"})),this.LS=window.localStorage}return t.prototype.listModels=function(){return n(this,void 0,void 0,(function(){var t,e,n,o,a,i;return r(this,(function(r){for(t={},e=ld+cd,n=cd+hd,o=0;o<this.LS.length;++o)(a=this.LS.key(o)).startsWith(e)&&a.endsWith(n)&&(i=md(a),t[i]=JSON.parse(this.LS.getItem(a)));return[2,t]}))}))},t.prototype.removeModel=function(t){return n(this,void 0,void 0,(function(){var e,n;return r(this,(function(r){var o;if(t=(o=t).startsWith(yd.URL_SCHEME)?o.slice(yd.URL_SCHEME.length):o,e=gd(t),null==this.LS.getItem(e.info))throw new Error(\"Cannot find model at path '\"+t+\"'\");return n=JSON.parse(this.LS.getItem(e.info)),this.LS.removeItem(e.info),this.LS.removeItem(e.topology),this.LS.removeItem(e.weightSpecs),this.LS.removeItem(e.weightData),[2,n]}))}))},t}();if(i().getBool(\"IS_BROWSER\"))try{Zf.registerManager(yd.URL_SCHEME,new bd)}catch(t){}var wd=\"model\",Cd=\".json\",Ed=\".weights.bin\";function Rd(t){return new Promise((function(t){return setTimeout(t)})).then(t)}var Id=function(){function t(e){if(!i().getBool(\"IS_BROWSER\"))throw new Error(\"browserDownloads() cannot proceed because the current environment is not a browser.\");e.startsWith(t.URL_SCHEME)&&(e=e.slice(t.URL_SCHEME.length)),null!=e&&0!==e.length||(e=wd),this.modelTopologyFileName=e+Cd,this.weightDataFileName=e+Ed}return t.prototype.save=function(t){return n(this,void 0,void 0,(function(){var e,n,o,a,i,s;return r(this,(function(r){switch(r.label){case 0:if(\"undefined\"==typeof document)throw new Error(\"Browser downloads are not supported in this environment since `document` is not present\");if(e=window.URL.createObjectURL(new Blob([t.weightData],{type:\"application/octet-stream\"})),!(t.modelTopology instanceof ArrayBuffer))return[3,1];throw new Error(\"BrowserDownloads.save() does not support saving model topology in binary formats yet.\");case 1:return n=[{paths:[\"./\"+this.weightDataFileName],weights:t.weightSpecs}],o={modelTopology:t.modelTopology,format:t.format,generatedBy:t.generatedBy,convertedBy:t.convertedBy,weightsManifest:n},a=window.URL.createObjectURL(new Blob([JSON.stringify(o)],{type:\"application/json\"})),(i=null==this.jsonAnchor?document.createElement(\"a\"):this.jsonAnchor).download=this.modelTopologyFileName,i.href=a,[4,Rd((function(){return i.dispatchEvent(new MouseEvent(\"click\"))}))];case 2:return r.sent(),null==t.weightData?[3,4]:((s=null==this.weightDataAnchor?document.createElement(\"a\"):this.weightDataAnchor).download=this.weightDataFileName,s.href=e,[4,Rd((function(){return s.dispatchEvent(new MouseEvent(\"click\"))}))]);case 3:r.sent(),r.label=4;case 4:return[2,{modelArtifactsInfo:$f(t)}]}}))}))},t.URL_SCHEME=\"downloads://\",t}(),kd=function(){function t(t){if(null==t||t.length<1)throw new Error(\"When calling browserFiles, at least 1 file is required, but received \"+t);this.files=t}return t.prototype.load=function(){return n(this,void 0,void 0,(function(){var t,e,n=this;return r(this,(function(r){return t=this.files[0],e=this.files.slice(1),[2,new Promise((function(r,o){var a=new FileReader;a.onload=function(a){var i=JSON.parse(a.target.result),s=i.modelTopology;if(null!=s){0===e.length&&r({modelTopology:s});var u=i.weightsManifest;if(null!=u){var c;try{c=n.checkManifestAndWeightFiles(u,e)}catch(t){return void o(t)}var l=[],h=[],f=[];u.forEach((function(t){t.paths.forEach((function(t){h.push(t),f.push(null)})),l.push.apply(l,t.weights)})),u.forEach((function(t){t.paths.forEach((function(t){var e=new FileReader;e.onload=function(e){var n=e.target.result,o=h.indexOf(t);f[o]=n,-1===f.indexOf(null)&&r({modelTopology:s,weightSpecs:l,weightData:Xf(f),format:i.format,generatedBy:i.generatedBy,convertedBy:i.convertedBy,userDefinedMetadata:i.userDefinedMetadata})},e.onerror=function(e){return o(\"Failed to weights data from file of path '\"+t+\"'.\")},e.readAsArrayBuffer(c[t])}))}))}else o(new Error(\"weightManifest field is missing from file \"+t.name))}else o(new Error(\"modelTopology field is missing from file \"+t.name))},a.onerror=function(e){return o(\"Failed to read model topology and weights manifest JSON from file '\"+t.name+\"'. BrowserFiles supports loading Keras-style tf.Model artifacts only.\")},a.readAsText(t)}))]}))}))},t.prototype.checkManifestAndWeightFiles=function(t,e){for(var n=[],r=e.map((function(t){return Yf(t.name)})),o={},a=0,i=t;a<i.length;a++){i[a].paths.forEach((function(t){var a=Yf(t);if(-1!==n.indexOf(a))throw new Error(\"Duplicate file basename found in weights manifest: '\"+a+\"'\");if(n.push(a),-1===r.indexOf(a))throw new Error(\"Weight file with basename '\"+a+\"' is not provided.\");o[t]=e[r.indexOf(a)]}))}if(n.length!==e.length)throw new Error(\"Mismatch in the number of files in weights manifest (\"+n.length+\") and the number of weight files provided (\"+e.length+\").\");return o},t}();function Sd(t,e,n,r){!function(t){C(null!=t&&Array.isArray(t)&&t.length>0,(function(){return\"promises must be a none empty array\"}))}(t),function(t,e){C(t>=0&&t<=1,(function(){return\"Progress fraction must be in range [0, 1], but got startFraction \"+t})),C(e>=0&&e<=1,(function(){return\"Progress fraction must be in range [0, 1], but got endFraction \"+e})),C(e>=t,(function(){return\"startFraction must be no more than endFraction, but got startFraction \"+t+\" and endFraction \"+e}))}(n=null==n?0:n,r=null==r?1:r);var o=0;return Promise.all(t.map((function(a){return a.then((function(a){var i=n+ ++o/t.length*(r-n);return e(i),a})),a})))}function Ad(t,e){return n(this,void 0,void 0,(function(){var n,o,a,s,u,c,l,h,f;return r(this,(function(r){switch(r.label){case 0:return null==e&&(e={}),n=null==e.fetchFunc?i().platform.fetch:e.fetchFunc,o=t.map((function(t){return n(t,e.requestInit,{isBinary:!0})})),a=0,s=.5,null!=e.onProgress?[3,2]:[4,Promise.all(o)];case 1:return u=r.sent(),[3,4];case 2:return[4,Sd(o,e.onProgress,a,s)];case 3:u=r.sent(),r.label=4;case 4:return c=u.map((function(t){return t.arrayBuffer()})),l=.5,h=1,null!=e.onProgress?[3,6]:[4,Promise.all(c)];case 5:return f=r.sent(),[3,8];case 6:return[4,Sd(c,e.onProgress,l,h)];case 7:f=r.sent(),r.label=8;case 8:return[2,f]}}))}))}function Td(t){var e=this;return function(o,a,i){return void 0===a&&(a=\"\"),n(e,void 0,void 0,(function(){var e,n,s,u,c,l,h,f,d,p;return r(this,(function(r){switch(r.label){case 0:if(e=o.map((function(){return!1})),n={},s=null!=i?i.map((function(){return!1})):[],u=[],o.forEach((function(t,r){var o=0;t.weights.forEach((function(t){var a=\"quantization\"in t?t.quantization.dtype:t.dtype,c=zf[a]*k(t.shape),l=function(){e[r]=!0,null==n[r]&&(n[r]=[]),n[r].push({manifestEntry:t,groupOffset:o,sizeBytes:c})};null!=i?i.forEach((function(e,n){e===t.name&&(l(),s[n]=!0)})):l(),u.push(t.name),o+=c}))})),!s.every((function(t){return t})))throw c=i.filter((function(t,e){return!s[e]})),new Error(\"Could not find weights in manifest with names: \"+c.join(\", \")+\". \\nManifest JSON has weights with names: \"+u.join(\", \")+\".\");return l=e.reduce((function(t,e,n){return e&&t.push(n),t}),[]),h=[],l.forEach((function(t){o[t].paths.forEach((function(t){var e=a+(a.endsWith(\"/\")?\"\":\"/\")+t;h.push(e)}))})),[4,t(h)];case 1:return f=r.sent(),d={},p=0,l.forEach((function(t){for(var e=o[t].paths.length,r=0,a=0;a<e;a++)r+=f[p+a].byteLength;for(var i=new ArrayBuffer(r),s=new Uint8Array(i),u=0,c=0;c<e;c++){var l=new Uint8Array(f[p+c]);s.set(l,u),u+=l.byteLength}n[t].forEach((function(t){var e=Hf(i.slice(t.groupOffset,t.groupOffset+t.sizeBytes),[t.manifestEntry]);for(var n in e)d[n]=e[n]})),p+=e})),[2,d]}}))}))}}Qf.registerSaveRouter((function(t){return i().getBool(\"IS_BROWSER\")&&!Array.isArray(t)&&t.startsWith(Id.URL_SCHEME)?function(t){void 0===t&&(t=\"model\");return new Id(t)}(t.slice(Id.URL_SCHEME.length)):null}));var Dd=function(){function t(t,e){if(this.DEFAULT_METHOD=\"POST\",null==e&&(e={}),this.weightPathPrefix=e.weightPathPrefix,this.onProgress=e.onProgress,null!=e.fetchFunc?(C(\"function\"==typeof e.fetchFunc,(function(){return\"Must pass a function that matches the signature of `fetch` (see https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)\"})),this.fetch=e.fetchFunc):this.fetch=i().platform.fetch,C(null!=t&&t.length>0,(function(){return\"URL path for http must not be null, undefined or empty.\"})),Array.isArray(t)&&C(2===t.length,(function(){return\"URL paths for http must have a length of 2, (actual length is \"+t.length+\").\"})),this.path=t,null!=e.requestInit&&null!=e.requestInit.body)throw new Error(\"requestInit is expected to have no pre-existing body, but has one.\");this.requestInit=e.requestInit||{}}return t.prototype.save=function(t){return n(this,void 0,void 0,(function(){var e,n,o,a;return r(this,(function(r){switch(r.label){case 0:if(t.modelTopology instanceof ArrayBuffer)throw new Error(\"BrowserHTTPRequest.save() does not support saving model topology in binary formats yet.\");return(e=Object.assign({method:this.DEFAULT_METHOD},this.requestInit)).body=new FormData,n=[{paths:[\"./model.weights.bin\"],weights:t.weightSpecs}],o={modelTopology:t.modelTopology,format:t.format,generatedBy:t.generatedBy,convertedBy:t.convertedBy,userDefinedMetadata:t.userDefinedMetadata,weightsManifest:n},e.body.append(\"model.json\",new Blob([JSON.stringify(o)],{type:\"application/json\"}),\"model.json\"),null!=t.weightData&&e.body.append(\"model.weights.bin\",new Blob([t.weightData],{type:\"application/octet-stream\"}),\"model.weights.bin\"),[4,this.fetch(this.path,e)];case 1:if((a=r.sent()).ok)return[2,{modelArtifactsInfo:$f(t),responses:[a]}];throw new Error(\"BrowserHTTPRequest.save() failed due to HTTP response status \"+a.status+\".\")}}))}))},t.prototype.load=function(){return n(this,void 0,void 0,(function(){var t,e,n,o,a,i,s,u,c,l,h,f;return r(this,(function(r){switch(r.label){case 0:return[4,this.fetch(this.path,this.requestInit)];case 1:if(!(t=r.sent()).ok)throw new Error(\"Request to \"+this.path+\" failed with status code \"+t.status+\". Please verify this URL points to the model JSON of the model to load.\");r.label=2;case 2:return r.trys.push([2,4,,5]),[4,t.json()];case 3:return e=r.sent(),[3,5];case 4:throw r.sent(),n=\"Failed to parse model JSON of response from \"+this.path+\".\",this.path.endsWith(\".pb\")?n+=\" Your path contains a .pb file extension. Support for .pb models have been removed in TensorFlow.js 1.0 in favor of .json models. You can re-convert your Python TensorFlow model using the TensorFlow.js 1.0 conversion scripts or you can convert your.pb models with the 'pb2json'NPM script in the tensorflow/tfjs-converter repository.\":n+=\" Please make sure the server is serving valid JSON for this request.\",new Error(n);case 5:if(o=e.modelTopology,a=e.weightsManifest,i=e.generatedBy,s=e.convertedBy,u=e.format,c=e.userDefinedMetadata,null==o&&null==a)throw new Error(\"The JSON from HTTP path \"+this.path+\" contains neither model topology or manifest for weights.\");return null==a?[3,7]:[4,this.loadWeights(a)];case 6:f=r.sent(),l=f[0],h=f[1],r.label=7;case 7:return[2,{modelTopology:o,weightSpecs:l,weightData:h,userDefinedMetadata:c,generatedBy:i,convertedBy:s,format:u}]}}))}))},t.prototype.loadWeights=function(t){return n(this,void 0,void 0,(function(){var e,n,o,a,i,s,u,c,l,h,f;return r(this,(function(r){switch(r.label){case 0:for(e=Array.isArray(this.path)?this.path[1]:this.path,n=function(t){var e=t.lastIndexOf(\"/\"),n=t.lastIndexOf(\"?\"),r=t.substring(0,e),o=n>e?t.substring(n):\"\";return[r+\"/\",o]}(e),o=n[0],a=n[1],i=this.weightPathPrefix||o,s=[],u=0,c=t;u<c.length;u++)l=c[u],s.push.apply(s,l.weights);return h=[],t.forEach((function(t){t.paths.forEach((function(t){h.push(i+t+a)}))})),[4,Ad(h,{requestInit:this.requestInit,fetchFunc:this.fetch,onProgress:this.onProgress})];case 1:return f=r.sent(),[2,[s,Xf(f)]]}}))}))},t.URL_SCHEME_REGEX=/^https?:\\/\\//,t}();function Nd(t){return null!=t.match(Dd.URL_SCHEME_REGEX)}var Fd=function(t,e){if(\"undefined\"==typeof fetch)return null;return(Array.isArray(t)?t.every((function(t){return Nd(t)})):Nd(t))?_d(t,{onProgress:e}):null};function _d(t,e){return new Dd(t,e)}Qf.registerSaveRouter(Fd),Qf.registerLoadRouter(Fd);var Od=function(){function t(t){this.modelArtifacts=t}return t.prototype.load=function(){return n(this,void 0,void 0,(function(){return r(this,(function(t){return[2,this.modelArtifacts]}))}))},t}(),Md=function(){function t(t){this.saveHandler=t}return t.prototype.save=function(t){return n(this,void 0,void 0,(function(){return r(this,(function(e){return[2,this.saveHandler(t)]}))}))},t}();var Bd=Object.freeze({browserFiles:function(t){return new kd(t)},browserHTTPRequest:function(t,e){return _d(t,e)},concatenateArrayBuffers:Xf,decodeWeights:Hf,encodeWeights:function(t,e){return n(this,void 0,void 0,(function(){var o,a,i,s,u,c=this;return r(this,(function(l){switch(l.label){case 0:for(o=[],a=[],i=Array.isArray(t)?t.map((function(t){return t.name})):Object.keys(t),s=function(s){var u=i[s],l=Array.isArray(t)?t[s].tensor:t[u];if(\"float32\"!==l.dtype&&\"int32\"!==l.dtype&&\"bool\"!==l.dtype&&\"string\"!==l.dtype)throw new Error(\"Unsupported dtype in weight '\"+u+\"': \"+l.dtype);var h={name:u,shape:l.shape,dtype:l.dtype};if(\"string\"===l.dtype){var f=new Promise((function(t){return n(c,void 0,void 0,(function(){var e,n,o,a,i,s,u;return r(this,(function(r){switch(r.label){case 0:return[4,l.bytes()];case 1:for(e=r.sent(),n=e.reduce((function(t,e){return t+e.length}),0)+Gf*e.length,o=new Uint8Array(n),a=0,i=0;i<e.length;i++)s=e[i],u=new Uint8Array(new Uint32Array([s.length]).buffer),o.set(u,a),a+=Gf,o.set(s,a),a+=s.length;return t(o),[2]}}))}))}));a.push(f)}else a.push(l.data());null!=e&&(h.group=e),o.push(h)},u=0;u<i.length;++u)s(u);return[4,Promise.all(a)];case 1:return[2,{data:qf(l.sent()),specs:o}]}}))}))},fromMemory:function(t,e,n,r){return 1===arguments.length?null!=t.modelTopology||null!=t.weightSpecs?new Od(t):(console.warn(\"Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release.\"),new Od({modelTopology:t})):(console.warn(\"Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release.\"),new Od({modelTopology:t,weightSpecs:e,weightData:n,trainingConfig:r}))},getLoadHandlers:function(t,e){return Qf.getLoadHandlers(t,e)},getModelArtifactsInfoForJSON:$f,getSaveHandlers:function(t){return Qf.getSaveHandlers(t)},http:_d,isHTTPScheme:Nd,loadWeights:function(t,e,o,a){return void 0===e&&(e=\"\"),n(this,void 0,void 0,(function(){return r(this,(function(n){return[2,Td((function(t){return Ad(t,{requestInit:a})}))(t,e,o)]}))}))},registerLoadRouter:function(t){return Qf.registerLoadRouter(t)},registerSaveRouter:function(t){return Qf.registerSaveRouter(t)},weightsLoaderFactory:Td,withSaveHandler:function(t){return new Md(t)},copyModel:function(t,e){return n(this,void 0,void 0,(function(){return r(this,(function(n){return!1,[2,ed(t,e,!1)]}))}))},listModels:function(){return n(this,void 0,void 0,(function(){var t,e,n,o,a,i,s;return r(this,(function(r){switch(r.label){case 0:t=Zf.getSchemes(),e={},n=0,o=t,r.label=1;case 1:return n<o.length?(a=o[n],[4,Zf.getManager(a).listModels()]):[3,4];case 2:for(s in i=r.sent())e[a+Jf+s]=i[s];r.label=3;case 3:return n++,[3,1];case 4:return[2,e]}}))}))},moveModel:function(t,e){return n(this,void 0,void 0,(function(){return r(this,(function(n){return!0,[2,ed(t,e,!0)]}))}))},removeModel:function(t){return n(this,void 0,void 0,(function(){var e;return r(this,(function(n){return e=td(t),[2,Zf.getManager(e.scheme).removeModel(e.path)]}))}))}});var Pd,Ld=An({confusionMatrix_:function(t,e,n){var r=gn(t,\"labels\",\"confusionMatrix\"),o=gn(e,\"predictions\",\"confusionMatrix\");C(null==n||n>0&&Number.isInteger(n),(function(){return\"If provided, numClasses must be a positive integer, but got \"+n})),C(1===r.rank,(function(){return\"Expected the rank of labels to be 1, but got \"+r.rank})),C(1===o.rank,(function(){return\"Expected the rank of predictions to be 1, but got \"+o.rank})),C(r.shape[0]===o.shape[0],(function(){return\"Mismatch in the number of examples: \"+r.shape[0]+\" vs. \"+o.shape[0]+\". Labels and predictions should have the same number of elements.\"})),C(n>0&&Number.isInteger(n),(function(){return\"numClasses is required to be a positive integer, but got \"+n}));var a=Rc(r.asType(\"int32\"),n),i=Rc(o.asType(\"int32\"),n);return a.transpose().matMul(i).asType(\"int32\")}}),Wd=Object.freeze({confusionMatrix:Ld});var Ud=An({fromPixels_:function(t,e){if(void 0===e&&(e=3),e>4)throw new Error(\"Cannot construct Tensor with more than 4 channels from pixels.\");if(null==t)throw new Error(\"pixels passed to tf.browser.fromPixels() can not be null\");var n=!1,r=!1,o=!1,a=!1,i=!1;if(t.data instanceof Uint8Array)n=!0;else if(\"undefined\"!=typeof ImageData&&t instanceof ImageData)r=!0;else if(\"undefined\"!=typeof HTMLVideoElement&&t instanceof HTMLVideoElement)o=!0;else if(\"undefined\"!=typeof HTMLImageElement&&t instanceof HTMLImageElement)a=!0;else{if(null==t.getContext)throw new Error(\"pixels passed to tf.browser.fromPixels() must be either an HTMLVideoElement, HTMLImageElement, HTMLCanvasElement, ImageData in browser, or OffscreenCanvas, ImageData in webworker or {data: Uint32Array, width: number, height: number}, but was \"+t.constructor.name);i=!0}if(o){if(o&&t.readyState<2)throw new Error(\"The video element has not loaded data yet. Please wait for `loadeddata` event on the <video> element.\")}if(null!=l(\"FromPixels\",Lt.backendName))return Lt.runKernel(\"FromPixels\",{pixels:t},{numChannels:e});var s,u,c=o?[t.videoWidth,t.videoHeight]:[t.width,t.height],h=c[0],f=c[1];if(i?s=t.getContext(\"2d\").getImageData(0,0,h,f).data:r||n?s=t.data:(a||o)&&(null==Pd&&(Pd=document.createElement(\"canvas\").getContext(\"2d\")),Pd.canvas.width=h,Pd.canvas.height=f,Pd.drawImage(t,0,0,h,f),s=Pd.getImageData(0,0,h,f).data),4===e)u=new Int32Array(s);else{var d=h*f;u=new Int32Array(d*e);for(var p=0;p<d;p++)for(var v=0;v<e;++v)u[p*e+v]=s[4*p+v]}return Pn(u,[f,h,e],\"int32\")}}),Vd=Object.freeze({toPixels:function(t,e){return n(this,void 0,void 0,(function(){var n,o,a,i,s,u,c,l,h,f,d,p,v,g,m,y,x,b,w,C,E,R,I;return r(this,(function(r){switch(r.label){case 0:if(n=gn(t,\"img\",\"toPixels\"),t instanceof wt||(n=n.toInt()),2!==n.rank&&3!==n.rank)throw new Error(\"toPixels only supports rank 2 or 3 tensors, got rank \"+n.rank+\".\");if(o=n.shape.slice(0,2),a=o[0],i=o[1],(s=2===n.rank?1:n.shape[2])>4||2===s)throw new Error(\"toPixels only supports depth of size 1, 3 or 4 but got \"+s);return[4,n.data()];case 1:return u=r.sent(),c=n.min(),l=n.max(),[4,Promise.all([c.data(),l.data()])];case 2:if(h=r.sent(),f=h[0],d=h[1],p=f[0],v=d[0],c.dispose(),l.dispose(),\"float32\"===n.dtype){if(p<0||v>1)throw new Error(\"Tensor values for a float32 Tensor must be in the range [0 - 1] but got range [\"+p+\" - \"+v+\"].\")}else{if(\"int32\"!==n.dtype)throw new Error(\"Unsupported type for toPixels: \"+n.dtype+\". Please use float32 or int32 tensors.\");if(p<0||v>255)throw new Error(\"Tensor values for a int32 Tensor must be in the range [0 - 255] but got range [\"+p+\" - \"+v+\"].\")}for(g=\"float32\"===n.dtype?255:1,m=new Uint8ClampedArray(i*a*4),y=0;y<a*i;++y)x=void 0,b=void 0,w=void 0,C=void 0,1===s?(x=u[y]*g,b=u[y]*g,w=u[y]*g,C=255):3===s?(x=u[3*y]*g,b=u[3*y+1]*g,w=u[3*y+2]*g,C=255):4===s&&(x=u[4*y]*g,b=u[4*y+1]*g,w=u[4*y+2]*g,C=u[4*y+3]*g),m[(E=4*y)+0]=Math.round(x),m[E+1]=Math.round(b),m[E+2]=Math.round(w),m[E+3]=Math.round(C);return null!=e&&(e.width=i,e.height=a,R=e.getContext(\"2d\"),I=new ImageData(m,i,a),R.putImageData(I,0,0)),n!==t&&n.dispose(),[2,m]}}))}))},fromPixels:Ud}),zd=function(){function t(){}return t.prototype.getClassName=function(){return this.constructor.className},t.fromConfig=function(t,e){return new t(e)},t}(),Gd=function(){function t(){this.classNameMap={}}return t.getMap=function(){return null==t.instance&&(t.instance=new t),t.instance},t.register=function(e){t.getMap().classNameMap[e.className]=[e,e.fromConfig]},t}();function Hd(t){C(null!=t.className,(function(){return\"Class being registered does not have the static className property defined.\"})),C(\"string\"==typeof t.className,(function(){return\"className is required to be a string, but got type \"+typeof t.className})),C(t.className.length>0,(function(){return\"Class being registered has an empty-string as its className, which is disallowed.\"})),Gd.register(t)}var qd=Object.freeze({Serializable:zd,SerializationMap:Gd,registerClass:Hd}),Kd=\"1.7.4\";var jd=Object.freeze({gpgpu_util:Rs,webgl_util:Ge,forceHalfFloat:function(){i().set(\"WEBGL_FORCE_F16_TEXTURES\",!0)},MathBackendWebGL:Uu,setWebGLContext:Kt,GPGPUContext:Is}),Xd=function(t){function o(){return null!==t&&t.apply(this,arguments)||this}return e(o,t),o.prototype.minimize=function(t,e,n){void 0===e&&(e=!1);var r=this.computeGradients(t,n),o=r.value,a=r.grads;if(null!=n){var i=n.map((function(t){return{name:t.name,tensor:a[t.name]}}));this.applyGradients(i)}else this.applyGradients(a);return tn(a),e?o:(o.dispose(),null)},Object.defineProperty(o.prototype,\"iterations\",{get:function(){return null==this.iterations_&&(this.iterations_=0),this.iterations_},enumerable:!0,configurable:!0}),o.prototype.incrementIterations=function(){this.iterations_=this.iterations+1},o.prototype.computeGradients=function(t,e){return ra(t,e)},o.prototype.dispose=function(){null!=this.iterations_&&tn(this.iterations_)},o.prototype.saveIterations=function(){return n(this,void 0,void 0,(function(){return r(this,(function(t){return null==this.iterations_&&(this.iterations_=0),[2,{name:\"iter\",tensor:On(this.iterations_,\"int32\")}]}))}))},o.prototype.getWeights=function(){return n(this,void 0,void 0,(function(){return r(this,(function(t){throw new Error(\"getWeights() is not implemented for this optimizer yet.\")}))}))},o.prototype.setWeights=function(t){return n(this,void 0,void 0,(function(){return r(this,(function(t){throw new Error(\"setWeights() is not implemented for this optimizer class \"+this.getClassName())}))}))},o.prototype.extractIterations=function(t){return n(this,void 0,void 0,(function(){var e;return r(this,(function(n){switch(n.label){case 0:return e=this,[4,t[0].tensor.data()];case 1:return e.iterations_=n.sent()[0],[2,t.slice(1)]}}))}))},o}(zd);Object.defineProperty(Xd,Symbol.hasInstance,{value:function(t){return null!=t.minimize&&null!=t.computeGradients&&null!=t.applyGradients}});var Yd=function(t){function o(e,n,r){void 0===r&&(r=null);var o=t.call(this)||this;return o.learningRate=e,o.rho=n,o.epsilon=r,o.accumulatedGrads=[],o.accumulatedUpdates=[],null==r&&(o.epsilon=Lt.backend.epsilon()),o}return e(o,t),o.prototype.applyGradients=function(t){var e=this;(Array.isArray(t)?t.map((function(t){return t.name})):Object.keys(t)).forEach((function(n,r){var o=Lt.registeredVariables[n];null==e.accumulatedGrads[r]&&(e.accumulatedGrads[r]={originalName:n+\"/accum_grad\",variable:Ze((function(){return Xn(o).variable(!1)}))}),null==e.accumulatedUpdates[r]&&(e.accumulatedUpdates[r]={originalName:n+\"/accum_var\",variable:Ze((function(){return Xn(o).variable(!1)}))});var a=Array.isArray(t)?t[r].tensor:t[n];if(null!=a){var i=e.accumulatedGrads[r].variable,s=e.accumulatedUpdates[r].variable;Ze((function(){var t=i.mul(e.rho).add(a.square().mul(1-e.rho)),n=s.add(e.epsilon).sqrt().div(i.add(e.epsilon).sqrt()).mul(a),r=s.mul(e.rho).add(n.square().mul(1-e.rho));i.assign(t),s.assign(r);var u=n.mul(-e.learningRate).add(o);o.assign(u)}))}})),this.incrementIterations()},o.prototype.dispose=function(){null!=this.accumulatedUpdates&&(tn(this.accumulatedGrads.map((function(t){return t.variable}))),tn(this.accumulatedUpdates.map((function(t){return t.variable}))))},o.prototype.getWeights=function(){return n(this,void 0,void 0,(function(){var t;return r(this,(function(e){switch(e.label){case 0:return t=this.accumulatedGrads.concat(this.accumulatedUpdates),[4,this.saveIterations()];case 1:return[2,[e.sent()].concat(t.map((function(t){return{name:t.originalName,tensor:t.variable}})))]}}))}))},o.prototype.setWeights=function(t){return n(this,void 0,void 0,(function(){var e;return r(this,(function(n){switch(n.label){case 0:return[4,this.extractIterations(t)];case 1:return t=n.sent(),e=t.length/2,!1,this.accumulatedGrads=t.slice(0,e).map((function(t){return{originalName:t.name,variable:t.tensor.variable(!1)}})),this.accumulatedUpdates=t.slice(e,2*e).map((function(t){return{originalName:t.name,variable:t.tensor.variable(!1)}})),[2]}}))}))},o.prototype.getConfig=function(){return{learningRate:this.learningRate,rho:this.rho,epsilon:this.epsilon}},o.fromConfig=function(t,e){return new t(e.learningRate,e.rho,e.epsilon)},o.className=\"Adadelta\",o}(Xd);Hd(Yd);var $d=function(t){function o(e,n){void 0===n&&(n=.1);var r=t.call(this)||this;return r.learningRate=e,r.initialAccumulatorValue=n,r.accumulatedGrads=[],r}return e(o,t),o.prototype.applyGradients=function(t){var e=this;(Array.isArray(t)?t.map((function(t){return t.name})):Object.keys(t)).forEach((function(n,r){var o=Lt.registeredVariables[n];if(null==e.accumulatedGrads[r]){e.accumulatedGrads[r]={originalName:n+\"/accumulator\",variable:Ze((function(){return Hn(o.shape,e.initialAccumulatorValue).variable(!1)}))}}var a=Array.isArray(t)?t[r].tensor:t[n];if(null!=a){var i=e.accumulatedGrads[r].variable;Ze((function(){var t=i.add(a.square());i.assign(t);var n=a.div(t.add(Lt.backend.epsilon()).sqrt()).mul(-e.learningRate).add(o);o.assign(n)}))}})),this.incrementIterations()},o.prototype.dispose=function(){null!=this.accumulatedGrads&&tn(this.accumulatedGrads.map((function(t){return t.variable})))},o.prototype.getWeights=function(){return n(this,void 0,void 0,(function(){return r(this,(function(t){switch(t.label){case 0:return[4,this.saveIterations()];case 1:return[2,[t.sent()].concat(this.accumulatedGrads.map((function(t){return{name:t.originalName,tensor:t.variable}})))]}}))}))},o.prototype.setWeights=function(t){return n(this,void 0,void 0,(function(){return r(this,(function(e){switch(e.label){case 0:return[4,this.extractIterations(t)];case 1:return t=e.sent(),!1,this.accumulatedGrads=t.map((function(t){return{originalName:t.name,variable:t.tensor.variable(!1)}})),[2]}}))}))},o.prototype.getConfig=function(){return{learningRate:this.learningRate,initialAccumulatorValue:this.initialAccumulatorValue}},o.fromConfig=function(t,e){return new t(e.learningRate,e.initialAccumulatorValue)},o.className=\"Adagrad\",o}(Xd);Hd($d);var Qd=function(t){function o(e,n,r,o){void 0===o&&(o=null);var a=t.call(this)||this;return a.learningRate=e,a.beta1=n,a.beta2=r,a.epsilon=o,a.accumulatedFirstMoment=[],a.accumulatedSecondMoment=[],Ze((function(){a.accBeta1=On(n).variable(),a.accBeta2=On(r).variable()})),null==o&&(a.epsilon=Lt.backend.epsilon()),a}return e(o,t),o.prototype.applyGradients=function(t){var e=this,n=Array.isArray(t)?t.map((function(t){return t.name})):Object.keys(t);Ze((function(){var r=Oo(1,e.accBeta1),o=Oo(1,e.accBeta2);n.forEach((function(n,a){var i=Lt.registeredVariables[n];null==e.accumulatedFirstMoment[a]&&(e.accumulatedFirstMoment[a]={originalName:n+\"/m\",variable:Ze((function(){return Xn(i).variable(!1)}))}),null==e.accumulatedSecondMoment[a]&&(e.accumulatedSecondMoment[a]={originalName:n+\"/v\",variable:Ze((function(){return Xn(i).variable(!1)}))});var s=Array.isArray(t)?t[a].tensor:t[n];if(null!=s){var u=e.accumulatedFirstMoment[a].variable,c=e.accumulatedSecondMoment[a].variable,l=u.mul(e.beta1).add(s.mul(1-e.beta1)),h=c.mul(e.beta2).add(s.square().mul(1-e.beta2)),f=l.div(r),d=h.div(o);u.assign(l),c.assign(h);var p=f.div(d.sqrt().add(e.epsilon)).mul(-e.learningRate).add(i);i.assign(p)}})),e.accBeta1.assign(e.accBeta1.mul(e.beta1)),e.accBeta2.assign(e.accBeta2.mul(e.beta2))})),this.incrementIterations()},o.prototype.dispose=function(){this.accBeta1.dispose(),this.accBeta2.dispose(),null!=this.accumulatedFirstMoment&&tn(this.accumulatedFirstMoment.map((function(t){return t.variable}))),null!=this.accumulatedSecondMoment&&tn(this.accumulatedSecondMoment.map((function(t){return t.variable})))},o.prototype.getWeights=function(){return n(this,void 0,void 0,(function(){var t;return r(this,(function(e){switch(e.label){case 0:return t=this.accumulatedFirstMoment.concat(this.accumulatedSecondMoment),[4,this.saveIterations()];case 1:return[2,[e.sent()].concat(t.map((function(t){return{name:t.originalName,tensor:t.variable}})))]}}))}))},o.prototype.setWeights=function(t){return n(this,void 0,void 0,(function(){var e,n=this;return r(this,(function(r){switch(r.label){case 0:return[4,this.extractIterations(t)];case 1:return t=r.sent(),Ze((function(){n.accBeta1.assign(No(n.beta1,n.iterations_+1)),n.accBeta2.assign(No(n.beta2,n.iterations_+1))})),e=t.length/2,!1,this.accumulatedFirstMoment=t.slice(0,e).map((function(t){return{originalName:t.name,variable:t.tensor.variable(!1)}})),this.accumulatedSecondMoment=t.slice(e,2*e).map((function(t){return{originalName:t.name,variable:t.tensor.variable(!1)}})),[2]}}))}))},o.prototype.getConfig=function(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon}},o.fromConfig=function(t,e){return new t(e.learningRate,e.beta1,e.beta2,e.epsilon)},o.className=\"Adam\",o}(Xd);Hd(Qd);var Jd=function(t){function o(e,n,r,o,a){void 0===o&&(o=null),void 0===a&&(a=0);var i=t.call(this)||this;return i.learningRate=e,i.beta1=n,i.beta2=r,i.epsilon=o,i.decay=a,i.accumulatedFirstMoment=[],i.accumulatedWeightedInfNorm=[],Ze((function(){i.iteration=On(0).variable(),i.accBeta1=On(n).variable()})),null==o&&(i.epsilon=Lt.backend.epsilon()),i}return e(o,t),o.prototype.applyGradients=function(t){var e=this,n=Array.isArray(t)?t.map((function(t){return t.name})):Object.keys(t);Ze((function(){var r=Oo(1,e.accBeta1),o=Bo(-e.learningRate,e.iteration.mul(e.decay).add(1));n.forEach((function(n,a){var i=Lt.registeredVariables[n];null==e.accumulatedFirstMoment[a]&&(e.accumulatedFirstMoment[a]={originalName:n+\"/m\",variable:Xn(i).variable(!1)}),null==e.accumulatedWeightedInfNorm[a]&&(e.accumulatedWeightedInfNorm[a]={originalName:n+\"/v\",variable:Xn(i).variable(!1)});var s=Array.isArray(t)?t[a].tensor:t[n];if(null!=s){var u=e.accumulatedFirstMoment[a].variable,c=e.accumulatedWeightedInfNorm[a].variable,l=u.mul(e.beta1).add(s.mul(1-e.beta1)),h=c.mul(e.beta2),f=s.abs(),d=h.maximum(f);u.assign(l),c.assign(d);var p=o.div(r).mul(l.div(d.add(e.epsilon))).add(i);i.assign(p)}})),e.iteration.assign(e.iteration.add(1)),e.accBeta1.assign(e.accBeta1.mul(e.beta1))})),this.incrementIterations()},o.prototype.dispose=function(){this.accBeta1.dispose(),this.iteration.dispose(),null!=this.accumulatedFirstMoment&&tn(this.accumulatedFirstMoment.map((function(t){return t.variable}))),null!=this.accumulatedWeightedInfNorm&&tn(this.accumulatedWeightedInfNorm.map((function(t){return t.variable})))},o.prototype.getWeights=function(){return n(this,void 0,void 0,(function(){return r(this,(function(t){throw new Error(\"getWeights() is not implemented for Adamax yet.\")}))}))},o.prototype.setWeights=function(t){return n(this,void 0,void 0,(function(){return r(this,(function(t){throw new Error(\"setWeights() is not implemented for Adamax yet.\")}))}))},o.prototype.getConfig=function(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon,decay:this.decay}},o.fromConfig=function(t,e){return new t(e.learningRate,e.beta1,e.beta2,e.epsilon,e.decay)},o.className=\"Adamax\",o}(Xd);Hd(Jd);var Zd=function(t){function o(e){var n=t.call(this)||this;return n.learningRate=e,n.setLearningRate(e),n}return e(o,t),o.prototype.applyGradients=function(t){var e=this;(Array.isArray(t)?t.map((function(t){return t.name})):Object.keys(t)).forEach((function(n,r){var o=Array.isArray(t)?t[r].tensor:t[n];if(null!=o){var a=Lt.registeredVariables[n];Ze((function(){var t=e.c.mul(o).add(a);a.assign(t)}))}})),this.incrementIterations()},o.prototype.setLearningRate=function(t){this.learningRate=t,null!=this.c&&this.c.dispose(),this.c=en(On(-t))},o.prototype.dispose=function(){this.c.dispose()},o.prototype.getWeights=function(){return n(this,void 0,void 0,(function(){return r(this,(function(t){switch(t.label){case 0:return[4,this.saveIterations()];case 1:return[2,[t.sent()]]}}))}))},o.prototype.setWeights=function(t){return n(this,void 0,void 0,(function(){return r(this,(function(e){switch(e.label){case 0:return[4,this.extractIterations(t)];case 1:if(0!==(t=e.sent()).length)throw new Error(\"SGD optimizer does not have settable weights.\");return[2]}}))}))},o.prototype.getConfig=function(){return{learningRate:this.learningRate}},o.fromConfig=function(t,e){return new t(e.learningRate)},o.className=\"SGD\",o}(Xd);Hd(Zd);var tp=function(t){function o(e,n,r){void 0===r&&(r=!1);var o=t.call(this,e)||this;return o.learningRate=e,o.momentum=n,o.useNesterov=r,o.accumulations=[],o.m=On(o.momentum),o}return e(o,t),o.prototype.applyGradients=function(t){var e=this;(Array.isArray(t)?t.map((function(t){return t.name})):Object.keys(t)).forEach((function(n,r){var o=Lt.registeredVariables[n];if(null==e.accumulations[r]){e.accumulations[r]={originalName:n+\"/momentum\",variable:Ze((function(){return Xn(o).variable(!1)}))}}var a=e.accumulations[r].variable,i=Array.isArray(t)?t[r].tensor:t[n];null!=i&&Ze((function(){var t,n=e.m.mul(a).add(i);t=e.useNesterov?e.c.mul(i.add(n.mul(e.m))).add(o):e.c.mul(n).add(o),a.assign(n),o.assign(t)}))})),this.incrementIterations()},o.prototype.dispose=function(){this.m.dispose(),null!=this.accumulations&&tn(this.accumulations.map((function(t){return t.variable})))},o.prototype.setMomentum=function(t){this.momentum=t},o.prototype.getWeights=function(){return n(this,void 0,void 0,(function(){return r(this,(function(t){switch(t.label){case 0:return[4,this.saveIterations()];case 1:return[2,[t.sent()].concat(this.accumulations.map((function(t){return{name:t.originalName,tensor:t.variable}})))]}}))}))},o.prototype.setWeights=function(t){return n(this,void 0,void 0,(function(){return r(this,(function(e){switch(e.label){case 0:return[4,this.extractIterations(t)];case 1:return t=e.sent(),!1,this.accumulations=t.map((function(t){return{originalName:t.name,variable:t.tensor.variable(!1)}})),[2]}}))}))},o.prototype.getConfig=function(){return{learningRate:this.learningRate,momentum:this.momentum,useNesterov:this.useNesterov}},o.fromConfig=function(t,e){return new t(e.learningRate,e.momentum,e.useNesterov)},o.className=\"Momentum\",o}(Zd);Hd(tp);var ep=function(t){function o(e,n,r,o,a){void 0===n&&(n=.9),void 0===r&&(r=0),void 0===o&&(o=null),void 0===a&&(a=!1);var i=t.call(this)||this;if(i.learningRate=e,i.decay=n,i.momentum=r,i.epsilon=o,i.accumulatedMeanSquares=[],i.accumulatedMoments=[],i.accumulatedMeanGrads=[],i.centered=a,null==o&&(i.epsilon=Lt.backend.epsilon()),null==e)throw new Error(\"learningRate for RMSPropOptimizer must be defined.\");return i}return e(o,t),o.prototype.applyGradients=function(t){var e=this;(Array.isArray(t)?t.map((function(t){return t.name})):Object.keys(t)).forEach((function(n,r){var o=Lt.registeredVariables[n];null==e.accumulatedMeanSquares[r]&&(e.accumulatedMeanSquares[r]={originalName:n+\"/rms\",variable:Ze((function(){return Xn(o).variable(!1)}))}),null==e.accumulatedMoments[r]&&(e.accumulatedMoments[r]={originalName:n+\"/momentum\",variable:Ze((function(){return Xn(o).variable(!1)}))}),null==e.accumulatedMeanGrads[r]&&e.centered&&(e.accumulatedMeanGrads[r]={originalName:n+\"/mg\",variable:Ze((function(){return Xn(o).variable(!1)}))});var a=Array.isArray(t)?t[r].tensor:t[n];if(null!=a){var i=e.accumulatedMeanSquares[r].variable,s=e.accumulatedMoments[r].variable;Ze((function(){var t=i.mul(e.decay).add(a.square().mul(1-e.decay));if(e.centered){var n=e.accumulatedMeanGrads[r].variable,u=n.mul(e.decay).add(a.mul(1-e.decay)),c=s.mul(e.momentum).add(a.mul(e.learningRate).div(t.sub(u.square().add(e.epsilon)).sqrt()));i.assign(t),n.assign(u),s.assign(c);var l=o.sub(c);o.assign(l)}else{var h=i.mul(e.decay).add(a.square().mul(1-e.decay));c=s.mul(e.momentum).add(a.mul(e.learningRate).div(h.add(e.epsilon).sqrt()));i.assign(h),s.assign(c);l=o.sub(c);o.assign(l)}}))}})),this.incrementIterations()},o.prototype.dispose=function(){null!=this.accumulatedMeanSquares&&tn(this.accumulatedMeanSquares.map((function(t){return t.variable}))),null!=this.accumulatedMeanGrads&&this.centered&&tn(this.accumulatedMeanGrads.map((function(t){return t.variable}))),null!=this.accumulatedMoments&&tn(this.accumulatedMoments.map((function(t){return t.variable})))},o.prototype.getWeights=function(){return n(this,void 0,void 0,(function(){var t;return r(this,(function(e){switch(e.label){case 0:return t=this.accumulatedMeanSquares.concat(this.accumulatedMoments),this.centered&&t.push.apply(t,this.accumulatedMeanGrads),[4,this.saveIterations()];case 1:return[2,[e.sent()].concat(t.map((function(t){return{name:t.originalName,tensor:t.variable}})))]}}))}))},o.prototype.setWeights=function(t){return n(this,void 0,void 0,(function(){var e;return r(this,(function(n){switch(n.label){case 0:return[4,this.extractIterations(t)];case 1:return t=n.sent(),e=this.centered?t.length/3:t.length/2,!1,this.accumulatedMeanSquares=t.slice(0,e).map((function(t){return{originalName:t.name,variable:t.tensor.variable(!1)}})),this.accumulatedMoments=t.slice(e,2*e).map((function(t){return{originalName:t.name,variable:t.tensor.variable(!1)}})),this.centered&&(this.accumulatedMeanGrads=t.slice(2*e,3*e).map((function(t){return{originalName:t.name,variable:t.tensor.variable(!1)}}))),[2]}}))}))},o.prototype.getConfig=function(){return{learningRate:this.learningRate,decay:this.decay,momentum:this.momentum,epsilon:this.epsilon,centered:this.centered}},o.fromConfig=function(t,e){return new t(e.learningRate,e.decay,e.momentum,e.epsilon,e.centered)},o.className=\"RMSProp\",o}(Xd);Hd(ep);var np=function(){function t(){}return t.sgd=function(t){return new Zd(t)},t.momentum=function(t,e,n){return void 0===n&&(n=!1),new tp(t,e,n)},t.rmsprop=function(t,e,n,r,o){return void 0===e&&(e=.9),void 0===n&&(n=0),void 0===r&&(r=null),void 0===o&&(o=!1),new ep(t,e,n,r,o)},t.adam=function(t,e,n,r){return void 0===t&&(t=.001),void 0===e&&(e=.9),void 0===n&&(n=.999),void 0===r&&(r=null),new Qd(t,e,n,r)},t.adadelta=function(t,e,n){return void 0===t&&(t=.001),void 0===e&&(e=.95),void 0===n&&(n=null),new Yd(t,e,n)},t.adamax=function(t,e,n,r,o){return void 0===t&&(t=.002),void 0===e&&(e=.9),void 0===n&&(n=.999),void 0===r&&(r=null),void 0===o&&(o=0),new Jd(t,e,n,r,o)},t.adagrad=function(t,e){return void 0===e&&(e=.1),new $d(t,e)},t}(),rp={sgd:np.sgd,momentum:np.momentum,adadelta:np.adadelta,adagrad:np.adagrad,rmsprop:np.rmsprop,adamax:np.adamax,adam:np.adam},op=\"undefined\"!=typeof requestAnimationFrame?requestAnimationFrame:\"undefined\"!=typeof setImmediate?setImmediate:function(t){return t()};function ap(){return new Promise((function(t){return op((function(){return t()}))}))}wt.prototype.add=function(t){return Or(this,t)},wt.prototype.broadcastTo=function(t){return fc(this,t)},wt.prototype.div=function(t){return Bo(this,t)},wt.prototype.divNoNan=function(t){return bc(this,t)},wt.prototype.squaredDifference=function(t){return Hc(this,t)},wt.prototype.tile=function(t){return wc(this,t)},wt.prototype.oneHot=function(t,e,n){return void 0===e&&(e=1),void 0===n&&(n=0),Rc(this,t,e,n)},wt.prototype.transpose=function(t){return ua(this,t)},wt.prototype.pad=function(t,e){return Ic(this,t,e)},wt.prototype.batchNorm=function(t,e,n,r,o){return nc(this,t,e,n,r,o)},xt=ff;export{Yd as AdadeltaOptimizer,$d as AdagradOptimizer,Qd as AdamOptimizer,Jd as AdamaxOptimizer,xr as Add,br as AddN,Sr as BroadcastTo,ca as DataStorage,wr as Div,s as ENV,o as Environment,Fr as FromPixels,Cr as FusedBatchNorm,Tr as Identity,la as KernelBackend,_r as MaxPoolWithArgmax,tp as MomentumOptimizer,kr as NonMaxSuppressionV5,Ar as OneHot,Xd as Optimizer,Nr as PadV2,ep as RMSPropOptimizer,Ct as Rank,Nh as Reduction,Zd as SGDOptimizer,Rr as Square,Er as SquaredDifference,wt as Tensor,mt as TensorBuffer,Dr as Tile,Ir as Transpose,St as Variable,Lr as abs,Wr as acos,Ur as acosh,Or as add,$u as addN,xo as addStrict,ql as all,Kl as any,jl as argMax,Xl as argMin,Vr as asin,zr as asinh,Gr as atan,bo as atan2,Hr as atanh,Ol as avgPool,Pl as avgPool3d,hn as backend,Sa as backend_util,lh as basicLSTMCell,nc as batchNorm,ac as batchNorm2d,uc as batchNorm3d,hc as batchNorm4d,ec as batchNormalization,oc as batchNormalization2d,sc as batchNormalization3d,lc as batchNormalization4d,rr as batchToSpaceND,ul as booleanMaskAsync,fc as broadcastTo,Vd as browser,er as buffer,or as cast,qr as ceil,Kr as clipByValue,dc as clone,Tn as complex,Yn as concat,$n as concat1d,Qn as concat2d,Jn as concat3d,Zn as concat4d,fl as conv1d,dl as conv2d,wl as conv2dTranspose,pl as conv3d,Cl as conv3dTranspose,jr as cos,Xr as cosh,ar as cumsum,oa as customGrad,Xe as deprecationWarn,ir as depthToSpace,ml as depthwiseConv2d,Eh as diag,je as disableDeprecationWarnings,tn as dispose,Ye as disposeVariables,Bo as div,bc as divNoNan,wo as divStrict,Rl as dot,Rh as dropout,nh as elu,Ke as enableDebugMode,qe as enableProdMode,$e as engine,i as env,Kc as equal,jc as equalStrict,Yr as erf,$r as exp,sr as expandDims,Qr as expm1,Cc as eye,gh as fft,Hn as fill,un as findBackend,cn as findBackendFactory,Jr as floor,Co as floorDiv,Ah as frame,hf as fused,il as gather,Ch as gatherND,Lo as gather_util,an as getBackend,h as getGradient,l as getKernel,f as getKernelsForBackend,Zo as grad,ta as grads,Xc as greater,Yc as greaterEqual,$c as greaterEqualStrict,Qc as greaterStrict,Sh as hammingWindow,kh as hannWindow,mh as ifft,Nn as imag,nf as image,Fh as inTopKAsync,Bd as io,xh as irfft,lo as isFinite,co as isInf,uo as isNaN,en as keep,rh as leakyRelu,Jc as less,Zc as lessEqual,tl as lessEqualStrict,el as lessStrict,jh as linalg,qn as linspace,uh as localResponseNormalization,Zr as log,to as log1p,eo as logSigmoid,sa as logSoftmax,Yl as logSumExp,pc as logicalAnd,vc as logicalNot,gc as logicalOr,mc as logicalXor,zh as losses,El as matMul,Wd as math,$l as max,_l as maxPool,Bl as maxPool3d,Ll as maxPoolWithArgmax,Eo as maximum,Ro as maximumStrict,Ql as mean,Qe as memory,Jl as min,Io as minimum,ko as minimumStrict,So as mod,Ao as modStrict,Zl as moments,fh as movingAverage,To as mul,Do as mulStrict,hh as multiRNNCell,Ec as multinomial,no as neg,ap as nextFrame,ch as norm,nl as notEqual,rl as notEqualStrict,Rc as oneHot,zn as ones,jn as onesLike,An as op,Il as outerProduct,Ic as pad,kc as pad1d,Sc as pad2d,Ac as pad3d,Tc as pad4d,Ml as pool,No as pow,Fo as powStrict,oh as prelu,nr as print,eh as prod,Je as profile,Dc as rand,Uc as randomGamma,Vc as randomNormal,zc as randomUniform,Kn as range,on as ready,Dn as real,ro as reciprocal,ln as registerBackend,p as registerGradient,d as registerKernel,ah as relu,ih as relu6,sn as removeBackend,ur as reshape,kl as reverse,Sl as reverse1d,Al as reverse2d,Tl as reverse3d,Dl as reverse4d,yh as rfft,oo as round,ao as rsqrt,On as scalar,vh as scatterND,Ho as scatter_util,sh as selu,bl as separableConv2d,qd as serialization,rn as setBackend,fn as setPlatform,dr as setdiff1dAsync,io as sigmoid,so as sign,Dh as signal,ho as sin,fo as sinh,Wl as slice,Ul as slice1d,Vl as slice2d,zl as slice3d,Gl as slice4d,Jo as slice_util,ia as softmax,po as softplus,cr as spaceToBatchND,wh as sparseToDense,bh as spectral,tr as split,vo as sqrt,Gc as square,Hc as squaredDifference,_o as squaredDifferenceStrict,lr as squeeze,hr as stack,go as step,Th as stft,dh as stridedSlice,Oo as sub,Mo as subStrict,th as sum,Dt as sumOutType,mo as tan,yo as tanh,Fn as tensor,Mn as tensor1d,Bn as tensor2d,Pn as tensor3d,Ln as tensor4d,Wn as tensor5d,Un as tensor6d,Mt as tensor_util,Bc as test_util,Ze as tidy,wc as tile,nn as time,ph as topk,rp as train,ua as transpose,qc as truncatedNormal,g as unregisterGradient,v as unregisterKernel,sl as unsortedSegmentSum,fr as unstack,st as util,ea as valueAndGrad,na as valueAndGrads,Vn as variable,ra as variableGrads,Kd as version_core,jd as webgl,yc as where,xc as whereAsync,Gn as zeros,Xn as zerosLike};\n//# sourceMappingURL=tf-core.esm.js.map\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport{env,concat,slice,stack,tensor,tidy,unstack,util,io,Tensor,add,addN,mod,mul,div,divNoNan,floorDiv,sub,minimum,maximum,pow,squaredDifference,abs,acos,acosh,asin,asinh,atan,atan2,atanh,ceil,complex,cos,cosh,elu,erf,exp,expm1,floor,log,log1p,imag,neg,reciprocal,real,relu,round,selu,sigmoid,sin,sign,sinh,softplus,sqrt,square,tanh,tan,clipByValue,rsqrt,prod,leakyRelu,prelu,scalar,conv1d,conv2d,fused,conv2dTranspose,depthwiseConv2d,conv3d,avgPool,maxPool,maxPoolWithArgmax,avgPool3d,maxPool3d,fill,linspace,multinomial,oneHot,ones,onesLike,randomUniform,range,truncatedNormal,zeros,zerosLike,image,whereAsync,setdiff1dAsync,topk,tensor1d,equal,notEqual,greater,greaterEqual,less,lessEqual,logicalAnd,logicalNot,logicalOr,where,matMul,transpose,batchNorm,localResponseNormalization,softmax,logSoftmax,sparseToDense,max,mean,min,sum,all,any,argMax,argMin,gather,reverse,stridedSlice,tile,split,scatterND,gatherND,fft,ifft,rfft,irfft,cast,expandDims,squeeze,reshape,pad,spaceToBatchND,batchToSpaceND,depthToSpace}from\"@tensorflow/tfjs-core\";var DataType,SaverDef,__assign=function(){return(__assign=Object.assign||function(e){for(var t,a=1,r=arguments.length;a<r;a++)for(var n in t=arguments[a])Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e}).apply(this,arguments)};function __awaiter(e,t,a,r){return new(a||(a=Promise))(function(n,s){function o(e){try{u(r.next(e))}catch(e){s(e)}}function p(e){try{u(r.throw(e))}catch(e){s(e)}}function u(e){e.done?n(e.value):new a(function(t){t(e.value)}).then(o,p)}u((r=r.apply(e,t||[])).next())})}function __generator(e,t){var a,r,n,s,o={label:0,sent:function(){if(1&n[0])throw n[1];return n[1]},trys:[],ops:[]};return s={next:p(0),throw:p(1),return:p(2)},\"function\"==typeof Symbol&&(s[Symbol.iterator]=function(){return this}),s;function p(s){return function(p){return function(s){if(a)throw new TypeError(\"Generator is already executing.\");for(;o;)try{if(a=1,r&&(n=2&s[0]?r.return:s[0]?r.throw||((n=r.return)&&n.call(r),0):r.next)&&!(n=n.call(r,s[1])).done)return n;switch(r=0,n&&(s=[2&s[0],n.value]),s[0]){case 0:case 1:n=s;break;case 4:return o.label++,{value:s[1],done:!1};case 5:o.label++,r=s[1],s=[0];continue;case 7:s=o.ops.pop(),o.trys.pop();continue;default:if(!(n=(n=o.trys).length>0&&n[n.length-1])&&(6===s[0]||2===s[0])){o=0;continue}if(3===s[0]&&(!n||s[1]>n[0]&&s[1]<n[3])){o.label=s[1];break}if(6===s[0]&&o.label<n[1]){o.label=n[1],n=s;break}if(n&&o.label<n[2]){o.label=n[2],o.ops.push(s);break}n[2]&&o.ops.pop(),o.trys.pop();continue}s=t.call(e,o)}catch(e){s=[6,e],r=0}finally{a=n=0}if(5&s[0])throw s[1];return{value:s[0]?s[1]:void 0,done:!0}}([s,p])}}}!function(e){e[e.DT_INVALID=0]=\"DT_INVALID\",e[e.DT_FLOAT=1]=\"DT_FLOAT\",e[e.DT_DOUBLE=2]=\"DT_DOUBLE\",e[e.DT_INT32=3]=\"DT_INT32\",e[e.DT_UINT8=4]=\"DT_UINT8\",e[e.DT_INT16=5]=\"DT_INT16\",e[e.DT_INT8=6]=\"DT_INT8\",e[e.DT_STRING=7]=\"DT_STRING\",e[e.DT_COMPLEX64=8]=\"DT_COMPLEX64\",e[e.DT_INT64=9]=\"DT_INT64\",e[e.DT_BOOL=10]=\"DT_BOOL\",e[e.DT_QINT8=11]=\"DT_QINT8\",e[e.DT_QUINT8=12]=\"DT_QUINT8\",e[e.DT_QINT32=13]=\"DT_QINT32\",e[e.DT_BFLOAT16=14]=\"DT_BFLOAT16\",e[e.DT_FLOAT_REF=101]=\"DT_FLOAT_REF\",e[e.DT_DOUBLE_REF=102]=\"DT_DOUBLE_REF\",e[e.DT_INT32_REF=103]=\"DT_INT32_REF\",e[e.DT_UINT8_REF=104]=\"DT_UINT8_REF\",e[e.DT_INT16_REF=105]=\"DT_INT16_REF\",e[e.DT_INT8_REF=106]=\"DT_INT8_REF\",e[e.DT_STRING_REF=107]=\"DT_STRING_REF\",e[e.DT_COMPLEX64_REF=108]=\"DT_COMPLEX64_REF\",e[e.DT_INT64_REF=109]=\"DT_INT64_REF\",e[e.DT_BOOL_REF=110]=\"DT_BOOL_REF\",e[e.DT_QINT8_REF=111]=\"DT_QINT8_REF\",e[e.DT_QUINT8_REF=112]=\"DT_QUINT8_REF\",e[e.DT_QINT32_REF=113]=\"DT_QINT32_REF\",e[e.DT_BFLOAT16_REF=114]=\"DT_BFLOAT16_REF\"}(DataType||(DataType={})),function(e){!function(e){e[e.LEGACY=0]=\"LEGACY\",e[e.V1=1]=\"V1\",e[e.V2=2]=\"V2\"}(e.CheckpointFormatVersion||(e.CheckpointFormatVersion={}))}(SaverDef||(SaverDef={}));var CUSTOM_OPS={};function registerOp(e,t){var a={tfOpName:e,category:\"custom\",inputs:[],attrs:[],customExecutor:t};CUSTOM_OPS[e]=a}function getRegisteredOp(e){return CUSTOM_OPS[e]}function deregisterOp(e){delete CUSTOM_OPS[e]}function getParamValue(e,t,a,r){var n=t.inputParams[e];if(n&&void 0!==n.inputIndexStart){var s=n.inputIndexStart,o=0===n.inputIndexEnd?void 0:void 0===n.inputIndexEnd?s+1:n.inputIndexEnd;if(\"tensor\"===n.type)return getTensor(t.inputNames[n.inputIndexStart],a,r);if(\"tensors\"===n.type)return t.inputNames.slice(s,o).map(function(e){return getTensor(e,a,r)});var p=Array.prototype.slice.call(getTensor(t.inputNames.slice(s)[0],a,r).dataSync());return\"number\"===n.type?p[0]:p}var u=t.attrParams[e];return u&&u.value}function getTensor(e,t,a){var r=parseNodeName(e),n=r[0],s=r[1],o=a.currentContextIds.find(function(e){return!!t[getNodeNameWithContextId(n,e)]});return void 0!==o?t[getNodeNameWithContextId(n,o)][s]:void 0}function getTensorsForCurrentContenxt(e,t,a){return t[getNodeNameWithContextId(e,a.currentContextId)]}function getNodeNameAndIndex(e,t){var a=parseNodeName(e),r=a[0],n=a[1];return[getNodeNameWithContextId(r,t&&t.currentContextId),n]}function getNodeNameWithContextId(e,t){return t?e+\"-\"+t:e}function parseNodeName(e){var t=e.lastIndexOf(\":\");return-1===t?[e,0]:[e.substring(0,t),Number(e.substring(t+1))]}function split$1(e,t){for(var a=[],r=0;r<e.length;r+=t)a.push(e.slice(r,r+t));return a}var json=[{tfOpName:\"Add\",category:\"arithmetic\",inputs:[{start:0,name:\"a\",type:\"tensor\"},{start:1,name:\"b\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"AddV2\",category:\"arithmetic\",inputs:[{start:0,name:\"a\",type:\"tensor\"},{start:1,name:\"b\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"AddN\",category:\"arithmetic\",inputs:[{start:0,end:0,name:\"tensors\",type:\"tensors\"}]},{tfOpName:\"BiasAdd\",category:\"arithmetic\",inputs:[{start:0,name:\"a\",type:\"tensor\"},{start:1,name:\"b\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Sub\",category:\"arithmetic\",inputs:[{start:0,name:\"a\",type:\"tensor\"},{start:1,name:\"b\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"RealDiv\",category:\"arithmetic\",inputs:[{start:0,name:\"a\",type:\"tensor\"},{start:1,name:\"b\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Div\",category:\"arithmetic\",inputs:[{start:0,name:\"a\",type:\"tensor\"},{start:1,name:\"b\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"DivNoNan\",category:\"arithmetic\",inputs:[{start:0,name:\"a\",type:\"tensor\"},{start:1,name:\"b\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"FloorDiv\",category:\"arithmetic\",inputs:[{start:0,name:\"a\",type:\"tensor\"},{start:1,name:\"b\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Mul\",category:\"arithmetic\",inputs:[{start:0,name:\"a\",type:\"tensor\"},{start:1,name:\"b\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Maximum\",category:\"arithmetic\",inputs:[{start:0,name:\"a\",type:\"tensor\"},{start:1,name:\"b\",type:\"tensor\"}]},{tfOpName:\"Minimum\",category:\"arithmetic\",inputs:[{start:0,name:\"a\",type:\"tensor\"},{start:1,name:\"b\",type:\"tensor\"}]},{tfOpName:\"Pow\",category:\"arithmetic\",inputs:[{start:0,name:\"a\",type:\"tensor\"},{start:1,name:\"b\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"SquaredDifference\",category:\"arithmetic\",inputs:[{start:0,name:\"a\",type:\"tensor\"},{start:1,name:\"b\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Mod\",category:\"arithmetic\",inputs:[{start:0,name:\"a\",type:\"tensor\"},{start:1,name:\"b\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"FloorMod\",category:\"arithmetic\",inputs:[{start:0,name:\"a\",type:\"tensor\"},{start:1,name:\"b\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]}],arithmetic=Object.freeze({json:json}),json$1=[{tfOpName:\"Abs\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Acos\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Asin\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Atan\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Atan2\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"y\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Ceil\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"ClipByValue\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"clip_value_min\",name:\"clipValueMin\",type:\"number\"},{tfName:\"clip_value_max\",name:\"clipValueMax\",type:\"number\"}]},{tfOpName:\"Complex\",category:\"basic_math\",inputs:[{start:0,name:\"real\",type:\"tensor\"},{start:1,name:\"imag\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"ComplexAbs\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Cos\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Cosh\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Elu\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Exp\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Floor\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Log\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Imag\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0},{tfName:\"Tout\",name:\"outputType\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Neg\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Real\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0},{tfName:\"Tout\",name:\"outputType\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Prelu\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"alpha\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Relu\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Relu6\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0},{tfName:\"clipValueMin\",name:\"clipValueMin\",type:\"number\",defaultValue:0},{tfName:\"clipValueMax\",name:\"clipValueMax\",type:\"number\",defaultValue:6}]},{tfOpName:\"Selu\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Sigmoid\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Sin\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Sinh\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Sqrt\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Rsqrt\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Square\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Tan\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Tanh\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Sign\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Round\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Expm1\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Log1p\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Reciprocal\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Softplus\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Asinh\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Acosh\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Atanh\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Erf\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Prod\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"axes\",type:\"number[]\"}],attrs:[{tfName:\"keep_dims\",name:\"keepDims\",type:\"bool\",notSupported:!0},{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"LeakyRelu\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"alpha\",name:\"alpha\",type:\"number\",defaultValue:.2},{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]}],basicMath=Object.freeze({json:json$1}),json$2=[{tfOpName:\"LoopCond\",category:\"control\",inputs:[{start:0,name:\"pred\",type:\"tensor\"}]},{tfOpName:\"Switch\",category:\"control\",inputs:[{start:0,name:\"data\",type:\"tensor\"},{start:1,name:\"pred\",type:\"tensor\"}]},{tfOpName:\"Merge\",category:\"control\",inputs:[{start:0,end:0,name:\"tensors\",type:\"tensors\"}]},{tfOpName:\"Enter\",category:\"control\",inputs:[{start:0,name:\"tensor\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0},{tfName:\"frame_name\",name:\"frameName\",type:\"string\"},{tfName:\"is_constant\",name:\"isConstant\",type:\"bool\"}]},{tfOpName:\"Exit\",category:\"control\",inputs:[{start:0,name:\"tensor\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"NextIteration\",category:\"control\",inputs:[{start:0,name:\"tensor\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"TensorArrayV3\",category:\"control\",inputs:[{start:0,name:\"size\",type:\"number\"}],attrs:[{tfName:\"dtype\",name:\"dtype\",type:\"dtype\"},{tfName:\"element_shape\",name:\"elementShape\",type:\"shape\"},{tfName:\"dynamic_size\",name:\"dynamicSize\",type:\"bool\"},{tfName:\"clear_after_read\",name:\"clearAfterRead\",type:\"bool\"},{tfName:\"identical_element_shapes\",name:\"identicalElementShapes\",type:\"bool\"},{tfName:\"tensor_array_name\",name:\"name\",type:\"string\"}]},{tfOpName:\"TensorArrayWriteV3\",category:\"control\",inputs:[{start:0,name:\"tensorArrayId\",type:\"number\"},{start:1,name:\"index\",type:\"number\"},{start:2,name:\"tensor\",type:\"tensor\"},{start:3,name:\"flowIn\",type:\"number\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"TensorArrayReadV3\",category:\"control\",inputs:[{start:0,name:\"tensorArrayId\",type:\"number\"},{start:1,name:\"index\",type:\"number\"},{start:2,name:\"flowIn\",type:\"number\"}],attrs:[{tfName:\"dtype\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"TensorArrayGatherV3\",category:\"control\",inputs:[{start:0,name:\"tensorArrayId\",type:\"number\"},{start:1,name:\"indices\",type:\"number[]\"},{start:2,name:\"flowIn\",type:\"number\"}],attrs:[{tfName:\"dtype\",name:\"dtype\",type:\"dtype\"},{tfName:\"element_shape\",name:\"elementShape\",type:\"shape\"}]},{tfOpName:\"TensorArrayScatterV3\",category:\"control\",inputs:[{start:0,name:\"tensorArrayId\",type:\"number\"},{start:1,name:\"indices\",type:\"number[]\"},{start:2,name:\"tensor\",type:\"tensor\"},{start:3,name:\"flowIn\",type:\"number\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\"}]},{tfOpName:\"TensorArrayConcatV3\",category:\"control\",inputs:[{start:0,name:\"tensorArrayId\",type:\"number\"},{start:1,name:\"flowIn\",type:\"number\"}],attrs:[{tfName:\"dtype\",name:\"dtype\",type:\"dtype\"},{tfName:\"element_shape_except0\",name:\"elementShapeExcept0\",type:\"shape\",notSupported:!0}]},{tfOpName:\"TensorArraySplitV3\",category:\"control\",inputs:[{start:0,name:\"tensorArrayId\",type:\"number\"},{start:1,name:\"tensor\",type:\"tensor\"},{start:2,name:\"lengths\",type:\"number[]\"},{start:3,name:\"flowIn\",type:\"number\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\"}]},{tfOpName:\"TensorArraySizeV3\",category:\"control\",inputs:[{start:0,name:\"tensorArrayId\",type:\"number\"},{start:1,name:\"flowIn\",type:\"number\"}]},{tfOpName:\"TensorArrayCloseV3\",category:\"control\",inputs:[{start:0,name:\"tensorArrayId\",type:\"number\"}]}],control=Object.freeze({json:json$2}),json$3=[{tfOpName:\"AvgPool\",category:\"convolution\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"strides\",name:\"strides\",type:\"number[]\"},{tfName:\"padding\",name:\"pad\",type:\"string\"},{tfName:\"data_format\",name:\"dataFormat\",type:\"string\",notSupported:!0},{tfName:\"ksize\",name:\"kernelSize\",type:\"number[]\"},{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"MaxPool\",category:\"convolution\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"strides\",name:\"strides\",type:\"number[]\"},{tfName:\"padding\",name:\"pad\",type:\"string\"},{tfName:\"data_format\",name:\"dataFormat\",type:\"string\",notSupported:!0},{tfName:\"ksize\",name:\"kernelSize\",type:\"number[]\"},{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"MaxPoolWithArgmax\",category:\"convolution\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"strides\",name:\"strides\",type:\"number[]\"},{tfName:\"padding\",name:\"pad\",type:\"string\"},{tfName:\"ksize\",name:\"kernelSize\",type:\"number[]\"},{tfName:\"include_batch_in_index\",name:\"includeBatchInIndex\",type:\"bool\"},{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"AvgPool3D\",category:\"convolution\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"strides\",name:\"strides\",type:\"number[]\"},{tfName:\"padding\",name:\"pad\",type:\"string\"},{tfName:\"data_format\",name:\"dataFormat\",type:\"string\",notSupported:!0},{tfName:\"ksize\",name:\"kernelSize\",type:\"number[]\"},{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"MaxPool3D\",category:\"convolution\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"strides\",name:\"strides\",type:\"number[]\"},{tfName:\"padding\",name:\"pad\",type:\"string\"},{tfName:\"data_format\",name:\"dataFormat\",type:\"string\",notSupported:!0},{tfName:\"ksize\",name:\"kernelSize\",type:\"number[]\"},{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Conv1D\",category:\"convolution\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"filter\",type:\"tensor\"}],attrs:[{tfName:\"stride\",name:\"stride\",type:\"number\"},{tfName:\"padding\",name:\"pad\",type:\"string\"},{tfName:\"data_format\",name:\"dataFormat\",type:\"string\",defaultValue:\"NWC\"},{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0},{tfName:\"dilation\",name:\"dilation\",type:\"number\",defaultValue:1}]},{tfOpName:\"Conv2D\",category:\"convolution\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"filter\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0},{tfName:\"strides\",name:\"strides\",type:\"number[]\"},{tfName:\"padding\",name:\"pad\",type:\"string\"},{tfName:\"useCudnnOnGpu\",name:\"useCudnnOnGpu\",type:\"bool\"},{tfName:\"data_format\",name:\"dataFormat\",type:\"string\",defaultValue:\"NHWC\"},{tfName:\"dilations\",name:\"dilations\",type:\"number[]\"}]},{tfOpName:\"_FusedConv2D\",category:\"convolution\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"filter\",type:\"tensor\"},{start:2,end:0,name:\"args\",type:\"tensors\"}],attrs:[{tfName:\"num_args\",name:\"numArgs\",type:\"number\"},{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0},{tfName:\"strides\",name:\"strides\",type:\"number[]\"},{tfName:\"padding\",name:\"pad\",type:\"string\"},{tfName:\"explicit_paddings\",name:\"explicitPaddings\",type:\"number[]\",defaultValue:[]},{tfName:\"use_cudnn_on_gpu\",name:\"useCudnnOnGpu\",type:\"bool\",defaultValue:!0},{tfName:\"data_format\",name:\"dataFormat\",type:\"string\",defaultValue:\"NHWC\"},{tfName:\"dilations\",name:\"dilations\",type:\"number[]\",defaultValue:[1,1,1,1]},{tfName:\"fused_ops\",name:\"fusedOps\",type:\"string[]\",defaultValue:[]},{tfName:\"epsilon\",name:\"epsilon\",type:\"number\",defaultValue:1e-4}]},{tfOpName:\"Conv2DBackpropInput\",category:\"convolution\",inputs:[{start:2,name:\"x\",type:\"tensor\"},{start:1,name:\"filter\",type:\"tensor\"},{start:0,name:\"outputShape\",type:\"number[]\"}],attrs:[{tfName:\"strides\",name:\"strides\",type:\"number[]\"},{tfName:\"padding\",name:\"pad\",type:\"string\"},{tfName:\"data_format\",name:\"dataFormat\",type:\"string\",notSupported:!0}]},{tfOpName:\"DepthwiseConv2d\",category:\"convolution\",inputs:[{start:0,name:\"input\",type:\"tensor\"},{start:1,name:\"filter\",type:\"tensor\"}],attrs:[{tfName:\"strides\",name:\"strides\",type:\"number[]\"},{tfName:\"padding\",name:\"pad\",type:\"string\"},{tfName:\"data_format\",name:\"dataFormat\",type:\"string\",defaultValue:\"NHWC\"},{tfName:\"dilations\",name:\"dilations\",type:\"number[]\"}]},{tfOpName:\"DepthwiseConv2dNative\",category:\"convolution\",inputs:[{start:0,name:\"input\",type:\"tensor\"},{start:1,name:\"filter\",type:\"tensor\"}],attrs:[{tfName:\"strides\",name:\"strides\",type:\"number[]\"},{tfName:\"padding\",name:\"pad\",type:\"string\"},{tfName:\"data_format\",name:\"dataFormat\",type:\"string\",defaultValue:\"NHWC\"},{tfName:\"dilations\",name:\"dilations\",type:\"number[]\"}]},{tfOpName:\"FusedDepthwiseConv2dNative\",category:\"convolution\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"filter\",type:\"tensor\"},{start:2,end:0,name:\"args\",type:\"tensors\"}],attrs:[{tfName:\"num_args\",name:\"numArgs\",type:\"number\"},{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0},{tfName:\"strides\",name:\"strides\",type:\"number[]\"},{tfName:\"padding\",name:\"pad\",type:\"string\"},{tfName:\"data_format\",name:\"dataFormat\",type:\"string\",defaultValue:\"NHWC\"},{tfName:\"dilations\",name:\"dilations\",type:\"number[]\",defaultValue:[1,1,1,1]},{tfName:\"fused_ops\",name:\"fusedOps\",type:\"string[]\",defaultValue:[]}]},{tfOpName:\"Conv3D\",category:\"convolution\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"filter\",type:\"tensor\"}],attrs:[{tfName:\"strides\",name:\"strides\",type:\"number[]\"},{tfName:\"padding\",name:\"pad\",type:\"string\"},{tfName:\"data_format\",name:\"dataFormat\",type:\"string\",defaultValue:\"NHWC\"},{tfName:\"dilations\",name:\"dilations\",type:\"number[]\"}]}],convolution=Object.freeze({json:json$3}),json$4=[{tfOpName:\"Fill\",category:\"creation\",inputs:[{start:0,name:\"shape\",type:\"number[]\"},{start:1,name:\"value\",type:\"number\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\"}]},{tfOpName:\"LinSpace\",category:\"creation\",inputs:[{start:0,name:\"start\",type:\"number\"},{start:1,name:\"stop\",type:\"number\"},{start:2,name:\"num\",type:\"number\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"OneHot\",category:\"creation\",inputs:[{start:0,name:\"indices\",type:\"tensor\"},{start:1,name:\"depth\",type:\"number\"},{start:2,name:\"onValue\",type:\"number\",defaultValue:1},{start:3,name:\"offValue\",type:\"number\",defaultValue:0}],attrs:[{tfName:\"axis\",name:\"axis\",type:\"number\",notSupported:!0},{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Ones\",category:\"creation\",inputs:[{start:0,name:\"shape\",type:\"number[]\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\"}]},{tfOpName:\"OnesLike\",category:\"creation\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"dtype\",name:\"dtype\",type:\"dtype\"}]},{tfOpName:\"RandomUniform\",category:\"creation\",inputs:[{start:0,name:\"shape\",type:\"number[]\"}],attrs:[{tfName:\"minval\",name:\"minval\",type:\"number\",defaultValue:0},{tfName:\"maxval\",name:\"maxval\",type:\"number\",defaultValue:1},{tfName:\"dtype\",name:\"dtype\",type:\"dtype\"},{tfName:\"seed\",name:\"seed\",type:\"number\",defaultValue:0},{tfName:\"seed2\",name:\"seed2\",type:\"number\",defaultValue:0,notSupported:!0},{tfName:\"T\",name:\"T\",type:\"number\",notSupported:!0}]},{tfOpName:\"Range\",category:\"creation\",inputs:[{start:0,name:\"start\",type:\"number\"},{start:1,name:\"stop\",type:\"number\"},{start:2,name:\"step\",type:\"number\",defaultValue:0}],attrs:[{tfName:\"Tidx\",name:\"dtype\",type:\"dtype\"}]},{tfOpName:\"TruncatedNormal\",category:\"creation\",inputs:[{start:0,name:\"shape\",type:\"number[]\"}],attrs:[{tfName:\"means\",name:\"mean\",type:\"number\",defaultValue:0},{tfName:\"stddev\",name:\"stdDev\",type:\"number\",defaultValue:1},{tfName:\"seed\",name:\"seed\",type:\"number\"},{tfName:\"seed2\",name:\"seed2\",type:\"number\",defaultValue:0,notSupported:!0},{tfName:\"dtype\",name:\"dtype\",type:\"dtype\"},{tfName:\"T\",name:\"T\",type:\"number\",notSupported:!0}]},{tfOpName:\"Zeros\",category:\"creation\",inputs:[{start:0,name:\"shape\",type:\"number[]\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\"}]},{tfOpName:\"ZerosLike\",category:\"creation\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\"}]},{tfOpName:\"Multinomial\",category:\"creation\",inputs:[{start:0,name:\"logits\",type:\"tensor\"},{start:1,name:\"numSamples\",type:\"number\"}],attrs:[{tfName:\"seed\",name:\"seed\",type:\"number\"},{tfName:\"seed2\",name:\"seed2\",type:\"number\"},{tfName:\"T\",name:\"dtype\",type:\"dtype\"},{tfName:\"output_dtype\",name:\"output_dtype\",type:\"dtype\"}]}],creation=Object.freeze({json:json$4}),json$5=[{tfOpName:\"NonMaxSuppressionV2\",category:\"dynamic\",inputs:[{start:0,name:\"boxes\",type:\"tensor\"},{start:1,name:\"scores\",type:\"tensor\"},{start:2,name:\"maxOutputSize\",type:\"number\"},{start:3,name:\"iouThreshold\",type:\"number\"}]},{tfOpName:\"NonMaxSuppressionV3\",category:\"dynamic\",inputs:[{start:0,name:\"boxes\",type:\"tensor\"},{start:1,name:\"scores\",type:\"tensor\"},{start:2,name:\"maxOutputSize\",type:\"number\"},{start:3,name:\"iouThreshold\",type:\"number\"},{start:4,name:\"scoreThreshold\",type:\"number\"}]},{tfOpName:\"NonMaxSuppressionV5\",category:\"dynamic\",inputs:[{start:0,name:\"boxes\",type:\"tensor\"},{start:1,name:\"scores\",type:\"tensor\"},{start:2,name:\"maxOutputSize\",type:\"number\"},{start:3,name:\"iouThreshold\",type:\"number\"},{start:4,name:\"scoreThreshold\",type:\"number\"},{start:5,name:\"softNmsSigma\",type:\"number\"}]},{tfOpName:\"Where\",category:\"dynamic\",inputs:[{start:0,name:\"condition\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"ListDiff\",category:\"dynamic\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"y\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]}],dynamic=Object.freeze({json:json$5}),json$6=[{tfOpName:\"TopKV2\",category:\"evaluation\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"k\",type:\"number\"}],attrs:[{tfName:\"sorted\",name:\"sorted\",type:\"bool\"}]}],evaluation=Object.freeze({json:json$6}),json$7=[{tfOpName:\"PlaceholderWithDefault\",category:\"graph\",inputs:[{start:0,name:\"default\",type:\"tensor\"}],attrs:[{tfName:\"shape\",name:\"shape\",type:\"shape\"},{tfName:\"dtype\",name:\"dtype\",type:\"dtype\"}]},{tfOpName:\"Placeholder\",category:\"graph\",attrs:[{tfName:\"shape\",name:\"shape\",type:\"shape\"},{tfName:\"dtype\",name:\"dtype\",type:\"dtype\"}]},{tfOpName:\"Const\",category:\"graph\"},{tfOpName:\"Identity\",category:\"graph\",inputs:[{start:0,name:\"x\",type:\"tensor\"}]},{tfOpName:\"IdentityN\",category:\"graph\",inputs:[{start:0,end:0,name:\"x\",type:\"tensors\"}]},{tfOpName:\"Snapshot\",category:\"graph\",inputs:[{start:0,name:\"x\",type:\"tensor\"}]},{tfOpName:\"Rank\",category:\"graph\",inputs:[{start:0,name:\"x\",type:\"tensor\"}]},{tfOpName:\"Size\",category:\"graph\",inputs:[{start:0,name:\"x\",type:\"tensor\"}]},{tfOpName:\"Shape\",category:\"graph\",inputs:[{start:0,name:\"x\",type:\"tensor\"}]},{tfOpName:\"ShapeN\",category:\"graph\",inputs:[{start:0,end:0,name:\"x\",type:\"tensors\"}]},{tfOpName:\"Print\",category:\"graph\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"data\",type:\"tensors\"}],attrs:[{tfName:\"message\",name:\"message\",type:\"string\"},{tfName:\"first_n\",name:\"firstN\",type:\"number\",notSupported:!0},{tfName:\"summarize\",name:\"summarize\",type:\"number\",defaultValue:3}]},{tfOpName:\"NoOp\",category:\"graph\",inputs:[]},{tfOpName:\"StopGradient\",category:\"graph\",inputs:[{start:0,name:\"x\",type:\"tensor\"}]},{tfOpName:\"FakeQuantWithMinMaxVars\",category:\"graph\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"min\",name:\"min\",type:\"number\"},{tfName:\"max\",name:\"max\",type:\"number\"}]}],graph=Object.freeze({json:json$7}),json$8=[{tfOpName:\"ResizeBilinear\",category:\"image\",inputs:[{start:0,name:\"images\",type:\"tensor\"},{start:1,name:\"size\",type:\"number[]\"}],attrs:[{tfName:\"align_corners\",name:\"alignCorners\",type:\"bool\"},{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"ResizeNearestNeighbor\",category:\"image\",inputs:[{start:0,name:\"images\",type:\"tensor\"},{start:1,name:\"size\",type:\"number[]\"}],attrs:[{tfName:\"align_corners\",name:\"alignCorners\",type:\"bool\"},{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"CropAndResize\",category:\"image\",inputs:[{start:0,name:\"image\",type:\"tensor\"},{start:1,name:\"boxes\",type:\"tensor\"},{start:2,name:\"boxInd\",type:\"tensor\"},{start:3,name:\"cropSize\",type:\"number[]\"}],attrs:[{tfName:\"method\",name:\"method\",type:\"string\"},{tfName:\"extrapolation_value\",name:\"extrapolationValue\",type:\"number\"}]}],image$1=Object.freeze({json:json$8}),json$9=[{tfOpName:\"Equal\",category:\"logical\",inputs:[{start:0,name:\"a\",type:\"tensor\"},{start:1,name:\"b\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"NotEqual\",category:\"logical\",inputs:[{start:0,name:\"a\",type:\"tensor\"},{start:1,name:\"b\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Greater\",category:\"logical\",inputs:[{start:0,name:\"a\",type:\"tensor\"},{start:1,name:\"b\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"GreaterEqual\",category:\"logical\",inputs:[{start:0,name:\"a\",type:\"tensor\"},{start:1,name:\"b\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Less\",category:\"logical\",inputs:[{start:0,name:\"a\",type:\"tensor\"},{start:1,name:\"b\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"LessEqual\",category:\"logical\",inputs:[{start:0,name:\"a\",type:\"tensor\"},{start:1,name:\"b\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"LogicalAnd\",category:\"logical\",inputs:[{start:0,name:\"a\",type:\"tensor\"},{start:1,name:\"b\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"LogicalNot\",category:\"logical\",inputs:[{start:0,name:\"a\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"LogicalOr\",category:\"logical\",inputs:[{start:0,name:\"a\",type:\"tensor\"},{start:1,name:\"b\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Select\",category:\"logical\",inputs:[{start:0,name:\"condition\",type:\"tensor\"},{start:1,name:\"a\",type:\"tensor\"},{start:2,name:\"b\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"SelectV2\",category:\"logical\",inputs:[{start:0,name:\"condition\",type:\"tensor\"},{start:1,name:\"a\",type:\"tensor\"},{start:2,name:\"b\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]}],logical=Object.freeze({json:json$9}),json$10=[{tfOpName:\"_FusedMatMul\",category:\"matrices\",inputs:[{start:0,name:\"a\",type:\"tensor\"},{start:1,name:\"b\",type:\"tensor\"},{start:2,end:0,name:\"args\",type:\"tensors\"}],attrs:[{tfName:\"num_args\",name:\"numArgs\",type:\"number\"},{tfName:\"fused_ops\",name:\"fusedOps\",type:\"string[]\",defaultValue:[]},{tfName:\"epsilon\",name:\"epsilon\",type:\"number\",defaultValue:1e-4},{tfName:\"transpose_a\",name:\"transposeA\",type:\"bool\",defaultValue:!1},{tfName:\"transpose_b\",name:\"transposeB\",type:\"bool\",defaultValue:!1},{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"MatMul\",category:\"matrices\",inputs:[{start:0,name:\"a\",type:\"tensor\"},{start:1,name:\"b\",type:\"tensor\"}],attrs:[{tfName:\"transpose_a\",name:\"transposeA\",type:\"bool\",defaultValue:!1},{tfName:\"transpose_b\",name:\"transposeB\",type:\"bool\",defaultValue:!1},{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"BatchMatMul\",category:\"matrices\",inputs:[{start:0,name:\"a\",type:\"tensor\"},{start:1,name:\"b\",type:\"tensor\"}],attrs:[{tfName:\"adj_x\",name:\"transposeA\",type:\"bool\",defaultValue:!1},{tfName:\"adj_y\",name:\"transposeB\",type:\"bool\",defaultValue:!1},{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"BatchMatMulV2\",category:\"matrices\",inputs:[{start:0,name:\"a\",type:\"tensor\"},{start:1,name:\"b\",type:\"tensor\"}],attrs:[{tfName:\"adj_x\",name:\"transposeA\",type:\"bool\",defaultValue:!1},{tfName:\"adj_y\",name:\"transposeB\",type:\"bool\",defaultValue:!1},{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Transpose\",category:\"matrices\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"perm\",type:\"number[]\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]}],matrices=Object.freeze({json:json$10}),json$11=[{tfOpName:\"FusedBatchNorm\",category:\"normalization\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"scale\",type:\"tensor\"},{start:2,name:\"offset\",type:\"tensor\"},{start:3,name:\"mean\",type:\"tensor\"},{start:4,name:\"variance\",type:\"tensor\"}],attrs:[{tfName:\"epsilon\",name:\"epsilon\",type:\"number\",defaultValue:.001},{tfName:\"data_format\",name:\"dataFormat\",type:\"string\",notSupported:!0}]},{tfOpName:\"FusedBatchNormV2\",category:\"normalization\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"scale\",type:\"tensor\"},{start:2,name:\"offset\",type:\"tensor\"},{start:3,name:\"mean\",type:\"tensor\"},{start:4,name:\"variance\",type:\"tensor\"}],attrs:[{tfName:\"epsilon\",name:\"epsilon\",type:\"number\",defaultValue:.001},{tfName:\"data_format\",name:\"dataFormat\",type:\"string\",notSupported:!0}]},{tfOpName:\"FusedBatchNormV3\",category:\"normalization\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"scale\",type:\"tensor\"},{start:2,name:\"offset\",type:\"tensor\"},{start:3,name:\"mean\",type:\"tensor\"},{start:4,name:\"variance\",type:\"tensor\"}],attrs:[{tfName:\"epsilon\",name:\"epsilon\",type:\"number\",defaultValue:.001},{tfName:\"data_format\",name:\"dataFormat\",type:\"string\",notSupported:!0}]},{tfOpName:\"LRN\",category:\"normalization\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"depth_radius\",name:\"radius\",type:\"number\",defaultValue:5},{tfName:\"bias\",name:\"bias\",type:\"number\",defaultValue:1},{tfName:\"alpha\",name:\"alpha\",type:\"number\",defaultValue:1},{tfName:\"beta\",name:\"beta\",type:\"number\",defaultValue:.5}]},{tfOpName:\"Softmax\",category:\"normalization\",inputs:[{start:0,name:\"x\",type:\"tensor\"}]},{tfOpName:\"LogSoftmax\",category:\"normalization\",inputs:[{start:0,name:\"x\",type:\"tensor\"}]},{tfOpName:\"SparseToDense\",category:\"normalization\",inputs:[{start:0,name:\"sparseIndices\",type:\"tensor\"},{start:1,name:\"outputShape\",type:\"number[]\"},{start:2,name:\"sparseValues\",type:\"tensor\"},{start:3,name:\"defaultValue\",type:\"tensor\"}],attrs:[{tfName:\"validate_indices\",name:\"validateIndices\",type:\"bool\",defaultValue:!0,notSupported:!0}]}],normalization=Object.freeze({json:json$11}),json$12=[{tfOpName:\"Max\",category:\"reduction\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"axis\",type:\"number[]\"}],attrs:[{tfName:\"keep_dims\",name:\"keepDims\",type:\"bool\"}]},{tfOpName:\"Mean\",category:\"reduction\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"axis\",type:\"number[]\"}],attrs:[{tfName:\"keep_dims\",name:\"keepDims\",type:\"bool\"}]},{tfOpName:\"Min\",category:\"reduction\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"axis\",type:\"number[]\"}],attrs:[{tfName:\"keep_dims\",name:\"keepDims\",type:\"bool\"}]},{tfOpName:\"Sum\",category:\"reduction\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"axis\",type:\"number[]\"}],attrs:[{tfName:\"keep_dims\",name:\"keepDims\",type:\"bool\"}]},{tfOpName:\"All\",category:\"reduction\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"axis\",type:\"number[]\"}],attrs:[{tfName:\"keep_dims\",name:\"keepDims\",type:\"bool\"}]},{tfOpName:\"Any\",category:\"reduction\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"axis\",type:\"number[]\"}],attrs:[{tfName:\"keep_dims\",name:\"keepDims\",type:\"bool\"}]},{tfOpName:\"ArgMax\",category:\"reduction\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"axis\",type:\"number\"}]},{tfOpName:\"ArgMin\",category:\"reduction\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"axis\",type:\"number\"}]},{tfOpName:\"Prod\",category:\"reduction\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"axis\",type:\"number[]\"}],attrs:[{tfName:\"keep_dims\",name:\"keepDims\",type:\"bool\"}]}],reduction=Object.freeze({json:json$12}),json$13=[{tfOpName:\"ConcatV2\",category:\"slice_join\",inputs:[{start:0,end:-1,name:\"tensors\",type:\"tensors\"},{start:-1,name:\"axis\",type:\"number\"}],attrs:[{tfName:\"N\",name:\"n\",type:\"number\",defaultValue:2}]},{tfOpName:\"Concat\",category:\"slice_join\",inputs:[{start:1,end:0,name:\"tensors\",type:\"tensors\"},{start:0,name:\"axis\",type:\"number\"}],attrs:[{tfName:\"N\",name:\"n\",type:\"number\",defaultValue:2}]},{tfOpName:\"GatherV2\",category:\"slice_join\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"indices\",type:\"tensor\"},{start:2,name:\"axis\",type:\"number\",defaultValue:0}]},{tfOpName:\"Gather\",category:\"slice_join\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"indices\",type:\"tensor\"}],attrs:[{tfName:\"axis\",name:\"axis\",type:\"number\",defaultValue:0},{tfName:\"validate_indices\",name:\"validateIndices\",type:\"bool\",notSupported:!0}]},{tfOpName:\"Reverse\",category:\"slice_join\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"dims\",type:\"bool\",notSupported:!0}]},{tfOpName:\"ReverseV2\",category:\"slice_join\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"axis\",type:\"number[]\"}]},{tfOpName:\"Slice\",category:\"slice_join\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"begin\",type:\"number[]\"},{start:2,name:\"size\",type:\"number[]\"}]},{tfOpName:\"StridedSlice\",category:\"slice_join\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"begin\",type:\"number[]\"},{start:2,name:\"end\",type:\"number[]\"},{start:3,name:\"strides\",type:\"number[]\"}],attrs:[{tfName:\"begin_mask\",name:\"beginMask\",type:\"number\",defaultValue:0},{tfName:\"end_mask\",name:\"endMask\",type:\"number\",defaultValue:0},{tfName:\"new_axis_mask\",name:\"newAxisMask\",type:\"number\",defaultValue:0},{tfName:\"ellipsis_mask\",name:\"ellipsisMask\",type:\"number\",defaultValue:0},{tfName:\"shrink_axis_mask\",name:\"shrinkAxisMask\",type:\"number\",defaultValue:0}]},{tfOpName:\"Pack\",category:\"slice_join\",inputs:[{start:0,end:0,name:\"tensors\",type:\"tensors\"}],attrs:[{tfName:\"axis\",name:\"axis\",type:\"number\",defaultValue:0}]},{tfOpName:\"Unpack\",category:\"slice_join\",inputs:[{start:0,name:\"tensor\",type:\"tensor\"}],attrs:[{tfName:\"axis\",name:\"axis\",type:\"number\",defaultValue:0},{tfName:\"num\",name:\"num\",type:\"number\",defaultValue:0,notSupported:!0}]},{tfOpName:\"Tile\",category:\"slice_join\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"reps\",type:\"number[]\"}]},{tfOpName:\"Split\",category:\"slice_join\",inputs:[{start:0,name:\"axis\",type:\"number\",defaultValue:0},{start:1,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"num_split\",name:\"numOrSizeSplits\",type:\"number\",defaultValue:1}]},{tfOpName:\"SplitV\",category:\"slice_join\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"numOrSizeSplits\",type:\"number[]\"},{start:2,name:\"axis\",type:\"number\",defaultValue:0}]},{tfOpName:\"ScatterNd\",category:\"slice_join\",inputs:[{start:0,name:\"indices\",type:\"tensor\"},{start:1,name:\"values\",type:\"tensor\"},{start:2,name:\"shape\",type:\"number[]\"}]},{tfOpName:\"GatherNd\",category:\"slice_join\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"indices\",type:\"tensor\"}]},{tfOpName:\"SparseToDense\",category:\"slice_join\",inputs:[{start:0,name:\"sparseIndices\",type:\"tensor\"},{start:1,name:\"outputShape\",type:\"number[]\"},{start:2,name:\"sparseValues\",type:\"tensor\"},{start:3,name:\"defaultValue\",type:\"tensor\"}],attrs:[{tfName:\"validate_indices\",name:\"validateIndices\",type:\"bool\",defaultValue:!1,notSupported:!0}]}],sliceJoin=Object.freeze({json:json$13}),json$14=[{tfOpName:\"FFT\",category:\"spectral\",inputs:[{start:0,name:\"x\",type:\"tensor\"}]},{tfOpName:\"IFFT\",category:\"spectral\",inputs:[{start:0,name:\"x\",type:\"tensor\"}]},{tfOpName:\"RFFT\",category:\"spectral\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"fft_length\",type:\"number\",notSupported:!0}]},{tfOpName:\"IRFFT\",category:\"spectral\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"fft_length\",type:\"number\",notSupported:!0}]}],spectral=Object.freeze({json:json$14}),json$15=[{tfOpName:\"Cast\",category:\"transformation\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"SrcT\",name:\"sdtype\",type:\"dtype\",notSupported:!0},{tfName:\"DstT\",name:\"dtype\",type:\"dtype\"}]},{tfOpName:\"ExpandDims\",category:\"transformation\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"axis\",type:\"number\"}]},{tfOpName:\"Pad\",category:\"transformation\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"padding\",type:\"number[]\"}],attrs:[{tfName:\"constant_value\",name:\"constantValue\",type:\"number\",defaultValue:0}]},{tfOpName:\"PadV2\",category:\"transformation\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"padding\",type:\"number[]\"},{start:2,name:\"constantValue\",type:\"number\",defaultValue:0}]},{tfOpName:\"Reshape\",category:\"transformation\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"shape\",type:\"number[]\"}]},{tfOpName:\"Squeeze\",category:\"transformation\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"axis\",tfDeprecatedName:\"squeeze_dims\",name:\"axis\",type:\"number[]\"}]},{tfOpName:\"SpaceToBatchND\",category:\"transformation\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"blockShape\",type:\"number[]\"},{start:2,name:\"paddings\",type:\"number[]\"}]},{tfOpName:\"BatchToSpaceND\",category:\"transformation\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"blockShape\",type:\"number[]\"},{start:2,name:\"crops\",type:\"number[]\"}]},{tfOpName:\"DepthToSpace\",category:\"transformation\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"block_size\",name:\"blockSize\",type:\"number\"},{tfName:\"data_format\",name:\"dataFormat\",type:\"string\"}]}],transformation=Object.freeze({json:json$15}),OperationMapper=function(){function e(){var e=[arithmetic,basicMath,control,convolution,creation,dynamic,evaluation,logical,image$1,graph,matrices,normalization,reduction,sliceJoin,spectral,transformation],t=[].concat.apply([],e.map(function(e){return e.json}));this.opMappers=t.reduce(function(e,t){return e[t.tfOpName]=t,e},{})}return Object.defineProperty(e,\"Instance\",{get:function(){return this._instance||(this._instance=new this)},enumerable:!0,configurable:!0}),e.prototype.transformGraph=function(e,t){var a=this;void 0===t&&(t={});var r=[],n=[],s=e.node.reduce(function(e,t){return e[t.name]=a.mapNode(t),t.op.startsWith(\"Placeholder\")&&r.push(e[t.name]),\"Const\"===t.op&&n.push(e[t.name]),e},{}),o=[],p=[],u={},i={};null!=t&&(u=this.mapSignatureEntries(t.inputs),i=this.mapSignatureEntries(t.outputs));var m=Object.keys(s);return m.forEach(function(e){var t=s[e];t.inputNames.forEach(function(e){var a=getNodeNameAndIndex(e)[0];t.inputs.push(s[a]),s[a].children.push(t)})}),0===Object.keys(i).length?m.forEach(function(e){var t=s[e];0===t.children.length&&p.push(t)}):Object.keys(i).forEach(function(e){var t=getNodeNameAndIndex(e)[0],a=s[t];null!=a&&(a.signatureKey=i[e],p.push(a))}),Object.keys(u).length>0?Object.keys(u).forEach(function(e){var t=getNodeNameAndIndex(e)[0],a=s[t];a&&(a.signatureKey=u[e],o.push(a))}):o=r,{nodes:s,inputs:o,outputs:p,weights:n,placeholders:r,signature:t}},e.prototype.mapSignatureEntries=function(e){return Object.keys(e||{}).reduce(function(t,a){return t[e[a].name]=a,t},{})},e.prototype.mapNode=function(e){var t=getRegisteredOp(e.op)||this.opMappers[e.op]||{};null==e.attr&&(e.attr={});var a={name:e.name,op:e.op,category:t.category,inputNames:(e.input||[]).map(function(e){return e.startsWith(\"^\")?e.substr(1):e}),inputs:[],children:[],inputParams:{},attrParams:{},rawAttrs:e.attr};return null!=t.inputs&&(a.inputParams=t.inputs.reduce(function(e,t){return e[t.name]={type:t.type,inputIndexStart:t.start,inputIndexEnd:t.end},e},{})),null!=t.attrs&&(a.attrParams=t.attrs.reduce(function(t,a){var r=a.type,n=void 0;switch(a.type){case\"string\":void 0===(n=getStringParam(e.attr,a.tfName,a.defaultValue))&&a.tfDeprecatedName&&(n=getStringParam(e.attr,a.tfDeprecatedName,a.defaultValue));break;case\"string[]\":void 0===(n=getStringArrayParam(e.attr,a.tfName,a.defaultValue))&&a.tfDeprecatedName&&(n=getStringArrayParam(e.attr,a.tfDeprecatedName,a.defaultValue));break;case\"number\":void 0===(n=getNumberParam(e.attr,a.tfName,a.defaultValue||0))&&a.tfDeprecatedName&&(n=getNumberParam(e.attr,a.tfDeprecatedName,a.defaultValue));break;case\"number[]\":void 0===(n=getNumericArrayParam(e.attr,a.tfName,a.defaultValue))&&a.tfDeprecatedName&&(n=getNumericArrayParam(e.attr,a.tfDeprecatedName,a.defaultValue));break;case\"bool\":void 0===(n=getBoolParam(e.attr,a.tfName,a.defaultValue))&&a.tfDeprecatedName&&(n=getBoolParam(e.attr,a.tfDeprecatedName,a.defaultValue));break;case\"bool[]\":void 0===(n=getBoolArrayParam(e.attr,a.tfName,a.defaultValue))&&a.tfDeprecatedName&&(n=getBoolArrayParam(e.attr,a.tfDeprecatedName,a.defaultValue));break;case\"shape\":void 0===(n=getTensorShapeParam(e.attr,a.tfName,a.defaultValue))&&a.tfDeprecatedName&&(n=getTensorShapeParam(e.attr,a.tfDeprecatedName,a.defaultValue));break;case\"shape[]\":void 0===(n=getTensorShapeArrayParam(e.attr,a.tfName,a.defaultValue))&&a.tfDeprecatedName&&(n=getTensorShapeArrayParam(e.attr,a.tfDeprecatedName,a.defaultValue));break;case\"dtype\":void 0===(n=getDtypeParam(e.attr,a.tfName,a.defaultValue))&&a.tfDeprecatedName&&(n=getDtypeParam(e.attr,a.tfDeprecatedName,a.defaultValue));break;case\"dtype[]\":void 0===(n=getDtypeArrayParam(e.attr,a.tfName,a.defaultValue))&&a.tfDeprecatedName&&(n=getDtypeArrayParam(e.attr,a.tfDeprecatedName,a.defaultValue));break;case\"tensor\":case\"tensors\":break;default:throw new Error(\"Unsupported param type: \"+a.type+\" for op: \"+e.op)}return t[a.name]={value:n,type:r},t},{})),a},e}();function decodeBase64(e){var t=env().global;if(void 0!==t.atob)return t.atob(e);if(\"undefined\"!=typeof Buffer)return new Buffer(e,\"base64\").toString();throw new Error(\"Unable to decode base64 in this environment. Missing built-in atob() or Buffer()\")}function parseStringParam(e,t){var a=Array.isArray(e)?String.fromCharCode.apply(null,e):decodeBase64(e);return t?a:a.toLowerCase()}function getStringParam(e,t,a,r){void 0===r&&(r=!1);var n=e[t];return null!=n?parseStringParam(n.s,r):a}function getBoolParam(e,t,a){var r=e[t];return r?r.b:a}function getNumberParam(e,t,a){var r=e[t]||{},n=null!=r.i?r.i:null!=r.f?r.f:a;return\"number\"==typeof n?n:parseInt(n,10)}function parseDtypeParam(e){switch(\"string\"==typeof e&&(e=DataType[e]),e){case DataType.DT_FLOAT:return\"float32\";case DataType.DT_INT32:case DataType.DT_INT64:case DataType.DT_INT8:case DataType.DT_UINT8:return\"int32\";case DataType.DT_BOOL:return\"bool\";case DataType.DT_DOUBLE:return\"float32\";case DataType.DT_STRING:return\"string\";default:return null}}function getDtypeParam(e,t,a){var r=e[t];return r&&r.type?parseDtypeParam(r.type):a}function getDtypeArrayParam(e,t,a){var r=e[t];return r&&r.list&&r.list.type?r.list.type.map(function(e){return parseDtypeParam(e)}):a}function parseTensorShapeParam(e){if(!e.unknownRank)return null!=e.dim?e.dim.map(function(e){return\"number\"==typeof e.size?e.size:parseInt(e.size,10)}):[]}function getTensorShapeParam(e,t,a){var r=e[t];return r&&r.shape?parseTensorShapeParam(r.shape):a}function getNumericArrayParam(e,t,a){var r=e[t];return r?((r.list.f&&r.list.f.length?r.list.f:r.list.i)||[]).map(function(e){return\"number\"==typeof e?e:parseInt(e,10)}):a}function getStringArrayParam(e,t,a,r){void 0===r&&(r=!1);var n=e[t];return n&&n.list&&n.list.s?n.list.s.map(function(e){return parseStringParam(e,r)}):a}function getTensorShapeArrayParam(e,t,a){var r=e[t];return r&&r.list&&r.list.shape?r.list.shape.map(function(e){return parseTensorShapeParam(e)}):a}function getBoolArrayParam(e,t,a){var r=e[t];return r&&r.list&&r.list.b?r.list.b:a}var NodeValueImpl=function(){function e(e,t,a){var r=this;this.node=e,this.tensorMap=t,this.context=a,this.inputs=[],this.attrs={},this.inputs=e.inputNames.map(function(e){return r.getInput(e)}),null!=e.rawAttrs&&(this.attrs=Object.keys(e.rawAttrs).reduce(function(e,t){return e[t]=r.getAttr(t),e},{}))}return e.prototype.getInput=function(e){return getTensor(e,this.tensorMap,this.context)},e.prototype.getAttr=function(e,t){var a=this.node.rawAttrs[e];if(null!=a.tensor)return getTensor(e,this.tensorMap,this.context);if(null!=a.i||null!=a.f)return getNumberParam(this.node.rawAttrs,e,t);if(null!=a.s)return getStringParam(this.node.rawAttrs,e,t);if(null!=a.b)return getBoolParam(this.node.rawAttrs,e,t);if(null!=a.shape)return getTensorShapeParam(this.node.rawAttrs,e,t);if(null!=a.type)return getDtypeParam(this.node.rawAttrs,e,t);if(null!=a.list){if(null!=a.list.i||null!=a.list.f)return getNumericArrayParam(this.node.rawAttrs,e,t);if(null!=a.list.s)return getStringArrayParam(this.node.rawAttrs,e,t);if(null!=a.list.shape)return getTensorShapeArrayParam(this.node.rawAttrs,e,t);if(null!=a.list.b)return getBoolArrayParam(this.node.rawAttrs,e,t);if(null!=a.list.type)return getDtypeArrayParam(this.node.rawAttrs,e,t)}return t},e}(),executeOp=function(e,t,a){switch(e.op){case\"BiasAdd\":case\"AddV2\":case\"Add\":return[add(getParamValue(\"a\",e,t,a),getParamValue(\"b\",e,t,a))];case\"AddN\":return[addN(getParamValue(\"tensors\",e,t,a))];case\"FloorMod\":case\"Mod\":return[mod(getParamValue(\"a\",e,t,a),getParamValue(\"b\",e,t,a))];case\"Mul\":return[mul(getParamValue(\"a\",e,t,a),getParamValue(\"b\",e,t,a))];case\"RealDiv\":case\"Div\":return[div(getParamValue(\"a\",e,t,a),getParamValue(\"b\",e,t,a))];case\"DivNoNan\":return[divNoNan(getParamValue(\"a\",e,t,a),getParamValue(\"b\",e,t,a))];case\"FloorDiv\":return[floorDiv(getParamValue(\"a\",e,t,a),getParamValue(\"b\",e,t,a))];case\"Sub\":return[sub(getParamValue(\"a\",e,t,a),getParamValue(\"b\",e,t,a))];case\"Minimum\":return[minimum(getParamValue(\"a\",e,t,a),getParamValue(\"b\",e,t,a))];case\"Maximum\":return[maximum(getParamValue(\"a\",e,t,a),getParamValue(\"b\",e,t,a))];case\"Pow\":return[pow(getParamValue(\"a\",e,t,a),getParamValue(\"b\",e,t,a))];case\"SquaredDifference\":return[squaredDifference(getParamValue(\"a\",e,t,a),getParamValue(\"b\",e,t,a))];default:throw TypeError(\"Node type \"+e.op+\" is not implemented\")}},executeOp$1=function(e,t,a){switch(e.op){case\"Abs\":case\"ComplexAbs\":return[abs(getParamValue(\"x\",e,t,a))];case\"Acos\":return[acos(getParamValue(\"x\",e,t,a))];case\"Acosh\":return[acosh(getParamValue(\"x\",e,t,a))];case\"Asin\":return[asin(getParamValue(\"x\",e,t,a))];case\"Asinh\":return[asinh(getParamValue(\"x\",e,t,a))];case\"Atan\":return[atan(getParamValue(\"x\",e,t,a))];case\"Atan2\":return[atan2(getParamValue(\"x\",e,t,a),getParamValue(\"y\",e,t,a))];case\"Atanh\":return[atanh(getParamValue(\"x\",e,t,a))];case\"Ceil\":return[ceil(getParamValue(\"x\",e,t,a))];case\"Complex\":return[complex(getParamValue(\"real\",e,t,a),getParamValue(\"imag\",e,t,a))];case\"Cos\":return[cos(getParamValue(\"x\",e,t,a))];case\"Cosh\":return[cosh(getParamValue(\"x\",e,t,a))];case\"Elu\":return[elu(getParamValue(\"x\",e,t,a))];case\"Erf\":return[erf(getParamValue(\"x\",e,t,a))];case\"Exp\":return[exp(getParamValue(\"x\",e,t,a))];case\"Expm1\":return[expm1(getParamValue(\"x\",e,t,a))];case\"Floor\":return[floor(getParamValue(\"x\",e,t,a))];case\"Log\":return[log(getParamValue(\"x\",e,t,a))];case\"Log1p\":return[log1p(getParamValue(\"x\",e,t,a))];case\"Imag\":return[imag(getParamValue(\"x\",e,t,a))];case\"Neg\":return[neg(getParamValue(\"x\",e,t,a))];case\"Reciprocal\":return[reciprocal(getParamValue(\"x\",e,t,a))];case\"Real\":return[real(getParamValue(\"x\",e,t,a))];case\"Relu\":return[relu(getParamValue(\"x\",e,t,a))];case\"Round\":return[round(getParamValue(\"x\",e,t,a))];case\"Selu\":return[selu(getParamValue(\"x\",e,t,a))];case\"Sigmoid\":return[sigmoid(getParamValue(\"x\",e,t,a))];case\"Sin\":return[sin(getParamValue(\"x\",e,t,a))];case\"Sign\":return[sign(getParamValue(\"x\",e,t,a))];case\"Sinh\":return[sinh(getParamValue(\"x\",e,t,a))];case\"Softplus\":return[softplus(getParamValue(\"x\",e,t,a))];case\"Sqrt\":return[sqrt(getParamValue(\"x\",e,t,a))];case\"Square\":return[square(getParamValue(\"x\",e,t,a))];case\"Tanh\":return[tanh(getParamValue(\"x\",e,t,a))];case\"Tan\":return[tan(getParamValue(\"x\",e,t,a))];case\"Relu6\":case\"ClipByValue\":return[clipByValue(getParamValue(\"x\",e,t,a),getParamValue(\"clipValueMin\",e,t,a),getParamValue(\"clipValueMax\",e,t,a))];case\"Rsqrt\":return[rsqrt(getTensor(e.inputNames[0],t,a))];case\"Prod\":return[prod(getParamValue(\"x\",e,t,a),getParamValue(\"axes\",e,t,a))];case\"LeakyRelu\":return[leakyRelu(getParamValue(\"x\",e,t,a),getParamValue(\"alpha\",e,t,a))];case\"Prelu\":return[prelu(getParamValue(\"x\",e,t,a),getParamValue(\"alpha\",e,t,a))];default:throw TypeError(\"Node type \"+e.op+\" is not implemented\")}},TensorArray=function(){function e(t,a,r,n,s,o,p){this.name=t,this.dtype=a,this.maxSize=r,this.elementShape=n,this.identicalElementShapes=s,this.dynamicSize=o,this.clearAfterRead=p,this.tensors=[],this.closed_=!1,this.id=e.nextId++}return Object.defineProperty(e.prototype,\"closed\",{get:function(){return this.closed_},enumerable:!0,configurable:!0}),e.prototype.clearAndClose=function(){this.tensors.forEach(function(e){return e.tensor.dispose()}),this.tensors=[],this.closed_=!0},e.prototype.size=function(){return this.tensors.length},e.prototype.read=function(e){if(this.closed_)throw new Error(\"TensorArray \"+this.name+\" has already been closed.\");if(e<0||e>=this.tensors.length)throw new Error(\"Tried to read from index \"+e+\", but array size is: \"+this.tensors.length);var t=this.tensors[e];if(t.cleared)throw new Error(\"TensorArray \"+this.name+\": Could not read index \"+e+\" twice because it was cleared after a previous read (perhaps try setting clear_after_read = false?).\");return this.clearAfterRead&&(t.cleared=!0),t.read=!0,t.tensor},e.prototype.readMany=function(e){var t=this;return e.map(function(e){return t.read(e)})},e.prototype.write=function(e,t){if(this.closed_)throw new Error(\"TensorArray \"+this.name+\" has already been closed.\");if(e<0||!this.dynamicSize&&e>=this.maxSize)throw new Error(\"Tried to write to index \"+e+\", but array is not resizeable and size is: \"+this.maxSize);var a=this.tensors[e]||{};if(t.dtype!==this.dtype)throw new Error(\"TensorArray \"+this.name+\": Could not write to TensorArray index \"+e+\",\\n          because the value dtype is \"+t.dtype+\", but TensorArray dtype is \"+this.dtype+\".\");if(0!==this.size()||null!=this.elementShape&&0!==this.elementShape.length||(this.elementShape=t.shape),this.assertShapesMatchAllowUndefinedSize(this.elementShape,t.shape,\"TensorArray \"+this.name+\": Could not write to TensorArray index \"+e+\".\"),a&&a.read)throw new Error(\"TensorArray \"+this.name+\": Could not write to TensorArray index \"+e+\", because it has already been read.\");if(a&&a.written)throw new Error(\"TensorArray \"+this.name+\": Could not write to TensorArray index \"+e+\", because it has already been written.\");a.tensor=t,a.written=!0,this.tensors[e]=a},e.prototype.writeMany=function(e,t){var a=this;if(e.length!==t.length)throw new Error(\"TensorArray \"+this.name+\": could not write multiple tensors,because the index size: \"+e.length+\" is not the same as tensors size: \"+t.length+\".\");e.forEach(function(e,r){return a.write(e,t[r])})},e.prototype.gather=function(e,t){if(t&&t!==this.dtype)throw new Error(\"TensorArray dtype is \"+this.dtype+\" but gather requested dtype \"+t);if(!e){e=[];for(var a=0;a<this.size();a++)e.push(a)}if(0===e.length)return tensor([],[0].concat(this.elementShape));var r=this.readMany(e);return this.assertShapesMatchAllowUndefinedSize(this.elementShape,r[0].shape,\"TensorArray shape mismatch: \"),stack(r,0)},e.prototype.concat=function(e){if(e&&e!==this.dtype)throw new Error(\"TensorArray dtype is \"+this.dtype+\" but concat requested dtype \"+e);if(0===this.size())return tensor([],[0].concat(this.elementShape));for(var t=[],a=0;a<this.size();a++)t.push(a);var r=this.readMany(t);return this.assertShapesMatchAllowUndefinedSize(this.elementShape,r[0].shape,\"TensorArray shape mismatch: tensor array shape (\"+this.elementShape+\") vs first tensor shape (\"+r[0].shape+\")\"),concat(r,0)},e.prototype.scatter=function(e,t){if(t.dtype!==this.dtype)throw new Error(\"TensorArray dtype is \"+this.dtype+\" but tensor has dtype \"+t.dtype);if(e.length!==t.shape[0])throw new Error(\"Expected len(indices) == tensor.shape[0], but saw: \"+e.length+\" vs. \"+t.shape[0]);var a=Math.max.apply(Math,e);if(!this.dynamicSize&&a>=this.maxSize)throw new Error(\"Max index must be < array size (\"+a+\"  vs. \"+this.maxSize+\")\");this.writeMany(e,unstack(t,0))},e.prototype.split=function(e,t){var a=this;if(t.dtype!==this.dtype)throw new Error(\"TensorArray dtype is \"+this.dtype+\" but tensor has dtype \"+t.dtype);var r=0,n=e.map(function(e){return r+=e});if(r!==t.shape[0])throw new Error(\"Expected sum of lengths to be equal to\\n          tensor.shape[0], but sum of lengths is\\n        \"+r+\", and tensor's shape is: \"+t.shape);if(!this.dynamicSize&&e.length!==this.maxSize)throw new Error(\"TensorArray's size is not equal to the size of lengths (\"+this.maxSize+\" vs. \"+e.length+\"), and the TensorArray is not marked as dynamically resizeable\");var s=0===r?0:t.size/r,o=[];tidy(function(){t=t.reshape([1,r,s]);for(var p=0;p<e.length;++p){var u=[0,0===p?0:n[p-1],0],i=[1,e[p],s];o[p]=slice(t,u,i).reshape(a.elementShape)}return o});for(var p=[],u=0;u<e.length;u++)p[u]=u;this.writeMany(p,o)},e.prototype.assertShapesMatchAllowUndefinedSize=function(e,t,a){void 0===a&&(a=\"\"),util.assert(this.shapesEqualAllowUndefinedSize(e,t),function(){return a+\" Shapes \"+e+\" and \"+t+\" must match\"})},e.prototype.shapesEqualAllowUndefinedSize=function(e,t){if(e.length!==t.length)return!1;for(var a=0;a<e.length;a++)if(-1!==e[a]&&-1!==t[a]&&e[a]!==t[a])return!1;return!0},e.nextId=0,e}(),_this=void 0,executeOp$2=function(e,t,a){return __awaiter(_this,void 0,void 0,function(){var r,n,s,o,p,u,i,m,l,c,d,y,f,g,h,N,x,V,b,P,T,v,O,S,_,w,A,D,E,I,M,C,k,z,F;return __generator(this,function(j){switch(j.label){case 0:switch(e.op){case\"LoopCond\":return[3,1];case\"Switch\":return[3,2];case\"Merge\":return[3,4];case\"Enter\":return[3,5];case\"Exit\":return[3,6];case\"NextIteration\":return[3,7];case\"TensorArrayV3\":return[3,8];case\"TensorArrayWriteV3\":return[3,9];case\"TensorArrayReadV3\":return[3,10];case\"TensorArrayGatherV3\":return[3,11];case\"TensorArrayScatterV3\":return[3,12];case\"TensorArrayConcatV3\":return[3,13];case\"TensorArraySplitV3\":return[3,14];case\"TensorArraySizeV3\":return[3,15];case\"TensorArrayCloseV3\":return[3,16]}return[3,17];case 1:return[2,[getParamValue(\"pred\",e,t,a).clone()]];case 2:return r=getParamValue(\"pred\",e,t,a),n=getParamValue(\"data\",e,t,a),[4,r.data()];case 3:return[2,j.sent()[0]?[void 0,n.clone()]:[n.clone(),void 0]];case 4:return[2,(s=e.inputNames.find(function(e){return void 0!==getTensor(e,t,a)}))?[getTensor(s,t,a).clone()]:void 0];case 5:return o=getParamValue(\"frameName\",e,t,a),p=getParamValue(\"tensor\",e,t,a),a.enterFrame(o),[2,[p.clone()]];case 6:return u=getParamValue(\"tensor\",e,t,a),a.exitFrame(),[2,[u.clone()]];case 7:return i=getParamValue(\"tensor\",e,t,a),a.nextIteration(),[2,[i.clone()]];case 8:return m=getParamValue(\"size\",e,t,a),l=getParamValue(\"dtype\",e,t,a),c=getParamValue(\"elementShape\",e,t,a),d=getParamValue(\"dynamicSize\",e,t,a),y=getParamValue(\"clearAfterRead\",e,t,a),f=getParamValue(\"identicalElementShapes\",e,t,a),g=getParamValue(\"name\",e,t,a),h=new TensorArray(g,l,m,c,f,d,y),a.addTensorArray(h),[2,[scalar(h.id),scalar(1)]];case 9:return N=getParamValue(\"tensorArrayId\",e,t,a),x=getParamValue(\"index\",e,t,a),V=getParamValue(\"tensor\",e,t,a),a.getTensorArray(N).write(x,V),[2,[scalar(1)]];case 10:return b=getParamValue(\"tensorArrayId\",e,t,a),P=getParamValue(\"index\",e,t,a),[2,[a.getTensorArray(b).read(P)]];case 11:return T=getParamValue(\"tensorArrayId\",e,t,a),v=getParamValue(\"indices\",e,t,a),O=getParamValue(\"dtype\",e,t,a),[2,[a.getTensorArray(T).gather(v,O)]];case 12:return S=getParamValue(\"tensorArrayId\",e,t,a),_=getParamValue(\"indices\",e,t,a),w=getParamValue(\"tensor\",e,t,a),a.getTensorArray(S).scatter(_,w),[2,[scalar(1)]];case 13:return A=getParamValue(\"tensorArrayId\",e,t,a),D=a.getTensorArray(A),E=getParamValue(\"dtype\",e,t,a),[2,[D.concat(E)]];case 14:return I=getParamValue(\"tensorArrayId\",e,t,a),M=getParamValue(\"tensor\",e,t,a),C=getParamValue(\"lengths\",e,t,a),a.getTensorArray(I).split(C,M),[2,[scalar(1)]];case 15:return k=getParamValue(\"tensorArrayId\",e,t,a),z=a.getTensorArray(k),[2,[scalar(z.size(),\"int32\")]];case 16:return F=getParamValue(\"tensorArrayId\",e,t,a),a.getTensorArray(F).clearAndClose(),[2,[scalar(0)]];case 17:throw TypeError(\"Node type \"+e.op+\" is not implemented\")}})})},executeOp$3=function(e,t,a){switch(e.op){case\"Conv1D\":var r=getParamValue(\"stride\",e,t,a),n=getParamValue(\"pad\",e,t,a),s=getParamValue(\"dataFormat\",e,t,a).toUpperCase(),o=getParamValue(\"dilation\",e,t,a);return[conv1d(getParamValue(\"x\",e,t,a),getParamValue(\"filter\",e,t,a),r,n,s,o)];case\"Conv2D\":r=getParamValue(\"strides\",e,t,a),n=getParamValue(\"pad\",e,t,a),s=getParamValue(\"dataFormat\",e,t,a).toUpperCase();var p=getParamValue(\"dilations\",e,t,a);return[conv2d(getParamValue(\"x\",e,t,a),getParamValue(\"filter\",e,t,a),[r[1],r[2]],n,s,[p[1],p[2]])];case\"_FusedConv2D\":case\"FusedDepthwiseConv2dNative\":var u=getParamValue(\"fusedOps\",e,t,a),i=u[0],m=u[1],l=\"biasadd\"===i,c=\"prelu\"===m,d=\"fusedbatchnorm\"===i,y=getParamValue(\"numArgs\",e,t,a);if(l){if(c&&2!==y)throw new Error(\"FusedConv2d and DepthwiseConv2d with BiasAdd and Prelu must have two extra arguments: bias and alpha.\");if(!c&&1!==y)throw new Error(\"FusedConv2d and DepthwiseConv2d with BiasAdd must have one extra argument: bias.\")}if(d)throw new Error(\"FusedConv2d and DepthwiseConv2d with FusedBatchNorm is not supported.\");r=getParamValue(\"strides\",e,t,a),n=getParamValue(\"pad\",e,t,a),s=getParamValue(\"dataFormat\",e,t,a).toUpperCase(),p=getParamValue(\"dilations\",e,t,a);var f=getParamValue(\"args\",e,t,a),g=f[0],h=f[1];return[(\"_FusedConv2D\"===e.op?fused.conv2d:fused.depthwiseConv2d)({x:getParamValue(\"x\",e,t,a),filter:getParamValue(\"filter\",e,t,a),strides:[r[1],r[2]],pad:n,dataFormat:s,dilations:[p[1],p[2]],bias:g,activation:m,preluActivationWeights:h})];case\"Conv2DBackpropInput\":case\"Conv2dTranspose\":var N=getParamValue(\"outputShape\",e,t,a);r=getParamValue(\"strides\",e,t,a),n=getParamValue(\"pad\",e,t,a);return[conv2dTranspose(getParamValue(\"x\",e,t,a),getParamValue(\"filter\",e,t,a),N,[r[1],r[2]],n)];case\"DepthwiseConv2dNative\":case\"DepthwiseConv2d\":r=getParamValue(\"strides\",e,t,a),n=getParamValue(\"pad\",e,t,a),p=getParamValue(\"dilations\",e,t,a),s=getParamValue(\"dataFormat\",e,t,a).toUpperCase();return[depthwiseConv2d(getParamValue(\"input\",e,t,a),getParamValue(\"filter\",e,t,a),[r[1],r[2]],n,s,[p[1],p[2]])];case\"Conv3D\":r=getParamValue(\"strides\",e,t,a),n=getParamValue(\"pad\",e,t,a),s=getParamValue(\"dataFormat\",e,t,a).toUpperCase(),p=getParamValue(\"dilations\",e,t,a);return[conv3d(getParamValue(\"x\",e,t,a),getParamValue(\"filter\",e,t,a),[r[1],r[2],r[3]],n,s,[p[1],p[2],p[3]])];case\"AvgPool\":r=getParamValue(\"strides\",e,t,a),n=getParamValue(\"pad\",e,t,a);var x=getParamValue(\"kernelSize\",e,t,a);return[avgPool(getParamValue(\"x\",e,t,a),[x[1],x[2]],[r[1],r[2]],n)];case\"MaxPool\":r=getParamValue(\"strides\",e,t,a),n=getParamValue(\"pad\",e,t,a),x=getParamValue(\"kernelSize\",e,t,a);return[maxPool(getParamValue(\"x\",e,t,a),[x[1],x[2]],[r[1],r[2]],n)];case\"MaxPoolWithArgmax\":r=getParamValue(\"strides\",e,t,a),n=getParamValue(\"pad\",e,t,a),x=getParamValue(\"kernelSize\",e,t,a);var V=getParamValue(\"includeBatchInIndex\",e,t,a),b=maxPoolWithArgmax(getParamValue(\"x\",e,t,a),[x[1],x[2]],[r[1],r[2]],n,V);return[b.result,b.indexes];case\"AvgPool3D\":r=getParamValue(\"strides\",e,t,a),n=getParamValue(\"pad\",e,t,a),x=getParamValue(\"kernelSize\",e,t,a);return[avgPool3d(getParamValue(\"x\",e,t,a),[x[1],x[2],x[3]],[r[1],r[2],r[3]],n)];case\"MaxPool3D\":r=getParamValue(\"strides\",e,t,a),n=getParamValue(\"pad\",e,t,a),x=getParamValue(\"kernelSize\",e,t,a);return[maxPool3d(getParamValue(\"x\",e,t,a),[x[1],x[2],x[3]],[r[1],r[2],r[3]],n)];default:throw TypeError(\"Node type \"+e.op+\" is not implemented\")}},executeOp$4=function(e,t,a){switch(e.op){case\"Fill\":var r=getParamValue(\"shape\",e,t,a),n=getParamValue(\"dtype\",e,t,a),s=getParamValue(\"value\",e,t,a);return[fill(r,s,n)];case\"LinSpace\":var o=getParamValue(\"start\",e,t,a),p=getParamValue(\"stop\",e,t,a),u=getParamValue(\"num\",e,t,a);return[linspace(o,p,u)];case\"Multinomial\":var i=getParamValue(\"logits\",e,t,a),m=getParamValue(\"numSamples\",e,t,a),l=getParamValue(\"seed\",e,t,a);return[multinomial(i,m,l)];case\"OneHot\":var c=getParamValue(\"indices\",e,t,a),d=getParamValue(\"depth\",e,t,a),y=getParamValue(\"onValue\",e,t,a),f=getParamValue(\"offValue\",e,t,a);return[oneHot(c,d,y,f)];case\"Ones\":return[ones(getParamValue(\"shape\",e,t,a),getParamValue(\"dtype\",e,t,a))];case\"OnesLike\":return[onesLike(getParamValue(\"x\",e,t,a))];case\"RandomUniform\":return[randomUniform(getParamValue(\"shape\",e,t,a),getParamValue(\"minval\",e,t,a),getParamValue(\"maxval\",e,t,a),getParamValue(\"dtype\",e,t,a))];case\"Range\":o=getParamValue(\"start\",e,t,a);var g=getParamValue(\"stop\",e,t,a),h=getParamValue(\"step\",e,t,a);return[range(o,g,h,getParamValue(\"dtype\",e,t,a))];case\"TruncatedNormal\":r=getParamValue(\"shape\",e,t,a);var N=getParamValue(\"mean\",e,t,a),x=getParamValue(\"stdDev\",e,t,a);l=getParamValue(\"seed\",e,t,a);return[truncatedNormal(r,N,x,getParamValue(\"dtype\",e,t,a),l)];case\"Zeros\":return[zeros(getParamValue(\"shape\",e,t,a),getParamValue(\"dtype\",e,t,a))];case\"ZerosLike\":return[zerosLike(getParamValue(\"x\",e,t,a))];default:throw TypeError(\"Node type \"+e.op+\" is not implemented\")}},_this$1=void 0,executeOp$5=function(e,t,a){return __awaiter(_this$1,void 0,void 0,function(){var r,n,s,o,p,u,i,m;return __generator(this,function(l){switch(l.label){case 0:switch(e.op){case\"NonMaxSuppressionV5\":case\"NonMaxSuppressionV3\":case\"NonMaxSuppressionV2\":return[3,1];case\"Where\":return[3,5];case\"ListDiff\":return[3,7]}return[3,8];case 1:return r=getParamValue(\"boxes\",e,t,a),n=getParamValue(\"scores\",e,t,a),s=getParamValue(\"maxOutputSize\",e,t,a),o=getParamValue(\"iouThreshold\",e,t,a),p=getParamValue(\"scoreThreshold\",e,t,a),\"NonMaxSuppressionV5\"!==e.op?[3,3]:(u=getParamValue(\"softNmsSigma\",e,t,a),[4,image.nonMaxSuppressionWithScoreAsync(r,n,s,o,p,u)]);case 2:return[2,[(m=l.sent()).selectedIndices,m.selectedScores]];case 3:return[4,image.nonMaxSuppressionAsync(r,n,s,o,p)];case 4:return[2,[l.sent()]];case 5:return i=getParamValue(\"condition\",e,t,a).asType(\"bool\"),[4,whereAsync(i)];case 6:return m=[l.sent()],i.dispose(),[2,m];case 7:return[2,setdiff1dAsync(getParamValue(\"x\",e,t,a),getParamValue(\"y\",e,t,a))];case 8:throw TypeError(\"Node type \"+e.op+\" is not implemented\")}})})},executeOp$6=function(e,t,a){switch(e.op){case\"TopKV2\":var r=getParamValue(\"x\",e,t,a),n=getParamValue(\"k\",e,t,a),s=getParamValue(\"sorted\",e,t,a),o=topk(r,n,s);return[o.values,o.indices];default:throw TypeError(\"Node type \"+e.op+\" is not implemented\")}},executeOp$7=function(e,t,a){switch(e.op){case\"Const\":return t[e.name];case\"PlaceholderWithDefault\":var r=getParamValue(\"default\",e,t,a);return[getTensor(e.name,t,a)||r];case\"Placeholder\":return[getTensor(e.name,t,a)];case\"Identity\":case\"StopGradient\":case\"FakeQuantWithMinMaxVars\":return[getParamValue(\"x\",e,t,a).clone()];case\"IdentityN\":return getParamValue(\"x\",e,t,a).map(function(e){return e.clone()});case\"Snapshot\":return[getParamValue(\"x\",e,t,a).clone()];case\"Shape\":return[tensor1d(getParamValue(\"x\",e,t,a).shape,\"int32\")];case\"ShapeN\":return getParamValue(\"x\",e,t,a).map(function(e){return tensor1d(e.shape)});case\"Size\":return[scalar(getParamValue(\"x\",e,t,a).size,\"int32\")];case\"Rank\":return[scalar(getParamValue(\"x\",e,t,a).rank,\"int32\")];case\"NoOp\":return[scalar(1)];case\"Print\":var n=getParamValue(\"x\",e,t,a),s=getParamValue(\"data\",e,t,a),o=getParamValue(\"message\",e,t,a),p=getParamValue(\"summarize\",e,t,a);console.warn(\"The graph has a tf.print() operation,usually used for debugging, which slows down performance.\"),console.log(o);for(var u=0;u<s.length;u++)console.log(Array.prototype.slice.call(s[u].dataSync()).slice(0,p));return[n];default:throw TypeError(\"Node type \"+e.op+\" is not implemented\")}},executeOp$8=function(e,t,a){switch(e.op){case\"ResizeBilinear\":var r=getParamValue(\"images\",e,t,a),n=getParamValue(\"size\",e,t,a),s=getParamValue(\"alignCorners\",e,t,a);return[image.resizeBilinear(r,[n[0],n[1]],s)];case\"ResizeNearestNeighbor\":r=getParamValue(\"images\",e,t,a),n=getParamValue(\"size\",e,t,a),s=getParamValue(\"alignCorners\",e,t,a);return[image.resizeNearestNeighbor(r,[n[0],n[1]],s)];case\"CropAndResize\":var o=getParamValue(\"image\",e,t,a),p=getParamValue(\"boxes\",e,t,a),u=getParamValue(\"boxInd\",e,t,a),i=getParamValue(\"cropSize\",e,t,a),m=getParamValue(\"method\",e,t,a),l=getParamValue(\"extrapolationValue\",e,t,a);return[image.cropAndResize(o,p,u,i,m,l)];default:throw TypeError(\"Node type \"+e.op+\" is not implemented\")}},executeOp$9=function(e,t,a){switch(e.op){case\"Equal\":return[equal(getParamValue(\"a\",e,t,a),getParamValue(\"b\",e,t,a))];case\"NotEqual\":return[notEqual(getParamValue(\"a\",e,t,a),getParamValue(\"b\",e,t,a))];case\"Greater\":return[greater(getParamValue(\"a\",e,t,a),getParamValue(\"b\",e,t,a))];case\"GreaterEqual\":return[greaterEqual(getParamValue(\"a\",e,t,a),getParamValue(\"b\",e,t,a))];case\"Less\":return[less(getParamValue(\"a\",e,t,a),getParamValue(\"b\",e,t,a))];case\"LessEqual\":return[lessEqual(getParamValue(\"a\",e,t,a),getParamValue(\"b\",e,t,a))];case\"LogicalAnd\":return[logicalAnd(getParamValue(\"a\",e,t,a),getParamValue(\"b\",e,t,a))];case\"LogicalNot\":return[logicalNot(getParamValue(\"a\",e,t,a))];case\"LogicalOr\":return[logicalOr(getParamValue(\"a\",e,t,a),getParamValue(\"b\",e,t,a))];case\"Select\":case\"SelectV2\":return[where(getParamValue(\"condition\",e,t,a),getParamValue(\"a\",e,t,a),getParamValue(\"b\",e,t,a))];default:throw TypeError(\"Node type \"+e.op+\" is not implemented\")}},executeOp$10=function(e,t,a){switch(e.op){case\"BatchMatMul\":case\"BatchMatMulV2\":case\"MatMul\":return[matMul(getParamValue(\"a\",e,t,a),getParamValue(\"b\",e,t,a),getParamValue(\"transposeA\",e,t,a),getParamValue(\"transposeB\",e,t,a))];case\"Transpose\":return[transpose(getParamValue(\"x\",e,t,a),getParamValue(\"perm\",e,t,a))];case\"_FusedMatMul\":var r=getParamValue(\"fusedOps\",e,t,a),n=r[0],s=r[1],o=\"biasadd\"===n,p=\"prelu\"===s,u=getParamValue(\"numArgs\",e,t,a);if(o){if(p&&2!==u)throw new Error(\"Fused MatMul with BiasAdd and Prelu must have two extra arguments: bias and alpha.\");if(!p&&1!==u)throw new Error(\"Fused MatMul with BiasAdd must have one extra argument: bias.\")}var i=getParamValue(\"args\",e,t,a),m=i[0],l=i[1];return[fused.matMul({a:getParamValue(\"a\",e,t,a),b:getParamValue(\"b\",e,t,a),transposeA:getParamValue(\"transposeA\",e,t,a),transposeB:getParamValue(\"transposeB\",e,t,a),bias:m,activation:s,preluActivationWeights:l})];default:throw TypeError(\"Node type \"+e.op+\" is not implemented\")}},executeOp$11=function(e,t,a){switch(e.op){case\"FusedBatchNorm\":case\"FusedBatchNormV2\":case\"FusedBatchNormV3\":return[batchNorm(getParamValue(\"x\",e,t,a),getParamValue(\"mean\",e,t,a),getParamValue(\"variance\",e,t,a),getParamValue(\"offset\",e,t,a),getParamValue(\"scale\",e,t,a),getParamValue(\"epsilon\",e,t,a))];case\"LRN\":return[localResponseNormalization(getParamValue(\"x\",e,t,a),getParamValue(\"radius\",e,t,a),getParamValue(\"bias\",e,t,a),getParamValue(\"alpha\",e,t,a),getParamValue(\"beta\",e,t,a))];case\"Softmax\":return[softmax(getParamValue(\"x\",e,t,a))];case\"LogSoftmax\":return[logSoftmax(getParamValue(\"x\",e,t,a))];case\"SparseToDense\":return[sparseToDense(getParamValue(\"sparseIndices\",e,t,a),getParamValue(\"outputShape\",e,t,a),getParamValue(\"sparseValues\",e,t,a),getParamValue(\"defaultValue\",e,t,a))];default:throw TypeError(\"Node type \"+e.op+\" is not implemented\")}},executeOp$12=function(e,t,a){switch(e.op){case\"Max\":var r=getParamValue(\"axis\",e,t,a),n=getParamValue(\"keepDims\",e,t,a);return[max(getParamValue(\"x\",e,t,a),r,n)];case\"Mean\":r=getParamValue(\"axis\",e,t,a),n=getParamValue(\"keepDims\",e,t,a);return[mean(getParamValue(\"x\",e,t,a),r,n)];case\"Min\":r=getParamValue(\"axis\",e,t,a),n=getParamValue(\"keepDims\",e,t,a);return[min(getParamValue(\"x\",e,t,a),r,n)];case\"Sum\":r=getParamValue(\"axis\",e,t,a),n=getParamValue(\"keepDims\",e,t,a);return[sum(getParamValue(\"x\",e,t,a),r,n)];case\"All\":r=getParamValue(\"axis\",e,t,a),n=getParamValue(\"keepDims\",e,t,a);return[all(getParamValue(\"x\",e,t,a),r,n)];case\"Any\":r=getParamValue(\"axis\",e,t,a),n=getParamValue(\"keepDims\",e,t,a);return[any(getParamValue(\"x\",e,t,a),r,n)];case\"ArgMax\":r=getParamValue(\"axis\",e,t,a);return[argMax(getParamValue(\"x\",e,t,a),r)];case\"ArgMin\":r=getParamValue(\"axis\",e,t,a);return[argMin(getParamValue(\"x\",e,t,a),r)];case\"Prod\":r=getParamValue(\"axis\",e,t,a),n=getParamValue(\"keepDims\",e,t,a);return[prod(getParamValue(\"x\",e,t,a),r,n)];default:throw TypeError(\"Node type \"+e.op+\" is not implemented\")}},executeOp$13=function(e,t,a){switch(e.op){case\"ConcatV2\":case\"Concat\":var r=getParamValue(\"n\",e,t,a),n=getParamValue(\"axis\",e,t,a),s=getParamValue(\"tensors\",e,t,a);return s=s.slice(0,r),[concat(s,n)];case\"GatherV2\":case\"Gather\":n=getParamValue(\"axis\",e,t,a);var o=getParamValue(\"x\",e,t,a),p=getParamValue(\"indices\",e,t,a);return[gather(o,p.asType(\"int32\"),n)];case\"ReverseV2\":case\"Reverse\":n=getParamValue(\"axis\",e,t,a),o=getParamValue(\"x\",e,t,a);return[reverse(o,n)];case\"Slice\":var u=getParamValue(\"begin\",e,t,a),i=getParamValue(\"size\",e,t,a);return[slice(getParamValue(\"x\",e,t,a),u,i)];case\"StridedSlice\":u=getParamValue(\"begin\",e,t,a);var m=getParamValue(\"end\",e,t,a),l=getParamValue(\"strides\",e,t,a),c=getParamValue(\"beginMask\",e,t,a),d=getParamValue(\"endMask\",e,t,a),y=getParamValue(\"ellipsisMask\",e,t,a),f=getParamValue(\"newAxisMask\",e,t,a),g=getParamValue(\"shrinkAxisMask\",e,t,a),h=getParamValue(\"x\",e,t,a);if(1===u.length&&h.shape.length>1)for(var N=1;N<h.shape.length;N++)u.push(0),m.push(h.shape[N]),l.push(l[0]);return[stridedSlice(h,u,m,l,c,d,y,f,g)];case\"Pack\":return tidy(function(){var r=getParamValue(\"axis\",e,t,a),n=getParamValue(\"tensors\",e,t,a),s=n[0].shape,o=n[0].squeeze().shape,p=n.map(function(e){var t=util.arraysEqual(e.shape,s);if(!t&&!util.arraysEqual(e.squeeze().shape,o))throw new Error(\"the input tensors shape does not match\");return t?e:e.reshape(s)});return[stack(p,r)]});case\"Unpack\":return tidy(function(){var r=getParamValue(\"axis\",e,t,a),n=getParamValue(\"tensor\",e,t,a);return unstack(n,r)});case\"Tile\":var x=getParamValue(\"reps\",e,t,a);return[tile(getParamValue(\"x\",e,t,a),x)];case\"Split\":case\"SplitV\":n=getParamValue(\"axis\",e,t,a);var V=getParamValue(\"numOrSizeSplits\",e,t,a);return split(getParamValue(\"x\",e,t,a),V,n);case\"ScatterNd\":p=getParamValue(\"indices\",e,t,a);var b=getParamValue(\"values\",e,t,a),P=getParamValue(\"shape\",e,t,a);return[scatterND(p,b,P)];case\"GatherNd\":var T=getParamValue(\"x\",e,t,a);p=getParamValue(\"indices\",e,t,a);return[gatherND(T,p)];case\"SparseToDense\":p=getParamValue(\"sparseIndices\",e,t,a),P=getParamValue(\"outputShape\",e,t,a);var v=getParamValue(\"sparseValues\",e,t,a),O=getParamValue(\"defaultValue\",e,t,a);return[sparseToDense(p,v,P,v.dtype===O.dtype?O:O.asType(v.dtype))];default:throw TypeError(\"Node type \"+e.op+\" is not implemented\")}},executeOp$14=function(e,t,a){switch(e.op){case\"FFT\":return[fft(getParamValue(\"x\",e,t,a))];case\"IFFT\":return[ifft(getParamValue(\"x\",e,t,a))];case\"RFFT\":return[rfft(getParamValue(\"x\",e,t,a))];case\"IRFFT\":return[irfft(getParamValue(\"x\",e,t,a))];default:throw TypeError(\"Node type \"+e.op+\" is not implemented\")}},executeOp$15=function(e,t,a){switch(e.op){case\"Cast\":return[cast(getParamValue(\"x\",e,t,a),getParamValue(\"dtype\",e,t,a))];case\"ExpandDims\":var r=getParamValue(\"axis\",e,t,a);return[expandDims(getParamValue(\"x\",e,t,a),r)];case\"Squeeze\":r=getParamValue(\"axis\",e,t,a);return[squeeze(getParamValue(\"x\",e,t,a),r)];case\"Reshape\":return[reshape(getParamValue(\"x\",e,t,a),getParamValue(\"shape\",e,t,a))];case\"PadV2\":case\"Pad\":return[pad(getParamValue(\"x\",e,t,a),split$1(getParamValue(\"padding\",e,t,a),2),getParamValue(\"constantValue\",e,t,a))];case\"SpaceToBatchND\":var n=getParamValue(\"blockShape\",e,t,a),s=split$1(getParamValue(\"paddings\",e,t,a),2);return[spaceToBatchND(getParamValue(\"x\",e,t,a),n,s)];case\"BatchToSpaceND\":n=getParamValue(\"blockShape\",e,t,a);var o=split$1(getParamValue(\"crops\",e,t,a),2);return[batchToSpaceND(getParamValue(\"x\",e,t,a),n,o)];case\"DepthToSpace\":var p=getParamValue(\"blockSize\",e,t,a),u=getParamValue(\"dataFormat\",e,t,a).toUpperCase();return[depthToSpace(getParamValue(\"x\",e,t,a),p,u)];default:throw TypeError(\"Node type \"+e.op+\" is not implemented\")}};function executeOp$16(e,t,a){var r=function(e,t,a){switch(e.category){case\"arithmetic\":return tidy(function(){return executeOp(e,t,a)});case\"basic_math\":return tidy(function(){return executeOp$1(e,t,a)});case\"control\":return executeOp$2(e,t,a);case\"convolution\":return tidy(function(){return executeOp$3(e,t,a)});case\"creation\":return tidy(function(){return executeOp$4(e,t,a)});case\"dynamic\":return executeOp$5(e,t,a);case\"evaluation\":return tidy(function(){return executeOp$6(e,t,a)});case\"image\":return tidy(function(){return executeOp$8(e,t,a)});case\"graph\":return tidy(function(){return executeOp$7(e,t,a)});case\"logical\":return tidy(function(){return executeOp$9(e,t,a)});case\"matrices\":return tidy(function(){return executeOp$10(e,t,a)});case\"normalization\":return tidy(function(){return executeOp$11(e,t,a)});case\"reduction\":return tidy(function(){return executeOp$12(e,t,a)});case\"slice_join\":return tidy(function(){return executeOp$13(e,t,a)});case\"spectral\":return tidy(function(){return executeOp$14(e,t,a)});case\"transformation\":return tidy(function(){return executeOp$15(e,t,a)});case\"custom\":var r=getRegisteredOp(e.op);if(r&&r.customExecutor)return r.customExecutor(new NodeValueImpl(e,t,a));throw TypeError(\"Custom op \"+e.op+\" is not registered.\");default:throw TypeError(\"Unknown op '\"+e.op+\"'. File an issue at https://github.com/tensorflow/tfjs/issues so we can add it, or register a custom execution with tf.registerOp()\")}}(e,t,a);return r instanceof Promise?r.then(function(e){return[].concat(e)}):[].concat(r)}var ExecutionContext=function(){function e(e,t){this.weightMap=e,this.tensorArrayMap=t,this.rootContext={id:0,frameName:\"\",iterationId:0},this.contexts=[this.rootContext],this.lastId=0,this.generateCurrentContextIds()}return e.prototype.newFrame=function(e,t){return{id:e,frameName:t,iterationId:0}},Object.defineProperty(e.prototype,\"currentContext\",{get:function(){return this.contexts},set:function(e){this.contexts!==e&&(this.contexts=e,this.generateCurrentContextIds())},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,\"currentContextId\",{get:function(){return this._currentContextIds[0]},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,\"currentContextIds\",{get:function(){return this._currentContextIds},enumerable:!0,configurable:!0}),e.prototype.generateCurrentContextIds=function(){for(var e=[],t=0;t<this.contexts.length-1;t++){var a=this.contexts.slice(0,this.contexts.length-t);e.push(this.contextIdforContexts(a))}e.push(\"\"),this._currentContextIds=e},e.prototype.contextIdforContexts=function(e){return e?e.map(function(e){return 0===e.id&&0===e.iterationId?\"\":e.frameName+\"-\"+e.iterationId}).join(\"/\"):\"\"},e.prototype.enterFrame=function(e){this.contexts&&(this.lastId++,this.contexts=this.contexts.slice(),this.contexts.push(this.newFrame(this.lastId,e)),this._currentContextIds.unshift(this.contextIdforContexts(this.contexts)))},e.prototype.exitFrame=function(){if(!(this.contexts&&this.contexts.length>1))throw new Error(\"Cannot exit frame, the context is empty\");this.contexts=this.contexts.slice(),this.contexts.splice(-1),this.currentContextIds.shift()},e.prototype.nextIteration=function(){if(!(this.contexts&&this.contexts.length>0))throw new Error(\"Cannot increase frame iteration, the context is empty\");this.contexts=this.contexts.slice(),this.lastId++;var e=Object.assign({},this.contexts[this.contexts.length-1]);e.iterationId+=1,e.id=this.lastId,this.contexts.splice(-1,1,e),this._currentContextIds.splice(0,1,this.contextIdforContexts(this.contexts))},e.prototype.getWeight=function(e){return this.weightMap[e]},e.prototype.addTensorArray=function(e){this.tensorArrayMap[e.id]=e},e.prototype.getTensorArray=function(e){return this.tensorArrayMap[e]},e}();function getExecutionSubgraph(e,t,a){for(var r=new Set,n=[],s=null,o=null,p=new Set,u=Object.keys(e).map(function(e){return parseNodeName(e)[0]}),i=t.slice();i.length>0;){var m=i.pop();(isControlFlow(m)||isDynamicShape(m))&&null==s&&(o=(s=m).children.map(function(e){return e.name}).filter(function(e){return r.has(e)})),r.add(m.name),null==a[m.name]&&(-1===u.indexOf(m.name)&&(0!==m.inputs.length?m.inputs.forEach(function(e){p.has(e.name)||(p.add(e.name),i.push(e))}):n.push(m.name)))}return{inputs:e,outputs:t,usedNodes:r,missingInputs:n,dynamicNode:s,syncInputs:o}}function getNodesInTopologicalOrder(e,t,a){var r=a.usedNodes,n=a.inputs,s=[];Object.keys(n).map(function(e){return parseNodeName(e)[0]}).map(function(t){return e.nodes[t]}).forEach(function(e){r.has(e.name)&&s.push(e)}),e.weights.forEach(function(e){r.has(e.name)&&s.push(e)});for(var o=new Set,p=[];s.length>0;){var u=s.pop();o.add(u.name),t[u.name]||p.push(u),u.children.forEach(function(e){!o.has(e.name)&&r.has(e.name)&&e.inputs.every(function(e){return o.has(e.name)})&&s.push(e)})}return p}var CONTROL_FLOW_OPS=[\"Switch\",\"Merge\",\"Enter\",\"Exit\",\"NextIteration\"],DYNAMIC_SHAPE_OPS=[\"NonMaxSuppressionV2\",\"NonMaxSuppressionV3\",\"NonMaxSuppressionV5\",\"Where\"];function isControlFlow(e){return CONTROL_FLOW_OPS.indexOf(e.op)>=0}function isDynamicShape(e){return DYNAMIC_SHAPE_OPS.indexOf(e.op)>=0}var GraphExecutor=function(){function e(e){this.graph=e,this.compiledMap=new Map,this._weightMap={},this.SEPERATOR=\",\",this._outputs=e.outputs,this._inputs=e.inputs,this._signature=e.signature}return Object.defineProperty(e.prototype,\"weightMap\",{get:function(){return this._weightMap},set:function(e){var t=Object.keys(e).map(function(t){return e[t].map(function(e){return e.id})});this.weightIds=[].concat.apply([],t),this._weightMap=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,\"inputs\",{get:function(){return this._inputs.map(function(e){return{name:e.name,shape:e.attrParams.shape?e.attrParams.shape.value:void 0,dtype:e.attrParams.dtype?e.attrParams.dtype.value:void 0}})},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,\"outputs\",{get:function(){return this._outputs.map(function(e){return{name:e.name,shape:e.attrParams.shape?e.attrParams.shape.value:void 0,dtype:e.attrParams.dtype?e.attrParams.dtype.value:void 0}})},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,\"inputNodes\",{get:function(){return this._inputs.map(function(e){return e.signatureKey||e.name})},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,\"outputNodes\",{get:function(){return this._outputs.map(function(e){return e.signatureKey||e.name})},enumerable:!0,configurable:!0}),e.prototype.getCompilationKey=function(e,t){var a=e.map(function(e){return e.name}).sort(),r=t.map(function(e){return e.name}).sort();return a.join(this.SEPERATOR)+\"--\"+r.join(this.SEPERATOR)},e.prototype.compile=function(e,t){var a=getExecutionSubgraph(e,t,this.weightMap),r=a.missingInputs,n=a.dynamicNode,s=a.syncInputs;if(null!=n)throw new Error(\"This execution contains the node '\"+n.name+\"', which has the dynamic op '\"+n.op+\"'. Please use model.executeAsync() instead. Alternatively, to avoid the dynamic ops, specify the inputs [\"+s+\"]\");if(r.length>0){var o=t.map(function(e){return e.name}),p=Object.keys(e);throw new Error(\"Cannot compute the outputs [\"+o+\"] from the provided inputs [\"+p+\"]. Missing the following inputs: [\"+r+\"]\")}return getNodesInTopologicalOrder(this.graph,this.weightMap,a)},e.prototype.execute=function(e,t){var a=this;e=this.mapInputs(e);var r=Object.keys(e).sort();this.checkInputs(e),this.checkInputShapeAndType(e),t=this.mapOutputs(t),this.checkOutputs(t);var n=r.map(function(e){return a.graph.nodes[parseNodeName(e)[0]]}),s=t.map(function(e){return a.graph.nodes[parseNodeName(e)[0]]}),o=this.getCompilationKey(n,s),p=this.compiledMap.get(o);null==p&&(p=this.compile(e,s),this.compiledMap.set(o,p));var u={};return tidy(function(){var r=new ExecutionContext(a._weightMap,u),n=__assign({},a.weightMap);Object.keys(e).forEach(function(t){var a=parseNodeName(t),r=a[0],s=[];s[a[1]]=e[t],n[r]=s});for(var s=a.getFrozenTensorIds(n),o={},i=0;i<p.length;i++){var m=p[i];if(!n[m.name]){var l=executeOp$16(m,n,r);if(l instanceof Promise)throw new Error(\"The execution of the op '\"+m.op+\"' returned a promise. Please use model.executeAsync() instead.\");n[m.name]=l,a.checkTensorForDisposal(m.name,m,n,r,s,t,o)}}return t.map(function(e){return getTensor(e,n,r)})})},e.prototype.getFrozenTensorIds=function(e){var t=[].concat.apply([],Object.keys(e).map(function(t){return e[t]}).map(function(e){return e.map(function(e){return e.id})}));return new Set(t)},e.prototype.checkTensorForDisposal=function(e,t,a,r,n,s,o){\"control\"!==t.category&&-1===s.indexOf(e)&&(a[e].forEach(function(e){null!=e&&(o[e.id]=(o[e.id]||0)+t.children.length)}),t.inputs.forEach(function(e){if(\"control\"!==e.category){var t=getTensorsForCurrentContenxt(e.name,a,r);null!=t&&t.forEach(function(e){if(e&&!n.has(e.id)){var t=o[e.id];1===t?(e.dispose(),delete o[e.id]):null!=t&&o[e.id]--}})}}))},e.prototype.executeAsync=function(e,t){return __awaiter(this,void 0,void 0,function(){var a,r,n,s,o,p,u=this;return __generator(this,function(i){switch(i.label){case 0:return e=this.mapInputs(e),this.checkInputs(e),this.checkInputShapeAndType(e),t=this.mapOutputs(t),this.checkOutputs(t),a={},r=new ExecutionContext(this._weightMap,a),[4,this.executeWithControlFlow(e,r,t)];case 1:return n=i.sent(),s=t.map(function(e){return getTensor(e,n,r)}),o=new Set(s.map(function(e){return e.id})),p=new Set(Object.keys(e).map(function(t){return e[t].id})),Object.keys(n).forEach(function(e){n[e].forEach(function(e){!e||e.isDisposed||o.has(e.id)||p.has(e.id)||-1!==u.weightIds.indexOf(e.id)||e.dispose()})}),[2,s]}})})},e.prototype.executeWithControlFlow=function(e,t,a){return __awaiter(this,void 0,void 0,function(){var r,n,s,o,p,u,i,m,l,c,d,y,f,g,h,N,x=this;return __generator(this,function(V){switch(V.label){case 0:r=Object.keys(e),n=r.map(function(e){return x.graph.nodes[parseNodeName(e)[0]]}),s=a.map(function(e){return x.graph.nodes[parseNodeName(e)[0]]}),o=getExecutionSubgraph(e,s,this.weightMap),p=o.usedNodes,u=o.missingInputs,i=o.dynamicNode,m=o.syncInputs,l=n.concat(this.graph.weights).map(function(e){return{node:e,contexts:t.currentContext}}),c=__assign({},this.weightMap),Object.keys(e).forEach(function(t){var a=parseNodeName(t),r=a[0],n=[];n[a[1]]=e[t],c[r]=n}),d={},y=this.getFrozenTensorIds(c),f={},V.label=1;case 1:return l.length>0?(g=this.processStack(n,l,t,c,f,y,a,d,p),[4,Promise.all(g)]):[3,3];case 2:return V.sent(),[3,1];case 3:if(null==i&&console.warn(\"This model execution did not contain any nodes with control flow or dynamic output shapes. You can use model.execute() instead.\"),(h=s.filter(function(e){return!isControlFlow(e)&&!getTensor(e.name,c,t)}).map(function(e){return e.name})).length>0)throw N=\"\",null!=i&&(N=\"Alternatively, to avoid the dynamic ops, use model.execute() and specify the inputs [\"+m+\"]\"),new Error(\"Cannot compute the outputs [\"+h+\"] from the provided inputs [\"+r+\"]. Consider providing the following inputs: [\"+u+\"]. \"+N);return[2,c]}})})},e.prototype.processStack=function(e,t,a,r,n,s,o,p,u){for(var i=this,m=[],l=function(){var l=t.pop();a.currentContext=l.contexts;var d=\"\";if(\"Enter\"===l.node.op&&getParamValue(\"isConstant\",l.node,r,a)&&(d=getNodeNameAndIndex(l.node.name,a)[0]),-1===e.indexOf(l.node)){var y=executeOp$16(l.node,r,a);d||(d=getNodeNameAndIndex(l.node.name,a)[0]);var f=a.currentContext;y instanceof Promise?m.push(y.then(function(e){return r[d]=e,a.currentContext=f,i.checkTensorForDisposal(d,l.node,r,a,s,o,p),i.processChildNodes(l.node,t,a,r,n,u),e})):(r[d]=y,c.checkTensorForDisposal(d,l.node,r,a,s,o,p),c.processChildNodes(l.node,t,a,r,n,u))}else c.processChildNodes(l.node,t,a,r,n,u)},c=this;t.length>0;)l();return m},e.prototype.processChildNodes=function(e,t,a,r,n,s){e.children.forEach(function(e){var o=getNodeNameAndIndex(e.name,a)[0];!n[o]&&s.has(e.name)&&(\"Merge\"===e.op?e.inputNames.some(function(e){return!!getTensor(e,r,a)})&&(n[o]=!0,t.push({contexts:a.currentContext,node:e})):e.inputNames.every(function(e){return!!getTensor(e,r,a)})&&(n[o]=!0,t.push({contexts:a.currentContext,node:e})))})},e.prototype.dispose=function(){var e=this;Object.keys(this.weightMap).forEach(function(t){return e.weightMap[t].forEach(function(e){return e.dispose()})})},e.prototype.checkInputShapeAndType=function(e){var t=this;Object.keys(e).forEach(function(a){var r=e[a],n=parseNodeName(a)[0],s=t.graph.nodes[n];if(s.attrParams.shape&&s.attrParams.shape.value){var o=s.attrParams.shape.value,p=o.length===r.shape.length&&r.shape.every(function(e,t){return-1===o[t]||o[t]===e});util.assert(p,function(){return\"The shape of dict['\"+s.name+\"'] provided in model.execute(dict) must be [\"+o+\"], but was [\"+r.shape+\"]\"})}s.attrParams.dtype&&s.attrParams.dtype.value&&util.assert(r.dtype===s.attrParams.dtype.value,function(){return\"The dtype of dict['\"+s.name+\"'] provided in model.execute(dict) must be \"+s.attrParams.dtype.value+\", but was \"+r.dtype})})},e.prototype.mapInputs=function(e){var t={};for(var a in e){if(null!=this._signature&&null!=this._signature.inputs&&null!=this._signature.inputs[a])t[this._signature.inputs[a].name]=e[a];else t[a]=e[a]}return t},e.prototype.checkInputs=function(e){var t=this,a=Object.keys(e).filter(function(e){var a=parseNodeName(e)[0];return null==t.graph.nodes[a]});if(a.length>0)throw new Error(\"The dict provided in model.execute(dict) has keys: [\"+a+\"] that are not part of graph\")},e.prototype.mapOutputs=function(e){var t=this;return e.map(function(e){return null!=t._signature&&null!=t._signature.outputs&&null!=t._signature.outputs[e]?t._signature.outputs[e].name:e},{})},e.prototype.checkOutputs=function(e){var t=this;e.forEach(function(e){var a=parseNodeName(e)[0];if(!t.graph.nodes[a])throw new Error(\"The output '\"+e+\"' is not found in the graph\")})},e}(),TFHUB_SEARCH_PARAM=\"?tfjs-format=file\",DEFAULT_MODEL_NAME=\"model.json\",GraphModel=function(){function e(e,t){void 0===t&&(t={}),this.modelUrl=e,this.loadOptions=t,this.version=\"n/a\",null==t&&(this.loadOptions={})}return Object.defineProperty(e.prototype,\"modelVersion\",{get:function(){return this.version},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,\"inputNodes\",{get:function(){return this.executor.inputNodes},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,\"outputNodes\",{get:function(){return this.executor.outputNodes},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,\"inputs\",{get:function(){return this.executor.inputs},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,\"outputs\",{get:function(){return this.executor.outputs},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,\"weights\",{get:function(){return this.executor.weightMap},enumerable:!0,configurable:!0}),e.prototype.findIOHandler=function(){var e=this.modelUrl;if(null!=e.load)this.handler=e;else if(null!=this.loadOptions.requestInit)this.handler=io.browserHTTPRequest(e,this.loadOptions);else{var t=io.getLoadHandlers(e,this.loadOptions.onProgress);if(0===t.length)t.push(io.browserHTTPRequest(e,this.loadOptions));else if(t.length>1)throw new Error(\"Found more than one (\"+t.length+\") load handlers for URL '\"+[e]+\"'\");this.handler=t[0]}},e.prototype.load=function(){return __awaiter(this,void 0,void 0,function(){var e,t,a,r;return __generator(this,function(n){switch(n.label){case 0:if(this.findIOHandler(),null==this.handler.load)throw new Error(\"Cannot proceed with model loading because the IOHandler provided does not have the `load` method implemented.\");return e=this,[4,this.handler.load()];case 1:return e.artifacts=n.sent(),t=this.artifacts.modelTopology,a={},null!=this.artifacts.userDefinedMetadata&&(a=this.artifacts.userDefinedMetadata.signature),this.version=t.versions.producer+\".\"+t.versions.minConsumer,r=io.decodeWeights(this.artifacts.weightData,this.artifacts.weightSpecs),this.executor=new GraphExecutor(OperationMapper.Instance.transformGraph(t,a)),this.executor.weightMap=this.convertTensorMapToTensorsMap(r),[2,!0]}})})},e.prototype.save=function(e,t){return __awaiter(this,void 0,void 0,function(){var t;return __generator(this,function(a){if(\"string\"==typeof e){if(0===(t=io.getSaveHandlers(e)).length)throw new Error(\"Cannot find any save handlers for URL '\"+e+\"'\");if(t.length>1)throw new Error(\"Found more than one (\"+t.length+\") save handlers for URL '\"+e+\"'\");e=t[0]}if(null==e.save)throw new Error(\"GraphModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.\");return[2,e.save(this.artifacts)]})})},e.prototype.predict=function(e,t){return this.execute(e,this.outputNodes)},e.prototype.normalizeInputs=function(e){if(!(e instanceof Tensor||Array.isArray(e)))return e;if((e=Array.isArray(e)?e:[e]).length!==this.inputNodes.length)throw new Error(\"Input tensor count mismatch,the graph model has \"+this.inputNodes.length+\" placeholders, while there are \"+e.length+\" input tensors.\");return this.inputNodes.reduce(function(t,a,r){return t[a]=e[r],t},{})},e.prototype.normalizeOutputs=function(e){return e=e||this.outputNodes,Array.isArray(e)?e:[e]},e.prototype.execute=function(e,t){e=this.normalizeInputs(e),t=this.normalizeOutputs(t);var a=this.executor.execute(e,t);return a.length>1?a:a[0]},e.prototype.executeAsync=function(e,t){return __awaiter(this,void 0,void 0,function(){var a;return __generator(this,function(r){switch(r.label){case 0:return e=this.normalizeInputs(e),t=this.normalizeOutputs(t),[4,this.executor.executeAsync(e,t)];case 1:return[2,(a=r.sent()).length>1?a:a[0]]}})})},e.prototype.convertTensorMapToTensorsMap=function(e){return Object.keys(e).reduce(function(t,a){return t[a]=[e[a]],t},{})},e.prototype.dispose=function(){this.executor.dispose()},e}();function loadGraphModel(e,t){return void 0===t&&(t={}),__awaiter(this,void 0,void 0,function(){var a;return __generator(this,function(r){switch(r.label){case 0:if(null==e)throw new Error(\"modelUrl in loadGraphModel() cannot be null. Please provide a url or an IOHandler that loads the model\");return null==t&&(t={}),t.fromTFHub&&null==e.load&&(e.endsWith(\"/\")||(e+=\"/\"),e=\"\"+e+DEFAULT_MODEL_NAME+TFHUB_SEARCH_PARAM),[4,(a=new GraphModel(e,t)).load()];case 1:return r.sent(),[2,a]}})})}var version=\"1.7.4\";export{GraphModel,loadGraphModel,deregisterOp,registerOp,version as version_converter};\n//# sourceMappingURL=tf-converter.esm.js.map\n","/**\n    * @license\n    * Copyright 2020 Google LLC. All Rights Reserved.\n    * Licensed under the Apache License, Version 2.0 (the \"License\");\n    * you may not use this file except in compliance with the License.\n    * You may obtain a copy of the License at\n    *\n    * http://www.apache.org/licenses/LICENSE-2.0\n    *\n    * Unless required by applicable law or agreed to in writing, software\n    * distributed under the License is distributed on an \"AS IS\" BASIS,\n    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    * See the License for the specific language governing permissions and\n    * limitations under the License.\n    * =============================================================================\n    */\nimport{util,Tensor,tidy,browser,tensor2d,tensor1d,slice,add,div,mul,sub,concat2d,env,sigmoid,image,getBackend,reshape,backend,buffer}from\"@tensorflow/tfjs-core\";import{loadGraphModel}from\"@tensorflow/tfjs-converter\";function getBoxSize(t){return[Math.abs(t.endPoint[0]-t.startPoint[0]),Math.abs(t.endPoint[1]-t.startPoint[1])]}function getBoxCenter(t){return[t.startPoint[0]+(t.endPoint[0]-t.startPoint[0])/2,t.startPoint[1]+(t.endPoint[1]-t.startPoint[1])/2]}function cutBoxFromImageAndResize(t,n,e){const o=n.shape[1],s=n.shape[2],i=[[t.startPoint[1]/o,t.startPoint[0]/s,t.endPoint[1]/o,t.endPoint[0]/s]];return image.cropAndResize(n,i,[0],e)}function scaleBoxCoordinates(t,n){return{startPoint:[t.startPoint[0]*n[0],t.startPoint[1]*n[1]],endPoint:[t.endPoint[0]*n[0],t.endPoint[1]*n[1]],palmLandmarks:t.palmLandmarks.map(t=>{return[t[0]*n[0],t[1]*n[1]]})}}function enlargeBox(t,n=1.5){const e=getBoxCenter(t),o=getBoxSize(t),s=[n*o[0]/2,n*o[1]/2];return{startPoint:[e[0]-s[0],e[1]-s[1]],endPoint:[e[0]+s[0],e[1]+s[1]],palmLandmarks:t.palmLandmarks}}function squarifyBox(t){const n=getBoxCenter(t),e=getBoxSize(t),o=Math.max(...e)/2;return{startPoint:[n[0]-o,n[1]-o],endPoint:[n[0]+o,n[1]+o],palmLandmarks:t.palmLandmarks}}function shiftBox(t,n){const e=[t.endPoint[0]-t.startPoint[0],t.endPoint[1]-t.startPoint[1]],o=[e[0]*n[0],e[1]*n[1]];return{startPoint:[t.startPoint[0]+o[0],t.startPoint[1]+o[1]],endPoint:[t.endPoint[0]+o[0],t.endPoint[1]+o[1]],palmLandmarks:t.palmLandmarks}}class HandDetector{constructor(t,n,e,o,s,i){this.model=t,this.width=n,this.height=e,this.iouThreshold=s,this.scoreThreshold=i,this.anchors=o.map(t=>[t.x_center,t.y_center]),this.anchorsTensor=tensor2d(this.anchors),this.inputSizeTensor=tensor1d([n,e]),this.doubleInputSizeTensor=tensor1d([2*n,2*e])}normalizeBoxes(t){return tidy(()=>{const n=slice(t,[0,0],[-1,2]),e=slice(t,[0,2],[-1,2]),o=add(div(n,this.inputSizeTensor),this.anchorsTensor),s=div(e,this.doubleInputSizeTensor),i=mul(sub(o,s),this.inputSizeTensor),r=mul(add(o,s),this.inputSizeTensor);return concat2d([i,r],1)})}normalizeLandmarks(t,n){return tidy(()=>{const e=add(div(t.reshape([-1,7,2]),this.inputSizeTensor),this.anchors[n]);return mul(e,this.inputSizeTensor)})}getBoundingBoxes(t){return tidy(()=>{const n=mul(sub(t,.5),2),e=env().get(\"WEBGL_PACK_DEPTHWISECONV\");env().set(\"WEBGL_PACK_DEPTHWISECONV\",!0);const o=this.model.predict(n).squeeze();env().set(\"WEBGL_PACK_DEPTHWISECONV\",e);const s=sigmoid(slice(o,[0,0],[-1,1])).squeeze(),i=slice(o,[0,1],[-1,4]),r=this.normalizeBoxes(i),a=console.warn;console.warn=(()=>{});const d=image.nonMaxSuppression(r,s,1,this.iouThreshold,this.scoreThreshold).arraySync();if(console.warn=a,0===d.length)return null;const u=d[0],c=slice(r,[u,0],[1,-1]),h=slice(o,[u,5],[1,14]);return{boxes:c,palmLandmarks:this.normalizeLandmarks(h,u).reshape([-1,2])}})}estimateHandBounds(t){const n=t.shape[1],e=t.shape[2],o=tidy(()=>t.resizeBilinear([this.width,this.height]).div(255)),s=this.getBoundingBoxes(o);if(null===s)return o.dispose(),null;const i=s.boxes.arraySync(),r=i[0].slice(0,2),a=i[0].slice(2,4),d=s.palmLandmarks.arraySync();return o.dispose(),s.boxes.dispose(),s.palmLandmarks.dispose(),scaleBoxCoordinates({startPoint:r,endPoint:a,palmLandmarks:d},[e/this.width,n/this.height])}}const MESH_ANNOTATIONS={thumb:[1,2,3,4],indexFinger:[5,6,7,8],middleFinger:[9,10,11,12],ringFinger:[13,14,15,16],pinky:[17,18,19,20],palmBase:[0]};function rotate(t,n,e,o){const s=backend(),i=buffer(t.shape,t.dtype),[r,a,d,u]=t.shape,c=d*(\"number\"==typeof o?o:o[0]),h=a*(\"number\"==typeof o?o:o[1]),l=Math.sin(-n),m=Math.cos(-n),p=s.readSync(t.dataId);for(let t=0;t<r;t++)for(let n=0;n<a;n++)for(let o=0;o<d;o++)for(let s=0;s<u;s++){const f=[r,n,o,s],_=f[2],P=f[1];let g=(_-c)*m-(P-h)*l,M=(_-c)*l+(P-h)*m;g=Math.round(g+c),M=Math.round(M+h);let T=e;if(\"number\"!=typeof e&&(T=3===s?255:e[s]),g>=0&&g<d&&M>=0&&M<a){T=p[t*d*a*u+M*(d*u)+g*u+s]}const I=t*d*a*u+n*(d*u)+o*u+s;i.values[I]=T}return i.toTensor()}function rotate$1(t,n,e,o){const s=t.shape,i=s[1],r=s[2],a=Math.sin(n),d=Math.cos(n),u=Math.floor(r*(\"number\"==typeof o?o:o[0])),c=Math.floor(i*(\"number\"==typeof o?o:o[1]));let h=\"\";const l={variableNames:[\"Image\"],outputShape:s,userCode:`\\n      void main() {\\n        ivec4 coords = getOutputCoords();\\n        int x = coords[2];\\n        int y = coords[1];\\n        int coordX = int(float(x - ${u}) * ${d} -\\n          float(y - ${c}) * ${a});\\n        int coordY = int(float(x - ${u}) * ${a} +\\n          float(y - ${c}) * ${d});\\n        coordX = int(coordX + ${u});\\n        coordY = int(coordY + ${c});\\n\\n        ${h=\"number\"==typeof e?`float outputValue = ${e.toFixed(2)};`:`\\n      vec3 fill = vec3(${e.join(\",\")});\\n      float outputValue = fill[coords[3]];`}\\n\\n        if(coordX > 0 && coordX < ${r} && coordY > 0 && coordY < ${i}) {\\n          outputValue = getImage(coords[0], coordY, coordX, coords[3]);\\n        }\\n\\n      setOutput(outputValue);\\n    }`};return backend().compileAndRun(l,[t])}function normalizeRadians(t){return t-2*Math.PI*Math.floor((t+Math.PI)/(2*Math.PI))}function computeRotation(t,n){return normalizeRadians(Math.PI/2-Math.atan2(-(n[1]-t[1]),n[0]-t[0]))}const buildTranslationMatrix=(t,n)=>[[1,0,t],[0,1,n],[0,0,1]];function dot(t,n){let e=0;for(let o=0;o<t.length;o++)e+=t[o]*n[o];return e}function getColumnFrom2DArr(t,n){const e=[];for(let o=0;o<t.length;o++)e.push(t[o][n]);return e}function multiplyTransformMatrices(t,n){const e=[],o=t.length;for(let s=0;s<o;s++){e.push([]);for(let i=0;i<o;i++)e[s].push(dot(t[s],getColumnFrom2DArr(n,i)))}return e}function buildRotationMatrix(t,n){const e=Math.cos(t),o=Math.sin(t),s=[[e,-o,0],[o,e,0],[0,0,1]];return multiplyTransformMatrices(multiplyTransformMatrices(buildTranslationMatrix(n[0],n[1]),s),buildTranslationMatrix(-n[0],-n[1]))}function invertTransformMatrix(t){const n=[[t[0][0],t[1][0]],[t[0][1],t[1][1]]],e=[t[0][2],t[1][2]],o=[-dot(n[0],e),-dot(n[1],e)];return[n[0].concat(o[0]),n[1].concat(o[1]),[0,0,1]]}function rotatePoint(t,n){return[dot(t,n[0]),dot(t,n[1])]}const UPDATE_REGION_OF_INTEREST_IOU_THRESHOLD=.8,PALM_BOX_SHIFT_VECTOR=[0,-.4],PALM_BOX_ENLARGE_FACTOR=3,HAND_BOX_SHIFT_VECTOR=[0,-.1],HAND_BOX_ENLARGE_FACTOR=1.65,PALM_LANDMARK_IDS=[0,5,9,13,17,1,2],PALM_LANDMARKS_INDEX_OF_PALM_BASE=0,PALM_LANDMARKS_INDEX_OF_MIDDLE_FINGER_BASE=2;class HandPipeline{constructor(t,n,e,o,s,i){this.regionsOfInterest=[],this.runsWithoutHandDetector=0,this.boundingBoxDetector=t,this.meshDetector=n,this.maxContinuousChecks=s,this.detectionConfidence=i,this.meshWidth=e,this.meshHeight=o,this.maxHandsNumber=1}getBoxForPalmLandmarks(t,n){const e=t.map(t=>{return rotatePoint([...t,1],n)});return enlargeBox(squarifyBox(shiftBox(this.calculateLandmarksBoundingBox(e),PALM_BOX_SHIFT_VECTOR)),PALM_BOX_ENLARGE_FACTOR)}getBoxForHandLandmarks(t){const n=enlargeBox(squarifyBox(shiftBox(this.calculateLandmarksBoundingBox(t),HAND_BOX_SHIFT_VECTOR)),HAND_BOX_ENLARGE_FACTOR),e=[];for(let n=0;n<PALM_LANDMARK_IDS.length;n++)e.push(t[PALM_LANDMARK_IDS[n]].slice(0,2));return n.palmLandmarks=e,n}transformRawCoords(t,n,e,o){const s=getBoxSize(n),i=[s[0]/this.meshWidth,s[1]/this.meshHeight],r=t.map(t=>[i[0]*(t[0]-this.meshWidth/2),i[1]*(t[1]-this.meshHeight/2),t[2]]),a=buildRotationMatrix(e,[0,0]),d=r.map(t=>{return[...rotatePoint(t,a),t[2]]}),u=invertTransformMatrix(o),c=[...getBoxCenter(n),1],h=[dot(c,u[0]),dot(c,u[1])];return d.map(t=>[t[0]+h[0],t[1]+h[1],t[2]])}async estimateHand(t){const n=this.shouldUpdateRegionsOfInterest();if(!0===n){const n=this.boundingBoxDetector.estimateHandBounds(t);if(null===n)return t.dispose(),this.regionsOfInterest=[],null;this.updateRegionsOfInterest(n,!0),this.runsWithoutHandDetector=0}else this.runsWithoutHandDetector++;const e=this.regionsOfInterest[0],o=computeRotation(e.palmLandmarks[PALM_LANDMARKS_INDEX_OF_PALM_BASE],e.palmLandmarks[PALM_LANDMARKS_INDEX_OF_MIDDLE_FINGER_BASE]),s=getBoxCenter(e),i=[s[0]/t.shape[2],s[1]/t.shape[1]];let r;const a=getBackend();if(\"webgl\"===a)r=rotate$1(t,o,0,i);else{if(\"cpu\"!==a)throw new Error(`Handpose is not yet supported by the ${a} `+\"backend - rotation kernel is not defined.\");r=rotate(t,o,0,i)}const d=buildRotationMatrix(-o,s);let u;const c=cutBoxFromImageAndResize(u=!0===n?this.getBoxForPalmLandmarks(e.palmLandmarks,d):e,r,[this.meshWidth,this.meshHeight]),h=c.div(255);c.dispose(),r.dispose();const l=env().get(\"WEBGL_PACK_DEPTHWISECONV\");env().set(\"WEBGL_PACK_DEPTHWISECONV\",!0);const[m,p]=this.meshDetector.predict(h);env().set(\"WEBGL_PACK_DEPTHWISECONV\",l),h.dispose();const f=m.dataSync()[0];if(m.dispose(),f<this.detectionConfidence)return p.dispose(),this.regionsOfInterest=[],null;const _=reshape(p,[-1,3]),P=_.arraySync();p.dispose(),_.dispose();const g=this.transformRawCoords(P,u,o,d),M=this.getBoxForHandLandmarks(g);return this.updateRegionsOfInterest(M,!1),{landmarks:g,handInViewConfidence:f,boundingBox:{topLeft:M.startPoint,bottomRight:M.endPoint}}}calculateLandmarksBoundingBox(t){const n=t.map(t=>t[0]),e=t.map(t=>t[1]);return{startPoint:[Math.min(...n),Math.min(...e)],endPoint:[Math.max(...n),Math.max(...e)]}}updateRegionsOfInterest(t,n){if(n)this.regionsOfInterest=[t];else{const n=this.regionsOfInterest[0];let e=0;if(null!=n&&null!=n.startPoint){const[o,s]=t.startPoint,[i,r]=t.endPoint,[a,d]=n.startPoint,[u,c]=n.endPoint,h=Math.max(o,a),l=Math.max(s,d),m=(Math.min(i,u)-h)*(Math.min(r,c)-l);e=m/((i-o)*(r-s)+(u-a)*(c-s)-m)}this.regionsOfInterest[0]=e>UPDATE_REGION_OF_INTEREST_IOU_THRESHOLD?n:t}}shouldUpdateRegionsOfInterest(){return this.regionsOfInterest.length!==this.maxHandsNumber||this.runsWithoutHandDetector>=this.maxContinuousChecks}}async function loadHandDetectorModel(){return loadGraphModel(\"https://tfhub.dev/mediapipe/tfjs-model/handdetector/1/default/1\",{fromTFHub:!0})}const MESH_MODEL_INPUT_WIDTH=256,MESH_MODEL_INPUT_HEIGHT=256;async function loadHandPoseModel(){return loadGraphModel(\"https://tfhub.dev/mediapipe/tfjs-model/handskeleton/1/default/1\",{fromTFHub:!0})}async function loadAnchors(){return util.fetch(\"https://tfhub.dev/mediapipe/tfjs-model/handskeleton/1/default/1/anchors.json?tfjs-format=file\").then(t=>t.json())}async function load({maxContinuousChecks:t=1/0,detectionConfidence:n=.8,iouThreshold:e=.3,scoreThreshold:o=.5}={}){const[s,i,r]=await Promise.all([loadAnchors(),loadHandDetectorModel(),loadHandPoseModel()]),a=new HandDetector(i,MESH_MODEL_INPUT_WIDTH,MESH_MODEL_INPUT_HEIGHT,s,e,o),d=new HandPipeline(a,r,MESH_MODEL_INPUT_WIDTH,MESH_MODEL_INPUT_HEIGHT,t,n);return new HandPose(d)}function getInputTensorDimensions(t){return t instanceof Tensor?[t.shape[0],t.shape[1]]:[t.height,t.width]}function flipHandHorizontal(t,n){const{handInViewConfidence:e,landmarks:o,boundingBox:s}=t;return{handInViewConfidence:e,landmarks:o.map(t=>[n-1-t[0],t[1],t[2]]),boundingBox:{topLeft:[n-1-s.topLeft[0],s.topLeft[1]],bottomRight:[n-1-s.bottomRight[0],s.bottomRight[1]]}}}class HandPose{constructor(t){this.pipeline=t}static getAnnotations(){return MESH_ANNOTATIONS}async estimateHands(t,n=!1){const[,e]=getInputTensorDimensions(t),o=tidy(()=>(t instanceof Tensor||(t=browser.fromPixels(t)),t.toFloat().expandDims(0))),s=await this.pipeline.estimateHand(o);if(o.dispose(),null===s)return[];let i=s;!0===n&&(i=flipHandHorizontal(s,e));const r={};for(const t of Object.keys(MESH_ANNOTATIONS))r[t]=MESH_ANNOTATIONS[t].map(t=>i.landmarks[t]);return[{handInViewConfidence:i.handInViewConfidence,boundingBox:i.boundingBox,landmarks:i.landmarks,annotations:r}]}}export{load,HandPose};\n","import { ArgumentType, BlockType, Extension, Block, DefineBlock, Environment, ExtensionMenuDisplayDetails, RuntimeEvent } from \"$common\";\n\n// import Video from '../../../packages/scratch-vm/src/io/video'; // Save for now\nimport * as handpose from '@tensorflow-models/handpose';\n\n/**\n * States the video sensing activity can be set to.\n * @readonly\n * @enum {string}\n */\nconst VideoState = {\n  /** Video turned off. */\n  OFF: 0,\n\n  /** Video turned on with default y axis mirroring. */\n  ON: 1,\n\n  /** Video turned on without default y axis mirroring. */\n  ON_FLIPPED: 2\n};\n\n/**\n * Contains the details about the Hand Sensing extension\n */\ntype Details = {\n  name: \"Hand Sensing\",\n  description: \"Sense hand movement with the camera.\",\n  iconURL: \"pose-hand.png\",\n  insetIconURL: \"pose-hand-small-3.svg\"\n};\n\n/**\n * Contains descriptions of the blocks of the Hand Sensing extension\n */\ntype Blocks = {\n  goToHandPartBlock(handPart: string, fingerPart: number): void;\n  // these video blocks are present in a few different extensions, perhaps making a file just for these?\n  videoToggleBlock(state: number): void;\n  setVideoTransparencyBlock(transparency: number): void;\n};\n\n\nexport default class PoseHand extends Extension<Details, Blocks> {\n  /**\n   * The state of where the hand and its parts are estimated to be\n   */\n  handPoseState;\n\n  /**\n   * Flag to determine if the extension has been installed before\n   * @type {boolean}\n   */\n  firstInstall: boolean;\n\n  /**\n   * The hand model from handpose\n   */\n  private handModel;\n\n  /**\n   * The current video state\n   * @type {number}\n   */\n  globalVideoState: number;\n\n  /**\n   * The current transparency of the video\n   * @type {number}\n   */\n  globalVideoTransparency: number;\n\n  /**\n   * Acts like class PoseHand's constructor (instead of a child class constructor)\n   * @param env \n   */\n  init(env: Environment) {\n\n    this.runtime = env.runtime;\n    const EXTENSION_ID = 'PoseHand';\n\n    /* Unused but possibly needed in the future\n    this.runtime.registerPeripheralExtension(EXTENSION_ID, this);\n    this.runtime.connectPeripheral(EXTENSION_ID, 0);\n    this.runtime.emit(this.runtime.constructor.PERIPHERAL_CONNECTED);\n    */\n\n    this.firstInstall = true;\n\n    if (this.runtime.ioDevices) {\n      /* Possibly unnecessary, keep commented just in case\n      this.runtime.on(RuntimeEvent.ProjectLoaded, this.projectStarted.bind(this));\n      this.runtime.on(RuntimeEvent.ProjectRunStart, this.reset.bind(this)); \n      */\n      this._loop();\n    }\n  }\n\n  /**\n   * Dimensions the video stream is analyzed at after its rendered to the\n   * sample canvas.\n   * @type {Array.<number>}\n   */\n  static get DIMENSIONS() {\n    return [480, 360];\n  }\n\n  /**\n   * Converts the coordinates from the hand pose estimate to Scratch coordinates\n   * @param x \n   * @param y\n   * @param z\n   * @returns enum\n   */\n  tfCoordsToScratch({ x, y, z }) {\n    return { x: x - 250, y: 200 - y };\n  }\n\n  /**\n   * Get the latest values for video transparency and state,\n   * and set the video device to use them.\n   */\n  projectStarted() {\n    this.setVideoTransparency(this.globalVideoTransparency);\n    this.videoToggle(this.globalVideoState);\n  }\n\n  /**\n   * init() binds to this function, but it is never called, so this may be unimportant\n   */\n  // reset() {\n  // }\n\n  /**\n   * Checks if the hand pose estimate is ready to be used\n   * @returns {boolean} true if connected, false if not connected\n   */\n  isConnected() {\n    console.log('connected');\n    return !!this.handPoseState && this.handPoseState.length > 0;\n  }\n\n  /**\n   * Runs for the entire time the extension is running. Gets information about the video frame.\n   * Estimates where the hand is on the video frame. Creates a delay to prevent this function from constantly running,\n   * so as to prevent the entire program from slowing down.\n   */\n  async _loop() {\n    while (true) {\n      const frame = this.runtime.ioDevices.video.getFrame({\n        format: 'image-data',\n        // format: Video.FORMAT_IMAGE_DATA,\n        dimensions: PoseHand.DIMENSIONS\n      });\n\n      const time = +new Date();\n      if (frame) {\n        this.handPoseState = await this.estimateHandPoseOnImage(frame);\n        /*\n        if (this.isConnected()) {\n            this.runtime.emit(this.runtime.constructor.PERIPHERAL_CONNECTED);\n        } else {\n            this.runtime.emit(this.runtime.constructor.PERIPHERAL_DISCONNECTED);\n        }\n        */\n      }\n      const estimateThrottleTimeout = (+new Date() - time) / 4;\n      await new Promise(r => setTimeout(r, estimateThrottleTimeout));\n    }\n  }\n\n  /**\n   * Estimates where the hand is on the video frame.\n   * @param imageElement\n   * @returns {Promise<AnnotatedPrediction[]>}\n   */\n  async estimateHandPoseOnImage(imageElement) {\n    const handModel = await this.getLoadedHandModel();\n    return await handModel.estimateHands(imageElement, {\n      flipHorizontal: false\n    });\n  }\n\n  /**\n   * Gets the hand model from handpose\n   * @returns hand model\n   */\n  async getLoadedHandModel() {\n    this.handModel ??= await handpose.load();\n    return this.handModel;\n  }\n\n  /**\n   * Turns the video camera off/on/on and flipped. This is called in the operation of videoToggleBlock\n   * @param state \n   */\n  videoToggle(state: number) {\n    if (state === VideoState.OFF) return this.runtime.ioDevices.video.disableVideo();\n\n    this.runtime.ioDevices.video.enableVideo();\n    // Mirror if state is ON. Do not mirror if state is ON_FLIPPED.\n    this.runtime.ioDevices.video.mirror = (state === VideoState.ON);\n  }\n\n  /**\n   * Sets the video's transparency. This is called in the operation of setVideoTransparencyBlock\n   * @param transparency \n   */\n  setVideoTransparency(transparency: number) {\n    const trans = Math.max(Math.min(transparency, 100), 0);\n    this.runtime.ioDevices.video.setPreviewGhost(trans);\n  }\n\n  /**\n   * Sets up the default settings for the extension. Gives information related to each of the extension's blocks\n   * @returns The extension's blocks\n   */\n  defineBlocks(): PoseHand[\"BlockDefinitions\"] {\n\n    /**\n     * Sets up the extension's default video settings\n     */\n    if (this.firstInstall) {\n      this.globalVideoState = VideoState.ON;\n      this.globalVideoTransparency = 50;\n      this.projectStarted();\n      this.firstInstall = false;\n      this.handModel = null;\n    }\n\n    /**\n     * The options for each finger\n     * @type {Array}\n     */\n    const fingerOptions =\n      [{ text: \"thumb\", value: \"thumb\" }, { text: \"index finger\", value: \"indexFinger\" },\n      { text: \"middle finger\", value: \"middleFinger\" }, { text: \"ring finger\", value: \"ringFinger\" }, { text: \"pinky finger\", value: \"pinky\" }];\n\n    const handlerFingerOptions = fingerOptions.map(finger => finger.value);\n    /**\n     * The options for the part of a finger\n     * @type {Array}\n     */\n    const partOfFingerOptions = [{ text: \"tip\", value: 3 }, { text: \"first knuckle\", value: 2 },\n    { text: \"second knuckle\", value: 1 }, { text: \"base\", value: 0 }];\n\n\n    type DefineGoToHandPart = DefineBlock<PoseHand, Blocks[\"goToHandPartBlock\"]>;\n    const goToHandPartBlock: DefineGoToHandPart = () => ({\n      type: BlockType.Command,\n      args: [{\n        type: ArgumentType.String,\n        options: {\n          acceptsReporters: true,\n          items: fingerOptions,\n          handler: (finger: string) => {\n            return handlerFingerOptions.includes(finger) ? finger : \"thumb\";\n          }\n        }\n      },\n      {\n        type: ArgumentType.Number,\n        options: {\n          acceptsReporters: true,\n          items: partOfFingerOptions,\n          handler: (part: number) => {\n            return Math.max(Math.min(part, 3), 0)\n          }\n        }\n      }],\n      text: (handPart: string, fingerPart: number) => `go to ${handPart} ${fingerPart}`,\n      operation: (handPart: string, fingerPart: number, util) => {\n\n        if (this.isConnected()) {\n          console.log('connected 2');\n          const [x, y, z] = this.handPoseState[0].annotations[handPart][fingerPart];\n          const { x: scratchX, y: scratchY } = this.tfCoordsToScratch({ x, y, z });\n          (util.target as any).setXY(scratchX, scratchY, false);\n        }\n      }\n    });\n\n    type DefineVideoToggle = DefineBlock<PoseHand, Blocks[\"videoToggleBlock\"]>;\n    const videoToggleBlock: DefineVideoToggle = () => ({\n      type: BlockType.Command,\n      arg: {\n        type: ArgumentType.Number,\n        options: {\n          acceptsReporters: true,\n          items: [{ text: 'off', value: VideoState.OFF }, { text: 'on', value: VideoState.ON }, { text: 'on and flipped', value: VideoState.ON_FLIPPED }],\n          handler: (video_state: number) => {\n            return Math.min(Math.max(video_state, VideoState.OFF), VideoState.ON_FLIPPED);\n          }\n        }\n      },\n      text: (video_state: number) => `turn video ${video_state}`,\n      operation: (video_state: number) => {\n        this.videoToggle(video_state);\n      }\n    });\n\n    type DefineSetVideoTransparency = DefineBlock<PoseHand, Blocks[\"setVideoTransparencyBlock\"]>;\n    const setVideoTransparencyBlock: DefineSetVideoTransparency = () => ({\n      type: BlockType.Command,\n      arg: { type: ArgumentType.Number, defaultValue: 50 },\n      text: (transparency: number) => `set video transparency to ${transparency}`,\n      operation: (transparency: number) => {\n        this.setVideoTransparency(transparency);\n      }\n    });\n\n    return {\n      goToHandPartBlock,\n      videoToggleBlock,\n      setVideoTransparencyBlock\n    }\n  }\n}\n\n\n\n"],"names":["poseHand","exports","$common","t","e","n","Object","setPrototypeOf","__proto__","Array","hasOwnProperty","r","this","constructor","prototype","create","Promise","o","a","i","u","next","s","throw","done","value","then","apply","label","sent","trys","ops","return","Symbol","iterator","TypeError","call","pop","length","push","global","flags","flagRegistry","urlFlags","populateURLFlags","setPlatform","platform","console","warn","platformName","registerFlag","evaluationFn","setHook","set","get","evaluateFlag","getNumber","getBool","getFlags","defineProperty","enumerable","configurable","Error","setFlags","assign","reset","location","search","replace","arguments","join","tfjsflags","split","forEach","toLowerCase","decodeURIComponent","Map","c","l","m","h","f","entries","d","kernelName","backendName","has","p","y","Math","random","x","max","min","b","w","C","E","S","R","I","isArray","V","k","A","T","tanh","exp","D","ceil","sqrt","N","repeat","F","setTimeout","_","slice","O","map","concat","every","M","sort","newShape","keptDims","B","Float32Array","Int32Array","Uint8Array","P","L","isNaN","isFinite","W","U","z","G","H","String","q","K","j","X","Y","$","Q","round","J","reduce","Z","tt","et","now","nt","Number","isInteger","rt","encode","ot","decode","at","it","floor","st","freeze","shuffle","clamp","nearestLargerEven","sum","randUniform","distSquared","assert","assertShapesMatch","assertNonNull","flatten","sizeFromShape","isScalarShape","arraysEqual","isInt","sizeToSquarishShape","createShuffledIndices","Uint32Array","rightPad","repeatedTry","inferFromImplicitShape","parseAxisParam","squeezeShape","getTypedArrayFromDType","getArrayFromDType","checkConversionForErrors","isValidDtype","hasEncodingLoss","isTypedArray","bytesPerElement","bytesFromStringArray","isString","isBoolean","isNumber","inferDtype","isFunction","nearestDivisor","computeStrides","toTypedArray","toNestedArray","makeOnesTypedArray","makeZerosTypedArray","assertNonNegativeIntegerDimensions","fetch","encodeString","decodeString","locToIndex","indexToLoc","ut","backendTimer","logger","ct","profileKernel","time","data","dtype","getExtraProfileInfo","logKernelProfile","kernelMs","error","rank","size","shape","toString","log","pt","parseFloat","toFixed","vt","gt","mt","values","strides","toTensor","yt","makeTensor","xt","bt","wt","kept","isDisposedInternal","dataId","id","rankType","throwIfDisposed","as1D","asScalar","reshape","as2D","as3D","as4D","as5D","asType","cast","buffer","bufferSync","dataSync","array","arraySync","read","readSync","bytes","dispose","isDisposed","disposeTensor","toFloat","toInt","toBool","print","reshapeAs","expandDims","cumsum","squeeze","clone","fill","from","v","g","dt","gather","matMul","dot","norm","reverse","stack","unstack","batchNormalization","batchNorm","all","any","logSumExp","prod","mean","argMin","argMax","addStrict","atan2","sub","subStrict","pow","powStrict","mul","mulStrict","floorDiv","divStrict","minimum","minimumStrict","maximum","maximumStrict","mod","modStrict","squaredDifferenceStrict","notEqual","notEqualStrict","less","lessStrict","equal","equalStrict","lessEqual","lessEqualStrict","greater","greaterStrict","greaterEqual","greaterEqualStrict","logicalAnd","logicalOr","logicalNot","logicalXor","where","neg","sign","isInf","expm1","log1p","rsqrt","square","reciprocal","abs","clipByValue","relu","relu6","elu","selu","leakyRelu","prelu","sigmoid","logSigmoid","softplus","zerosLike","onesLike","sin","cos","tan","asin","acos","atan","sinh","cosh","asinh","acosh","atanh","erf","step","softmax","logSoftmax","resizeBilinear","image","resizeNearestNeighbor","conv1d","conv2d","conv2dTranspose","depthwiseConv2D","depthwiseConv2d","separableConv2d","avgPool","maxPool","localResponseNormalization","pool","variable","makeVariable","unsortedSegmentSum","batchToSpaceND","spaceToBatchND","topk","stridedSlice","depthToSpace","fft","spectral","ifft","rfft","irfft","hasInstance","Ct","Et","Rt","It","kt","St","trainable","name","incRef","disposeVariable","Function","R0","R1","R2","R3","R4","R5","R6","float32","int32","bool","complex64","Ot","At","Tt","Dt","Nt","Ft","_t","add","Set","makeTypesMatch","assertTypesMatch","isTensorInList","some","getTensorsInContainer","Bt","registeredVariables","nextTapeNodeId","numBytes","numTensors","numStringTensors","numDataBuffers","gradientDepth","kernelDepth","scopeStack","numDataMovesStack","nextScopeId","tensorInfo","WeakMap","profiling","activeProfile","newBytes","newTensors","peakBytes","kernels","result","Pt","ENV","registry","registryFactory","pendingBackendInitId","state","ready","pendingBackendInit","backendInstance","getSortedBackends","initializeBackend","success","setBackend","initializeBackendsAndReturnBest","asyncInit","backendNames","keys","findBackend","findBackendFactory","factory","registerBackend","priority","setupRegisteredKernels","profiler","setupFunc","disposeRegisteredKernels","disposeFunc","resolve","catch","message","removeBackend","moveData","backend","disposeData","move","shouldCheckForMemLeaks","tidy","scopedRun","startScope","endScope","nextTensorId","nextVariableId","makeTensorFromDataId","addTapeNode","activeScope","runKernel","runKernelFunc","checkKernelForMemLeak","numDataIds","isTapeOn","kernelFunc","inputs","attrs","getTensorsForGradient","filter","saveTensorsForBackwardMode","keep","bytesAdded","totalBytesSnapshot","tensorsAdded","totalTensorsSnapshot","inputShapes","outputShapes","inputsToSave","outputsToSave","saveAllInputs","write","refCount","track","delete","disposeVariables","memory","unreliable","reasons","profile","outputs","saved","gradFunc","gradient","activeTape","startTape","endTape","scopeId","gradients","Lt","grads","customGrad","wallMs","window","process","self","_tfengine","Wt","document","WorkerGlobalScope","Ut","versions","node","navigator","userAgent","test","vendor","Vt","zt","Gt","Ht","qt","alpha","antialias","premultipliedAlpha","preserveDrawingBuffer","depth","stencil","failIfMajorPerformanceCaveat","Kt","jt","OffscreenCanvas","createElement","addEventListener","preventDefault","getContext","isContextLost","disable","DEPTH_TEST","STENCIL_TEST","BLEND","DITHER","POLYGON_OFFSET_FILL","SAMPLE_COVERAGE","enable","SCISSOR_TEST","CULL_FACE","cullFace","BACK","Xt","Yt","$t","Qt","R32F","R16F","RGBA16F","RGBA32F","RED","HALF_FLOAT","FLOAT","RGBA","HALF_FLOAT_OES","internalFormatFloat","internalFormatHalfFloat","internalFormatPackedHalfFloat","internalFormatPackedFloat","textureFormatFloat","downloadTextureFormat","downloadUnpackNumChannels","defaultNumChannels","textureTypeHalfFloat","textureTypeFloat","Jt","getError","NO_ERROR","ne","DENSE","SHARED_BATCH","RENDER","UPLOAD","PIXELS","DOWNLOAD","UNPACKED_FLOAT16","UNPACKED_FLOAT32","PACKED_4X1_UNSIGNED_BYTE","PACKED_2X2_FLOAT32","PACKED_2X2_FLOAT16","ee","INVALID_ENUM","INVALID_VALUE","INVALID_OPERATION","INVALID_FRAMEBUFFER_OPERATION","OUT_OF_MEMORY","CONTEXT_LOST_WEBGL","re","ke","getExtension","oe","createShader","VERTEX_SHADER","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","ae","FRAGMENT_SHADER","ue","exec","ie","se","ce","createProgram","le","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","he","validateProgram","VALIDATE_STATUS","fe","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","STATIC_DRAW","de","ELEMENT_ARRAY_BUFFER","pe","createTexture","ve","ge","createFramebuffer","me","getAttribLocation","vertexAttribPointer","enableVertexAttribArray","ye","Se","activeTexture","TEXTURE0","bindTexture","TEXTURE_2D","xe","getUniformLocation","be","we","uniform1i","Ce","bindFramebuffer","FRAMEBUFFER","framebufferTexture2D","COLOR_ATTACHMENT0","Ee","Re","checkFramebufferStatus","FRAMEBUFFER_COMPLETE","Ie","FRAMEBUFFER_INCOMPLETE_ATTACHMENT","FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT","FRAMEBUFFER_INCOMPLETE_DIMENSIONS","FRAMEBUFFER_UNSUPPORTED","MAX_COMBINED_TEXTURE_IMAGE_UNITS","Ae","Te","De","Ne","Fe","_e","Oe","getParameter","MAX_TEXTURE_SIZE","Me","MAX_TEXTURE_IMAGE_UNITS","Be","Pe","Le","We","Ve","Ue","texImage2D","deleteTexture","deleteFramebuffer","ze","fenceSync","Ge","callAndCheck","canBeRepresented","getWebGLErrorMessage","getExtensionOrThrow","createVertexShader","createFragmentShader","createStaticVertexBuffer","createStaticIndexBuffer","getNumChannels","validateTextureSize","bindVertexBufferToProgramAttribute","bindTextureUnit","unbindTextureUnit","getProgramUniformLocationOrThrow","getProgramUniformLocation","bindTextureToProgramUniformSampler","bindCanvasToFramebuffer","viewport","canvas","width","height","scissor","bindColorTextureToFramebuffer","unbindColorTextureFromFramebuffer","validateFramebuffer","getFramebufferErrorMessage","getBatchDim","getRowsCols","getShapeAs3D","getTextureShapeFromLogicalShape","isReshapeFree","getWebGLMaxTextureSize","resetMaxTextureSize","resetMaxTexturesInShader","getMaxTexturesInShader","getWebGLDisjointQueryTimerVersion","hasExtension","isWebGLVersionEnabled","isCapableOfRenderingToFloatTexture","isDownloadFloatTextureEnabled","isWebGLFenceEnabled","He","Xe","Ze","tn","hn","dn","pn","vn","gn","indexOf","mn","yn","xn","bn","wn","Cn","En","Rn","In","kn","Sn","An","endsWith","substring","opera","substr","Tn","complex_","complex","$real","$imag","Dn","real_","real","$input","Nn","imag_","imag","Fn","_n","On","Mn","Bn","Pn","Ln","zn","Gn","Hn","qn","linspace","Kn","jn","onesLike_","Xn","zerosLike_","Yn","concat_","axis","tr","$n","concat1d_","Qn","concat2d_","Jn","concat3d_","Zn","concat4d_","split_","$x","er","rr","batchToSpaceND_","or","cast_","ar","cumsum_","transpose","permutedX","ir","depthToSpace_","sr","expandDims_","splice","ur","reshape_","cr","spaceToBatchND_","lr","squeeze_","hr","stack_","fr","unstack_","dr","pr","vr","gr","mr","yr","wr","Er","Sr","Ar","Tr","Dr","Nr","Or","add_","Mr","unshift","Br","Pr","Lr","abs_","complexAbs","Wr","acos_","Ur","acosh_","Vr","asin_","zr","asinh_","Gr","atan_","div","Hr","atanh_","qr","ceil_","Kr","clipByValue_","clip","jr","cos_","Xr","cosh_","Yr","erf_","PI","$r","exp_","Qr","expm1_","Jr","floor_","Zr","log_","to","log1p_","eo","logSigmoid_","no","neg_","ro","reciprocal_","oo","round_","ao","rsqrt_","io","sigmoid_","so","sign_","uo","isNaN_","co","isInf_","lo","isFinite_","ho","sin_","fo","sinh_","po","softplus_","vo","sqrt_","go","step_","mo","tan_","yo","tanh_","xo","addStrict_","bo","atan2_","$a","$b","wo","divStrict_","Co","floorDiv_","Eo","maximum_","Ro","maximumStrict_","Io","minimum_","ko","minimumStrict_","So","mod_","Ao","modStrict_","To","mul_","multiply","Do","mulStrict_","No","pow_","Fo","powStrict_","_o","squaredDifferenceStrict_","squaredDifference","Oo","sub_","subtract","Mo","subStrict_","Bo","div_","realDivide","Po","prepareAndValidate","Uo","Vo","zo","Go","sliceRank","numUpdates","sliceSize","outputSize","qo","Ko","jo","Xo","MIN_SAFE_INTEGER","MAX_SAFE_INTEGER","Yo","$o","Qo","oa","validateUpdateShape","validateInput","calculateShapes","assertParamsValid","maskToAxes","computeOutShape","startForAxis","stopForAxis","isSliceContinous","computeFlatOffset","ia","softmax_","logits","dim","sa","logSoftmax_","ua","transpose_","perm","ca","dataMover","dataIdsCount","la","ha","floatPrecision","epsilon","batchMatMul","fusedBatchMatMul","transposeA","transposeB","bias","activation","preluActivationWeights","addN","select","eluDer","int","fusedConv2d","input","convInfo","conv2dDerInput","conv2dDerFilter","fusedDepthwiseConv2D","depthwiseConv2DDerInput","depthwiseConv2DDerFilter","conv3d","conv3dDerInput","conv3dDerFilter","maxPoolBackprop","avgPoolBackprop","avgPool3d","avgPool3dBackprop","maxPool3d","maxPool3dBackprop","tile","pad","gatherND","scatterND","resizeBilinearBackprop","resizeNearestNeighborBackprop","localResponseNormalization4D","LRNGrad","multinomial","oneHot","nonMaxSuppression","cropAndResize","sparseToDense","diag","fa","ma","pa","da","ya","va","xa","top","bottom","left","right","type","ga","ba","padInfo","outHeight","outWidth","batchSize","dataFormat","inHeight","inWidth","inChannels","outChannels","strideHeight","strideWidth","filterHeight","filterWidth","effectiveFilterHeight","effectiveFilterWidth","dilationHeight","dilationWidth","inShape","outShape","filterShape","front","back","outDepth","inDepth","strideDepth","filterDepth","effectiveFilterDepth","dilationDepth","wa","Ca","Ea","Ra","Ia","ka","Aa","Ta","Da","Na","Fa","_a","Oa","Ba","selectedIndices","Ma","numValidOutputs","selectedScores","score","boxIndex","suppressBeginIndex","Wa","Pa","La","subarray","Ua","Va","za","index","Ga","castTensor","reshapeTensor","linspaceImpl","upcastType","axesAreInnerMostDims","combineLocations","computeOutAndReduceShapes","expandShapeToKeepDim","assertAxesAreInnerMostDims","getAxesPermutation","getUndoAxesPermutation","getInnerMostAxes","getBroadcastDims","getReductionAxes","assertAndGetBroadcastShape","assertParamsConsistent","computePool2DInfo","computePool3DInfo","computeConv2DInfo","computeConv3DInfo","computeDefaultPad","tupleValuesAreOne","eitherStridesOrDilationsAreOne","convertConv2DDataFormat","PARALLELIZE_THRESHOLD","computeOptimalWindowSize","Ha","outputShape","variableNames","userCode","qa","packedInputs","packedOutput","Ka","windowSize","inSize","ja","Xa","Ya","version","attribute","varyingVs","varyingFs","texture2D","output","defineOutput","defineSpecialNaN","defineSpecialInf","defineRound","Qa","Ja","Za","shapeInfo","logicalShape","isUniform","ei","ti","charAt","toUpperCase","ui","texShape","flatOffset","ni","ri","oi","isPacked","ai","ii","si","ci","li","JSON","parse","stringify","hi","fi","di","pi","vi","yi","xi","bi","wi","Ei","Ri","ki","Si","supportsBroadcasting","Ai","getCustomSetupFunc","minLoc","getUniformLocationNoThrow","maxLoc","gl","uniform1f","Ti","Di","Ni","Fi","_i","Oi","Mi","Bi","Pi","Li","Wi","Ui","Vi","zi","Gi","Hi","qi","Ki","ji","outPackingScheme","Xi","Yi","blockSize","getHeightCoordString","getWidthCoordString","getDepthCoordString","getOutputDepthSize","getInputSamplingString","$i","Qi","outTexUsage","Ji","Zi","ts","rs","os","valueLoc","as","is","sliceDim","ss","us","cs","Uint16Array","ls","texParameteri","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","TEXTURE_MIN_FILTER","NEAREST","TEXTURE_MAG_FILTER","hs","fs","ds","UNSIGNED_BYTE","ps","vs","gs","ms","ys","xs","PIXEL_PACK_BUFFER","STREAM_READ","readPixels","bs","getBufferSubData","ws","Cs","Es","Rs","createVertexBuffer","createIndexBuffer","createFloat32MatrixTexture","createFloat16MatrixTexture","createUnsignedBytesMatrixTexture","createPackedMatrixTexture","createFloat16PackedMatrixTexture","bindVertexProgramAttributeStreams","uploadDenseMatrixToTexture","uploadPixelDataToTexture","createBufferFromOutputTexture","downloadFloat32MatrixFromBuffer","downloadByteEncodedFloatMatrixFromOutputTexture","downloadPackedMatrixFromBuffer","downloadMatrixFromPackedOutputTexture","Is","outputTexture","program","disposed","vertexAttrsAreBound","itemsToPoll","textureFloatExtension","debug","textureHalfFloatExtension","colorBufferFloatExtension","colorBufferHalfFloatExtension","vertexBuffer","indexBuffer","framebuffer","textureConfig","finish","deleteBuffer","deleteMatrixTexture","downloadMatrixDriver","createBufferFromTexture","bindTextureToFrameBuffer","unbindTextureToFrameBuffer","createAndWaitForFence","createFence","pollFence","SYNC_GPU_COMMANDS_COMPLETE","flush","clientWaitSync","ALREADY_SIGNALED","CONDITION_SATISFIED","beginQuery","endQuery","isQueryAvailable","query","isFencePassed","downloadMatrixFromPackedTexture","attachShader","setProgram","deleteProgram","useProgram","getAttributeLocation","setInputMatrixTexture","throwIfNoProgram","setOutputMatrixTexture","setOutputMatrixTextureDriver","setOutputPackedMatrixTexture","setOutputMatrixWriteRegion","setOutputMatrixWriteRegionDriver","setOutputPackedMatrixWriteRegion","debugValidate","executeProgram","drawElements","TRIANGLES","UNSIGNED_SHORT","blockUntilAllProgramsCompleted","getQueryTimerExtension","disjointQueryTimerExtension","getQueryTimerExtensionWebGL2","getQueryTimerExtensionWebGL1","createQuery","TIME_ELAPSED_EXT","createQueryEXT","beginQueryEXT","endQueryEXT","waitForQueryAndGetTime","getQueryTime","getQueryParameter","QUERY_RESULT","getQueryObjectEXT","QUERY_RESULT_EXT","QUERY_RESULT_AVAILABLE","disjoint","GPU_DISJOINT_EXT","QUERY_RESULT_AVAILABLE_EXT","addItemToPoll","pollItems","isDoneFn","resolveFn","ks","texData","Ss","As","Ts","depthRadius","beta","Ds","Ns","Fs","_s","Os","seedLoc","Ms","Bs","Ps","Ls","Ws","Us","Vs","zs","Gs","Hs","qs","Ks","js","Xs","Ys","$s","Qs","numSegments","Js","Zs","tu","startLoc","uniform1iv","eu","nu","ru","gpgpu","numUsedTextures","numFreeTextures","freeTextures","logEnabled","usedTextures","acquireTexture","ou","au","shift","releaseTexture","getNumUsedTextures","getNumFreeTextures","iu","su","uu","cu","lu","fu","du","pu","vu","gu","mu","yu","xu","bu","wu","Cu","Eu","Ru","Iu","ku","Su","Au","Tu","Du","Fu","_u","Ou","Mu","Bu","Pu","Lu","Uu","pendingRead","pendingDisposal","WeakSet","dataRefCount","numBytesInGPU","uploadWaitMs","downloadWaitMs","warnedAboutMemory","pendingDeletes","binaryCache","gpgpuCreatedLocally","textureManager","numMBBeforeWarning","screen","devicePixelRatio","cpuBackend","checkNumericalProblems","usage","complexTensors","runWebGLProgram","convertAndCacheOnCPU","activeTimers","getValuesFromTexture","texture","programTimersStack","startTimer","startMs","endMs","endTimer","releaseGPUData","origDataId","computeBytes","getTexture","uploadToGPU","getDataInfo","getCPUBackend","shouldExecuteOnCPU","getGPGPUContext","makeOutput","compileAndRun","shallowSlice","packedUnaryOp","makeComplexComponentTensorInfo","packedBinaryOp","argReduce","argReducePacked","segOpCompute","argMinMaxReduce","complexSeparableBinaryOp","conv2dByMatMul","conv2dWithIm2Row","packedReshape","fftImpl","makeTensorInfo","unpackTensor","packTensor","uniformValues","getAndSaveBinary","source","webGLProgram","uniformLocations","inShapeInfos","outShapeInfo","infLoc","nanLoc","NaN","uniform1fv","getTextureManager","HTMLCanvasElement","remove","floatPrecisionValue","Vu","zu","charCodeAt","s0","s1","s2","double","quick","alea","Gu","xor128","Hu","xorwow","qu","Date","xorshift7","Ku","xor4096","ju","tychei","Xu","entropy","randomBytes","crypto","msCrypto","getRandomValues","plugins","pass","fromCharCode","require","Yu","$u","addN_","Qu","Ju","Zu","scale","offset","variance","varianceEpsilon","tc","ec","batchNormalization_","nc","batchNorm_","rc","oc","batchNormalization2d_","ac","batchNorm2d_","ic","sc","batchNormalization3d_","uc","batchNorm3d_","cc","lc","batchNormalization4d_","hc","batchNorm4d_","fc","broadcastTo_","inputShape","dc","clone_","pc","logicalAnd_","vc","logicalNot_","gc","logicalOr_","mc","logicalXor_","yc","where_","$condition","xc","bc","divNoNan_","wc","tile_","reps","Cc","eye_","Ec","multinomial_","logits2D","Rc","oneHot_","indices","onValue","offValue","Ic","pad_","paddings","constantValue","kc","pad1d_","Sc","pad2d_","Ac","pad3d_","Tc","pad4d_","Dc","rand_","_c","Oc","Mc","TEST_EPSILON_FLOAT16","expectArraysClose","testEpsilon","expectPromiseToFail","fail","expectArraysEqual","expectNumbersClose","expectValuesInRange","expectArrayBuffersEqual","expect","toEqual","Pc","stdDev","nextVal","truncated","upper","lower","nextValue","isValidTruncated","convertValue","Lc","randu","randn","Wc","canReturnFloat","range","Uc","randomGamma_","Vc","randomNormal_","zc","randomUniform_","Gc","square_","Hc","squaredDifference_","qc","truncatedNormal_","Kc","equal_","jc","equalStrict_","Xc","greater_","Yc","greaterEqual_","$c","greaterEqualStrict_","Qc","greaterStrict_","Jc","less_","Zc","lessEqual_","tl","lessEqualStrict_","el","lessStrict_","nl","notEqual_","rl","notEqualStrict_","ol","al","il","gather_","dimSize","sl","unsortedSegmentSum_","cl","dy4D","dl","vl","ll","hl","dy5D","fl","conv1d_","conv2d_","pl","conv3d_","$filter","x5D","conv2dDerFilter_","x4D","conv2dDerInput_","ml","depthwiseConv2d_","yl","xl","depthwiseConv2dDerInput_","depthwiseConv2dDerFilter_","bl","separableConv2d_","wl","conv2dTranspose_","Cl","conv3dTranspose_","El","matMul_","Rl","dot_","Il","outerProduct_","kl","reverse_","Sl","reverse1d_","Al","reverse2d_","Tl","reverse3d_","Dl","reverse4d_","Nl","$dy","Fl","input4D","_l","maxPool_","Ol","avgPool_","Ml","pool_","Bl","maxPool3d_","input5D","Pl","avgPool3d_","Ll","maxPoolWithArgmax_","filterSize","includeBatchInIndex","indexes","Wl","slice_","begin","Ul","slice1d_","Vl","slice2d_","zl","slice3d_","Gl","slice4d_","Hl","ql","all_","Kl","any_","jl","argMax_","Xl","argMin_","Yl","logSumExp_","$l","max_","axes","Ql","mean_","Jl","min_","Zl","moments_","th","sum_","eh","prod_","nh","elu_","dy","rh","leakyRelu_","oh","prelu_","ah","relu_","ih","relu6_","sh","selu_","uh","localResponseNormalization_","ch","norm_","lh","basicLSTMCell_","hh","multiRNNCell_","fh","movingAverage_","dh","stridedSlice_","ph","topk_","vh","scatterND_","updates","gh","fft_","mh","ifft_","yh","rfft_","xh","irfft_","bh","wh","sparseToDense_","$sparseIndices","$sparseValues","$defaultValue","Ch","gatherND_","Eh","diag_","Rh","dropout_","Ih","Nh","kh","hannWindow_","Sh","hammingWindow_","Ah","frame_","Th","stft_","Dh","hannWindow","hammingWindow","frame","stft","NONE","MEAN","SUM","SUM_BY_NONZERO_WEIGHTS","_h","absoluteDifference_","Oh","computeWeightedLoss_","Mh","cosineDistance_","Bh","hingeLoss_","Ph","huberLoss_","Lh","logLoss_","Wh","meanSquaredError_","Uh","sigmoidCrossEntropy_","Vh","softmaxCrossEntropy_","zh","Reduction","absoluteDifference","computeWeightedLoss","cosineDistance","hingeLoss","huberLoss","logLoss","meanSquaredError","sigmoidCrossEntropy","softmaxCrossEntropy","Gh","Hh","bandPart_","qh","gramSchmidt_","Kh","qr_","jh","bandPart","gramSchmidt","Xh","NEGATIVE_INFINITY","maxOutputSize","iouThreshold","scoreThreshold","softNmsSigma","Yh","resizeBilinear_","alignCorners","newHeight","newWidth","$h","resizeNearestNeighbor_","batchImages","Qh","nonMaxSuppression_","boxes","scores","Zh","nonMaxSuppressionWithScore_","ef","cropAndResize_","images","boxInd","method","extrapolationValue","cropSize","nf","nonMaxSuppressionAsync","nonMaxSuppressionWithScore","nonMaxSuppressionWithScoreAsync","rf","of","af","sf","uf","fusedMatMul_","cf","fusedConv2d_","dilations","dimRoundingMode","lf","fusedDepthwiseConv2d_","hf","ff","linalg","losses","fused","signal","batchNorm2d","batchNormalization2d","batchNorm3d","batchNormalization3d","batchNorm4d","batchNormalization4d","broadcastTo","divNoNan","eye","pad1d","pad2d","pad3d","pad4d","rand","randomGamma","randomNormal","randomUniform","truncatedNormal","conv3dTranspose","op","booleanMaskAsync","concat1d","concat2d","concat3d","concat4d","outerProduct","reverse1d","reverse2d","reverse3d","reverse4d","maxPoolWithArgmax","slice1d","slice2d","slice3d","slice4d","moments","whereAsync","setdiff1dAsync","ones","scalar","tensor","tensor1d","tensor2d","tensor3d","tensor4d","tensor5d","tensor6d","zeros","basicLSTMCell","multiRNNCell","movingAverage","dropout","inTopKAsync","df","pf","POSITIVE_INFINITY","vf","gf","linear","mf","firstUse","broadcastedBinaryComplexOp","broadcastedBinaryOp","hypot","trunc","pool3d","maxPool3dPositions","fftBatch","isExponentOf2","fftRadix2","fourierTransformByMatmul","scatter","yf","xf","bf","wf","Cf","Ef","Rf","If","kf","Sf","Af","Tf","Df","Nf","Ff","_f","Of","Mf","pixels","numChannels","HTMLVideoElement","HTMLImageElement","videoWidth","videoHeight","drawImage","Bf","Pf","Lf","performance","textEncoder","TextEncoder","TextDecoder","Wf","Vf","util","hrtime","zf","uint16","uint8","Hf","quantization","qf","byteLength","Kf","Buffer","Blob","atob","btoa","jf","Xf","Yf","trim","$f","modelTopology","ArrayBuffer","dateSaved","modelTopologyType","modelTopologyBytes","weightSpecsBytes","weightSpecs","weightDataBytes","weightData","Qf","saveRouters","loadRouters","getInstance","instance","registerSaveRouter","registerLoadRouter","getSaveHandlers","getHandlers","getLoadHandlers","Jf","Zf","managers","registerManager","getManager","getSchemes","td","scheme","path","ed","load","removeModel","save","modelArtifactsInfo","nd","rd","od","indexedDB","mozIndexedDB","webkitIndexedDB","msIndexedDB","shimIndexedDB","ad","createObjectStore","keyPath","modelPath","databaseAction","open","onupgradeneeded","onsuccess","transaction","objectStore","close","modelArtifacts","onerror","oncomplete","put","URL_SCHEME","sd","startsWith","ud","listModels","getAll","cd","ld","hd","fd","dd","pd","vd","gd","info","topology","modelMetadata","md","yd","localStorage","LS","setItem","format","generatedBy","convertedBy","userDefinedMetadata","removeItem","getItem","byteOffset","xd","bd","key","Rd","Id","modelTopologyFileName","weightDataFileName","URL","createObjectURL","paths","weights","weightsManifest","jsonAnchor","download","href","dispatchEvent","MouseEvent","weightDataAnchor","kd","files","FileReader","onload","target","checkManifestAndWeightFiles","readAsArrayBuffer","readAsText","Sd","Ad","fetchFunc","requestInit","isBinary","onProgress","arrayBuffer","Td","manifestEntry","groupOffset","sizeBytes","Dd","DEFAULT_METHOD","weightPathPrefix","body","FormData","append","ok","responses","status","json","loadWeights","lastIndexOf","URL_SCHEME_REGEX","Nd","match","Fd","_d","Pd","Od","Md","saveHandler","Bd","browserFiles","browserHTTPRequest","concatenateArrayBuffers","decodeWeights","encodeWeights","group","specs","fromMemory","trainingConfig","getModelArtifactsInfoForJSON","http","isHTTPScheme","weightsLoaderFactory","withSaveHandler","copyModel","moveModel","Ld","confusionMatrix_","confusionMatrix","Ud","fromPixels_","ImageData","readyState","getImageData","Vd","toPixels","Uint8ClampedArray","putImageData","fromPixels","zd","getClassName","className","fromConfig","Gd","classNameMap","getMap","register","Hd","Serializable","SerializationMap","registerClass","gpgpu_util","webgl_util","forceHalfFloat","MathBackendWebGL","setWebGLContext","GPGPUContext","Xd","minimize","computeGradients","applyGradients","iterations_","incrementIterations","iterations","ra","saveIterations","getWeights","setWeights","extractIterations","Yd","learningRate","rho","accumulatedGrads","accumulatedUpdates","originalName","getConfig","$d","initialAccumulatorValue","Qd","beta1","beta2","accumulatedFirstMoment","accumulatedSecondMoment","accBeta1","accBeta2","Jd","decay","accumulatedWeightedInfNorm","iteration","Zd","setLearningRate","en","tp","momentum","useNesterov","accumulations","setMomentum","ep","accumulatedMeanSquares","accumulatedMoments","accumulatedMeanGrads","centered","requestAnimationFrame","setImmediate","DataType","SaverDef","__assign","__awaiter","__generator","DT_INVALID","DT_FLOAT","DT_DOUBLE","DT_INT32","DT_UINT8","DT_INT16","DT_INT8","DT_STRING","DT_COMPLEX64","DT_INT64","DT_BOOL","DT_QINT8","DT_QUINT8","DT_QINT32","DT_BFLOAT16","DT_FLOAT_REF","DT_DOUBLE_REF","DT_INT32_REF","DT_UINT8_REF","DT_INT16_REF","DT_INT8_REF","DT_STRING_REF","DT_COMPLEX64_REF","DT_INT64_REF","DT_BOOL_REF","DT_QINT8_REF","DT_QUINT8_REF","DT_QINT32_REF","DT_BFLOAT16_REF","LEGACY","V1","V2","CheckpointFormatVersion","CUSTOM_OPS","getRegisteredOp","getParamValue","inputParams","inputIndexStart","inputIndexEnd","getTensor","inputNames","attrParams","parseNodeName","currentContextIds","find","getNodeNameWithContextId","getNodeNameAndIndex","currentContextId","split$1","arithmetic","tfOpName","category","start","tfName","notSupported","end","basicMath","defaultValue","control","convolution","creation","dynamic","evaluation","graph","image$1","logical","matrices","normalization","reduction","sliceJoin","transformation","tfDeprecatedName","OperationMapper","opMappers","_instance","transformGraph","mapNode","mapSignatureEntries","children","signatureKey","nodes","placeholders","signature","attr","rawAttrs","getStringParam","getStringArrayParam","getNumberParam","getNumericArrayParam","getBoolParam","getBoolArrayParam","getTensorShapeParam","getTensorShapeArrayParam","getDtypeParam","getDtypeArrayParam","parseStringParam","env","decodeBase64","parseInt","parseDtypeParam","list","parseTensorShapeParam","unknownRank","NodeValueImpl","tensorMap","context","getInput","getAttr","TensorArray","maxSize","elementShape","identicalElementShapes","dynamicSize","clearAfterRead","tensors","closed_","nextId","clearAndClose","cleared","readMany","assertShapesMatchAllowUndefinedSize","written","writeMany","shapesEqualAllowUndefinedSize","executeOp$16","executeOp","executeOp$1","enterFrame","exitFrame","nextIteration","addTensorArray","getTensorArray","executeOp$2","executeOp$3","executeOp$4","executeOp$5","executeOp$6","executeOp$8","executeOp$7","executeOp$9","executeOp$10","executeOp$11","executeOp$12","executeOp$13","executeOp$14","executeOp$15","customExecutor","ExecutionContext","weightMap","tensorArrayMap","rootContext","frameName","iterationId","contexts","lastId","generateCurrentContextIds","newFrame","_currentContextIds","contextIdforContexts","getWeight","getExecutionSubgraph","isControlFlow","isDynamicShape","usedNodes","missingInputs","dynamicNode","syncInputs","CONTROL_FLOW_OPS","DYNAMIC_SHAPE_OPS","GraphExecutor","compiledMap","_weightMap","SEPERATOR","_outputs","_inputs","_signature","weightIds","getCompilationKey","compile","getNodesInTopologicalOrder","execute","mapInputs","checkInputs","checkInputShapeAndType","mapOutputs","checkOutputs","getFrozenTensorIds","checkTensorForDisposal","getTensorsForCurrentContenxt","executeAsync","executeWithControlFlow","currentContext","processStack","processChildNodes","GraphModel","modelUrl","loadOptions","executor","inputNodes","outputNodes","findIOHandler","handler","artifacts","producer","minConsumer","Instance","convertTensorMapToTensorsMap","predict","normalizeInputs","Tensor","normalizeOutputs","loadGraphModel","fromTFHub","getBoxSize","endPoint","startPoint","getBoxCenter","enlargeBox","palmLandmarks","squarifyBox","shiftBox","HandDetector","model","anchors","x_center","y_center","anchorsTensor","inputSizeTensor","doubleInputSizeTensor","normalizeBoxes","normalizeLandmarks","getBoundingBoxes","estimateHandBounds","scaleBoxCoordinates","MESH_ANNOTATIONS","thumb","indexFinger","middleFinger","ringFinger","pinky","palmBase","computeRotation","normalizeRadians","buildTranslationMatrix","getColumnFrom2DArr","multiplyTransformMatrices","buildRotationMatrix","rotatePoint","PALM_BOX_SHIFT_VECTOR","HAND_BOX_SHIFT_VECTOR","PALM_LANDMARK_IDS","HandPipeline","regionsOfInterest","runsWithoutHandDetector","boundingBoxDetector","meshDetector","maxContinuousChecks","detectionConfidence","meshWidth","meshHeight","maxHandsNumber","getBoxForPalmLandmarks","calculateLandmarksBoundingBox","getBoxForHandLandmarks","transformRawCoords","invertTransformMatrix","async","shouldUpdateRegionsOfInterest","updateRegionsOfInterest","rotate$1","rotate","cutBoxFromImageAndResize","landmarks","handInViewConfidence","boundingBox","topLeft","bottomRight","loadHandDetectorModel","loadHandPoseModel","loadAnchors","HandPose","pipeline","static","getInputTensorDimensions","browser","estimateHand","flipHandHorizontal","annotations","VideoState","PoseHand","Extension","internal_getCodeGenArgs","blockIconURI","init","runtime","firstInstall","ioDevices","_loop","DIMENSIONS","tfCoordsToScratch","projectStarted","setVideoTransparency","globalVideoTransparency","videoToggle","globalVideoState","isConnected","handPoseState","video","getFrame","dimensions","estimateHandPoseOnImage","estimateThrottleTimeout","imageElement","handModel","getLoadedHandModel","estimateHands","flipHorizontal","handpose.load","disableVideo","enableVideo","mirror","transparency","trans","setPreviewGhost","defineBlocks","fingerOptions","text","handlerFingerOptions","finger","partOfFingerOptions","goToHandPartBlock","BlockType","Command","args","ArgumentType","options","acceptsReporters","items","includes","part","handPart","fingerPart","operation","scratchX","scratchY","setXY","videoToggleBlock","arg","video_state","setVideoTransparencyBlock","ExtensionFramework"],"mappings":"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"}