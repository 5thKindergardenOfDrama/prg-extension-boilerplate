{"version":3,"file":"poseprg95grphand.js","sources":["../../../../extensions/src/pose_hand/index.ts"],"sourcesContent":["import { ArgumentType, BlockType, Extension, Block, DefineBlock, Environment, ExtensionMenuDisplayDetails } from \"$common\";\n\n/**\n * @summary This type describes how your extension will display in the extensions menu. \n * @description Like all Typescript type declarations, it looks and acts a lot like a javascript object. \n * It will be passed as the first generic argument to the Extension class that your specific extension `extends`\n * (see the class defintion below for more information on extending the Extension base class). \n * @see ExtensionMenuDisplayDetails for all possible display menu properties.\n * @link https://www.typescriptlang.org/docs/handbook/2/objects.html Learn more about object types! (This is specifically a 'type alias')\n * @link https://www.typescriptlang.org/docs/handbook/2/generics.html Learn more about generics! \n */\ntype Details = {\n  name: \"Hand Sensing\",\n  description: \"Sense hand movement with the camera.\",\n  /**\n   * IMPORTANT! Place your icon image (typically a png) in the same directory as this index.ts file\n   */\n  iconURL: \"Typescript_logo.png\",  //REPLACE WITH ORIGINAL ICON\n  /**\n   * IMPORTANT! Place your inset icon image (typically an svg) in the same directory as this index.ts file\n   * NOTE: This icon will also appear on all of your extension's blocks\n   */\n  insetIconURL: \"typescript-logo.svg\"   //REPLACE WITH ORIGINAL INSET ICON\n};\n\n/**\n * @summary This type describes all of the blocks your extension will/does implement. \n * @description As you can see, each block is represented as a function.\n * In typescript, you can specify a function in either of the following ways (and which you choose is a matter of preference):\n * - Arrow syntax: `nameOfFunction: (argument1Name: argument1Type, argument2Name: argument2Type, ...etc...) => returnType;`\n * - 'Method' syntax: `nameOfFunction(argument1Name: argument1Type, argument2Name: argument2Type, ...etc...): returnType;`\n * \n * The three included functions demonstrate some of the most common types of blocks: commands, reporters, and hats.\n * - Command functions/blocks take 0 or more arguments, and return nothing (indicated by the use of a `void` return type). \n * - Reporter functions/blocks also take 0 or more arguments, but they must return a value (likely a `string` or `number`).\n * - Hat functions/blocks also take 0 or more arguments, but they must return a boolean value.\n * \n * Feel free to delete these once you're ready to implement your own blocks.\n * \n * This type will be passed as the second generic argument to the Extension class that your specific extension 'extends'\n * (see the class defintion below for more information on extending the Extension base class). \n * @link https://www.typescriptlang.org/docs/handbook/2/functions.html Learn more about function types!\n * @link https://www.typescriptlang.org/docs/handbook/2/objects.html Learn more about object types! (This is specifically a 'type alias')\n * @link https://www.typescriptlang.org/docs/handbook/2/generics.html Learn more about generics! \n */\ntype Blocks = {\n  /* \n  exampleCommand(exampleString: string, exampleNumber: number): void;\n  exampleReporter: () => number;\n  exampleHat(condition: boolean): boolean;\n  */\n  goToHandPart(handPart: string, fingerPart: number): void; \n  // these video blocks are present in a few different extensions, perhaps making a file just for these?\n  videoToggle(state: number): void;   \n  setVideoTransparency(transparency: number): void;\n}\n\n/**\n * @summary This is the class responsible for implementing the functionality of your blocks.\n * @description You'll notice that this class `extends` (or 'inherits') from the base `Extension` class.\n * \n * Hover over `Extension` to get a more in depth explanation of the base class, and what it means to `extend it`.\n */\nexport default class PoseHand extends Extension<Details, Blocks> {\n  /**\n   * @summary A field to demonstrate how Typescript Class fields work\n   * @link https://www.typescriptlang.org/docs/handbook/2/classes.html#fields\n   */\n  exampleField: number;\n\n  init(env: Environment) {\n    this.exampleField = 0;\n  }\n\n  // All example definitions below are syntactically equivalent, \n  // and which you use is just a matter of preference.\n  defineBlocks(): PoseHand[\"BlockDefinitions\"] {\n    /*\n    type DefineExampleCommand = DefineBlock<ExtensionNameGoesHere, Blocks[\"exampleCommand\"]>;\n    const exampleCommand: DefineExampleCommand = () => ({\n      type: BlockType.Command,\n      args: [ArgumentType.String, { type: ArgumentType.Number, defaultValue: 789 }],\n      text: (exampleString, exampleNumber) => `This is where the blocks display text goes, with arguments --> ${exampleString} and ${exampleNumber}`,\n      operation: (exampleString, exampleNumber, util) => {\n        alert(`This is a command! Here's what it received: ${exampleString} and ${exampleNumber}`); // Replace with what the block should do! \n        console.log(util.stackFrame.isLoop); // just an example of using the BlockUtility\n      }\n    });\n    */\n    const fingerOptions = \n    [{text: \"thumb\", value: \"thumb\"}, {text: \"index finger\", value: \"index\"},\n    {text: \"middle finger\", value: \"middle\"}, {text: \"ring finger\", value: \"ring\"}, {text: \"pinky finger\", value: \"pinky\"}];\n    \n    const partOfFingerOptions = [{text: \"tip\", value: 0}, {text: \"first knuckle\", value: 1},\n    {text: \"second knuckle\", value: 2}, {text: \"base\", value: 3}];;\n\n    type DefineGoToHandPart = DefineBlock<PoseHand, Blocks[\"goToHandPart\"]>;\n    const goToHandPart: DefineGoToHandPart = () => ({\n      type: BlockType.Command,\n      args: [{type: ArgumentType.String, options: fingerOptions}, {type: ArgumentType.Number, options: partOfFingerOptions}],\n      text: (handPart: string, fingerPart: number) => `go to ${handPart} ${fingerPart}`,\n      operation: (handPart, fingerPart) => { \n\n        console.log(handPart+\" with \"+fingerPart) // Replace with what the block should do! \n        \n      }\n    });\n\n    type DefineVideoToggle = DefineBlock<PoseHand, Blocks[\"videoToggle\"]>;\n    const videoToggle: DefineVideoToggle = () => ({\n      type: BlockType.Command,\n      arg: {type: ArgumentType.Number, options: [{text: 'off', value: 0}, {text: 'on', value: 1}, {text: 'on and flipped', value: 2}] },\n      text: (state: number) => `turn video ${state}`,\n      operation: (state) => {\n         \n        console.log(\"video state is \"+state); // Replace with what the block should do!\n      }\n    });\n\n    type DefineSetVideoTransparency = DefineBlock<PoseHand, Blocks[\"setVideoTransparency\"]>;\n    const setVideoTransparency: DefineSetVideoTransparency = () => ({\n      type: BlockType.Command,\n      arg: {type: ArgumentType.Number, defaultValue: 50},\n      text: (transparency) => `set video transparency to ${transparency}`,\n      operation: (transparency) => {\n          let trans=transparency;\n          if(transparency>100){\n            trans=100;\n          }\n          else if(transparency<0){\n            trans=0;\n          }\n        console.log(\"video transparency is \"+trans); // Replace with what the block should do!\n      }\n    });\n\n    return {\n      goToHandPart,\n      videoToggle,\n      setVideoTransparency\n    }\n  }\n}\n\n"],"names":["poseprg95grphand","exports","$common","PoseHand","Extension","internal_getCodeGenArgs","id","name","blockIconURI","init","env","this","exampleField","defineBlocks","fingerOptions","text","value","partOfFingerOptions","goToHandPart","type","BlockType","Command","args","ArgumentType","String","options","Number","handPart","fingerPart","operation","console","log","videoToggle","arg","state","setVideoTransparency","defaultValue","transparency","trans","Object","defineProperty","ExtensionFramework"],"mappings":"AAEA,IAAAA,iBAAA,SAAAC,EAAAC,GAAA,aA6DA,MAAAC,UAAAC,EAAAA,UACAC,0BAAA,MAAA,CAAAC,GAAA,mBAAAC,KAAA,eAAAC,aAAA,iuCAAA,CAQAC,KAAAC,GACAC,KAAAC,aAAA,CACA,CAIAC,eAaA,MAAAC,EACA,CAAA,CAAAC,KAAA,QAAAC,MAAA,SAAA,CAAAD,KAAA,eAAAC,MAAA,SACA,CAAAD,KAAA,gBAAAC,MAAA,UAAA,CAAAD,KAAA,cAAAC,MAAA,QAAA,CAAAD,KAAA,eAAAC,MAAA,UAEAC,EAAA,CAAA,CAAAF,KAAA,MAAAC,MAAA,GAAA,CAAAD,KAAA,gBAAAC,MAAA,GACA,CAAAD,KAAA,iBAAAC,MAAA,GAAA,CAAAD,KAAA,OAAAC,MAAA,IA0CA,MAAA,CACAE,aAxCA,KAAA,CACAC,KAAAC,EAAAA,UAAAC,QACAC,KAAA,CAAA,CAAAH,KAAAI,EAAAA,aAAAC,OAAAC,QAAAX,GAAA,CAAAK,KAAAI,EAAAA,aAAAG,OAAAD,QAAAR,IACAF,KAAA,CAAAY,EAAAC,IAAA,SAAAD,KAAAC,IACAC,UAAA,CAAAF,EAAAC,KAEAE,QAAAC,IAAAJ,EAAA,SAAAC,EAAA,IAmCAI,YA7BA,KAAA,CACAb,KAAAC,EAAAA,UAAAC,QACAY,IAAA,CAAAd,KAAAI,EAAAA,aAAAG,OAAAD,QAAA,CAAA,CAAAV,KAAA,MAAAC,MAAA,GAAA,CAAAD,KAAA,KAAAC,MAAA,GAAA,CAAAD,KAAA,iBAAAC,MAAA,KACAD,KAAAmB,GAAA,cAAAA,IACAL,UAAAK,IAEAJ,QAAAC,IAAA,kBAAAG,EAAA,IAwBAC,qBAnBA,KAAA,CACAhB,KAAAC,EAAAA,UAAAC,QACAY,IAAA,CAAAd,KAAAI,EAAAA,aAAAG,OAAAU,aAAA,IACArB,KAAAsB,GAAA,6BAAAA,IACAR,UAAAQ,IACA,IAAAC,EAAAD,EACAA,EAAA,IACAC,EAAA,IAEAD,EAAA,IACAC,EAAA,GAEAR,QAAAC,IAAA,yBAAAO,EAAA,IASA,EACA,OAAArC,EAAAG,UAAAD,EAAAoC,OAAAC,eAAAvC,EAAA,aAAA,CAAAe,OAAA,IAAAf,CAAA,CA9IA,CA8IA,CAAA,EAAAwC"}