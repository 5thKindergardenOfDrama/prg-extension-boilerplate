{"version":3,"file":"poseprg95grphand.js","sources":["../../../../extensions/src/pose_hand/index.ts"],"sourcesContent":["import { ArgumentType, BlockType, Extension, Block, DefineBlock, Environment, ExtensionMenuDisplayDetails } from \"$common\";\n\n/**\n * @summary This type describes how your extension will display in the extensions menu. \n * @description Like all Typescript type declarations, it looks and acts a lot like a javascript object. \n * It will be passed as the first generic argument to the Extension class that your specific extension `extends`\n * (see the class defintion below for more information on extending the Extension base class). \n * @see ExtensionMenuDisplayDetails for all possible display menu properties.\n * @link https://www.typescriptlang.org/docs/handbook/2/objects.html Learn more about object types! (This is specifically a 'type alias')\n * @link https://www.typescriptlang.org/docs/handbook/2/generics.html Learn more about generics! \n */\ntype Details = {\n  name: \"Hand Sensing\",\n  description: \"Sense hand movement with the camera.\",\n  /**\n   * IMPORTANT! Place your icon image (typically a png) in the same directory as this index.ts file\n   */\n  iconURL: \"Typescript_logo.png\",  //REPLACE WITH ORIGINAL ICON\n  /**\n   * IMPORTANT! Place your inset icon image (typically an svg) in the same directory as this index.ts file\n   * NOTE: This icon will also appear on all of your extension's blocks\n   */\n  insetIconURL: \"typescript-logo.svg\"   //REPLACE WITH ORIGINAL INSET ICON\n};\n\n/**\n * @summary This type describes all of the blocks your extension will/does implement. \n * @description As you can see, each block is represented as a function.\n * In typescript, you can specify a function in either of the following ways (and which you choose is a matter of preference):\n * - Arrow syntax: `nameOfFunction: (argument1Name: argument1Type, argument2Name: argument2Type, ...etc...) => returnType;`\n * - 'Method' syntax: `nameOfFunction(argument1Name: argument1Type, argument2Name: argument2Type, ...etc...): returnType;`\n * \n * The three included functions demonstrate some of the most common types of blocks: commands, reporters, and hats.\n * - Command functions/blocks take 0 or more arguments, and return nothing (indicated by the use of a `void` return type). \n * - Reporter functions/blocks also take 0 or more arguments, but they must return a value (likely a `string` or `number`).\n * - Hat functions/blocks also take 0 or more arguments, but they must return a boolean value.\n * \n * Feel free to delete these once you're ready to implement your own blocks.\n * \n * This type will be passed as the second generic argument to the Extension class that your specific extension 'extends'\n * (see the class defintion below for more information on extending the Extension base class). \n * @link https://www.typescriptlang.org/docs/handbook/2/functions.html Learn more about function types!\n * @link https://www.typescriptlang.org/docs/handbook/2/objects.html Learn more about object types! (This is specifically a 'type alias')\n * @link https://www.typescriptlang.org/docs/handbook/2/generics.html Learn more about generics! \n */\ntype Blocks = {\n  /* \n  exampleCommand(exampleString: string, exampleNumber: number): void;\n  exampleReporter: () => number;\n  exampleHat(condition: boolean): boolean;\n  */\n  goToHandPart(handPart: string, fingerPart: number): void; \n  // these video blocks are present in a few different extensions, perhaps making a file just for these?\n  videoToggle(state: number): void;   \n  setVideoTransparency(transparency: number): void;\n}\n\n/**\n * @summary This is the class responsible for implementing the functionality of your blocks.\n * @description You'll notice that this class `extends` (or 'inherits') from the base `Extension` class.\n * \n * Hover over `Extension` to get a more in depth explanation of the base class, and what it means to `extend it`.\n */\nexport default class PoseHand extends Extension<Details, Blocks> {\n  /**\n   * @summary A field to demonstrate how Typescript Class fields work\n   * @link https://www.typescriptlang.org/docs/handbook/2/classes.html#fields\n   */\n  exampleField: number;\n\n  init(env: Environment) {\n    this.exampleField = 0;\n  }\n\n  defineBlocks(): PoseHand[\"BlockDefinitions\"] {\n    \n    const fingerOptions = \n    [{text: \"thumb\", value: \"thumb\"}, {text: \"index finger\", value: \"index\"},\n    {text: \"middle finger\", value: \"middle\"}, {text: \"ring finger\", value: \"ring\"}, {text: \"pinky finger\", value: \"pinky\"}];\n\n    const partOfFingerOptions = [{text: \"tip\", value: 0}, {text: \"first knuckle\", value: 1},\n    {text: \"second knuckle\", value: 2}, {text: \"base\", value: 3}];;\n\n    type DefineGoToHandPart = DefineBlock<PoseHand, Blocks[\"goToHandPart\"]>;\n    const goToHandPart: DefineGoToHandPart = () => ({\n      type: BlockType.Command,\n      args: [{type: ArgumentType.String, \n              options: {acceptsReporters: true, \n                        items: fingerOptions, \n                        handler: (part: string) => {\n                          if (!(part in [\"thumb\", \"index\", \"middle\", \"ring\", \"pinky\"])){\n                            console.log(\"Error: 'go to' block only accepts 'thumb', 'index', 'middle', 'ring', or 'pinky'\");\n                            return \"thumb\"\n                          }\n                        }\n                       }\n              }, \n             {type: ArgumentType.Number, \n              options: {acceptsReporters: true, \n                        items: partOfFingerOptions, \n                        handler: (part: number) => {\n                          return Math.max(Math.min(part, 3), 0)\n                        }\n                       }\n             }],\n      text: (handPart: string, fingerPart: number) => `go to ${handPart} ${fingerPart}`,\n      operation: (handPart, fingerPart) => { \n\n        console.log(handPart+\" with \"+fingerPart) // Replace with what the block should do! \n        \n      }\n    });\n\n    type DefineVideoToggle = DefineBlock<PoseHand, Blocks[\"videoToggle\"]>;\n    const videoToggle: DefineVideoToggle = () => ({\n      type: BlockType.Command,\n      arg: {type: ArgumentType.Number, \n            options: {acceptsReporters: true, \n                      items: [{text: 'off', value: 0}, {text: 'on', value: 1}, {text: 'on and flipped', value: 2}],\n                      handler: (x: number) => {\n                        return Math.min(Math.max(x, 0), 2);\n                      }\n                     }\n           },\n      text: (state: number) => `turn video ${state}`,\n      operation: (state) => {\n        if (state === 0) {\n          this.runtime.ioDevices.video.disableVideo();\n        } \n        else {\n          this.runtime.ioDevices.video.enableVideo();\n          // Mirror if state is ON. Do not mirror if state is ON_FLIPPED.\n          this.runtime.ioDevices.video.mirror = (state == 1);\n        }\n      }\n    });\n\n    type DefineSetVideoTransparency = DefineBlock<PoseHand, Blocks[\"setVideoTransparency\"]>;\n    const setVideoTransparency: DefineSetVideoTransparency = () => ({\n      type: BlockType.Command,\n      arg: {type: ArgumentType.Number, defaultValue: 50},\n      text: (transparency) => `set video transparency to ${transparency}`,\n      operation: (transparency) => {\n        const trans = Math.max(Math.min(transparency,100), 0);\n        this.runtime.ioDevices.video.setPreviewGhost(trans);\n      }\n    });\n\n    return {\n      goToHandPart,\n      videoToggle,\n      setVideoTransparency\n    }\n  }\n}\n\n"],"names":["poseprg95grphand","exports","$common","PoseHand","Extension","internal_getCodeGenArgs","id","name","blockIconURI","init","env","this","exampleField","defineBlocks","fingerOptions","text","value","partOfFingerOptions","goToHandPart","type","BlockType","Command","args","ArgumentType","String","options","acceptsReporters","items","handler","part","console","log","Number","Math","max","min","handPart","fingerPart","operation","videoToggle","arg","x","state","runtime","ioDevices","video","disableVideo","enableVideo","mirror","setVideoTransparency","defaultValue","transparency","trans","setPreviewGhost","Object","defineProperty","ExtensionFramework"],"mappings":"AAEA,IAAAA,iBAAA,SAAAC,EAAAC,GAAA,aA6DA,MAAAC,UAAAC,EAAAA,UACAC,0BAAA,MAAA,CAAAC,GAAA,mBAAAC,KAAA,eAAAC,aAAA,iuCAAA,CAQAC,KAAAC,GACAC,KAAAC,aAAA,CACA,CAEAC,eAEA,MAAAC,EACA,CAAA,CAAAC,KAAA,QAAAC,MAAA,SAAA,CAAAD,KAAA,eAAAC,MAAA,SACA,CAAAD,KAAA,gBAAAC,MAAA,UAAA,CAAAD,KAAA,cAAAC,MAAA,QAAA,CAAAD,KAAA,eAAAC,MAAA,UAEAC,EAAA,CAAA,CAAAF,KAAA,MAAAC,MAAA,GAAA,CAAAD,KAAA,gBAAAC,MAAA,GACA,CAAAD,KAAA,iBAAAC,MAAA,GAAA,CAAAD,KAAA,OAAAC,MAAA,IAmEA,MAAA,CACAE,aAjEA,KAAA,CACAC,KAAAC,EAAAA,UAAAC,QACAC,KAAA,CAAA,CAAAH,KAAAI,EAAAA,aAAAC,OACAC,QAAA,CAAAC,kBAAA,EACAC,MAAAb,EACAc,QAAAC,IACA,KAAAA,IAAA,CAAA,QAAA,QAAA,SAAA,OAAA,UAEA,OADAC,QAAAC,IAAA,oFACA,OACA,IAIA,CAAAZ,KAAAI,EAAAA,aAAAS,OACAP,QAAA,CAAAC,kBAAA,EACAC,MAAAV,EACAW,QAAAC,GACAI,KAAAC,IAAAD,KAAAE,IAAAN,EAAA,GAAA,MAIAd,KAAA,CAAAqB,EAAAC,IAAA,SAAAD,KAAAC,IACAC,UAAA,CAAAF,EAAAC,KAEAP,QAAAC,IAAAK,EAAA,SAAAC,EAAA,IA0CAE,YApCA,KAAA,CACApB,KAAAC,EAAAA,UAAAC,QACAmB,IAAA,CAAArB,KAAAI,EAAAA,aAAAS,OACAP,QAAA,CAAAC,kBAAA,EACAC,MAAA,CAAA,CAAAZ,KAAA,MAAAC,MAAA,GAAA,CAAAD,KAAA,KAAAC,MAAA,GAAA,CAAAD,KAAA,iBAAAC,MAAA,IACAY,QAAAa,GACAR,KAAAE,IAAAF,KAAAC,IAAAO,EAAA,GAAA,KAIA1B,KAAA2B,GAAA,cAAAA,IACAJ,UAAAI,IACA,IAAAA,EACA/B,KAAAgC,QAAAC,UAAAC,MAAAC,gBAGAnC,KAAAgC,QAAAC,UAAAC,MAAAE,cAEApC,KAAAgC,QAAAC,UAAAC,MAAAG,OAAA,GAAAN,EACA,IAkBAO,qBAbA,KAAA,CACA9B,KAAAC,EAAAA,UAAAC,QACAmB,IAAA,CAAArB,KAAAI,EAAAA,aAAAS,OAAAkB,aAAA,IACAnC,KAAAoC,GAAA,6BAAAA,IACAb,UAAAa,IACA,MAAAC,EAAAnB,KAAAC,IAAAD,KAAAE,IAAAgB,EAAA,KAAA,GACAxC,KAAAgC,QAAAC,UAAAC,MAAAQ,gBAAAD,EAAA,IASA,EACA,OAAAnD,EAAAG,UAAAD,EAAAmD,OAAAC,eAAAtD,EAAA,aAAA,CAAAe,OAAA,IAAAf,CAAA,CA1JA,CA0JA,CAAA,EAAAuD"}