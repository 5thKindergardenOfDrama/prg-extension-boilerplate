{"version":3,"file":"poseprg95grphand.js","sources":["../../../scratch-vm/src/engine/stage-layering.js","../../../scratch-vm/src/io/video.js","../../../scratch-vm/node_modules/@tensorflow/tfjs-core/dist/tf-core.esm.js","../../../scratch-vm/node_modules/@tensorflow/tfjs-converter/dist/tf-converter.esm.js","../../../scratch-vm/node_modules/@tensorflow-models/handpose/dist/handpose.esm.js","../../../../extensions/src/pose_hand/index.ts"],"sourcesContent":["class StageLayering {\n    static get BACKGROUND_LAYER () {\n        return 'background';\n    }\n\n    static get VIDEO_LAYER () {\n        return 'video';\n    }\n\n    static get PEN_LAYER () {\n        return 'pen';\n    }\n\n    static get SPRITE_LAYER () {\n        return 'sprite';\n    }\n\n    // Order of layer groups relative to each other,\n    static get LAYER_GROUPS () {\n        return [\n            StageLayering.BACKGROUND_LAYER,\n            StageLayering.VIDEO_LAYER,\n            StageLayering.PEN_LAYER,\n            StageLayering.SPRITE_LAYER\n        ];\n    }\n}\n\nmodule.exports = StageLayering;\n","const StageLayering = require('../engine/stage-layering');\n\nclass Video {\n    constructor (runtime) {\n        this.runtime = runtime;\n\n        /**\n         * @typedef VideoProvider\n         * @property {Function} enableVideo - Requests camera access from the user, and upon success,\n         * enables the video feed\n         * @property {Function} disableVideo - Turns off the video feed\n         * @property {Function} getFrame - Return frame data from the video feed in\n         * specified dimensions, format, and mirroring.\n         */\n        this.provider = null;\n\n        /**\n         * Id representing a Scratch Renderer skin the video is rendered to for\n         * previewing.\n         * @type {number}\n         */\n        this._skinId = -1;\n\n        /**\n         * Id for a drawable using the video's skin that will render as a video\n         * preview.\n         * @type {Drawable}\n         */\n        this._drawable = -1;\n\n        /**\n         * Store the last state of the video transparency ghost effect\n         * @type {number}\n         */\n        this._ghost = 0;\n\n        /**\n         * Store a flag that allows the preview to be forced transparent.\n         * @type {number}\n         */\n        this._forceTransparentPreview = false;\n    }\n\n    static get FORMAT_IMAGE_DATA () {\n        return 'image-data';\n    }\n\n    static get FORMAT_CANVAS () {\n        return 'canvas';\n    }\n\n    /**\n     * Dimensions the video stream is analyzed at after its rendered to the\n     * sample canvas.\n     * @type {Array.<number>}\n     */\n    static get DIMENSIONS () {\n        return [480, 360];\n    }\n\n    /**\n     * Order preview drawable is inserted at in the renderer.\n     * @type {number}\n     */\n    static get ORDER () {\n        return 1;\n    }\n\n    /**\n     * Set a video provider for this device. A default implementation of\n     * a video provider can be found in scratch-gui/src/lib/video/video-provider\n     * @param {VideoProvider} provider - Video provider to use\n     */\n    setProvider (provider) {\n        this.provider = provider;\n    }\n\n    /**\n     * Request video be enabled.  Sets up video, creates video skin and enables preview.\n     *\n     * ioDevices.video.requestVideo()\n     *\n     * @return {Promise.<Video>} resolves a promise to this IO device when video is ready.\n     */\n    enableVideo () {\n        if (!this.provider) return null;\n        return this.provider.enableVideo().then(() => this._setupPreview());\n    }\n\n    /**\n     * Disable video stream (turn video off)\n     * @return {void}\n     */\n    disableVideo () {\n        this._disablePreview();\n        if (!this.provider) return null;\n        this.provider.disableVideo();\n    }\n\n    /**\n     * Return frame data from the video feed in a specified dimensions, format, and mirroring.\n     *\n     * @param {object} frameInfo A descriptor of the frame you would like to receive.\n     * @param {Array.<number>} frameInfo.dimensions [width, height] array of numbers.  Defaults to [480,360]\n     * @param {boolean} frameInfo.mirror If you specificly want a mirror/non-mirror frame, defaults to the global\n     *                                   mirror state (ioDevices.video.mirror)\n     * @param {string} frameInfo.format Requested video format, available formats are 'image-data' and 'canvas'.\n     * @param {number} frameInfo.cacheTimeout Will reuse previous image data if the time since capture is less than\n     *                                        the cacheTimeout.  Defaults to 16ms.\n     *\n     * @return {ArrayBuffer|Canvas|string|null} Frame data in requested format, null when errors.\n     */\n    getFrame ({\n        dimensions = Video.DIMENSIONS,\n        mirror = this.mirror,\n        format = Video.FORMAT_IMAGE_DATA,\n        cacheTimeout = this._frameCacheTimeout\n    }) {\n        if (this.provider) return this.provider.getFrame({dimensions, mirror, format, cacheTimeout});\n        return null;\n    }\n\n    /**\n     * Set the preview ghost effect\n     * @param {number} ghost from 0 (visible) to 100 (invisible) - ghost effect\n     */\n    setPreviewGhost (ghost) {\n        this._ghost = ghost;\n        // Confirm that the default value has been changed to a valid id for the drawable\n        if (this._drawable !== -1) {\n            this.runtime.renderer.updateDrawableEffect(\n                this._drawable,\n                'ghost',\n                this._forceTransparentPreview ? 100 : ghost\n            );\n        }\n    }\n\n    _disablePreview () {\n        if (this._skinId !== -1) {\n            this.runtime.renderer.updateBitmapSkin(this._skinId, new ImageData(...Video.DIMENSIONS), 1);\n            this.runtime.renderer.updateDrawableVisible(this._drawable, false);\n        }\n        this._renderPreviewFrame = null;\n    }\n\n    _setupPreview () {\n        const {renderer} = this.runtime;\n        if (!renderer) return;\n\n        if (this._skinId === -1 && this._drawable === -1) {\n            this._skinId = renderer.createBitmapSkin(new ImageData(...Video.DIMENSIONS), 1);\n            this._drawable = renderer.createDrawable(StageLayering.VIDEO_LAYER);\n            renderer.updateDrawableSkinId(this._drawable, this._skinId);\n        }\n\n        // if we haven't already created and started a preview frame render loop, do so\n        if (!this._renderPreviewFrame) {\n            renderer.updateDrawableEffect(this._drawable, 'ghost', this._forceTransparentPreview ? 100 : this._ghost);\n            renderer.updateDrawableVisible(this._drawable, true);\n\n            this._renderPreviewFrame = () => {\n                clearTimeout(this._renderPreviewTimeout);\n                if (!this._renderPreviewFrame) {\n                    return;\n                }\n\n                this._renderPreviewTimeout = setTimeout(this._renderPreviewFrame, this.runtime.currentStepTime);\n\n                const imageData = this.getFrame({\n                    format: Video.FORMAT_IMAGE_DATA,\n                    cacheTimeout: this.runtime.currentStepTime\n                });\n\n                if (!imageData) {\n                    renderer.updateBitmapSkin(this._skinId, new ImageData(...Video.DIMENSIONS), 1);\n                    return;\n                }\n\n                renderer.updateBitmapSkin(this._skinId, imageData, 1);\n                this.runtime.requestRedraw();\n            };\n\n            this._renderPreviewFrame();\n        }\n    }\n\n    get videoReady () {\n        if (this.provider) return this.provider.videoReady;\n        return false;\n    }\n\n    /**\n     * Method implemented by all IO devices to allow external changes.\n     * The only change available externally is hiding the preview, used e.g. to\n     * prevent drawing the preview into project thumbnails.\n     * @param {object} - data passed to this IO device.\n     * @property {boolean} forceTransparentPreview - whether the preview should be forced transparent.\n     */\n    postData ({forceTransparentPreview}) {\n        this._forceTransparentPreview = forceTransparentPreview;\n        // Setting the ghost to the current value will pick up the forceTransparentPreview\n        // flag and override the current ghost. The complexity is to prevent blocks\n        // from overriding forceTransparentPreview\n        this.setPreviewGhost(this._ghost);\n    }\n}\n\n\nmodule.exports = Video;\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nvar t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};function e(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}function n(t,e,n,r){return new(n||(n=Promise))((function(o,a){function i(t){try{u(r.next(t))}catch(t){a(t)}}function s(t){try{u(r.throw(t))}catch(t){a(t)}}function u(t){t.done?o(t.value):new n((function(e){e(t.value)})).then(i,s)}u((r=r.apply(t,e||[])).next())}))}function r(t,e){var n,r,o,a,i={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return a={next:s(0),throw:s(1),return:s(2)},\"function\"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function s(a){return function(s){return function(a){if(n)throw new TypeError(\"Generator is already executing.\");for(;i;)try{if(n=1,r&&(o=2&a[0]?r.return:a[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,a[1])).done)return o;switch(r=0,o&&(a=[2&a[0],o.value]),a[0]){case 0:case 1:o=a;break;case 4:return i.label++,{value:a[1],done:!1};case 5:i.label++,r=a[1],a=[0];continue;case 7:a=i.ops.pop(),i.trys.pop();continue;default:if(!(o=(o=i.trys).length>0&&o[o.length-1])&&(6===a[0]||2===a[0])){i=0;continue}if(3===a[0]&&(!o||a[1]>o[0]&&a[1]<o[3])){i.label=a[1];break}if(6===a[0]&&i.label<o[1]){i.label=o[1],o=a;break}if(o&&i.label<o[2]){i.label=o[2],i.ops.push(a);break}o[2]&&i.ops.pop(),i.trys.pop();continue}a=e.call(t,i)}catch(t){a=[6,t],r=0}finally{n=o=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,s])}}}var o=function(){function t(t){this.global=t,this.flags={},this.flagRegistry={},this.urlFlags={},this.populateURLFlags()}return t.prototype.setPlatform=function(t,e){null!=this.platform&&console.warn(\"Platform \"+this.platformName+\" has already been set. Overwriting the platform with \"+e+\".\"),this.platformName=t,this.platform=e},t.prototype.registerFlag=function(t,e,n){if(this.flagRegistry[t]={evaluationFn:e,setHook:n},null!=this.urlFlags[t]){var r=this.urlFlags[t];console.warn(\"Setting feature override from URL \"+t+\": \"+r+\".\"),this.set(t,r)}},t.prototype.get=function(t){return t in this.flags?this.flags[t]:(this.flags[t]=this.evaluateFlag(t),this.flags[t])},t.prototype.getNumber=function(t){return this.get(t)},t.prototype.getBool=function(t){return this.get(t)},t.prototype.getFlags=function(){return this.flags},Object.defineProperty(t.prototype,\"features\",{get:function(){return this.flags},enumerable:!0,configurable:!0}),t.prototype.set=function(t,e){if(null==this.flagRegistry[t])throw new Error(\"Cannot set flag \"+t+\" as it has not been registered.\");this.flags[t]=e,null!=this.flagRegistry[t].setHook&&this.flagRegistry[t].setHook(e)},t.prototype.evaluateFlag=function(t){if(null==this.flagRegistry[t])throw new Error(\"Cannot evaluate flag '\"+t+\"': no evaluation function found.\");return this.flagRegistry[t].evaluationFn()},t.prototype.setFlags=function(t){this.flags=Object.assign({},t)},t.prototype.reset=function(){this.flags={},this.urlFlags={},this.populateURLFlags()},t.prototype.populateURLFlags=function(){var t=this;if(void 0!==this.global&&void 0!==this.global.location&&void 0!==this.global.location.search){var e,n,r=(e=this.global.location.search,n={},e.replace(/[?&]([^=?&]+)(?:=([^&]*))?/g,(function(t){for(var e=[],r=1;r<arguments.length;r++)e[r-1]=arguments[r];return a(n,e[0],e[1]),e.join(\"=\")})),n);if(\"tfjsflags\"in r)r.tfjsflags.split(\",\").forEach((function(e){var n=e.split(\":\"),r=n[0],o=n[1];t.urlFlags[r]=function(t,e){if(\"true\"===(e=e.toLowerCase())||\"false\"===e)return\"true\"===e;if(\"\"+ +e===e)return+e;throw new Error(\"Could not parse value flag value \"+e+\" for flag \"+t+\".\")}(r,o)}))}},t}();function a(t,e,n){t[decodeURIComponent(e)]=decodeURIComponent(n||\"\")}function i(){return s}var s=null;var u=new Map,c=new Map;function l(t,e){var n=m(t,e);return u.get(n)}function h(t){return c.get(t)}function f(t){for(var e=u.entries(),n=[];;){var r=e.next(),o=r.done,a=r.value;if(o)break;var i=a[0],s=a[1];i.split(\"_\")[0]===t&&n.push(s)}return n}function d(t){var e=t.kernelName,n=t.backendName,r=m(e,n);if(u.has(r))throw new Error(\"The kernel '\"+e+\"' for backend '\"+n+\"' is already registered\");u.set(r,t)}function p(t){var e=t.kernelName;c.has(e)&&console.warn(\"Overriding the gradient for '\"+e+\"'\"),c.set(e,t)}function v(t,e){var n=m(t,e);if(!u.has(n))throw new Error(\"The kernel '\"+t+\"' for backend '\"+e+\"' is not registered\");u.delete(n)}function g(t){if(!c.has(t))throw new Error(\"The gradient '\"+t+\"' for backend is not registered\");c.delete(t)}function m(t,e){return e+\"_\"+t}function y(t){for(var e=t.length,n=0,r=0;e>0;)r=Math.random()*e|0,n=t[--e],t[e]=t[r],t[r]=n}function x(t,e,n){return Math.max(t,Math.min(e,n))}function b(t){return t%2==0?t:t+1}function w(t){for(var e=0,n=0;n<t.length;n++)e+=t[n];return e}function C(t,e){if(!t)throw new Error(\"string\"==typeof e?e:e())}function E(t,e,n){void 0===n&&(n=\"\"),C(S(t,e),(function(){return n+\" Shapes \"+t+\" and \"+e+\" must match\"}))}function R(t){C(null!=t,(function(){return\"The input to the tensor constructor must be a non-null value.\"}))}function I(t,e,n){if(void 0===e&&(e=[]),void 0===n&&(n=!1),null==e&&(e=[]),Array.isArray(t)||V(t)&&!n)for(var r=0;r<t.length;++r)I(t[r],e,n);else e.push(t);return e}function k(t){if(0===t.length)return 1;for(var e=t[0],n=1;n<t.length;n++)e*=t[n];return e}function S(t,e){if(t===e)return!0;if(null==t||null==e)return!1;if(t.length!==e.length)return!1;for(var n=0;n<t.length;n++)if(t[n]!==e[n])return!1;return!0}function A(t){return t%1==0}function T(t){if(null!=Math.tanh)return Math.tanh(t);if(t===1/0)return 1;if(t===-1/0)return-1;var e=Math.exp(2*t);return(e-1)/(e+1)}function D(t){var e=Math.ceil(Math.sqrt(t));return[e,Math.ceil(t/e)]}function N(t,e){return e<=t.length?t:t+\" \".repeat(e-t.length)}function F(t,e,n){return void 0===e&&(e=function(t){return 0}),new Promise((function(r,o){var a=0,i=function(){if(t())r();else{a++;var s=e(a);null!=n&&a>=n?o():setTimeout(i,s)}};i()}))}function _(t,e){for(var n=1,r=-1,o=0;o<t.length;++o)if(t[o]>=0)n*=t[o];else if(-1===t[o]){if(-1!==r)throw Error(\"Shapes can only have 1 implicit size. Found -1 at dim \"+r+\" and dim \"+o);r=o}else if(t[o]<0)throw Error(\"Shapes can not be < 0. Found \"+t[o]+\" at dim \"+o);if(-1===r){if(e>0&&e!==n)throw Error(\"Size(\"+e+\") must match the product of shape \"+t);return t}if(0===n)throw Error(\"Cannot infer the missing size in [\"+t+\"] when there are 0 elements\");if(e%n!=0)throw Error(\"The implicit shape can't be a fractional number. Got \"+e+\" / \"+n);var a=t.slice();return a[r]=e/n,a}function O(t,e){var n=e.length;return C((t=null==t?e.map((function(t,e){return e})):[].concat(t)).every((function(t){return t>=-n&&t<n})),(function(){return\"All values in axis param must be in range [-\"+n+\", \"+n+\") but got axis \"+t})),C(t.every((function(t){return A(t)})),(function(){return\"All values in axis param must be integers but got axis \"+t})),t.map((function(t){return t<0?n+t:t}))}function M(t,e){for(var n=[],r=[],o=null!=e&&Array.isArray(e)&&0===e.length,a=null==e||o?null:O(e,t).sort(),i=0,s=0;s<t.length;++s){if(null!=a){if(a[i]===s&&1!==t[s])throw new Error(\"Can't squeeze axis \"+s+\" since its dim '\"+t[s]+\"' is not 1\");(null==a[i]||a[i]>s)&&1===t[s]&&(n.push(t[s]),r.push(s)),a[i]<=s&&i++}1!==t[s]&&(n.push(t[s]),r.push(s))}return{newShape:n,keptDims:r}}function B(t,e){var n=null;if(null==t||\"float32\"===t)n=new Float32Array(e);else if(\"int32\"===t)n=new Int32Array(e);else{if(\"bool\"!==t)throw new Error(\"Unknown data type \"+t);n=new Uint8Array(e)}return n}function P(t,e){var n=null;if(null==t||\"float32\"===t)n=new Float32Array(e);else if(\"int32\"===t)n=new Int32Array(e);else if(\"bool\"===t)n=new Uint8Array(e);else{if(\"string\"!==t)throw new Error(\"Unknown data type \"+t);n=new Array(e)}return n}function L(t,e){for(var n=0;n<t.length;n++){var r=t[n];if(isNaN(r)||!isFinite(r))throw Error(\"A tensor of type \"+e+\" being uploaded contains \"+r+\".\")}}function W(t){return\"bool\"===t||\"complex64\"===t||\"float32\"===t||\"int32\"===t||\"string\"===t}function U(t,e){return\"complex64\"!==e&&((\"float32\"!==e||\"complex64\"===t)&&((\"int32\"!==e||\"float32\"===t||\"complex64\"===t)&&(\"bool\"!==e||\"bool\"!==t)))}function V(t){return t instanceof Float32Array||t instanceof Int32Array||t instanceof Uint8Array}function z(t){if(\"float32\"===t||\"int32\"===t)return 4;if(\"complex64\"===t)return 8;if(\"bool\"===t)return 1;throw new Error(\"Unknown dtype \"+t)}function G(t){if(null==t)return 0;var e=0;return t.forEach((function(t){return e+=t.length})),e}function H(t){return\"string\"==typeof t||t instanceof String}function q(t){return\"boolean\"==typeof t}function K(t){return\"number\"==typeof t}function j(t){return Array.isArray(t)?j(t[0]):t instanceof Float32Array?\"float32\":t instanceof Int32Array||t instanceof Uint8Array?\"int32\":K(t)?\"float32\":H(t)?\"string\":q(t)?\"bool\":\"float32\"}function X(t){return!!(t&&t.constructor&&t.call&&t.apply)}function Y(t,e){for(var n=e;n<t;++n)if(t%n==0)return n;return t}function $(t){var e=t.length;if(e<2)return[];var n=new Array(e-1);n[e-2]=t[e-1];for(var r=e-3;r>=0;--r)n[r]=n[r+1]*t[r+1];return n}function Q(t,e,n){if(\"string\"===e)throw new Error(\"Cannot convert a string[] to a TypedArray\");if(Array.isArray(t)&&(t=I(t)),n&&L(t,e),function(t,e){return t instanceof Float32Array&&\"float32\"===e||t instanceof Int32Array&&\"int32\"===e||t instanceof Uint8Array&&\"bool\"===e}(t,e))return t;if(null==e||\"float32\"===e||\"complex64\"===e)return new Float32Array(t);if(\"int32\"===e)return new Int32Array(t);if(\"bool\"===e){for(var r=new Uint8Array(t.length),o=0;o<r.length;++o)0!==Math.round(t[o])&&(r[o]=1);return r}throw new Error(\"Unknown data type \"+e)}function J(t,e){if(0===t.length)return e[0];var n=t.reduce((function(t,e){return t*e}));if(0===n)return[];if(n!==e.length)throw new Error(\"[\"+t+\"] does not match the input size.\");return function t(e,n,r){var o=new Array;if(1===n.length)for(var a=n[0],i=0;i<a;i++)o[i]=r[e+i];else{a=n[0];var s=n.slice(1),u=s.reduce((function(t,e){return t*e}));for(i=0;i<a;i++)o[i]=t(e+i*u,s,r)}return o}(0,t,e)}function Z(t,e){for(var n=tt(t,e),r=0;r<n.length;r++)n[r]=1;return n}function tt(t,e){if(null==e||\"float32\"===e||\"complex64\"===e)return new Float32Array(t);if(\"int32\"===e)return new Int32Array(t);if(\"bool\"===e)return new Uint8Array(t);throw new Error(\"Unknown data type \"+e)}function et(){return i().platform.now()}function nt(t){t.forEach((function(e){C(Number.isInteger(e)&&e>=0,(function(){return\"Tensor must have a shape comprised of positive integers but got shape [\"+t+\"].\"}))}))}function rt(t,e){return void 0===e&&(e=\"utf-8\"),e=e||\"utf-8\",i().platform.encode(t,e)}function ot(t,e){return void 0===e&&(e=\"utf-8\"),e=e||\"utf-8\",i().platform.decode(t,e)}function at(t,e,n){if(0===e)return 0;if(1===e)return t[0];for(var r=t[t.length-1],o=0;o<t.length-1;++o)r+=n[o]*t[o];return r}function it(t,e,n){if(0===e)return[];if(1===e)return[t];for(var r=new Array(e),o=0;o<r.length-1;++o)r[o]=Math.floor(t/n[o]),t-=r[o]*n[o];return r[r.length-1]=t,r}var st=Object.freeze({shuffle:y,clamp:x,nearestLargerEven:b,sum:w,randUniform:function(t,e){var n=Math.random();return e*n+(1-n)*t},distSquared:function(t,e){for(var n=0,r=0;r<t.length;r++){var o=Number(t[r])-Number(e[r]);n+=o*o}return n},assert:C,assertShapesMatch:E,assertNonNull:R,flatten:I,sizeFromShape:k,isScalarShape:function(t){return 0===t.length},arraysEqual:S,isInt:A,tanh:T,sizeToSquarishShape:D,createShuffledIndices:function(t){for(var e=new Uint32Array(t),n=0;n<t;++n)e[n]=n;return y(e),e},rightPad:N,repeatedTry:F,inferFromImplicitShape:_,parseAxisParam:O,squeezeShape:M,getTypedArrayFromDType:B,getArrayFromDType:P,checkConversionForErrors:L,isValidDtype:W,hasEncodingLoss:U,isTypedArray:V,bytesPerElement:z,bytesFromStringArray:G,isString:H,isBoolean:q,isNumber:K,inferDtype:j,isFunction:X,nearestDivisor:Y,computeStrides:$,toTypedArray:Q,toNestedArray:J,makeOnesTypedArray:Z,makeZerosTypedArray:tt,now:et,assertNonNegativeIntegerDimensions:nt,fetch:function(t,e){return i().platform.fetch(t,e)},encodeString:rt,decodeString:ot,locToIndex:at,indexToLoc:it}),ut=function(){function t(t,e){this.backendTimer=t,this.logger=e,null==e&&(this.logger=new ct)}return t.prototype.profileKernel=function(t,e,n){var r,o=this,a=this.backendTimer.time((function(){r=n()}));return r.forEach((function(n){n.data().then((function(r){!function(t,e,n){if(\"float32\"!==e)return!1;for(var r=0;r<t.length;r++){var o=t[r];if(isNaN(o)||!isFinite(o))return console.warn(\"Found \"+o+\" in the result of '\"+n+\"'\"),!0}}(r,n.dtype,t),a.then((function(a){var i=\"\";null!=a.getExtraProfileInfo&&(i=a.getExtraProfileInfo()),o.logger.logKernelProfile(t,n,r,a.kernelMs,e,i)}))}))})),r},t}();var ct=function(){function t(){}return t.prototype.logKernelProfile=function(t,e,n,r,o,a){var i=\"number\"==typeof r?N(r+\"ms\",9):r.error,s=N(t,25),u=e.rank,c=e.size,l=N(e.shape.toString(),14),h=\"\";for(var f in o){var d=o[f].shape||e.shape,p=d.length;h+=f+\": \"+p+\"D \"+(p>0?d:\"\")+\" \"}console.log(\"%c\"+s+\"\\t%c\"+i+\"\\t%c\"+u+\"D \"+l+\"\\t%c\"+c+\"\\t%c\"+h+\"\\t%c\"+a,\"font-weight:bold\",\"color:red\",\"color:blue\",\"color: orange\",\"color: green\",\"color: steelblue\")},t}();var lt=20,ht=3,ft=7;function dt(t,e,n,r){var o=$(e),a=function(t,e,n,r){var o=k(e),a=r[r.length-1],i=new Array(a).fill(0),s=e.length,u=\"complex64\"===n?gt(t):t;if(s>1)for(var c=0;c<o/a;c++)for(var l=c*a,h=0;h<a;h++)i[h]=Math.max(i[h],pt(u[l+h],0,n).length);return i}(t,e,n,o),i=e.length,s=function t(e,n,r,o,a,i){void 0===i&&(i=!0);var s=\"complex64\"===r?2:1,u=n[0],c=n.length;if(0===c){return\"complex64\"===r?[pt(gt(e)[0],0,r)]:\"bool\"===r?[vt(e[0])]:[e[0].toString()]}if(1===c){if(u>lt){var l=ht*s,h=Array.from(e.slice(0,l)),f=Array.from(e.slice((u-ht)*s,u*s));return\"complex64\"===r&&(h=gt(h),f=gt(f)),[\"[\"+h.map((function(t,e){return pt(t,a[e],r)})).join(\", \")+\", ..., \"+f.map((function(t,e){return pt(t,a[u-ht+e],r)})).join(\", \")+\"]\"]}return[\"[\"+(\"complex64\"===r?gt(e):Array.from(e)).map((function(t,e){return pt(t,a[e],r)})).join(\", \")+\"]\"]}var d=n.slice(1),p=o.slice(1),v=o[0]*s,g=[];if(u>lt){for(var m=0;m<ht;m++){var y=(x=m*v)+v;g.push.apply(g,t(e.slice(x,y),d,r,p,a,!1))}g.push(\"...\");for(m=u-ht;m<u;m++){y=(x=m*v)+v;g.push.apply(g,t(e.slice(x,y),d,r,p,a,m===u-1))}}else for(m=0;m<u;m++){var x;y=(x=m*v)+v;g.push.apply(g,t(e.slice(x,y),d,r,p,a,m===u-1))}var b=2===c?\",\":\"\";g[0]=\"[\"+g[0]+b;for(m=1;m<g.length-1;m++)g[m]=\" \"+g[m]+b;var w=\",\\n\";for(m=2;m<c;m++)w+=\"\\n\";return g[g.length-1]=\" \"+g[g.length-1]+\"]\"+(i?\"\":w),g}(t,e,n,o,a),u=[\"Tensor\"];return r&&(u.push(\"  dtype: \"+n),u.push(\"  rank: \"+i),u.push(\"  shape: [\"+e+\"]\"),u.push(\"  values:\")),u.push(s.map((function(t){return\"    \"+t})).join(\"\\n\")),u.join(\"\\n\")}function pt(t,e,n){return N(Array.isArray(t)?parseFloat(t[0].toFixed(ft))+\" + \"+parseFloat(t[1].toFixed(ft))+\"j\":H(t)?\"'\"+t+\"'\":\"bool\"===n?vt(t):parseFloat(t.toFixed(ft)).toString(),e)}function vt(t){return 0===t?\"false\":\"true\"}function gt(t){for(var e=[],n=0;n<t.length;n+=2)e.push([t[n],t[n+1]]);return e}var mt=function(){function t(t,e,n){var r=this;if(this.dtype=e,this.shape=t.slice(),this.size=k(t),null!=n){var o=n.length;C(o===this.size,(function(){return\"Length of values '\"+o+\"' does not match the size inferred by the shape '\"+r.size+\"'.\"}))}if(\"complex64\"===e)throw new Error(\"complex64 dtype TensorBuffers are not supported. Please create a TensorBuffer for the real and imaginary parts separately and call tf.complex(real, imag).\");this.values=n||P(e,this.size),this.strides=$(t)}return t.prototype.set=function(t){for(var e=this,n=[],r=1;r<arguments.length;r++)n[r-1]=arguments[r];0===n.length&&(n=[0]),C(n.length===this.rank,(function(){return\"The number of provided coordinates (\"+n.length+\") must match the rank (\"+e.rank+\")\"}));var o=this.locToIndex(n);this.values[o]=t},t.prototype.get=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];0===t.length&&(t=[0]);for(var n=0,r=0,o=t;r<o.length;r++){var a=o[r];if(a<0||a>=this.shape[n]){var i=\"Requested out of range element at \"+t+\".   Buffer shape=\"+this.shape;throw new Error(i)}n++}for(var s=t[t.length-1],u=0;u<t.length-1;++u)s+=this.strides[u]*t[u];return this.values[s]},t.prototype.locToIndex=function(t){if(0===this.rank)return 0;if(1===this.rank)return t[0];for(var e=t[t.length-1],n=0;n<t.length-1;++n)e+=this.strides[n]*t[n];return e},t.prototype.indexToLoc=function(t){if(0===this.rank)return[];if(1===this.rank)return[t];for(var e=new Array(this.shape.length),n=0;n<e.length-1;++n)e[n]=Math.floor(t/this.strides[n]),t-=e[n]*this.strides[n];return e[e.length-1]=t,e},Object.defineProperty(t.prototype,\"rank\",{get:function(){return this.shape.length},enumerable:!0,configurable:!0}),t.prototype.toTensor=function(){return yt().makeTensor(this.values,this.shape,this.dtype)},t}(),yt=null,xt=null,bt=null;var wt=function(){function t(t,e,n,r){this.kept=!1,this.isDisposedInternal=!1,this.shape=t.slice(),this.dtype=e||\"float32\",this.size=k(t),this.strides=$(t),this.dataId=n,this.id=r,this.rankType=this.rank<5?this.rank.toString():\"higher\"}return t.prototype.flatten=function(){return this.throwIfDisposed(),this.as1D()},t.prototype.asScalar=function(){return this.throwIfDisposed(),C(1===this.size,(function(){return\"The array must have only 1 element.\"})),this.reshape([])},t.prototype.as1D=function(){return this.throwIfDisposed(),this.reshape([this.size])},t.prototype.as2D=function(t,e){return this.throwIfDisposed(),this.reshape([t,e])},t.prototype.as3D=function(t,e,n){return this.throwIfDisposed(),this.reshape([t,e,n])},t.prototype.as4D=function(t,e,n,r){return this.throwIfDisposed(),this.reshape([t,e,n,r])},t.prototype.as5D=function(t,e,n,r,o){return this.throwIfDisposed(),this.reshape([t,e,n,r,o])},t.prototype.asType=function(t){return this.throwIfDisposed(),xt.cast(this,t)},Object.defineProperty(t.prototype,\"rank\",{get:function(){return this.shape.length},enumerable:!0,configurable:!0}),t.prototype.buffer=function(){return n(this,void 0,void 0,(function(){var t;return r(this,(function(e){switch(e.label){case 0:return[4,this.data()];case 1:return t=e.sent(),[2,xt.buffer(this.shape,this.dtype,t)]}}))}))},t.prototype.bufferSync=function(){return xt.buffer(this.shape,this.dtype,this.dataSync())},t.prototype.array=function(){return n(this,void 0,void 0,(function(){var t;return r(this,(function(e){switch(e.label){case 0:return[4,this.data()];case 1:return t=e.sent(),[2,J(this.shape,t)]}}))}))},t.prototype.arraySync=function(){return J(this.shape,this.dataSync())},t.prototype.data=function(){return n(this,void 0,void 0,(function(){var t,e;return r(this,(function(n){switch(n.label){case 0:return this.throwIfDisposed(),t=yt().read(this.dataId),\"string\"!==this.dtype?[3,2]:[4,t];case 1:e=n.sent();try{return[2,e.map((function(t){return ot(t)}))]}catch(t){throw new Error(\"Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().\")}n.label=2;case 2:return[2,t]}}))}))},t.prototype.dataSync=function(){this.throwIfDisposed();var t=yt().readSync(this.dataId);if(\"string\"===this.dtype)try{return t.map((function(t){return ot(t)}))}catch(t){throw new Error(\"Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().\")}return t},t.prototype.bytes=function(){return n(this,void 0,void 0,(function(){var t;return r(this,(function(e){switch(e.label){case 0:return this.throwIfDisposed(),[4,yt().read(this.dataId)];case 1:return t=e.sent(),\"string\"===this.dtype?[2,t]:[2,new Uint8Array(t.buffer)]}}))}))},t.prototype.dispose=function(){this.isDisposed||(yt().disposeTensor(this),this.isDisposedInternal=!0)},Object.defineProperty(t.prototype,\"isDisposed\",{get:function(){return this.isDisposedInternal},enumerable:!0,configurable:!0}),t.prototype.throwIfDisposed=function(){if(this.isDisposed)throw new Error(\"Tensor is disposed.\")},t.prototype.toFloat=function(){return this.asType(\"float32\")},t.prototype.toInt=function(){return this.asType(\"int32\")},t.prototype.toBool=function(){return this.asType(\"bool\")},t.prototype.print=function(t){return void 0===t&&(t=!1),xt.print(this,t)},t.prototype.reshape=function(t){return this.throwIfDisposed(),xt.reshape(this,t)},t.prototype.reshapeAs=function(t){return this.throwIfDisposed(),this.reshape(t.shape)},t.prototype.expandDims=function(t){return void 0===t&&(t=0),xt.expandDims(this,t)},t.prototype.cumsum=function(t,e,n){return void 0===t&&(t=0),void 0===e&&(e=!1),void 0===n&&(n=!1),xt.cumsum(this,t,e,n)},t.prototype.squeeze=function(t){return this.throwIfDisposed(),xt.squeeze(this,t)},t.prototype.clone=function(){return this.throwIfDisposed(),xt.clone(this)},t.prototype.toString=function(t){return void 0===t&&(t=!1),dt(this.dataSync(),this.shape,this.dtype,t)},t.prototype.gather=function(t,e){return void 0===e&&(e=0),this.throwIfDisposed(),xt.gather(this,t,e)},t.prototype.matMul=function(t,e,n){return void 0===e&&(e=!1),void 0===n&&(n=!1),this.throwIfDisposed(),xt.matMul(this,t,e,n)},t.prototype.dot=function(t){return this.throwIfDisposed(),xt.dot(this,t)},t.prototype.norm=function(t,e,n){return void 0===t&&(t=\"euclidean\"),void 0===e&&(e=null),void 0===n&&(n=!1),this.throwIfDisposed(),xt.norm(this,t,e,n)},t.prototype.slice=function(t,e){return this.throwIfDisposed(),xt.slice(this,t,e)},t.prototype.reverse=function(t){return this.throwIfDisposed(),xt.reverse(this,t)},t.prototype.concat=function(e,n){return void 0===n&&(n=0),this.throwIfDisposed(),e instanceof t&&(e=[e]),xt.concat([this].concat(e),n)},t.prototype.split=function(t,e){return void 0===e&&(e=0),this.throwIfDisposed(),xt.split(this,t,e)},t.prototype.stack=function(t,e){return void 0===e&&(e=0),xt.stack([this,t],e)},t.prototype.unstack=function(t){return void 0===t&&(t=0),xt.unstack(this,t)},t.prototype.batchNormalization=function(t,e,n,r,o){return void 0===n&&(n=.001),bt(\"tf.batchNormalization() is going away. Use tf.batchNorm() instead, and note the positional argument change of scale, offset, and varianceEpsilon\"),this.batchNorm(t,e,o,r,n)},t.prototype.all=function(t,e){return void 0===t&&(t=null),void 0===e&&(e=!1),this.throwIfDisposed(),xt.all(this,t,e)},t.prototype.any=function(t,e){return void 0===t&&(t=null),void 0===e&&(e=!1),this.throwIfDisposed(),xt.any(this,t,e)},t.prototype.logSumExp=function(t,e){return void 0===t&&(t=null),void 0===e&&(e=!1),this.throwIfDisposed(),xt.logSumExp(this,t,e)},t.prototype.sum=function(t,e){return void 0===t&&(t=null),void 0===e&&(e=!1),this.throwIfDisposed(),xt.sum(this,t,e)},t.prototype.prod=function(t,e){return void 0===t&&(t=null),void 0===e&&(e=!1),this.throwIfDisposed(),xt.prod(this,t,e)},t.prototype.mean=function(t,e){return void 0===t&&(t=null),void 0===e&&(e=!1),this.throwIfDisposed(),xt.mean(this,t,e)},t.prototype.min=function(t,e){return void 0===t&&(t=null),void 0===e&&(e=!1),this.throwIfDisposed(),xt.min(this,t,e)},t.prototype.max=function(t,e){return void 0===t&&(t=null),void 0===e&&(e=!1),this.throwIfDisposed(),xt.max(this,t,e)},t.prototype.argMin=function(t){return void 0===t&&(t=null),this.throwIfDisposed(),xt.argMin(this,t)},t.prototype.argMax=function(t){return void 0===t&&(t=null),this.throwIfDisposed(),xt.argMax(this,t)},t.prototype.cast=function(t){return this.throwIfDisposed(),xt.cast(this,t)},t.prototype.addStrict=function(t){return this.throwIfDisposed(),xt.addStrict(this,t)},t.prototype.atan2=function(t){return this.throwIfDisposed(),xt.atan2(this,t)},t.prototype.sub=function(t){return this.throwIfDisposed(),xt.sub(this,t)},t.prototype.subStrict=function(t){return this.throwIfDisposed(),xt.subStrict(this,t)},t.prototype.pow=function(t){return this.throwIfDisposed(),xt.pow(this,t)},t.prototype.powStrict=function(t){return this.throwIfDisposed(),xt.powStrict(this,t)},t.prototype.mul=function(t){return this.throwIfDisposed(),xt.mul(this,t)},t.prototype.mulStrict=function(t){return this.throwIfDisposed(),xt.mulStrict(this,t)},t.prototype.floorDiv=function(t){return this.throwIfDisposed(),xt.floorDiv(this,t)},t.prototype.divStrict=function(t){return this.throwIfDisposed(),xt.divStrict(this,t)},t.prototype.minimum=function(t){return this.throwIfDisposed(),xt.minimum(this,t)},t.prototype.minimumStrict=function(t){return this.throwIfDisposed(),xt.minimumStrict(this,t)},t.prototype.maximum=function(t){return this.throwIfDisposed(),xt.maximum(this,t)},t.prototype.maximumStrict=function(t){return this.throwIfDisposed(),xt.maximumStrict(this,t)},t.prototype.mod=function(t){return this.throwIfDisposed(),xt.mod(this,t)},t.prototype.modStrict=function(t){return this.throwIfDisposed(),xt.modStrict(this,t)},t.prototype.squaredDifferenceStrict=function(t){return this.throwIfDisposed(),xt.squaredDifferenceStrict(this,t)},t.prototype.notEqual=function(t){return this.throwIfDisposed(),xt.notEqual(this,t)},t.prototype.notEqualStrict=function(t){return this.throwIfDisposed(),xt.notEqualStrict(this,t)},t.prototype.less=function(t){return this.throwIfDisposed(),xt.less(this,t)},t.prototype.lessStrict=function(t){return this.throwIfDisposed(),xt.lessStrict(this,t)},t.prototype.equal=function(t){return this.throwIfDisposed(),xt.equal(this,t)},t.prototype.equalStrict=function(t){return this.throwIfDisposed(),xt.equalStrict(this,t)},t.prototype.lessEqual=function(t){return this.throwIfDisposed(),xt.lessEqual(this,t)},t.prototype.lessEqualStrict=function(t){return this.throwIfDisposed(),xt.lessEqualStrict(this,t)},t.prototype.greater=function(t){return this.throwIfDisposed(),xt.greater(this,t)},t.prototype.greaterStrict=function(t){return this.throwIfDisposed(),xt.greaterStrict(this,t)},t.prototype.greaterEqual=function(t){return this.throwIfDisposed(),xt.greaterEqual(this,t)},t.prototype.greaterEqualStrict=function(t){return this.throwIfDisposed(),xt.greaterEqualStrict(this,t)},t.prototype.logicalAnd=function(t){return this.throwIfDisposed(),xt.logicalAnd(this,t)},t.prototype.logicalOr=function(t){return this.throwIfDisposed(),xt.logicalOr(this,t)},t.prototype.logicalNot=function(){return this.throwIfDisposed(),xt.logicalNot(this)},t.prototype.logicalXor=function(t){return this.throwIfDisposed(),xt.logicalXor(this,t)},t.prototype.where=function(t,e){return this.throwIfDisposed(),xt.where(t,this,e)},t.prototype.neg=function(){return this.throwIfDisposed(),xt.neg(this)},t.prototype.ceil=function(){return this.throwIfDisposed(),xt.ceil(this)},t.prototype.floor=function(){return this.throwIfDisposed(),xt.floor(this)},t.prototype.sign=function(){return this.throwIfDisposed(),xt.sign(this)},t.prototype.isNaN=function(){return this.throwIfDisposed(),xt.isNaN(this)},t.prototype.isInf=function(){return this.throwIfDisposed(),xt.isInf(this)},t.prototype.isFinite=function(){return this.throwIfDisposed(),xt.isFinite(this)},t.prototype.exp=function(){return this.throwIfDisposed(),xt.exp(this)},t.prototype.expm1=function(){return this.throwIfDisposed(),xt.expm1(this)},t.prototype.log=function(){return this.throwIfDisposed(),xt.log(this)},t.prototype.log1p=function(){return this.throwIfDisposed(),xt.log1p(this)},t.prototype.sqrt=function(){return this.throwIfDisposed(),xt.sqrt(this)},t.prototype.rsqrt=function(){return this.throwIfDisposed(),xt.rsqrt(this)},t.prototype.square=function(){return this.throwIfDisposed(),xt.square(this)},t.prototype.reciprocal=function(){return this.throwIfDisposed(),xt.reciprocal(this)},t.prototype.abs=function(){return this.throwIfDisposed(),xt.abs(this)},t.prototype.clipByValue=function(t,e){return this.throwIfDisposed(),xt.clipByValue(this,t,e)},t.prototype.relu=function(){return this.throwIfDisposed(),xt.relu(this)},t.prototype.relu6=function(){return this.throwIfDisposed(),xt.relu6(this)},t.prototype.elu=function(){return this.throwIfDisposed(),xt.elu(this)},t.prototype.selu=function(){return this.throwIfDisposed(),xt.selu(this)},t.prototype.leakyRelu=function(t){return void 0===t&&(t=.2),this.throwIfDisposed(),xt.leakyRelu(this,t)},t.prototype.prelu=function(t){return this.throwIfDisposed(),xt.prelu(this,t)},t.prototype.sigmoid=function(){return this.throwIfDisposed(),xt.sigmoid(this)},t.prototype.logSigmoid=function(){return this.throwIfDisposed(),xt.logSigmoid(this)},t.prototype.softplus=function(){return this.throwIfDisposed(),xt.softplus(this)},t.prototype.zerosLike=function(){return this.throwIfDisposed(),xt.zerosLike(this)},t.prototype.onesLike=function(){return this.throwIfDisposed(),xt.onesLike(this)},t.prototype.sin=function(){return this.throwIfDisposed(),xt.sin(this)},t.prototype.cos=function(){return this.throwIfDisposed(),xt.cos(this)},t.prototype.tan=function(){return this.throwIfDisposed(),xt.tan(this)},t.prototype.asin=function(){return this.throwIfDisposed(),xt.asin(this)},t.prototype.acos=function(){return this.throwIfDisposed(),xt.acos(this)},t.prototype.atan=function(){return this.throwIfDisposed(),xt.atan(this)},t.prototype.sinh=function(){return this.throwIfDisposed(),xt.sinh(this)},t.prototype.cosh=function(){return this.throwIfDisposed(),xt.cosh(this)},t.prototype.tanh=function(){return this.throwIfDisposed(),xt.tanh(this)},t.prototype.asinh=function(){return this.throwIfDisposed(),xt.asinh(this)},t.prototype.acosh=function(){return this.throwIfDisposed(),xt.acosh(this)},t.prototype.atanh=function(){return this.throwIfDisposed(),xt.atanh(this)},t.prototype.erf=function(){return this.throwIfDisposed(),xt.erf(this)},t.prototype.round=function(){return this.throwIfDisposed(),xt.round(this)},t.prototype.step=function(t){return void 0===t&&(t=0),this.throwIfDisposed(),xt.step(this,t)},t.prototype.softmax=function(t){return void 0===t&&(t=-1),this.throwIfDisposed(),xt.softmax(this,t)},t.prototype.logSoftmax=function(t){return void 0===t&&(t=-1),this.throwIfDisposed(),xt.logSoftmax(this,t)},t.prototype.resizeBilinear=function(t,e){return void 0===e&&(e=!1),this.throwIfDisposed(),xt.image.resizeBilinear(this,t,e)},t.prototype.resizeNearestNeighbor=function(t,e){return void 0===e&&(e=!1),this.throwIfDisposed(),xt.image.resizeNearestNeighbor(this,t,e)},t.prototype.conv1d=function(t,e,n,r,o,a){return void 0===r&&(r=\"NWC\"),void 0===o&&(o=1),this.throwIfDisposed(),xt.conv1d(this,t,e,n,r,o,a)},t.prototype.conv2d=function(t,e,n,r,o,a){return void 0===r&&(r=\"NHWC\"),void 0===o&&(o=[1,1]),this.throwIfDisposed(),xt.conv2d(this,t,e,n,r,o,a)},t.prototype.conv2dTranspose=function(t,e,n,r,o){return this.throwIfDisposed(),xt.conv2dTranspose(this,t,e,n,r,o)},t.prototype.depthwiseConv2D=function(t,e,n,r,o,a){return void 0===r&&(r=\"NHWC\"),void 0===o&&(o=[1,1]),this.throwIfDisposed(),xt.depthwiseConv2d(this,t,e,n,r,o,a)},t.prototype.separableConv2d=function(t,e,n,r,o,a){return void 0===o&&(o=[1,1]),void 0===a&&(a=\"NHWC\"),this.throwIfDisposed(),xt.separableConv2d(this,t,e,n,r,o,a)},t.prototype.avgPool=function(t,e,n,r){return this.throwIfDisposed(),xt.avgPool(this,t,e,n,r)},t.prototype.maxPool=function(t,e,n,r){return this.throwIfDisposed(),xt.maxPool(this,t,e,n,r)},t.prototype.localResponseNormalization=function(t,e,n,r){return void 0===t&&(t=5),void 0===e&&(e=1),void 0===n&&(n=1),void 0===r&&(r=.5),xt.localResponseNormalization(this,t,e,n,r)},t.prototype.pool=function(t,e,n,r,o){return this.throwIfDisposed(),xt.pool(this,t,e,n,r,o)},t.prototype.variable=function(t,e,n){return void 0===t&&(t=!0),this.throwIfDisposed(),yt().makeVariable(this,t,e,n)},t.prototype.unsortedSegmentSum=function(t,e){return this.throwIfDisposed(),xt.unsortedSegmentSum(this,t,e)},t.prototype.batchToSpaceND=function(t,e){return this.throwIfDisposed(),xt.batchToSpaceND(this,t,e)},t.prototype.spaceToBatchND=function(t,e){return this.throwIfDisposed(),xt.spaceToBatchND(this,t,e)},t.prototype.topk=function(t,e){return void 0===t&&(t=1),void 0===e&&(e=!0),this.throwIfDisposed(),xt.topk(this,t,e)},t.prototype.stridedSlice=function(t,e,n,r,o,a,i,s){return void 0===r&&(r=0),void 0===o&&(o=0),void 0===a&&(a=0),void 0===i&&(i=0),void 0===s&&(s=0),this.throwIfDisposed(),xt.stridedSlice(this,t,e,n,r,o,a,i,s)},t.prototype.depthToSpace=function(t,e){return this.throwIfDisposed(),xt.depthToSpace(this,t,e)},t.prototype.fft=function(){return this.throwIfDisposed(),xt.spectral.fft(this)},t.prototype.ifft=function(){return this.throwIfDisposed(),xt.spectral.ifft(this)},t.prototype.rfft=function(){return this.throwIfDisposed(),xt.spectral.rfft(this)},t.prototype.irfft=function(){return this.throwIfDisposed(),xt.spectral.irfft(this)},t}();Object.defineProperty(wt,Symbol.hasInstance,{value:function(t){return!!t&&null!=t.dataId&&null!=t.shape&&null!=t.dtype}});var Ct,Et,Rt,It,kt,St=function(t){function n(e,n,r,o){var a=t.call(this,e.shape,e.dtype,e.dataId,o)||this;return a.trainable=n,a.name=r,a}return e(n,t),n.prototype.assign=function(t){if(t.dtype!==this.dtype)throw new Error(\"dtype of the new value (\"+t.dtype+\") and previous value (\"+this.dtype+\") must match\");if(!S(t.shape,this.shape))throw new Error(\"shape of the new value (\"+t.shape+\") and previous value (\"+this.shape+\") must match\");yt().disposeTensor(this),this.dataId=t.dataId,yt().incRef(this,null)},n.prototype.dispose=function(){yt().disposeVariable(this),this.isDisposedInternal=!0},n}(wt);Object.defineProperty(St,Symbol.hasInstance,{value:function(t){return t instanceof wt&&null!=t.assign&&t.assign instanceof Function}}),function(t){t.R0=\"R0\",t.R1=\"R1\",t.R2=\"R2\",t.R3=\"R3\",t.R4=\"R4\",t.R5=\"R5\",t.R6=\"R6\"}(Ct||(Ct={})),function(t){t.float32=\"float32\",t.int32=\"int32\",t.bool=\"int32\",t.complex64=\"complex64\"}(Et||(Et={})),function(t){t.float32=\"float32\",t.int32=\"int32\",t.bool=\"bool\",t.complex64=\"complex64\"}(Rt||(Rt={})),function(t){t.float32=\"float32\",t.int32=\"float32\",t.bool=\"float32\",t.complex64=\"complex64\"}(It||(It={})),function(t){t.float32=\"complex64\",t.int32=\"complex64\",t.bool=\"complex64\",t.complex64=\"complex64\"}(kt||(kt={}));var At={float32:It,int32:Et,bool:Rt,complex64:kt};function Tt(t,e){if(\"string\"===t||\"string\"===e){if(\"string\"===t&&\"string\"===e)return\"string\";throw new Error(\"Can not upcast \"+t+\" with \"+e)}return At[t][e]}function Dt(t){return Tt(t,\"int32\")}function Nt(t,e){if(t.dtype===e.dtype)return[t,e];var n=Tt(t.dtype,e.dtype);return[t.cast(n),e.cast(n)]}function Ft(t,e){C(t.dtype===e.dtype,(function(){return\"The dtypes of the first(\"+t.dtype+\") and second(\"+e.dtype+\") input must match\"}))}function _t(t){var e=[];return function t(e,n,r){if(null==e)return;if(e instanceof wt)return void n.push(e);if(o=e,!Array.isArray(o)&&\"object\"!=typeof o)return;var o;var a=e;for(var i in a){var s=a[i];r.has(s)||(r.add(s),t(s,n,r))}}(t,e,new Set),e}var Ot,Mt=Object.freeze({makeTypesMatch:Nt,assertTypesMatch:Ft,isTensorInList:function(t,e){return e.some((function(e){return e.id===t.id}))},getTensorsInContainer:_t}),Bt=function(){function t(){this.registeredVariables={},this.nextTapeNodeId=0,this.numBytes=0,this.numTensors=0,this.numStringTensors=0,this.numDataBuffers=0,this.gradientDepth=0,this.kernelDepth=0,this.scopeStack=[],this.numDataMovesStack=[],this.nextScopeId=0,this.tensorInfo=new WeakMap,this.profiling=!1,this.activeProfile={newBytes:0,newTensors:0,peakBytes:0,kernels:[],result:null}}return t.prototype.dispose=function(){for(var t in this.registeredVariables)this.registeredVariables[t].dispose()},t}(),Pt=function(){function t(t){this.ENV=t,this.registry={},this.registryFactory={},this.pendingBackendInitId=0,this.state=new Bt}return t.prototype.ready=function(){return n(this,void 0,void 0,(function(){var t,e,n;return r(this,(function(r){switch(r.label){case 0:if(null!=this.pendingBackendInit)return[2,this.pendingBackendInit.then((function(){}))];if(null!=this.backendInstance)return[2];t=this.getSortedBackends(),e=0,r.label=1;case 1:return e<t.length?(n=t[e],[4,this.initializeBackend(n).success]):[3,5];case 2:return r.sent()?[4,this.setBackend(n)]:[3,4];case 3:return r.sent(),[2];case 4:return e++,[3,1];case 5:throw new Error(\"Could not initialize any backends, all backend initializations failed.\")}}))}))},Object.defineProperty(t.prototype,\"backend\",{get:function(){if(null!=this.pendingBackendInit)throw new Error(\"Backend '\"+this.backendName+\"' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods\");if(null==this.backendInstance){var t=this.initializeBackendsAndReturnBest(),e=t.name;if(t.asyncInit)throw new Error(\"The highest priority backend '\"+e+\"' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods\");this.setBackend(e)}return this.backendInstance},enumerable:!0,configurable:!0}),t.prototype.backendNames=function(){return Object.keys(this.registryFactory)},t.prototype.findBackend=function(t){if(!(t in this.registry)){if(!(t in this.registryFactory))return null;if(this.initializeBackend(t).asyncInit)return null}return this.registry[t]},t.prototype.findBackendFactory=function(t){return t in this.registryFactory?this.registryFactory[t].factory:null},t.prototype.registerBackend=function(t,e,n){return void 0===n&&(n=1),t in this.registryFactory?(console.warn(t+\" backend was already registered. Reusing existing backend factory.\"),!1):(this.registryFactory[t]={factory:e,priority:n},!0)},t.prototype.setBackend=function(t){return n(this,void 0,void 0,(function(){var e,n,o;return r(this,(function(r){switch(r.label){case 0:if(null==this.registryFactory[t])throw new Error(\"Backend name '\"+t+\"' not found in registry\");return this.backendName=t,null!=this.registry[t]?[3,4]:(this.backendInstance=null,e=this.initializeBackend(t),n=e.success,e.asyncInit?[4,n]:[3,2]);case 1:return o=r.sent(),[3,3];case 2:o=n,r.label=3;case 3:if(!o)return[2,!1];r.label=4;case 4:return this.backendInstance=this.registry[t],this.setupRegisteredKernels(),this.profiler=new ut(this.backendInstance),[2,!0]}}))}))},t.prototype.setupRegisteredKernels=function(){var t=this;f(this.backendName).forEach((function(e){null!=e.setupFunc&&e.setupFunc(t.backendInstance)}))},t.prototype.disposeRegisteredKernels=function(t){var e=this;f(t).forEach((function(n){null!=n.disposeFunc&&n.disposeFunc(e.registry[t])}))},t.prototype.initializeBackend=function(t){var e=this,n=this.registryFactory[t];if(null==n)throw new Error(\"Cannot initialize backend \"+t+\", no registration found.\");try{var r=n.factory();if(Promise.resolve(r)===r){var o=++this.pendingBackendInitId,a=r.then((function(n){return!(o<e.pendingBackendInitId)&&(e.registry[t]=n,e.pendingBackendInit=null,!0)})).catch((function(n){return!(o<e.pendingBackendInitId)&&(e.pendingBackendInit=null,console.warn(\"Initialization of backend \"+t+\" failed\"),console.warn(n.stack||n.message),!1)}));return this.pendingBackendInit=a,{success:a,asyncInit:!0}}return this.registry[t]=r,{success:!0,asyncInit:!1}}catch(e){return console.warn(\"Initialization of backend \"+t+\" failed\"),console.warn(e.stack||e.message),{success:!1,asyncInit:!1}}},t.prototype.removeBackend=function(t){if(!(t in this.registryFactory))throw new Error(t+\" backend not found in registry\");this.backendName===t&&null!=this.pendingBackendInit&&this.pendingBackendInitId++,t in this.registry&&(this.disposeRegisteredKernels(t),this.registry[t].dispose(),delete this.registry[t]),delete this.registryFactory[t],this.backendName===t&&(this.pendingBackendInit=null,this.backendName=null,this.backendInstance=null)},t.prototype.getSortedBackends=function(){var t=this;if(0===Object.keys(this.registryFactory).length)throw new Error(\"No backend found in registry.\");return Object.keys(this.registryFactory).sort((function(e,n){return t.registryFactory[n].priority-t.registryFactory[e].priority}))},t.prototype.initializeBackendsAndReturnBest=function(){for(var t=this.getSortedBackends(),e=0;e<t.length;e++){var n=t[e],r=this.initializeBackend(n),o=r.success,a=r.asyncInit;if(a||o)return{name:n,asyncInit:a}}throw new Error(\"Could not initialize any backends, all backend initializations failed.\")},t.prototype.moveData=function(t,e){var n=this.state.tensorInfo.get(e),r=n.backend,o=this.readSync(e);r.disposeData(e),n.backend=t,t.move(e,o,n.shape,n.dtype),this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack[this.state.numDataMovesStack.length-1]++},t.prototype.tidy=function(t,e){var n,r=this,o=null;if(null==e){if(\"function\"!=typeof t)throw new Error(\"Please provide a function to tidy()\");e=t}else{if(\"string\"!=typeof t&&!(t instanceof String))throw new Error(\"When calling with two arguments, the first argument to tidy() must be a string\");if(\"function\"!=typeof e)throw new Error(\"When calling with two arguments, the 2nd argument to tidy() must be a function\");o=t}return this.scopedRun((function(){return r.startScope(o)}),(function(){return r.endScope(n)}),(function(){return(n=e())instanceof Promise&&console.error(\"Cannot return a Promise inside of tidy.\"),n}))},t.prototype.scopedRun=function(t,e,n){t();try{var r=n();return e(),r}catch(t){throw e(),t}},t.prototype.nextTensorId=function(){return t.nextTensorId++},t.prototype.nextVariableId=function(){return t.nextVariableId++},t.prototype.clone=function(t){var e=this.makeTensorFromDataId(t.dataId,t.shape,t.dtype),n={x:t};return this.addTapeNode(this.state.activeScope.name,n,[e],(function(t){return{x:function(){return t.toFloat()}}}),[],{}),e},t.prototype.runKernel=function(t,e,n,r,o){return this.runKernelFunc(null,e,null,t,n,r,o)},t.prototype.shouldCheckForMemLeaks=function(){return this.ENV.getBool(\"IS_TEST\")},t.prototype.checkKernelForMemLeak=function(t,e,n){var r=this.backend.numDataIds(),o=0;n.forEach((function(t){o+=\"complex64\"===t.dtype?3:1}));var a=this.state.numDataMovesStack[this.state.numDataMovesStack.length-1],i=r-e-o-a;if(i>0)throw new Error(\"Backend '\"+this.backendName+\"' has an internal memory leak (\"+i+\" data ids) after running '\"+t+\"'\")},t.prototype.runKernelFunc=function(t,e,n,r,o,a,i){var s,u=this,c=[],h=this.isTapeOn();null==r&&(r=null!=this.state.activeScope?this.state.activeScope.name:\"\");var f,d=this.state.numBytes,p=this.state.numTensors;this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack.push(0);var v,g=l(r,this.backendName);if(null!=g)f=function(){var t=u.backend.numDataIds();v=g.kernelFunc({inputs:e,attrs:o,backend:u.backend});var n=Array.isArray(v)?v:[v];u.shouldCheckForMemLeaks()&&u.checkKernelForMemLeak(r,t,n);var s=n.map((function(t){var e=t.dataId,n=t.shape,r=t.dtype;return u.makeTensorFromDataId(e,n,r)}));if(h){var l=u.getTensorsForGradient(r,e,s);if(null==l){null==i&&(i=[]);var f=s.filter((function(t,e){return i[e]}));l=(a||[]).slice().concat(f)}c=u.saveTensorsForBackwardMode(l)}return s};else{var m=function(t){h&&(c=t.map((function(t){return u.keep(u.clone(t))})))};f=function(){var e=u.backend.numDataIds();v=u.tidy((function(){return t(u.backend,m)}));var n=Array.isArray(v)?v:[v];return u.shouldCheckForMemLeaks()&&u.checkKernelForMemLeak(r,e,n),n}}return this.scopedRun((function(){return u.state.kernelDepth++}),(function(){return u.state.kernelDepth--}),(function(){s=u.ENV.getBool(\"DEBUG\")?u.profiler.profileKernel(r,e,(function(){return f()})):f()})),h&&this.addTapeNode(r,e,s,n,c,o),this.state.profiling&&this.state.activeProfile.kernels.push({name:r,bytesAdded:this.state.numBytes-d,totalBytesSnapshot:this.state.numBytes,tensorsAdded:this.state.numTensors-p,totalTensorsSnapshot:this.state.numTensors,inputShapes:Object.keys(e).map((function(t){return e[t].shape})),outputShapes:s.map((function(t){return t.shape}))}),Array.isArray(v)?s:s[0]},t.prototype.saveTensorsForBackwardMode=function(t){var e=this;return t.map((function(t){return e.keep(e.clone(t))}))},t.prototype.getTensorsForGradient=function(t,e,n){var r=h(t);if(null!=r){var o=r.inputsToSave||[],a=r.outputsToSave||[],i=void 0;r.saveAllInputs?(C(Array.isArray(e),(function(){return\"saveAllInputs is true, expected inputs to be an array.\"})),i=Object.keys(e).map((function(t){return e[t]}))):i=o.map((function(t){return e[t]}));var s=n.filter((function(t,e){return a[e]}));return i.concat(s)}return null},t.prototype.makeTensor=function(t,e,n,r){if(null==t)throw new Error(\"Values passed to engine.makeTensor() are null\");n=n||\"float32\",r=r||this.backend;var o=t;\"string\"===n&&H(t[0])&&(o=t.map((function(t){return rt(t)})));var a=r.write(o,e,n),i=new wt(e,n,a,this.nextTensorId());if(this.incRef(i,r),\"string\"===n){var s=this.state.tensorInfo.get(a),u=G(o);this.state.numBytes+=u-s.bytes,s.bytes=u}return i},t.prototype.makeTensorFromDataId=function(t,e,n,r){var o=new wt(e,n=n||\"float32\",t,this.nextTensorId());return this.incRef(o,r),o},t.prototype.makeVariable=function(t,e,n,r){void 0===e&&(e=!0),n=n||this.nextVariableId().toString(),null!=r&&r!==t.dtype&&(t=t.asType(r));var o=new St(t,e,n,this.nextTensorId());if(null!=this.state.registeredVariables[o.name])throw new Error(\"Variable with name \"+o.name+\" was already registered\");return this.state.registeredVariables[o.name]=o,this.incRef(o,this.backend),o},t.prototype.incRef=function(t,e){var n=this.state.tensorInfo.has(t.dataId)?this.state.tensorInfo.get(t.dataId).refCount:0;if(this.state.numTensors++,\"string\"===t.dtype&&this.state.numStringTensors++,0===n){this.state.numDataBuffers++;var r=0;\"complex64\"!==t.dtype&&\"string\"!==t.dtype&&(r=t.size*z(t.dtype)),this.state.tensorInfo.set(t.dataId,{backend:e||this.backend,dtype:t.dtype,shape:t.shape,bytes:r,refCount:0}),this.state.numBytes+=r}this.state.tensorInfo.get(t.dataId).refCount++,t instanceof St||this.track(t)},t.prototype.disposeTensor=function(t){if(this.state.tensorInfo.has(t.dataId)){this.state.numTensors--,\"string\"===t.dtype&&this.state.numStringTensors--;var e=this.state.tensorInfo.get(t.dataId);e.refCount<=1?(\"complex64\"!==t.dtype&&(this.state.numBytes-=e.bytes),this.state.numDataBuffers--,e.backend.disposeData(t.dataId),this.state.tensorInfo.delete(t.dataId)):this.state.tensorInfo.get(t.dataId).refCount--}},t.prototype.disposeVariables=function(){for(var t in this.state.registeredVariables){var e=this.state.registeredVariables[t];this.disposeVariable(e)}},t.prototype.disposeVariable=function(t){this.disposeTensor(t),null!=this.state.registeredVariables[t.name]&&delete this.state.registeredVariables[t.name]},t.prototype.memory=function(){var t=this.backend.memory();return t.numTensors=this.state.numTensors,t.numDataBuffers=this.state.numDataBuffers,t.numBytes=this.state.numBytes,this.state.numStringTensors>0&&(t.unreliable=!0,null==t.reasons&&(t.reasons=[]),t.reasons.push(\"Memory usage by string tensors is approximate (2 bytes per character)\")),t},t.prototype.profile=function(t){return n(this,void 0,void 0,(function(){var e,n;return r(this,(function(r){return this.state.profiling=!0,e=this.state.numBytes,n=this.state.numTensors,this.state.activeProfile.kernels=[],this.state.activeProfile.result=t(),this.state.profiling=!1,this.state.activeProfile.peakBytes=Math.max.apply(Math,this.state.activeProfile.kernels.map((function(t){return t.totalBytesSnapshot}))),this.state.activeProfile.newBytes=this.state.numBytes-e,this.state.activeProfile.newTensors=this.state.numTensors-n,[2,this.state.activeProfile]}))}))},t.prototype.isTapeOn=function(){return this.state.gradientDepth>0&&0===this.state.kernelDepth},t.prototype.addTapeNode=function(t,e,n,r,o,a){var i=this,s={id:this.state.nextTapeNodeId++,kernelName:t,inputs:e,outputs:n,saved:o},u=h(t);null!=u&&(r=u.gradFunc),null!=r&&(s.gradient=function(t){return t=t.map((function(t,e){if(null==t){var r=n[e],o=tt(r.size,r.dtype);return i.makeTensor(o,r.shape,r.dtype)}return t})),r(t.length>1?t:t[0],o,a)}),this.state.activeTape.push(s)},t.prototype.keep=function(t){return t.kept=!0,t},t.prototype.startTape=function(){0===this.state.gradientDepth&&(this.state.activeTape=[]),this.state.gradientDepth++},t.prototype.endTape=function(){this.state.gradientDepth--},t.prototype.startScope=function(t){var e={track:[],name:\"unnamed scope\",id:this.state.nextScopeId++};t&&(e.name=t),this.state.scopeStack.push(e),this.state.activeScope=e},t.prototype.endScope=function(t){for(var e=this,n=_t(t),r=new Set(n.map((function(t){return t.id}))),o=0;o<this.state.activeScope.track.length;o++){var a=this.state.activeScope.track[o];a.kept||r.has(a.id)||a.dispose()}var i=this.state.scopeStack.pop();this.state.activeScope=0===this.state.scopeStack.length?null:this.state.scopeStack[this.state.scopeStack.length-1],n.forEach((function(t){t.kept||t.scopeId!==i.id||e.track(t)}))},t.prototype.gradients=function(t,e,n,r){var o=this;if(void 0===r&&(r=!1),C(e.length>0,(function(){return\"gradients() received an empty list of xs.\"})),null!=n&&\"float32\"!==n.dtype)throw new Error(\"dy must have 'float32' dtype, but has '\"+n.dtype+\"'\");var a=this.scopedRun((function(){return o.startTape()}),(function(){return o.endTape()}),(function(){return o.tidy(\"forward\",t)}));C(a instanceof wt,(function(){return\"The result y returned by f() must be a tensor.\"}));var i=function(t,e,n){for(var r={},o={},a=0;a<e.length;a++)r[e[a].id]=!0;for(a=0;a<t.length;a++){var i=(p=t[a]).inputs;for(var s in i){for(var u=i[s],c=!1,l=0;l<e.length;l++)if(r[u.id]){p.outputs.forEach((function(t){return r[t.id]=!0})),c=!0,o[p.id]=!0;break}if(c)break}}var h={};h[n.id]=!0;var f={};for(a=t.length-1;a>=0;a--)for(i=(p=t[a]).inputs,l=0;l<p.outputs.length;l++)if(h[p.outputs[l].id]){for(var s in i)h[i[s].id]=!0,f[p.id]=!0;break}var d=[];for(a=0;a<t.length;a++){var p;if(o[(p=t[a]).id]&&f[p.id]){var v={};for(var s in p.inputs){var g=p.inputs[s];r[g.id]&&(v[s]=g)}var m=Object.assign({},p);m.inputs=v,m.outputs=p.outputs,d.push(m)}}return d}(this.state.activeTape,e,a);if(!r&&0===i.length&&e.length>0)throw new Error(\"Cannot compute gradient of y=f(x) with respect to x. Make sure that the f you passed encloses all operations that lead from x to y.\");return this.tidy(\"backward\",(function(){var t,r,s={};s[a.id]=null==n?(t=a.shape,r=Z(k(t),\"float32\"),Lt.makeTensor(r,t,\"float32\")):n,function(t,e,n){for(var r=function(r){var o=e[r],a=[];if(o.outputs.forEach((function(e){var n=t[e.id];null!=n?a.push(n):a.push(null)})),null==o.gradient)throw new Error(\"Cannot compute gradient: gradient function not found for \"+o.kernelName+\".\");var i=o.gradient(a),s=function(e){if(!(e in i))throw new Error(\"Cannot backprop through input \"+e+\". Available gradients found: \"+Object.keys(i)+\".\");var r=n((function(){return i[e]()}));if(\"float32\"!==r.dtype)throw new Error(\"Error in gradient for op \"+o.kernelName+\". The gradient of input \"+e+\" must have 'float32' dtype, but has '\"+r.dtype+\"'\");var a=o.inputs[e];if(!S(r.shape,a.shape))throw new Error(\"Error in gradient for op \"+o.kernelName+\". The gradient of input '\"+e+\"' has shape '\"+r.shape+\"', which does not match the shape of the input '\"+a.shape+\"'\");if(null==t[a.id])t[a.id]=r;else{var s=t[a.id];t[a.id]=s.add(r),s.dispose()}};for(var u in o.inputs)s(u)},o=e.length-1;o>=0;o--)r(o)}(s,i,(function(t){return o.tidy(t)}));var u=e.map((function(t){return s[t.id]}));return 0===o.state.gradientDepth&&(o.state.activeTape.forEach((function(t){for(var e=0,n=t.saved;e<n.length;e++){n[e].dispose()}})),o.state.activeTape=null),{value:a,grads:u}}))},t.prototype.customGrad=function(t){var e=this;return C(X(t),(function(){return\"The f passed in customGrad(f) must be a function.\"})),function(){for(var n,r=[],o=0;o<arguments.length;o++)r[o]=arguments[o];C(r.every((function(t){return t instanceof wt})),(function(){return\"The args passed in customGrad(f)(x1, x2,...) must all be tensors\"}));var a={};return r.forEach((function(t,e){a[e]=t})),e.runKernelFunc((function(e,o){return C((n=t.apply(void 0,r.concat([o]))).value instanceof wt,(function(){return\"The function f passed in customGrad(f) must return an object where `obj.value` is a tensor\"})),C(X(n.gradFunc),(function(){return\"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function.\"})),n.value}),a,(function(t,e){var o=n.gradFunc(t,e),a=Array.isArray(o)?o:[o];C(a.length===r.length,(function(){return\"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns the same number of tensors as inputs passed to f(...).\"})),C(a.every((function(t){return t instanceof wt})),(function(){return\"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns a list of only tensors.\"}));var i={};return a.forEach((function(t,e){i[e]=function(){return t}})),i}))}},t.prototype.readSync=function(t){return this.state.tensorInfo.get(t).backend.readSync(t)},t.prototype.read=function(t){return this.state.tensorInfo.get(t).backend.read(t)},t.prototype.time=function(t){return n(this,void 0,void 0,(function(){var e,n;return r(this,(function(r){switch(r.label){case 0:return e=et(),[4,this.backend.time(t)];case 1:return(n=r.sent()).wallMs=et()-e,[2,n]}}))}))},t.prototype.track=function(t){return null!=this.state.activeScope&&(t.scopeId=this.state.activeScope.id,this.state.activeScope.track.push(t)),t},Object.defineProperty(t.prototype,\"registeredVariables\",{get:function(){return this.state.registeredVariables},enumerable:!0,configurable:!0}),t.prototype.reset=function(){for(var t in this.pendingBackendInitId++,this.state.dispose(),this.ENV.reset(),this.state=new Bt,this.registry)this.disposeRegisteredKernels(t),this.registry[t].dispose(),delete this.registry[t];this.backendName=null,this.backendInstance=null,this.pendingBackendInit=null},t.nextTensorId=0,t.nextVariableId=0,t}();var Lt=function(){var t=function(){if(null==Ot){var t=void 0;if(\"undefined\"!=typeof window)t=window;else if(\"undefined\"!=typeof global)t=global;else if(\"undefined\"!=typeof process)t=process;else{if(\"undefined\"==typeof self)throw new Error(\"Could not find a global object\");t=self}Ot=t}return Ot}();if(null==t._tfengine){var e=new o(t);t._tfengine=new Pt(e)}return function(t){s=t}(t._tfengine.ENV),yt=function(){return t._tfengine},t._tfengine}();function Wt(){return\"undefined\"!=typeof window&&null!=window.document||\"undefined\"!=typeof WorkerGlobalScope}var Ut=i();Ut.registerFlag(\"DEBUG\",(function(){return!1}),(function(t){t&&console.warn(\"Debugging mode is ON. The output of every math call will be downloaded to CPU and checked for NaNs. This significantly impacts performance.\")})),Ut.registerFlag(\"IS_BROWSER\",(function(){return Wt()})),Ut.registerFlag(\"IS_NODE\",(function(){return\"undefined\"!=typeof process&&void 0!==process.versions&&void 0!==process.versions.node})),Ut.registerFlag(\"IS_CHROME\",(function(){return\"undefined\"!=typeof navigator&&null!=navigator&&null!=navigator.userAgent&&/Chrome/.test(navigator.userAgent)&&/Google Inc/.test(navigator.vendor)})),Ut.registerFlag(\"PROD\",(function(){return!1})),Ut.registerFlag(\"TENSORLIKE_CHECK_SHAPE_CONSISTENCY\",(function(){return Ut.getBool(\"DEBUG\")})),Ut.registerFlag(\"DEPRECATION_WARNINGS_ENABLED\",(function(){return!0})),Ut.registerFlag(\"IS_TEST\",(function(){return!1}));var Vt,zt,Gt,Ht={},qt={alpha:!1,antialias:!1,premultipliedAlpha:!1,preserveDrawingBuffer:!1,depth:!1,stencil:!1,failIfMajorPerformanceCaveat:!0};function Kt(t,e){Ht[t]=e}function jt(t){t in Ht||(Ht[t]=function(t){if(1!==t&&2!==t)throw new Error(\"Cannot get WebGL rendering context, WebGL is disabled.\");var e=function(t){if(\"undefined\"!=typeof OffscreenCanvas&&2===t)return new OffscreenCanvas(300,150);if(\"undefined\"!=typeof document)return document.createElement(\"canvas\");throw new Error(\"Cannot create a canvas in this context\")}(t);if(e.addEventListener(\"webglcontextlost\",(function(e){e.preventDefault(),delete Ht[t]}),!1),1===t)return e.getContext(\"webgl\",qt)||e.getContext(\"experimental-webgl\",qt);return e.getContext(\"webgl2\",qt)}(t));var e=Ht[t];return e.isContextLost()?(delete Ht[t],jt(t)):(e.disable(e.DEPTH_TEST),e.disable(e.STENCIL_TEST),e.disable(e.BLEND),e.disable(e.DITHER),e.disable(e.POLYGON_OFFSET_FILL),e.disable(e.SAMPLE_COVERAGE),e.enable(e.SCISSOR_TEST),e.enable(e.CULL_FACE),e.cullFace(e.BACK),Ht[t])}function Xt(t,e){return[e,t]}function Yt(t){var e=k(t);return D(Math.ceil(e/4))}function $t(t,e){return[Math.max(1,Math.ceil(e/2)),Math.max(1,Math.ceil(t/2))]}function Qt(t,e){var n,r,o,a,s,u,c,l,h,f=t;return 2===i().getNumber(\"WEBGL_VERSION\")?(n=f.R32F,r=f.R16F,o=f.RGBA16F,a=f.RGBA32F,s=f.RED,u=4,c=1,l=f.HALF_FLOAT,h=f.FLOAT):(n=t.RGBA,r=t.RGBA,o=t.RGBA,a=f.RGBA,s=t.RGBA,u=4,c=4,l=null!=e?e.HALF_FLOAT_OES:null,h=t.FLOAT),{internalFormatFloat:n,internalFormatHalfFloat:r,internalFormatPackedHalfFloat:o,internalFormatPackedFloat:a,textureFormatFloat:s,downloadTextureFormat:t.RGBA,downloadUnpackNumChannels:u,defaultNumChannels:c,textureTypeHalfFloat:l,textureTypeFloat:h}}function Jt(t,e,n){var r=n();return e&&function(t){var e=t.getError();if(e!==t.NO_ERROR)throw new Error(\"WebGL Error: \"+ne(t,e))}(t),r}!function(t){t[t.DENSE=0]=\"DENSE\",t[t.SHARED_BATCH=1]=\"SHARED_BATCH\"}(Vt||(Vt={})),function(t){t[t.RENDER=0]=\"RENDER\",t[t.UPLOAD=1]=\"UPLOAD\",t[t.PIXELS=2]=\"PIXELS\",t[t.DOWNLOAD=3]=\"DOWNLOAD\"}(zt||(zt={})),function(t){t[t.UNPACKED_FLOAT16=0]=\"UNPACKED_FLOAT16\",t[t.UNPACKED_FLOAT32=1]=\"UNPACKED_FLOAT32\",t[t.PACKED_4X1_UNSIGNED_BYTE=2]=\"PACKED_4X1_UNSIGNED_BYTE\",t[t.PACKED_2X2_FLOAT32=3]=\"PACKED_2X2_FLOAT32\",t[t.PACKED_2X2_FLOAT16=4]=\"PACKED_2X2_FLOAT16\"}(Gt||(Gt={}));var Zt=5.96e-8,te=65504;function ee(t){return!!(i().getBool(\"WEBGL_RENDER_FLOAT32_ENABLED\")||0===t||Zt<Math.abs(t)&&Math.abs(t)<te)}function ne(t,e){switch(e){case t.NO_ERROR:return\"NO_ERROR\";case t.INVALID_ENUM:return\"INVALID_ENUM\";case t.INVALID_VALUE:return\"INVALID_VALUE\";case t.INVALID_OPERATION:return\"INVALID_OPERATION\";case t.INVALID_FRAMEBUFFER_OPERATION:return\"INVALID_FRAMEBUFFER_OPERATION\";case t.OUT_OF_MEMORY:return\"OUT_OF_MEMORY\";case t.CONTEXT_LOST_WEBGL:return\"CONTEXT_LOST_WEBGL\";default:return\"Unknown error code \"+e}}function re(t,e,n){return ke(t,e,(function(){return t.getExtension(n)}),'Extension \"'+n+'\" not supported on this browser.')}function oe(t,e,n){var r=ke(t,e,(function(){return t.createShader(t.VERTEX_SHADER)}),\"Unable to create vertex WebGLShader.\");if(Jt(t,e,(function(){return t.shaderSource(r,n)})),Jt(t,e,(function(){return t.compileShader(r)})),!1===t.getShaderParameter(r,t.COMPILE_STATUS))throw console.log(t.getShaderInfoLog(r)),new Error(\"Failed to compile vertex shader.\");return r}function ae(t,e,n){var r=ke(t,e,(function(){return t.createShader(t.FRAGMENT_SHADER)}),\"Unable to create fragment WebGLShader.\");if(Jt(t,e,(function(){return t.shaderSource(r,n)})),Jt(t,e,(function(){return t.compileShader(r)})),!1===t.getShaderParameter(r,t.COMPILE_STATUS))throw function(t,e){var n=ue.exec(e);if(null==n)return console.log(\"Couldn't parse line number in error: \"+e),void console.log(t);for(var r=+n[1],o=t.split(\"\\n\"),a=o.length.toString().length+2,i=o.map((function(t,e){return N((e+1).toString(),a)+t})),s=0,u=0;u<i.length;u++)s=Math.max(i[u].length,s);var c=i.slice(0,r-1),l=i.slice(r-1,r),h=i.slice(r);console.log(c.join(\"\\n\")),console.log(e.split(\"\\n\")[0]),console.log(\"%c \"+N(l[0],s),\"border:1px solid red; background-color:#e3d2d2; color:#a61717\"),console.log(h.join(\"\\n\"))}(n,t.getShaderInfoLog(r)),new Error(\"Failed to compile fragment shader.\");return r}var ie,se,ue=/ERROR: [0-9]+:([0-9]+):/g;function ce(t,e){return ke(t,e,(function(){return t.createProgram()}),\"Unable to create WebGLProgram.\")}function le(t,e,n){if(Jt(t,e,(function(){return t.linkProgram(n)})),!1===t.getProgramParameter(n,t.LINK_STATUS))throw console.log(t.getProgramInfoLog(n)),new Error(\"Failed to link vertex and fragment shaders.\")}function he(t,e,n){if(Jt(t,e,(function(){return t.validateProgram(n)})),!1===t.getProgramParameter(n,t.VALIDATE_STATUS))throw console.log(t.getProgramInfoLog(n)),new Error(\"Shader program validation failed.\")}function fe(t,e,n){var r=ke(t,e,(function(){return t.createBuffer()}),\"Unable to create WebGLBuffer\");return Jt(t,e,(function(){return t.bindBuffer(t.ARRAY_BUFFER,r)})),Jt(t,e,(function(){return t.bufferData(t.ARRAY_BUFFER,n,t.STATIC_DRAW)})),r}function de(t,e,n){var r=ke(t,e,(function(){return t.createBuffer()}),\"Unable to create WebGLBuffer\");return Jt(t,e,(function(){return t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,r)})),Jt(t,e,(function(){return t.bufferData(t.ELEMENT_ARRAY_BUFFER,n,t.STATIC_DRAW)})),r}function pe(t,e){return ke(t,e,(function(){return t.createTexture()}),\"Unable to create WebGLTexture.\")}function ve(t,e){var n=i().getNumber(\"WEBGL_MAX_TEXTURE_SIZE\");if(t<=0||e<=0){var r=\"[\"+t+\"x\"+e+\"]\";throw new Error(\"Requested texture size \"+r+\" is invalid.\")}if(t>n||e>n){r=\"[\"+t+\"x\"+e+\"]\";throw new Error(\"Requested texture size \"+r+\" greater than WebGL maximum on this browser / GPU \"+(\"[\"+n+\"x\"+n+\"]\")+\".\")}}function ge(t,e){return ke(t,e,(function(){return t.createFramebuffer()}),\"Unable to create WebGLFramebuffer.\")}function me(t,e,n,r,o,a,i,s){var u=t.getAttribLocation(n,r);return-1!==u&&(Jt(t,e,(function(){return t.bindBuffer(t.ARRAY_BUFFER,o)})),Jt(t,e,(function(){return t.vertexAttribPointer(u,a,t.FLOAT,!1,i,s)})),Jt(t,e,(function(){return t.enableVertexAttribArray(u)})),!0)}function ye(t,e,n,r){Se(t,r),Jt(t,e,(function(){return t.activeTexture(t.TEXTURE0+r)})),Jt(t,e,(function(){return t.bindTexture(t.TEXTURE_2D,n)}))}function xe(t,e,n,r){return ke(t,e,(function(){return t.getUniformLocation(n,r)}),'uniform \"'+r+'\" not present in program.')}function be(t,e,n){return t.getUniformLocation(e,n)}function we(t,e,n,r,o,a){Jt(t,e,(function(){return ye(t,e,r,a)})),Jt(t,e,(function(){return t.uniform1i(o,a)}))}function Ce(t,e,n,r){Jt(t,e,(function(){return t.bindFramebuffer(t.FRAMEBUFFER,r)})),Jt(t,e,(function(){return t.framebufferTexture2D(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.TEXTURE_2D,n,0)}))}function Ee(t,e,n){Jt(t,e,(function(){return t.bindFramebuffer(t.FRAMEBUFFER,n)})),Jt(t,e,(function(){return t.framebufferTexture2D(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.TEXTURE_2D,null,0)}))}function Re(t){var e=t.checkFramebufferStatus(t.FRAMEBUFFER);if(e!==t.FRAMEBUFFER_COMPLETE)throw new Error(\"Error binding framebuffer: \"+Ie(t,e))}function Ie(t,e){switch(e){case t.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:return\"FRAMEBUFFER_INCOMPLETE_ATTACHMENT\";case t.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:return\"FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT\";case t.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:return\"FRAMEBUFFER_INCOMPLETE_DIMENSIONS\";case t.FRAMEBUFFER_UNSUPPORTED:return\"FRAMEBUFFER_UNSUPPORTED\";default:return\"unknown error \"+e}}function ke(t,e,n,r){var o=Jt(t,e,(function(){return n()}));if(null==o)throw new Error(r);return o}function Se(t,e){var n=t.MAX_COMBINED_TEXTURE_IMAGE_UNITS-1,r=e+t.TEXTURE0;if(r<t.TEXTURE0||r>n)throw new Error(\"textureUnit must be in \"+(\"[gl.TEXTURE0, gl.TEXTURE\"+n+\"]\")+\".\")}function Ae(t,e){return void 0===e&&(e=2),k(t.slice(0,t.length-e))}function Te(t){if(0===t.length)throw Error(\"Cannot get rows and columns of an empty shape array.\");return[t.length>1?t[t.length-2]:1,t[t.length-1]]}function De(t){var e=[1,1,1];return 0===t.length||1===t.length&&1===t[0]||(e=[Ae(t)].concat(Te(t))),e}function Ne(t,e){var n;void 0===e&&(e=!1);var r=i().getNumber(\"WEBGL_MAX_TEXTURE_SIZE\");if(e&&(r*=2,1===(t=t.map((function(e,n){return n>=t.length-2?b(t[n]):t[n]}))).length&&(t=[2,t[0]])),2!==t.length){var o=M(t);t=o.newShape}var a=k(t);if(t.length<=1&&a<=r)return[1,a];if(2===t.length&&t[0]<=r&&t[1]<=r)return t;if(3===t.length&&t[0]*t[1]<=r&&t[2]<=r)return[t[0]*t[1],t[2]];if(3===t.length&&t[0]<=r&&t[1]*t[2]<=r)return[t[0],t[1]*t[2]];if(4===t.length&&t[0]*t[1]*t[2]<=r&&t[3]<=r)return[t[0]*t[1]*t[2],t[3]];if(4===t.length&&t[0]<=r&&t[1]*t[2]*t[3]<=r)return[t[0],t[1]*t[2]*t[3]];if(e){var s=Ae(t),u=2,c=2;return t.length&&(u=(n=Te(t))[0],c=n[1]),D(a=s*(u/2)*(c/2)).map((function(t){return 2*t}))}return D(a)}function Fe(t){return t%2==0}function _e(t,e){if(S(t=t.slice(-2),e=e.slice(-2)))return!0;if(!t.length||!e.length)return!0;if(0===t[0]||0===t[1]||0===e[0]||0===e[1])return!0;if(t.length!==e.length){var n=t.slice(-1)[0],r=e.slice(-1)[0];if(n===r)return!0;if(Fe(n)&&Fe(r)&&(1===t[0]||1===e[0]))return!0}return t[1]===e[1]&&Fe(t[0])&&Fe(e[0])}function Oe(t){if(null==ie){var e=jt(t);ie=e.getParameter(e.MAX_TEXTURE_SIZE)}return ie}function Me(t){if(null==se){var e=jt(t);se=e.getParameter(e.MAX_TEXTURE_IMAGE_UNITS)}return Math.min(16,se)}function Be(t){if(0===t)return 0;var e=jt(t);return Pe(e,\"EXT_disjoint_timer_query_webgl2\")&&2===t?2:Pe(e,\"EXT_disjoint_timer_query\")?1:0}function Pe(t,e){return null!=t.getExtension(e)}function Le(t){try{if(null!=jt(t))return!0}catch(t){return!1}return!1}function We(t){if(0===t)return!1;var e=jt(t);if(1===t){if(!Pe(e,\"OES_texture_float\"))return!1}else if(!Pe(e,\"EXT_color_buffer_float\"))return!1;return Ve(e)}function Ue(t){if(0===t)return!1;var e=jt(t);if(1!==t){if(Pe(e,\"EXT_color_buffer_float\"))return Ve(e);if(Pe(e,\"EXT_color_buffer_half_float\")){var n=e.getExtension(\"EXT_color_buffer_half_float\");return function(t,e){var n=Qt(t,e),r=t.createTexture();t.bindTexture(t.TEXTURE_2D,r);t.texImage2D(t.TEXTURE_2D,0,n.internalFormatHalfFloat,1,1,0,n.textureFormatFloat,n.textureTypeHalfFloat,null);var o=t.createFramebuffer();t.bindFramebuffer(t.FRAMEBUFFER,o),t.framebufferTexture2D(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.TEXTURE_2D,r,0);var a=t.checkFramebufferStatus(t.FRAMEBUFFER)===t.FRAMEBUFFER_COMPLETE;return t.bindTexture(t.TEXTURE_2D,null),t.bindFramebuffer(t.FRAMEBUFFER,null),t.deleteTexture(r),t.deleteFramebuffer(o),a}(e,n)}return!1}return!!Pe(e,\"OES_texture_float\")&&(!!Pe(e,\"WEBGL_color_buffer_float\")&&Ve(e))}function Ve(t){var e=Qt(t),n=t.createTexture();t.bindTexture(t.TEXTURE_2D,n);t.texImage2D(t.TEXTURE_2D,0,e.internalFormatFloat,1,1,0,e.textureFormatFloat,e.textureTypeFloat,null);var r=t.createFramebuffer();t.bindFramebuffer(t.FRAMEBUFFER,r),t.framebufferTexture2D(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.TEXTURE_2D,n,0);var o=t.checkFramebufferStatus(t.FRAMEBUFFER)===t.FRAMEBUFFER_COMPLETE;return t.bindTexture(t.TEXTURE_2D,null),t.bindFramebuffer(t.FRAMEBUFFER,null),t.deleteTexture(n),t.deleteFramebuffer(r),o}function ze(t){return 2===t&&null!=jt(t).fenceSync}var Ge=Object.freeze({callAndCheck:Jt,canBeRepresented:ee,getWebGLErrorMessage:ne,getExtensionOrThrow:re,createVertexShader:oe,createFragmentShader:ae,createProgram:ce,linkProgram:le,validateProgram:he,createStaticVertexBuffer:fe,createStaticIndexBuffer:de,getNumChannels:function(){return 2===i().getNumber(\"WEBGL_VERSION\")?1:4},createTexture:pe,validateTextureSize:ve,createFramebuffer:ge,bindVertexBufferToProgramAttribute:me,bindTextureUnit:ye,unbindTextureUnit:function(t,e,n){Se(t,n),Jt(t,e,(function(){return t.activeTexture(t.TEXTURE0+n)})),Jt(t,e,(function(){return t.bindTexture(t.TEXTURE_2D,null)}))},getProgramUniformLocationOrThrow:xe,getProgramUniformLocation:be,bindTextureToProgramUniformSampler:we,bindCanvasToFramebuffer:function(t,e){Jt(t,e,(function(){return t.bindFramebuffer(t.FRAMEBUFFER,null)})),Jt(t,e,(function(){return t.viewport(0,0,t.canvas.width,t.canvas.height)})),Jt(t,e,(function(){return t.scissor(0,0,t.canvas.width,t.canvas.height)}))},bindColorTextureToFramebuffer:Ce,unbindColorTextureFromFramebuffer:Ee,validateFramebuffer:Re,getFramebufferErrorMessage:Ie,getBatchDim:Ae,getRowsCols:Te,getShapeAs3D:De,getTextureShapeFromLogicalShape:Ne,isReshapeFree:_e,getWebGLMaxTextureSize:Oe,resetMaxTextureSize:function(){ie=null},resetMaxTexturesInShader:function(){se=null},getMaxTexturesInShader:Me,getWebGLDisjointQueryTimerVersion:Be,hasExtension:Pe,isWebGLVersionEnabled:Le,isCapableOfRenderingToFloatTexture:We,isDownloadFloatTextureEnabled:Ue,isWebGLFenceEnabled:ze}),He=i();function qe(){i().set(\"PROD\",!0)}function Ke(){i().set(\"DEBUG\",!0)}function je(){i().set(\"DEPRECATION_WARNINGS_ENABLED\",!1),console.warn(\"TensorFlow.js deprecation warnings have been disabled.\")}function Xe(t){i().getBool(\"DEPRECATION_WARNINGS_ENABLED\")&&console.warn(t+\" You can disable deprecation warnings with tf.disableDeprecationWarnings().\")}function Ye(){Lt.disposeVariables()}function $e(){return Lt}function Qe(){return Lt.memory()}function Je(t){return Lt.profile(t)}function Ze(t,e){return Lt.tidy(t,e)}function tn(t){_t(t).forEach((function(t){return t.dispose()}))}function en(t){return Lt.keep(t)}function nn(t){return Lt.time(t)}function rn(t){return Lt.setBackend(t)}function on(){return Lt.ready()}function an(){return Lt.backendName}function sn(t){Lt.removeBackend(t)}function un(t){return Lt.findBackend(t)}function cn(t){return Lt.findBackendFactory(t)}function ln(t,e,n){return void 0===n&&(n=1),Lt.registerBackend(t,e,n)}function hn(){return Lt.backend}function fn(t,e){i().setPlatform(t,e)}function dn(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];i().getBool(\"IS_TEST\")||console.warn.apply(console,t)}function pn(t,e){var n=t;if(V(t))return\"string\"===e?[]:[t.length];if(!Array.isArray(t))return[];for(var r=[];Array.isArray(n)||V(n)&&\"string\"!==e;)r.push(n.length),n=n[0];return Array.isArray(t)&&i().getBool(\"TENSORLIKE_CHECK_SHAPE_CONSISTENCY\")&&function t(e,n,r){if(r=r||[],!Array.isArray(e)&&!V(e))return void C(0===n.length,(function(){return\"Element arr[\"+r.join(\"][\")+\"] is a primitive, but should be an array/TypedArray of \"+n[0]+\" elements\"}));C(n.length>0,(function(){return\"Element arr[\"+r.join(\"][\")+\"] should be a primitive, but is an array of \"+e.length+\" elements\"})),C(e.length===n[0],(function(){return\"Element arr[\"+r.join(\"][\")+\"] should have \"+n[0]+\" elements, but has \"+e.length+\" elements\"}));for(var o=n.slice(1),a=0;a<e.length;++a)t(e[a],o,r.concat(a))}(t,r,[]),r}function vn(t,e,n,r){if(null!=t&&(\"numeric\"!==t&&t!==e||\"numeric\"===t&&\"string\"===e))throw new Error(\"Argument '\"+n+\"' passed to '\"+r+\"' must be \"+t+\" tensor, but got \"+e+\" tensor\")}function gn(t,e,n,r){if(void 0===r&&(r=\"numeric\"),t instanceof wt)return vn(r,t.dtype,e,n),t;var o=j(t);if(\"string\"!==o&&[\"bool\",\"int32\",\"float32\"].indexOf(r)>=0&&(o=r),vn(r,o,e,n),null==t||!V(t)&&!Array.isArray(t)&&\"number\"!=typeof t&&\"boolean\"!=typeof t&&\"string\"!=typeof t){var a=null==t?\"null\":t.constructor.name;throw new Error(\"Argument '\"+e+\"' passed to '\"+n+\"' must be a Tensor or TensorLike, but got '\"+a+\"'\")}var s=pn(t,o);V(t)||Array.isArray(t)||(t=[t]);var u=\"string\"!==o?Q(t,o,i().getBool(\"DEBUG\")):I(t,[],!0);return Lt.makeTensor(u,s,o)}function mn(t,e,n,r){if(void 0===r&&(r=\"numeric\"),!Array.isArray(t))throw new Error(\"Argument \"+e+\" passed to \"+n+\" must be a `Tensor[]` or `TensorLike[]`\");return t.map((function(t,r){return gn(t,e+\"[\"+r+\"]\",n)}),r)}function yn(t,e){for(var n=0;n<t.length;++n)if(t[t.length-n-1]!==e-1-n)return!1;return!0}function xn(t,e,n){for(var r=t.length+e.length,o=[],a=0,i=0,s=0;s<r;s++)-1===n.indexOf(s)?o.push(t[a++]):o.push(e[i++]);return o}function bn(t,e){for(var n=[],r=t.length,o=0;o<r;o++)-1===e.indexOf(o)&&n.push(t[o]);return[n,e.map((function(e){return t[e]}))]}function wn(t,e){return xn(t,e.map((function(t){return 1})),e)}function Cn(t,e,n){C(yn(e,n),(function(){return t+\" supports only inner-most axes for now. Got axes \"+e+\" and rank-\"+n+\" input.\"}))}function En(t,e){if(yn(t,e))return null;for(var n=[],r=0;r<e;++r)-1===t.indexOf(r)&&n.push(r);return t.forEach((function(t){return n.push(t)})),n}function Rn(t){return t.map((function(t,e){return[e,t]})).sort((function(t,e){return t[1]-e[1]})).map((function(t){return t[0]}))}function In(t,e){for(var n=[],r=e-t;r<e;++r)n.push(r);return n}function kn(t,e){var n=t[0].length;t.forEach((function(t,e){C(t.length===n,(function(){return\"Error in concat\"+n+\"D: rank of tensors[\"+e+\"] must be the same as the rank of the rest (\"+n+\")\"}))})),C(e>=0&&e<n,(function(){return\"Error in concat\"+n+\"D: axis must be between 0 and \"+(n-1)+\".\"}));var r=t[0];t.forEach((function(t,o){for(var a=0;a<n;a++)C(a===e||t[a]===r[a],(function(){return\"Error in concat\"+n+\"D: Shape of tensors[\"+o+\"] (\"+t+\") does not match the shape of the rest (\"+r+\") along the non-concatenated axis \"+o+\".\"}))}))}function Sn(t,e){for(var n=t[0].slice(),r=1;r<t.length;r++)n[e]+=t[r][e];return n}function An(t){var e=Object.keys(t);if(1!==e.length)throw new Error(\"Please provide an object with a single key (operation name) mapping to a function. Got an object with \"+e.length+\" keys.\");var n=e[0],r=t[n];n.endsWith(\"_\")&&(n=n.substring(0,n.length-1));var o=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];Lt.startScope(n);try{var o=r.apply(void 0,t);return o instanceof Promise&&console.error(\"Cannot return a Promise inside of tidy.\"),Lt.endScope(o),o}catch(t){throw Lt.endScope(null),t}};return Object.defineProperty(o,\"name\",{value:n,configurable:!0}),o}He.registerFlag(\"HAS_WEBGL\",(function(){return He.getNumber(\"WEBGL_VERSION\")>0})),He.registerFlag(\"WEBGL_VERSION\",(function(){return Le(2)?2:Le(1)?1:0})),He.registerFlag(\"WEBGL_BUFFER_SUPPORTED\",(function(){return 2===He.get(\"WEBGL_VERSION\")})),He.registerFlag(\"WEBGL_CPU_FORWARD\",(function(){return!0})),He.registerFlag(\"WEBGL_FORCE_F16_TEXTURES\",(function(){return!1})),He.registerFlag(\"WEBGL_PACK\",(function(){return He.getBool(\"HAS_WEBGL\")})),He.registerFlag(\"WEBGL_PACK_NORMALIZATION\",(function(){return He.getBool(\"WEBGL_PACK\")})),He.registerFlag(\"WEBGL_PACK_CLIP\",(function(){return He.getBool(\"WEBGL_PACK\")})),He.registerFlag(\"WEBGL_PACK_DEPTHWISECONV\",(function(){return!1})),He.registerFlag(\"WEBGL_PACK_BINARY_OPERATIONS\",(function(){return He.getBool(\"WEBGL_PACK\")})),He.registerFlag(\"WEBGL_PACK_UNARY_OPERATIONS\",(function(){return He.getBool(\"WEBGL_PACK\")})),He.registerFlag(\"WEBGL_PACK_ARRAY_OPERATIONS\",(function(){return He.getBool(\"WEBGL_PACK\")})),He.registerFlag(\"WEBGL_PACK_IMAGE_OPERATIONS\",(function(){return He.getBool(\"WEBGL_PACK\")})),He.registerFlag(\"WEBGL_PACK_REDUCE\",(function(){return He.getBool(\"WEBGL_PACK\")})),He.registerFlag(\"WEBGL_LAZILY_UNPACK\",(function(){return He.getBool(\"WEBGL_PACK\")})),He.registerFlag(\"WEBGL_CONV_IM2COL\",(function(){return He.getBool(\"WEBGL_PACK\")})),He.registerFlag(\"WEBGL_MAX_TEXTURE_SIZE\",(function(){return Oe(He.getNumber(\"WEBGL_VERSION\"))})),He.registerFlag(\"WEBGL_MAX_TEXTURES_IN_SHADER\",(function(){return Me(He.getNumber(\"WEBGL_VERSION\"))})),He.registerFlag(\"WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION\",(function(){var t=He.getNumber(\"WEBGL_VERSION\");return 0===t?0:Be(t)})),He.registerFlag(\"WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE\",(function(){return He.getNumber(\"WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION\")>0&&(t=navigator.userAgent||navigator.vendor||window.opera,!(/(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(t)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\\-(n|u)|c55\\/|capi|ccwa|cdm\\-|cell|chtm|cldc|cmd\\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\\-s|devi|dica|dmob|do(c|p)o|ds(12|\\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\\-|_)|g1 u|g560|gene|gf\\-5|g\\-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd\\-(m|p|t)|hei\\-|hi(pt|ta)|hp( i|ip)|hs\\-c|ht(c(\\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\\-(20|go|ma)|i230|iac( |\\-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc\\-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|\\-[a-w])|libw|lynx|m1\\-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m\\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\\-2|po(ck|rt|se)|prox|psio|pt\\-g|qa\\-a|qc(07|12|21|32|60|\\-[2-7]|i\\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\\-|oo|p\\-)|sdk\\/|se(c(\\-|0|1)|47|mc|nd|ri)|sgh\\-|shar|sie(\\-|m)|sk\\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\\-|v\\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\\-|tdg\\-|tel(i|m)|tim\\-|t\\-mo|to(pl|sh)|ts(70|m\\-|m3|m5)|tx\\-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\\-|your|zeto|zte\\-/i.test(t.substr(0,4))));var t})),He.registerFlag(\"WEBGL_RENDER_FLOAT32_CAPABLE\",(function(){return We(He.getNumber(\"WEBGL_VERSION\"))})),He.registerFlag(\"WEBGL_RENDER_FLOAT32_ENABLED\",(function(){return!He.getBool(\"WEBGL_FORCE_F16_TEXTURES\")&&He.getBool(\"WEBGL_RENDER_FLOAT32_CAPABLE\")})),He.registerFlag(\"WEBGL_DOWNLOAD_FLOAT_ENABLED\",(function(){return Ue(He.getNumber(\"WEBGL_VERSION\"))})),He.registerFlag(\"WEBGL_FENCE_API_ENABLED\",(function(){return ze(He.getNumber(\"WEBGL_VERSION\"))})),He.registerFlag(\"WEBGL_SIZE_UPLOAD_UNIFORM\",(function(){return He.getBool(\"WEBGL_RENDER_FLOAT32_ENABLED\")?4:0})),bt=Xe;var Tn=An({complex_:function(t,e){var n=gn(t,\"real\",\"complex\"),r=gn(e,\"imag\",\"complex\");return E(n.shape,r.shape,\"real and imag shapes, \"+n.shape+\" and \"+r.shape+\", must match in call to tf.complex().\"),Lt.runKernelFunc((function(t){return t.complex(n,r)}),{$real:n,$imag:r})}}),Dn=An({real_:function(t){var e=gn(t,\"input\",\"real\");return Lt.runKernelFunc((function(t){return t.real(e)}),{$input:e})}}),Nn=An({imag_:function(t){var e=gn(t,\"input\",\"imag\");return Lt.runKernelFunc((function(t){return t.imag(e)}),{$input:e})}});function Fn(t,e,n){return _n(t,e,pn(t,n),n)}function _n(t,e,n,r){if(null==r&&(r=j(t)),\"complex64\"===r)throw new Error(\"Cannot construct a complex64 tensor directly. Please use tf.complex(real, imag).\");if(!V(t)&&!Array.isArray(t)&&\"number\"!=typeof t&&\"boolean\"!=typeof t&&\"string\"!=typeof t)throw new Error(\"values passed to tensor(values) must be a number/boolean/string or an array of numbers/booleans/strings, or a TypedArray\");if(null!=e){nt(e);var o=k(e),a=k(n);C(o===a,(function(){return\"Based on the provided shape, [\"+e+\"], the tensor should have \"+o+\" values but has \"+a}));for(var s=0;s<n.length;++s){var u=n[s],c=s!==n.length-1||u!==k(e.slice(s));C(n[s]===e[s]||!c,(function(){return\"Error creating a new Tensor. Inferred shape (\"+n+\") does not match the provided shape (\"+e+\"). \"}))}}return V(t)||Array.isArray(t)||(t=[t]),e=e||n,t=\"string\"!==r?Q(t,r,i().getBool(\"DEBUG\")):I(t,[],!0),Lt.makeTensor(t,e,r)}function On(t,e){if((V(t)&&\"string\"!==e||Array.isArray(t))&&\"complex64\"!==e)throw new Error(\"Error creating a new Scalar: value must be a primitive (number|boolean|string)\");if(\"string\"===e&&V(t)&&!(t instanceof Uint8Array))throw new Error(\"When making a scalar from encoded string, the value must be `Uint8Array`.\");return _n(t,[],[],e)}function Mn(t,e){R(t);var n=pn(t,e);if(1!==n.length)throw new Error(\"tensor1d() requires values to be a flat/TypedArray\");return _n(t,null,n,e)}function Bn(t,e,n){if(R(t),null!=e&&2!==e.length)throw new Error(\"tensor2d() requires shape to have two numbers\");var r=pn(t,n);if(2!==r.length&&1!==r.length)throw new Error(\"tensor2d() requires values to be number[][] or flat/TypedArray\");if(1===r.length&&null==e)throw new Error(\"tensor2d() requires shape to be provided when `values` are a flat/TypedArray\");return _n(t,e,r,n)}function Pn(t,e,n){if(R(t),null!=e&&3!==e.length)throw new Error(\"tensor3d() requires shape to have three numbers\");var r=pn(t,n);if(3!==r.length&&1!==r.length)throw new Error(\"tensor3d() requires values to be number[][][] or flat/TypedArray\");if(1===r.length&&null==e)throw new Error(\"tensor3d() requires shape to be provided when `values` are a flat array\");return _n(t,e,r,n)}function Ln(t,e,n){if(R(t),null!=e&&4!==e.length)throw new Error(\"tensor4d() requires shape to have four numbers\");var r=pn(t,n);if(4!==r.length&&1!==r.length)throw new Error(\"tensor4d() requires values to be number[][][][] or flat/TypedArray\");if(1===r.length&&null==e)throw new Error(\"tensor4d() requires shape to be provided when `values` are a flat array\");return _n(t,e,r,n)}function Wn(t,e,n){if(R(t),null!=e&&5!==e.length)throw new Error(\"tensor5d() requires shape to have five numbers\");var r=pn(t,n);if(5!==r.length&&1!==r.length)throw new Error(\"tensor5d() requires values to be number[][][][][] or flat/TypedArray\");if(1===r.length&&null==e)throw new Error(\"tensor5d() requires shape to be provided when `values` are a flat array\");return _n(t,e,r,n)}function Un(t,e,n){if(R(t),null!=e&&6!==e.length)throw new Error(\"tensor6d() requires shape to have six numbers\");var r=pn(t,n);if(6!==r.length&&1!==r.length)throw new Error(\"tensor6d() requires values to be number[][][][][][] or flat/TypedArray\");if(1===r.length&&null==e)throw new Error(\"tensor6d() requires shape to be provided when `values` are a flat array\");return _n(t,e=e||r,r,n)}function Vn(t,e,n,r){return void 0===e&&(e=!0),Lt.makeVariable(t,e,n,r)}function zn(t,e){if(void 0===e&&(e=\"float32\"),\"complex64\"===e){var n=zn(t,\"float32\"),r=Gn(t,\"float32\");return Tn(n,r)}var o=Z(k(t),e);return Lt.makeTensor(o,t,e)}function Gn(t,e){if(void 0===e&&(e=\"float32\"),\"complex64\"===e){var n=Gn(t,\"float32\"),r=Gn(t,\"float32\");return Tn(n,r)}var o=tt(k(t),e);return Lt.makeTensor(o,t,e)}function Hn(t,e,n){return Lt.runKernelFunc((function(r){return r.fill(t,e,n)}),{})}function qn(t,e,n){if(n<=0)throw new Error(\"The number of values should be positive.\");return Lt.runKernelFunc((function(r){return r.linspace(t,e,n)}),{})}function Kn(t,e,n,r){if(void 0===n&&(n=1),void 0===r&&(r=\"float32\"),0===n)throw new Error(\"Cannot have a step of zero\");if(t===e||t<e&&n<0||e<t&&n>1)return Gn([0],r);var o=tt(Math.abs(Math.ceil((e-t)/n)),r);e<t&&1===n&&(n=-1),o[0]=t;for(var a=1;a<o.length;a++)o[a]=o[a-1]+n;return Mn(o,r)}var jn=An({onesLike_:function(t){var e=gn(t,\"x\",\"onesLike\");if(\"complex64\"===e.dtype){var n=jn(Dn(e)),r=Xn(Nn(e));return Tn(n,r)}return Lt.runKernelFunc((function(t){return t.onesLike(e)}),{x:e},(function(t,e){return{x:function(){return Xn(t)}}}),\"OnesLike\")}}),Xn=An({zerosLike_:function(t){var e=gn(t,\"x\",\"zerosLike\");return Lt.runKernelFunc((function(t){return t.zerosLike(e)}),{x:e},(function(t,e){return{x:function(){return Xn(t)}}}),\"ZerosLike\")}});var Yn=An({concat_:function(t,e){void 0===e&&(e=0),C(t.length>=1,(function(){return\"Pass at least one tensor to concat\"}));var n=mn(t,\"tensors\",\"concat\");\"complex64\"===n[0].dtype&&n.forEach((function(t){if(\"complex64\"!==t.dtype)throw new Error(\"Cannot concatenate complex64 tensors with a tensor\\n          with dtype \"+t.dtype+\". \")})),e=O(e,n[0].shape)[0];var r=Sn(n.map((function(t){return t.shape})),e);if(0===k(r))return Fn([],r);if(1===(n=n.filter((function(t){return t.size>0}))).length)return n[0];var o=n.map((function(t){return t.shape}));kn(o,e);var a=n,i={axis:e};return Lt.runKernelFunc((function(t){return t.concat(n,e)}),a,(function(t){var n=o.map((function(t){return t[e]}));return tr(t,n,e).map((function(t){return function(){return t}}))}),\"Concat\",i)}}),$n=An({concat1d_:function(t){return Yn(t,0)}}),Qn=An({concat2d_:function(t,e){return Yn(t,e)}}),Jn=An({concat3d_:function(t,e){return Yn(t,e)}}),Zn=An({concat4d_:function(t,e){return Yn(t,e)}}),tr=An({split_:function(t,e,n){void 0===n&&(n=0);var r,o=gn(t,\"x\",\"split\");return n=O(n,o.shape)[0],\"number\"==typeof e?(C(o.shape[n]%e==0,(function(){return\"Number of splits must evenly divide the axis.\"})),r=new Array(e).fill(o.shape[n]/e)):(C(o.shape[n]===e.reduce((function(t,e){return t+e})),(function(){return\"The sum of sizes must match the size of the axis dimension.\"})),r=e),Lt.runKernelFunc((function(t){return t.split(o,r,n)}),{$x:o},(function(t){return{$x:function(){return Yn(t,n)}}}))}});function er(t,e,n){return void 0===e&&(e=\"float32\"),e=e||\"float32\",nt(t),new mt(t,e,n)}function nr(t,e){void 0===e&&(e=!1),console.log(t.toString(e))}var rr=An({batchToSpaceND_:function(t,e,n){var r=gn(t,\"x\",\"batchToSpaceND\"),o=e.reduce((function(t,e){return t*e}));return C(r.rank>=1+e.length,(function(){return\"input rank is \"+r.rank+\" but should be > than blockShape.length \"+e.length})),C(n.length===e.length,(function(){return\"crops.length is \"+n.length+\" but should be equal to blockShape.length  \"+e.length})),C(r.shape[0]%o==0,(function(){return\"input tensor batch is \"+r.shape[0]+\" but is not divisible by the product of the elements of blockShape \"+e.join(\" * \")+\" === \"+o})),Lt.runKernelFunc((function(t){return t.batchToSpaceND(r,e,n)}),{$x:r},(function(t){return{$x:function(){return t.spaceToBatchND(e,n)}}}))}}),or=An({cast_:function(t,e){var n=gn(t,\"x\",\"cast\");if(!W(e))throw new Error(\"Failed to cast to unknown dtype \"+e);if(\"string\"===e&&\"string\"!==n.dtype||\"string\"!==e&&\"string\"===n.dtype)throw new Error(\"Only strings can be casted to strings\");var r={dtype:e};return Lt.runKernelFunc((function(t){return t.cast(n,e)}),{x:n},(function(t){return{x:function(){return t.clone()}}}),\"Cast\",r)}}),ar=An({cumsum_:function(t,e,n,r){void 0===e&&(e=0),void 0===n&&(n=!1),void 0===r&&(r=!1);var o=gn(t,\"x\",\"cumsum\"),a=En([e|=0],o.rank),i=o;null!=a&&(i=o.transpose(a));var s=In(1,o.rank)[0],u=Lt.runKernelFunc((function(t){return t.cumsum(i,s,n,r)}),{permutedX:i},(function(t){return{permutedX:function(){return t.cumsum(e,n,!r)}}}));return null!=a&&(u=u.transpose(a)),u}}),ir=An({depthToSpace_:function(t,e,n){void 0===n&&(n=\"NHWC\");var r=gn(t,\"x\",\"depthToSpace\"),o=\"NHWC\"===n?r.shape[1]:r.shape[2],a=\"NHWC\"===n?r.shape[2]:r.shape[3],i=\"NHWC\"===n?r.shape[3]:r.shape[1];return C(o*e>=0,(function(){return\"Negative dimension size caused by overflow when multiplying\\n      \"+o+\" and \"+e+\"  for depthToSpace with input shape\\n      \"+r.shape})),C(a*e>=0,(function(){return\"Negative dimension size caused by overflow when multiplying\\n      \"+a+\" and \"+e+\" for depthToSpace with input shape\\n          \"+r.shape})),C(i%(e*e)==0,(function(){return\"Dimension size must be evenly divisible by \"+e*e+\" but is \"+i+\" for depthToSpace with input shape \"+r.shape})),Lt.runKernelFunc((function(t){return t.depthToSpace(r,e,n)}),{$x:r})}}),sr=An({expandDims_:function(t,e){void 0===e&&(e=0);var n=gn(t,\"x\",\"expandDims\",null);C(e<=n.rank,(function(){return\"Axis must be <= rank of the tensor\"}));var r=n.shape.slice();return e<0&&(C(-(n.rank+1)<=e,(function(){return\"Axis must be in the interval [\"+-(n.rank+1)+\", \"+n.rank+\"]\"})),e=n.rank+e+1),r.splice(e,0,1),ur(n,r)}}),ur=An({reshape_:function(t,e){var n=gn(t,\"x\",\"reshape\",null);e=_(e,n.size),C(n.size===k(e),(function(){return\"new shape and old shape must have the same number of elements.\"}));var r={shape:e};return Lt.runKernelFunc((function(t){return t.reshape(n,e)}),{x:n},(function(t){return{x:function(){return t.reshape(n.shape)}}}),\"Reshape\",r)}}),cr=An({spaceToBatchND_:function(t,e,n){var r=gn(t,\"x\",\"spaceToBatchND\");return C(r.rank>=1+e.length,(function(){return\"input rank \"+r.rank+\" should be > than [blockShape] \"+e.length})),C(n.length===e.length,(function(){return\"paddings.shape[0] \"+n.length+\" must be equal to [blockShape] \"+e.length})),C(r.shape.reduce((function(t,r,o){return o>0&&o<=e.length?t&&(r+n[o-1][0]+n[o-1][1])%e[o-1]==0:t}),!0),(function(){return\"input spatial dimensions \"+r.shape.slice(1)+\" with paddings \"+n.toString()+\" must be divisible by blockShapes \"+e.toString()})),Lt.runKernelFunc((function(t){return t.spaceToBatchND(r,e,n)}),{$x:r},(function(t){return{$x:function(){return t.batchToSpaceND(e,n)}}}))}}),lr=An({squeeze_:function(t,e){var n=gn(t,\"x\",\"squeeze\");return ur(n,M(n.shape,e).newShape)}}),hr=An({stack_:function(t,e){void 0===e&&(e=0);var n=mn(t,\"tensors\",\"stack\");if(C(n.length>=1,(function(){return\"Pass at least one tensor to tf.stack\"})),1===n.length)return n[0].expandDims(e);var r=n[0].rank,o=n[0].shape,a=n[0].dtype;C(e<=r,(function(){return\"Axis must be <= rank of the tensor\"})),n.forEach((function(t){E(o,t.shape,\"All tensors passed to stack must have matching shapes\")})),n.forEach((function(t){C(a===t.dtype,(function(){return\"All tensors passed to stack must have matching dtypes\"}))}));var i=n.map((function(t){return t.expandDims(e)}));return Yn(i,e)}}),fr=An({unstack_:function(t,e){void 0===e&&(e=0),e=e||0;var n=gn(t,\"x\",\"unstack\");C(e>=-n.shape.length&&e<n.shape.length,(function(){return\"Axis = \"+e+\" is not in [-\"+n.shape.length+\", \"+n.shape.length+\")\"})),e<0&&(e+=n.shape.length);var r={axis:e};return Lt.runKernelFunc((function(t){return t.unstack(n,e)}),{x:n},(function(t){return{x:function(){return hr(t,e)}}}),\"Unpack\",r)}}),dr=function(t,e){return n(this,void 0,void 0,(function(){var n,o,a,i,s,u,c,l,h,f;return r(this,(function(r){switch(r.label){case 0:return n=gn(t,\"x\",\"setdiff1d\"),o=gn(e,\"y\",\"setdiff1d\"),C(n.dtype===o.dtype,(function(){return\"x and y should have the same dtype, but got x (\"+n.dtype+\") and y (\"+o.dtype+\").\"})),C(1===n.rank,(function(){return\"x should be 1D tensor, but got x (\"+n.shape+\").\"})),C(1===o.rank,(function(){return\"y should be 1D tensor, but got y (\"+o.shape+\").\"})),[4,n.data()];case 1:return a=r.sent(),[4,o.data()];case 2:for(i=r.sent(),s=new Set(i),u=0,h=0;h<a.length;h++)s.has(a[h])||u++;for(c=new mt([u],n.dtype),l=new mt([u],\"int32\"),h=0,f=0;h<a.length;h++)s.has(a[h])||(c.values[f]=a[h],l.values[f]=h,f++);return[2,[c.toTensor(),l.toTensor()]]}}))}))};function pr(t,e,n,r){void 0===r&&(r=!0);var o=[];if(r)(o=o.concat(e.slice(0))).push(t[0]/n),o=o.concat(t.slice(1));else{o=o.concat(t[0]);for(var a=e.length,i=0;i<a;++i)o=o.concat([t[i+1]/e[i],e[i]]);o=o.concat(t.slice(a+1))}return o}function vr(t,e,n){void 0===n&&(n=!0);var r=[];if(n){r.push(e);for(var o=e+1;o<t;++o)o<=2*e?(r.push(o),r.push(o-(e+1))):r.push(o)}else{var a=[],i=[];for(o=1;o<t;++o)o>=2*e+1||o%2==1?i.push(o):a.push(o);r.push.apply(r,a),r.push(0),r.push.apply(r,i)}return r}function gr(t,e,n,r){void 0===r&&(r=!0);var o=[];r?o.push(t[0]/n):o.push(t[0]*n);for(var a=1;a<t.length;++a)a<=e.length?r?o.push(e[a-1]*t[a]):o.push(t[a]/e[a-1]):o.push(t[a]);return o}function mr(t,e){for(var n=[0],r=0;r<e;++r)n.push(t[r][0]);return n}function yr(t,e,n){for(var r=t.slice(0,1),o=0;o<n;++o)r.push(t[o+1]-e[o][0]-e[o][1]);return r}var xr=\"Add\",br=\"AddN\",wr=\"Div\",Cr=\"FusedBatchNorm\",Er=\"SquaredDifference\",Rr=\"Square\",Ir=\"Transpose\",kr=\"NonMaxSuppressionV5\",Sr=\"BroadcastTo\",Ar=\"OneHot\",Tr=\"Identity\",Dr=\"Tile\",Nr=\"PadV2\",Fr=\"FromPixels\",_r=\"MaxPoolWithArgmax\";var Or=An({add_:function(t,e){var n,r=gn(t,\"a\",\"add\"),o=gn(e,\"b\",\"add\");n=Nt(r,o),r=n[0],o=n[1];var a={a:r,b:o};return Lt.runKernelFunc((function(t,e){var n=t.add(r,o);return e([r,o]),n}),a,null,xr)}});function Mr(t,e){for(var n=t.length,r=[],o=0;o<n;o++){var a=n-1-o,i=t[a]||1;(e[e.length-1-o]||1)>1&&1===i&&r.unshift(a)}return r}function Br(t,e){for(var n=[],r=0;r<e.length;r++){var o=t[t.length-r-1],a=e.length-r-1,i=e[a];(null==o||1===o&&i>1)&&n.unshift(a)}return n}function Pr(t,e){for(var n=[],r=Math.max(t.length,e.length),o=0;o<r;o++){var a=t[t.length-o-1];null==a&&(a=1);var i=e[e.length-o-1];if(null==i&&(i=1),1===a)n.unshift(i);else if(1===i)n.unshift(a);else{if(a!==i)throw Error(\"Operands could not be broadcast together with shapes \"+t+\" and \"+e+\".\");n.unshift(a)}}return n}var Lr=An({abs_:function(t){var e=gn(t,\"x\",\"abs\");return\"complex64\"===e.dtype?Lt.runKernelFunc((function(t){return t.complexAbs(e)}),{$x:e}):Lt.runKernelFunc((function(t,n){var r=t.abs(e);return n([e]),r}),{x:e},(function(t,e){var n=e[0];return{x:function(){return t.mul(n.toFloat().step(-1))}}}),\"Abs\")}}),Wr=An({acos_:function(t){var e=gn(t,\"x\",\"acos\");return Lt.runKernelFunc((function(t,n){var r=t.acos(e);return n([e]),r}),{$x:e},(function(t,e){var n=e[0];return{$x:function(){return t.divStrict(On(1).sub(n.toFloat().square()).sqrt()).neg()}}}))}}),Ur=An({acosh_:function(t){var e=gn(t,\"x\",\"acosh\");return Lt.runKernelFunc((function(t,n){var r=t.acosh(e);return n([e]),r}),{$x:e},(function(t,e){var n=e[0];return{$x:function(){return t.divStrict(n.toFloat().square().sub(1).sqrt())}}}))}}),Vr=An({asin_:function(t){var e=gn(t,\"x\",\"asin\");return Lt.runKernelFunc((function(t,n){var r=t.asin(e);return n([e]),r}),{$x:e},(function(t,e){var n=e[0];return{$x:function(){return t.divStrict(On(1).sub(n.toFloat().square()).sqrt())}}}))}}),zr=An({asinh_:function(t){var e=gn(t,\"x\",\"asinh\");return Lt.runKernelFunc((function(t,n){var r=t.asinh(e);return n([e]),r}),{$x:e},(function(t,e){var n=e[0];return{$x:function(){return t.divStrict(On(1).add(n.toFloat().square()).sqrt())}}}))}}),Gr=An({atan_:function(t){var e=gn(t,\"x\",\"atan\");return Lt.runKernelFunc((function(t,n){var r=t.atan(e);return n([e]),r}),{$x:e},(function(t,e){var n=e[0];return{$x:function(){return t.div(n.toFloat().square().add(1))}}}))}}),Hr=An({atanh_:function(t){var e=gn(t,\"x\",\"atanh\");return Lt.runKernelFunc((function(t,n){var r=t.atanh(e);return n([e]),r}),{$x:e},(function(t,e){var n=e[0];return{$x:function(){return t.div(On(1).sub(n.toFloat().square()))}}}))}}),qr=An({ceil_:function(t){var e=gn(t,\"x\",\"ceil\");return Lt.runKernelFunc((function(t){return t.ceil(e)}),{$x:e},(function(t){return{$x:function(){return Xn(t)}}}))}}),Kr=An({clipByValue_:function(t,e,n){var r=gn(t,\"x\",\"clipByValue\");C(e<=n,(function(){return\"Error in clip: min (\"+e+\") must be less than or equal to max (\"+n+\").\"}));var o=[r],a={min:e,max:n};return Lt.runKernelFunc((function(t,o){var a=t.clip(r,e,n);return o([r]),a}),{x:r},(function(t,r){var o=r[0];return{x:function(){return t.where(o.greaterEqual(e).logicalAnd(o.lessEqual(n)),Xn(t))}}}),\"ClipByValue\",a,o)}}),jr=An({cos_:function(t){var e=gn(t,\"x\",\"cos\"),n=[e];return Lt.runKernelFunc((function(t,n){var r=t.cos(e);return n([e]),r}),{x:e},(function(t,e){var n=e[0];return{x:function(){return n.toFloat().sin().neg().mul(t)}}}),\"Cos\",{},n)}}),Xr=An({cosh_:function(t){var e=gn(t,\"x\",\"cosh\");return Lt.runKernelFunc((function(t,n){var r=t.cosh(e);return n([e]),r}),{$x:e},(function(t,e){var n=e[0];return{$x:function(){return n.toFloat().sinh().mulStrict(t)}}}))}}),Yr=An({erf_:function(t){var e=gn(t,\"x\",\"erf\");return C(\"int32\"===e.dtype||\"float32\"===e.dtype,(function(){return\"Input dtype must be `int32` or `float32`.\"})),\"int32\"===e.dtype&&(e=e.toFloat()),Lt.runKernelFunc((function(t,n){var r=t.erf(e);return n([e]),r}),{$x:e},(function(t,e){var n=e[0];return{$x:function(){return t.mul(n.square().neg().exp().mul(2/Math.sqrt(Math.PI)))}}}))}}),$r=An({exp_:function(t){var e=gn(t,\"x\",\"exp\");return Lt.runKernelFunc((function(t,n){var r=t.exp(e);return n([r]),r}),{x:e},(function(t,e){return{x:function(){return t.mulStrict(e[0])}}}),\"Exp\",{},[],[!0])}}),Qr=An({expm1_:function(t){var e=gn(t,\"x\",\"expm1\");return Lt.runKernelFunc((function(t,n){var r=t.expm1(e);return n([e]),r}),{$x:e},(function(t,e){var n=e[0];return{$x:function(){return t.mul(n.exp())}}}))}}),Jr=An({floor_:function(t){var e=gn(t,\"x\",\"floor\");return Lt.runKernelFunc((function(t){return t.floor(e)}),{$x:e},(function(t){return{$x:function(){return Xn(t)}}}))}}),Zr=An({log_:function(t){var e=gn(t,\"x\",\"log\"),n=[e];return Lt.runKernelFunc((function(t,n){var r=t.log(e);return n([e]),r}),{x:e},(function(t,e){var n=e[0];return{x:function(){return t.div(n.toFloat())}}}),\"Log\",{},n)}}),to=An({log1p_:function(t){var e=gn(t,\"x\",\"log1p\");return Lt.runKernelFunc((function(t,n){var r=t.log1p(e);return n([e]),r}),{$x:e},(function(t,e){var n=e[0];return{$x:function(){return t.div(n.add(1))}}}))}}),eo=An({logSigmoid_:function(t){var e=gn(t,\"x\",\"logSigmoid\");return Lt.runKernelFunc((function(t,n){var r=t.softplus(e.neg()).neg();return n([e]),r}),{$x:e},(function(t,e){var n=e[0];return{$x:function(){return t.mul(n.neg().sigmoid())}}}))}}),no=An({neg_:function(t){var e=gn(t,\"x\",\"neg\"),n=[e];return Lt.runKernelFunc((function(t){return t.neg(e)}),{x:e},(function(t){return{x:function(){return t.neg()}}}),\"Neg\",{},n)}}),ro=An({reciprocal_:function(t){var e=gn(t,\"x\",\"reciprocal\");return Lt.runKernelFunc((function(t,n){var r=t.reciprocal(e);return n([e]),r}),{$x:e},(function(t,e){var n=e[0];return{$x:function(){return t.div(n.square().neg())}}}))}}),oo=An({round_:function(t){var e=gn(t,\"x\",\"round\");return Lt.runKernelFunc((function(t){return t.round(e)}),{$x:e},(function(t){return{$x:function(){return Xn(t)}}}))}}),ao=An({rsqrt_:function(t){var e=gn(t,\"x\",\"rsqrt\"),n=[e];return Lt.runKernelFunc((function(t,n){var r=t.rsqrt(e);return n([e]),r}),{x:e},(function(t,e){var n=e[0];return{x:function(){return t.div(n.pow(1.5).mul(2)).neg()}}}),\"Rsqrt\",{},n)}}),io=An({sigmoid_:function(t){var e=gn(t,\"x\",\"sigmoid\");return Lt.runKernelFunc((function(t,n){var r=t.sigmoid(e);return n([r]),r}),{x:e},(function(t,e){var n=e[0];return{x:function(){return t.mul(n.mul(On(1).sub(n)))}}}),\"Sigmoid\")}}),so=An({sign_:function(t){var e=gn(t,\"x\",\"sign\");return Lt.runKernelFunc((function(t){return t.sign(e)}),{$x:e},(function(t){return{$x:function(){return Xn(t)}}}))}}),uo=An({isNaN_:function(t){var e=gn(t,\"x\",\"isNaN\");return Lt.runKernelFunc((function(t){return t.isNaN(e)}),{$x:e},(function(t){return{$x:function(){return Xn(t)}}}))}}),co=An({isInf_:function(t){var e=gn(t,\"x\",\"isInf\");return Lt.runKernelFunc((function(t){return t.isInf(e)}),{$x:e},(function(t){return{$x:function(){return Xn(t)}}}))}}),lo=An({isFinite_:function(t){var e=gn(t,\"x\",\"isFinite\");return Lt.runKernelFunc((function(t){return t.isFinite(e)}),{$x:e},(function(t){return{$x:function(){return Xn(t)}}}))}}),ho=An({sin_:function(t){var e=gn(t,\"x\",\"sin\"),n=[e];return Lt.runKernelFunc((function(t,n){var r=t.sin(e);return n([e]),r}),{x:e},(function(t,e){var n=e[0];return{x:function(){return n.toFloat().cos().mul(t)}}}),\"Sin\",{},n)}}),fo=An({sinh_:function(t){var e=gn(t,\"x\",\"sinh\");return Lt.runKernelFunc((function(t,n){var r=t.sinh(e);return n([e]),r}),{$x:e},(function(t,e){var n=e[0];return{$x:function(){return n.toFloat().cosh().mulStrict(t)}}}))}}),po=An({softplus_:function(t){var e=gn(t,\"x\",\"softplus\");return Lt.runKernelFunc((function(t,n){var r=t.softplus(e);return n([e]),r}),{$x:e},(function(t,e){var n=e[0];return{$x:function(){return t.mul(n.sigmoid())}}}))}}),vo=An({sqrt_:function(t){var e=gn(t,\"x\",\"sqrt\");return Lt.runKernelFunc((function(t,n){var r=t.sqrt(e);return n([e]),r}),{$x:e},(function(t,e){var n=e[0];return{$x:function(){return t.div(n.toFloat().sqrt().mul(2))}}}))}}),go=An({step_:function(t,e){void 0===e&&(e=0);var n=gn(t,\"x\",\"step\");return Lt.runKernelFunc((function(t){return t.step(n,e)}),{$x:n},(function(t){return{$x:function(){return Xn(t)}}}))}}),mo=An({tan_:function(t){var e=gn(t,\"x\",\"tan\");return Lt.runKernelFunc((function(t,n){var r=t.tan(e);return n([e]),r}),{$x:e},(function(t,e){var n=e[0];return{$x:function(){return t.div(n.cos().square())}}}))}}),yo=An({tanh_:function(t){var e=gn(t,\"x\",\"tanh\");return Lt.runKernelFunc((function(t,n){var r=t.tanh(e);return n([r]),r}),{x:e},(function(t,e){var n=e[0];return{x:function(){return On(1).sub(n.square()).mulStrict(t)}}}),\"Tanh\",{},null,[!0])}});var xo=An({addStrict_:function(t,e){var n=gn(t,\"a\",\"addStrict\"),r=gn(e,\"b\",\"addStrict\");return E(n.shape,r.shape,\"Error in addStrict: \"),n.add(r)}}),bo=An({atan2_:function(t,e){var n,r=gn(t,\"a\",\"atan2\"),o=gn(e,\"b\",\"atan2\");n=Nt(r,o),r=n[0],o=n[1];var a=Pr(r.shape,o.shape);return Lt.runKernelFunc((function(t,e){var n=t.atan2(r,o);return e([r,o]),n}),{$a:r,$b:o},(function(t,e){var n=e[0],r=e[1];return{$a:function(){var e=Or(n.square(),r.square()),o=t.mul(r.div(e)),i=Br(n.shape,a);return i.length>0&&(o=o.sum(i)),o.reshape(n.shape)},$b:function(){var e=Or(n.square(),r.square()),o=no(t.mul(n.div(e))),i=Br(r.shape,a);return i.length>0&&(o=o.sum(i)),o.reshape(r.shape)}}}))}}),wo=An({divStrict_:function(t,e){var n=gn(t,\"a\",\"div\"),r=gn(e,\"b\",\"div\");return E(n.shape,r.shape,\"Error in divideStrict: \"),n.div(r)}}),Co=An({floorDiv_:function(t,e){var n,r=gn(t,\"a\",\"floorDiv\"),o=gn(e,\"b\",\"floorDiv\");n=Nt(r,o),r=n[0],o=n[1];var a=Pr(r.shape,o.shape);return Lt.runKernelFunc((function(t,e){var n=t.floorDiv(r,o);return e([r,o]),n}),{a:r,b:o},(function(t,e){var n=e[0],r=e[1];return{a:function(){var e=t.div(r.toFloat()),o=Br(n.shape,a);return o.length>0?e.sum(o).reshape(n.shape):e},b:function(){var e=t.mul(n.toFloat()),o=Br(r.shape,a);o.length>0&&(e=e.sum(o).reshape(r.shape));var i=r.square();return e.div(i.toFloat()).neg()}}}),\"FloorDiv\")}}),Eo=An({maximum_:function(t,e){var n,r=gn(t,\"a\",\"maximum\"),o=gn(e,\"b\",\"maximum\");return n=Nt(r,o),r=n[0],o=n[1],\"bool\"===r.dtype&&(r=r.toInt(),o=o.toInt()),Pr(r.shape,o.shape),Lt.runKernelFunc((function(t,e){var n=t.maximum(r,o);return e([r,o]),n}),{a:r,b:o},(function(t,e){var n=e[0],r=e[1];return{a:function(){return t.mul(n.greaterEqual(r).toFloat())},b:function(){return t.mul(n.less(r).toFloat())}}}),\"Maximum\")}}),Ro=An({maximumStrict_:function(t,e){var n=gn(t,\"a\",\"maximumStrict\"),r=gn(e,\"b\",\"maximumStrict\");return E(n.shape,r.shape,\"Error in maximumStrict: \"),n.maximum(r)}}),Io=An({minimum_:function(t,e){var n,r=gn(t,\"a\",\"minimum\"),o=gn(e,\"b\",\"minimum\");return n=Nt(r,o),r=n[0],o=n[1],\"bool\"===r.dtype&&(r=r.toInt(),o=o.toInt()),Pr(r.shape,o.shape),Lt.runKernelFunc((function(t,e){var n=t.minimum(r,o);return e([r,o]),n}),{a:r,b:o},(function(t,e){var n=e[0],r=e[1];return{a:function(){return t.mul(n.lessEqual(r).toFloat())},b:function(){return t.mul(n.greater(r).toFloat())}}}),\"Minimum\")}}),ko=An({minimumStrict_:function(t,e){var n=gn(t,\"a\",\"minimumStrict\"),r=gn(e,\"b\",\"minimumStrict\");return E(n.shape,r.shape,\"Error in minimumStrict: \"),n.minimum(r)}}),So=An({mod_:function(t,e){var n,r=gn(t,\"a\",\"mod\"),o=gn(e,\"b\",\"mod\");n=Nt(r,o),r=n[0],o=n[1];var a=Pr(r.shape,o.shape);return Lt.runKernelFunc((function(t,e){var n=t.mod(r,o);return e([r,o]),n}),{$a:r,$b:o},(function(t,e){var n=e[0],r=e[1];return{$a:function(){var e=Br(n.shape,a);return e.length>0?t.sum(e).reshape(n.shape):t},$b:function(){var e=t.mul(n.div(r).floor().neg()),o=Br(r.shape,a);return o.length>0?e.sum(o).reshape(r.shape):e}}}))}}),Ao=An({modStrict_:function(t,e){var n=gn(t,\"a\",\"modStrict\"),r=gn(e,\"b\",\"modStrict\");return E(n.shape,r.shape,\"Error in modStrict: \"),n.mod(r)}}),To=An({mul_:function(t,e){var n,r=gn(t,\"a\",\"mul\"),o=gn(e,\"b\",\"mul\");n=Nt(r,o),r=n[0],o=n[1];var a=Pr(r.shape,o.shape);return Lt.runKernelFunc((function(t,e){var n=t.multiply(r,o);return e([r,o]),n}),{a:r,b:o},(function(t,e){var n=e[0],r=e[1];return{a:function(){var e=t.mul(r.toFloat()),o=Br(n.shape,a);return o.length>0?e.sum(o).reshape(n.shape):e},b:function(){var e=t.mul(n.toFloat()),o=Br(r.shape,a);return o.length>0?e.sum(o).reshape(r.shape):e}}}),\"Mul\")}}),Do=An({mulStrict_:function(t,e){var n=gn(t,\"a\",\"mul\"),r=gn(e,\"b\",\"mul\");return E(n.shape,r.shape,\"Error in multiplyStrict: \"),n.mul(r)}}),No=An({pow_:function(t,e){var n,r=gn(t,\"base\",\"pow\"),o=gn(e,\"exp\",\"pow\");n=Nt(r,o),r=n[0],o=n[1];var a=Pr(r.shape,o.shape),i=[r,o];return Lt.runKernelFunc((function(t,e){var n=t.pow(r,o);return e([r,o,n]),n}),{a:r,b:o},(function(t,e){var n=e[0],r=e[1],o=e[2];return{a:function(){var e=r.toFloat(),o=t.mul(e.mul(n.pow(e.sub(On(1))))),i=Br(n.shape,a);return i.length>0&&(o=o.sum(i)),o.reshape(n.shape)},b:function(){var e=n.greater(0),i=n.log().where(e,Xn(n)),s=t.mul(o.mul(i)),u=Br(r.shape,a);return u.length>0&&(s=s.sum(u)),s.reshape(r.shape)}}}),\"Pow\",{},i,[!0])}}),Fo=An({powStrict_:function(t,e){return E(t.shape,e.shape,\"Error in powStrict: \"),t.pow(e)}}),_o=An({squaredDifferenceStrict_:function(t,e){var n=gn(t,\"a\",\"squaredDifferenceStrict\"),r=gn(e,\"b\",\"squaredDifferenceStrict\");return E(n.shape,r.shape,\"Error in squaredDifferenceStrict: \"),n.squaredDifference(r)}}),Oo=An({sub_:function(t,e){var n,r=gn(t,\"a\",\"sub\"),o=gn(e,\"b\",\"sub\");n=Nt(r,o),r=n[0],o=n[1];var a=Pr(r.shape,o.shape);return Lt.runKernelFunc((function(t){return t.subtract(r,o)}),{a:r,b:o},(function(t){return{a:function(){var e=t,n=Br(r.shape,a);return n.length>0&&(e=e.sum(n)),e.reshape(r.shape)},b:function(){var e=t,n=Br(o.shape,a);return n.length>0&&(e=e.sum(n)),e.neg().reshape(o.shape)}}}),\"Sub\")}}),Mo=An({subStrict_:function(t,e){var n=gn(t,\"a\",\"subStrict\"),r=gn(e,\"b\",\"subStrict\");return E(n.shape,r.shape,\"Error in subStrict: \"),n.sub(r)}});var Bo=An({div_:function(t,e){var n,r=gn(t,\"a\",\"div\"),o=gn(e,\"b\",\"div\");if(n=Nt(r,o),r=n[0],o=n[1],\"int32\"===r.dtype&&\"int32\"===o.dtype)return Co(r,o);var a={a:r,b:o};return Lt.runKernelFunc((function(t,e){var n=t.realDivide(r,o);return e([r,o]),n}),a,null,wr,{})}});function Po(t,e){if(t.rank<1)throw new Error(\"tf.gatherND() expects the input to be rank 1 or higher, but the rank was \"+t.rank+\".\");if(e.rank<1)throw new Error(\"tf.gatherND() expects the indices to be rank 1 or higher, but the rank was \"+e.rank+\".\");if(\"int32\"!==e.dtype)throw new Error(\"tf.gatherND() expects the indices to be int32 type, but the dtype was \"+e.dtype+\".\");if(e.shape[e.rank-1]>t.rank)throw new Error(\"index innermost dimension length must be <= tensor rank; saw: \"+e.shape[e.rank-1]+\" vs. \"+t.rank);if(0===t.size)throw new Error(\"Requested more than 0 entries, but input is empty. Input shape: \"+t.shape+\".\");for(var n=e.shape,r=n[n.length-1],o=1,a=0;a<n.length-1;++a)o*=n[a];var i=t.shape,s=n.slice();s.pop();var u=1;for(a=r;a<t.rank;++a)u*=i[a],s.push(i[a]);var c=$(t.shape).map((function(t){return t/u})).concat([1]).slice(0,r);return[s,o,u,c]}var Lo=Object.freeze({prepareAndValidate:Po}),Wo=30;function Uo(t){return t<=Wo?t:Y(t,Math.floor(Math.sqrt(t)))}function Vo(t,e,n){var r=e.rank>1?e.shape[e.rank-1]:1,o=e.rank>1?e.rank-1:1,a=\"Must have updates.shape = indices.shape[:batchDim] + shape[sliceDim:], got updates.shape: \"+n.shape+\", indices.shape: \"+e.shape+\", shape: \"+t+\", sliceDim: \"+r+\", and batchDim: \"+o+\".\";if(n.rank<o)throw new Error(a+\" update.rank < \"+o+\". \");if(t.length<r+(n.rank-o))throw new Error(a+\" Output shape length < \"+(r+(n.rank-o)));if(n.rank!==o+t.length-r)throw new Error(a+\" update.rank != \"+(o+t.length-r));for(var i=0;i<o;++i)if(n.shape[i]!==e.shape[i])throw new Error(a+\" updates.shape[\"+i+\"] (\"+n.shape[i]+\") != indices.shape[\"+i+\"] (\"+e.shape[i]+\").\");for(i=0;i<n.rank-o;++i)if(n.shape[i+o]!==t[i+r])throw new Error(a+\" updates.shape[\"+(i+o)+\"] (\"+n.shape[i+o]+\") != shape[\"+(i+o)+\"] (\"+t[i+o]+\")\")}function zo(t,e,n){if(e.rank<1)throw new Error(\"tf.scatterND() expects the indices to be rank 1 or higher, but the rank was \"+e.rank+\".\");if(t.rank<1)throw new Error(\"tf.scatterND() expects the updates to be rank 1 or higher, but the rank was \"+t.rank+\".\");if(\"int32\"!==e.dtype)throw new Error(\"The dtype of 'indices' should be int32, but got dtype: \"+e.dtype);if(n.length<1)throw new Error(\"Output rank must be greater or equal to 1, but got shape: \"+n);if(0===n.length){if(0===e.size)throw new Error(\"Indices specified for empty output. indices shape: \"+e.shape);if(0===t.size)throw new Error(\"Updates specified for empty output. updates shape: \"+t.shape)}Vo(n,e,t)}function Go(t,e,n){for(var r=e.shape.length,o=r>1?e.shape[r-1]:1,a=n.length,i=1,s=o;s<a;++s)i*=n[s];var u=o<1?1:o;return{sliceRank:o,numUpdates:k(e.shape)/u,sliceSize:i,strides:$(n.slice(0,o)).concat([1]),outputSize:k(n)}}var Ho=Object.freeze({validateUpdateShape:Vo,validateInput:zo,calculateShapes:Go});function qo(t,e,n){C(t.rank===e.length,(function(){return\"Error in slice\"+t.rank+\"D: Length of begin \"+e+\" must match the rank of the array (\"+t.rank+\").\"})),C(t.rank===n.length,(function(){return\"Error in slice\"+t.rank+\"D: Length of size \"+n+\" must match the rank of the array (\"+t.rank+\").\"}));for(var r=function(r){C(e[r]+n[r]<=t.shape[r],(function(){return\"Error in slice\"+t.rank+\"D: begin[\"+r+\"] + size[\"+r+\"] (\"+(e[r]+n[r])+\") would overflow input.shape[\"+r+\"] (\"+t.shape[r]+\")\"}))},o=0;o<t.rank;++o)r(o)}function Ko(t){for(var e=[],n=0;t>0;)1&t&&e.push(n),t/=2,n++;return e}function jo(t,e,n){for(var r=[],o=0;o<t.length;o++)r[o]=Math.ceil((e[o]-t[o])/n[o]);return r}function Xo(t,e,n,r,o){var a=e[o],i=n[o]||1;(t&1<<o||null==a)&&(a=i>0?Number.MIN_SAFE_INTEGER:Number.MAX_SAFE_INTEGER);var s=r[o];return a<0&&(a+=s),a=x(0,a,s-1)}function Yo(t,e,n,r,o){var a=e[o],i=n[o]||1;(t&1<<o||null==a)&&(a=i>0?Number.MAX_SAFE_INTEGER:Number.MIN_SAFE_INTEGER);var s=r[o];return a<0&&(a+=s),a=i>0?x(0,a,s):x(-1,a,s-1)}function $o(t,e,n){for(var r=n.length,o=0;o<n.length;o++)if(n[o]>1){r=o;break}for(o=r+1;o<n.length;o++)if(e[o]>0||n[o]!==t[o])return!1;return!0}function Qo(t,e){for(var n=t.length>0?t[t.length-1]:1,r=0;r<t.length-1;r++)n+=t[r]*e[r];return n}var Jo=Object.freeze({assertParamsValid:qo,maskToAxes:Ko,computeOutShape:jo,startForAxis:Xo,stopForAxis:Yo,isSliceContinous:$o,computeFlatOffset:Qo});function Zo(t){return C(X(t),(function(){return\"The f passed in grad(f) must be a function\"})),function(e,n){var r=gn(e,\"x\",\"tf.grad\",null),o=null!=n?gn(n,\"dy\",\"tf.grad\"):null;return Lt.tidy((function(){var e=Lt.gradients((function(){return t(r)}),[r],o),n=e.value,a=e.grads;return null!=o&&E(n.shape,o.shape,\"The shape of dy passed in grad(f)(x, dy) must match the shape returned by f(x)\"),aa(a),a[0]}))}}function ta(t){return C(X(t),(function(){return\"The f passed in grads(f) must be a function\"})),function(e,n){C(Array.isArray(e),(function(){return\"The args passed in grads(f)(args) must be an array of `Tensor`s or `TensorLike`s\"}));var r=mn(e,\"args\",\"tf.grads\",null),o=null!=n?gn(n,\"dy\",\"tf.grads\"):null;return Lt.tidy((function(){var e=Lt.gradients((function(){return t.apply(void 0,r)}),r,o),n=e.value,a=e.grads;return null!=o&&E(n.shape,o.shape,\"The shape of dy passed in grads(f)([x1,...], dy) must match the shape returned by f([x1,...])\"),aa(a),a}))}}function ea(t){return C(X(t),(function(){return\"The f passed in valueAndGrad(f) must be a function\"})),function(e,n){C(e instanceof wt,(function(){return\"The x passed in valueAndGrad(f)(x) must be a tensor\"})),C(null==n||n instanceof wt,(function(){return\"The dy passed in valueAndGrad(f)(x, dy) must be a tensor\"}));var r=Lt.gradients((function(){return t(e)}),[e],n),o=r.grads,a=r.value;return aa(o),{grad:o[0],value:a}}}function na(t){return C(X(t),(function(){return\"The f passed in valueAndGrads(f) must be a function\"})),function(e,n){C(Array.isArray(e)&&e.every((function(t){return t instanceof wt})),(function(){return\"The args passed in valueAndGrads(f)(args) must be array of tensors\"})),C(null==n||n instanceof wt,(function(){return\"The dy passed in valueAndGrads(f)(args, dy) must be a tensor\"}));var r=Lt.gradients((function(){return t.apply(void 0,e)}),e,n);return null!=n&&E(r.value.shape,n.shape,\"The shape of dy passed in valueAndGrads(f)([x1,...], dy) must match the shape returned by f([x1,...])\"),aa(r.grads),r}}function ra(t,e){C(X(t),(function(){return\"The f passed in variableGrads(f) must be a function\"})),C(null==e||Array.isArray(e)&&e.every((function(t){return t instanceof St})),(function(){return\"The varList passed in variableGrads(f, varList) must be an array of variables\"}));var n=null!=e;if(!n)for(var r in e=[],Lt.registeredVariables)e.push(Lt.registeredVariables[r]);var o=n?e.filter((function(t){return!t.trainable})):null,a=e.length;C((e=e.filter((function(t){return t.trainable}))).length>0,(function(){return\"variableGrads() expects at least one of the input variables to be trainable, but none of the \"+a+\" variables is trainable.\"}));var i=Lt.gradients(t,e,null,!0),s=i.value,u=i.grads;C(u.some((function(t){return null!=t})),(function(){return\"Cannot find a connection between any variable and the result of the loss function y=f(x). Please make sure the operations that use variables are inside the function f passed to minimize().\"})),C(0===s.rank,(function(){return\"The f passed in variableGrads(f) must return a scalar, but it returned a rank-\"+s.rank+\" tensor\"}));var c={};return e.forEach((function(t,e){null!=u[e]&&(c[t.name]=u[e])})),null!=o&&o.forEach((function(t){return c[t.name]=null})),{value:s,grads:c}}function oa(t){return Lt.customGrad(t)}function aa(t){if(t.filter((function(t){return null==t})).length>0)throw new Error(\"Cannot compute gradient of y=f(x) with respect to x. Make sure that\\n    the f you passed encloses all operations that lead from x to y.\")}var ia=An({softmax_:function(t,e){void 0===e&&(e=-1);var n=gn(t,\"logits\",\"softmax\",\"float32\");if(-1===e&&(e=n.rank-1),e!==n.rank-1)throw Error(\"Softmax along a non-last dimension is not yet supported. Logits was rank \"+n.rank+\" and dim was \"+e);return Lt.runKernelFunc((function(t,r){var o=t.softmax(n,e);return r([o]),o}),{logits:n},(function(t,n){var r=n[0],o=t.mul(r);return{logits:function(){return o.sub(o.sum([e],!0).mul(r))}}}),\"Softmax\",{dim:e},[],[!0])}}),sa=An({logSoftmax_:function(t,e){void 0===e&&(e=-1);var n=gn(t,\"logits\",\"logSoftmax\");if(-1===e&&(e=n.rank-1),e!==n.rank-1)throw Error(\"Log Softmax along a non-last dimension is not yet supported. Logits was rank \"+n.rank+\" and axis was \"+e);return oa((function(t,n){var r=t.max(e,!0),o=t.sub(r),a=o.toFloat().sub(o.exp().sum(e,!0).log());n([a]);return{value:a,gradFunc:function(t,n){var r=n[0].exp();return t.sub(t.sum(e,!0).mul(r))}}}))(n)}});var ua=An({transpose_:function(t,e){var n=gn(t,\"x\",\"transpose\");if(null==e&&(e=n.shape.map((function(t,e){return e})).reverse()),C(n.rank===e.length,(function(){return\"Error in transpose: rank of input \"+n.rank+\" must match length of perm \"+e+\".\"})),e.forEach((function(t){C(t>=0&&t<n.rank,(function(){return\"All entries in 'perm' must be between 0 and \"+(n.rank-1)+\" but got \"+e}))})),n.rank<=1)return n.clone();var r={perm:e};return Lt.runKernelFunc((function(t){return t.transpose(n,e)}),{x:n},null,\"Transpose\",r)}}),ca=function(){function t(t,e){this.backend=t,this.dataMover=e,this.data=new WeakMap,this.dataIdsCount=0}return t.prototype.get=function(t){return this.data.has(t)||this.dataMover.moveData(this.backend,t),this.data.get(t)},t.prototype.set=function(t,e){this.dataIdsCount++,this.data.set(t,e)},t.prototype.has=function(t){return this.data.has(t)},t.prototype.delete=function(t){return this.dataIdsCount--,this.data.delete(t)},t.prototype.numDataIds=function(){return this.dataIdsCount},t}(),la=function(){function t(){}return t.prototype.time=function(t){return ha(\"time\")},t.prototype.read=function(t){return ha(\"read\")},t.prototype.readSync=function(t){return ha(\"readSync\")},t.prototype.numDataIds=function(){return ha(\"numDataIds\")},t.prototype.disposeData=function(t){return ha(\"disposeData\")},t.prototype.write=function(t,e,n){return ha(\"write\")},t.prototype.move=function(t,e,n,r){return ha(\"move\")},t.prototype.memory=function(){return ha(\"memory\")},t.prototype.floatPrecision=function(){return ha(\"floatPrecision\")},t.prototype.epsilon=function(){return 32===this.floatPrecision()?1e-7:1e-4},t.prototype.batchMatMul=function(t,e,n,r){return ha(\"batchMatMul\")},t.prototype.fusedBatchMatMul=function(t){t.a,t.b,t.transposeA,t.transposeB,t.bias,t.activation,t.preluActivationWeights;return ha(\"fusedBatchMatMul\")},t.prototype.slice=function(t,e,n){return ha(\"slice\")},t.prototype.stridedSlice=function(t,e,n,r){return ha(\"stridedSlice\")},t.prototype.unstack=function(t,e){return ha(\"unstack\")},t.prototype.reverse=function(t,e){return ha(\"reverse\")},t.prototype.concat=function(t,e){return ha(\"concat\")},t.prototype.neg=function(t){return ha(\"neg\")},t.prototype.add=function(t,e){return ha(\"add\")},t.prototype.addN=function(t){return ha(\"addN\")},t.prototype.subtract=function(t,e){return ha(\"subtract\")},t.prototype.multiply=function(t,e){return ha(\"multiply\")},t.prototype.realDivide=function(t,e){return ha(\"realDivide\")},t.prototype.floorDiv=function(t,e){return ha(\"floorDiv\")},t.prototype.sum=function(t,e){return ha(\"sum\")},t.prototype.prod=function(t,e){return ha(\"prod\")},t.prototype.unsortedSegmentSum=function(t,e,n){return ha(\"unsortedSegmentSum\")},t.prototype.argMin=function(t,e){return ha(\"argMin\")},t.prototype.argMax=function(t,e){return ha(\"argMax\")},t.prototype.equal=function(t,e){return ha(\"equal\")},t.prototype.notEqual=function(t,e){return ha(\"notEqual\")},t.prototype.less=function(t,e){return ha(\"less\")},t.prototype.lessEqual=function(t,e){return ha(\"lessEqual\")},t.prototype.greater=function(t,e){return ha(\"greater\")},t.prototype.greaterEqual=function(t,e){return ha(\"greaterEqual\")},t.prototype.logicalNot=function(t){return ha(\"logicalNot\")},t.prototype.logicalAnd=function(t,e){return ha(\"logicalAnd\")},t.prototype.logicalOr=function(t,e){return ha(\"logicalOr\")},t.prototype.where=function(t){return ha(\"where\")},t.prototype.select=function(t,e,n){return ha(\"select\")},t.prototype.topk=function(t,e,n){return ha(\"topk\")},t.prototype.min=function(t,e){return ha(\"min\")},t.prototype.minimum=function(t,e){return ha(\"minimum\")},t.prototype.mod=function(t,e){return ha(\"mod\")},t.prototype.max=function(t,e){return ha(\"max\")},t.prototype.maximum=function(t,e){return ha(\"maximum\")},t.prototype.all=function(t,e){return ha(\"all\")},t.prototype.any=function(t,e){return ha(\"any\")},t.prototype.squaredDifference=function(t,e){return ha(\"squaredDifference\")},t.prototype.ceil=function(t){return ha(\"ceil\")},t.prototype.floor=function(t){return ha(\"floor\")},t.prototype.round=function(t){return ha(\"round\")},t.prototype.sign=function(t){return ha(\"sign\")},t.prototype.isNaN=function(t){return ha(\"isNaN\")},t.prototype.isInf=function(t){return ha(\"isInf\")},t.prototype.isFinite=function(t){return ha(\"isFinite\")},t.prototype.pow=function(t,e){return ha(\"pow\")},t.prototype.exp=function(t){return ha(\"exp\")},t.prototype.expm1=function(t){return ha(\"expm1\")},t.prototype.softmax=function(t,e){return ha(\"softmax\")},t.prototype.log=function(t){return ha(\"log\")},t.prototype.log1p=function(t){return ha(\"log1p\")},t.prototype.sqrt=function(t){return ha(\"sqrt\")},t.prototype.rsqrt=function(t){return ha(\"rsqrt\")},t.prototype.square=function(t){return ha(\"square\")},t.prototype.reciprocal=function(t){return ha(\"reciprocal\")},t.prototype.relu=function(t){return ha(\"relu\")},t.prototype.relu6=function(t){return ha(\"relu6\")},t.prototype.prelu=function(t,e){return ha(\"prelu\")},t.prototype.elu=function(t){return ha(\"elu\")},t.prototype.eluDer=function(t,e){return ha(\"eluDer\")},t.prototype.selu=function(t){return ha(\"selu\")},t.prototype.int=function(t){return ha(\"int\")},t.prototype.clip=function(t,e,n){return ha(\"clip\")},t.prototype.abs=function(t){return ha(\"abs\")},t.prototype.complexAbs=function(t){return ha(\"complexAbs\")},t.prototype.sigmoid=function(t){return ha(\"sigmoid\")},t.prototype.softplus=function(t){return ha(\"softplus\")},t.prototype.sin=function(t){return ha(\"sin\")},t.prototype.cos=function(t){return ha(\"cos\")},t.prototype.tan=function(t){return ha(\"tan\")},t.prototype.asin=function(t){return ha(\"asin\")},t.prototype.acos=function(t){return ha(\"acos\")},t.prototype.atan=function(t){return ha(\"atan\")},t.prototype.atan2=function(t,e){return ha(\"atan2\")},t.prototype.sinh=function(t){return ha(\"sinh\")},t.prototype.cosh=function(t){return ha(\"cosh\")},t.prototype.tanh=function(t){return ha(\"tanh\")},t.prototype.asinh=function(t){return ha(\"asinh\")},t.prototype.acosh=function(t){return ha(\"acosh\")},t.prototype.atanh=function(t){return ha(\"atanh\")},t.prototype.erf=function(t){return ha(\"erf\")},t.prototype.step=function(t,e){return ha(\"step\")},t.prototype.fusedConv2d=function(t){t.input,t.filter,t.convInfo,t.bias,t.activation,t.preluActivationWeights;return ha(\"fusedConv2d\")},t.prototype.conv2d=function(t,e,n){return ha(\"conv2d\")},t.prototype.conv2dDerInput=function(t,e,n){return ha(\"conv2dDerInput\")},t.prototype.conv2dDerFilter=function(t,e,n){return ha(\"conv2dDerFilter\")},t.prototype.fusedDepthwiseConv2D=function(t){t.input,t.filter,t.convInfo,t.bias,t.activation,t.preluActivationWeights;return ha(\"fusedDepthwiseConv2D\")},t.prototype.depthwiseConv2D=function(t,e,n){return ha(\"depthwiseConv2D\")},t.prototype.depthwiseConv2DDerInput=function(t,e,n){return ha(\"depthwiseConv2DDerInput\")},t.prototype.depthwiseConv2DDerFilter=function(t,e,n){return ha(\"depthwiseConv2DDerFilter\")},t.prototype.conv3d=function(t,e,n){return ha(\"conv3d\")},t.prototype.conv3dDerInput=function(t,e,n){return ha(\"conv3dDerInput\")},t.prototype.conv3dDerFilter=function(t,e,n){return ha(\"conv3dDerFilter\")},t.prototype.maxPool=function(t,e){return ha(\"maxPool\")},t.prototype.maxPoolBackprop=function(t,e,n,r){return ha(\"maxPoolBackprop\")},t.prototype.avgPool=function(t,e){return ha(\"avgPool\")},t.prototype.avgPoolBackprop=function(t,e,n){return ha(\"avgPoolBackprop\")},t.prototype.avgPool3d=function(t,e){return ha(\"avgPool3d\")},t.prototype.avgPool3dBackprop=function(t,e,n){return ha(\"avgPool3dBackprop\")},t.prototype.maxPool3d=function(t,e){return ha(\"maxPool3d\")},t.prototype.maxPool3dBackprop=function(t,e,n,r){return ha(\"maxPool3dBackprop\")},t.prototype.reshape=function(t,e){return ha(\"reshape\")},t.prototype.cast=function(t,e){return ha(\"cast\")},t.prototype.tile=function(t,e){return ha(\"tile\")},t.prototype.pad=function(t,e,n){return ha(\"pad\")},t.prototype.transpose=function(t,e){return ha(\"transpose\")},t.prototype.gather=function(t,e,n){return ha(\"gather\")},t.prototype.gatherND=function(t,e){return ha(\"gatherND\")},t.prototype.scatterND=function(t,e,n){return ha(\"scatterND\")},t.prototype.batchToSpaceND=function(t,e,n){return ha(\"batchToSpaceND\")},t.prototype.spaceToBatchND=function(t,e,n){return ha(\"spaceToBatchND\")},t.prototype.resizeBilinear=function(t,e,n,r){return ha(\"resizeBilinear\")},t.prototype.resizeBilinearBackprop=function(t,e,n){return ha(\"resizeBilinearBackprop\")},t.prototype.resizeNearestNeighbor=function(t,e,n,r){return ha(\"resizeNearestNeighbor\")},t.prototype.resizeNearestNeighborBackprop=function(t,e,n){return ha(\"resizeNearestNeighborBackprop\")},t.prototype.batchNormalization=function(t,e,n,r,o,a){return ha(\"batchNormalization\")},t.prototype.localResponseNormalization4D=function(t,e,n,r,o){return ha(\"localResponseNormalization4D\")},t.prototype.LRNGrad=function(t,e,n,r,o,a,i){return ha(\"LRNGrad\")},t.prototype.multinomial=function(t,e,n,r){return ha(\"multinomial\")},t.prototype.oneHot=function(t,e,n,r){return ha(\"oneHot\")},t.prototype.cumsum=function(t,e,n,r){return ha(\"cumsum\")},t.prototype.nonMaxSuppression=function(t,e,n,r,o){return ha(\"nonMaxSuppression\")},t.prototype.fft=function(t){return ha(\"fft\")},t.prototype.ifft=function(t){return ha(\"ifft\")},t.prototype.complex=function(t,e){return ha(\"complex\")},t.prototype.real=function(t){return ha(\"real\")},t.prototype.imag=function(t){return ha(\"imag\")},t.prototype.cropAndResize=function(t,e,n,r,o,a){return ha(\"cropAndResize\")},t.prototype.depthToSpace=function(t,e,n){return ha(\"depthToSpace\")},t.prototype.split=function(t,e,n){return ha(\"split\")},t.prototype.sparseToDense=function(t,e,n,r){return ha(\"sparseToDense\")},t.prototype.diag=function(t){return ha(\"diag\")},t.prototype.fill=function(t,e,n){return ha(\"fill\")},t.prototype.onesLike=function(t){return ha(\"onesLike\")},t.prototype.zerosLike=function(t){return ha(\"zerosLike\")},t.prototype.linspace=function(t,e,n){return ha(\"linspace\")},t.prototype.dispose=function(){return ha(\"dispose\")},t}();function ha(t){throw new Error(\"'\"+t+\"' not yet implemented or not found in the registry. Did you forget to import the kernel?\")}function fa(t,e,n,r,o,a,i){void 0===i&&(i=\"channelsLast\");var s,u=ma(e),c=u[0],l=u[1];if(\"channelsLast\"===i)s=[c,l,t[3],t[3]];else{if(\"channelsFirst\"!==i)throw new Error(\"Unknown dataFormat \"+i);s=[c,l,t[1],t[1]]}return pa(t,s,n,r,o,a,!1,i)}function da(t,e,n,r,o,a,i){void 0===i&&(i=\"NDHWC\");var s,u,c=ya(e),l=c[0],h=c[1],f=c[2];if(\"NDHWC\"===i)u=\"channelsLast\",s=[l,h,f,t[4],t[4]];else{if(\"NCDHW\"!==i)throw new Error(\"Unknown dataFormat \"+i);u=\"channelsFirst\",s=[l,h,f,t[1],t[1]]}return va(t,s,n,r,o,!1,u,a)}function pa(t,e,n,r,o,a,i,s){void 0===i&&(i=!1),void 0===s&&(s=\"channelsLast\");var u=[-1,-1,-1,-1],c=u[0],l=u[1],h=u[2],f=u[3];if(\"channelsLast\"===s)c=t[0],l=t[1],h=t[2],f=t[3];else{if(\"channelsFirst\"!==s)throw new Error(\"Unknown dataFormat \"+s);c=t[0],f=t[1],l=t[2],h=t[3]}var d,p=e[0],v=e[1],g=e[3],m=ma(n),y=m[0],x=m[1],b=ma(r),w=b[0],E=b[1],R=xa(p,w),I=xa(v,E),k=function(t,e,n,r,o,a,i,s){var u,c,l;if(\"number\"==typeof t){u={top:t,bottom:t,left:t,right:t,type:0===t?\"VALID\":\"NUMBER\"};var h=function(t,e,n,r,o){null==r&&(r=ga(t,e,n));var a=t[0],i=t[1],s=ba((a-e+2*r)/n+1,o);C(A(s),(function(){return\"The output # of rows (\"+s+\") must be an integer. Change the stride and/or zero pad parameters\"}));var u=ba((i-e+2*r)/n+1,o);return C(A(u),(function(){return\"The output # of columns (\"+u+\") must be an integer. Change the stride and/or zero pad parameters\"})),[s,u]}([e,n],a,r,t,s);c=h[0],l=h[1]}else if(\"same\"===t){c=Math.ceil(e/r),l=Math.ceil(n/o);var f=Math.max(0,(c-1)*r+a-e),d=Math.max(0,(l-1)*o+i-n),p=Math.floor(f/2),v=f-p,g=Math.floor(d/2);u={top:p,bottom:v,left:g,right:d-g,type:\"SAME\"}}else{if(\"valid\"!==t)throw Error(\"Unknown padding parameter: \"+t);u={top:0,bottom:0,left:0,right:0,type:\"VALID\"},c=Math.ceil((e-a+1)/r),l=Math.ceil((n-i+1)/o)}return{padInfo:u,outHeight:c,outWidth:l}}(o,l,h,y,x,R,I,a),S=k.padInfo,T=k.outHeight,D=k.outWidth,N=i?g*f:g;return\"channelsFirst\"===s?d=[c,N,T,D]:\"channelsLast\"===s&&(d=[c,T,D,N]),{batchSize:c,dataFormat:s,inHeight:l,inWidth:h,inChannels:f,outHeight:T,outWidth:D,outChannels:N,padInfo:S,strideHeight:y,strideWidth:x,filterHeight:p,filterWidth:v,effectiveFilterHeight:R,effectiveFilterWidth:I,dilationHeight:w,dilationWidth:E,inShape:t,outShape:d,filterShape:e}}function va(t,e,n,r,o,a,i,s){void 0===a&&(a=!1),void 0===i&&(i=\"channelsLast\");var u=[-1,-1,-1,-1,-1],c=u[0],l=u[1],h=u[2],f=u[3],d=u[4];if(\"channelsLast\"===i)c=t[0],l=t[1],h=t[2],f=t[3],d=t[4];else{if(\"channelsFirst\"!==i)throw new Error(\"Unknown dataFormat \"+i);c=t[0],d=t[1],l=t[2],h=t[3],f=t[4]}var p,v=e[0],g=e[1],m=e[2],y=e[4],x=ya(n),b=x[0],w=x[1],E=x[2],R=ya(r),I=R[0],k=R[1],S=R[2],T=xa(v,I),D=xa(g,k),N=xa(m,S),F=function(t,e,n,r,o,a,i,s,u,c,l){var h,f,d,p;if(\"number\"==typeof t){h={top:t,bottom:t,left:t,right:t,front:t,back:t,type:0===t?\"VALID\":\"NUMBER\"};var v=function(t,e,n,r,o,a){null==o&&(o=ga(t,e,r));var i=t[0],s=t[1],u=t[2],c=ba((i-e+2*o)/r+1,a);C(A(c),(function(){return\"The output # of depths (\"+c+\") must be an integer. Change the stride and/or zero pad parameters\"}));var l=ba((s-e+2*o)/r+1,a);C(A(l),(function(){return\"The output # of rows (\"+l+\") must be an integer. Change the stride and/or zero pad parameters\"}));var h=ba((u-e+2*o)/r+1,a);return C(A(h),(function(){return\"The output # of columns (\"+h+\") must be an integer. Change the stride and/or zero pad parameters\"})),[c,l,h,n]}([e,n,r,1],s,1,o,t,l);f=v[0],d=v[1],p=v[2]}else if(\"same\"===t){f=Math.ceil(e/o),d=Math.ceil(n/a),p=Math.ceil(r/i);var g=(f-1)*o+s-e,m=(d-1)*a+u-n,y=(p-1)*i+c-r,x=Math.floor(g/2),b=g-x,w=Math.floor(m/2),E=m-w,R=Math.floor(y/2);h={top:w,bottom:E,left:R,right:y-R,front:x,back:b,type:\"SAME\"}}else{if(\"valid\"!==t)throw Error(\"Unknown padding parameter: \"+t);h={top:0,bottom:0,left:0,right:0,front:0,back:0,type:\"VALID\"},f=Math.ceil((e-s+1)/o),d=Math.ceil((n-u+1)/a),p=Math.ceil((r-c+1)/i)}return{padInfo:h,outDepth:f,outHeight:d,outWidth:p}}(o,l,h,f,b,w,E,T,D,N,s),_=F.padInfo,O=F.outDepth,M=F.outHeight,B=F.outWidth,P=a?y*d:y;return\"channelsFirst\"===i?p=[c,P,O,M,B]:\"channelsLast\"===i&&(p=[c,O,M,B,P]),{batchSize:c,dataFormat:i,inDepth:l,inHeight:h,inWidth:f,inChannels:d,outDepth:O,outHeight:M,outWidth:B,outChannels:P,padInfo:_,strideDepth:b,strideHeight:w,strideWidth:E,filterDepth:v,filterHeight:g,filterWidth:m,effectiveFilterDepth:T,effectiveFilterHeight:D,effectiveFilterWidth:N,dilationDepth:I,dilationHeight:k,dilationWidth:S,inShape:t,outShape:p,filterShape:e}}function ga(t,e,n,r){void 0===r&&(r=1);var o=xa(e,r);return Math.floor((t[0]*(n-1)-n+o)/2)}function ma(t){return\"number\"==typeof t?[t,t,t]:2===t.length?[t[0],t[1],1]:t}function ya(t){return\"number\"==typeof t?[t,t,t]:t}function xa(t,e){return e<=1?t:t+(t-1)*(e-1)}function ba(t,e){if(!e)return t;switch(e){case\"round\":return Math.round(t);case\"ceil\":return Math.ceil(t);case\"floor\":return Math.floor(t);default:throw new Error(\"Unknown roundingMode \"+e)}}function wa(t){var e=ma(t),n=e[0],r=e[1],o=e[2];return 1===n&&1===r&&1===o}function Ca(t,e){return wa(t)||wa(e)}function Ea(t){if(\"NHWC\"===t)return\"channelsLast\";if(\"NCHW\"===t)return\"channelsFirst\";throw new Error(\"Unknown dataFormat \"+t)}function Ra(t,e,n){if(\"complex64\"===e){if(\"complex64\"===t.dtype)return t.clone();var r=Gn(t.shape),o=t.toFloat(),a=n.complex(o,r);return r.dispose(),o.dispose(),a}if(!U(t.dtype,e))return Lt.makeTensorFromDataId(t.dataId,t.shape,e);if(\"complex64\"===t.dtype){var i=n.real(t);a=i.cast(e);return i.dispose(),a}if(\"int32\"===e)return n.int(t);if(\"bool\"===e){var s=On(0,t.dtype);a=n.notEqual(t,s);return s.dispose(),a}throw new Error(\"Error in Cast: failed to cast \"+t.dtype+\" to \"+e)}function Ia(t,e){return Lt.makeTensorFromDataId(t.dataId,e,t.dtype)}function ka(t,e,n){var r=(e-t)/(n-1),o=tt(n,\"float32\");o[0]=t;for(var a=1;a<o.length;a++)o[a]=o[a-1]+r;return Mn(o,\"float32\")}var Sa=Object.freeze({castTensor:Ra,reshapeTensor:Ia,linspaceImpl:ka,upcastType:Tt,axesAreInnerMostDims:yn,combineLocations:xn,computeOutAndReduceShapes:bn,expandShapeToKeepDim:wn,assertAxesAreInnerMostDims:Cn,getAxesPermutation:En,getUndoAxesPermutation:Rn,getInnerMostAxes:In,getBroadcastDims:Mr,getReductionAxes:Br,assertAndGetBroadcastShape:Pr,assertParamsConsistent:kn,computeOutShape:Sn,computePool2DInfo:fa,computePool3DInfo:da,computeConv2DInfo:pa,computeConv3DInfo:va,computeDefaultPad:ga,tupleValuesAreOne:wa,eitherStridesOrDilationsAreOne:Ca,convertConv2DDataFormat:Ea,PARALLELIZE_THRESHOLD:Wo,computeOptimalWindowSize:Uo});function Aa(t,e){if(t.length!==e.length)throw new Error(\"Cannot merge real and imag arrays of different lengths. real:\"+t.length+\", imag: \"+e.length+\".\");for(var n=new Float32Array(2*t.length),r=0;r<n.length;r+=2)n[r]=t[r/2],n[r+1]=e[r/2];return n}function Ta(t,e){return{real:t[2*e],imag:t[2*e+1]}}function Da(t,e,n,r){t[2*r]=e,t[2*r+1]=n}function Na(t,e,n){var r=(n?2:-2)*Math.PI*(t/e);return{real:Math.cos(r),imag:Math.sin(r)}}function Fa(t,e,n){var r=function(t,e,n){return function(t,e,n){var r=0,o=t.length,a=0,i=!1;for(;r<o;){var s=n(e,t[a=r+(o-r>>>1)]);s>0?r=a+1:(o=a,i=!s)}return i?r:-r-1}(t,e,n||_a)}(t,e,n),o=r<0?-(r+1):r;t.splice(o,0,e)}function _a(t,e){return t>e?1:t<e?-1:0}function Oa(t,e,n,r,o){return Ba(t,e,n,r,o,0).selectedIndices}function Ma(t,e,n,r,o,a){var i=Ba(t,e,n,r,o,a,!0);return i.numValidOutputs.dispose(),{selectedIndices:i.selectedIndices,selectedScores:i.selectedScores}}function Ba(t,e,n,r,o,a,i,s){void 0===i&&(i=!1),void 0===s&&(s=!1);for(var u=Array.from(e).map((function(t,e){return{score:t,boxIndex:e,suppressBeginIndex:0}})).filter((function(t){return t.score>o})).sort(Wa),c=a>0?-.5/a:0,l=[],h=[];l.length<n&&u.length>0;){var f=u.pop(),d=f.score,p=f.boxIndex,v=f.suppressBeginIndex;if(d<o)break;for(var g=!1,m=l.length-1;m>=v;--m){var y=Pa(t,p,l[m]);if(y>=r){g=!0;break}if(f.score=f.score*La(r,c,y),f.score<=o)break}f.suppressBeginIndex=l.length,g||(f.score===d?(l.push(p),h.push(f.score)):f.score>o&&Fa(u,f,Wa))}var x=l.length;return s&&(l.fill(0,x),h.fill(0,x)),{selectedIndices:Mn(l,\"int32\"),selectedScores:Mn(h,\"float32\"),numValidOutputs:On(x,\"int32\")}}function Pa(t,e,n){var r=t.subarray(4*e,4*e+4),o=t.subarray(4*n,4*n+4),a=Math.min(r[0],r[2]),i=Math.min(r[1],r[3]),s=Math.max(r[0],r[2]),u=Math.max(r[1],r[3]),c=Math.min(o[0],o[2]),l=Math.min(o[1],o[3]),h=Math.max(o[0],o[2]),f=Math.max(o[1],o[3]),d=(s-a)*(u-i),p=(h-c)*(f-l);if(d<=0||p<=0)return 0;var v=Math.max(a,c),g=Math.max(i,l),m=Math.min(s,h),y=Math.min(u,f),x=Math.max(m-v,0)*Math.max(y-g,0);return x/(d+p-x)}function La(t,e,n){var r=Math.exp(e*n*n);return n<=t?r:0}function Wa(t,e){return t.score-e.score||t.score===e.score&&e.boxIndex-t.boxIndex}function Ua(t,e,n){var r=new Array(t.rank).fill(0),o=t.shape.slice();return e.map((function(e){o[n]=e;var a=t.slice(r,o);return r[n]+=e,a}))}function Va(t,e){for(var n=new Array(t.rank),r=0;r<n.length;r++)n[r]=t.shape[r]*e[r];var o=er(n,t.dtype);for(r=0;r<o.values.length;++r){for(var a=o.indexToLoc(r),i=new Array(t.rank),s=0;s<i.length;s++)i[s]=a[s]%t.shape[s];var u=t.locToIndex(i);o.values[r]=t.values[u]}return o.toTensor()}function za(t,e,n,r,o){for(var a=e[e.length-1],i=[t.length/a,a],s=i[0],u=i[1],c=B(n,s*r),l=B(\"int32\",s*r),h=0;h<s;h++){for(var f=h*u,d=t.subarray(f,f+u),p=[],v=0;v<d.length;v++)p.push({value:d[v],index:v});p.sort((function(t,e){return e.value-t.value}));var g=h*r,m=c.subarray(g,g+r),y=l.subarray(g,g+r);for(v=0;v<r;v++)m[v]=p[v].value,y[v]=p[v].index}var x=e.slice();return x[x.length-1]=r,[Fn(c,x,n),Fn(l,x,\"int32\")]}function Ga(t,e){for(var n=[],r=0;r<e.length;r++)e[r]&&n.push(r);var o=er(t,\"int32\"),a=er([n.length,t.length],\"int32\");for(r=0;r<n.length;r++){var i=o.indexToLoc(n[r]),s=r*t.length;a.values.set(i,s)}return a.toTensor()}var Ha=function(t,e){this.outputShape=[],this.outputShape=t,this.variableNames=e.map((function(t,e){return\"T\"+e}));var n=[];this.variableNames.forEach((function(t){n.push(\"float v\"+t+\" = get\"+t+\"AtOutCoords();\")}));var r=this.variableNames.map((function(t){return\"v\"+t})).join(\" + \");this.userCode=\"\\n      void main() {\\n        \"+n.join(\"\\n        \")+\"\\n\\n        float result = \"+r+\";\\n        setOutput(result);\\n      }\\n    \"},qa=function(t,e){this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t,this.variableNames=e.map((function(t,e){return\"T\"+e}));var n=[];this.variableNames.forEach((function(t){n.push(\"vec4 v\"+t+\" = get\"+t+\"AtOutCoords();\")}));var r=this.variableNames.map((function(t){return\"v\"+t})).join(\" + \");this.userCode=\"\\n      void main() {\\n        \"+n.join(\"\\n        \")+\"\\n\\n        vec4 result = \"+r+\";\\n        setOutput(result);\\n      }\\n    \"},Ka=function(t,e,n){this.variableNames=[\"A\"];var r=t.windowSize,o=t.batchSize,a=t.inSize,i=Math.ceil(a/r);n||this.variableNames.push(\"bestIndicesA\"),this.outputShape=[o,i];var s=\"max\"===e?\">\":\"<\",u=n?\"inOffset + i;\":\"round(getBestIndicesA(batch, inOffset + i));\";this.userCode=\"\\n      void main() {\\n        ivec2 coords = getOutputCoords();\\n        int batch = coords[0];\\n        int outIdx = coords[1];\\n        int inOffset = outIdx * \"+r+\";\\n\\n        int bestIndex = inOffset;\\n        float bestValue = getA(batch, bestIndex);\\n\\n        for (int i = 0; i < \"+r+\"; i++) {\\n          int inIdx = \"+u+\";\\n          float candidate = getA(batch, inIdx);\\n          if (candidate \"+s+\" bestValue) {\\n            bestValue = candidate;\\n            bestIndex = inIdx;\\n          }\\n        }\\n        setOutput(float(bestIndex));\\n      }\\n    \"};function ja(t,e){return[\"x\",\"y\",\"z\",\"w\",\"u\",\"v\"].slice(0,e).map((function(e){return t+\".\"+e}))}function Xa(t,e){return 1===e?[t]:ja(t,e)}function Ya(){var t,e,n,r,o,a,s,u,c,l;return 2===i().getNumber(\"WEBGL_VERSION\")?(t=\"#version 300 es\",e=\"in\",n=\"out\",r=\"in\",o=\"texture\",a=\"outputColor\",s=\"out vec4 outputColor;\",u=\"\\n      bool isnan_custom(float val) {\\n        return (val > 0.0 || val < 0.0) ? false : val != 0.0;\\n      }\\n\\n      bvec4 isnan_custom(vec4 val) {\\n        return bvec4(isnan_custom(val.x),\\n          isnan_custom(val.y), isnan_custom(val.z), isnan_custom(val.w));\\n      }\\n\\n      #define isnan(value) isnan_custom(value)\\n    \",c=\"\",l=\"\\n      #define round(value) newRound(value)\\n      int newRound(float value) {\\n        return int(floor(value + 0.5));\\n      }\\n\\n      ivec4 newRound(vec4 value) {\\n        return ivec4(floor(value + vec4(0.5)));\\n      }\\n    \"):(t=\"\",e=\"attribute\",n=\"varying\",r=\"varying\",o=\"texture2D\",a=\"gl_FragColor\",s=\"\",u=\"\\n      #define isnan(value) isnan_custom(value)\\n      bool isnan_custom(float val) {\\n        return (val > 0. || val < 1. || val == 0.) ? false : true;\\n      }\\n      bvec4 isnan_custom(vec4 val) {\\n        return bvec4(isnan(val.x), isnan(val.y), isnan(val.z), isnan(val.w));\\n      }\\n    \",c=\"\\n      uniform float INFINITY;\\n\\n      bool isinf(float val) {\\n        return abs(val) == INFINITY;\\n      }\\n      bvec4 isinf(vec4 val) {\\n        return equal(abs(val), vec4(INFINITY));\\n      }\\n    \",l=\"\\n      int round(float value) {\\n        return int(floor(value + 0.5));\\n      }\\n\\n      ivec4 round(vec4 value) {\\n        return ivec4(floor(value + vec4(0.5)));\\n      }\\n    \"),{version:t,attribute:e,varyingVs:n,varyingFs:r,texture2D:o,output:a,defineOutput:s,defineSpecialNaN:u,defineSpecialInf:c,defineRound:l}}function $a(t,e,n){void 0===n&&(n=\"index\");var r=$(e);return r.map((function(e,o){return\"int \"+t[o]+\" = \"+n+\" / \"+e+\"; \"+(o===r.length-1?\"int \"+t[o+1]+\" = \"+n+\" - \"+t[o]+\" * \"+e:\"index -= \"+t[o]+\" * \"+e)+\";\"})).join(\"\")}function Qa(t){var e=$(t).map((function(t){return t.toString()}));return\"\\n  int getFlatIndex(ivec3 coords) {\\n    return coords.x * \"+e[0]+\" + coords.y * \"+e[1]+\" + coords.z;\\n  }\\n\"}var Ja=\"\\n  const float FLOAT_MAX = 1.70141184e38;\\n  const float FLOAT_MIN = 1.17549435e-38;\\n\\n  lowp vec4 encode_float(highp float v) {\\n    if (isnan(v)) {\\n      return vec4(255, 255, 255, 255);\\n    }\\n\\n    highp float av = abs(v);\\n\\n    if(av < FLOAT_MIN) {\\n      return vec4(0.0, 0.0, 0.0, 0.0);\\n    } else if(v > FLOAT_MAX) {\\n      return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;\\n    } else if(v < -FLOAT_MAX) {\\n      return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;\\n    }\\n\\n    highp vec4 c = vec4(0,0,0,0);\\n\\n    highp float e = floor(log2(av));\\n    highp float m = exp2(fract(log2(av))) - 1.0;\\n\\n    c[2] = floor(128.0 * m);\\n    m -= c[2] / 128.0;\\n    c[1] = floor(32768.0 * m);\\n    m -= c[1] / 32768.0;\\n    c[0] = floor(8388608.0 * m);\\n\\n    highp float ebias = e + 127.0;\\n    c[3] = floor(ebias / 2.0);\\n    ebias -= c[3] * 2.0;\\n    c[2] += floor(ebias) * 128.0;\\n\\n    c[3] += 128.0 * step(0.0, -v);\\n\\n    return c / 255.0;\\n  }\\n\";function Za(t,e,n,r){var o=[];t.forEach((function(t){var e=k(t.shapeInfo.logicalShape);t.shapeInfo.isUniform?o.push(\"uniform float \"+t.name+(e>1?\"[\"+e+\"]\":\"\")+\";\"):(o.push(\"uniform sampler2D \"+t.name+\";\"),o.push(\"uniform int offset\"+t.name+\";\"))}));var a,i,s=o.join(\"\\n\"),u=t.map((function(t){return function(t,e,n){void 0===n&&(n=!1);var r=\"\";r+=n?ei(t):ti(t);var o=t.shapeInfo.logicalShape,a=e.logicalShape;o.length<=a.length&&(r+=n?function(t,e){var n,r=t.name,o=r.charAt(0).toUpperCase()+r.slice(1),a=\"get\"+o+\"AtOutCoords\",i=t.shapeInfo.logicalShape.length,s=e.logicalShape.length,u=Mr(t.shapeInfo.logicalShape,e.logicalShape),c=ui(s),l=s-i,h=[\"x\",\"y\",\"z\",\"w\",\"u\",\"v\"];n=0===i?\"\":s<2&&u.length>=1?\"coords = 0;\":u.map((function(t){return\"coords.\"+h[t+l]+\" = 0;\"})).join(\"\\n\");var f=\"\";f=s<2&&i>0?\"coords\":t.shapeInfo.logicalShape.map((function(t,e){return\"coords.\"+h[e+l]})).join(\", \");var d=\"return outputValue;\",p=1===k(t.shapeInfo.logicalShape),v=1===k(e.logicalShape);if(1!==i||p||v){if(p&&!v)d=1===s?\"\\n        return vec4(outputValue.x, outputValue.x, 0., 0.);\\n      \":\"\\n        return vec4(outputValue.x);\\n      \";else if(u.length){var g=i-2,m=i-1;u.indexOf(g)>-1&&u.indexOf(m)>-1?d=\"return vec4(outputValue.x);\":u.indexOf(g)>-1?d=\"return vec4(outputValue.x, outputValue.y, outputValue.x, outputValue.y);\":u.indexOf(m)>-1&&(d=\"return vec4(outputValue.xx, outputValue.zz);\")}}else d=\"\\n      return vec4(outputValue.xy, outputValue.xy);\\n    \";return\"\\n    vec4 \"+a+\"() {\\n      \"+c+\" coords = getOutputCoords();\\n      \"+n+\"\\n      vec4 outputValue = get\"+o+\"(\"+f+\");\\n      \"+d+\"\\n    }\\n  \"}(t,e):function(t,e){var n=t.name,r=n.charAt(0).toUpperCase()+n.slice(1),o=\"get\"+r+\"AtOutCoords\",a=e.texShape,i=t.shapeInfo.texShape,s=t.shapeInfo.logicalShape.length,u=e.logicalShape.length;if(!t.shapeInfo.isUniform&&s===u&&null==t.shapeInfo.flatOffset&&S(i,a))return\"\\n      float \"+o+\"() {\\n        return sampleTexture(\"+n+\", resultUV);\\n      }\\n    \";var c,l=ui(u),h=Mr(t.shapeInfo.logicalShape,e.logicalShape),f=u-s,d=[\"x\",\"y\",\"z\",\"w\",\"u\",\"v\"];c=0===s?\"\":u<2&&h.length>=1?\"coords = 0;\":h.map((function(t){return\"coords.\"+d[t+f]+\" = 0;\"})).join(\"\\n\");var p=\"\";p=u<2&&s>0?\"coords\":t.shapeInfo.logicalShape.map((function(t,e){return\"coords.\"+d[e+f]})).join(\", \");return\"\\n    float \"+o+\"() {\\n      \"+l+\" coords = getOutputCoords();\\n      \"+c+\"\\n      return get\"+r+\"(\"+p+\");\\n    }\\n  \"}(t,e));return r}(t,e,r)})).join(\"\\n\"),c=e.texShape,l=Ya(),h=function(t){return\"\\n    float sampleTexture(sampler2D textureSampler, vec2 uv) {\\n      return \"+t.texture2D+\"(textureSampler, uv).r;\\n    }\\n  \"}(l),f=function(t){return t.version+\"\\n    precision highp float;\\n    precision highp int;\\n    precision highp sampler2D;\\n    \"+t.varyingFs+\" vec2 resultUV;\\n    \"+t.defineOutput+\"\\n    const vec2 halfCR = vec2(0.5, 0.5);\\n\\n    struct ivec5\\n    {\\n      int x;\\n      int y;\\n      int z;\\n      int w;\\n      int u;\\n    };\\n\\n    struct ivec6\\n    {\\n      int x;\\n      int y;\\n      int z;\\n      int w;\\n      int u;\\n      int v;\\n    };\\n\\n    uniform float NAN;\\n    \"+t.defineSpecialNaN+\"\\n    \"+t.defineSpecialInf+\"\\n    \"+t.defineRound+\"\\n\\n    int imod(int x, int y) {\\n      return x - y * (x / y);\\n    }\\n\\n    int idiv(int a, int b, float sign) {\\n      int res = a / b;\\n      int mod = imod(a, b);\\n      if (sign < 0. && mod != 0) {\\n        res -= 1;\\n      }\\n      return res;\\n    }\\n\\n    //Based on the work of Dave Hoskins\\n    //https://www.shadertoy.com/view/4djSRW\\n    #define HASHSCALE1 443.8975\\n    float random(float seed){\\n      vec2 p = resultUV * seed;\\n      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);\\n      p3 += dot(p3, p3.yzx + 19.19);\\n      return fract((p3.x + p3.y) * p3.z);\\n    }\\n\\n    \"+ni+\"\\n    \"+ri+\"\\n    \"+oi+\"\\n  \"}(l);return e.isPacked?(a=function(t,e){switch(t.length){case 0:return\"\\n    int getOutputCoords() {\\n      return 0;\\n    }\\n  \";case 1:return function(t,e){var n=[Math.ceil(e[0]/2),Math.ceil(e[1]/2)];if(1===n[0])return\"\\n      int getOutputCoords() {\\n        return 2 * int(resultUV.x * \"+n[1]+\".0);\\n      }\\n    \";if(1===n[1])return\"\\n      int getOutputCoords() {\\n        return 2 * int(resultUV.y * \"+n[0]+\".0);\\n      }\\n    \";return\"\\n    int getOutputCoords() {\\n      ivec2 resTexRC = ivec2(resultUV.yx *\\n                             vec2(\"+n[0]+\", \"+n[1]+\"));\\n      return 2 * (resTexRC.x * \"+n[1]+\" + resTexRC.y);\\n    }\\n  \"}(0,e);case 2:return function(t,e){var n=[Math.ceil(e[0]/2),Math.ceil(e[1]/2)];if(S(t,e))return\"\\n      ivec2 getOutputCoords() {\\n        return 2 * ivec2(resultUV.yx * vec2(\"+n[0]+\", \"+n[1]+\"));\\n      }\\n    \";var r=Math.ceil(t[1]/2);return\"\\n    ivec2 getOutputCoords() {\\n      ivec2 resTexRC = ivec2(resultUV.yx *\\n                             vec2(\"+n[0]+\", \"+n[1]+\"));\\n\\n      int index = resTexRC.x * \"+n[1]+\" + resTexRC.y;\\n      int r = 2 * (index / \"+r+\");\\n      int c = imod(index, \"+r+\") * 2;\\n\\n      return ivec2(r, c);\\n    }\\n  \"}(t,e);case 3:return n=t,r=e,o=[Math.ceil(r[0]/2),Math.ceil(r[1]/2)],a=Math.ceil(n[2]/2),i=a*Math.ceil(n[1]/2),\"\\n    ivec3 getOutputCoords() {\\n      ivec2 resTexRC = ivec2(resultUV.yx *\\n                             vec2(\"+o[0]+\", \"+o[1]+\"));\\n      int index = resTexRC.x * \"+o[1]+\" + resTexRC.y;\\n\\n      int b = index / \"+i+\";\\n      index -= b * \"+i+\";\\n\\n      int r = 2 * (index / \"+a+\");\\n      int c = imod(index, \"+a+\") * 2;\\n\\n      return ivec3(b, r, c);\\n    }\\n  \";default:return function(t,e){for(var n=[Math.ceil(e[0]/2),Math.ceil(e[1]/2)],r=Math.ceil(t[t.length-1]/2),o=r*Math.ceil(t[t.length-2]/2),a=o,i=\"\",s=\"b, r, c\",u=2;u<t.length-1;u++)a*=t[t.length-u-1],i=\"\\n      int b\"+u+\" = index / \"+a+\";\\n      index -= b\"+u+\" * \"+a+\";\\n    \"+i,s=\"b\"+u+\", \"+s;return\"\\n    ivec\"+t.length+\" getOutputCoords() {\\n      ivec2 resTexRC = ivec2(resultUV.yx *\\n                             vec2(\"+n[0]+\", \"+n[1]+\"));\\n      int index = resTexRC.x * \"+n[1]+\" + resTexRC.y;\\n\\n      \"+i+\"\\n\\n      int b = index / \"+o+\";\\n      index -= b * \"+o+\";\\n\\n      int r = 2 * (index / \"+r+\");\\n      int c = imod(index, \"+r+\") * 2;\\n\\n      return ivec\"+t.length+\"(\"+s+\");\\n    }\\n  \"}(t,e)}var n,r,o,a,i}(e.logicalShape,c),i=function(t){return\"\\n    void setOutput(vec4 val) {\\n      \"+t.output+\" = val;\\n    }\\n  \"}(l)):(a=function(t,e){switch(t.length){case 0:return\"\\n    int getOutputCoords() {\\n      return 0;\\n    }\\n  \";case 1:return function(t,e){if(1===e[0])return\"\\n      int getOutputCoords() {\\n        return int(resultUV.x * \"+e[1]+\".0);\\n      }\\n    \";if(1===e[1])return\"\\n      int getOutputCoords() {\\n        return int(resultUV.y * \"+e[0]+\".0);\\n      }\\n    \";return\"\\n    int getOutputCoords() {\\n      ivec2 resTexRC = ivec2(resultUV.yx *\\n                             vec2(\"+e[0]+\", \"+e[1]+\"));\\n      return resTexRC.x * \"+e[1]+\" + resTexRC.y;\\n    }\\n  \"}(0,e);case 2:return function(t,e){if(S(t,e))return\"\\n      ivec2 getOutputCoords() {\\n        return ivec2(resultUV.yx * vec2(\"+e[0]+\", \"+e[1]+\"));\\n      }\\n    \";if(1===t[1])return\"\\n      ivec2 getOutputCoords() {\\n        ivec2 resTexRC = ivec2(resultUV.yx *\\n                               vec2(\"+e[0]+\", \"+e[1]+\"));\\n        int index = resTexRC.x * \"+e[1]+\" + resTexRC.y;\\n        return ivec2(index, 0);\\n      }\\n    \";if(1===t[0])return\"\\n      ivec2 getOutputCoords() {\\n        ivec2 resTexRC = ivec2(resultUV.yx *\\n                               vec2(\"+e[0]+\", \"+e[1]+\"));\\n        int index = resTexRC.x * \"+e[1]+\" + resTexRC.y;\\n        return ivec2(0, index);\\n      }\\n    \";return\"\\n    ivec2 getOutputCoords() {\\n      ivec2 resTexRC = ivec2(resultUV.yx *\\n                             vec2(\"+e[0]+\", \"+e[1]+\"));\\n      int index = resTexRC.x * \"+e[1]+\" + resTexRC.y;\\n      int r = index / \"+t[1]+\";\\n      int c = index - r * \"+t[1]+\";\\n      return ivec2(r, c);\\n    }\\n  \"}(t,e);case 3:return n=e,r=$a([\"r\",\"c\",\"d\"],t),\"\\n    ivec3 getOutputCoords() {\\n      ivec2 resTexRC = ivec2(resultUV.yx *\\n                             vec2(\"+n[0]+\", \"+n[1]+\"));\\n      int index = resTexRC.x * \"+n[1]+\" + resTexRC.y;\\n      \"+r+\"\\n      return ivec3(r, c, d);\\n    }\\n  \";case 4:return function(t,e){var n=$a([\"r\",\"c\",\"d\",\"d2\"],t);return\"\\n    ivec4 getOutputCoords() {\\n      ivec2 resTexRC = ivec2(resultUV.yx *\\n        vec2(\"+e[0]+\", \"+e[1]+\"));\\n      int index = resTexRC.x * \"+e[1]+\" + resTexRC.y;\\n      \"+n+\"\\n      return ivec4(r, c, d, d2);\\n    }\\n  \"}(t,e);case 5:return function(t,e){var n=$a([\"r\",\"c\",\"d\",\"d2\",\"d3\"],t);return\"\\n    ivec5 getOutputCoords() {\\n      ivec2 resTexRC = ivec2(resultUV.yx * vec2(\"+e[0]+\",\\n                             \"+e[1]+\"));\\n\\n      int index = resTexRC.x * \"+e[1]+\" + resTexRC.y;\\n\\n      \"+n+\"\\n\\n      ivec5 outShape = ivec5(r, c, d, d2, d3);\\n      return outShape;\\n    }\\n  \"}(t,e);case 6:return function(t,e){var n=$a([\"r\",\"c\",\"d\",\"d2\",\"d3\",\"d4\"],t);return\"\\n    ivec6 getOutputCoords() {\\n      ivec2 resTexRC = ivec2(resultUV.yx *\\n        vec2(\"+e[0]+\", \"+e[1]+\"));\\n      int index = resTexRC.x * \"+e[1]+\" + resTexRC.y;\\n\\n      \"+n+\"\\n\\n      ivec6 result = ivec6(r, c, d, d2, d3, d4);\\n      return result;\\n    }\\n  \"}(t,e);default:throw new Error(t.length+\"-D output sampling is not yet supported\")}var n,r}(e.logicalShape,c),i=function(t){return\"\\n    void setOutput(float val) {\\n      \"+t.output+\" = vec4(val, 0, 0, 0);\\n    }\\n  \"}(l)),r&&(f+=ai),[f,h,i,s,a,u,n].join(\"\\n\")}function ti(t){var e=t.shapeInfo.logicalShape;switch(e.length){case 0:return function(t){var e=t.name,n=\"get\"+e.charAt(0).toUpperCase()+e.slice(1);if(t.shapeInfo.isUniform)return\"float \"+n+\"() {return \"+e+\";}\";var r=t.shapeInfo.texShape,o=r[0],a=r[1];if(1===o&&1===a)return\"\\n      float \"+n+\"() {\\n        return sampleTexture(\"+e+\", halfCR);\\n      }\\n    \";var i=t.shapeInfo.texShape,s=i[0],u=i[1],c=ii(e);return\"\\n    float \"+n+\"() {\\n      vec2 uv = uvFromFlat(\"+s+\", \"+u+\", \"+c+\");\\n      return sampleTexture(\"+e+\", uv);\\n    }\\n  \"}(t);case 1:return function(t){var e=t.name,n=\"get\"+e.charAt(0).toUpperCase()+e.slice(1);if(t.shapeInfo.isUniform)return\"\\n      float \"+n+\"(int index) {\\n        \"+si(t)+\"\\n      }\\n    \";var r=t.shapeInfo.texShape,o=r[0],a=r[1];if(1===a&&1===o)return\"\\n      float \"+n+\"(int index) {\\n        return sampleTexture(\"+e+\", halfCR);\\n      }\\n    \";var i=ii(e);if(1===a)return\"\\n      float \"+n+\"(int index) {\\n        vec2 uv = vec2(0.5, (float(index + \"+i+\") + 0.5) / \"+o+\".0);\\n        return sampleTexture(\"+e+\", uv);\\n      }\\n    \";if(1===o)return\"\\n      float \"+n+\"(int index) {\\n        vec2 uv = vec2((float(index + \"+i+\") + 0.5) / \"+a+\".0, 0.5);\\n        return sampleTexture(\"+e+\", uv);\\n      }\\n    \";return\"\\n    float \"+n+\"(int index) {\\n      vec2 uv = uvFromFlat(\"+o+\", \"+a+\", index + \"+i+\");\\n      return sampleTexture(\"+e+\", uv);\\n    }\\n  \"}(t);case 2:return function(t){var e=t.shapeInfo.logicalShape,n=t.name,r=\"get\"+n.charAt(0).toUpperCase()+n.slice(1),o=t.shapeInfo.texShape;if(null!=o&&S(e,o)){var a=o[0],i=o[1];return\"\\n    float \"+r+\"(int row, int col) {\\n      vec2 uv = (vec2(col, row) + halfCR) / vec2(\"+i+\".0, \"+a+\".0);\\n      return sampleTexture(\"+n+\", uv);\\n    }\\n  \"}var s=M(e),u=s.newShape,c=s.keptDims,l=u;if(l.length<e.length){var h=ci(t,l);return\"\\n      \"+ti(h)+\"\\n      float \"+r+\"(int row, int col) {\\n        return \"+r+\"(\"+li([\"row\",\"col\"],c)+\");\\n      }\\n    \"}if(t.shapeInfo.isUniform)return\"\\n      float \"+r+\"(int row, int col) {\\n        int index = round(dot(vec2(row, col), vec2(\"+e[1]+\", 1)));\\n        \"+si(t)+\"\\n      }\\n    \";var f=o[0],d=o[1],p=ii(n);if(1===d)return\"\\n    float \"+r+\"(int row, int col) {\\n      float index = dot(vec3(row, col, \"+p+\"), vec3(\"+e[1]+\", 1, 1));\\n      vec2 uv = vec2(0.5, (index + 0.5) / \"+f+\".0);\\n      return sampleTexture(\"+n+\", uv);\\n    }\\n  \";if(1===f)return\"\\n    float \"+r+\"(int row, int col) {\\n      float index = dot(vec3(row, col, \"+p+\"), vec3(\"+e[1]+\", 1, 1));\\n      vec2 uv = vec2((index + 0.5) / \"+d+\".0, 0.5);\\n      return sampleTexture(\"+n+\", uv);\\n    }\\n  \";return\"\\n  float \"+r+\"(int row, int col) {\\n    // Explicitly use integer operations as dot() only works on floats.\\n    int index = row * \"+e[1]+\" + col + \"+p+\";\\n    vec2 uv = uvFromFlat(\"+f+\", \"+d+\", index);\\n    return sampleTexture(\"+n+\", uv);\\n  }\\n\"}(t);case 3:return function(t){var e=t.shapeInfo.logicalShape,n=t.name,r=\"get\"+n.charAt(0).toUpperCase()+n.slice(1),o=e[1]*e[2],a=e[2],i=M(e),s=i.newShape,u=i.keptDims,c=s;if(c.length<e.length){var l=ci(t,c);return\"\\n        \"+ti(l)+\"\\n        float \"+r+\"(int row, int col, int depth) {\\n          return \"+r+\"(\"+li([\"row\",\"col\",\"depth\"],u)+\");\\n        }\\n      \"}if(t.shapeInfo.isUniform)return\"\\n      float \"+r+\"(int row, int col, int depth) {\\n        int index = round(dot(vec3(row, col, depth),\\n                          vec3(\"+o+\", \"+a+\", 1)));\\n        \"+si(t)+\"\\n      }\\n    \";var h=t.shapeInfo.texShape,f=h[0],d=h[1],p=t.shapeInfo.flatOffset;if(d===o&&null==p)return\"\\n        float \"+r+\"(int row, int col, int depth) {\\n          float texR = float(row);\\n          float texC = dot(vec2(col, depth), vec2(\"+a+\", 1));\\n          vec2 uv = (vec2(texC, texR) + halfCR) /\\n                     vec2(\"+d+\".0, \"+f+\".0);\\n          return sampleTexture(\"+n+\", uv);\\n        }\\n      \";if(d===a&&null==p)return\"\\n    float \"+r+\"(int row, int col, int depth) {\\n      float texR = dot(vec2(row, col), vec2(\"+e[1]+\", 1));\\n      float texC = float(depth);\\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(\"+d+\".0, \"+f+\".0);\\n      return sampleTexture(\"+n+\", uv);\\n    }\\n  \";var v=ii(n);return\"\\n      float \"+r+\"(int row, int col, int depth) {\\n        // Explicitly use integer operations as dot() only works on floats.\\n        int index = row * \"+o+\" + col * \"+a+\" + depth + \"+v+\";\\n        vec2 uv = uvFromFlat(\"+f+\", \"+d+\", index);\\n        return sampleTexture(\"+n+\", uv);\\n      }\\n  \"}(t);case 4:return function(t){var e=t.shapeInfo.logicalShape,n=t.name,r=\"get\"+n.charAt(0).toUpperCase()+n.slice(1),o=e[3],a=e[2]*o,i=e[1]*a,s=M(e),u=s.newShape,c=s.keptDims;if(u.length<e.length){var l=ci(t,u);return\"\\n      \"+ti(l)+\"\\n      float \"+r+\"(int row, int col, int depth, int depth2) {\\n        return \"+r+\"(\"+li([\"row\",\"col\",\"depth\",\"depth2\"],c)+\");\\n      }\\n    \"}if(t.shapeInfo.isUniform)return\"\\n      float \"+r+\"(int row, int col, int depth, int depth2) {\\n        int index = round(dot(vec4(row, col, depth, depth2),\\n                          vec4(\"+i+\", \"+a+\", \"+o+\", 1)));\\n        \"+si(t)+\"\\n      }\\n    \";var h=t.shapeInfo.flatOffset,f=t.shapeInfo.texShape,d=f[0],p=f[1];if(p===i&&null==h)return\"\\n      float \"+r+\"(int row, int col, int depth, int depth2) {\\n        float texR = float(row);\\n        float texC =\\n            dot(vec3(col, depth, depth2),\\n                vec3(\"+a+\", \"+o+\", 1));\\n        vec2 uv = (vec2(texC, texR) + halfCR) /\\n                   vec2(\"+p+\".0, \"+d+\".0);\\n        return sampleTexture(\"+n+\", uv);\\n      }\\n    \";if(p===o&&null==h)return\"\\n      float \"+r+\"(int row, int col, int depth, int depth2) {\\n        float texR = dot(vec3(row, col, depth),\\n                         vec3(\"+e[1]*e[2]+\", \"+e[2]+\", 1));\\n        float texC = float(depth2);\\n        vec2 uv = (vec2(texC, texR) + halfCR) /\\n                  vec2(\"+p+\".0, \"+d+\".0);\\n        return sampleTexture(\"+n+\", uv);\\n      }\\n    \";var v=ii(n);return\"\\n    float \"+r+\"(int row, int col, int depth, int depth2) {\\n      // Explicitly use integer operations as dot() only works on floats.\\n      int index = row * \"+i+\" + col * \"+a+\" +\\n          depth * \"+o+\" + depth2;\\n      vec2 uv = uvFromFlat(\"+d+\", \"+p+\", index + \"+v+\");\\n      return sampleTexture(\"+n+\", uv);\\n    }\\n  \"}(t);case 5:return function(t){var e=t.shapeInfo.logicalShape,n=t.name,r=\"get\"+n.charAt(0).toUpperCase()+n.slice(1),o=e[4],a=e[3]*o,i=e[2]*a,s=e[1]*i,u=M(e),c=u.newShape,l=u.keptDims;if(c.length<e.length){var h=ci(t,c);return\"\\n      \"+ti(h)+\"\\n      float \"+r+\"(int row, int col, int depth, int depth2, int depth3) {\\n        return \"+r+\"(\"+li([\"row\",\"col\",\"depth\",\"depth2\",\"depth3\"],l)+\");\\n      }\\n    \"}if(t.shapeInfo.isUniform)return\"\\n      float \"+r+\"(int row, int col, int depth, int depth2, int depth3) {\\n        float index = dot(\\n          vec4(row, col, depth, depth2),\\n          vec4(\"+s+\", \"+i+\", \"+a+\", \"+o+\")) +\\n          depth3;\\n        \"+si(t)+\"\\n      }\\n    \";var f=t.shapeInfo.flatOffset,d=t.shapeInfo.texShape,p=d[0],v=d[1];if(v===s&&null==f)return\"\\n      float \"+r+\"(int row, int col, int depth, int depth2, int depth3) {\\n        int texR = row;\\n        float texC = dot(vec4(col, depth, depth2, depth3),\\n                         vec4(\"+i+\", \"+a+\", \"+o+\", 1));\\n        vec2 uv = (vec2(texC, texR) + halfCR) /\\n                   vec2(\"+v+\".0, \"+p+\".0);\\n        return sampleTexture(\"+n+\", uv);\\n      }\\n    \";if(v===o&&null==f)return\"\\n      float \"+r+\"(int row, int col, int depth, int depth2, int depth3) {\\n        float texR = dot(\\n          vec4(row, col, depth, depth2),\\n          vec4(\"+e[1]*e[2]*e[3]+\",\\n               \"+e[2]*e[3]+\", \"+e[3]+\", 1));\\n        int texC = depth3;\\n        vec2 uv = (vec2(texC, texR) + halfCR) /\\n                  vec2(\"+v+\".0, \"+p+\".0);\\n        return sampleTexture(\"+n+\", uv);\\n      }\\n    \";var g=ii(n);return\"\\n    float \"+r+\"(int row, int col, int depth, int depth2, int depth3) {\\n      // Explicitly use integer operations as dot() only works on floats.\\n      int index = row * \"+s+\" + col * \"+i+\" + depth * \"+a+\" +\\n          depth2 * \"+o+\" + depth3 + \"+g+\";\\n      vec2 uv = uvFromFlat(\"+p+\", \"+v+\", index);\\n      return sampleTexture(\"+n+\", uv);\\n    }\\n  \"}(t);case 6:return function(t){var e=t.shapeInfo.logicalShape,n=t.name,r=\"get\"+n.charAt(0).toUpperCase()+n.slice(1),o=M(e),a=o.newShape,i=o.keptDims;if(a.length<e.length){var s=ci(t,a);return\"\\n      \"+ti(s)+\"\\n      float \"+r+\"(int row, int col, int depth,\\n                    int depth2, int depth3, int depth4) {\\n        return \"+r+\"(\"+li([\"row\",\"col\",\"depth\",\"depth2\",\"depth3\",\"depth4\"],i)+\");\\n      }\\n    \"}var u=e[5],c=e[4]*u,l=e[3]*c,h=e[2]*l,f=e[1]*h;if(t.shapeInfo.isUniform)return\"\\n      float \"+r+\"(int row, int col, int depth,\\n                  int depth2, int depth3, int depth4) {\\n        int index = round(dot(\\n          vec4(row, col, depth, depth2),\\n          vec4(\"+f+\", \"+h+\", \"+l+\", \"+c+\")) +\\n          dot(\\n            vec2(depth3, depth4),\\n            vec2(\"+u+\", 1)));\\n        \"+si(t)+\"\\n      }\\n    \";var d=t.shapeInfo.flatOffset,p=t.shapeInfo.texShape,v=p[0],g=p[1];if(g===f&&null==d)return\"\\n      float \"+r+\"(int row, int col, int depth,\\n                    int depth2, int depth3, int depth4) {\\n        int texR = row;\\n        float texC = dot(vec4(col, depth, depth2, depth3),\\n          vec4(\"+h+\", \"+l+\", \"+c+\", \"+u+\")) +\\n               float(depth4);\\n        vec2 uv = (vec2(texC, texR) + halfCR) /\\n                   vec2(\"+g+\".0, \"+v+\".0);\\n        return sampleTexture(\"+n+\", uv);\\n      }\\n    \";if(g===u&&null==d)return\"\\n      float \"+r+\"(int row, int col, int depth,\\n                    int depth2, int depth3, int depth4) {\\n        float texR = dot(vec4(row, col, depth, depth2),\\n          vec4(\"+e[1]*e[2]*e[3]*e[4]+\",\\n               \"+e[2]*e[3]*e[4]+\",\\n               \"+e[3]*e[4]+\",\\n               \"+e[4]+\")) + float(depth3);\\n        int texC = depth4;\\n        vec2 uv = (vec2(texC, texR) + halfCR) /\\n                  vec2(\"+g+\".0, \"+v+\".0);\\n        return sampleTexture(\"+n+\", uv);\\n      }\\n    \";var m=ii(n);return\"\\n    float \"+r+\"(int row, int col, int depth,\\n                  int depth2, int depth3, int depth4) {\\n      // Explicitly use integer operations as dot() only works on floats.\\n      int index = row * \"+f+\" + col * \"+h+\" + depth * \"+l+\" +\\n          depth2 * \"+c+\" + depth3 * \"+u+\" + depth4 + \"+m+\";\\n      vec2 uv = uvFromFlat(\"+v+\", \"+g+\", index);\\n      return sampleTexture(\"+n+\", uv);\\n    }\\n  \"}(t);default:throw new Error(e.length+\"-D input sampling is not yet supported\")}}function ei(t){var e,n,r;switch(t.shapeInfo.logicalShape.length){case 0:return e=t.name,n=\"get\"+e.charAt(0).toUpperCase()+e.slice(1),r=Ya(),\"\\n    vec4 \"+n+\"() {\\n      return \"+r.texture2D+\"(\"+e+\", halfCR);\\n    }\\n  \";case 1:return function(t){var e=t.name,n=\"get\"+e.charAt(0).toUpperCase()+e.slice(1),r=t.shapeInfo.texShape,o=[Math.ceil(r[0]/2),Math.ceil(r[1]/2)],a=Ya();return\"\\n    vec4 \"+n+\"(int index) {\\n      vec2 uv = packedUVfrom1D(\\n        \"+o[0]+\", \"+o[1]+\", index);\\n      return \"+a.texture2D+\"(\"+e+\", uv);\\n    }\\n  \"}(t);case 2:return function(t){var e=t.shapeInfo.logicalShape,n=t.name,r=\"get\"+n.charAt(0).toUpperCase()+n.slice(1),o=t.shapeInfo.texShape,a=o[0],i=o[1],s=Ya();if(null!=o&&S(e,o))return\"\\n      vec4 \"+r+\"(int row, int col) {\\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(\"+i+\".0, \"+a+\".0);\\n\\n        return \"+s.texture2D+\"(\"+n+\", uv);\\n      }\\n    \";var u=[Math.ceil(o[0]/2),Math.ceil(o[1]/2)],c=Math.ceil(e[1]/2);return\"\\n    vec4 \"+r+\"(int row, int col) {\\n      vec2 uv = packedUVfrom2D(\"+c+\", \"+u[0]+\", \"+u[1]+\", row, col);\\n      return \"+s.texture2D+\"(\"+n+\", uv);\\n    }\\n  \"}(t);case 3:return function(t){var e=t.shapeInfo.logicalShape,n=t.name,r=\"get\"+n.charAt(0).toUpperCase()+n.slice(1),o=t.shapeInfo.texShape,a=[Math.ceil(o[0]/2),Math.ceil(o[1]/2)];if(1===e[0]){var i=e.slice(1),s=ci(t,i);return\"\\n        \"+ei(s)+\"\\n        vec4 \"+r+\"(int b, int row, int col) {\\n          return \"+r+\"(\"+li([\"b\",\"row\",\"col\"],[1,2])+\");\\n        }\\n      \"}var u=a[0],c=a[1],l=Math.ceil(e[2]/2),h=l*Math.ceil(e[1]/2),f=Ya();return\"\\n    vec4 \"+r+\"(int b, int row, int col) {\\n      vec2 uv = packedUVfrom3D(\\n        \"+u+\", \"+c+\", \"+h+\", \"+l+\", b, row, col);\\n      return \"+f.texture2D+\"(\"+n+\", uv);\\n    }\\n  \"}(t);default:return function(t){for(var e=t.shapeInfo.logicalShape,n=e.length,r=t.name,o=\"get\"+r.charAt(0).toUpperCase()+r.slice(1),a=t.shapeInfo.texShape,i=[Math.ceil(a[0]/2),Math.ceil(a[1]/2)],s=i[0],u=i[1],c=Math.ceil(e[n-1]/2),l=c*Math.ceil(e[n-2]/2),h=\"int b, int row, int col\",f=\"b * \"+l+\" + (row / 2) * \"+c+\" + (col / 2)\",d=2;d<n-1;d++)h=\"int b\"+d+\", \"+h,l*=e[n-d-1],f=\"b\"+d+\" * \"+l+\" + \"+f;var p=Ya();return\"\\n    vec4 \"+o+\"(\"+h+\") {\\n      int index = \"+f+\";\\n      int texR = index / \"+u+\";\\n      int texC = index - texR * \"+u+\";\\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(\"+u+\", \"+s+\");\\n      return \"+p.texture2D+\"(\"+r+\", uv);\\n    }\\n  \"}(t)}}var ni=\"\\nvec2 uvFromFlat(int texNumR, int texNumC, int index) {\\n  int texR = index / texNumC;\\n  int texC = index - texR * texNumC;\\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\\n}\\nvec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\\n  int texelIndex = index / 2;\\n  int texR = texelIndex / texNumC;\\n  int texC = texelIndex - texR * texNumC;\\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\\n}\\n\",ri=\"\\nvec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,\\n  int texNumC, int row, int col) {\\n  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\\n  int texR = texelIndex / texNumC;\\n  int texC = texelIndex - texR * texNumC;\\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\\n}\\n\",oi=\"\\nvec2 packedUVfrom3D(int texNumR, int texNumC,\\n    int texelsInBatch, int texelsInLogicalRow, int b,\\n    int row, int col) {\\n  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\\n  int texR = index / texNumC;\\n  int texC = index - texR * texNumC;\\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\\n}\\n\",ai=\"\\n  float getChannel(vec4 frag, vec2 innerDims) {\\n    vec2 modCoord = mod(innerDims, 2.);\\n    return modCoord.x == 0. ?\\n      (modCoord.y == 0. ? frag.r : frag.g) :\\n      (modCoord.y == 0. ? frag.b : frag.a);\\n  }\\n  float getChannel(vec4 frag, int dim) {\\n    float modCoord = mod(float(dim), 2.);\\n    return modCoord == 0. ? frag.r : frag.g;\\n  }\\n\";function ii(t){return\"offset\"+t}function si(t){var e=t.name,n=k(t.shapeInfo.logicalShape);return n<2?\"return \"+e+\";\":\"\\n    for (int i = 0; i < \"+n+\"; i++) {\\n      if (i == index) {\\n        return \"+e+\"[i];\\n      }\\n    }\\n  \"}function ui(t){if(t<=1)return\"int\";if(2===t)return\"ivec2\";if(3===t)return\"ivec3\";if(4===t)return\"ivec4\";if(5===t)return\"ivec5\";if(6===t)return\"ivec6\";throw Error(\"GPU for rank \"+t+\" is not yet supported\")}function ci(t,e){var n=JSON.parse(JSON.stringify(t));return n.shapeInfo.logicalShape=e,n}function li(t,e){return e.map((function(e){return t[e]})).join(\", \")}var hi=function(t,e,n,r){this.variableNames=[\"A\"],this.packedInputs=!0,this.packedOutput=!0,C(t.length>2,(function(){return\"Packed arg\"+(n.charAt(0).toUpperCase()+n.slice(1))+\" supports only inputs with rank above 2.\"}));var o=t[t.length-1],a=Math.ceil(o/e);this.outputShape=t.slice(0,-1),a>1&&this.outputShape.push(a),r||this.variableNames.push(\"bestIndicesA\");var i,s,u=this.outputShape,c=u.length,l=ui(c),h=Xa(\"coords\",c);if(1===a){var f=ui(s=c+1);i=\"\\n        \"+f+\" sourceLocR = \"+f+\"(\"+h.join()+\", 0);\\n        ++\"+h[c-1]+\";\\n        \"+f+\" sourceLocG = \"+f+\"(\"+h.join()+\", 0);\\n        ++\"+h[c-2]+\";\\n        \"+f+\" sourceLocA = \"+f+\"(\"+h.join()+\", 0);\\n        --\"+h[c-1]+\";\\n        \"+f+\" sourceLocB = \"+f+\"(\"+h.join()+\", 0);\\n        --\"+h[c-2]+\";\"}else s=c,i=\"\\n        \"+l+\" sourceLocR = coords;\\n        ++\"+h[c-1]+\";\\n        \"+l+\" sourceLocG = coords;\\n        ++\"+h[c-2]+\";\\n        \"+l+\" sourceLocA = coords;\\n        --\"+h[c-1]+\";\\n        \"+l+\" sourceLocB = coords;\\n        --\"+h[c-2]+\";\";var d=[\"x\",\"y\",\"z\",\"w\",\"u\",\"v\"].slice(0,s),p=\".\"+d[s-1],v=d.map((function(t){return\"int \"+t})),g=Xa(\"sourceLocR\",s-1).concat(\"inIdx.r\"),m=Xa(\"sourceLocG\",s-1).concat(\"inIdx.g\"),y=Xa(\"sourceLocB\",s-1).concat(\"inIdx.b\"),x=Xa(\"sourceLocA\",s-1).concat(\"inIdx.a\"),b=\"max\"===n?\"greaterThan\":\"lessThan\",w=r?\"\":\"\\n          inIdx = round(vec4(getBestIndicesAChannel(\"+g.join()+\"),\\n                             getBestIndicesAChannel(\"+m.join()+\"),\\n                             getBestIndicesAChannel(\"+y.join()+\"),\\n                             getBestIndicesAChannel(\"+x.join()+\")));\",E=\"vec4(\\n            getAChannel(\"+g.join()+\"),\\n            hasNextCol ? getAChannel(\"+m.join()+\") : 0.,\\n            hasNextRow ? getAChannel(\"+y.join()+\") : 0.,\\n            hasNextRow && hasNextCol ? getAChannel(\"+x.join()+\") : 0.)\",R=r?\"\":\"\\n      float getBestIndicesAChannel(\"+v.join()+\") {\\n        return getChannel(getBestIndicesA(\"+d.join()+\"),\\n                                          vec2(\"+d.slice(-2).join()+\"));\\n      }\";this.userCode=\"\\n      float getAChannel(\"+v.join()+\") {\\n        return getChannel(getA(\"+d.join()+\"),\\n                               vec2(\"+d.slice(-2).join()+\"));\\n      }\\n      \"+R+\"\\n      void main() {\\n        \"+l+\" coords = getOutputCoords();\\n        bool hasNextCol = \"+h[c-1]+\" < \"+(u[c-1]-1)+\";\\n        bool hasNextRow = \"+h[c-2]+\" < \"+(u[c-2]-1)+\";\\n        \"+i+\"\\n        ivec4 srcIdx = ivec4(sourceLocR\"+p+\", sourceLocG\"+p+\",\\n          sourceLocB\"+p+\", sourceLocA\"+p+\") * \"+e+\";\\n        ivec4 inIdx = srcIdx;\\n        vec4 bestIndex = vec4(inIdx);\\n        vec4 bestValue = \"+E+\";\\n\\n        for (int i = 0; i < \"+e+\"; i++) {\\n          inIdx = srcIdx;\\n          \"+w+\"\\n          vec4 candidate = \"+E+\";\\n          bvec4 nan = isnan(candidate);\\n          bvec4 replace = bvec4(\\n            vec4(\"+b+\"(candidate, bestValue)) * (vec4(1.0) - vec4(nan)));\\n\\n          bestValue = vec4(replace.x  ? candidate.x : bestValue.x,\\n                           replace.y  ? candidate.y : bestValue.y,\\n                           replace.z  ? candidate.z : bestValue.z,\\n                           replace.w  ? candidate.w : bestValue.w);\\n          bestIndex = mix(bestIndex, vec4(inIdx), vec4(replace));\\n          srcIdx++;\\n        }\\n        setOutput(bestIndex);\\n      }\\n    \"},fi=function(t){this.variableNames=[\"dy\"],this.outputShape=t.inShape;var e=t.filterHeight,n=t.filterWidth,r=t.strideHeight,o=t.strideWidth,a=t.dilationHeight,i=t.dilationWidth,s=t.effectiveFilterHeight,u=t.effectiveFilterWidth,c=s-1-t.padInfo.top,l=u-1-t.padInfo.left,h=1/(e*n);this.userCode=\"\\n      const ivec2 pads = ivec2(\"+c+\", \"+l+\");\\n      const float avgMultiplier = float(\"+h+\");\\n\\n      void main() {\\n        ivec4 coords = getOutputCoords();\\n        int b = coords[0];\\n        int d = coords[3];\\n\\n        ivec2 dyRCCorner = coords.yz - pads;\\n        int dyRCorner = dyRCCorner.x;\\n        int dyCCorner = dyRCCorner.y;\\n\\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\\n        // ? = to be determined. : = across all values in that axis.\\n        float dotProd = 0.0;\\n        for (int wR = 0; wR < \"+s+\";\\n            wR += \"+a+\") {\\n          float dyR = float(dyRCorner + wR) / \"+r+\".0;\\n\\n          if (dyR < 0.0 || dyR >= \"+t.outHeight+\".0 || fract(dyR) > 0.0) {\\n            continue;\\n          }\\n          int idyR = int(dyR);\\n\\n          for (int wC = 0; wC < \"+u+\";\\n            wC+= \"+i+\") {\\n            float dyC = float(dyCCorner + wC) / \"+o+\".0;\\n\\n            if (dyC < 0.0 || dyC >= \"+t.outWidth+\".0 ||\\n                fract(dyC) > 0.0) {\\n              continue;\\n            }\\n            int idyC = int(dyC);\\n\\n            float dyValue = getDy(b, idyR, idyC, d);\\n\\n            dotProd += dyValue * avgMultiplier;\\n          }\\n        }\\n        setOutput(dotProd);\\n      }\\n    \"},di=function(t){this.variableNames=[\"dy\"],this.outputShape=t.inShape;var e=t.filterDepth,n=t.filterHeight,r=t.filterWidth,o=t.strideDepth,a=t.strideHeight,i=t.strideWidth,s=t.dilationDepth,u=t.dilationHeight,c=t.dilationWidth,l=t.effectiveFilterDepth,h=t.effectiveFilterHeight,f=t.effectiveFilterWidth,d=l-1-t.padInfo.front,p=h-1-t.padInfo.top,v=f-1-t.padInfo.left,g=1/(e*n*r);this.userCode=\"\\n      const ivec3 pads = ivec3(\"+d+\", \"+p+\", \"+v+\");\\n      const float avgMultiplier = float(\"+g+\");\\n\\n      void main() {\\n        ivec5 coords = getOutputCoords();\\n        int batch = coords.x;\\n        int ch = coords.u;\\n\\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\\n        int dyDCorner = dyCorner.x;\\n        int dyRCorner = dyCorner.y;\\n        int dyCCorner = dyCorner.z;\\n\\n        // Convolve dy(?, ?, ?, d) with pos mask(:, :, :, ch) to get\\n        // dx(xD, xR, xC, ch).\\n        // ? = to be determined. : = across all values in that axis.\\n        float dotProd = 0.0;\\n\\n        for (int wD = 0; wD < \"+l+\";\\n            wD += \"+s+\") {\\n          float dyD = float(dyDCorner + wD) / \"+o+\".0;\\n\\n          if (dyD < 0.0 || dyD >= \"+t.outDepth+\".0 || fract(dyD) > 0.0) {\\n            continue;\\n          }\\n          int idyD = int(dyD);\\n\\n          for (int wR = 0; wR < \"+h+\";\\n              wR += \"+u+\") {\\n            float dyR = float(dyRCorner + wR) / \"+a+\".0;\\n\\n            if (dyR < 0.0 || dyR >= \"+t.outHeight+\".0 ||\\n                fract(dyR) > 0.0) {\\n              continue;\\n            }\\n            int idyR = int(dyR);\\n\\n            for (int wC = 0; wC < \"+f+\";\\n                wC += \"+c+\") {\\n              float dyC = float(dyCCorner + wC) / \"+i+\".0;\\n\\n              if (dyC < 0.0 || dyC >= \"+t.outWidth+\".0 ||\\n                  fract(dyC) > 0.0) {\\n                continue;\\n              }\\n              int idyC = int(dyC);\\n\\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\\n\\n              dotProd += dyValue * avgMultiplier;\\n            }\\n          }\\n        }\\n        setOutput(dotProd);\\n      }\\n    \"},pi=function(t,e,n,r,o,a){this.outputShape=[],this.variableNames=[\"x\",\"mean\",\"variance\"],Pr(t,e),Pr(t,n);var i=\"0.0\";null!=r&&(Pr(t,r),this.variableNames.push(\"offset\"),i=\"getOffsetAtOutCoords()\");var s=\"1.0\";null!=o&&(Pr(t,o),this.variableNames.push(\"scale\"),s=\"getScaleAtOutCoords()\"),this.outputShape=t,this.userCode=\"\\n      void main() {\\n        float x = getXAtOutCoords();\\n        float mean = getMeanAtOutCoords();\\n        float variance = getVarianceAtOutCoords();\\n        float offset = \"+i+\";\\n        float scale = \"+s+\";\\n        float inv = scale * inversesqrt(variance + float(\"+a+\"));\\n        setOutput(dot(vec3(x, -mean, offset), vec3(inv, inv, 1)));\\n      }\\n    \"},vi=function(t,e,n,r,o,a){this.packedInputs=!0,this.packedOutput=!0,this.variableNames=[\"x\",\"mean\",\"variance\"],Pr(t,e),Pr(t,n);var i=\"vec4(0.0)\";null!=r&&(Pr(t,r),this.variableNames.push(\"offset\"),i=\"getOffsetAtOutCoords()\");var s=\"vec4(1.0)\";null!=o&&(Pr(t,o),this.variableNames.push(\"scale\"),s=\"getScaleAtOutCoords()\"),this.outputShape=t,this.userCode=\"\\n      void main() {\\n        vec4 offset = \"+i+\";\\n        vec4 scale = \"+s+\";\\n\\n        vec4 x = getXAtOutCoords();\\n        vec4 mean = getMeanAtOutCoords();\\n        vec4 variance = getVarianceAtOutCoords();\\n\\n        vec4 inv = scale * inversesqrt(variance + vec4(\"+a+\"));\\n\\n        setOutput((x - mean) * inv + offset);\\n      }\\n    \"},gi=\"return areal * breal - aimag * bimag;\",mi=\"return areal * bimag + aimag * breal;\",yi=function(t,e,n){this.variableNames=[\"AReal\",\"AImag\",\"BReal\",\"BImag\"],this.outputShape=Pr(e,n),this.userCode=\"\\n      float binaryOpComplex(\\n          float areal, float aimag, float breal, float bimag) {\\n        \"+t+\"\\n      }\\n\\n      void main() {\\n        float areal = getARealAtOutCoords();\\n        float aimag = getAImagAtOutCoords();\\n        float breal = getBRealAtOutCoords();\\n        float bimag = getBImagAtOutCoords();\\n        setOutput(binaryOpComplex(areal, aimag, breal, bimag));\\n      }\\n    \"},xi=\"return a + b;\",bi=\"return a - b;\",wi=\"return a * b;\",Ci=\"\\nif (a == b) {\\n  return 1.0;\\n};\\nreturn a / b;\",Ei=\"return (a < 0.) ? b * a : a;\",Ri=function(t,e,n){this.variableNames=[\"A\",\"B\"],this.outputShape=Pr(e,n),this.userCode=\"\\n      float binaryOperation(float a, float b) {\\n        \"+t+\"\\n      }\\n\\n      void main() {\\n        float a = getAAtOutCoords();\\n        float b = getBAtOutCoords();\\n        setOutput(binaryOperation(a, b));\\n      }\\n    \"},Ii=\"\\n  // vec4 one = vec4(equal(a, b));\\n  // return one + (vec4(1.0) - one) * a / b;\\n  vec4 result = a / b;\\n  if(a.x == b.x) {\\n    result.x = 1.;\\n  }\\n  if(a.y == b.y) {\\n    result.y = 1.;\\n  }\\n  if(a.z == b.z) {\\n    result.z = 1.;\\n  }\\n  if(a.w == b.w) {\\n    result.w = 1.;\\n  }\\n\\n  return result;\\n\",ki=\"\\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\\n\",Si=function(t,e,n,r){void 0===r&&(r=!1),this.variableNames=[\"A\",\"B\"],this.supportsBroadcasting=!0,this.packedInputs=!0,this.packedOutput=!0,this.outputShape=Pr(e,n);var o=this.outputShape.length,a=\"\";if(r)if(0===o||1===k(this.outputShape))a=\"\\n          result.y = 0.;\\n          result.z = 0.;\\n          result.w = 0.;\\n        \";else if(a=\"\\n          \"+ui(o)+\" coords = getOutputCoords();\\n        \",1===o)a+=\"\\n            result.y = (coords + 1) >= \"+this.outputShape[0]+\" ? 0. : result.y;\\n            result.z = 0.;\\n            result.w = 0.;\\n          \";else{var i=Xa(\"coords\",o);a+=\"\\n            bool nextRowOutOfBounds =\\n              (\"+i[o-2]+\" + 1) >= \"+this.outputShape[o-2]+\";\\n            bool nextColOutOfBounds =\\n              (\"+i[o-1]+\" + 1) >= \"+this.outputShape[o-1]+\";\\n            result.y = nextColOutOfBounds ? 0. : result.y;\\n            result.z = nextRowOutOfBounds ? 0. : result.z;\\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\\n          \"}this.userCode=\"\\n      vec4 binaryOperation(vec4 a, vec4 b) {\\n        \"+t+\"\\n      }\\n\\n      void main() {\\n        vec4 a = getAAtOutCoords();\\n        vec4 b = getBAtOutCoords();\\n\\n        vec4 result = binaryOperation(a, b);\\n        \"+a+\"\\n\\n        setOutput(result);\\n      }\\n    \"},Ai=function(){function t(t){this.variableNames=[\"A\"],this.outputShape=t,this.userCode=\"\\n      uniform float minVal;\\n      uniform float maxVal;\\n\\n      void main() {\\n        float value = getAAtOutCoords();\\n        if (isnan(value)) {\\n          setOutput(value);\\n          return;\\n        }\\n\\n        setOutput(clamp(value, minVal, maxVal));\\n      }\\n    \"}return t.prototype.getCustomSetupFunc=function(t,e){var n=this;return function(r,o){null==n.minLoc&&(n.minLoc=r.getUniformLocationNoThrow(o,\"minVal\"),n.maxLoc=r.getUniformLocationNoThrow(o,\"maxVal\")),r.gl.uniform1f(n.minLoc,t),r.gl.uniform1f(n.maxLoc,e)}},t}(),Ti=function(){function t(t){this.variableNames=[\"A\"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t,this.userCode=\"\\n      uniform float minVal;\\n      uniform float maxVal;\\n\\n      void main() {\\n        vec4 value = getAAtOutCoords();\\n\\n        if (any(isnan(value))) {\\n          setOutput(value);\\n          return;\\n        }\\n\\n        setOutput(clamp(value, vec4(minVal), vec4(maxVal)));\\n      }\\n    \"}return t.prototype.getCustomSetupFunc=function(t,e){var n=this;return function(r,o){null==n.minLoc&&(n.minLoc=r.getUniformLocationNoThrow(o,\"minVal\"),n.maxLoc=r.getUniformLocationNoThrow(o,\"maxVal\")),r.gl.uniform1f(n.minLoc,t),r.gl.uniform1f(n.maxLoc,e)}},t}(),Di=function(t){this.variableNames=[\"real\",\"imag\"],this.outputShape=t,this.userCode=\"\\n      void main() {\\n        float re = abs(getRealAtOutCoords());\\n        float im = abs(getImagAtOutCoords());\\n        float mx = max(re, im);\\n\\n        // sadly the length function in glsl is not underflow-safe\\n        // (at least not on Intel GPUs). So the safe solution is\\n        // to ensure underflow-safety in all cases.\\n        setOutput(\\n          mx == 0.0 ? 0.0 : mx * length(vec2(1, min(re, im)/mx))\\n        );\\n      }\\n    \"},Ni=function(t){this.outputShape=[],this.outputShape=Sn(t,1),this.variableNames=t.map((function(t,e){return\"T\"+e}));var e=new Array(t.length-1);e[0]=t[0][1];for(var n=1;n<e.length;n++)e[n]=e[n-1]+t[n][1];var r=[\"if (yC < \"+e[0]+\") setOutput(getT0(yR, yC));\"];for(n=1;n<e.length;n++){var o=e[n-1];r.push(\"else if (yC < \"+e[n]+\") setOutput(getT\"+n+\"(yR, yC-\"+o+\"));\")}var a=e.length,i=e[e.length-1];r.push(\"else setOutput(getT\"+a+\"(yR, yC-\"+i+\"));\"),this.userCode=\"\\n      void main() {\\n        ivec2 coords = getOutputCoords();\\n        int yR = coords.x;\\n        int yC = coords.y;\\n\\n        \"+r.join(\"\\n        \")+\"\\n      }\\n    \"},Fi=function(t,e){this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[],this.outputShape=Sn(t,e);var n=this.outputShape,r=n.length,o=ui(r),a=Xa(\"coords\",r),i=[\"x\",\"y\",\"z\",\"w\",\"u\",\"v\"].slice(0,r);this.variableNames=t.map((function(t,e){return\"T\"+e}));var s=new Array(t.length-1);s[0]=t[0][e];for(var u=1;u<s.length;u++)s[u]=s[u-1]+t[u][e];var c=i[e],l=i.slice(-2),h=i.join(),f=\"if (\"+c+\" < \"+s[0]+\") {\\n        return getChannel(\\n            getT0(\"+h+\"), vec2(\"+l.join()+\"));\\n        }\";for(u=1;u<s.length;u++){var d=s[u-1];f+=\"\\n        if (\"+c+\" < \"+s[u]+\"  && \"+c+\" >= \"+s[u-1]+\") {\\n          return getChannel(\\n            getT\"+u+\"(\"+_i(i,c,d)+\"),\\n            vec2(\"+_i(l,c,d)+\"));\\n        }\"}var p=s.length,v=s[s.length-1];f+=\"\\n        return getChannel(\\n          getT\"+p+\"(\"+_i(i,c,v)+\"),\\n          vec2(\"+_i(l,c,v)+\"));\",this.userCode=\"\\n      float getValue(\"+i.map((function(t){return\"int \"+t}))+\") {\\n        \"+f+\"\\n      }\\n\\n      void main() {\\n        \"+o+\" coords = getOutputCoords();\\n        vec4 result = vec4(getValue(\"+a+\"), 0., 0., 0.);\\n\\n        \"+a[r-1]+\" = \"+a[r-1]+\" + 1;\\n        if (\"+a[r-1]+\" < \"+n[r-1]+\") {\\n          result.g = getValue(\"+a+\");\\n        }\\n\\n        \"+a[r-2]+\" = \"+a[r-2]+\" + 1;\\n        if (\"+a[r-2]+\" < \"+n[r-2]+\") {\\n          result.a = getValue(\"+a+\");\\n        }\\n\\n        \"+a[r-1]+\" = \"+a[r-1]+\" - 1;\\n        if (\"+a[r-2]+\" < \"+n[r-2]+\" &&\\n            \"+a[r-1]+\" < \"+n[r-1]+\") {\\n          result.b = getValue(\"+a+\");\\n        }\\n        setOutput(result);\\n      }\\n    \"};function _i(t,e,n){var r=t.indexOf(e);return t.map((function(t,e){return e===r?t+\" - \"+n:t})).join()}var Oi=function(t){this.variableNames=[\"x\",\"dy\"],this.outputShape=t.filterShape;var e=t.strideHeight,n=t.strideWidth,r=t.padInfo.top,o=t.padInfo.left,a=\"channelsLast\"===t.dataFormat;this.userCode=\"\\n      void main() {\\n        ivec4 coords = getOutputCoords();\\n        int wR = coords.x;\\n        int wC = coords.y;\\n        int d1 = coords.z;\\n        int d2 = coords.w;\\n\\n        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).\\n        // ? = to be determined. : = across all values in that axis.\\n        float dotProd = 0.0;\\n\\n        for (int b = 0; b < \"+t.batchSize+\"; b++) {\\n          for (int yR = 0; yR < \"+t.outHeight+\"; yR++) {\\n            int xR = wR + yR * \"+e+\" - \"+r+\";\\n\\n            if (xR < 0 || xR >= \"+t.inHeight+\") {\\n              continue;\\n            }\\n\\n            for (int yC = 0; yC < \"+t.outWidth+\"; yC++) {\\n              int xC = wC + yC * \"+n+\" - \"+o+\";\\n\\n              if (xC < 0 || xC >= \"+t.inWidth+\") {\\n                continue;\\n              }\\n\\n              if (\"+a+\") {\\n                float dyValue = getDy(b, yR, yC, d2);\\n                float xValue = getX(b, xR, xC, d1);\\n                dotProd += (xValue * dyValue);\\n              } else {\\n                float dyValue = getDy(b, d2, yR, yC);\\n                float xValue = getX(b, d1, xR, xC);\\n                dotProd += (xValue * dyValue);\\n              }\\n\\n            }\\n          }\\n        }\\n        setOutput(dotProd);\\n      }\\n    \"},Mi=function(t){this.variableNames=[\"dy\",\"W\"],this.outputShape=t.inShape;var e=t.filterHeight,n=t.filterWidth,r=t.strideHeight,o=t.strideWidth,a=\"channelsLast\"===t.dataFormat,i=e-1-t.padInfo.top,s=n-1-t.padInfo.left,u=a?1:2,c=a?2:3,l=a?3:1;this.userCode=\"\\n      const ivec2 pads = ivec2(\"+i+\", \"+s+\");\\n\\n      void main() {\\n        ivec4 coords = getOutputCoords();\\n        int batch = coords[0];\\n        int d1 = coords[\"+l+\"];\\n\\n        ivec2 dyCorner = ivec2(coords[\"+u+\"], coords[\"+c+\"]) - pads;\\n        int dyRCorner = dyCorner.x;\\n        int dyCCorner = dyCorner.y;\\n\\n        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\\n        // ? = to be determined. : = across all values in that axis.\\n        float dotProd = 0.0;\\n        for (int wR = 0; wR < \"+e+\"; wR++) {\\n          float dyR = float(dyRCorner + wR) / \"+r+\".0;\\n\\n          if (dyR < 0.0 || dyR >= \"+t.outHeight+\".0 || fract(dyR) > 0.0) {\\n            continue;\\n          }\\n          int idyR = int(dyR);\\n\\n          int wRPerm = \"+e+\" - 1 - wR;\\n\\n          for (int wC = 0; wC < \"+n+\"; wC++) {\\n            float dyC = float(dyCCorner + wC) / \"+o+\".0;\\n\\n            if (dyC < 0.0 || dyC >= \"+t.outWidth+\".0 ||\\n                fract(dyC) > 0.0) {\\n              continue;\\n            }\\n            int idyC = int(dyC);\\n\\n            int wCPerm = \"+n+\" - 1 - wC;\\n\\n            for (int d2 = 0; d2 < \"+t.outChannels+\"; d2++) {\\n\\n              if (\"+a+\") {\\n                float xValue = getDy(batch, idyR, idyC, d2);\\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\\n                dotProd += xValue * wValue;\\n              } else {\\n                float xValue = getDy(batch, d2, idyR, idyC);\\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\\n                dotProd += xValue * wValue;\\n              }\\n\\n            }\\n          }\\n        }\\n        setOutput(dotProd);\\n      }\\n    \"},Bi=function(t){this.variableNames=[\"x\",\"dy\"],this.outputShape=t.filterShape;var e=t.strideDepth,n=t.strideHeight,r=t.strideWidth,o=t.padInfo.front,a=t.padInfo.top,i=t.padInfo.left;this.userCode=\"\\n      void main() {\\n        ivec5 coords = getOutputCoords();\\n        int wF = coords.x;\\n        int wR = coords.y;\\n        int wC = coords.z;\\n        int d1 = coords.w;\\n        int d2 = coords.u;\\n\\n        float dotProd = 0.0;\\n\\n        for (int b = 0; b < \"+t.batchSize+\"; b++) {\\n          for (int yF = 0; yF < \"+t.outDepth+\"; yF++) {\\n            int xF = wF + yF * \"+e+\" - \"+o+\";\\n\\n            if (xF < 0 || xF >= \"+t.inDepth+\") {\\n              continue;\\n            }\\n\\n            for (int yR = 0; yR < \"+t.outHeight+\"; yR++) {\\n              int xR = wR + yR * \"+n+\" - \"+a+\";\\n\\n              if (xR < 0 || xR >= \"+t.inHeight+\") {\\n                continue;\\n              }\\n\\n              for (int yC = 0; yC < \"+t.outWidth+\"; yC++) {\\n                int xC = wC + yC * \"+r+\" - \"+i+\";\\n\\n                if (xC < 0 || xC >= \"+t.inWidth+\") {\\n                  continue;\\n                }\\n\\n                float dyValue = getDy(b, yF, yR, yC, d2);\\n                float xValue = getX(b, xF, xR, xC, d1);\\n                dotProd += (xValue * dyValue);\\n              }\\n            }\\n          }\\n        }\\n        setOutput(dotProd);\\n      }\\n    \"},Pi=function(t){this.variableNames=[\"dy\",\"W\"],this.outputShape=t.inShape;var e=t.filterDepth,n=t.filterHeight,r=t.filterWidth,o=t.strideDepth,a=t.strideHeight,i=t.strideWidth,s=e-1-t.padInfo.front,u=n-1-t.padInfo.top,c=r-1-t.padInfo.left;this.userCode=\"\\n      const ivec3 pads = ivec3(\"+s+\", \"+u+\", \"+c+\");\\n\\n      void main() {\\n        ivec5 coords = getOutputCoords();\\n        int batch = coords.x;\\n        int d1 = coords.u;\\n\\n\\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\\n        int dyFCorner = dyCorner.x;\\n        int dyRCorner = dyCorner.y;\\n        int dyCCorner = dyCorner.z;\\n\\n        float dotProd = 0.0;\\n        for (int wF = 0; wF < \"+e+\"; wF++) {\\n          float dyF = float(dyFCorner + wF) / \"+o+\".0;\\n\\n          if (dyF < 0.0 || dyF >= \"+t.outDepth+\".0 || fract(dyF) > 0.0) {\\n            continue;\\n          }\\n          int idyF = int(dyF);\\n\\n          int wFPerm = \"+e+\" - 1 - wF;\\n\\n          for (int wR = 0; wR < \"+n+\"; wR++) {\\n            float dyR = float(dyRCorner + wR) / \"+a+\".0;\\n\\n            if (dyR < 0.0 || dyR >= \"+t.outHeight+\".0 ||\\n              fract(dyR) > 0.0) {\\n              continue;\\n            }\\n            int idyR = int(dyR);\\n\\n            int wRPerm = \"+n+\" - 1 - wR;\\n\\n            for (int wC = 0; wC < \"+r+\"; wC++) {\\n              float dyC = float(dyCCorner + wC) / \"+i+\".0;\\n\\n              if (dyC < 0.0 || dyC >= \"+t.outWidth+\".0 ||\\n                  fract(dyC) > 0.0) {\\n                continue;\\n              }\\n              int idyC = int(dyC);\\n\\n              int wCPerm = \"+r+\" - 1 - wC;\\n\\n              for (int d2 = 0; d2 < \"+t.outChannels+\"; d2++) {\\n                float xValue = getDy(batch, idyF, idyR, idyC, d2);\\n                float wValue = getW(wFPerm, wRPerm, wCPerm, d1, d2);\\n                dotProd += xValue * wValue;\\n              }\\n            }\\n          }\\n        }\\n        setOutput(dotProd);\\n      }\\n    \"},Li=function(t){this.variableNames=[\"x\",\"dy\"],this.outputShape=t.filterShape;var e=t.strideHeight,n=t.strideWidth,r=t.padInfo.top,o=t.padInfo.left,a=t.outChannels/t.inChannels;this.userCode=\"\\n      void main() {\\n        ivec4 coords = getOutputCoords();\\n        int wR = coords.x;\\n        int wC = coords.y;\\n        int d1 = coords.z;\\n        int dm = coords.w;\\n        int d2 = d1 * \"+a+\" + dm;\\n\\n        float dotProd = 0.0;\\n\\n        // TO DO: Vec4 over the batch size\\n        for (int b = 0; b < \"+t.batchSize+\"; b++) {\\n          for (int yR = 0; yR < \"+t.outHeight+\"; yR++) {\\n            int xR = wR + yR * \"+e+\" - \"+r+\";\\n\\n            if (xR < 0 || xR >= \"+t.inHeight+\") {\\n              continue;\\n            }\\n\\n            for (int yC = 0; yC < \"+t.outWidth+\"; yC++) {\\n              int xC = wC + yC * \"+n+\" - \"+o+\";\\n\\n              if (xC < 0 || xC >= \"+t.inWidth+\") {\\n                continue;\\n              }\\n\\n              float dyValue = getDy(b, yR, yC, d2);\\n              float xValue = getX(b, xR, xC, d1);\\n              dotProd += (xValue * dyValue);\\n            }\\n          }\\n        }\\n        setOutput(dotProd);\\n      }\\n    \"},Wi=function(t){this.variableNames=[\"dy\",\"W\"],this.outputShape=t.inShape;var e=t.filterHeight,n=t.filterWidth,r=t.strideHeight,o=t.strideWidth,a=e-1-t.padInfo.top,i=n-1-t.padInfo.left,s=t.outChannels/t.inChannels;this.userCode=\"\\n      const ivec2 pads = ivec2(\"+a+\", \"+i+\");\\n\\n      void main() {\\n        ivec4 coords = getOutputCoords();\\n        int batch = coords[0];\\n        int d1 = coords[3];\\n        ivec2 dyCorner = coords.yz - pads;\\n        int dyRCorner = dyCorner.x;\\n        int dyCCorner = dyCorner.y;\\n\\n        float dotProd = 0.0;\\n\\n        for (int wR = 0; wR < \"+e+\"; wR++) {\\n          float dyR = float(dyRCorner + wR) / \"+r+\".0;\\n\\n          if (dyR < 0.0 || dyR >= \"+t.outHeight+\".0 || fract(dyR) > 0.0) {\\n            continue;\\n          }\\n          int idyR = int(dyR);\\n\\n          int wRPerm = \"+e+\" - 1 - wR;\\n\\n          for (int wC = 0; wC < \"+n+\"; wC++) {\\n            float dyC = float(dyCCorner + wC) / \"+o+\".0;\\n\\n            if (dyC < 0.0 || dyC >= \"+t.outWidth+\".0 ||\\n                fract(dyC) > 0.0) {\\n              continue;\\n            }\\n            int idyC = int(dyC);\\n\\n            int wCPerm = \"+n+\" - 1 - wC;\\n\\n            // TO DO: Vec4 over the channelMul\\n            for (int dm = 0; dm < \"+s+\"; dm++) {\\n              int d2 = d1 * \"+s+\" + dm;\\n              float xValue = getDy(batch, idyR, idyC, d2);\\n              float wValue = getW(wRPerm, wCPerm, d1, dm);\\n              dotProd += xValue * wValue;\\n            }\\n          }\\n        }\\n        setOutput(dotProd);\\n      }\\n    \"},Ui=function(t,e,n,r){void 0===e&&(e=!1),void 0===n&&(n=null),void 0===r&&(r=!1),this.variableNames=[\"x\",\"W\"],this.outputShape=t.outShape;var o=t.padInfo.top,a=t.padInfo.left,i=t.strideHeight,s=t.strideWidth,u=t.dilationHeight,c=t.dilationWidth,l=t.filterHeight,h=t.filterWidth,f=4*Math.floor(t.inChannels/4),d=t.inChannels%4,p=\"channelsLast\"===t.dataFormat,v=p?1:2,g=p?2:3,m=p?3:1,y=\"\",x=\"\";n&&(y=r?\"float activation(float a) {\\n          float b = getPreluActivationWeightsAtOutCoords();\\n          \"+n+\"\\n        }\":\"\\n          float activation(float x) {\\n            \"+n+\"\\n          }\\n        \",x=\"result = activation(result);\");var b=e?\"result += getBiasAtOutCoords();\":\"\";e&&this.variableNames.push(\"bias\"),r&&this.variableNames.push(\"preluActivationWeights\"),this.userCode=\"\\n      \"+y+\"\\n\\n      const ivec2 strides = ivec2(\"+i+\", \"+s+\");\\n      const ivec2 pads = ivec2(\"+o+\", \"+a+\");\\n\\n      void main() {\\n        ivec4 coords = getOutputCoords();\\n        int batch = coords[0];\\n        int d2 = coords[\"+m+\"];\\n\\n        ivec2 xRCCorner =\\n            ivec2(coords[\"+v+\"], coords[\"+g+\"]) * strides - pads;\\n        int xRCorner = xRCCorner.x;\\n        int xCCorner = xRCCorner.y;\\n\\n        // Convolve x(?, ?, d1) with w(:, :, d1, d2) to get y(yR, yC, d2).\\n        // ? = to be determined. : = across all values in that axis.\\n        float dotProd = 0.0;\\n        for (int wR = 0; wR < \"+l+\"; wR++) {\\n          int xR = xRCorner + wR * \"+u+\";\\n\\n          if (xR < 0 || xR >= \"+t.inHeight+\") {\\n            continue;\\n          }\\n\\n          for (int wC = 0; wC < \"+h+\"; wC++) {\\n            int xC = xCCorner + wC * \"+c+\";\\n\\n            if (xC < 0 || xC >= \"+t.inWidth+\") {\\n              continue;\\n            }\\n\\n            for (int d1 = 0; d1 < \"+f+\"; d1 += 4) {\\n              vec4 wValues = vec4(\\n                getW(wR, wC, d1, d2),\\n                getW(wR, wC, d1 + 1, d2),\\n                getW(wR, wC, d1 + 2, d2),\\n                getW(wR, wC, d1 + 3, d2)\\n              );\\n\\n              if (\"+p+\") {\\n                vec4 xValues = vec4(\\n                  getX(batch, xR, xC, d1),\\n                  getX(batch, xR, xC, d1 + 1),\\n                  getX(batch, xR, xC, d1 + 2),\\n                  getX(batch, xR, xC, d1 + 3)\\n                );\\n                dotProd += dot(xValues, wValues);\\n              } else {\\n                vec4 xValues = vec4(\\n                  getX(batch, d1, xR, xC),\\n                  getX(batch, d1 + 1, xR, xC),\\n                  getX(batch, d1 + 2, xR, xC),\\n                  getX(batch, d1 + 3, xR, xC)\\n                );\\n                dotProd += dot(xValues, wValues);\\n              }\\n            }\\n\\n            if (\"+(1===d)+\") {\\n\\n              if (\"+p+\") {\\n                dotProd +=\\n                    getX(batch, xR, xC, \"+f+\") *\\n                    getW(wR, wC, \"+f+\", d2);\\n              } else {\\n                dotProd +=\\n                    getX(batch, \"+f+\", xR, xC) *\\n                    getW(wR, wC, \"+f+\", d2);\\n              }\\n\\n            } else if (\"+(2===d)+\") {\\n              vec2 wValues = vec2(\\n                getW(wR, wC, \"+f+\", d2),\\n                getW(wR, wC, \"+f+\" + 1, d2)\\n              );\\n\\n              if (\"+p+\") {\\n                vec2 xValues = vec2(\\n                  getX(batch, xR, xC, \"+f+\"),\\n                  getX(batch, xR, xC, \"+f+\" + 1)\\n                );\\n                dotProd += dot(xValues, wValues);\\n              } else {\\n                vec2 xValues = vec2(\\n                  getX(batch, \"+f+\", xR, xC),\\n                  getX(batch, \"+f+\" + 1, xR, xC)\\n                );\\n                dotProd += dot(xValues, wValues);\\n              }\\n\\n            } else if (\"+(3===d)+\") {\\n              vec3 wValues = vec3(\\n                getW(wR, wC, \"+f+\", d2),\\n                getW(wR, wC, \"+f+\" + 1, d2),\\n                getW(wR, wC, \"+f+\" + 2, d2)\\n              );\\n\\n              if (\"+p+\") {\\n                vec3 xValues = vec3(\\n                  getX(batch, xR, xC, \"+f+\"),\\n                  getX(batch, xR, xC, \"+f+\" + 1),\\n                  getX(batch, xR, xC, \"+f+\" + 2)\\n                );\\n                dotProd += dot(xValues, wValues);\\n              } else {\\n                vec3 xValues = vec3(\\n                  getX(batch, \"+f+\", xR, xC),\\n                  getX(batch, \"+f+\" + 1, xR, xC),\\n                  getX(batch, \"+f+\" + 2, xR, xC)\\n                );\\n                dotProd += dot(xValues, wValues);\\n              }\\n\\n            }\\n          }\\n        }\\n\\n        float result = dotProd;\\n        \"+b+\"\\n        \"+x+\"\\n        setOutput(result);\\n      }\\n    \"},Vi=function(t){this.variableNames=[\"x\",\"W\"],this.outputShape=t.outShape;var e=t.padInfo.front,n=t.padInfo.top,r=t.padInfo.left,o=t.strideDepth,a=t.strideHeight,i=t.strideWidth,s=t.dilationDepth,u=t.dilationHeight,c=t.dilationWidth,l=t.filterDepth,h=t.filterHeight,f=t.filterWidth,d=4*Math.floor(t.inChannels/4),p=t.inChannels%4;this.userCode=\"\\n      const ivec3 strides = ivec3(\"+o+\", \"+a+\", \"+i+\");\\n      const ivec3 pads = ivec3(\"+e+\", \"+n+\", \"+r+\");\\n\\n      void main() {\\n        ivec5 coords = getOutputCoords();\\n        int batch = coords.x;\\n        int d2 = coords.u;\\n\\n        ivec3 xFRCCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\\n        int xFCorner = xFRCCorner.x;\\n        int xRCorner = xFRCCorner.y;\\n        int xCCorner = xFRCCorner.z;\\n\\n        // Convolve x(?, ?, ?, d1) with w(:, :, :, d1, d2) to get\\n        // y(yF, yR, yC, d2). ? = to be determined. : = across all\\n        // values in that axis.\\n        float dotProd = 0.0;\\n        for (int wF = 0; wF < \"+l+\"; wF++) {\\n          int xF = xFCorner + wF * \"+s+\";\\n\\n          if (xF < 0 || xF >= \"+t.inDepth+\") {\\n            continue;\\n          }\\n\\n          for (int wR = 0; wR < \"+h+\"; wR++) {\\n            int xR = xRCorner + wR * \"+u+\";\\n\\n            if (xR < 0 || xR >= \"+t.inHeight+\") {\\n              continue;\\n            }\\n\\n            for (int wC = 0; wC < \"+f+\"; wC++) {\\n              int xC = xCCorner + wC * \"+c+\";\\n\\n              if (xC < 0 || xC >= \"+t.inWidth+\") {\\n                continue;\\n              }\\n\\n              for (int d1 = 0; d1 < \"+d+\"; d1 += 4) {\\n                vec4 xValues = vec4(\\n                  getX(batch, xF, xR, xC, d1),\\n                  getX(batch, xF, xR, xC, d1 + 1),\\n                  getX(batch, xF, xR, xC, d1 + 2),\\n                  getX(batch, xF, xR, xC, d1 + 3)\\n                );\\n                vec4 wValues = vec4(\\n                  getW(wF, wR, wC, d1, d2),\\n                  getW(wF, wR, wC, d1 + 1, d2),\\n                  getW(wF, wR, wC, d1 + 2, d2),\\n                  getW(wF, wR, wC, d1 + 3, d2)\\n                );\\n\\n                dotProd += dot(xValues, wValues);\\n              }\\n\\n              if (\"+(1===p)+\") {\\n                dotProd +=\\n                  getX(batch, xF, xR, xC, \"+d+\") *\\n                  getW(wF, wR, wC, \"+d+\", d2);\\n              } else if (\"+(2===p)+\") {\\n                vec2 xValues = vec2(\\n                  getX(batch, xF, xR, xC, \"+d+\"),\\n                  getX(batch, xF, xR, xC, \"+d+\" + 1)\\n                );\\n                vec2 wValues = vec2(\\n                  getW(wF, wR, wC, \"+d+\", d2),\\n                  getW(wF, wR, wC, \"+d+\" + 1, d2)\\n                );\\n                dotProd += dot(xValues, wValues);\\n              } else if (\"+(3===p)+\") {\\n                vec3 xValues = vec3(\\n                  getX(batch, xF, xR, xC, \"+d+\"),\\n                  getX(batch, xF, xR, xC, \"+d+\" + 1),\\n                  getX(batch, xF, xR, xC, \"+d+\" + 2)\\n                );\\n                vec3 wValues = vec3(\\n                  getW(wF, wR, wC, \"+d+\", d2),\\n                  getW(wF, wR, wC, \"+d+\" + 1, d2),\\n                  getW(wF, wR, wC, \"+d+\" + 2, d2)\\n                );\\n                dotProd += dot(xValues, wValues);\\n              }\\n            }\\n          }\\n        }\\n        setOutput(dotProd);\\n      }\\n    \"},zi=function(t,e,n,r){void 0===e&&(e=!1),void 0===n&&(n=null),void 0===r&&(r=!1),this.variableNames=[\"x\",\"W\"],this.outputShape=t.outShape;var o=t.inHeight,a=t.inWidth,i=t.padInfo.top,s=t.padInfo.left,u=t.strideHeight,c=t.strideWidth,l=t.dilationHeight,h=t.dilationWidth,f=t.filterHeight,d=t.filterWidth,p=t.outChannels/t.inChannels,v=\"\",g=\"\";n&&(v=r?\"float activation(float a) {\\n          float b = getPreluActivationWeightsAtOutCoords();\\n          \"+n+\"\\n        }\":\"\\n          float activation(float x) {\\n            \"+n+\"\\n          }\\n        \",g=\"result = activation(result);\");var m=e?\"result += getBiasAtOutCoords();\":\"\";e&&this.variableNames.push(\"bias\"),r&&this.variableNames.push(\"preluActivationWeights\"),this.userCode=\"\\n      \"+v+\"\\n\\n      const ivec2 strides = ivec2(\"+u+\", \"+c+\");\\n      const ivec2 pads = ivec2(\"+i+\", \"+s+\");\\n\\n      void main() {\\n        ivec4 coords = getOutputCoords();\\n        int batch = coords.x;\\n        ivec2 xRCCorner = coords.yz * strides - pads;\\n        int d2 = coords.w;\\n        int d1 = d2 / \"+p+\";\\n        int q = d2 - d1 * \"+p+\";\\n\\n        int xRCorner = xRCCorner.x;\\n        int xCCorner = xRCCorner.y;\\n\\n        // Convolve x(?, ?, d1) with w(:, :, d1, q) to get y(yR, yC, d2).\\n        // ? = to be determined. : = across all values in that axis.\\n        float dotProd = 0.0;\\n        // TO DO(dsmilkov): Flatten the two for loops and vec4 the operations.\\n        for (int wR = 0; wR < \"+f+\"; wR++) {\\n          int xR = xRCorner + wR * \"+l+\";\\n\\n          if (xR < 0 || xR >= \"+o+\") {\\n            continue;\\n          }\\n\\n          for (int wC = 0; wC < \"+d+\"; wC++) {\\n            int xC = xCCorner + wC * \"+h+\";\\n\\n            if (xC < 0 || xC >= \"+a+\") {\\n              continue;\\n            }\\n\\n            float xVal = getX(batch, xR, xC, d1);\\n            float wVal = getW(wR, wC, d1, q);\\n            dotProd += xVal * wVal;\\n          }\\n        }\\n\\n        float result = dotProd;\\n        \"+m+\"\\n        \"+g+\"\\n        setOutput(result);\\n      }\\n    \"},Gi=function(t,e,n,r){void 0===e&&(e=!1),void 0===n&&(n=null),void 0===r&&(r=!1),this.variableNames=[\"x\",\"W\"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t.outShape;for(var o=t.inHeight,a=t.inWidth,i=t.padInfo.top,s=t.padInfo.left,u=t.strideHeight,c=t.strideWidth,l=t.dilationHeight,h=t.dilationWidth,f=t.filterHeight,d=t.filterWidth,p=d,v=\"int xR; int xC; int xCOffset;\",g=0;g<f;g++)for(var m=0;m<d;m++)v+=\"\\n          vec4 xTexelR\"+g+\"C\"+2*m+\" = vec4(0.);\\n          vec4 wR\"+g+\"C\"+m+\" = vec4(0.);\\n          vec4 xR\"+g+\"C\"+m+\" = vec4(0.);\";for(g=0;g<f;g++)for(var y=0;y<p;y++){if(v+=\"\\n          xR = xRCorner + \"+g*l+\";\\n          xC = xCCorner + \"+(m=2*y)*h+\";\\n        \",1===c){if(m<d&&(v+=s%2==1?\"\\n                xCOffset = xC + 1;\\n                if(xR >= 0 && xR < \"+o+\" && xCOffset >= 0 && xCOffset < \"+a+\") {\\n                  xTexelR\"+g+\"C\"+m+\" = getX(batch, xR, xCOffset, d1);\\n\\n                  // Need to manually clear unused channels in case\\n                  // we're reading from recycled texture.\\n                  if(xCOffset + 1 >= \"+a+\") {\\n                    xTexelR\"+g+\"C\"+m+\".zw = vec2(0.);\\n                  }\\n                } else {\\n                  xTexelR\"+g+\"C\"+m+\" = vec4(0.);\\n                }\\n\\n                xCOffset = xC + 1 - 2;\\n                if(xR >= 0 && xR < \"+o+\" && xCOffset >= 0 && xCOffset < \"+a+\") {\\n                  vec4 previous = getX(batch, xR, xCOffset, d1);\\n\\n                  // Need to manually clear unused channels in case\\n                  // we're reading from recycled texture.\\n                  if(xCOffset + 1 >= \"+a+\") {\\n                    previous.zw = vec2(0.);\\n                  }\\n\\n                  xR\"+g+\"C\"+m+\" = vec4(previous.zw, xTexelR\"+g+\"C\"+m+\".xy);\\n                } else {\\n                  xR\"+g+\"C\"+m+\" = vec4(0, 0, xTexelR\"+g+\"C\"+m+\".xy);\\n                }\\n              \":\"\\n                if(xR >= 0 && xR < \"+o+\" && xC >= 0 && xC < \"+a+\") {\\n                  xTexelR\"+g+\"C\"+m+\" = getX(batch, xR, xC, d1);\\n                } else {\\n                  xTexelR\"+g+\"C\"+m+\" = vec4(0.);\\n                }\\n\\n                xR\"+g+\"C\"+m+\" = xTexelR\"+g+\"C\"+m+\";\\n              \",m+1<d)){var x=s%2==0?b(h):h;h%2==0&&s%2==1||h%2!=0&&s%2!=1?(v+=\"\\n                  xCOffset = xC + \"+s%2+\" + \"+x+\";\\n\\n                  if(xR >= 0 && xR < \"+o+\" &&\\n                    xCOffset >= 0 && xCOffset < \"+a+\") {\\n                    xTexelR\"+g+\"C\"+(m+2)+\" = getX(batch, xR, xCOffset, d1);\\n                  }\\n                \",h>1&&(v+=\"\\n                    xCOffset -= 2;\\n                    if(xR >= 0 && xR < \"+o+\" &&\\n                      xCOffset >= 0 && xCOffset < \"+a+\") {\\n                      xTexelR\"+g+\"C\"+m+\" = getX(batch, xR, xCOffset, d1);\\n                    } else {\\n                      xTexelR\"+g+\"C\"+m+\" = vec4(0.);\\n                    }\\n                  \"),v+=\"\\n                  xR\"+g+\"C\"+(m+1)+\" = vec4(\\n                    xTexelR\"+g+\"C\"+m+\".zw, xTexelR\"+g+\"C\"+(m+2)+\".xy);\\n                \"):v+=\"\\n                  xCOffset = xC + \"+x+\";\\n\\n                  if(xR >= 0 && xR < \"+o+\" &&\\n                    xCOffset >= 0 && xCOffset < \"+a+\") {\\n                    xTexelR\"+g+\"C\"+(m+2)+\" = getX(batch, xR, xCOffset, d1);\\n                  }\\n\\n                  xR\"+g+\"C\"+(m+1)+\" = xTexelR\"+g+\"C\"+(m+2)+\";\\n                \"}}else m<d&&(v+=\"\\n              if(xR >= 0 && xR < \"+o+\") {\\n            \",s%2==1?(v+=\"\\n                xCOffset = xC + 1 - \"+c+\";\\n                if(xCOffset >= 0 && xCOffset < \"+a+\") {\\n                  xTexelR\"+g+\"C\"+m+\" = getX(batch, xR, xCOffset, d1);\\n                } else {\\n                  xTexelR\"+g+\"C\"+m+\" = vec4(0.);\\n                }\\n\\n                if(xC + 1 >= 0 && xC + 1 < \"+a+\") {\\n                  xTexelR\"+g+\"C\"+(m+2)+\" = getX(batch, xR, xC + 1, d1);\\n                } else {\\n                  xTexelR\"+g+\"C\"+(m+2)+\" = vec4(0.);\\n                }\\n\\n                xR\"+g+\"C\"+m+\" = vec4(\\n                  xTexelR\"+g+\"C\"+m+\".zw, xTexelR\"+g+\"C\"+(m+2)+\".zw);\\n              \",m+1<d&&(v+=\"\\n                  vec4 final = vec4(0.);\\n                  xCOffset = xC + 1 + \"+c+\";\\n                  if(xCOffset >= 0 && xCOffset < \"+a+\") {\\n                    final = getX(batch, xR, xCOffset, d1);\\n                  }\\n                  xR\"+g+\"C\"+(m+1)+\" = vec4(xTexelR\"+g+\"C\"+(m+2)+\".xy, final.xy);\\n                \")):(v+=\"\\n                if(xC >= 0 && xC < \"+a+\") {\\n                  xTexelR\"+g+\"C\"+m+\" = getX(batch, xR, xC, d1);\\n                } else {\\n                  xTexelR\"+g+\"C\"+m+\" = vec4(0.);\\n                }\\n\\n                xCOffset = xC + \"+c+\";\\n                if(xCOffset >= 0 && xCOffset < \"+a+\") {\\n                  xTexelR\"+g+\"C\"+(m+2)+\" = getX(batch, xR, xCOffset, d1);\\n                } else {\\n                  xTexelR\"+g+\"C\"+(m+2)+\" = vec4(0.);\\n                }\\n\\n                xR\"+g+\"C\"+m+\" = vec4(\\n                  xTexelR\"+g+\"C\"+m+\".xy, xTexelR\"+g+\"C\"+(m+2)+\".xy);\\n              \",m+1<d&&(v+=\"\\n                  xR\"+g+\"C\"+(m+1)+\" = vec4(\\n                    xTexelR\"+g+\"C\"+m+\".zw, xTexelR\"+g+\"C\"+(m+2)+\".zw);\\n                \")),v+=\"}\");m<d&&(v+=\"\\n            vec4 wTexelR\"+g+\"C\"+m+\" = getW(\"+g+\", \"+m+\", d1, q);\\n            wR\"+g+\"C\"+m+\" = vec4(wTexelR\"+g+\"C\"+m+\".xz, wTexelR\"+g+\"C\"+m+\".xz);\\n          \",m+1<d&&(v+=\"\\n              vec4 wTexelR\"+g+\"C\"+(m+1)+\" = getW(\"+g+\", \"+(m+1)+\", d1, q);\\n              wR\"+g+\"C\"+(m+1)+\" =\\n                vec4(wTexelR\"+g+\"C\"+(m+1)+\".xz, wTexelR\"+g+\"C\"+(m+1)+\".xz);\"))}for(g=0;g<f;g++)for(m=0;m<d;m++)v+=\"dotProd += xR\"+g+\"C\"+m+\" * wR\"+g+\"C\"+m+\";\";var w=\"\",C=\"\";n&&(w=r?\"vec4 activation(vec4 a) {\\n          vec4 b = getPreluActivationWeightsAtOutCoords();\\n          \"+n+\"\\n        }\":\"vec4 activation(vec4 x) {\\n          \"+n+\"\\n        }\",C=\"result = activation(result);\");var E=e?\"result += getBiasAtOutCoords();\":\"\";e&&this.variableNames.push(\"bias\"),r&&this.variableNames.push(\"preluActivationWeights\"),this.userCode=\"\\n      \"+w+\"\\n\\n      const ivec2 strides = ivec2(\"+u+\", \"+c+\");\\n      const ivec2 pads = ivec2(\"+i+\", \"+s+\");\\n\\n      void main() {\\n\\n        ivec4 coords = getOutputCoords();\\n        int batch = coords.x;\\n        ivec2 xRCCorner = coords.yz * strides - pads;\\n        int d2 = coords.w;\\n        int d1 = d2;\\n        int q = 0;\\n        int xRCorner = xRCCorner.x;\\n        int xCCorner = xRCCorner.y;\\n\\n        vec4 dotProd = vec4(0.);\\n\\n        \"+v+\"\\n\\n        vec4 result = dotProd;\\n        \"+E+\"\\n        \"+C+\"\\n        setOutput(result);\\n      }\\n    \"},Hi=function(t,e,n,r,o){this.variableNames=[\"Image\",\"Boxes\",\"BoxInd\"],this.outputShape=[];var a=t[0],i=t[1],s=t[2],u=t[3],c=e[0],l=n[0],h=n[1];this.outputShape=[c,l,h,u];var f=\"bilinear\"===r?1:0,d=[i-1+\".0\",s-1+\".0\"],p=d[0],v=d[1],g=l>1?[\"\"+(i-1)/(l-1),\"(y2-y1) * height_ratio\",\"y1*\"+p+\" + float(y)*(height_scale)\"]:[\"0.0\",\"0.0\",\"0.5 * (y1+y2) * \"+p],m=g[0],y=g[1],x=g[2],b=h>1?[\"\"+(s-1)/(h-1),\"(x2-x1) * width_ratio\",\"x1*\"+v+\" + float(x)*(width_scale)\"]:[\"0.0\",\"0.0\",\"0.5 * (x1+x2) * \"+v],w=b[0],C=b[1],E=b[2];this.userCode=\"\\n      const float height_ratio = float(\"+m+\");\\n      const float width_ratio = float(\"+w+\");\\n      void main() {\\n        ivec4 coords = getOutputCoords();\\n        int b = coords[0];\\n        int y = coords[1];\\n        int x = coords[2];\\n        int d = coords[3];\\n\\n        // get box vals\\n        float y1 = getBoxes(b,0);\\n        float x1 = getBoxes(b,1);\\n        float y2 = getBoxes(b,2);\\n        float x2 = getBoxes(b,3);\\n\\n        // get image in batch index\\n        int bInd = round(getBoxInd(b));\\n        if(bInd < 0 || bInd >= \"+a+\") {\\n          return;\\n        }\\n\\n        float height_scale = \"+y+\";\\n        float width_scale = \"+C+\";\\n\\n        float in_y = \"+x+\";\\n        if( in_y < 0.0 || in_y > \"+p+\" ) {\\n          setOutput(float(\"+o+\"));\\n          return;\\n        }\\n        float in_x = \"+E+\";\\n        if( in_x < 0.0 || in_x > \"+v+\" ) {\\n          setOutput(float(\"+o+\"));\\n          return;\\n        }\\n\\n        vec2 sourceFracIndexCR = vec2(in_x,in_y);\\n        if(\"+f+\" == 1) {\\n          // Compute the four integer indices.\\n          ivec2 sourceFloorCR = ivec2(sourceFracIndexCR);\\n          ivec2 sourceCeilCR = ivec2(ceil(sourceFracIndexCR));\\n\\n          float topLeft = getImage(b, sourceFloorCR.y, sourceFloorCR.x, d);\\n          float bottomLeft = getImage(b, sourceCeilCR.y, sourceFloorCR.x, d);\\n          float topRight = getImage(b, sourceFloorCR.y, sourceCeilCR.x, d);\\n          float bottomRight = getImage(b, sourceCeilCR.y, sourceCeilCR.x, d);\\n\\n          vec2 fracCR = sourceFracIndexCR - vec2(sourceFloorCR);\\n\\n          float top = topLeft + (topRight - topLeft) * fracCR.x;\\n          float bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR.x;\\n          float newValue = top + (bottom - top) * fracCR.y;\\n          setOutput(newValue);\\n        } else {\\n          // Compute the coordinators of nearest neighbor point.\\n          ivec2 sourceNearestCR = ivec2(floor(\\n            sourceFracIndexCR + vec2(0.5,0.5)));\\n          float newValue = getImage(b, sourceNearestCR.y, sourceNearestCR.x, d);\\n          setOutput(newValue);\\n        }\\n      }\\n    \"},qi=function(t,e,n){this.variableNames=[\"x\"],this.outputShape=t;var r=t.length,o=t[t.length-1],a=n?\"<\":\">\";this.userCode=\"\\n      int getIndex(int i) {\\n        \"+(n?\"return \"+o+\" -i - 1;\":\"return i;\")+\"\\n      }\\n\\n      void main() {\\n        \"+ui(r)+\" coords = getOutputCoords();\\n        int end = \"+Ki(r,\"coords\")+\";\\n        float val = 0.0;\\n        for (int i = \"+o+\" - 1; i >= 0; i -= 1) {\\n          int idx = getIndex(i);\\n          if (idx \"+a+\" end) {\\n            continue;\\n          }\\n          if (idx == end && \"+e+\") {\\n            continue;\\n          }\\n          \"+Ki(r,\"coords\")+\" = idx;\\n          val += getX(\"+function(t,e){if(1===t)return\"\"+e;if(2===t)return e+\".x, \"+e+\".y\";if(3===t)return e+\".x, \"+e+\".y, \"+e+\".z\";if(4===t)return e+\".x, \"+e+\".y, \"+e+\".z, \"+e+\".w\";throw Error(\"Cumulative sum for rank \"+t+\" is not yet supported\")}(r,\"coords\")+\");\\n        }\\n        setOutput(val);\\n      }\\n    \"};function Ki(t,e){if(1===t)return\"\"+e;if(2===t)return e+\".y\";if(3===t)return e+\".z\";if(4===t)return e+\".w\";throw Error(\"Cumulative sum for rank \"+t+\" is not yet supported\")}var ji=function(t){this.variableNames=[\"A\"],this.packedInputs=!1,this.packedOutput=!0,this.outPackingScheme=Vt.DENSE;var e=Yt(t),n=Ya();this.outputShape=t,this.userCode=\"\\n      ivec3 outCoordsFromFlatIndex(int index) {\\n        \"+$a([\"r\",\"c\",\"d\"],t)+\"\\n        return ivec3(r, c, d);\\n      }\\n\\n      void main() {\\n        ivec2 resTexRC = ivec2(resultUV.yx *\\n          vec2(\"+e[0]+\", \"+e[1]+\"));\\n        int index = 4 * (resTexRC.x * \"+e[1]+\" + resTexRC.y);\\n\\n        vec4 result = vec4(0.);\\n\\n        for (int i=0; i<4; i++) {\\n          int flatIndex = index + i;\\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\\n          result[i] = getA(rc.x, rc.y, rc.z);\\n        }\\n\\n        \"+n.output+\" = result;\\n      }\\n    \"},Xi=function(t){this.variableNames=[\"A\"],this.packedInputs=!0,this.packedOutput=!0,this.outPackingScheme=Vt.DENSE;var e=Yt(t),n=Ya();this.outputShape=t,this.userCode=\"\\n      ivec3 outCoordsFromFlatIndex(int index) {\\n        \"+$a([\"r\",\"c\",\"d\"],t)+\"\\n        return ivec3(r, c, d);\\n      }\\n\\n      void main() {\\n        ivec2 resTexRC = ivec2(resultUV.yx *\\n          vec2(\"+e[0]+\", \"+e[1]+\"));\\n        int index = 4 * (resTexRC.x * \"+e[1]+\" + resTexRC.y);\\n\\n        vec4 result = vec4(0.);\\n\\n        for (int i=0; i<4; i++) {\\n          int flatIndex = index + i;\\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\\n          result[i] = getChannel(getA(rc.x, rc.y, rc.z), vec2(rc.y, rc.z));\\n        }\\n\\n        \"+n.output+\" = result;\\n      }\\n    \"},Yi=function(){function t(t,e,n){this.variableNames=[\"x\"],this.outputShape=[],this.outputShape=t,this.blockSize=e,this.dataFormat=n,this.userCode=\"\\n    void main() {\\n      ivec4 coords = getOutputCoords();\\n      int b = coords[0];\\n      int h = \"+this.getHeightCoordString()+\";\\n      int w = \"+this.getWidthCoordString()+\";\\n      int d = \"+this.getDepthCoordString()+\";\\n\\n      int in_h = h / \"+e+\";\\n      int offset_h = imod(h, \"+e+\");\\n      int in_w = w / \"+e+\";\\n      int offset_w = imod(w, \"+e+\");\\n      int offset_d = (offset_h * \"+e+\" + offset_w) *\\n        \"+this.getOutputDepthSize()+\";\\n      int in_d = d + offset_d;\\n\\n      float result = \"+this.getInputSamplingString()+\";\\n      setOutput(result);\\n    }\\n  \"}return t.prototype.getHeightCoordString=function(){return\"NHWC\"===this.dataFormat?\"coords[1]\":\"coords[2]\"},t.prototype.getWidthCoordString=function(){return\"NHWC\"===this.dataFormat?\"coords[2]\":\"coords[3]\"},t.prototype.getDepthCoordString=function(){return\"NHWC\"===this.dataFormat?\"coords[3]\":\"coords[1]\"},t.prototype.getOutputDepthSize=function(){return\"NHWC\"===this.dataFormat?this.outputShape[3]:this.outputShape[1]},t.prototype.getInputSamplingString=function(){return\"NHWC\"===this.dataFormat?\"getX(b, in_h, in_w, in_d)\":\"getX(b, in_d, in_h, in_w)\"},t}(),$i=function(t){this.variableNames=[\"X\"],this.outputShape=[t,t],this.userCode=\"\\n      void main() {\\n          ivec2 coords = getOutputCoords();\\n          float val = coords[0] == coords[1] ? getX(coords[0]) : 0.0;\\n          setOutput(val);\\n      }\\n    \"},Qi=function(t){this.variableNames=[\"A\"],this.outTexUsage=zt.DOWNLOAD;var e=Ya();this.outputShape=t,this.userCode=\"\\n      \"+Ja+\"\\n\\n      void main() {\\n        float x = getAAtOutCoords();\\n        \"+e.output+\" = encode_float(x);\\n      }\\n    \"},Ji=function(t){this.variableNames=[\"A\"],this.packedInputs=!0,this.packedOutput=!1,this.outTexUsage=zt.DOWNLOAD;var e=Ya();this.outputShape=t,this.userCode=\"\\n      \"+Ja+\"\\n\\n      void main() {\\n        ivec3 coords = getOutputCoords();\\n        float x = getChannel(getAAtOutCoords(), vec2(coords.y, coords.z));\\n        \"+e.output+\" = encode_float(x);\\n      }\\n    \"},Zi=function(t,e,n){void 0===n&&(n=!1),this.variableNames=[\"A\"];var r=Ya(),o=e[0],a=e[1];this.outputShape=t;var i=\"result\";n&&(i=\"floor(result * 255. + 0.5)\"),this.userCode=\"\\n      \"+Qa(t)+\"\\n\\n      void main() {\\n        ivec3 coords = getOutputCoords();\\n\\n        int flatIndex = getFlatIndex(coords);\\n        int offset = imod(flatIndex, 4);\\n\\n        flatIndex = idiv(flatIndex, 4, 1.);\\n        \\n        int r = flatIndex / \"+a+\";\\n        int c = imod(flatIndex, \"+a+\");\\n        vec2 uv = (vec2(c, r) + halfCR) / vec2(\"+a+\".0, \"+o+\".0);\\n        vec4 values = \"+r.texture2D+\"(A, uv);\\n\\n        float result;\\n\\n        if(offset == 0) {\\n          result = values[0];\\n        } else if(offset == 1) {\\n          result = values[1];\\n        } else if(offset == 2) {\\n          result = values[2];\\n        } else {\\n          result = values[3];\\n        }\\n\\n        \"+r.output+\" = vec4(\"+i+\", 0., 0., 0.);\\n      }\\n    \"},ts=function(t,e,n){void 0===n&&(n=!1),this.variableNames=[\"A\"],this.packedInputs=!1,this.packedOutput=!0;var r=Ya(),o=e[0],a=e[1];this.outputShape=t;var i=\"\",s=\"result\";n&&(s=\"floor(result * 255. + 0.5)\");for(var u=0;u<=1;u++)for(var c=0;c<=1;c++){var l=2*u+c;i+=\"\\n          localCoords = coords;\\n          if(localCoords[2] + \"+c+\" < \"+t[2]+\") {\\n            localCoords[2] += \"+c+\";\\n            if(localCoords[1] + \"+u+\" < \"+t[1]+\") {\\n              localCoords[1] += \"+u+\";\\n\\n              flatIndex = getFlatIndex(localCoords);\\n              offset = imod(flatIndex, 4);\\n\\n              flatIndex = idiv(flatIndex, 4, 1.);\\n\\n              r = flatIndex / \"+a+\";\\n              c = imod(flatIndex, \"+a+\");\\n              uv = (vec2(c, r) + halfCR) / vec2(\"+a+\".0, \"+o+\".0);\\n              values = \"+r.texture2D+\"(A, uv);\\n\\n              if(offset == 0) {\\n                result[\"+l+\"] = values[0];\\n              } else if(offset == 1) {\\n                result[\"+l+\"] = values[1];\\n              } else if(offset == 2) {\\n                result[\"+l+\"] = values[2];\\n              } else {\\n                result[\"+l+\"] = values[3];\\n              }\\n            }\\n          }\\n        \"}this.userCode=\"\\n      \"+Qa(t)+\"\\n\\n      void main() {\\n        ivec3 coords = getOutputCoords();\\n\\n        vec4 result = vec4(0.);\\n        int flatIndex, r, c, offset;\\n        ivec3 localCoords;\\n        vec2 uv;\\n        vec4 values;\\n\\n        \"+i+\"\\n\\n        \"+r.output+\" = \"+s+\";\\n      }\\n    \"},es=\"return real * expR - imag * expI;\",ns=\"return real * expI + imag * expR;\",rs=function(t,e,n){this.variableNames=[\"real\",\"imag\"];var r=e[1];this.outputShape=e;var o=n?\"2.0 * \"+Math.PI:\"-2.0 * \"+Math.PI,a=n?r+\".0\":\"1.0\";this.userCode=\"\\n      const float exponentMultiplier = \"+o+\";\\n\\n      float unaryOpComplex(float real, float expR, float imag, float expI) {\\n        \"+t+\"\\n      }\\n\\n      float mulMatDFT(int batch, int index) {\\n        float indexRatio = float(index) / float(\"+r+\");\\n        float exponentMultiplierTimesIndexRatio =\\n            exponentMultiplier * indexRatio;\\n\\n        float result = 0.0;\\n\\n        for (int i = 0; i < \"+r+\"; i++) {\\n          // x = (-2|2 * PI / N) * index * i;\\n          float x = exponentMultiplierTimesIndexRatio * float(i);\\n          float expR = cos(x);\\n          float expI = sin(x);\\n          float real = getReal(batch, i);\\n          float imag = getImag(batch, i);\\n\\n          result +=\\n              unaryOpComplex(real, expR, imag, expI) / \"+a+\";\\n        }\\n\\n        return result;\\n      }\\n\\n      void main() {\\n        ivec2 coords = getOutputCoords();\\n        setOutput(mulMatDFT(coords[0], coords[1]));\\n      }\\n    \"},os=function(){function t(t,e){this.outputShape=[],this.variableNames=[\"x\"],this.outputShape=t,this.userCode=\"\\n      uniform float value;\\n      void main() {\\n        // Input can be obtained from uniform value.\\n        setOutput(value);\\n      }\\n    \"}return t.prototype.getCustomSetupFunc=function(t){var e=this;return function(n,r){null==e.valueLoc&&(e.valueLoc=n.getUniformLocationNoThrow(r,\"value\")),n.gl.uniform1f(e.valueLoc,t)}},t}(),as=function(t,e,n){this.variableNames=[\"A\",\"indices\"];var r=t.slice();r[n]=e,this.outputShape=r,this.rank=r.length;var o=ui(this.rank),a=function(t,e){var n=t.length;if(n>4)throw Error(\"Gather for rank \"+n+\" is not yet supported\");if(1===n)return\"int(getIndices(resRC))\";for(var r=[\"resRC.x\",\"resRC.y\",\"resRC.z\",\"resRC.w\"],o=[],a=0;a<t.length;a++)a===e?o.push(\"int(getIndices(\"+r[a]+\"))\"):o.push(\"\"+r[a]);return o.join()}(t,n);this.userCode=\"\\n      void main() {\\n        \"+o+\" resRC = getOutputCoords();\\n        setOutput(getA(\"+a+\"));\\n      }\\n    \"};var is=function(t,e,n){this.sliceDim=t,this.strides=e,this.variableNames=[\"x\",\"indices\"],this.outputShape=n;var r=ui(e.length),o=ui(n.length),a=this.sliceDim>1?\"strides[j]\":\"strides\";this.userCode=\"\\n        \"+r+\" strides = \"+r+\"(\"+this.strides+\");\\n         void main() {\\n          \"+o+\" coords = getOutputCoords();\\n          int flattenIndex = 0;\\n          for (int j = 0; j < \"+this.sliceDim+\"; j++) {\\n            int index = round(getIndices(coords[0], j));\\n            flattenIndex += index * \"+a+\";\\n          }\\n          setOutput(getX(flattenIndex, coords[1]));\\n        }\\n      \"};function ss(t,e){var n=Ya();return oe(t,e,n.version+\"\\n    precision highp float;\\n    \"+n.attribute+\" vec3 clipSpacePos;\\n    \"+n.attribute+\" vec2 uv;\\n    \"+n.varyingVs+\" vec2 resultUV;\\n\\n    void main() {\\n      gl_Position = vec4(clipSpacePos, 1);\\n      resultUV = uv;\\n    }\")}function us(t,e){return fe(t,e,new Float32Array([-1,1,0,0,1,-1,-1,0,0,0,1,1,0,1,1,1,-1,0,1,0]))}function cs(t,e){return de(t,e,new Uint16Array([0,1,2,2,1,3]))}function ls(t,e,n,r,o,a,i){ve(n,r);var s=pe(t,e),u=t.TEXTURE_2D;return Jt(t,e,(function(){return t.bindTexture(u,s)})),Jt(t,e,(function(){return t.texParameteri(u,t.TEXTURE_WRAP_S,t.CLAMP_TO_EDGE)})),Jt(t,e,(function(){return t.texParameteri(u,t.TEXTURE_WRAP_T,t.CLAMP_TO_EDGE)})),Jt(t,e,(function(){return t.texParameteri(u,t.TEXTURE_MIN_FILTER,t.NEAREST)})),Jt(t,e,(function(){return t.texParameteri(u,t.TEXTURE_MAG_FILTER,t.NEAREST)})),Jt(t,e,(function(){return t.texImage2D(u,0,o,n,r,0,a,i,null)})),Jt(t,e,(function(){return t.bindTexture(t.TEXTURE_2D,null)})),s}function hs(t,e,n,r,o){var a=Xt(n,r);return ls(t,e,a[0],a[1],o.internalFormatFloat,o.textureFormatFloat,t.FLOAT)}function fs(t,e,n,r,o){var a=Xt(n,r);return ls(t,e,a[0],a[1],o.internalFormatHalfFloat,o.textureFormatFloat,o.textureTypeHalfFloat)}function ds(t,e,n,r,o){var a=Xt(n,r);return ls(t,e,a[0],a[1],t.RGBA,t.RGBA,t.UNSIGNED_BYTE)}function ps(t,e,n,r,o){var a=$t(n,r);return ls(t,e,a[0],a[1],o.internalFormatPackedFloat,t.RGBA,t.FLOAT)}function vs(t,e,n,r,o){var a=$t(n,r);return ls(t,e,a[0],a[1],o.internalFormatPackedHalfFloat,t.RGBA,o.textureTypeHalfFloat)}function gs(t,e,n,r){return Jt(t,e,(function(){return t.bindBuffer(t.ARRAY_BUFFER,r)})),me(t,e,n,\"clipSpacePos\",r,3,20,0)&&me(t,e,n,\"uv\",r,2,20,12)}function ms(t,e,n,r,o,a,i){var s,u,c;Jt(t,e,(function(){return t.bindTexture(t.TEXTURE_2D,n)})),a instanceof Uint8Array?(s=new Uint8Array(r*o*4),u=t.UNSIGNED_BYTE,c=t.RGBA):(s=new Float32Array(r*o*4),u=t.FLOAT,c=i.internalFormatPackedFloat),s.set(a),Jt(t,e,(function(){return t.texImage2D(t.TEXTURE_2D,0,c,r,o,0,t.RGBA,u,s)})),Jt(t,e,(function(){return t.bindTexture(t.TEXTURE_2D,null)}))}function ys(t,e,n,r){Jt(t,e,(function(){return t.bindTexture(t.TEXTURE_2D,n)})),r.data instanceof Uint8Array?Jt(t,e,(function(){return t.texImage2D(t.TEXTURE_2D,0,t.RGBA,r.width,r.height,0,t.RGBA,t.UNSIGNED_BYTE,r.data)})):Jt(t,e,(function(){return t.texImage2D(t.TEXTURE_2D,0,t.RGBA,t.RGBA,t.UNSIGNED_BYTE,r)})),Jt(t,e,(function(){return t.bindTexture(t.TEXTURE_2D,null)}))}function xs(t,e,n,r,o){var a=t.createBuffer();Jt(t,e,(function(){return t.bindBuffer(t.PIXEL_PACK_BUFFER,a)}));var i=16*n*r;return Jt(t,e,(function(){return t.bufferData(t.PIXEL_PACK_BUFFER,i,t.STREAM_READ)})),Jt(t,e,(function(){return t.readPixels(0,0,r,n,t.RGBA,t.FLOAT,0)})),Jt(t,e,(function(){return t.bindBuffer(t.PIXEL_PACK_BUFFER,null)})),a}function bs(t,e,n){var r=t,o=new Float32Array(n);return r.bindBuffer(r.PIXEL_PACK_BUFFER,e),r.getBufferSubData(r.PIXEL_PACK_BUFFER,0,o),r.bindBuffer(r.PIXEL_PACK_BUFFER,null),o}function ws(t,e,n,r,o){var a=Xt(n,r),i=a[0],s=a[1],u=new Uint8Array(n*r*4);return Jt(t,e,(function(){return t.readPixels(0,0,i,s,o.downloadTextureFormat,t.UNSIGNED_BYTE,u)})),new Float32Array(u.buffer)}function Cs(t,e,n,r,o,a,i,s){var u=t,c=new Float32Array(function(t,e){var n=$t(t,e);return n[0]*n[1]*4}(a,i));return u.bindBuffer(u.PIXEL_PACK_BUFFER,e),u.getBufferSubData(u.PIXEL_PACK_BUFFER,0,c),u.bindBuffer(u.PIXEL_PACK_BUFFER,null),c}function Es(t,e,n,r){var o=new Float32Array(n*r*4);return Jt(t,e,(function(){return t.readPixels(0,0,r,n,t.RGBA,t.FLOAT,o)})),o}var Rs=Object.freeze({createVertexShader:ss,createVertexBuffer:us,createIndexBuffer:cs,createFloat32MatrixTexture:hs,createFloat16MatrixTexture:fs,createUnsignedBytesMatrixTexture:ds,createPackedMatrixTexture:ps,createFloat16PackedMatrixTexture:vs,bindVertexProgramAttributeStreams:gs,uploadDenseMatrixToTexture:ms,uploadPixelDataToTexture:ys,createBufferFromOutputTexture:xs,downloadFloat32MatrixFromBuffer:bs,downloadByteEncodedFloatMatrixFromOutputTexture:ws,downloadPackedMatrixFromBuffer:Cs,downloadMatrixFromPackedOutputTexture:Es}),Is=function(){function t(t){this.outputTexture=null,this.program=null,this.disposed=!1,this.vertexAttrsAreBound=!1,this.itemsToPoll=[];var e=i().getNumber(\"WEBGL_VERSION\");null!=t?(this.gl=t,Kt(e,t)):this.gl=jt(e);var n=\"WEBGL_color_buffer_float\";if(1===i().getNumber(\"WEBGL_VERSION\")){if(this.textureFloatExtension=re(this.gl,this.debug,\"OES_texture_float\"),Pe(this.gl,\"OES_texture_half_float\"))this.textureHalfFloatExtension=re(this.gl,this.debug,\"OES_texture_half_float\");else if(i().get(\"WEBGL_FORCE_F16_TEXTURES\"))throw new Error(\"GL context does not support half float textures, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.\");if(this.colorBufferFloatExtension=this.gl.getExtension(n),Pe(this.gl,\"EXT_color_buffer_half_float\"))this.colorBufferHalfFloatExtension=re(this.gl,this.debug,\"EXT_color_buffer_half_float\");else if(i().get(\"WEBGL_FORCE_F16_TEXTURES\"))throw new Error(\"GL context does not support color renderable half floats, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.\")}else if(n=\"EXT_color_buffer_float\",Pe(this.gl,n))this.colorBufferFloatExtension=this.gl.getExtension(n);else{if(!Pe(this.gl,\"EXT_color_buffer_half_float\"))throw new Error(\"GL context does not support color renderable floats\");this.colorBufferHalfFloatExtension=this.gl.getExtension(\"EXT_color_buffer_half_float\")}this.vertexBuffer=us(this.gl,this.debug),this.indexBuffer=cs(this.gl,this.debug),this.framebuffer=ge(this.gl,this.debug),this.textureConfig=Qt(this.gl,this.textureHalfFloatExtension)}return Object.defineProperty(t.prototype,\"debug\",{get:function(){return i().getBool(\"DEBUG\")},enumerable:!0,configurable:!0}),t.prototype.dispose=function(){var t=this;if(!this.disposed){null!=this.program&&console.warn(\"Disposing a GPGPUContext that still has a bound WebGLProgram. This is probably a resource leak, delete the program with GPGPUContext.deleteProgram before disposing.\"),null!=this.outputTexture&&console.warn(\"Disposing a GPGPUContext that still has a bound output matrix texture.  This is probably a resource leak, delete the output matrix texture with GPGPUContext.deleteMatrixTexture before disposing.\");var e=this.gl;Jt(e,this.debug,(function(){return e.finish()})),Jt(e,this.debug,(function(){return e.bindFramebuffer(e.FRAMEBUFFER,null)})),Jt(e,this.debug,(function(){return e.deleteFramebuffer(t.framebuffer)})),Jt(e,this.debug,(function(){return e.bindBuffer(e.ARRAY_BUFFER,null)})),Jt(e,this.debug,(function(){return e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,null)})),Jt(e,this.debug,(function(){return e.deleteBuffer(t.indexBuffer)})),this.disposed=!0}},t.prototype.createFloat32MatrixTexture=function(t,e){return this.throwIfDisposed(),hs(this.gl,this.debug,t,e,this.textureConfig)},t.prototype.createFloat16MatrixTexture=function(t,e){return this.throwIfDisposed(),fs(this.gl,this.debug,t,e,this.textureConfig)},t.prototype.createUnsignedBytesMatrixTexture=function(t,e){return this.throwIfDisposed(),ds(this.gl,this.debug,t,e,this.textureConfig)},t.prototype.uploadPixelDataToTexture=function(t,e){this.throwIfDisposed(),ys(this.gl,this.debug,t,e)},t.prototype.uploadDenseMatrixToTexture=function(t,e,n,r){this.throwIfDisposed(),ms(this.gl,this.debug,t,e,n,r,this.textureConfig)},t.prototype.createFloat16PackedMatrixTexture=function(t,e){return this.throwIfDisposed(),vs(this.gl,this.debug,t,e,this.textureConfig)},t.prototype.createPackedMatrixTexture=function(t,e){return this.throwIfDisposed(),ps(this.gl,this.debug,t,e,this.textureConfig)},t.prototype.deleteMatrixTexture=function(t){var e=this;this.throwIfDisposed(),this.outputTexture===t&&(Ee(this.gl,this.debug,this.framebuffer),this.outputTexture=null),Jt(this.gl,this.debug,(function(){return e.gl.deleteTexture(t)}))},t.prototype.downloadByteEncodedFloatMatrixFromOutputTexture=function(t,e,n){var r=this;return this.downloadMatrixDriver(t,(function(){return ws(r.gl,r.debug,e,n,r.textureConfig)}))},t.prototype.downloadPackedMatrixFromBuffer=function(t,e,n,r,o,a){return Cs(this.gl,t,0,0,0,o,a,this.textureConfig)},t.prototype.downloadFloat32MatrixFromBuffer=function(t,e){return bs(this.gl,t,e)},t.prototype.createBufferFromTexture=function(t,e,n){this.bindTextureToFrameBuffer(t);var r=xs(this.gl,this.debug,e,n,this.textureConfig);return this.unbindTextureToFrameBuffer(),r},t.prototype.createAndWaitForFence=function(){var t=this.createFence(this.gl);return this.pollFence(t)},t.prototype.createFence=function(t){var e,n,r=this;if(i().getBool(\"WEBGL_FENCE_API_ENABLED\")){var o=t,a=o.fenceSync(o.SYNC_GPU_COMMANDS_COMPLETE,0);t.flush(),n=function(){var t=o.clientWaitSync(a,0,0);return t===o.ALREADY_SIGNALED||t===o.CONDITION_SATISFIED},e=a}else i().getNumber(\"WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION\")>0?(e=this.beginQuery(),this.endQuery(),n=function(){return r.isQueryAvailable(e,i().getNumber(\"WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION\"))}):n=function(){return!0};return{query:e,isFencePassed:n}},t.prototype.downloadMatrixFromPackedTexture=function(t,e,n){var r=this;return this.downloadMatrixDriver(t,(function(){return Es(r.gl,r.debug,e,n)}))},t.prototype.createProgram=function(t){this.throwIfDisposed();var e=this.gl,n=ae(e,this.debug,t),r=ss(e,this.debug),o=ce(e,this.debug);return Jt(e,this.debug,(function(){return e.attachShader(o,r)})),Jt(e,this.debug,(function(){return e.attachShader(o,n)})),le(e,this.debug,o),this.debug&&he(e,this.debug,o),this.vertexAttrsAreBound||(this.setProgram(o),this.vertexAttrsAreBound=gs(e,this.debug,this.program,this.vertexBuffer)),o},t.prototype.deleteProgram=function(t){var e=this;this.throwIfDisposed(),t===this.program&&(this.program=null),null!=t&&Jt(this.gl,this.debug,(function(){return e.gl.deleteProgram(t)}))},t.prototype.setProgram=function(t){var e=this;this.throwIfDisposed(),this.program=t,null!=this.program&&this.debug&&he(this.gl,this.debug,this.program),Jt(this.gl,this.debug,(function(){return e.gl.useProgram(t)}))},t.prototype.getUniformLocation=function(t,e,n){return void 0===n&&(n=!0),this.throwIfDisposed(),n?xe(this.gl,this.debug,t,e):be(this.gl,t,e)},t.prototype.getAttributeLocation=function(t,e){var n=this;return this.throwIfDisposed(),Jt(this.gl,this.debug,(function(){return n.gl.getAttribLocation(t,e)}))},t.prototype.getUniformLocationNoThrow=function(t,e){return this.throwIfDisposed(),this.gl.getUniformLocation(t,e)},t.prototype.setInputMatrixTexture=function(t,e,n){this.throwIfDisposed(),this.throwIfNoProgram(),we(this.gl,this.debug,this.program,t,e,n)},t.prototype.setOutputMatrixTexture=function(t,e,n){this.setOutputMatrixTextureDriver(t,n,e)},t.prototype.setOutputPackedMatrixTexture=function(t,e,n){this.throwIfDisposed();var r=$t(e,n),o=r[0],a=r[1];this.setOutputMatrixTextureDriver(t,o,a)},t.prototype.setOutputMatrixWriteRegion=function(t,e,n,r){this.setOutputMatrixWriteRegionDriver(n,t,r,e)},t.prototype.setOutputPackedMatrixWriteRegion=function(t,e,n,r){throw new Error(\"setOutputPackedMatrixWriteRegion not implemented.\")},t.prototype.debugValidate=function(){null!=this.program&&he(this.gl,this.debug,this.program),Re(this.gl)},t.prototype.executeProgram=function(){this.throwIfDisposed(),this.throwIfNoProgram();var t=this.gl;this.debug&&this.debugValidate(),Jt(t,this.debug,(function(){return t.drawElements(t.TRIANGLES,6,t.UNSIGNED_SHORT,0)}))},t.prototype.blockUntilAllProgramsCompleted=function(){var t=this;this.throwIfDisposed(),Jt(this.gl,this.debug,(function(){return t.gl.finish()}))},t.prototype.getQueryTimerExtension=function(){return null==this.disjointQueryTimerExtension&&(this.disjointQueryTimerExtension=re(this.gl,this.debug,2===i().getNumber(\"WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION\")?\"EXT_disjoint_timer_query_webgl2\":\"EXT_disjoint_timer_query\")),this.disjointQueryTimerExtension},t.prototype.getQueryTimerExtensionWebGL2=function(){return this.getQueryTimerExtension()},t.prototype.getQueryTimerExtensionWebGL1=function(){return this.getQueryTimerExtension()},t.prototype.beginQuery=function(){if(2===i().getNumber(\"WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION\")){var t=this.gl,e=this.getQueryTimerExtensionWebGL2(),n=t.createQuery();return t.beginQuery(e.TIME_ELAPSED_EXT,n),n}var r=this.getQueryTimerExtensionWebGL1(),o=r.createQueryEXT();return r.beginQueryEXT(r.TIME_ELAPSED_EXT,o),o},t.prototype.endQuery=function(){if(2!==i().getNumber(\"WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION\")){var t=this.getQueryTimerExtensionWebGL1();t.endQueryEXT(t.TIME_ELAPSED_EXT)}else{var e=this.gl,n=this.getQueryTimerExtensionWebGL2();e.endQuery(n.TIME_ELAPSED_EXT)}},t.prototype.waitForQueryAndGetTime=function(t){return n(this,void 0,void 0,(function(){var e=this;return r(this,(function(n){switch(n.label){case 0:return[4,F((function(){return e.disposed||e.isQueryAvailable(t,i().getNumber(\"WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION\"))}))];case 1:return n.sent(),[2,this.getQueryTime(t,i().getNumber(\"WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION\"))]}}))}))},t.prototype.getQueryTime=function(t,e){if(0===e)return null;if(2===e){var n=this.gl;return n.getQueryParameter(t,n.QUERY_RESULT)/1e6}var r=this.getQueryTimerExtensionWebGL1();return r.getQueryObjectEXT(t,r.QUERY_RESULT_EXT)/1e6},t.prototype.isQueryAvailable=function(t,e){if(0===e)return!0;if(2===e){var n=this.gl,r=this.getQueryTimerExtensionWebGL2(),o=n.getQueryParameter(t,n.QUERY_RESULT_AVAILABLE);return null==this.disjoint&&(this.disjoint=this.gl.getParameter(r.GPU_DISJOINT_EXT)),o&&!this.disjoint}o=(r=this.getQueryTimerExtensionWebGL1()).getQueryObjectEXT(t,r.QUERY_RESULT_AVAILABLE_EXT);return null==this.disjoint&&(this.disjoint=this.gl.getParameter(r.GPU_DISJOINT_EXT)),o&&!this.disjoint},t.prototype.pollFence=function(t){var e=this;return new Promise((function(n){e.addItemToPoll((function(){return t.isFencePassed()}),(function(){return n()}))}))},t.prototype.pollItems=function(){for(var t=function(t){for(var e=0;e<t.length;++e){if(!t[e]())break}return e-1}(this.itemsToPoll.map((function(t){return t.isDoneFn}))),e=0;e<=t;++e){(0,this.itemsToPoll[e].resolveFn)()}this.itemsToPoll=this.itemsToPoll.slice(t+1)},t.prototype.addItemToPoll=function(t,e){var n=this;this.itemsToPoll.push({isDoneFn:t,resolveFn:e}),this.itemsToPoll.length>1||F((function(){return n.pollItems(),0===n.itemsToPoll.length}))},t.prototype.bindTextureToFrameBuffer=function(t){this.throwIfDisposed(),Ce(this.gl,this.debug,t,this.framebuffer),this.debug&&Re(this.gl)},t.prototype.unbindTextureToFrameBuffer=function(){null!=this.outputTexture?(Ce(this.gl,this.debug,this.outputTexture,this.framebuffer),this.debug&&Re(this.gl)):Ee(this.gl,this.debug,this.framebuffer)},t.prototype.downloadMatrixDriver=function(t,e){this.bindTextureToFrameBuffer(t);var n=e();return this.unbindTextureToFrameBuffer(),n},t.prototype.setOutputMatrixTextureDriver=function(t,e,n){this.throwIfDisposed();var r=this.gl;Ce(r,this.debug,t,this.framebuffer),this.debug&&Re(r),this.outputTexture=t,Jt(r,this.debug,(function(){return r.viewport(0,0,e,n)})),Jt(r,this.debug,(function(){return r.scissor(0,0,e,n)}))},t.prototype.setOutputMatrixWriteRegionDriver=function(t,e,n,r){var o=this;this.throwIfDisposed(),Jt(this.gl,this.debug,(function(){return o.gl.scissor(t,e,n,r)}))},t.prototype.throwIfDisposed=function(){if(this.disposed)throw new Error(\"Attempted to use disposed GPGPUContext.\")},t.prototype.throwIfNoProgram=function(){if(null==this.program)throw new Error(\"No GPU program is currently set.\")},t}();function ks(t,e){if(t.length!==e.length)throw Error(\"Binary was compiled with \"+t.length+\" inputs, but was executed with \"+e.length+\" inputs\");t.forEach((function(t,n){var r=t.logicalShape,o=e[n],a=o.shape;if(!S(r,a))throw Error(\"Binary was compiled with different shapes than the current args. Shapes \"+r+\" and \"+a+\" must match\");if(!t.isUniform||!o.isUniform){var i=t.texShape,s=o.isUniform?null:o.texData.texShape;if(!S(i,s))throw Error(\"Binary was compiled with different texture shapes than the current args. Shape \"+i+\" and \"+s+\" must match\")}}))}var Ss=function(t,e,n){this.variableNames=[\"A\"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t;for(var r=n.filterWidth,o=n.inChannels,a=n.strideWidth,i=n.strideHeight,s=n.padInfo,u=n.outWidth,c=n.dilationWidth,l=n.dilationHeight,h=n.dataFormat,f=s.left,d=s.top,p=o*r,v=Ya(),g=\"channelsLast\"===h,m=g?0:1,y=g?1:2,x=\"\",b=0;b<=1;b++)for(var w=0;w<=1;w++)x+=\"\\n          blockIndex = rc.y + \"+w+\";\\n          pos = rc.x + \"+b+\";\\n\\n          if(blockIndex < \"+t[1]+\" && pos < \"+t[0]+\") {\\n            offsetY = int(blockIndex / (\"+u+\")) * \"+i+\" - \"+d+\";\\n            d0 = offsetY + \"+l+\" * (pos / \"+p+\");\\n\\n            if(d0 < \"+e[m]+\" && d0 >= 0) {\\n\\n              offsetX = int(mod(float(blockIndex), \"+u+\".) * \"+a+\". - \"+f+\".);\\n              d1 = offsetX + \"+c+\" * (int(mod(float(pos), \"+p+\".) / \"+o+\".));\\n\\n              if(d1 < \"+e[y]+\" && d1 >= 0) {\\n\\n                ch = int(mod(float(pos), \"+o+\".));\\n\\n                if (\"+g+\") {\\n                  innerDims = vec2(d1, ch);\\n                  result[\"+(2*b+w)+\"] = getChannel(\\n                    getA(d0, int(innerDims.x),\\n                    int(innerDims.y)), innerDims);\\n                } else {\\n                  innerDims = vec2(d0, d1);\\n                  result[\"+(2*b+w)+\"] = getChannel(\\n                    getA(ch, int(innerDims.x),\\n                    int(innerDims.y)), innerDims);\\n                }\\n              }\\n            }\\n          }\\n        \";this.userCode=\"\\n      void main() {\\n        ivec2 rc = getOutputCoords();\\n\\n        vec4 result = vec4(0);\\n\\n        int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\\n        vec2 innerDims;\\n\\n        \"+x+\"\\n\\n        \"+v.output+\" = result;\\n      }\\n    \"},As=function(t,e,n,r,o){this.variableNames=[\"x\"],this.outputShape=[];var a,i=e,s=t[3]-1;this.outputShape=t;var u=\"float(\"+n+\") + float(\"+r+\") * sum\";a=.5===o?\"inversesqrt(\"+u+\")\":1===o?\"1.0/(\"+u+\")\":\"exp(log(\"+u+\") * float(-\"+o+\"));\",this.userCode=\"\\n      void main() {\\n        ivec4 coords = getOutputCoords();\\n        int b = coords[0];\\n        int r = coords[1];\\n        int c = coords[2];\\n        int d = coords[3];\\n        float x = getX(b, r, c, d);\\n        float sum = 0.0;\\n        for (int j = -\"+i+\"; j <= \"+i+\"; j++) {\\n          int idx = d + j;\\n          if (idx >= 0 && idx <=  \"+s+\") {\\n            float z = getX(b, r, c, idx);\\n            sum += z * z;\\n          }\\n        }\\n        float val = x * \"+a+\";\\n        setOutput(val);\\n      }\\n    \"},Ts=function(t,e,n,r,o){this.variableNames=[\"inputImage\",\"outputImage\",\"dy\"],this.outputShape=[],this.outputShape=t,this.depth=t[3],this.depthRadius=e,this.bias=n,this.alpha=r,this.beta=o,this.userCode=\"\\n      void main() {\\n        ivec4 coords = getOutputCoords();\\n        int b = coords[0];\\n        int r = coords[1];\\n        int c = coords[2];\\n\\n        float result = 0.0;\\n        for (int d = 0; d < \"+this.depth+\"; ++d) {\\n          int depthBegin = int(max(0.0, float(d - \"+e+\")));\\n          int depthEnd = int(min(float(\"+this.depth+\"),\\n              float(d + \"+e+\" + 1)));\\n\\n          const int MIN_DEPTH_BEGIN = 0;\\n          const int MAX_DEPTH_END = \"+this.depth+\";\\n\\n          float norm = 0.0;\\n          for (int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k) {\\n            if (k < depthBegin){\\n              continue;\\n            }\\n            else if (k >= depthBegin && k < depthEnd) {\\n              norm += getInputImage(b, r, c, k) * getInputImage(b, r, c, k);\\n            }\\n            else {\\n              break;\\n            }\\n          }\\n\\n          norm = float(\"+r+\") * norm + float(\"+n+\");\\n\\n          for(int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k){\\n            if (k < depthBegin){\\n              continue;\\n            }\\n            else if (k >= depthBegin && k < depthEnd){\\n              float dyi = -2.0 * float(\"+r+\")\\n                * float(\"+o+\")\\n                * getInputImage(b ,r ,c, k) * getOutputImage(b, r, c, d)\\n                / norm;\\n              if (k == d) {\\n                dyi += pow(norm, -1.0 * \"+o+\");\\n              }\\n              if (k == coords[3]) {\\n                dyi *= getDy(b, r, c, d);\\n                result += dyi;\\n              }\\n            }\\n            else {\\n              break;\\n            }\\n          }\\n      }\\n      setOutput(result);\\n      }\\n    \"},Ds=function(t,e,n,r,o){this.variableNames=[\"x\"],this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0;var a,i=e,s=t[3]-1;this.outputShape=t;var u=\"float(\"+n+\") + float(\"+r+\") * sum\";a=.5===o?\"inversesqrt(\"+u+\")\":1===o?\"1.0/(\"+u+\")\":\"exp(log(\"+u+\") * float(-\"+o+\"));\",this.userCode=\"\\n      void main() {\\n        ivec4 coords = getOutputCoords();\\n        int b = coords.x;\\n        int r = coords.y;\\n        int c = coords.z;\\n        int d = coords.w;\\n\\n        bool hasNextCol = d < \"+this.outputShape[3]+\";\\n        bool hasNextRow = c < \"+this.outputShape[2]+\";\\n\\n        vec4 sum = vec4(0.);\\n        vec4 xFragAtOutputCoords = getX(b, r, c, d);\\n\\n        vec4 xAtOutputCoords = vec4(\\n          getChannel(xFragAtOutputCoords, vec2(c, d)),\\n          hasNextCol ?\\n            getChannel(xFragAtOutputCoords, vec2(c, d + 1)) : 0.0,\\n          hasNextRow ?\\n            getChannel(xFragAtOutputCoords , vec2(c + 1, d)) : 0.0,\\n          (hasNextRow && hasNextCol) ?\\n            getChannel(xFragAtOutputCoords, vec2(c + 1, d + 1)) : 0.0\\n        );\\n\\n        int firstChannel = d - \"+i+\";\\n        vec2 cache = vec2(0.);\\n        if(firstChannel >= 0){\\n          vec4 firstChannelFrag = getX(b, r, c, firstChannel);\\n          cache.x = getChannel(firstChannelFrag, vec2(c, firstChannel));\\n            if(hasNextRow){\\n              cache.y = getChannel(firstChannelFrag, vec2(c + 1, firstChannel));\\n            }\\n        }\\n\\n        ivec2 depth = ivec2(d, d + 1);\\n        for (int j = - \"+i+\"; j <= \"+i+\"; j++) {\\n          ivec2 idx = depth + j;\\n          bvec2 aboveLowerBound = greaterThanEqual(idx, ivec2(0));\\n          bvec2 belowUpperBound = lessThanEqual(idx, ivec2(\"+s+\"));\\n\\n          bool depthInRange = aboveLowerBound.x && belowUpperBound.x;\\n          bool depthPlusOneInRange = aboveLowerBound.y && belowUpperBound.y;\\n\\n          if(depthInRange || depthPlusOneInRange){\\n            vec4 z = vec4(0.);\\n            vec4 xFragAtCurrentDepth;\\n            z.xz = cache.xy;\\n            if(depthPlusOneInRange && hasNextCol){\\n              xFragAtCurrentDepth = idx.y != d ?\\n                getX(b, r, c, idx.y) : xFragAtOutputCoords;\\n              z.y = getChannel(xFragAtCurrentDepth, vec2(c, idx.y));\\n              if(hasNextRow){\\n                z.w = getChannel(xFragAtCurrentDepth, vec2(c + 1, idx.y));\\n              }\\n            }\\n            cache.xy = z.yw;\\n            sum += z * z;\\n          }\\n        }\\n        vec4 result = xAtOutputCoords * \"+a+\";\\n        setOutput(result);\\n      }\\n    \"},Ns=function(t){this.variableNames=[\"dy\",\"maxPos\"],this.outputShape=t.inShape;var e=t.strideHeight,n=t.strideWidth,r=t.dilationHeight,o=t.effectiveFilterHeight,a=t.effectiveFilterWidth,i=o-1-t.padInfo.top,s=a-1-t.padInfo.left,u=o*a-1;this.userCode=\"\\n      const ivec2 pads = ivec2(\"+i+\", \"+s+\");\\n\\n      void main() {\\n        ivec4 coords = getOutputCoords();\\n        int b = coords[0];\\n        int d = coords[3];\\n\\n        ivec2 dyRCCorner = coords.yz - pads;\\n        int dyRCorner = dyRCCorner.x;\\n        int dyCCorner = dyRCCorner.y;\\n\\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\\n        // ? = to be determined. : = across all values in that axis.\\n        float dotProd = 0.0;\\n        for (int wR = 0; wR < \"+o+\";\\n          wR += \"+r+\") {\\n          float dyR = float(dyRCorner + wR) / \"+e+\".0;\\n\\n          if (dyR < 0.0 || dyR >= \"+t.outHeight+\".0 || fract(dyR) > 0.0) {\\n            continue;\\n          }\\n          int idyR = int(dyR);\\n\\n          for (int wC = 0; wC < \"+a+\"; wC++) {\\n            float dyC = float(dyCCorner + wC) / \"+n+\".0;\\n\\n            if (dyC < 0.0 || dyC >= \"+t.outWidth+\".0 ||\\n                fract(dyC) > 0.0) {\\n              continue;\\n            }\\n            int idyC = int(dyC);\\n\\n            float dyValue = getDy(b, idyR, idyC, d);\\n            int maxPosValue = \"+u+\" - int(getMaxPos(b, idyR, idyC, d));\\n\\n            // Get the current value, check it against the value from the\\n            // position matrix.\\n            int curPosValue = wR * \"+a+\" + wC;\\n            float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\\n\\n            dotProd += dyValue * mask;\\n          }\\n        }\\n        setOutput(dotProd);\\n      }\\n    \"},Fs=function(t){this.variableNames=[\"dy\",\"maxPos\"],this.outputShape=t.inShape;var e=t.strideDepth,n=t.strideHeight,r=t.strideWidth,o=t.dilationDepth,a=t.dilationHeight,i=t.dilationWidth,s=t.effectiveFilterDepth,u=t.effectiveFilterHeight,c=t.effectiveFilterWidth,l=s-1-t.padInfo.front,h=u-1-t.padInfo.top,f=c-1-t.padInfo.left,d=s*u*c-1;this.userCode=\"\\n      const ivec3 pads = ivec3(\"+l+\", \"+h+\", \"+f+\");\\n\\n      void main() {\\n        ivec5 coords = getOutputCoords();\\n        int batch = coords.x;\\n        int ch = coords.u;\\n\\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\\n        int dyDCorner = dyCorner.x;\\n        int dyRCorner = dyCorner.y;\\n        int dyCCorner = dyCorner.z;\\n\\n        // Convolve dy(?, ?, ?, ch) with pos mask(:, :, :, d) to get\\n        // dx(xD, xR, xC, ch).\\n        // ? = to be determined. : = across all values in that axis.\\n        float dotProd = 0.0;\\n\\n        for (int wD = 0; wD < \"+s+\";\\n           wD += \"+o+\") {\\n          float dyD = float(dyDCorner + wD) / \"+e+\".0;\\n\\n          if (dyD < 0.0 || dyD >= \"+t.outDepth+\".0 || fract(dyD) > 0.0) {\\n            continue;\\n          }\\n          int idyD = int(dyD);\\n\\n          for (int wR = 0; wR < \"+u+\";\\n              wR += \"+a+\") {\\n            float dyR = float(dyRCorner + wR) / \"+n+\".0;\\n\\n            if (dyR < 0.0 || dyR >= \"+t.outHeight+\".0 ||\\n                fract(dyR) > 0.0) {\\n              continue;\\n            }\\n            int idyR = int(dyR);\\n\\n            for (int wC = 0; wC < \"+c+\";\\n                wC += \"+i+\") {\\n              float dyC = float(dyCCorner + wC) / \"+r+\".0;\\n\\n              if (dyC < 0.0 || dyC >= \"+t.outWidth+\".0 ||\\n                  fract(dyC) > 0.0) {\\n                continue;\\n              }\\n              int idyC = int(dyC);\\n\\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\\n              int maxPosValue = \"+d+\" -\\n                  int(getMaxPos(batch, idyD, idyR, idyC, ch));\\n\\n              // Get the current value, check it against the value from the\\n              // position matrix.\\n              int curPosValue =\\n                  wD * \"+u+\" * \"+c+\" +\\n                  wR * \"+c+\" + wC;\\n              float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\\n\\n              dotProd += dyValue * mask;\\n            }\\n          }\\n        }\\n        setOutput(dotProd);\\n      }\\n    \"},_s=function(t,e,n,r,o,a,i){void 0===n&&(n=!1),void 0===r&&(r=!1),void 0===o&&(o=!1),void 0===a&&(a=null),void 0===i&&(i=!1),this.variableNames=[\"matrixA\",\"matrixB\"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e;var s=n?t[1]:t[2],u=Math.ceil(s/2),c=n?\"i * 2, rc.y\":\"rc.y, i * 2\",l=r?\"rc.z, i * 2\":\"i * 2, rc.z\",h=n?[\"a.xxyy\",\"a.zzww\"]:[\"a.xxzz\",\"a.yyww\"],f=r?[\"b.xzxz\",\"b.ywyw\"]:[\"b.xyxy\",\"b.zwzw\"],d=\"\",p=\"\";a&&(d=i?\"vec4 activation(vec4 a) {\\n          vec4 b = getPreluActivationWeightsAtOutCoords();\\n          \"+a+\"\\n        }\":\"vec4 activation(vec4 x) {\\n          \"+a+\"\\n        }\",p=\"result = activation(result);\");var v=o?\"result += getBiasAtOutCoords();\":\"\";o&&this.variableNames.push(\"bias\"),i&&this.variableNames.push(\"preluActivationWeights\"),this.userCode=\"\\n      \"+d+\"\\n\\n      const float sharedDimension = \"+u+\".0;\\n\\n      vec4 dot2x2ARowBCol(ivec3 rc) {\\n        vec4 result = vec4(0);\\n        for (int i = 0; i < \"+u+\"; i++) {\\n          vec4 a = getMatrixA(rc.x, \"+c+\");\\n          vec4 b = getMatrixB(rc.x, \"+l+\");\\n\\n          // These swizzled products need to be separately added.\\n          // See: https://github.com/tensorflow/tfjs/issues/1735\\n          result += (\"+h[0]+\" * \"+f[0]+\");\\n          result += (\"+h[1]+\" * \"+f[1]+\");\\n        }\\n        return result;\\n      }\\n\\n      void main() {\\n        ivec3 rc = getOutputCoords();\\n        vec4 result = dot2x2ARowBCol(rc);\\n\\n        \"+v+\"\\n\\n        \"+p+\"\\n\\n        setOutput(result);\\n      }\\n    \"},Os=function(){function t(t,e,n){this.variableNames=[\"probs\"],this.outputShape=[t,n],this.userCode=\"\\n      uniform float seed;\\n\\n      void main() {\\n        ivec2 coords = getOutputCoords();\\n        int batch = coords[0];\\n\\n        float r = random(seed);\\n        float cdf = 0.0;\\n\\n        for (int i = 0; i < \"+(e-1)+\"; i++) {\\n          cdf += getProbs(batch, i);\\n\\n          if (r < cdf) {\\n            setOutput(float(i));\\n            return;\\n          }\\n        }\\n\\n        // If no other event happened, last event happened.\\n        setOutput(float(\"+(e-1)+\"));\\n      }\\n    \"}return t.prototype.getCustomSetupFunc=function(t){var e=this;return function(n,r){null==e.seedLoc&&(e.seedLoc=n.getUniformLocation(r,\"seed\")),n.gl.uniform1f(e.seedLoc,t)}},t}(),Ms=function(t,e,n,r){this.variableNames=[\"indices\"],this.outputShape=[t,e],this.userCode=\"\\n      void main() {\\n        ivec2 coords = getOutputCoords();\\n        int index = round(getIndices(coords.x));\\n        setOutput(mix(float(\"+r+\"), float(\"+n+\"),\\n                      float(index == coords.y)));\\n      }\\n    \"},Bs=function(t){this.variableNames=[\"A\"],this.packedInputs=!1,this.packedOutput=!0,this.outputShape=t;var e=t.length;if(0===e)this.userCode=\"\\n        void main() {\\n          setOutput(vec4(getA(), 0., 0., 0.));\\n        }\\n      \";else{var n=Xa(\"rc\",e),r=ui(e),o=function(t,e,n){if(1===t)return\"rc > \"+e[0];for(var r=\"\",o=t-2;o<t;o++)r+=n[o]+\" >= \"+e[o],o<t-1&&(r+=\"||\");return r}(e,t,n),a=function(t,e,n,r){if(1===t)return\"\";var o=r.slice(-2);return\"\\n    int r = \"+o[0]+\";\\n    int c = \"+o[1]+\";\\n    int rp1 = r + 1;\\n    int cp1 = c + 1;\\n\\n    bool cEdge = cp1 >= \"+e+\";\\n    bool rEdge = rp1 >= \"+n+\";\\n  \"}(e,t[t.length-1],t[t.length-2],n),i=function(t,e){var n=t.length,r=function(t,e){for(var n=[],r=0;r<=1;r++)for(var o=0;o<=1;o++){for(var a=(0===r?\"r\":\"rp1\")+\", \"+(0===o?\"c\":\"cp1\"),i=2;i<t;i++)a=e[e.length-1-i]+\",\"+a;n.push(a)}return n}(n,e);return 1===n?\"getA(rc),\\n            rc + 1 >= \"+t[0]+\" ? 0. : getA(rc + 1),\\n            0, 0\":\"getA(\"+r[0]+\"),\\n          cEdge ? 0. : getA(\"+r[1]+\"),\\n          rEdge ? 0. : getA(\"+r[2]+\"),\\n          rEdge || cEdge ? 0. : getA(\"+r[3]+\")\"}(t,n);this.userCode=\"\\n        void main() {\\n          \"+r+\" rc = getOutputCoords();\\n\\n          if(\"+o+\") {\\n            setOutput(vec4(0));\\n          } else {\\n            \"+a+\"\\n\\n            setOutput(vec4(\"+i+\"));\\n          }\\n        }\\n      \"}};var Ps=function(t,e,n){this.variableNames=[\"x\"],this.outputShape=e.map((function(e,n){return e[0]+t[n]+e[1]}));var r=t.length,o=ui(r),a=e.map((function(t){return t[0]})).join(\",\"),i=e.map((function(e,n){return e[0]+t[n]})).join(\",\"),s=[\"coords[0]\",\"coords[1]\",\"coords[2]\",\"coords[3]\"].slice(0,r);this.userCode=1!==r?\"\\n      \"+o+\" start = \"+o+\"(\"+a+\");\\n      \"+o+\" end = \"+o+\"(\"+i+\");\\n\\n      void main() {\\n        \"+o+\" outC = getOutputCoords();\\n        if (any(lessThan(outC, start)) || any(greaterThanEqual(outC, end))) {\\n          setOutput(float(\"+n+\"));\\n        } else {\\n          \"+o+\" coords = outC - start;\\n          setOutput(getX(\"+s+\"));\\n        }\\n      }\\n    \":\"\\n        int start = \"+a+\";\\n        int end = \"+i+\";\\n\\n        void main() {\\n          int outC = getOutputCoords();\\n          if (outC < start || outC >= end) {\\n            setOutput(float(\"+n+\"));\\n          } else {\\n            setOutput(getX(outC - start));\\n          }\\n        }\\n      \"},Ls=function(t,e,n){this.variableNames=[\"x\"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e.map((function(e,n){return e[0]+t[n]+e[1]}));for(var r=t.length,o=ui(r),a=e.map((function(t){return t[0]})).join(\",\"),i=e.map((function(e,n){return e[0]+t[n]})).join(\",\"),s=Xa(\"rc\",r),u=Xa(\"source\",r),c=s[r-1]+\" < \"+this.outputShape[r-1],l=1===r?\"source\":\"vec2(\"+u.slice(-2).join()+\")\",h=[o+\" rc = outputLoc;\",s[r-1]+\" += 1;\\n       if(\"+c+\") {\\n      \",1===r?\"\":\"}\\n       rc = outputLoc;\\n       \"+s[r-2]+\" += 1;\\n       if(\"+s[r-2]+\" < \"+this.outputShape[r-2]+\") {\",1===r?\"\":\"  \"+s[r-1]+\" += 1;\\n         if(\"+c+\") {\"],f=1===r?\"rc < start || rc >= end\":\"any(lessThan(rc, start)) || any(greaterThanEqual(rc, end))\",d=\"\",p=0,v=1===r?2:4;p<v;p++)d+=\"\\n        \"+h[p]+\"\\n        if (\"+f+\") {\\n          result[\"+p+\"] = float(\"+n+\");\\n        } else {\\n          \"+o+\" source = rc - start;\\n          result[\"+p+\"] = getChannel(getX(\"+u.join()+\"), \"+l+\");\\n        }\\n      \";d+=1===r?\"} \":\"}}\",this.userCode=\"\\n      const \"+o+\" start = \"+o+\"(\"+a+\");\\n      const \"+o+\" end = \"+o+\"(\"+i+\");\\n\\n      void main() {\\n        \"+o+\" outputLoc = getOutputCoords();\\n        vec4 result = vec4(0.);\\n        \"+d+\"\\n        setOutput(result);\\n      }\\n    \"},Ws=function(t,e,n,r,o){if(void 0===r&&(r=!1),void 0===o&&(o=!1),this.variableNames=[\"x\"],\"avg\"===e&&n)throw new Error(\"Cannot compute positions for average pool.\");var a=t.filterWidth,i=t.strideHeight,s=t.strideWidth,u=t.dilationHeight,c=t.dilationWidth,l=t.effectiveFilterHeight,h=t.effectiveFilterWidth,f=t.padInfo.top,d=t.padInfo.left;this.outputShape=t.outShape;var p=\"avg\"===e,v=\"((batch  * \"+t.inHeight+\" + xR) * \"+t.inWidth+\" + xC) * \"+t.inChannels+\" + d\",g=\"(xR * \"+t.inWidth+\" + xC) * \"+t.inChannels+\" + d\",m=\"0.0\";if(p||(m=\"-1.0 / 1e-20\"),n)this.userCode=\"\\n        const ivec2 strides = ivec2(\"+i+\", \"+s+\");\\n        const ivec2 pads = ivec2(\"+f+\", \"+d+\");\\n\\n        void main() {\\n          ivec4 coords = getOutputCoords();\\n          int batch = coords[0];\\n          int d = coords[3];\\n\\n          ivec2 xRCCorner = coords.yz * strides - pads;\\n          int xRCorner = xRCCorner.x;\\n          int xCCorner = xRCCorner.y;\\n\\n          // max/min x(?, ?, d) to get y(yR, yC, d).\\n          // ? = to be determined\\n          float minMaxValue = 0.0;\\n          float minMaxValueFound = 0.0;\\n          int minMaxPosition = 0;\\n          float avgValue = 0.0;\\n\\n          for (int wR = 0; wR < \"+l+\";\\n              wR += \"+u+\") {\\n            int xR = xRCorner + wR;\\n\\n            if (xR < 0 || xR >= \"+t.inHeight+\") {\\n              continue;\\n            }\\n\\n            for (int wC = 0; wC < \"+h+\";\\n                wC += \"+c+\") {\\n              int xC = xCCorner + wC;\\n\\n              if (xC < 0 || xC >= \"+t.inWidth+\") {\\n                continue;\\n              }\\n\\n              float value = getX(batch, xR, xC, d);\\n\\n              // If a min / max value has already been found, use it. If not,\\n              // use the current value.\\n              float currMinMaxValue = mix(\\n                  value, minMaxValue, minMaxValueFound);\\n              if (value >= currMinMaxValue) {\\n                minMaxValue = value;\\n                minMaxValueFound = 1.0;\\n                minMaxPosition = \"+(r?o?v:g:\"wR * \"+h+\" + wC\")+\";\\n              }\\n            }\\n          }\\n          setOutput(float(minMaxPosition));\\n        }\\n      \";else{var y=e+\"(\"+e+\"(\"+e+\"(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])\";\"avg\"===e&&(y=\"avgValue / count\");var x=4*Math.floor(a/4),b=a%4,w=\"\\n      if (\"+p+\") {\\n        avgValue += dot(values, ones);\\n      } else {\\n        minMaxValue = max(values, minMaxValue);\\n      }\\n    \";this.userCode=\"\\n      const ivec2 strides = ivec2(\"+i+\", \"+s+\");\\n      const ivec2 pads = ivec2(\"+f+\", \"+d+\");\\n      const float initializationValue = \"+m+\";\\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\\n\\n      float count = 0.0;\\n\\n      float getValue(int batch, int xR, int xC, int d) {\\n        if (xC < 0 || xC >= \"+t.inWidth+\") {\\n          return initializationValue;\\n        }\\n        count += 1.0;\\n        return getX(batch, xR, xC, d);\\n      }\\n\\n      void main() {\\n        ivec4 coords = getOutputCoords();\\n        int batch = coords[0];\\n        int d = coords[3];\\n\\n        ivec2 xRCCorner = coords.yz * strides - pads;\\n        int xRCorner = xRCCorner.x;\\n        int xCCorner = xRCCorner.y;\\n\\n        // max/min x(?, ?, d) to get y(yR, yC, d).\\n        // ? = to be determined\\n        vec4 minMaxValue = vec4(\"+m+\");\\n        float avgValue = 0.0;\\n        count = 0.0;\\n\\n        for (int wR = 0; wR < \"+l+\";\\n            wR += \"+u+\") {\\n          int xR = xRCorner + wR;\\n\\n          if (xR < 0 || xR >= \"+t.inHeight+\") {\\n            continue;\\n          }\\n\\n          for (int wC = 0; wC < \"+x+\"; wC += 4) {\\n            int xC = xCCorner + wC * \"+c+\";\\n\\n            vec4 values = vec4(\\n              getValue(batch, xR, xC, d),\\n              getValue(batch, xR, xC + \"+c+\", d),\\n              getValue(batch, xR, xC + 2 * \"+c+\", d),\\n              getValue(batch, xR, xC + 3 * \"+c+\", d)\\n            );\\n\\n            \"+w+\"\\n          }\\n\\n          int xC = xCCorner + \"+x+\";\\n          if (\"+(1===b)+\") {\\n            vec4 values = vec4(\\n              getValue(batch, xR, xC, d),\\n              initializationValue,\\n              initializationValue,\\n              initializationValue\\n            );\\n\\n            \"+w+\"\\n          } else if (\"+(2===b)+\") {\\n            vec4 values = vec4(\\n              getValue(batch, xR, xC, d),\\n              getValue(batch, xR, xC + \"+c+\", d),\\n              initializationValue,\\n              initializationValue\\n            );\\n\\n            \"+w+\"\\n          } else if (\"+(3===b)+\") {\\n            vec4 values = vec4(\\n              getValue(batch, xR, xC, d),\\n              getValue(batch, xR, xC + \"+c+\", d),\\n              getValue(batch, xR, xC + 2 * \"+c+\", d),\\n              initializationValue\\n            );\\n\\n            \"+w+\"\\n          }\\n        }\\n        setOutput(\"+y+\");\\n      }\\n    \"}},Us=function(t,e,n,r,o){if(void 0===r&&(r=!1),void 0===o&&(o=!1),this.variableNames=[\"x\"],\"avg\"===e&&n)throw new Error(\"Cannot compute positions for average pool.\");var a=t.filterWidth,i=t.strideDepth,s=t.strideHeight,u=t.strideWidth,c=t.dilationDepth,l=t.dilationHeight,h=t.dilationWidth,f=t.effectiveFilterDepth,d=t.effectiveFilterHeight,p=t.effectiveFilterWidth,v=t.padInfo.front,g=t.padInfo.top,m=t.padInfo.left;this.outputShape=t.outShape;var y=\"avg\"===e,x=\"0.0\";if(y||(x=\"-1.0 / 1e-20\"),n)this.userCode=\"\\n        const ivec3 strides =\\n            ivec3(\"+i+\", \"+s+\", \"+u+\");\\n        const ivec3 pads = ivec3(\"+v+\", \"+g+\", \"+m+\");\\n\\n        void main() {\\n          ivec5 coords = getOutputCoords();\\n          int batch = coords.x;\\n          int ch = coords.u;\\n\\n          ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\\n          int xDCorner = xCorner.x;\\n          int xRCorner = xCorner.y;\\n          int xCCorner = xCorner.z;\\n\\n          // max/min x(?, ?, ?, ch) to get y(yD, yR, yC, ch).\\n          // ? = to be determined\\n          float minMaxValue = 0.0;\\n          float minMaxValueFound = 0.0;\\n          int minMaxPosition = 0;\\n\\n          for (int wD = 0; wD < \"+f+\";\\n              wD += \"+c+\") {\\n            int xD = xDCorner + wD;\\n\\n            if (xD < 0 || xD >= \"+t.inDepth+\") {\\n              continue;\\n            }\\n\\n            for (int wR = 0; wR < \"+d+\";\\n                wR += \"+l+\") {\\n              int xR = xRCorner + wR;\\n\\n              if (xR < 0 || xR >= \"+t.inHeight+\") {\\n                continue;\\n              }\\n\\n              for (int wC = 0; wC < \"+p+\";\\n                  wC += \"+h+\") {\\n                int xC = xCCorner + wC;\\n\\n                if (xC < 0 || xC >= \"+t.inWidth+\") {\\n                  continue;\\n                }\\n\\n                float value = getX(batch, xD, xR, xC, ch);\\n\\n                // If a min / max value has already been found, use it. If not,\\n                // use the current value.\\n                float currMinMaxValue = mix(\\n                    value, minMaxValue, minMaxValueFound);\\n                if (value >= currMinMaxValue) {\\n                  minMaxValue = value;\\n                  minMaxValueFound = 1.0;\\n                  minMaxPosition = \"+(r?o?\"(((batch * \"+t.inDepth+\" + xD) * \"+t.inHeight+\" + xR) * \"+t.inWidth+\" + xC) * \"+t.inChannels+\" + ch\":\"((xD * \"+t.inHeight+\" + xR) * \"+t.inWidth+\" + xC) * \"+t.inChannels+\" + ch\":\"wD * \"+d+\" * \"+p+\" +\\n                      wR * \"+p+\" + wC\")+\";\\n                }\\n              }\\n            }\\n          }\\n          setOutput(float(minMaxPosition));\\n        }\\n      \";else{var b=e+\"(\"+e+\"(\"+e+\"(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])\";\"avg\"===e&&(b=\"avgValue / count\");var w=4*Math.floor(a/4),C=a%4,E=\"\\n      if (\"+y+\") {\\n        avgValue += dot(values, ones);\\n      } else {\\n        minMaxValue = max(values, minMaxValue);\\n      }\\n    \";this.userCode=\"\\n      const ivec3 strides =\\n        ivec3(\"+i+\", \"+s+\", \"+u+\");\\n      const ivec3 pads = ivec3(\"+v+\", \"+g+\", \"+m+\");\\n      const float initializationValue = \"+x+\";\\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\\n\\n      float count = 0.0;\\n\\n      float getValue(int batch, int xD, int xR, int xC, int ch) {\\n        if (xC < 0 || xC >= \"+t.inWidth+\") {\\n          return initializationValue;\\n        }\\n        count += 1.0;\\n        return getX(batch, xD, xR, xC, ch);\\n      }\\n\\n      void main() {\\n        ivec5 coords = getOutputCoords();\\n        int batch = coords.x;\\n        int ch = coords.u;\\n\\n        ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\\n        int xDCorner = xCorner.x;\\n        int xRCorner = xCorner.y;\\n        int xCCorner = xCorner.z;\\n\\n        // max/min x(?, ?, ?, d) to get y(yD, yR, yC, ch).\\n        // ? = to be determined\\n        vec4 minMaxValue = vec4(\"+x+\");\\n        float avgValue = 0.0;\\n        count = 0.0;\\n\\n        for (int wD = 0; wD < \"+f+\";\\n            wD += \"+c+\") {\\n          int xD = xDCorner + wD;\\n\\n          if (xD < 0 || xD >= \"+t.inDepth+\") {\\n            continue;\\n          }\\n\\n          for (int wR = 0; wR < \"+d+\";\\n            wR += \"+l+\") {\\n            int xR = xRCorner + wR;\\n\\n            if (xR < 0 || xR >= \"+t.inHeight+\") {\\n              continue;\\n            }\\n\\n            for (int wC = 0; wC < \"+w+\"; wC += 4) {\\n              int xC = xCCorner + wC * \"+h+\";\\n\\n              vec4 values = vec4(\\n                getValue(batch, xD, xR, xC, ch),\\n                getValue(batch, xD, xR, xC + \"+h+\", ch),\\n                getValue(batch, xD, xR, xC + 2 * \"+h+\", ch),\\n                getValue(batch, xD, xR, xC + 3 * \"+h+\", ch)\\n              );\\n\\n              \"+E+\"\\n            }\\n\\n            int xC = xCCorner + \"+w+\";\\n            if (\"+(1===C)+\") {\\n              vec4 values = vec4(\\n                getValue(batch, xD, xR, xC, ch),\\n                initializationValue,\\n                initializationValue,\\n                initializationValue\\n              );\\n\\n              \"+E+\"\\n            } else if (\"+(2===C)+\") {\\n              vec4 values = vec4(\\n                getValue(batch, xD, xR, xC, ch),\\n                getValue(batch, xD, xR, xC + \"+h+\", ch),\\n                initializationValue,\\n                initializationValue\\n              );\\n\\n              \"+E+\"\\n            } else if (\"+(3===C)+\") {\\n              vec4 values = vec4(\\n                getValue(batch, xD, xR, xC, ch),\\n                getValue(batch, xD, xR, xC + \"+h+\", ch),\\n                getValue(batch, xD, xR, xC + 2 * \"+h+\", ch),\\n                initializationValue\\n              );\\n\\n              \"+E+\"\\n            }\\n          }\\n          setOutput(\"+b+\");\\n        }\\n      }\\n    \"}},Vs=function(t,e){this.variableNames=[\"x\"];var n=t.windowSize,r=t.batchSize,o=t.inSize,a=Math.ceil(o/n);this.outputShape=[r,a];var i=\"0.0\",s=\"\";\"prod\"===e?i=\"1.0\":\"min\"===e?(i=\"1.0 / 1e-20\",s=\"min\"):\"max\"===e&&(i=\"-1.0 / 1e-20\",s=\"max\");var u=e+\"(\"+e+\"(\"+e+\"(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])\";\"sum\"===e?u=\"sumValue\":\"prod\"===e?u=\"prodValue\":\"all\"===e?u=\"allValue\":\"any\"===e&&(u=\"anyValue\");var c=4*Math.floor(n/4),l=n%4,h=\"\\n      if (\"+(\"sum\"===e)+\") {\\n        sumValue += dot(values, ones);\\n      } else if (\"+(\"prod\"===e)+\") {\\n        vec2 tmp = vec2(values[0], values[1]) * vec2(values[2], values[3]);\\n        prodValue *= tmp[0] * tmp[1];\\n      } else {\\n        minMaxValue = \"+s+\"(values, minMaxValue);\\n      }\\n    \",f=\"vec4\";\"all\"===e?(i=\"1.0\",h=\"\\n        bool reducedAllValue = all(values);\\n        float floatedReducedAllValue = float(reducedAllValue);\\n        allValue = float(allValue >= 1.0 && floatedReducedAllValue >= 1.0);\\n      \",f=\"bvec4\"):\"any\"===e&&(i=\"0.0\",h=\"\\n        bool reducedAnyValue = any(values);\\n        float floatedReducedAnyValue = float(reducedAnyValue);\\n        anyValue = float(anyValue >= 1.0 || floatedReducedAnyValue >= 1.0);\\n      \",f=\"bvec4\");var d=\"\";o%n>0&&(d=\"\\n        if (inIdx < 0 || inIdx >= \"+o+\") {\\n          return initializationValue;\\n        }\\n      \"),this.userCode=\"\\n      const float initializationValue = \"+i+\";\\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\\n\\n      float getValue(int batch, int inIdx) {\\n        \"+d+\"\\n        return getX(batch, inIdx);\\n      }\\n\\n      void main() {\\n        ivec2 coords = getOutputCoords();\\n        int batch = coords[0];\\n        int outIdx = coords[1];\\n        int inOffset = outIdx * \"+n+\";\\n\\n        vec4 minMaxValue = vec4(\"+i+\");\\n        float prodValue = 1.0;\\n        float sumValue = 0.0;\\n        float allValue = 1.0;\\n        float anyValue = 0.0;\\n\\n        for (int i = 0; i < \"+c+\"; i += 4) {\\n          int inIdx = inOffset + i;\\n          \"+f+\" values = \"+f+\"(\\n            getValue(batch, inIdx),\\n            getValue(batch, inIdx + 1),\\n            getValue(batch, inIdx + 2),\\n            getValue(batch, inIdx + 3)\\n          );\\n\\n          \"+h+\"\\n        }\\n\\n        int inIdx = inOffset + \"+c+\";\\n        if (\"+(1===l)+\") {\\n          \"+f+\" values = \"+f+\"(\\n            getValue(batch, inIdx),\\n            initializationValue,\\n            initializationValue,\\n            initializationValue\\n          );\\n\\n          \"+h+\"\\n        } else if (\"+(2===l)+\") {\\n          \"+f+\" values = \"+f+\"(\\n            getValue(batch, inIdx),\\n            getValue(batch, inIdx + 1),\\n            initializationValue,\\n            initializationValue\\n          );\\n\\n          \"+h+\"\\n        } else if (\"+(3===l)+\") {\\n          \"+f+\" values = \"+f+\"(\\n            getValue(batch, inIdx),\\n            getValue(batch, inIdx + 1),\\n            getValue(batch, inIdx + 2),\\n            initializationValue\\n          );\\n\\n          \"+h+\"\\n        }\\n        setOutput(\"+u+\");\\n      }\\n    \"},zs=function(t,e){this.variableNames=[\"A\"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t;for(var n=\"\",r=0;r<4;r++){var o=\"thisRC = rc;\";r%2==1&&(o+=\"thisRC.z += 1;\"),r>1&&(o+=\"thisRC.y += 1;\"),n+=\"\\n        \"+o+\"\\n        \"+(r>0?\"if(thisRC.y < rows && thisRC.z < cols){\":\"\")+\"\\n          int flatIndex = getFlatIndex(thisRC);\\n\\n          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flatIndex);\\n          vec2 inputRCInnerDims = vec2(float(inputRC.y),float(inputRC.z));\\n\\n          result[\"+r+\"] =\\n            getChannel(getA(inputRC.x, inputRC.y, inputRC.z), inputRCInnerDims);\\n        \"+(r>0?\"}\":\"\")+\"\\n      \"}this.userCode=\"\\n      \\n    ivec3 inputCoordsFromReshapedOutCoords(int index) {\\n      \"+$a([\"r\",\"c\",\"d\"],e)+\"\\n      return ivec3(r, c, d);\\n    }\\n  \\n      \"+Qa(t)+\"\\n\\n      void main() {\\n        ivec3 rc = getOutputCoords();\\n\\n        vec4 result = vec4(0.);\\n\\n        ivec3 thisRC;\\n        int rows = \"+t[1]+\";\\n        int cols = \"+t[2]+\";\\n\\n        \"+n+\"\\n\\n        setOutput(result);\\n      }\\n    \"};var Gs=function(t,e,n){this.variableNames=[\"dy\"],this.outputShape=[],this.outputShape=e.shape;var r=e.shape,o=r[1],a=r[2],i=t.shape,s=i[1],u=i[2],c=[n&&s>1?o-1:o,n&&u>1?a-1:a],l=[n&&s>1?s-1:s,n&&u>1?u-1:u],h=c[0]/l[0],f=c[1]/l[1],d=1/h,p=1/f,v=2*Math.ceil(d)+2,g=2*Math.ceil(p)+2;this.userCode=\"\\n      void main() {\\n        ivec4 coords = getOutputCoords();\\n        int b = coords[0];\\n        int d = coords[3];\\n        int r = coords[1];\\n        int c = coords[2];\\n\\n        float accumulator = 0.0;\\n\\n        const float heightScale = float(\"+h+\");\\n        const float widthScale = float(\"+f+\");\\n\\n        const float invHeightScale = float(\"+d+\");\\n        const float invWidthScale = float(\"+p+\");\\n\\n        const int winHeight = int(\"+v+\");\\n        const int winWidth = int(\"+g+\");\\n\\n        // Compute bounds for where in dy we will look\\n        float startRLerp = floor(float(r) * invHeightScale);\\n        int startDyR = int(startRLerp - float(winHeight / 2));\\n\\n        float startCLerp = floor(float(c) * invWidthScale);\\n        int startDyC = int(startCLerp - float(winWidth / 2));\\n\\n        // Loop over dy\\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\\n          int dyR = dyROffset + startDyR;\\n\\n          // Guard against the window exceeding the bounds of dy\\n          if (dyR < 0 || dyR >= \"+s+\") {\\n            continue;\\n          }\\n\\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\\n            int dyC = dyCOffset + startDyC;\\n\\n            // Guard against the window exceeding the bounds of dy\\n            if (dyC < 0 || dyC >= \"+u+\") {\\n              continue;\\n            }\\n\\n            float dxR = float(dyR) * heightScale;\\n            int topDxRIndex = int(floor(dxR));\\n            int bottomDxRIndex = int(min(ceil(dxR), \"+(o-1)+\".0));\\n            float dxRLerp = dxR - float(topDxRIndex);\\n            float inverseDxRLerp = 1.0 - dxRLerp;\\n\\n            float dxC = float(dyC) * widthScale;\\n            int leftDxCIndex = int(floor(dxC));\\n            int rightDxCIndex = int(min(ceil(dxC), \"+(a-1)+\".0));\\n            float dxCLerp = dxC - float(leftDxCIndex);\\n            float inverseDxCLerp = 1.0 - dxCLerp;\\n\\n            if (r == topDxRIndex && c == leftDxCIndex) {\\n              // topLeft\\n              accumulator +=\\n                getDy(b, dyR, dyC, d) * inverseDxRLerp * inverseDxCLerp;\\n            }\\n\\n            if (r == topDxRIndex && c == rightDxCIndex) {\\n              // topRight\\n              accumulator += getDy(b, dyR, dyC, d) * inverseDxRLerp * dxCLerp;\\n            }\\n\\n            if (r == bottomDxRIndex && c == leftDxCIndex) {\\n              // bottomLeft\\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * inverseDxCLerp;\\n            }\\n\\n            if (r == bottomDxRIndex && c == rightDxCIndex) {\\n              // bottomRight\\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * dxCLerp;\\n            }\\n          }\\n        }\\n        // End loop over dy\\n\\n        setOutput(accumulator);\\n      }\\n    \"},Hs=function(t,e,n,r){this.variableNames=[\"A\"],this.outputShape=[];var o=t[0],a=t[1],i=t[2],s=t[3];this.outputShape=[o,e,n,s];var u=[r&&e>1?a-1:a,r&&n>1?i-1:i],c=[r&&e>1?e-1:e,r&&n>1?n-1:n];this.userCode=\"\\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\\n          \"+u[0]/c[0]+\",\\n          \"+u[1]/c[1]+\");\\n      const vec2 inputShapeRC = vec2(\"+a+\".0, \"+i+\".0);\\n\\n      void main() {\\n        ivec4 coords = getOutputCoords();\\n        int b = coords[0];\\n        int d = coords[3];\\n        ivec2 yRC = coords.yz;\\n\\n        // Fractional source index.\\n        vec2 sourceFracIndexRC = vec2(yRC) * effectiveInputOverOutputRatioRC;\\n\\n        // Compute the four integer indices.\\n        ivec2 sourceFloorRC = ivec2(sourceFracIndexRC);\\n        ivec2 sourceCeilRC = ivec2(\\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\\n\\n        float topLeft = getA(b, sourceFloorRC.x, sourceFloorRC.y, d);\\n        float bottomLeft = getA(b, sourceCeilRC.x, sourceFloorRC.y, d);\\n        float topRight = getA(b, sourceFloorRC.x, sourceCeilRC.y, d);\\n        float bottomRight = getA(b, sourceCeilRC.x, sourceCeilRC.y, d);\\n\\n        vec2 fracRC = sourceFracIndexRC - vec2(sourceFloorRC);\\n\\n        float top = topLeft + (topRight - topLeft) * fracRC.y;\\n        float bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;\\n        float newValue = top + (bottom - top) * fracRC.x;\\n\\n        setOutput(newValue);\\n      }\\n    \"},qs=function(t,e,n,r){this.variableNames=[\"A\"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[];var o=t[0],a=t[1],i=t[2],s=t[3];this.outputShape=[o,e,n,s];var u=[r&&e>1?a-1:a,r&&n>1?i-1:i],c=[r&&e>1?e-1:e,r&&n>1?n-1:n];this.userCode=\"\\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\\n          \"+u[0]/c[0]+\",\\n          \"+u[1]/c[1]+\",\\n          \"+u[1]/c[1]+\");\\n      const vec3 inputShapeRC = vec3(\"+a+\".0, \"+i+\".0,\\n                                     \"+i+\".0);\\n\\n      float getAValue(int b, int r, int c, int d) {\\n        return getChannel(getA(b, r, c, d), vec2(c, d));\\n      }\\n\\n      void main() {\\n        ivec4 coords = getOutputCoords();\\n        int b = coords[0];\\n        int d = coords[3];\\n        // Calculate values for next column in yRC.z.\\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\\n\\n        // Fractional source index.\\n        vec3 sourceFracIndexRC = vec3(yRC) * effectiveInputOverOutputRatioRC;\\n\\n        // Compute the four integer indices.\\n        ivec3 sourceFloorRC = ivec3(sourceFracIndexRC);\\n        ivec3 sourceCeilRC = ivec3(\\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\\n\\n        // Should we calculate next column and row elements in 2x2 packed cell.\\n        bool hasNextCol = d < \"+(s-1)+\";\\n        bool hasNextRow = coords.z < \"+(n-1)+\";\\n\\n        // In parallel, construct four corners for all four components in\\n        // packed 2x2 cell.\\n        vec4 topLeft = vec4(\\n          getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d),\\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d + 1)\\n                     : 0.0,\\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d)\\n                     : 0.0,\\n          (hasNextRow && hasNextCol) ?\\n            getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d + 1) : 0.0);\\n\\n        vec4 bottomLeft = vec4(\\n          getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d),\\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d + 1)\\n                     : 0.0,\\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d)\\n                     : 0.0,\\n          (hasNextRow && hasNextCol) ?\\n            getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d + 1) : 0.0);\\n\\n        vec4 topRight = vec4(\\n          getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d),\\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d + 1)\\n                     : 0.0,\\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d)\\n                     : 0.0,\\n          (hasNextRow && hasNextCol) ?\\n            getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d + 1) : 0.0);\\n\\n        vec4 bottomRight = vec4(\\n          getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d),\\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d + 1)\\n                     : 0.0,\\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d)\\n                     : 0.0,\\n          (hasNextRow && hasNextCol) ?\\n            getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d + 1) : 0.0);\\n\\n        vec3 fracRC = sourceFracIndexRC - vec3(sourceFloorRC);\\n\\n        vec4 top = mix(topLeft, topRight, fracRC.yyzz);\\n        vec4 bottom = mix(bottomLeft, bottomRight, fracRC.yyzz);\\n        vec4 newValue = mix(top, bottom, fracRC.x);\\n\\n        setOutput(newValue);\\n      }\\n    \"},Ks=function(t,e,n){this.variableNames=[\"dy\"],this.outputShape=[],this.outputShape=e.shape;var r=e.shape,o=r[1],a=r[2],i=t.shape,s=i[1],u=i[2],c=[n&&s>1?o-1:o,n&&u>1?a-1:a],l=[n&&s>1?s-1:s,n&&u>1?u-1:u],h=c[0]/l[0],f=c[1]/l[1],d=1/h,p=1/f,v=2*Math.ceil(d)+2,g=2*Math.ceil(p)+2;this.userCode=\"\\n      void main() {\\n        ivec4 coords = getOutputCoords();\\n        int b = coords[0];\\n        int d = coords[3];\\n        int r = coords[1];\\n        int c = coords[2];\\n\\n        float accumulator = 0.0;\\n\\n        const float heightScale = float(\"+h+\");\\n        const float widthScale = float(\"+f+\");\\n\\n        const float invHeightScale = float(\"+d+\");\\n        const float invWidthScale = float(\"+p+\");\\n\\n        const int winHeight = int(\"+v+\");\\n        const int winWidth = int(\"+g+\");\\n\\n        // Compute bounds for where in dy we will look\\n        float startRLerp = floor(float(r) * invHeightScale);\\n        int startDyR = int(floor(startRLerp - float(winHeight / 2)));\\n\\n        float startCLerp = floor(float(c) * invWidthScale);\\n        int startDyC = int(floor(startCLerp - float(winWidth / 2)));\\n\\n        // Loop over dy\\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\\n          int dyR = dyROffset + startDyR;\\n\\n          // Guard against the window exceeding the bounds of dy\\n          if (dyR < 0 || dyR >= \"+s+\") {\\n            continue;\\n          }\\n\\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\\n            int dyC = dyCOffset + startDyC;\\n\\n            // Guard against the window exceeding the bounds of dy\\n            if (dyC < 0 || dyC >= \"+u+\") {\\n              continue;\\n            }\\n\\n            float sourceFracRow =\\n              float(\"+c[0]+\") *\\n                (float(dyR) / float(\"+l[0]+\"));\\n\\n            float sourceFracCol =\\n                float(\"+c[1]+\") *\\n                  (float(dyC) / float(\"+l[1]+\"));\\n\\n            int sourceNearestRow = int(min(\\n                float(int(\"+o+\") - 1),\\n                \"+n+\" ? float(round(sourceFracRow)) :\\n                                  float(floor(sourceFracRow))));\\n\\n            int sourceNearestCol = int(min(\\n                float(int(\"+a+\") - 1),\\n                \"+n+\" ? float(round(sourceFracCol)) :\\n                                  float(floor(sourceFracCol))));\\n\\n            if (r == sourceNearestRow && c == sourceNearestCol) {\\n              accumulator += getDy(b, dyR, dyC, d);\\n            }\\n          }\\n        }\\n        // End loop over dy\\n\\n        setOutput(accumulator);\\n      }\\n    \"},js=function(t,e,n,r){this.variableNames=[\"A\"],this.outputShape=[];var o=t[0],a=t[1],i=t[2],s=t[3];this.outputShape=[o,e,n,s];var u=[r&&e>1?a-1:a,r&&n>1?i-1:i],c=[r&&e>1?e-1:e,r&&n>1?n-1:n],l=r?\"0.5\":\"0.0\";this.userCode=\"\\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\\n          \"+u[0]/c[0]+\",\\n          \"+u[1]/c[1]+\");\\n      const vec2 inputShapeRC = vec2(\"+a+\".0, \"+i+\".0);\\n\\n      void main() {\\n        ivec4 coords = getOutputCoords();\\n        int b = coords[0];\\n        int d = coords[3];\\n        ivec2 yRC = coords.yz;\\n\\n        // Fractional source index.\\n        vec2 sourceFracIndexRC = vec2(yRC) * effectiveInputOverOutputRatioRC;\\n\\n        // Compute the coordinators of nearest neighbor point.\\n        ivec2 sourceNearestRC = ivec2(\\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + \"+l+\")));\\n\\n        float newValue = getA(b, sourceNearestRC.x, sourceNearestRC.y, d);\\n\\n        setOutput(newValue);\\n      }\\n    \"},Xs=function(t,e){this.variableNames=[\"x\"];var n=t.length;if(n>4)throw new Error(\"WebGL backend: Reverse of rank-\"+n+\" tensor is not yet supported\");if(this.outputShape=t,1!==n){var r=t.map((function(n,r){return function(n){return-1!==e.indexOf(n)&&1!==t[n]?t[n]+\" - coords[\"+n+\"] - 1\":\"coords[\"+n+\"]\"}(r)})).join(\",\"),o=ui(n);this.userCode=\"\\n      void main() {\\n        \"+o+\" coords = getOutputCoords();\\n        setOutput(getX(\"+r+\"));\\n      }\\n    \"}else this.userCode=\"\\n        void main() {\\n          int coord = getOutputCoords();\\n          setOutput(getX(\"+t[0]+\" - coord - 1));\\n        }\\n      \"},Ys=function(t,e){this.variableNames=[\"x\"],this.packedInputs=!0,this.packedOutput=!0;var n=t.length;if(n>4)throw new Error(\"WebGL backend: Reverse of rank-\"+n+\" tensor is not yet supported\");this.outputShape=t;var r=Xa(\"rc\",n),o=r[n-1]+\" + 1 < \"+this.outputShape[n-1],a=r[n-2]+\" + 1 < \"+this.outputShape[n-2],i=ui(n);function s(n){var r=t.map((function(r,o){return function(n,r){return-1!==e.indexOf(n)&&1!==t[n]?t[n]+\" - \"+r[n]+\" - 1\":\"\"+r[n]}(o,n)}));return\"getChannel(getX(\"+r.join(\",\")+\"), vec2(\"+r.slice(-2).join(\",\")+\"))\"}this.userCode=1===n?\"\\n        void main(){\\n          int rc = getOutputCoords();\\n          vec4 result = vec4(0.);\\n          result.r = getChannel(getX(\"+t[0]+\" - rc - 1),\\n            \"+t[0]+\" - rc - 1);\\n          if(\"+o+\"){\\n              result.g = getChannel(getX(\"+t[0]+\" - (rc  + 1) - 1),\\n                \"+t[0]+\" - (rc  + 1) - 1);\\n          }\\n          setOutput(result);\\n        }\\n      \":\"\\n        void main() {\\n          \"+i+\" rc = getOutputCoords();\\n          vec4 result = vec4(0.);\\n          result.r = \"+function(t){return s(t)}(r.slice())+\";\\n          if(\"+o+\"){\\n            result.g = \"+function(t){return t[n-1]=\"(\"+t[n-1]+\" + 1)\",s(t)}(r.slice())+\";\\n          }\\n          if(\"+a+\") {\\n            result.b = \"+function(t){return t[n-2]=\"(\"+t[n-2]+\" + 1)\",s(t)}(r.slice())+\";\\n            if(\"+o+\") {\\n              result.a = \"+function(t){return t[n-1]=\"(\"+t[n-1]+\" + 1)\",t[n-2]=\"(\"+t[n-2]+\" + 1)\",s(t)}(r.slice())+\";\\n            }\\n          }\\n          setOutput(result);\\n        }\\n    \"},$s=function(t,e,n,r,o,a,i){void 0===i&&(i=!0),this.variableNames=[\"updates\",\"indices\",\"defaultValue\"],this.outputShape=a;var s=ui(o.length),u=ui(a.length),c=\"\";1===n?c=\"i\":2===n&&(c=\"i, j\");var l=\"getIndices(\"+c+\")\",h=\"\";1===r?h=\"i\":2===r&&(h=\"i, coords[1]\");var f=\"getUpdates(\"+h+\")\",d=e>1?\"strides[j]\":\"strides\";this.userCode=\"\\n        \"+s+\" strides = \"+s+\"(\"+o+\");\\n\\n        void main() {\\n          \"+u+\" coords = getOutputCoords();\\n          float sum = 0.0;\\n          bool found = false;\\n          for (int i = 0; i < \"+t+\"; i++) {\\n            int flattenedIndex = 0;\\n            for (int j = 0; j < \"+e+\"; j++) {\\n              int index = round(\"+l+\");\\n              flattenedIndex += index * \"+d+\";\\n            }\\n            if (flattenedIndex == coords[0]) {\\n              sum += \"+f+\";\\n              found = true;\\n            }\\n          }\\n          setOutput(mix(getDefaultValue(), sum, float(found)));\\n        }\\n      \"},Qs=function(t,e){this.variableNames=[\"x\",\"segmentIds\"];var n=t.windowSize,r=t.batchSize,o=t.inSize,a=t.numSegments,i=a*Math.ceil(o/n);this.outputShape=[r,i];var s=4*Math.floor(n/4),u=n%4,c=\"\\n        sumValue += dot(values, segFilter);\\n    \",l=\"\";o%n>0&&(l=\"\\n        if (inIdx < 0 || inIdx >= \"+o+\") {\\n          return initializationValue;\\n        }\\n      \");var h=\"\";o%n>0&&(h=\"\\n        if (inIdx < 0 || inIdx >= \"+o+\") {\\n          return -1.0;\\n        }\\n      \"),this.userCode=\"\\n      const float initializationValue = 0.0;\\n\\n      float getValue(int batch, int inIdx) {\\n        \"+l+\"\\n        return getX(batch, inIdx);\\n      }\\n\\n      float getSegmentIdAtIndex(int inIdx) {\\n        \"+h+\"\\n        return getSegmentIds(inIdx);\\n      }\\n\\n      void main() {\\n        ivec2 coords = getOutputCoords();\\n        int batch = coords[0];\\n        int outIdx = coords[1];\\n        int inOffset = int(floor(float(outIdx) / float(\\n          \"+a+\")) * float(\"+n+\"));\\n        int currentSeg = int(mod(float(outIdx), float(\"+a+\")));\\n\\n        float sumValue = 0.0;\\n\\n        for (int i = 0; i < \"+s+\"; i += 4) {\\n          int inIdx = inOffset + i;\\n          vec4 values = vec4(\\n            getValue(batch, inIdx),\\n            getValue(batch, inIdx + 1),\\n            getValue(batch, inIdx + 2),\\n            getValue(batch, inIdx + 3)\\n          );\\n\\n          vec4 segFilter = vec4(\\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\\n            int(getSegmentIdAtIndex(inIdx + 3)) == currentSeg ? 1 : 0\\n          );\\n\\n          \"+c+\"\\n        }\\n\\n        int inIdx = inOffset + \"+s+\";\\n        if (\"+(1===u)+\") {\\n          vec4 values = vec4(\\n            getValue(batch, inIdx),\\n            initializationValue,\\n            initializationValue,\\n            initializationValue\\n          );\\n\\n          int inIdxSeg = int(getSegmentIdAtIndex(inIdx));\\n\\n          vec4 segFilter = vec4(\\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\\n            0,\\n            0,\\n            0\\n          );\\n\\n          \"+c+\"\\n        } else if (\"+(2===u)+\") {\\n          vec4 values = vec4(\\n            getValue(batch, inIdx),\\n            getValue(batch, inIdx + 1),\\n            initializationValue,\\n            initializationValue\\n          );\\n\\n          vec4 segFilter = vec4(\\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\\n              0,\\n              0\\n          );\\n\\n          \"+c+\"\\n        } else if (\"+(3===u)+\") {\\n          vec4 values = vec4(\\n            getValue(batch, inIdx),\\n            getValue(batch, inIdx + 1),\\n            getValue(batch, inIdx + 2),\\n            initializationValue\\n          );\\n\\n          vec4 segFilter = vec4(\\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\\n            0\\n          );\\n\\n          \"+c+\"\\n        }\\n        setOutput(sumValue);\\n      }\\n    \"},Js=function(t,e,n){var r,o;if(this.variableNames=[\"c\",\"a\",\"b\"],this.outputShape=e,n>4)throw Error(\"Where for rank \"+n+\" is not yet supported\");if(1===n)o=\"resRC\",r=\"resRC\";else{for(var a=[\"resRC.x\",\"resRC.y\",\"resRC.z\",\"resRC.w\"],i=[],s=[],u=0;u<e.length;u++)s.push(\"\"+a[u]),u<t&&i.push(\"\"+a[u]);r=i.join(),o=s.join()}var c=ui(n);this.userCode=\"\\n      void main() {\\n        \"+c+\" resRC = getOutputCoords();\\n        float cVal = getC(\"+r+\");\\n        if (cVal >= 1.0) {\\n          setOutput(getA(\"+o+\"));\\n        } else {\\n          setOutput(getB(\"+o+\"));\\n        }\\n      }\\n    \"},Zs=function(){function t(t){this.variableNames=[\"source\"],this.outputShape=t,this.rank=t.length;var e,n=ui(this.rank),r=\"uniform int start[\"+this.rank+\"];\",o=function(t){if(1===t)return\"sourceLoc\";if(t<=6)return tu.slice(0,t).map((function(t){return\"sourceLoc.\"+t})).join(\",\");throw Error(\"Slicing for rank \"+t+\" is not yet supported\")}(this.rank);e=\"\\n        \"+n+\" sourceLoc;\\n        \"+n+\" coords = getOutputCoords();\\n        \"+t.map((function(t,e){return\"sourceLoc.\"+tu[e]+\" = start[\"+e+\"] + coords.\"+tu[e]+\";\"})).join(\"\\n\")+\"\\n      \",this.userCode=\"\\n      \"+r+\"\\n      void main() {\\n        \"+e+\"\\n        setOutput(getSource(\"+o+\"));\\n      }\\n    \"}return t.prototype.getCustomSetupFunc=function(t){var e=this;if(t.length!==this.rank)throw Error(\"The rank (\"+this.rank+\") of the program must match the length of start (\"+t.length+\")\");return function(n,r){null==e.startLoc&&(e.startLoc=n.getUniformLocationNoThrow(r,\"start\"),null==e.startLoc)||n.gl.uniform1iv(e.startLoc,t)}},t}(),tu=[\"x\",\"y\",\"z\",\"w\",\"u\",\"v\"];var eu=function(){function t(t){this.variableNames=[\"source\"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t,this.rank=t.length;var e=ui(this.rank),n=Xa(\"coords\",this.rank),r=Xa(\"sourceLoc\",this.rank),o=1===this.rank?\"sourceLoc\":\"vec2(\"+r.slice(-2).join()+\")\",a=\"getChannel(getSource(\"+r.join()+\"), \"+o+\")\",i=\"\\n      result.x = \"+a+\";\\n      if (++\"+n[this.rank-1]+\" < \"+t[this.rank-1]+\") {\\n        ++\"+r[this.rank-1]+\";\\n        result.y = \"+a+\";\\n        --\"+r[this.rank-1]+\";\\n      }\\n    \",s=1===this.rank?\"\":\"\\n      --\"+n[this.rank-1]+\";\\n      if (++\"+n[this.rank-2]+\" < \"+t[this.rank-2]+\") {\\n        ++\"+r[this.rank-2]+\";\\n        result.z = \"+a+\";\\n        if (++\"+n[this.rank-1]+\" < \"+t[this.rank-1]+\") {\\n          ++\"+r[this.rank-1]+\";\\n          result.w = \"+a+\";\\n        }\\n      }\\n    \",u=this.rank<=4?\"sourceLoc = coords +\\n            \"+e+\"(\"+t.map((function(t,e){return\"start[\"+e+\"]\"})).join()+\");\":t.map((function(t,e){return r[e]+\" = \"+n[e]+\" + start[\"+e+\"];\"})).join(\"\\n\");this.userCode=\"\\n      uniform int start[\"+this.rank+\"];\\n      void main() {\\n        \"+e+\" coords = getOutputCoords();\\n        \"+e+\" sourceLoc;\\n        \"+u+\"\\n        vec4 result = vec4(0.);\\n        \"+i+\"\\n        \"+s+\"\\n        setOutput(result);\\n      }\\n    \"}return t.prototype.getCustomSetupFunc=function(t){var e=this;if(t.length!==this.rank)throw Error(\"The rank (\"+this.rank+\") of the program must match the length of start (\"+t.length+\")\");return function(n,r){null==e.startLoc&&(e.startLoc=n.getUniformLocationNoThrow(r,\"start\"),null==e.startLoc)||n.gl.uniform1iv(e.startLoc,t)}},t}(),nu=function(t,e,n){this.variableNames=[\"x\"],this.outputShape=n;var r=n.length,o=ui(n.length),a=ui(n.length),i=\"\";if(1===r)i=\"coords * strides + begin\";else{var s=0;i=n.map((function(t,e){return s++,1===n.length?\"coords * strides[\"+e+\"] + begin[\"+e+\"]\":\"coords[\"+(s-1)+\"] * strides[\"+e+\"] + begin[\"+e+\"]\"})).join(\",\")}this.userCode=\"\\n      \"+o+\" begin = \"+o+\"(\"+t+\");\\n      \"+o+\" strides = \"+o+\"(\"+e+\");\\n\\n      void main() {\\n        \"+a+\" coords = getOutputCoords();\\n        setOutput(getX(\"+i+\"));\\n      }\\n    \"},ru=function(){function t(t){this.gpgpu=t,this.numUsedTextures=0,this.numFreeTextures=0,this.freeTextures={},this.logEnabled=!1,this.usedTextures={}}return t.prototype.acquireTexture=function(t,e,n){var r,o=ou(e,n),a=au(t,o,n);if(a in this.freeTextures||(this.freeTextures[a]=[]),a in this.usedTextures||(this.usedTextures[a]=[]),this.freeTextures[a].length>0){this.numFreeTextures--,this.numUsedTextures++,this.log();var i=this.freeTextures[a].shift();return this.usedTextures[a].push(i),i}return this.numUsedTextures++,this.log(),o===Gt.PACKED_2X2_FLOAT32?r=this.gpgpu.createPackedMatrixTexture(t[0],t[1]):o===Gt.PACKED_2X2_FLOAT16?r=this.gpgpu.createFloat16PackedMatrixTexture(t[0],t[1]):o===Gt.UNPACKED_FLOAT32?r=this.gpgpu.createFloat32MatrixTexture(t[0],t[1]):o===Gt.UNPACKED_FLOAT16?r=this.gpgpu.createFloat16MatrixTexture(t[0],t[1]):o===Gt.PACKED_4X1_UNSIGNED_BYTE&&(r=this.gpgpu.createUnsignedBytesMatrixTexture(t[0],t[1])),this.usedTextures[a].push(r),r},t.prototype.releaseTexture=function(t,e,n,r){if(null!=this.freeTextures){var o=au(e,ou(n,r),r);o in this.freeTextures||(this.freeTextures[o]=[]),this.freeTextures[o].push(t),this.numFreeTextures++,this.numUsedTextures--;var a=this.usedTextures[o],i=a.indexOf(t);if(i<0)throw new Error(\"Cannot release a texture that was never provided by this texture manager\");a.splice(i,1),this.log()}},t.prototype.log=function(){if(this.logEnabled){var t=this.numFreeTextures+this.numUsedTextures;console.log(\"Free/Used\",this.numFreeTextures+\" / \"+this.numUsedTextures,\"(\"+t+\")\")}},t.prototype.getNumUsedTextures=function(){return this.numUsedTextures},t.prototype.getNumFreeTextures=function(){return this.numFreeTextures},t.prototype.dispose=function(){var t=this;if(null!=this.freeTextures){for(var e in this.freeTextures)this.freeTextures[e].forEach((function(e){t.gpgpu.deleteMatrixTexture(e)}));for(var e in this.usedTextures)this.usedTextures[e].forEach((function(e){t.gpgpu.deleteMatrixTexture(e)}));this.freeTextures=null,this.usedTextures=null,this.numUsedTextures=0,this.numFreeTextures=0}},t}();function ou(t,e){if(t===zt.UPLOAD)return Gt.PACKED_2X2_FLOAT32;if(t===zt.RENDER||null==t)return function(t){return i().getBool(\"WEBGL_RENDER_FLOAT32_ENABLED\")?t?Gt.PACKED_2X2_FLOAT32:Gt.UNPACKED_FLOAT32:t?Gt.PACKED_2X2_FLOAT16:Gt.UNPACKED_FLOAT16}(e);if(t===zt.DOWNLOAD||t===zt.PIXELS)return Gt.PACKED_4X1_UNSIGNED_BYTE;throw new Error(\"Unknown logical texture type \"+t)}function au(t,e,n){return t[0]+\"_\"+t[1]+\"_\"+e+\"_\"+n}var iu=function(t,e){this.variableNames=[\"A\"];for(var n=new Array(t.length),r=0;r<n.length;r++)n[r]=t[r]*e[r];this.outputShape=n,this.rank=n.length;var o=ui(this.rank),a=function(t){var e=t.length;if(e>5)throw Error(\"Tile for rank \"+e+\" is not yet supported\");if(1===e)return\"imod(resRC, \"+t[0]+\")\";for(var n=[\"resRC.x\",\"resRC.y\",\"resRC.z\",\"resRC.w\",\"resRC.u\"],r=[],o=0;o<t.length;o++)r.push(\"imod(\"+n[o]+\", \"+t[o]+\")\");return r.join()}(t);this.userCode=\"\\n      void main() {\\n        \"+o+\" resRC = getOutputCoords();\\n        setOutput(getA(\"+a+\"));\\n      }\\n    \"};var su=1.7580993408473768,uu=1.0507009873554805,cu=function(t,e){this.variableNames=[\"A\"],this.outputShape=t,this.userCode=\"\\n      float unaryOperation(float x) {\\n        \"+e+\"\\n      }\\n\\n      void main() {\\n        float x = getAAtOutCoords();\\n        float y = unaryOperation(x);\\n\\n        setOutput(y);\\n      }\\n    \"},lu=\"if (isnan(x)) return x;\",hu=\"return x;\",fu=\"return abs(x);\",du=lu+\"\\n  return (x < 0.0) ? 0.0 : x;\\n\",pu=lu+\"\\n  return (x < 0.0) ? 0.0 : min(6.0, x);\\n\",vu=\"return (x >= 0.0) ? x : (exp(x) - 1.0);\",gu=\"\\n  // Stable and Attracting Fixed Point (0, 1) for Normalized Weights.\\n  // see: https://arxiv.org/abs/1706.02515\\n  float scaleAlpha = \"+su+\";\\n  float scale = \"+uu+\";\\n  return (x >= 0.0) ? scale * x : scaleAlpha * (exp(x) - 1.0);\\n\";var mu=\"return -x;\",yu=\"return ceil(x);\",xu=\"return floor(x);\",bu=\"return exp(x);\",wu=\"return exp(x) - 1.0;\",Cu=lu+\"\\n  return sin(x);\\n\",Eu=lu+\"\\n  return cos(x);\\n\",Ru=lu+\"\\n  if (abs(x) > 1.) {\\n    return NAN;\\n  }\\n  return asin(x);\\n\",Iu=lu+\"\\n  if (abs(x) > 1.) {\\n    return NAN;\\n  }\\n  return acos(x);\\n\",ku=lu+\"\\n  return atan(x);\\n\",Su=lu+\"return log(x + sqrt(x * x + 1.0));\",Au=lu+\"\\n  if (x < 1.0) return NAN;\\n  return log(x + sqrt(x * x - 1.0));\",Tu=lu+\"\\n  if ((x < -1.0) || (x > 1.0)) return NAN;\\n  return (log(1.0 + x) - log(1.0 - x)) / 2.0;\",Du=\"return x;\",Nu=\"return x;\",Fu=\"\\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\\n  bvec4 isNaN = isnan(x);\\n\\n  result.r = isNaN.r ? x.r : result.r;\\n  result.g = isNaN.g ? x.g : result.g;\\n  result.b = isNaN.b ? x.b : result.b;\\n  result.a = isNaN.a ? x.a : result.a;\\n\\n  return result;\\n\",_u=\"\\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\\n  bvec4 isNaN = isnan(x);\\n\\n  result.r = isNaN.r ? x.r : result.r;\\n  result.g = isNaN.g ? x.g : result.g;\\n  result.b = isNaN.b ? x.b : result.b;\\n  result.a = isNaN.a ? x.a : result.a;\\n\\n  return result;\\n\",Ou=\"\\n  vec4 result;\\n\\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\\n\\n  return result;\\n\",Mu=function(t,e){this.variableNames=[\"A\"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t,this.userCode=\"\\n      vec4 unaryOperation(vec4 x) {\\n        \"+e+\"\\n      }\\n\\n      void main() {\\n        vec4 x = getAAtOutCoords();\\n        vec4 y = unaryOperation(x);\\n\\n        setOutput(y);\\n      }\\n    \"},Bu=function(t){this.variableNames=[\"A\"],this.packedInputs=!0,this.packedOutput=!1,this.outputShape=t;var e=t.length,n=Xa(\"rc\",e),r=ui(e),o=function(t,e){if(1===t)return\"rc\";for(var n=\"\",r=0;r<t;r++)n+=e[r],r<t-1&&(n+=\",\");return n}(e,n),a=n.slice(-2),i=e<=1?\"rc\":\"vec2(\"+a.join(\",\")+\")\";this.userCode=\"\\n      void main() {\\n        \"+r+\" rc = getOutputCoords();\\n        vec4 packedInput = getA(\"+o+\");\\n\\n        setOutput(getChannel(packedInput, \"+i+\"));\\n      }\\n    \"},Pu={};function Lu(t,e){if(void 0===e&&(e=!1),\"linear\"===t)return e?Nu:hu;if(\"relu\"===t)return e?Fu:du;if(\"elu\"===t)return e?Ou:vu;if(\"relu6\"===t)return e?_u:pu;if(\"prelu\"===t)return e?ki:Ei;throw new Error(\"Activation \"+t+\" has not been implemented for the WebGL backend.\")}var Wu=600;var Uu=function(t){function o(e){var n,r=t.call(this)||this;if(r.pendingRead=new WeakMap,r.pendingDisposal=new WeakSet,r.dataRefCount=new WeakMap,r.numBytesInGPU=0,r.uploadWaitMs=0,r.downloadWaitMs=0,r.warnedAboutMemory=!1,r.pendingDeletes=0,r.disposed=!1,!i().getBool(\"HAS_WEBGL\"))throw new Error(\"WebGL is not supported on this device\");if(null==e){var o=jt(i().getNumber(\"WEBGL_VERSION\"));r.binaryCache=(n=i().getNumber(\"WEBGL_VERSION\"))in Pu?Pu[n]:(Pu[n]={},Pu[n]),r.gpgpu=new Is(o),r.canvas=o.canvas,r.gpgpuCreatedLocally=!0}else r.gpgpu=e,r.binaryCache={},r.gpgpuCreatedLocally=!1,r.canvas=e.gl.canvas;return r.textureManager=new ru(r.gpgpu),r.numMBBeforeWarning=null==i().global.screen?1024:i().global.screen.height*i().global.screen.width*window.devicePixelRatio*Wu/1024/1024,r.texData=new ca(r,Lt),r}return e(o,t),o.prototype.numDataIds=function(){return this.texData.numDataIds()+(this.cpuBackend?this.cpuBackend.numDataIds():0)-this.pendingDeletes},o.prototype.write=function(t,e,n){if(i().getBool(\"DEBUG\")&&this.checkNumericalProblems(t),\"complex64\"===n&&null!=t)throw new Error(\"Cannot write to a complex64 dtype. Please use tf.complex(real, imag).\");var r={};return this.texData.set(r,{shape:e,dtype:n,values:t,usage:zt.UPLOAD}),r},o.prototype.move=function(t,e,n,r){if(i().getBool(\"DEBUG\")&&this.checkNumericalProblems(e),\"complex64\"===r)throw new Error(\"Cannot write to a complex64 dtype. Please use tf.complex(real, imag).\");this.texData.set(t,{shape:n,dtype:r,values:e,usage:zt.UPLOAD})},o.prototype.readSync=function(t){var e=this.texData.get(t),n=e.values,r=e.dtype,o=e.complexTensors,a=e.slice,i=e.shape,s=e.isPacked;if(null!=a){var u=void 0;u=s?new Mu(i,Du):new cu(i,Du);var c=this.runWebGLProgram(u,[{dataId:t,shape:i,dtype:r}],r),l=this.readSync(c.dataId);return this.disposeData(c.dataId),l}if(null!=n)return this.convertAndCacheOnCPU(t);if(\"string\"===r)return n;var h,f,d=null!=this.activeTimers;(d&&(h=et()),\"complex64\"===r)?f=Aa(o.real.dataSync(),o.imag.dataSync()):f=this.getValuesFromTexture(t);return d&&(this.downloadWaitMs+=et()-h),this.convertAndCacheOnCPU(t,f)},o.prototype.read=function(t){return n(this,void 0,void 0,(function(){var e,n,o,a,s,u,c,l,h,f,d,p,v,g,m,y,x,b,w,C,E,R;return r(this,(function(r){switch(r.label){case 0:if(this.pendingRead.has(t))return e=this.pendingRead.get(t),[2,new Promise((function(t){return e.push(t)}))];if(n=this.texData.get(t),o=n.values,a=n.shape,s=n.slice,u=n.dtype,c=n.complexTensors,l=n.isPacked,null!=s)return h=void 0,h=l?new Mu(a,Du):new cu(a,Du),f=this.runWebGLProgram(h,[{dataId:t,shape:a,dtype:u}],u),d=this.read(f.dataId),this.disposeData(f.dataId),[2,d];if(null!=o)return[2,this.convertAndCacheOnCPU(t)];if(!i().getBool(\"WEBGL_DOWNLOAD_FLOAT_ENABLED\")&&2===i().getNumber(\"WEBGL_VERSION\"))throw new Error(\"tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and WEBGL_VERSION=2 not yet supported.\");return p=null,\"complex64\"!==u&&i().get(\"WEBGL_BUFFER_SUPPORTED\")&&(v=this.decode(t),g=this.texData.get(v.dataId),p=(R=this.gpgpu).createBufferFromTexture.apply(R,[g.texture].concat(Yt(a)))),this.pendingRead.set(t,[]),\"complex64\"===u?[3,2]:[4,this.gpgpu.createAndWaitForFence()];case 1:r.sent(),r.label=2;case 2:return\"complex64\"!==u?[3,4]:[4,Promise.all([c.real.data(),c.imag.data()])];case 3:return y=r.sent(),x=y[0],b=y[1],m=Aa(x,b),[3,5];case 4:null==p?m=this.getValuesFromTexture(t):(w=k(a),m=this.gpgpu.downloadFloat32MatrixFromBuffer(p,w)),r.label=5;case 5:return null!=v&&this.disposeData(v.dataId),C=this.convertAndCacheOnCPU(t,m),E=this.pendingRead.get(t),this.pendingRead.delete(t),E.forEach((function(t){return t(C)})),this.pendingDisposal.has(t)&&(this.pendingDisposal.delete(t),this.disposeData(t),this.pendingDeletes--),[2,C]}}))}))},o.prototype.checkNumericalProblems=function(t){if(null!=t)for(var e=0;e<t.length;e++){var n=t[e];if(!ee(n)){if(i().getBool(\"WEBGL_RENDER_FLOAT32_CAPABLE\"))throw Error(\"The value \"+n+\" cannot be represented with your current settings. Consider enabling float32 rendering: 'tf.env().set('WEBGL_RENDER_FLOAT32_ENABLED', true);'\");throw Error(\"The value \"+n+\" cannot be represented on this device.\")}}},o.prototype.getValuesFromTexture=function(t){var e,n=this.texData.get(t),r=n.shape,o=n.dtype,a=n.isPacked,s=k(r);if(i().getBool(\"WEBGL_DOWNLOAD_FLOAT_ENABLED\")){var u=this.decode(t),c=this.texData.get(u.dataId),l=(e=this.gpgpu).downloadMatrixFromPackedTexture.apply(e,[c.texture].concat(Yt(r))).subarray(0,s);return this.disposeData(u.dataId),l}var h=i().getBool(\"WEBGL_PACK\")&&!0===a,f=h?De(r):r,d=h?new Ji(f):new Qi(f),p=this.runWebGLProgram(d,[{shape:f,dtype:o,dataId:t}],\"float32\"),v=this.texData.get(p.dataId),g=this.gpgpu.downloadByteEncodedFloatMatrixFromOutputTexture(v.texture,v.texShape[0],v.texShape[1]).subarray(0,s);return this.disposeData(p.dataId),g},o.prototype.time=function(t){return n(this,void 0,void 0,(function(){var e,n,o,a,s,u,c;return r(this,(function(r){switch(r.label){case 0:return e=this.activeTimers,n=[],o=!1,null==this.programTimersStack?(this.programTimersStack=n,o=!0):this.activeTimers.push(n),this.activeTimers=n,t(),a=I(this.activeTimers.map((function(t){return t.query}))).filter((function(t){return null!=t})),s=I(this.activeTimers.map((function(t){return t.name}))).filter((function(t){return null!=t})),this.activeTimers=e,o&&(this.programTimersStack=null),u={uploadWaitMs:this.uploadWaitMs,downloadWaitMs:this.downloadWaitMs,kernelMs:null,wallMs:null},i().getNumber(\"WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE\")>0?[4,Promise.all(a)]:[3,2];case 1:return c=r.sent(),u.kernelMs=w(c),u.getExtraProfileInfo=function(){return c.map((function(t,e){return{name:s[e],ms:t}})).map((function(t){return t.name+\": \"+t.ms})).join(\", \")},[3,3];case 2:u.kernelMs={error:\"WebGL query timers are not supported in this environment.\"},r.label=3;case 3:return this.uploadWaitMs=0,this.downloadWaitMs=0,[2,u]}}))}))},o.prototype.memory=function(){return{unreliable:!1,numBytesInGPU:this.numBytesInGPU}},o.prototype.startTimer=function(){return i().getNumber(\"WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE\")>0?this.gpgpu.beginQuery():{startMs:et(),endMs:null}},o.prototype.endTimer=function(t){return i().getNumber(\"WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE\")>0?(this.gpgpu.endQuery(),t):(t.endMs=et(),t)},o.prototype.getQueryTime=function(t){return n(this,void 0,void 0,(function(){var e;return r(this,(function(n){return i().getNumber(\"WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE\")>0?[2,this.gpgpu.waitForQueryAndGetTime(t)]:[2,(e=t).endMs-e.startMs]}))}))},o.prototype.disposeData=function(t){if(!this.pendingDisposal.has(t)){if(this.pendingRead.has(t))return this.pendingDisposal.add(t),void this.pendingDeletes++;if(this.texData.has(t)){this.releaseGPUData(t);var e=this.texData.get(t).complexTensors;null!=e&&(e.real.dispose(),e.imag.dispose()),this.texData.delete(t)}}},o.prototype.releaseGPUData=function(t){var e=this.texData.get(t),n=e.texture,r=e.dtype,o=e.texShape,a=e.usage,i=e.isPacked,s=e.slice,u=s&&s.origDataId||t,c=this.dataRefCount.get(u);c>1?this.dataRefCount.set(u,c-1):(this.dataRefCount.delete(u),null!=n&&(this.numBytesInGPU-=this.computeBytes(o,r),this.textureManager.releaseTexture(n,o,a,i)));var l=this.texData.get(t);l.texture=null,l.texShape=null,l.isPacked=!1,l.slice=null},o.prototype.getTexture=function(t){return this.uploadToGPU(t),this.texData.get(t).texture},o.prototype.getDataInfo=function(t){return this.texData.get(t)},o.prototype.getCPUBackend=function(){return i().getBool(\"WEBGL_CPU_FORWARD\")?(null==this.cpuBackend&&(this.cpuBackend=Lt.findBackend(\"cpu\")),this.cpuBackend):null},o.prototype.shouldExecuteOnCPU=function(t,e){var n=this;return void 0===e&&(e=128),null!=this.getCPUBackend()&&t.every((function(t){return null==n.texData.get(t.dataId).texture&&k(t.shape)<e}))},o.prototype.getGPGPUContext=function(){return this.gpgpu},o.prototype.complex=function(t,e){var n=this.makeOutput(t.shape,\"complex64\");return this.texData.get(n.dataId).complexTensors={real:Lt.keep(t.clone()),imag:Lt.keep(e.clone())},n},o.prototype.real=function(t){return this.texData.get(t.dataId).complexTensors.real.clone()},o.prototype.imag=function(t){return this.texData.get(t.dataId).complexTensors.imag.clone()},o.prototype.slice=function(t,e,n){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.slice(t,e,n);if(0===k(n))return Fn([],n,t.dtype);var r=this.texData.get(t.dataId).isPacked,o=$o(t.shape,e,n);if(r||!o){var a=i().getBool(\"WEBGL_PACK_ARRAY_OPERATIONS\")?new eu(n):new Zs(n),s=a.getCustomSetupFunc(e);return this.compileAndRun(a,[t],null,s)}return this.uploadToGPU(t.dataId),this.shallowSlice(t,e,n)},o.prototype.shallowSlice=function(t,e,n){var r=this.texData.get(t.dataId),o=this.makeOutput(n,t.dtype),a=this.texData.get(o.dataId);Object.assign(a,r),a.shape=n,a.dtype=t.dtype;var i=Qo(e,t.strides);r.slice&&(i+=r.slice.flatOffset),a.slice={flatOffset:i,origDataId:r.slice&&r.slice.origDataId||t.dataId};var s=this.dataRefCount.get(a.slice.origDataId)||1;return this.dataRefCount.set(a.slice.origDataId,s+1),o},o.prototype.stridedSlice=function(t,e,n,r){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.stridedSlice(t,e,n,r);var o=jo(e,n,r);if(o.some((function(t){return 0===t})))return Fn([],o);var a=new nu(e,r,o);return this.compileAndRun(a,[t])},o.prototype.reverse=function(t,e){var n=i().getBool(\"WEBGL_PACK_ARRAY_OPERATIONS\")?new Ys(t.shape,e):new Xs(t.shape,e);return this.compileAndRun(n,[t])},o.prototype.concat=function(t,e){if(\"complex64\"===t[0].dtype){var n=t.map((function(t){return Dn(t)})),r=t.map((function(t){return Nn(t)}));return Tn(this.concat(n,e),this.concat(r,e))}if(this.shouldExecuteOnCPU(t))return this.cpuBackend.concat(t,e);if(1===t.length)return t[0];if(t.length>i().getNumber(\"WEBGL_MAX_TEXTURES_IN_SHADER\")){var o=Math.floor(t.length/2),a=this.concat(t.slice(0,o),e),s=this.concat(t.slice(o),e);return this.concat([a,s],e)}if(i().getBool(\"WEBGL_PACK_ARRAY_OPERATIONS\")&&t[0].rank>1){var u=new Fi(t.map((function(t){return t.shape})),e);return this.compileAndRun(u,t)}var c=Sn(t.map((function(t){return t.shape})),e),l=t.map((function(t){return t.as2D(-1,k(t.shape.slice(e)))})),h=new Ni(l.map((function(t){return t.shape})));return this.compileAndRun(h,l).reshape(c)},o.prototype.neg=function(t){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.neg(t);if(i().getBool(\"WEBGL_PACK_UNARY_OPERATIONS\"))return this.packedUnaryOp(t,mu,t.dtype);var e=new cu(t.shape,mu);return this.compileAndRun(e,[t])},o.prototype.batchMatMul=function(t,e,n,r){var o=n?t.shape[2]:t.shape[1],a=r?e.shape[1]:e.shape[2],i=n?t.shape[1]:t.shape[2],s=t.shape[0];if((1===o||1===a)&&i>1e3){n&&(t=ua(t,[0,2,1])),r&&(e=ua(e,[0,2,1]));var u=1===a?t:t.as3D(s,i,1),c=1===a?2:1,l=1===a?e.as3D(s,1,i):e;return this.multiply(u,l).sum(c,!0)}var h=Tt(t.dtype,e.dtype),f=new _s(t.shape,[s,o,a],n,r);return this.compileAndRun(f,[t,e],h)},o.prototype.fusedBatchMatMul=function(t){var e=t.a,n=t.b,r=t.transposeA,o=t.transposeB,a=t.bias,i=t.activation,s=t.preluActivationWeights,u=r?e.shape[2]:e.shape[1],c=o?n.shape[1]:n.shape[2],l=e.shape[0],h=Tt(e.dtype,n.dtype),f=null!=a,d=null!=s,p=i?Lu(i,!0):null,v=new _s(e.shape,[l,u,c],r,o,f,p,d),g=[e,n];return a&&g.push(a),s&&g.push(s),this.compileAndRun(v,g,h)},o.prototype.multiply=function(t,e){if(\"complex64\"===t.dtype){var n=this.texData.get(t.dataId),r=this.texData.get(e.dataId),o=new yi(gi,t.shape,e.shape),a=new yi(mi,t.shape,e.shape),s=[this.makeComplexComponentTensorInfo(t,n.complexTensors.real),this.makeComplexComponentTensorInfo(t,n.complexTensors.imag),this.makeComplexComponentTensorInfo(e,r.complexTensors.real),this.makeComplexComponentTensorInfo(e,r.complexTensors.imag)],u=this.compileAndRun(o,s),c=this.compileAndRun(a,s),l=this.complex(u,c);return u.dispose(),c.dispose(),l}if(this.shouldExecuteOnCPU([t,e]))return this.cpuBackend.multiply(t,e);if(i().getBool(\"WEBGL_PACK_BINARY_OPERATIONS\"))return this.packedBinaryOp(t,e,wi,t.dtype);var h=new Ri(wi,t.shape,e.shape);return this.compileAndRun(h,[t,e],t.dtype)},o.prototype.batchNormalization=function(t,e,n,r,o,a){var s=[t,e,n],u=null;null!=a&&(u=a.shape,s.push(a));var c=null;if(null!=o&&(c=o.shape,s.push(o)),i().getBool(\"WEBGL_PACK_NORMALIZATION\")){var l=new vi(t.shape,e.shape,n.shape,u,c,r);return this.compileAndRun(l,s)}var h=new pi(t.shape,e.shape,n.shape,u,c,r);return this.compileAndRun(h,s)},o.prototype.localResponseNormalization4D=function(t,e,n,r,o){var a=i().getBool(\"WEBGL_PACK_NORMALIZATION\")?new Ds(t.shape,e,n,r,o):new As(t.shape,e,n,r,o);return this.compileAndRun(a,[t])},o.prototype.LRNGrad=function(t,e,n,r,o,a,i){var s=new Ts(e.shape,r,o,a,i);return this.compileAndRun(s,[e,n,t])},o.prototype.tile=function(t,e){if(\"string\"===t.dtype){var n=this.readSync(t.dataId).map((function(t){return ot(t)}));return Va(er(t.shape,t.dtype,n),e)}var r=new iu(t.shape,e);return this.compileAndRun(r,[t])},o.prototype.pad=function(t,e,n){var r=i().getBool(\"WEBGL_PACK_ARRAY_OPERATIONS\")?new Ls(t.shape,e,n):new Ps(t.shape,e,n);return this.compileAndRun(r,[t])},o.prototype.gather=function(t,e,n){if(this.shouldExecuteOnCPU([t,e]))return this.cpuBackend.gather(t,e,n);var r=new as(t.shape,e.size,n);return this.compileAndRun(r,[t,e])},o.prototype.batchToSpaceND=function(t,e,n){C(t.rank<=4,(function(){return\"batchToSpaceND for rank > 4 with a WebGL backend not implemented yet\"}));var r=e.reduce((function(t,e){return t*e})),o=pr(t.shape,e,r),a=vr(o.length,e.length),i=gr(t.shape,e,r),s=mr(n,e.length),u=yr(i,n,e.length);return ua(t.reshape(o),a).reshape(i).slice(s,u)},o.prototype.spaceToBatchND=function(t,e,n){C(t.rank<=4,(function(){return\"spaceToBatchND for rank > 4 with a WebGL backend not implemented yet\"}));var r=e.reduce((function(t,e){return t*e})),o=[[0,0]];o.push.apply(o,n);for(var a=1+e.length;a<t.shape.length;++a)o.push([0,0]);var i=t.pad(o),s=pr(i.shape,e,r,!1),u=vr(s.length,e.length,!1),c=gr(i.shape,e,r,!1);return ua(i.reshape(s),u).reshape(c)},o.prototype.reduce=function(t,e,n){var r=t.shape[0],o=t.shape[1],a=Uo(o),i=new Vs({windowSize:a,inSize:o,batchSize:r},e),s=this.compileAndRun(i,[t],n);return 1===s.shape[1]?s:this.reduce(s,e,n)},o.prototype.argReduce=function(t,e,n){void 0===n&&(n=null);var r=t.shape[0],o=t.shape[1];null!=n&&(r=n.shape[0],o=n.shape[1]);var a=Uo(o),i=new Ka({windowSize:a,inSize:o,batchSize:r},e,null==n),s=[t];null!=n&&s.push(n);var u=this.compileAndRun(i,s,\"int32\");return 1===u.shape[1]?u:this.argReduce(t,e,u)},o.prototype.argReducePacked=function(t,e,n){void 0===n&&(n=null);var r=null!=n?n.shape:t.shape,o=Uo(r[r.length-1]),a=new hi(r,o,e,null==n),i=null==n?[t]:[t,n],s=this.compileAndRun(a,i,\"int32\");return s.rank===t.rank?this.argReducePacked(t,e,s):s},o.prototype.sum=function(t,e){Cn(\"sum\",e,t.rank);var n=bn(t.shape,e),r=n[0],o=k(n[1]),a=t.as2D(-1,o),i=Dt(t.dtype);return this.reduce(a,\"sum\",i).reshape(r)},o.prototype.prod=function(t,e){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.prod(t,e);var n=bn(t.shape,e),r=n[0],o=k(n[1]),a=t.as2D(-1,o),i=Dt(t.dtype);return this.reduce(a,\"prod\",i).reshape(r)},o.prototype.unsortedSegmentSum=function(t,e,n){var r=0,o=En([r],t.rank),a=t;null!=o&&(a=ua(t,o),r=In(1,t.rank)[0]);var i=function(t,e,n){for(var r=[],o=t.length,a=0;a<o;a++)a!==e?r.push(t[a]):r.push(n);return r}(a.shape,r,n),s=k([a.shape[r]]),u=a.as2D(-1,s),c=Dt(t.dtype),l=this.segOpCompute(u,\"unsortedSegmentSum\",e,c,n).reshape(i);return null!=o&&(l=ua(l,Rn(o))),l},o.prototype.segOpCompute=function(t,e,n,r,o){var a=t.shape[0],i=t.shape[1],s=function(t,e){var n,r=!1;for(t<=Wo?(n=t,r=!0):n=Y(t,Math.floor(Math.sqrt(t)));!r;)n>e||n===t?r=!0:n=Y(t,n+1);return n}(i,o),u=new Qs({windowSize:s,inSize:i,batchSize:a,numSegments:o},e),c=this.compileAndRun(u,[t,n],r);return c.shape[1]===o?c:(n=Kn(0,o).tile([i/s]),this.segOpCompute(c,e,n,r,o))},o.prototype.argMinMaxReduce=function(t,e,n){var r=[e];if(Cn(\"arg\"+n.charAt(0).toUpperCase()+n.slice(1),r,t.rank),!i().getBool(\"WEBGL_PACK_REDUCE\")||t.rank<=2){var o=bn(t.shape,r),a=o[0],s=k(o[1]),u=t.as2D(-1,s);return this.argReduce(u,n).reshape(a)}return this.argReducePacked(t,n)},o.prototype.argMin=function(t,e){return this.argMinMaxReduce(t,e,\"min\")},o.prototype.argMax=function(t,e){return this.argMinMaxReduce(t,e,\"max\")},o.prototype.cumsum=function(t,e,n,r){if(e!==t.rank-1)throw new Error(\"WebGL cumsum shader expects an inner-most axis=\"+(t.rank-1)+\" but got axis=\"+e);var o=new qi(t.shape,n,r);return this.compileAndRun(o,[t])},o.prototype.equal=function(t,e){if(i().getBool(\"WEBGL_PACK_BINARY_OPERATIONS\"))return this.packedBinaryOp(t,e,\"\\n  return vec4(equal(a, b));\\n\",\"bool\");var n=new Ri(\"return float(a == b);\",t.shape,e.shape);return this.compileAndRun(n,[t,e],\"bool\")},o.prototype.notEqual=function(t,e){if(i().getBool(\"WEBGL_PACK_BINARY_OPERATIONS\"))return this.packedBinaryOp(t,e,\"\\n  return vec4(notEqual(a, b));\\n\",\"bool\");var n=new Ri(\"return float(a != b);\",t.shape,e.shape);return this.compileAndRun(n,[t,e],\"bool\")},o.prototype.less=function(t,e){if(this.shouldExecuteOnCPU([t,e]))return this.cpuBackend.less(t,e);if(i().getBool(\"WEBGL_PACK_BINARY_OPERATIONS\"))return this.packedBinaryOp(t,e,\"\\n  return vec4(lessThan(a, b));\\n\",\"bool\");var n=new Ri(\"return float(a < b);\",t.shape,e.shape);return this.compileAndRun(n,[t,e],\"bool\")},o.prototype.lessEqual=function(t,e){if(i().getBool(\"WEBGL_PACK_BINARY_OPERATIONS\"))return this.packedBinaryOp(t,e,\"\\n  return vec4(lessThanEqual(a, b));\\n\",\"bool\");var n=new Ri(\"return float(a <= b);\",t.shape,e.shape);return this.compileAndRun(n,[t,e],\"bool\")},o.prototype.greater=function(t,e){if(this.shouldExecuteOnCPU([t,e]))return this.cpuBackend.greater(t,e);if(i().getBool(\"WEBGL_PACK_BINARY_OPERATIONS\"))return this.packedBinaryOp(t,e,\"\\n  return vec4(greaterThan(a, b));\\n\",\"bool\");var n=new Ri(\"return float(a > b);\",t.shape,e.shape);return this.compileAndRun(n,[t,e],\"bool\")},o.prototype.greaterEqual=function(t,e){if(i().getBool(\"WEBGL_PACK_BINARY_OPERATIONS\"))return this.packedBinaryOp(t,e,\"\\n  return vec4(greaterThanEqual(a, b));\\n\",\"bool\");var n=new Ri(\"return float(a >= b);\",t.shape,e.shape);return this.compileAndRun(n,[t,e],\"bool\")},o.prototype.logicalNot=function(t){var e=new cu(t.shape,\"return float(!(x >= 1.0));\");return this.compileAndRun(e,[t])},o.prototype.logicalAnd=function(t,e){if(i().getBool(\"WEBGL_PACK_BINARY_OPERATIONS\"))return this.packedBinaryOp(t,e,\"\\n  return vec4(\\n    vec4(greaterThanEqual(a, vec4(1.0))) *\\n    vec4(greaterThanEqual(b, vec4(1.0))));\\n\",\"bool\");var n=new Ri(\"return float(a >= 1.0 && b >= 1.0);\",t.shape,e.shape);return this.compileAndRun(n,[t,e],\"bool\")},o.prototype.logicalOr=function(t,e){if(i().getBool(\"WEBGL_PACK_BINARY_OPERATIONS\"))return this.packedBinaryOp(t,e,\"\\n  return min(\\n    vec4(greaterThanEqual(a, vec4(1.0))) +\\n    vec4(greaterThanEqual(b, vec4(1.0))),\\n    vec4(1.0));\\n\",\"bool\");var n=new Ri(\"return float(a >= 1.0 || b >= 1.0);\",t.shape,e.shape);return this.compileAndRun(n,[t,e],\"bool\")},o.prototype.select=function(t,e,n){var r=new Js(t.rank,e.shape,e.rank);return this.compileAndRun(r,[t,e,n],Tt(e.dtype,n.dtype))},o.prototype.where=function(t){dn(\"tf.where() in webgl locks the UI thread. Call tf.whereAsync() instead\");var e=t.dataSync();return Ga(t.shape,e)},o.prototype.topk=function(t,e,n){return za(t.dataSync(),t.shape,t.dtype,e)},o.prototype.min=function(t,e){Cn(\"min\",e,t.rank);var n=bn(t.shape,e),r=n[0],o=k(n[1]),a=t.as2D(-1,o);return this.reduce(a,\"min\",a.dtype).reshape(r)},o.prototype.minimum=function(t,e){if(this.shouldExecuteOnCPU([t,e]))return this.cpuBackend.minimum(t,e);var n=i().getBool(\"WEBGL_PACK_BINARY_OPERATIONS\")?new Si(\"\\n  vec4 result = vec4(min(a, b));\\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\\n  \\n  result.r = isNaN.r > 0. ? NAN : result.r;\\n  result.g = isNaN.g > 0. ? NAN : result.g;\\n  result.b = isNaN.b > 0. ? NAN : result.b;\\n  result.a = isNaN.a > 0. ? NAN : result.a;\\n\\n  return result;\\n\",t.shape,e.shape):new Ri(\"\\n  if (isnan(a)) return a;\\n  if (isnan(b)) return b;\\n\\n  return min(a, b);\\n\",t.shape,e.shape);return this.compileAndRun(n,[t,e])},o.prototype.mod=function(t,e){var n=i().getBool(\"WEBGL_PACK_BINARY_OPERATIONS\")?new Si(\"\\n  vec4 result = mod(a, b);\\n  vec4 isNaN = vec4(equal(b, vec4(0.0)));\\n  \\n  result.r = isNaN.r > 0. ? NAN : result.r;\\n  result.g = isNaN.g > 0. ? NAN : result.g;\\n  result.b = isNaN.b > 0. ? NAN : result.b;\\n  result.a = isNaN.a > 0. ? NAN : result.a;\\n\\n  return result;\\n\",t.shape,e.shape):new Ri(\"if (b == 0.0) return NAN;\\n  return mod(a, b);\",t.shape,e.shape);return this.compileAndRun(n,[t,e])},o.prototype.max=function(t,e){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.max(t,e);Cn(\"max\",e,t.rank);var n=bn(t.shape,e),r=n[0],o=k(n[1]),a=t.as2D(-1,o);return this.reduce(a,\"max\",a.dtype).reshape(r)},o.prototype.maximum=function(t,e){if(this.shouldExecuteOnCPU([t,e]))return this.cpuBackend.maximum(t,e);var n=i().getBool(\"WEBGL_PACK_BINARY_OPERATIONS\")?new Si(\"\\n  vec4 result = vec4(max(a, b));\\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\\n  \\n  result.r = isNaN.r > 0. ? NAN : result.r;\\n  result.g = isNaN.g > 0. ? NAN : result.g;\\n  result.b = isNaN.b > 0. ? NAN : result.b;\\n  result.a = isNaN.a > 0. ? NAN : result.a;\\n\\n  return result;\\n\",t.shape,e.shape):new Ri(\"\\n  if (isnan(a)) return a;\\n  if (isnan(b)) return b;\\n\\n  return max(a, b);\\n\",t.shape,e.shape);return this.compileAndRun(n,[t,e])},o.prototype.all=function(t,e){Cn(\"all\",e,t.rank);var n=bn(t.shape,e),r=n[0],o=k(n[1]),a=t.as2D(-1,o);return this.reduce(a,\"all\",a.dtype).reshape(r)},o.prototype.any=function(t,e){Cn(\"any\",e,t.rank);var n=bn(t.shape,e),r=n[0],o=k(n[1]),a=t.as2D(-1,o);return this.reduce(a,\"any\",a.dtype).reshape(r)},o.prototype.floorDiv=function(t,e){if(i().getBool(\"WEBGL_PACK_BINARY_OPERATIONS\"))return this.packedBinaryOp(t,e,\"\\n  ivec4 ia = round(a);\\n  ivec4 ib = round(b);\\n  bvec4 cond = notEqual(ib, ivec4(0));\\n  ivec4 result = ivec4(0);\\n  vec4 s = sign(a) * sign(b);\\n\\n  // Windows (D3D) wants guaranteed non-zero int division at compile-time.\\n  if (cond[0]) {\\n    result[0] = idiv(ia[0], ib[0], s[0]);\\n  }\\n  if (cond[1]) {\\n    result[1] = idiv(ia[1], ib[1], s[1]);\\n  }\\n  if (cond[2]) {\\n    result[2] = idiv(ia[2], ib[2], s[2]);\\n  }\\n  if (cond[3]) {\\n    result[3] = idiv(ia[3], ib[3], s[3]);\\n  }\\n  return vec4(result);\\n\",\"int32\");var n=new Ri(\"\\n  float s = sign(a) * sign(b);\\n  int ia = round(a);\\n  int ib = round(b);\\n  if (ib != 0) {\\n    // Windows (D3D) wants guaranteed non-zero int division at compile-time.\\n    return float(idiv(ia, ib, s));\\n  } else {\\n    return NAN;\\n  }\\n\",t.shape,e.shape);return this.compileAndRun(n,[t,e],\"int32\")},o.prototype.add=function(t,e){if(\"complex64\"===t.dtype&&\"complex64\"===e.dtype)return this.complexSeparableBinaryOp(t,e,xi);if(this.shouldExecuteOnCPU([t,e]))return this.cpuBackend.add(t,e);var n=Tt(t.dtype,e.dtype);if(i().getBool(\"WEBGL_PACK_BINARY_OPERATIONS\"))return this.packedBinaryOp(t,e,xi,n);var r=new Ri(xi,t.shape,e.shape);return this.compileAndRun(r,[t,e],n)},o.prototype.packedUnaryOp=function(t,e,n){var r=new Mu(t.shape,e);return this.compileAndRun(r,[t],n)},o.prototype.packedBinaryOp=function(t,e,n,r,o){void 0===o&&(o=!1);var a=new Si(n,t.shape,e.shape,o);return this.compileAndRun(a,[t,e],r)},o.prototype.complexSeparableBinaryOp=function(t,e,n){var r=this,o=this.texData.get(t.dataId),a=this.texData.get(e.dataId),i=[[o.complexTensors.real,a.complexTensors.real],[o.complexTensors.imag,a.complexTensors.imag]].map((function(o){var a=o[0],i=o[1],s=r.makeComplexComponentTensorInfo(t,a),u=r.makeComplexComponentTensorInfo(e,i),c=new Ri(n,t.shape,e.shape);return r.compileAndRun(c,[s,u],Tt(a.dtype,i.dtype))})),s=i[0],u=i[1],c=this.complex(s,u);return s.dispose(),u.dispose(),c},o.prototype.makeComplexComponentTensorInfo=function(t,e){return{dataId:e.dataId,dtype:e.dtype,shape:t.shape}},o.prototype.addN=function(t){if(1===t.length)return t[0];if(t.length>i().get(\"WEBGL_MAX_TEXTURES_IN_SHADER\")){var e=Math.floor(t.length/2),n=this.addN(t.slice(0,e)),r=this.addN(t.slice(e));return this.addN([n,r])}var o=t.map((function(t){return t.dtype})).reduce((function(t,e){return Tt(t,e)})),a=t.map((function(t){return t.shape})),s=i().getBool(\"WEBGL_PACK\")?new qa(t[0].shape,a):new Ha(t[0].shape,a);return this.compileAndRun(s,t,o)},o.prototype.subtract=function(t,e){if(\"complex64\"===t.dtype&&\"complex64\"===e.dtype)return this.complexSeparableBinaryOp(t,e,bi);if(this.shouldExecuteOnCPU([t,e]))return this.cpuBackend.subtract(t,e);var n=Tt(t.dtype,e.dtype);if(i().getBool(\"WEBGL_PACK_BINARY_OPERATIONS\"))return this.packedBinaryOp(t,e,bi,t.dtype);var r=new Ri(bi,t.shape,e.shape);return this.compileAndRun(r,[t,e],n)},o.prototype.pow=function(t,e){var n=i().getBool(\"WEBGL_PACK_BINARY_OPERATIONS\")?new Si(\"\\n  // isModRound1 has 1 for components with round(mod(b, 2.0)) == 1, 0 otherwise.\\n  vec4 isModRound1 = vec4(equal(round(mod(b, 2.0)), ivec4(1)));\\n  vec4 multiplier = sign(a) * isModRound1 + (vec4(1.0) - isModRound1);\\n  vec4 result = multiplier * pow(abs(a), b);\\n\\n  // Ensure that a^0 = 1, including 0^0 = 1 as this correspond to TF and JS\\n  bvec4 isExpZero = equal(b, vec4(0.0));\\n  result.r = isExpZero.r ? 1.0 : result.r;\\n  result.g = isExpZero.g ? 1.0 : result.g;\\n  result.b = isExpZero.b ? 1.0 : result.b;\\n  result.a = isExpZero.a ? 1.0 : result.a;\\n\\n  vec4 isNaN = vec4(lessThan(a, vec4(0.0))) * vec4(lessThan(floor(b), b));\\n  \\n  result.r = isNaN.r > 0. ? NAN : result.r;\\n  result.g = isNaN.g > 0. ? NAN : result.g;\\n  result.b = isNaN.b > 0. ? NAN : result.b;\\n  result.a = isNaN.a > 0. ? NAN : result.a;\\n\\n  return result;\\n\",t.shape,e.shape):new Ri(\"\\nif(a < 0.0 && floor(b) < b){\\n  return NAN;\\n}\\nif (b == 0.0) {\\n  return 1.0;\\n}\\nreturn (round(mod(b, 2.0)) != 1) ?\\n    pow(abs(a), b) : sign(a) * pow(abs(a), b);\\n\",t.shape,e.shape),r=Tt(t.dtype,e.dtype);return this.compileAndRun(n,[t,e],r)},o.prototype.ceil=function(t){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.ceil(t);if(i().getBool(\"WEBGL_PACK_UNARY_OPERATIONS\"))return this.packedUnaryOp(t,yu,t.dtype);var e=new cu(t.shape,yu);return this.compileAndRun(e,[t])},o.prototype.floor=function(t){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.floor(t);if(i().getBool(\"WEBGL_PACK_UNARY_OPERATIONS\"))return this.packedUnaryOp(t,xu,t.dtype);var e=new cu(t.shape,xu);return this.compileAndRun(e,[t])},o.prototype.sign=function(t){var e=new cu(t.shape,\"\\n  if (isnan(x)) { return 0.0; }\\n  return sign(x);\\n\");return this.compileAndRun(e,[t])},o.prototype.isNaN=function(t){var e=new cu(t.shape,\"return float(isnan(x));\");return this.compileAndRun(e,[t],\"bool\")},o.prototype.isInf=function(t){var e=new cu(t.shape,\"return float(isinf(x));\");return this.compileAndRun(e,[t],\"bool\")},o.prototype.isFinite=function(t){var e=new cu(t.shape,\"return float(!isnan(x) && !isinf(x));\");return this.compileAndRun(e,[t],\"bool\")},o.prototype.round=function(t){var e=new cu(t.shape,\"\\n  // OpenGL ES does not support round function.\\n  // The algorithm is based on banker's rounding.\\n  float base = floor(x);\\n  if ((x - base) < 0.5) {\\n    return floor(x);\\n  } else if ((x - base) > 0.5) {\\n    return ceil(x);\\n  } else {\\n    if (mod(base, 2.0) == 0.0) {\\n      return base;\\n    } else {\\n      return base + 1.0;\\n    }\\n  }\\n\");return this.compileAndRun(e,[t])},o.prototype.exp=function(t){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.exp(t);if(i().getBool(\"WEBGL_PACK_UNARY_OPERATIONS\"))return this.packedUnaryOp(t,bu,t.dtype);var e=new cu(t.shape,bu);return this.compileAndRun(e,[t])},o.prototype.expm1=function(t){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.expm1(t);if(i().getBool(\"WEBGL_PACK_UNARY_OPERATIONS\"))return this.packedUnaryOp(t,wu,t.dtype);var e=new cu(t.shape,wu);return this.compileAndRun(e,[t])},o.prototype.softmax=function(t,e){var n=O([e],t.shape),r=this.max(t,n),o=wn(r.shape,n),a=this.subtract(t,r.reshape(o)),i=this.exp(a),s=this.sum(i,n).reshape(o);return Bo(i,s)},o.prototype.log=function(t){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.log(t);if(i().getBool(\"WEBGL_PACK_UNARY_OPERATIONS\"))return this.packedUnaryOp(t,\"\\n  vec4 result = log(x);\\n  vec4 isNaN = vec4(lessThan(x, vec4(0.0)));\\n  result.r = isNaN.r == 1.0 ? NAN : result.r;\\n  result.g = isNaN.g == 1.0 ? NAN : result.g;\\n  result.b = isNaN.b == 1.0 ? NAN : result.b;\\n  result.a = isNaN.a == 1.0 ? NAN : result.a;\\n\\n  return result;\\n\",t.dtype);var e=new cu(t.shape,\"if (x < 0.0) return NAN;\\n  return log(x);\");return this.compileAndRun(e,[t])},o.prototype.log1p=function(t){var e=new cu(t.shape,\"return log(1.0 + x);\");return this.compileAndRun(e,[t])},o.prototype.sqrt=function(t){var e=new cu(t.shape,\"return sqrt(x);\");return this.compileAndRun(e,[t])},o.prototype.rsqrt=function(t){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.rsqrt(t);var e=new cu(t.shape,\"return inversesqrt(x);\");return this.compileAndRun(e,[t])},o.prototype.reciprocal=function(t){var e=new cu(t.shape,\"return 1.0 / x;\");return this.compileAndRun(e,[t])},o.prototype.relu=function(t){var e;return e=i().getBool(\"WEBGL_PACK\")?new Mu(t.shape,Fu):new cu(t.shape,du),this.compileAndRun(e,[t])},o.prototype.relu6=function(t){var e;return e=i().getBool(\"WEBGL_PACK\")?new Mu(t.shape,_u):new cu(t.shape,pu),this.compileAndRun(e,[t])},o.prototype.prelu=function(t,e){var n=i().getBool(\"WEBGL_PACK_BINARY_OPERATIONS\")?new Si(ki,t.shape,e.shape):new Ri(Ei,t.shape,e.shape);return this.compileAndRun(n,[t,e])},o.prototype.elu=function(t){if(i().getBool(\"WEBGL_PACK_UNARY_OPERATIONS\"))return this.packedUnaryOp(t,Ou,t.dtype);var e=new cu(t.shape,vu);return this.compileAndRun(e,[t])},o.prototype.eluDer=function(t,e){var n=i().getBool(\"WEBGL_PACK_BINARY_OPERATIONS\")?new Si(\"\\n  vec4 bGTEZero = vec4(greaterThanEqual(b, vec4(0.)));\\n  return (bGTEZero * a) + ((vec4(1.0) - bGTEZero) * (a * (b + vec4(1.0))));\\n\",t.shape,e.shape):new Ri(\"return (b >= 1.0) ? a : a * (b + 1.0);\",t.shape,e.shape);return this.compileAndRun(n,[t,e])},o.prototype.selu=function(t){var e=new cu(t.shape,gu);return this.compileAndRun(e,[t])},o.prototype.int=function(t){var e=new cu(t.shape,\"return float(int(x));\");return this.compileAndRun(e,[t],\"int32\")},o.prototype.clip=function(t,e,n){var r,o=(r=i().getBool(\"WEBGL_PACK_CLIP\")?new Ti(t.shape):new Ai(t.shape)).getCustomSetupFunc(e,n);return this.compileAndRun(r,[t],null,o)},o.prototype.abs=function(t){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.abs(t);if(i().getBool(\"WEBGL_PACK_UNARY_OPERATIONS\"))return this.packedUnaryOp(t,fu,t.dtype);var e=new cu(t.shape,fu);return this.compileAndRun(e,[t])},o.prototype.complexAbs=function(t){var e=this.texData.get(t.dataId),n=new Di(t.shape),r=[this.makeComplexComponentTensorInfo(t,e.complexTensors.real),this.makeComplexComponentTensorInfo(t,e.complexTensors.imag)];return this.compileAndRun(n,r)},o.prototype.sigmoid=function(t){var e=new cu(t.shape,\"return 1.0 / (1.0 + exp(-1.0 * x));\");return this.compileAndRun(e,[t])},o.prototype.softplus=function(t){var e=new cu(t.shape,\"\\n  float epsilon = 1.1920928955078125e-7;\\n  float threshold = log(epsilon) + 2.0;\\n\\n  bool too_large = x > -threshold;\\n  bool too_small = x < threshold;\\n\\n  float result;\\n  float exp_x = exp(x);\\n\\n  if (too_large){\\n    result = x;\\n  }\\n  else if (too_small){\\n    result = exp_x;\\n  }\\n  else{\\n    result = log(exp_x + 1.0);\\n  }\\n  return result;\\n\");return this.compileAndRun(e,[t])},o.prototype.sin=function(t){var e=new cu(t.shape,Cu);return this.compileAndRun(e,[t])},o.prototype.cos=function(t){var e=new cu(t.shape,Eu);return this.compileAndRun(e,[t])},o.prototype.tan=function(t){var e=new cu(t.shape,\"return tan(x);\");return this.compileAndRun(e,[t])},o.prototype.asin=function(t){var e=new cu(t.shape,Ru);return this.compileAndRun(e,[t])},o.prototype.acos=function(t){var e=new cu(t.shape,Iu);return this.compileAndRun(e,[t])},o.prototype.atan=function(t){var e=new cu(t.shape,ku);return this.compileAndRun(e,[t])},o.prototype.atan2=function(t,e){var n=i().getBool(\"WEBGL_PACK_BINARY_OPERATIONS\")?new Si(\"\\n  vec4 result = atan(a, b);\\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\\n  \\n  result.r = isNaN.r > 0. ? NAN : result.r;\\n  result.g = isNaN.g > 0. ? NAN : result.g;\\n  result.b = isNaN.b > 0. ? NAN : result.b;\\n  result.a = isNaN.a > 0. ? NAN : result.a;\\n\\n  return result;\\n\",t.shape,e.shape):new Ri(\"\\n  if (isnan(a)) return a;\\n  if (isnan(b)) return b;\\n\\n  return atan(a, b);\\n\",t.shape,e.shape);return this.compileAndRun(n,[t,e])},o.prototype.sinh=function(t){var e=new cu(t.shape,\"\\n  float e2x = exp(x);\\n  return (e2x - 1.0 / e2x) / 2.0;\\n\");return this.compileAndRun(e,[t])},o.prototype.cosh=function(t){var e=new cu(t.shape,\"\\n  float e2x = exp(-x);\\n  return (e2x + 1.0 / e2x) / 2.0;\\n\");return this.compileAndRun(e,[t])},o.prototype.tanh=function(t){var e=new cu(t.shape,\"\\n  float e2x = exp(-2.0 * abs(x));\\n  return sign(x) * (1.0 - e2x) / (1.0 + e2x);\\n\");return this.compileAndRun(e,[t])},o.prototype.asinh=function(t){var e=new cu(t.shape,Su);return this.compileAndRun(e,[t])},o.prototype.acosh=function(t){var e=new cu(t.shape,Au);return this.compileAndRun(e,[t])},o.prototype.atanh=function(t){var e=new cu(t.shape,Tu);return this.compileAndRun(e,[t])},o.prototype.erf=function(t){var e=new cu(t.shape,'\\n  // Error function is calculated approximately with elementary function.\\n  // See \"Handbook of Mathematical Functions with Formulas,\\n  // Graphs, and Mathematical Tables\", Abramowitz and Stegun.\\n  float p = 0.3275911;\\n  float a1 = 0.254829592;\\n  float a2 = -0.284496736;\\n  float a3 = 1.421413741;\\n  float a4 = -1.453152027;\\n  float a5 = 1.061405429;\\n\\n  float sign = sign(x);\\n  x = abs(x);\\n  float t = 1.0 / (1.0 + p * x);\\n  return sign * (1.0 - (((((a5*t + a4)*t) + a3)*t + a2)*t + a1)*t*exp(-x*x));\\n');return this.compileAndRun(e,[t])},o.prototype.step=function(t,e){var n=new cu(t.shape,function(t){return void 0===t&&(t=0),lu+\"\\n    return x > 0.0 ? 1.0 : float(\"+t+\");\\n  \"}(e));return this.compileAndRun(n,[t])},o.prototype.conv2dByMatMul=function(t,e,n,r,o,a){var s=t.shape,u=this.texData.get(t.dataId),c=n.inChannels,l=s[0]*s[1]*s[2],h=n.outChannels,f=\"channelsLast\"===n.dataFormat,d=(1===l||1===h)&&c>1e3,p=s[2]%2!=0&&!!u.isPacked;if(d||!i().getBool(\"WEBGL_LAZILY_UNPACK\")||!i().getBool(\"WEBGL_PACK_BINARY_OPERATIONS\")||!p){var v=f?s[0]*s[1]*s[2]:s[0]*s[2]*s[3],g=this.reshape(t,[1,v,n.inChannels]),m=this.reshape(e,[1,n.inChannels,n.outChannels]);return this.reshape(this.fusedBatchMatMul({a:g,b:m,transposeA:!1,transposeB:!1,bias:r,activation:o,preluActivationWeights:a}),n.outShape)}var y=f?s[0]*s[1]*(s[2]+1):s[0]*s[2]*(s[3]+1),x={dataId:t.dataId,shape:[1,y,n.inChannels],dtype:t.dtype},b=u.shape;u.shape=u.shape.slice(),u.shape[u.shape.length-2]++,C(_e(u.shape,x.shape),(function(){return\"packed reshape \"+u.shape+\" to \"+x.shape+\" isn't free\"}));var w=this.reshape(e,[1,n.inChannels,n.outChannels]),E=this.fusedBatchMatMul({a:x,b:w,transposeA:!1,transposeB:!1,bias:r,activation:o,preluActivationWeights:a}),R=this.texData.get(E.dataId);return C(R.isPacked,(function(){return\"batchMatMul result is expected to be packed\"})),u.shape=b,R.shape=n.outShape,Lt.makeTensorFromDataId(E.dataId,n.outShape,E.dtype)},o.prototype.conv2dWithIm2Row=function(t,e,n,r,o,a){var i=n.filterWidth,s=n.filterHeight,u=n.inChannels,c=n.outWidth,l=n.outHeight,h=\"channelsLast\"===n.dataFormat,f=i*s*u,d=l*c,p=[f,d],v=t.squeeze([0]),g=e.reshape([1,f,-1]),m=new Ss(p,v.shape,n),y=this.compileAndRun(m,[v]).reshape([1,p[0],p[1]]),x=null!=r,b=null!=a,w=o?Lu(o,!0):null,C=new _s(y.shape,[1,d,n.outChannels],!0,!1,x,w,b),E=[y,g];r&&E.push(r),b&&E.push(a);var R=this.compileAndRun(C,E);return h?R.reshape([1,l,c,n.outChannels]):R.reshape([1,n.outChannels,l,c])},o.prototype.fusedConv2d=function(t){var e=t.input,n=t.filter,r=t.convInfo,o=t.bias,a=t.activation,s=t.preluActivationWeights;if(1===r.filterHeight&&1===r.filterWidth&&1===r.dilationHeight&&1===r.dilationWidth&&1===r.strideHeight&&1===r.strideWidth&&(\"SAME\"===r.padInfo.type||\"VALID\"===r.padInfo.type))return this.conv2dByMatMul(e,n,r,o,a,s);if(i().getBool(\"WEBGL_CONV_IM2COL\")&&1===e.shape[0])return this.conv2dWithIm2Row(e,n,r,o,a,s);var u=null!=o,c=null!=s,l=a?Lu(a,!1):null,h=new Ui(r,u,l,c),f=[e,n];return o&&f.push(o),s&&f.push(s),this.compileAndRun(h,f)},o.prototype.conv2d=function(t,e,n){if(1===n.filterHeight&&1===n.filterWidth&&1===n.dilationHeight&&1===n.dilationWidth&&1===n.strideHeight&&1===n.strideWidth&&(\"SAME\"===n.padInfo.type||\"VALID\"===n.padInfo.type))return this.conv2dByMatMul(t,e,n);if(i().getBool(\"WEBGL_CONV_IM2COL\")&&1===t.shape[0])return this.conv2dWithIm2Row(t,e,n);var r=new Ui(n);return this.compileAndRun(r,[t,e])},o.prototype.conv2dDerInput=function(t,e,n){var r=new Mi(n);return this.compileAndRun(r,[t,e])},o.prototype.conv2dDerFilter=function(t,e,n){var r=new Oi(n);return this.compileAndRun(r,[t,e])},o.prototype.fusedDepthwiseConv2D=function(t){var e,n=t.input,r=t.filter,o=t.convInfo,a=t.bias,s=t.activation,u=t.preluActivationWeights,c=i().getBool(\"WEBGL_PACK_DEPTHWISECONV\")&&o.strideWidth<=2&&o.outChannels/o.inChannels==1,l=s?Lu(s,c):null,h=[n,r],f=null!=a,d=null!=u;return f&&h.push(a),d&&h.push(u),c?(e=new Gi(o,f,l,d),this.compileAndRun(e,h)):(e=new zi(o,f,l,d),this.compileAndRun(e,h))},o.prototype.depthwiseConv2D=function(t,e,n){var r;return i().getBool(\"WEBGL_PACK_DEPTHWISECONV\")&&n.strideWidth<=2&&n.outChannels/n.inChannels==1?(r=new Gi(n),this.compileAndRun(r,[t,e])):(r=new zi(n),this.compileAndRun(r,[t,e]))},o.prototype.depthwiseConv2DDerInput=function(t,e,n){var r=new Wi(n);return this.compileAndRun(r,[t,e])},o.prototype.depthwiseConv2DDerFilter=function(t,e,n){var r=new Li(n);return this.compileAndRun(r,[t,e])},o.prototype.conv3d=function(t,e,n){var r=new Vi(n);return this.compileAndRun(r,[t,e])},o.prototype.conv3dDerInput=function(t,e,n){var r=new Pi(n);return this.compileAndRun(r,[t,e])},o.prototype.conv3dDerFilter=function(t,e,n){var r=new Bi(n);return this.compileAndRun(r,[t,e])},o.prototype.maxPool=function(t,e){var n=new Ws(e,\"max\",!1);return this.compileAndRun(n,[t])},o.prototype.avgPool=function(t,e){var n=new Ws(e,\"avg\",!1);return this.compileAndRun(n,[t],\"float32\")},o.prototype.maxPoolBackprop=function(t,e,n,r){var o=new Ws(r,\"max\",!0),a=this.compileAndRun(o,[e]),i=new Ns(r),s=this.compileAndRun(i,[t,a],e.dtype);return a.dispose(),s},o.prototype.avgPoolBackprop=function(t,e,n){var r=new fi(n);return this.compileAndRun(r,[t],e.dtype)},o.prototype.cast=function(t,e){return Ra(t,e,this)},o.prototype.unstack=function(t,e){for(var n=t.shape[e],r=new Array(t.rank-1),o=0,a=0;a<t.rank;a++)a!==e&&(r[o++]=t.shape[a]);var i=new Array(t.rank).fill(0),s=t.shape.slice();s[e]=1;var u=new Array(n);for(a=0;a<u.length;a++)i[e]=a,u[a]=this.slice(t,i,s).reshape(r);return u},o.prototype.avgPool3d=function(t,e){var n=new Us(e,\"avg\",!1);return this.compileAndRun(n,[t],\"float32\")},o.prototype.avgPool3dBackprop=function(t,e,n){var r=new di(n);return this.compileAndRun(r,[t],e.dtype)},o.prototype.maxPool3d=function(t,e){var n=new Us(e,\"max\",!1);return this.compileAndRun(n,[t],\"float32\")},o.prototype.maxPool3dBackprop=function(t,e,n,r){var o=new Us(r,\"max\",!0),a=this.compileAndRun(o,[e]),i=new Fs(r),s=this.compileAndRun(i,[t,a],e.dtype);return a.dispose(),s},o.prototype.reshape=function(t,e){var n=this.texData.get(t.dataId);if(n.isPacked&&!_e(t.shape,e)&&(null===n.texture||!_e(n.shape,e))){var r=this.packedReshape(t,e);return Lt.makeTensorFromDataId(r.dataId,r.shape,r.dtype)}return Ia(t,e)},o.prototype.resizeBilinear=function(t,e,n,r){var o=i().getBool(\"WEBGL_PACK_IMAGE_OPERATIONS\")?new qs(t.shape,e,n,r):new Hs(t.shape,e,n,r);return this.compileAndRun(o,[t],\"float32\")},o.prototype.resizeBilinearBackprop=function(t,e,n){var r=new Gs(t,e,n);return this.compileAndRun(r,[t])},o.prototype.resizeNearestNeighbor=function(t,e,n,r){var o=new js(t.shape,e,n,r);return this.compileAndRun(o,[t])},o.prototype.resizeNearestNeighborBackprop=function(t,e,n){var r=new Ks(t,e,n);return this.compileAndRun(r,[t])},o.prototype.multinomial=function(t,e,n,r){var o=e?t:ia(t),a=o.shape[0],i=o.shape[1],s=new Os(a,i,n),u=s.getCustomSetupFunc(r);return this.compileAndRun(s,[o],\"int32\",u)},o.prototype.oneHot=function(t,e,n,r){var o=new Ms(t.size,e,n,r);return this.compileAndRun(o,[t])},o.prototype.diag=function(t){var e=new $i(t.size);return this.compileAndRun(e,[t])},o.prototype.nonMaxSuppression=function(t,e,n,r,o){return dn(\"tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead\"),Oa(t.dataSync(),e.dataSync(),n,r,o)},o.prototype.cropAndResize=function(t,e,n,r,o,a){var i=new Hi(t.shape,e.shape,r,o,a);return this.compileAndRun(i,[t,e,n],\"float32\")},o.prototype.depthToSpace=function(t,e,n){C(e>1,(function(){return\"blockSize should be > 1 for depthToSpace, but was: \"+e}));var r=t.shape[0],o=\"NHWC\"===n?t.shape[1]:t.shape[2],a=\"NHWC\"===n?t.shape[2]:t.shape[3],i=\"NHWC\"===n?t.shape[3]:t.shape[1],s=o*e,u=a*e,c=i/(e*e),l=new Yi(\"NHWC\"===n?[r,s,u,c]:[r,c,s,u],e,n);return this.compileAndRun(l,[t])},o.prototype.split=function(t,e,n){return Ua(t,e,n)},o.prototype.scatterND=function(t,e,n){var r=Go(0,t,n),o=r.sliceRank,a=r.numUpdates,i=r.sliceSize,s=r.strides,u=r.outputSize,c=[u/i,i],l=t.reshape([a,o]),h=e.reshape([a,i]);if(0===u)return Ia(Fn([]),n);var f=On(0),d=new $s(a,o,l.rank,h.rank,s,c);return this.compileAndRun(d,[h,l,f]).reshape(n)},o.prototype.sparseToDense=function(t,e,n,r){var o=Go(0,t,n),a=o.sliceRank,i=o.numUpdates,s=o.strides,u=o.outputSize,c=new $s(i,a,t.rank,e.rank,s,[u,1],!1);return this.compileAndRun(c,[e,t,r]).reshape(n)},o.prototype.fft=function(t){return this.fftImpl(t,!1)},o.prototype.ifft=function(t){return this.fftImpl(t,!0)},o.prototype.fftImpl=function(t,e){var n=this.texData.get(t.dataId),r=new rs(es,t.shape,e),o=new rs(ns,t.shape,e),a=[this.makeComplexComponentTensorInfo(t,n.complexTensors.real),this.makeComplexComponentTensorInfo(t,n.complexTensors.imag)],i=this.compileAndRun(r,a),s=this.compileAndRun(o,a),u=this.complex(i,s).as2D(t.shape[0],t.shape[1]);return i.dispose(),s.dispose(),u},o.prototype.gatherND=function(t,e){var n=e.shape,r=n[n.length-1],o=Po(t,e),a=o[0],i=o[1],s=o[2],u=o[3],c=e.reshape([i,r]),l=t.reshape([t.size/s,s]),h=new is(r,u,[i,s]);return this.compileAndRun(h,[l,c]).reshape(a)},o.prototype.fill=function(t,e,n){if(\"string\"===(n=n||j(e))){var r=P(n,k(t));return r.fill(e),Lt.makeTensor(r,t,n,this)}var o=new os(t,e),a=o.getCustomSetupFunc(e);return this.compileAndRun(o,[],n,a)},o.prototype.onesLike=function(t){if(\"string\"===t.dtype)throw new Error(\"onesLike is not supported under string dtype\");return this.fill(t.shape,1,t.dtype)},o.prototype.zerosLike=function(t){return this.fill(t.shape,\"string\"===t.dtype?\"\":0,t.dtype)},o.prototype.linspace=function(t,e,n){return ka(t,e,n)},o.prototype.makeTensorInfo=function(t,e){var n=this.write(null,t,e);return this.texData.get(n).usage=null,{dataId:n,shape:t,dtype:e}},o.prototype.makeOutput=function(t,e){var n=this.makeTensorInfo(t,e).dataId;return Lt.makeTensorFromDataId(n,t,e,this)},o.prototype.unpackTensor=function(t){var e=new Bu(t.shape);return this.runWebGLProgram(e,[t],t.dtype)},o.prototype.packTensor=function(t){var e=new Bs(t.shape);return this.runWebGLProgram(e,[t],t.dtype,null,!0)},o.prototype.packedReshape=function(t,e){var n=[Ae(t.shape)].concat(Te(t.shape)),r={dtype:t.dtype,shape:n,dataId:t.dataId},o=[Ae(e)].concat(Te(e)),a=new zs(o,n),i=this.runWebGLProgram(a,[r],t.dtype,null,!0);return{dataId:i.dataId,shape:e,dtype:i.dtype}},o.prototype.decode=function(t){var e,n=this.texData.get(t),r=n.isPacked,o=n.shape,a=n.dtype,i=De(o);e=r?new Xi(i):new ji(i);return{dtype:a,shape:o,dataId:this.runWebGLProgram(e,[{shape:i,dtype:a,dataId:t}],a,null,!0).dataId}},o.prototype.runWebGLProgram=function(t,e,n,r,o){var a=this;void 0===o&&(o=!1);var s=this.makeTensorInfo(t.outputShape,n),u=this.texData.get(s.dataId);if(t.packedOutput&&(u.isPacked=!0),t.outPackingScheme===Vt.DENSE){var c=Yt(t.outputShape);u.texShape=c.map((function(t){return 2*t}))}if(null!=t.outTexUsage&&(u.usage=t.outTexUsage),0===k(s.shape))return u.values=B(s.dtype,0),s;var l=[],h=e.map((function(e){if(\"complex64\"===e.dtype)throw new Error(\"GPGPUProgram does not support complex64 input. For complex64 dtypes, please separate the program into real and imaginary parts.\");var n=a.texData.get(e.dataId);if(null==n.texture){if(!t.packedInputs&&k(e.shape)<=i().getNumber(\"WEBGL_SIZE_UPLOAD_UNIFORM\"))return{shape:e.shape,texData:null,isUniform:!0,uniformValues:n.values};t.packedInputs&&(n.isPacked=!0,n.shape=e.shape)}else if(!!n.isPacked!=!!t.packedInputs)e=n.isPacked?a.unpackTensor(e):a.packTensor(e),l.push(e),n=a.texData.get(e.dataId);else if(n.isPacked&&!_e(n.shape,e.shape)){var r=e,o=e.shape;e.shape=n.shape,e=a.packedReshape(e,o),l.push(e),n=a.texData.get(e.dataId),r.shape=o}return a.uploadToGPU(e.dataId),{shape:e.shape,texData:n,isUniform:!1}}));this.uploadToGPU(s.dataId);var f,d={shape:s.shape,texData:u,isUniform:!1},p=function(t,e,n){var r=\"\";e.concat(n).forEach((function(t){var e=null!=t.texData&&null!=t.texData.slice&&t.texData.slice.flatOffset>0,n=t.isUniform?\"uniform\":t.texData.texShape;r+=t.shape+\"_\"+n+\"_\"+e}));var o=t.userCode,a=t.constructor.name;return a+=\"_\"+r+\"_\"+o}(t,h,d),v=this.getAndSaveBinary(p,(function(){return function(t,e,n,r){var o=e.userCode,a=n.map((function(t,n){var r={logicalShape:t.shape,texShape:t.isUniform?null:t.texData.texShape,isUniform:t.isUniform,isPacked:!t.isUniform&&t.texData.isPacked,flatOffset:null};return null!=t.texData&&null!=t.texData.slice&&t.texData.slice.flatOffset>0&&(r.flatOffset=t.texData.slice.flatOffset),{name:e.variableNames[n],shapeInfo:r}})),s=a.map((function(t){return t.shapeInfo})),u={logicalShape:r.shape,texShape:r.texData.texShape,isUniform:!1,isPacked:r.texData.isPacked,flatOffset:null},c=Za(a,u,o,e.packedInputs),l=t.createProgram(c),h=null,f=t.getUniformLocation(l,\"NAN\",!1);1===i().getNumber(\"WEBGL_VERSION\")&&(h=t.getUniformLocation(l,\"INFINITY\",!1));for(var d={},p=0;p<e.variableNames.length;p++){var v=e.variableNames[p];d[v]=t.getUniformLocation(l,v,!1),d[\"offset\"+v]=t.getUniformLocation(l,\"offset\"+v,!1)}return{program:e,source:c,webGLProgram:l,uniformLocations:d,inShapeInfos:s,outShapeInfo:u,infLoc:h,nanLoc:f}}(a.gpgpu,t,h,d)})),g=null!=this.activeTimers;if(g&&(f=this.startTimer()),function(t,e,n,r,o){ks(e.inShapeInfos,n),ks([e.outShapeInfo],[r]);var a=r.texData.texture,s=r.texData.texShape;r.texData.isPacked?t.setOutputPackedMatrixTexture(a,s[0],s[1]):t.setOutputMatrixTexture(a,s[0],s[1]),t.setProgram(e.webGLProgram),1===i().getNumber(\"WEBGL_VERSION\")&&null!==e.infLoc&&t.gl.uniform1f(e.infLoc,1/0),null!==e.nanLoc&&t.gl.uniform1f(e.nanLoc,NaN),n.forEach((function(n,r){var o=e.program.variableNames[r],a=e.uniformLocations[o],i=e.uniformLocations[\"offset\"+o];if(null!=a)if(n.isUniform)if(k(n.shape)<2)t.gl.uniform1f(a,n.uniformValues[0]);else{var s=n.uniformValues;s instanceof Float32Array||(s=new Float32Array(s)),t.gl.uniform1fv(a,s)}else null!=n.texData.slice&&null!=i&&t.gl.uniform1i(i,n.texData.slice.flatOffset),t.setInputMatrixTexture(n.texData.texture,a,r)})),null!=o&&o(t,e.webGLProgram),t.executeProgram()}(this.gpgpu,v,h,d,r),l.forEach((function(t){return a.disposeData(t.dataId)})),g&&(f=this.endTimer(f),this.activeTimers.push({name:t.constructor.name,query:this.getQueryTime(f)})),!i().getBool(\"WEBGL_LAZILY_UNPACK\")&&u.isPacked&&!1===o){var m=this.unpackTensor(s);return this.disposeData(s.dataId),m}return s},o.prototype.compileAndRun=function(t,e,n,r,o){void 0===o&&(o=!1),n=n||e[0].dtype;var a=this.runWebGLProgram(t,e,n,r,o);return Lt.makeTensorFromDataId(a.dataId,a.shape,a.dtype)},o.prototype.getAndSaveBinary=function(t,e){return t in this.binaryCache||(this.binaryCache[t]=e()),this.binaryCache[t]},o.prototype.getTextureManager=function(){return this.textureManager},o.prototype.dispose=function(){var t=this;if(!this.disposed){if(!i().getBool(\"IS_TEST\"))Object.keys(this.binaryCache).forEach((function(e){t.gpgpu.deleteProgram(t.binaryCache[e].webGLProgram),delete t.binaryCache[e]}));this.textureManager.dispose(),null!=this.canvas&&\"undefined\"!=typeof HTMLCanvasElement&&this.canvas instanceof HTMLCanvasElement?this.canvas.remove():this.canvas=null,this.gpgpuCreatedLocally&&(this.gpgpu.program=null,this.gpgpu.dispose()),this.disposed=!0}},o.prototype.floatPrecision=function(){var t=this;return null==this.floatPrecisionValue&&(this.floatPrecisionValue=Ze((function(){if(!i().get(\"WEBGL_RENDER_FLOAT32_ENABLED\")){var e=i().getBool(\"DEBUG\");i().set(\"DEBUG\",!1);var n=t.abs(On(1e-8)).dataSync()[0];if(i().set(\"DEBUG\",e),n>0)return 32}return 16}))),this.floatPrecisionValue},o.prototype.epsilon=function(){return 32===this.floatPrecision()?1e-7:1e-4},o.prototype.uploadToGPU=function(t){var e,n=this.texData.get(t),r=n.shape,o=n.dtype,a=n.values,i=n.texture,s=n.usage,u=n.isPacked;if(null==i){var c,l=null!=this.activeTimers;l&&(c=et());var h=n.texShape;if(null==h&&(h=Ne(r,u),n.texShape=h),null!=a){var f=De(r),d=void 0,p=h[1],v=h[0],g=a instanceof Uint8Array;u?(p=(e=$t(h[0],h[1]))[0],v=e[1],d=new ts(f,[v,p],g)):d=new Zi(f,[v,p],g);var m=this.makeTensorInfo([v,p],o);this.texData.get(m.dataId).usage=g?zt.PIXELS:zt.UPLOAD,this.gpgpu.uploadDenseMatrixToTexture(this.getTexture(m.dataId),p,v,a);var y=this.runWebGLProgram(d,[m],o,null,!0),x=this.texData.get(y.dataId);n.texture=x.texture,n.texShape=x.texShape,n.isPacked=x.isPacked,n.usage=x.usage,this.disposeData(m.dataId),this.texData.delete(y.dataId),n.values=null,l&&(this.uploadWaitMs+=et()-c)}else{var b=this.acquireTexture(h,s,o,u);n.texture=b}}},o.prototype.convertAndCacheOnCPU=function(t,e){var n=this.texData.get(t),r=n.dtype;return this.releaseGPUData(t),null!=e&&(n.values=function(t,e){if(\"float32\"===e||\"complex64\"===e)return t;if(\"int32\"===e||\"bool\"===e){for(var n=\"int32\"===e?new Int32Array(t.length):new Uint8Array(t.length),r=0;r<n.length;++r)n[r]=Math.round(t[r]);return n}throw new Error(\"Unknown dtype \"+e)}(e,r)),n.values},o.prototype.acquireTexture=function(t,e,n,r){if(this.numBytesInGPU+=this.computeBytes(t,n),!this.warnedAboutMemory&&this.numBytesInGPU>1024*this.numMBBeforeWarning*1024){var o=(this.numBytesInGPU/1024/1024).toFixed(2);this.warnedAboutMemory=!0,console.warn(\"High memory usage in GPU: \"+o+\" MB, most likely due to a memory leak\")}return this.textureManager.acquireTexture(t,e,r)},o.prototype.computeBytes=function(t,e){return t[0]*t[1]*z(e)},o}(la);Wt()&&Lt.registerBackend(\"webgl\",(function(){return new Uu}),2);\"undefined\"!=typeof globalThis?globalThis:\"undefined\"!=typeof window?window:\"undefined\"!=typeof global?global:\"undefined\"!=typeof self&&self;function Vu(t,e){return t(e={exports:{}},e.exports),e.exports}var zu=Vu((function(t){!function(t,e,n){function r(t){var e,n=this,r=(e=4022871197,function(t){t=t.toString();for(var n=0;n<t.length;n++){var r=.02519603282416938*(e+=t.charCodeAt(n));r-=e=r>>>0,e=(r*=e)>>>0,e+=4294967296*(r-=e)}return 2.3283064365386963e-10*(e>>>0)});n.next=function(){var t=2091639*n.s0+2.3283064365386963e-10*n.c;return n.s0=n.s1,n.s1=n.s2,n.s2=t-(n.c=0|t)},n.c=1,n.s0=r(\" \"),n.s1=r(\" \"),n.s2=r(\" \"),n.s0-=r(t),n.s0<0&&(n.s0+=1),n.s1-=r(t),n.s1<0&&(n.s1+=1),n.s2-=r(t),n.s2<0&&(n.s2+=1),r=null}function o(t,e){return e.c=t.c,e.s0=t.s0,e.s1=t.s1,e.s2=t.s2,e}function a(t,e){var n=new r(t),a=e&&e.state,i=n.next;return i.int32=function(){return 4294967296*n.next()|0},i.double=function(){return i()+11102230246251565e-32*(2097152*i()|0)},i.quick=i,a&&(\"object\"==typeof a&&o(a,n),i.state=function(){return o(n,{})}),i}e&&e.exports?e.exports=a:n&&n.amd?n((function(){return a})):this.alea=a}(0,t,!1)})),Gu=Vu((function(t){!function(t,e,n){function r(t){var e=this,n=\"\";e.x=0,e.y=0,e.z=0,e.w=0,e.next=function(){var t=e.x^e.x<<11;return e.x=e.y,e.y=e.z,e.z=e.w,e.w^=e.w>>>19^t^t>>>8},t===(0|t)?e.x=t:n+=t;for(var r=0;r<n.length+64;r++)e.x^=0|n.charCodeAt(r),e.next()}function o(t,e){return e.x=t.x,e.y=t.y,e.z=t.z,e.w=t.w,e}function a(t,e){var n=new r(t),a=e&&e.state,i=function(){return(n.next()>>>0)/4294967296};return i.double=function(){do{var t=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},i.int32=n.next,i.quick=i,a&&(\"object\"==typeof a&&o(a,n),i.state=function(){return o(n,{})}),i}e&&e.exports?e.exports=a:n&&n.amd?n((function(){return a})):this.xor128=a}(0,t,!1)})),Hu=Vu((function(t){!function(t,e,n){function r(t){var e=this,n=\"\";e.next=function(){var t=e.x^e.x>>>2;return e.x=e.y,e.y=e.z,e.z=e.w,e.w=e.v,(e.d=e.d+362437|0)+(e.v=e.v^e.v<<4^t^t<<1)|0},e.x=0,e.y=0,e.z=0,e.w=0,e.v=0,t===(0|t)?e.x=t:n+=t;for(var r=0;r<n.length+64;r++)e.x^=0|n.charCodeAt(r),r==n.length&&(e.d=e.x<<10^e.x>>>4),e.next()}function o(t,e){return e.x=t.x,e.y=t.y,e.z=t.z,e.w=t.w,e.v=t.v,e.d=t.d,e}function a(t,e){var n=new r(t),a=e&&e.state,i=function(){return(n.next()>>>0)/4294967296};return i.double=function(){do{var t=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},i.int32=n.next,i.quick=i,a&&(\"object\"==typeof a&&o(a,n),i.state=function(){return o(n,{})}),i}e&&e.exports?e.exports=a:n&&n.amd?n((function(){return a})):this.xorwow=a}(0,t,!1)})),qu=Vu((function(t){!function(t,e,n){function r(t){var e=this;e.next=function(){var t,n,r=e.x,o=e.i;return t=r[o],n=(t^=t>>>7)^t<<24,n^=(t=r[o+1&7])^t>>>10,n^=(t=r[o+3&7])^t>>>3,n^=(t=r[o+4&7])^t<<7,t=r[o+7&7],n^=(t^=t<<13)^t<<9,r[o]=n,e.i=o+1&7,n},function(t,e){var n,r=[];if(e===(0|e))r[0]=e;else for(e=\"\"+e,n=0;n<e.length;++n)r[7&n]=r[7&n]<<15^e.charCodeAt(n)+r[n+1&7]<<13;for(;r.length<8;)r.push(0);for(n=0;n<8&&0===r[n];++n);for(8==n?r[7]=-1:r[n],t.x=r,t.i=0,n=256;n>0;--n)t.next()}(e,t)}function o(t,e){return e.x=t.x.slice(),e.i=t.i,e}function a(t,e){null==t&&(t=+new Date);var n=new r(t),a=e&&e.state,i=function(){return(n.next()>>>0)/4294967296};return i.double=function(){do{var t=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},i.int32=n.next,i.quick=i,a&&(a.x&&o(a,n),i.state=function(){return o(n,{})}),i}e&&e.exports?e.exports=a:n&&n.amd?n((function(){return a})):this.xorshift7=a}(0,t,!1)})),Ku=Vu((function(t){!function(t,e,n){function r(t){var e=this;e.next=function(){var t,n,r=e.w,o=e.X,a=e.i;return e.w=r=r+1640531527|0,n=o[a+34&127],t=o[a=a+1&127],n^=n<<13,t^=t<<17,n^=n>>>15,t^=t>>>12,n=o[a]=n^t,e.i=a,n+(r^r>>>16)|0},function(t,e){var n,r,o,a,i,s=[],u=128;for(e===(0|e)?(r=e,e=null):(e+=\"\\0\",r=0,u=Math.max(u,e.length)),o=0,a=-32;a<u;++a)e&&(r^=e.charCodeAt((a+32)%e.length)),0===a&&(i=r),r^=r<<10,r^=r>>>15,r^=r<<4,r^=r>>>13,a>=0&&(i=i+1640531527|0,o=0==(n=s[127&a]^=r+i)?o+1:0);for(o>=128&&(s[127&(e&&e.length||0)]=-1),o=127,a=512;a>0;--a)r=s[o+34&127],n=s[o=o+1&127],r^=r<<13,n^=n<<17,r^=r>>>15,n^=n>>>12,s[o]=r^n;t.w=i,t.X=s,t.i=o}(e,t)}function o(t,e){return e.i=t.i,e.w=t.w,e.X=t.X.slice(),e}function a(t,e){null==t&&(t=+new Date);var n=new r(t),a=e&&e.state,i=function(){return(n.next()>>>0)/4294967296};return i.double=function(){do{var t=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},i.int32=n.next,i.quick=i,a&&(a.X&&o(a,n),i.state=function(){return o(n,{})}),i}e&&e.exports?e.exports=a:n&&n.amd?n((function(){return a})):this.xor4096=a}(0,t,!1)})),ju=Vu((function(t){!function(t,e,n){function r(t){var e=this,n=\"\";e.next=function(){var t=e.b,n=e.c,r=e.d,o=e.a;return t=t<<25^t>>>7^n,n=n-r|0,r=r<<24^r>>>8^o,o=o-t|0,e.b=t=t<<20^t>>>12^n,e.c=n=n-r|0,e.d=r<<16^n>>>16^o,e.a=o-t|0},e.a=0,e.b=0,e.c=-1640531527,e.d=1367130551,t===Math.floor(t)?(e.a=t/4294967296|0,e.b=0|t):n+=t;for(var r=0;r<n.length+20;r++)e.b^=0|n.charCodeAt(r),e.next()}function o(t,e){return e.a=t.a,e.b=t.b,e.c=t.c,e.d=t.d,e}function a(t,e){var n=new r(t),a=e&&e.state,i=function(){return(n.next()>>>0)/4294967296};return i.double=function(){do{var t=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},i.int32=n.next,i.quick=i,a&&(\"object\"==typeof a&&o(a,n),i.state=function(){return o(n,{})}),i}e&&e.exports?e.exports=a:n&&n.amd?n((function(){return a})):this.tychei=a}(0,t,!1)})),Xu=Vu((function(t){!function(e,n){var r,o=this,a=256,i=6,s=\"random\",u=n.pow(a,i),c=n.pow(2,52),l=2*c,h=a-1;function f(t,h,f){var m=[],y=v(function t(e,n){var r,o=[],a=typeof e;if(n&&\"object\"==a)for(r in e)try{o.push(t(e[r],n-1))}catch(t){}return o.length?o:\"string\"==a?e:e+\"\\0\"}((h=1==h?{entropy:!0}:h||{}).entropy?[t,g(e)]:null==t?function(){try{var t;return r&&(t=r.randomBytes)?t=t(a):(t=new Uint8Array(a),(o.crypto||o.msCrypto).getRandomValues(t)),g(t)}catch(t){var n=o.navigator,i=n&&n.plugins;return[+new Date,o,i,o.screen,g(e)]}}():t,3),m),x=new d(m),b=function(){for(var t=x.g(i),e=u,n=0;t<c;)t=(t+n)*a,e*=a,n=x.g(1);for(;t>=l;)t/=2,e/=2,n>>>=1;return(t+n)/e};return b.int32=function(){return 0|x.g(4)},b.quick=function(){return x.g(4)/4294967296},b.double=b,v(g(x.S),e),(h.pass||f||function(t,e,r,o){return o&&(o.S&&p(o,x),t.state=function(){return p(x,{})}),r?(n[s]=t,e):t})(b,y,\"global\"in h?h.global:this==n,h.state)}function d(t){var e,n=t.length,r=this,o=0,i=r.i=r.j=0,s=r.S=[];for(n||(t=[n++]);o<a;)s[o]=o++;for(o=0;o<a;o++)s[o]=s[i=h&i+t[o%n]+(e=s[o])],s[i]=e;(r.g=function(t){for(var e,n=0,o=r.i,i=r.j,s=r.S;t--;)e=s[o=h&o+1],n=n*a+s[h&(s[o]=s[i=h&i+e])+(s[i]=e)];return r.i=o,r.j=i,n})(a)}function p(t,e){return e.i=t.i,e.j=t.j,e.S=t.S.slice(),e}function v(t,e){for(var n,r=t+\"\",o=0;o<r.length;)e[h&o]=h&(n^=19*e[h&o])+r.charCodeAt(o++);return g(e)}function g(t){return String.fromCharCode.apply(0,t)}if(n[\"seed\"+s]=f,v(n.random(),e),t.exports){t.exports=f;try{r=require(\"crypto\")}catch(t){}}}([],Math)}));Xu.alea=zu,Xu.xor128=Gu,Xu.xorwow=Hu,Xu.xorshift7=qu,Xu.xor4096=Ku,Xu.tychei=ju;var Yu=Xu.alea;var $u=An({addN_:function(t){C(Array.isArray(t),(function(){return\"The argument passed to tf.addN() must be a list of tensors\"})),C(t.length>=1,(function(){return\"Must pass at least one tensor to tf.addN(), but got \"+t.length}));var e=t.map((function(t,e){return gn(t,\"tensors\"+e,\"addN\")})),n=e[0];e.forEach((function(t){if(t.dtype!==n.dtype)throw new Error(\"All tensors passed to tf.addN() must have the same dtype\")})),e.forEach((function(t){if(!S(t.shape,n.shape))throw new Error(\"All tensors passed to tf.addN() must have the same shape\")}));var r=e;return Lt.runKernelFunc((function(t,n){return t.addN(e)}),r,null,\"AddN\")}});function Qu(){Xe(\"tf.batchNormalization() is going away. Use tf.batchNorm() instead, and note the positional argument change of scale, offset, and varianceEpsilon\")}function Ju(t){return 0===t.rank||1===t.rank?t.as4D(1,1,1,t.size):2===t.rank?t.as4D(1,1,t.shape[0],t.shape[1]):3===t.rank?t.as4D(1,t.shape[0],t.shape[1],t.shape[2]):t}function Zu(t,e,n,r,o,a){null==a&&(a=.001);var i,s,u=gn(t,\"x\",\"batchNorm\"),c=gn(e,\"mean\",\"batchNorm\"),l=gn(n,\"variance\",\"batchNorm\");null!=o&&(i=gn(o,\"scale\",\"batchNorm\")),null!=r&&(s=gn(r,\"offset\",\"batchNorm\")),C(c.rank===l.rank,(function(){return\"Batch normalization gradient requires mean and variance to have equal ranks.\"})),C(null==s||c.rank===s.rank,(function(){return\"Batch normalization gradient requires mean and offset to have equal ranks.\"})),C(null==i||c.rank===i.rank,(function(){return\"Batch normalization gradient requires mean and scale to have equal ranks.\"}));var h={x:u,scale:i,offset:s,mean:c,variance:l},f={varianceEpsilon:a};return Lt.runKernelFunc((function(t,e){var n=Ju(u),r=t.batchNormalization(n,tc(c),tc(l),a,tc(i),tc(s));return e([u,c,l,i]),r}),h,null,\"FusedBatchNorm\",f).reshape(u.shape)}function tc(t){return null==t?null:0===t.rank?t.as1D():1===t.rank?t:2===t.rank?t.as4D(1,1,t.shape[0],t.shape[1]):3===t.rank?t.as4D(1,t.shape[0],t.shape[1],t.shape[2]):t}var ec=An({batchNormalization_:function(t,e,n,r,o,a){return void 0===r&&(r=.001),Qu(),Zu(t,e,n,a,o,r)}}),nc=An({batchNorm_:Zu});function rc(t,e,n,r,o,a){var i,s,u=gn(t,\"x\",\"batchNorm\"),c=gn(e,\"mean\",\"batchNorm\"),l=gn(n,\"variance\",\"batchNorm\");return null!=o&&(i=gn(o,\"scale\",\"batchNorm\")),null!=r&&(s=gn(r,\"offset\",\"batchNorm\")),C(2===u.rank,(function(){return\"Error in batchNorm3D: x must be rank 3 but got rank \"+u.rank+\".\"})),C(2===c.rank||1===c.rank,(function(){return\"Error in batchNorm2D: mean must be rank 2 or rank 1 but got rank \"+c.rank+\".\"})),C(2===l.rank||1===l.rank,(function(){return\"Error in batchNorm2D: variance must be rank 2 or rank 1 but got rank \"+l.rank+\".\"})),null!=i&&C(2===i.rank||1===i.rank,(function(){return\"Error in batchNorm2D: scale must be rank 2 or rank 1 but got rank \"+i.rank+\".\"})),null!=s&&C(2===s.rank||1===s.rank,(function(){return\"Error in batchNorm2D: offset must be rank 2 or rank 1 but got rank \"+s.rank+\".\"})),nc(u,c,l,s,i,a)}var oc=An({batchNormalization2d_:function(t,e,n,r,o,a){return void 0===r&&(r=.001),Qu(),rc(t,e,n,a,o,r)}}),ac=An({batchNorm2d_:rc});function ic(t,e,n,r,o,a){var i,s,u=gn(t,\"x\",\"batchNorm\"),c=gn(e,\"mean\",\"batchNorm\"),l=gn(n,\"variance\",\"batchNorm\");return null!=o&&(i=gn(o,\"scale\",\"batchNorm\")),null!=r&&(s=gn(r,\"offset\",\"batchNorm\")),C(3===u.rank,(function(){return\"Error in batchNorm3D: x must be rank 3 but got rank \"+u.rank+\".\"})),C(3===c.rank||1===c.rank,(function(){return\"Error in batchNorm3D: mean must be rank 3 or rank 1 but got rank \"+c.rank+\".\"})),C(3===l.rank||1===l.rank,(function(){return\"Error in batchNorm3D: variance must be rank 3 or rank 1 but got rank \"+l.rank+\".\"})),null!=i&&C(3===i.rank||1===i.rank,(function(){return\"Error in batchNorm3D: scale must be rank 3 or rank 1 but got rank \"+i.rank+\".\"})),null!=s&&C(3===s.rank||1===s.rank,(function(){return\"Error in batchNorm3D: offset must be rank 3 or rank 1 but got rank \"+s.rank+\".\"})),nc(u,c,l,s,i,a)}var sc=An({batchNormalization3d_:function(t,e,n,r,o,a){return void 0===r&&(r=.001),Qu(),ic(t,e,n,a,o,r)}}),uc=An({batchNorm3d_:ic});function cc(t,e,n,r,o,a){var i,s,u=gn(t,\"x\",\"batchNorm\"),c=gn(e,\"mean\",\"batchNorm\"),l=gn(n,\"variance\",\"batchNorm\");return null!=o&&(i=gn(o,\"scale\",\"batchNorm\")),null!=r&&(s=gn(r,\"offset\",\"batchNorm\")),C(4===u.rank,(function(){return\"Error in batchNorm4D: x must be rank 4 but got rank \"+u.rank+\".\"})),C(4===c.rank||1===c.rank,(function(){return\"Error in batchNorm4D: mean must be rank 4 or rank 1 but got rank \"+c.rank+\".\"})),C(4===l.rank||1===l.rank,(function(){return\"Error in batchNorm4D: variance must be rank 4 or rank 1 but got rank \"+l.rank+\".\"})),null!=i&&C(4===i.rank||1===i.rank,(function(){return\"Error in batchNorm4D: scale must be rank 4 or rank 1 but got rank \"+i.rank+\".\"})),null!=s&&C(4===s.rank||1===s.rank,(function(){return\"Error in batchNorm4D: offset must be rank 4 or rank 1 but got rank \"+s.rank+\".\"})),nc(u,c,l,s,i,a)}var lc=An({batchNormalization4d_:function(t,e,n,r,o,a){return void 0===r&&(r=.001),Qu(),cc(t,e,n,a,o,r)}}),hc=An({batchNorm4d_:cc});var fc=An({broadcastTo_:function(t,e){var n=gn(t,\"broadcastTo\",\"x\"),r=n.shape;if(e.some((function(t){return!(t>0)||t%1!=0})))throw new Error(\"broadcastTo(): Invalid broadcast shape [\"+e+\"].\");if(e.length<n.rank)throw new Error(\"broadcastTo(): shape.length=\"+e.length+\" < input.rank=\"+n.rank+\".\");if(e.length>n.rank){for(var o=n.shape.slice();o.length<e.length;)o.unshift(1);n=n.reshape(o)}for(var a=n.shape,i=Array.from(e),s=e.length-1;s>=0;s--)if(a[s]===e[s])i[s]=1;else if(1!==n.shape[s])throw new Error(\"broadcastTo(): [\"+r+\"] cannot be broadcast to [\"+e+\"].\");var u=i.map((function(t,e){return t>1?e:-1})).filter((function(t){return t>=0}));if(0===u.length)return n.clone();var c={x:n},l={shape:e,inputShape:a};return Lt.runKernelFunc((function(t){return t.tile(n,i)}),c,(function(t){return{x:function(){return t.sum(u,!0)}}}),Sr,l)}});var dc=An({clone_:function(t){var e=gn(t,\"x\",\"clone\",null);return Lt.runKernelFunc((function(){return Lt.makeTensorFromDataId(e.dataId,e.shape,e.dtype)}),{x:e},null,Tr)}});var pc=An({logicalAnd_:function(t,e){var n=gn(t,\"a\",\"logicalAnd\",\"bool\"),r=gn(e,\"b\",\"logicalAnd\",\"bool\");return Pr(n.shape,r.shape),Lt.runKernelFunc((function(t){return t.logicalAnd(n,r)}),{a:n,b:r},null,\"LogicalAnd\")}}),vc=An({logicalNot_:function(t){var e=gn(t,\"x\",\"logicalNot\",\"bool\");return Lt.runKernelFunc((function(t){return t.logicalNot(e)}),{$x:e})}}),gc=An({logicalOr_:function(t,e){var n=gn(t,\"a\",\"logicalOr\",\"bool\"),r=gn(e,\"b\",\"logicalOr\",\"bool\");return Pr(n.shape,r.shape),Lt.runKernelFunc((function(t){return t.logicalOr(n,r)}),{$a:n,$b:r})}}),mc=An({logicalXor_:function(t,e){var n=gn(t,\"a\",\"logicalXor\",\"bool\"),r=gn(e,\"b\",\"logicalXor\",\"bool\");return Pr(n.shape,r.shape),gc(t,e).logicalAnd(pc(t,e).logicalNot())}}),yc=An({where_:function(t,e,n){var r=gn(e,\"a\",\"where\"),o=gn(n,\"b\",\"where\"),a=gn(t,\"condition\",\"where\",\"bool\");return E(r.shape,o.shape,\"Error in where: \"),1===a.rank?C(a.shape[0]===r.shape[0],(function(){return\"The first dimension of `a` must match the size of `condition`.\"})):E(a.shape,o.shape,\"Error in where: \"),Lt.runKernelFunc((function(t,e){var n=t.select(a,r,o);return e([a]),n}),{$condition:a,$a:r,$b:o},(function(t,e){var n=e[0];return{$condition:function(){return Xn(n).toFloat()},$a:function(){return t.mul(n.cast(t.dtype))},$b:function(){return t.mul(n.logicalNot().cast(t.dtype))}}}))}}),xc=function(t){return n(this,void 0,void 0,(function(){var e,n,o;return r(this,(function(r){switch(r.label){case 0:return[4,(e=gn(t,\"condition\",\"whereAsync\",\"bool\")).data()];case 1:return n=r.sent(),o=Ga(e.shape,n),t!==e&&e.dispose(),[2,o]}}))}))};var bc=An({divNoNan_:function(t,e){var n,r=gn(t,\"a\",\"div\"),o=gn(e,\"b\",\"div\");r=(n=Nt(r,o))[0],o=n[1];var a=Bo(r,o),i=Xn(a),s=o.equal(i);return yc(s,i,a)}});var wc=An({tile_:function(t,e){var n=gn(t,\"x\",\"tile\",null);C(n.rank===e.length,(function(){return\"Error in transpose: rank of input \"+n.rank+\" must match length of reps \"+e+\".\"}));var r=[n],o={x:n},a={reps:e};return Lt.runKernelFunc((function(t,r){var o=t.tile(n,e);return r([n]),o}),o,null,Dr,a,r)}});var Cc=An({eye_:function(t,e,n,r){void 0===r&&(r=\"float32\"),null==e&&(e=t);for(var o=er([t,e],r),a=t<=e?t:e,i=0;i<a;++i)o.set(1,i,i);var s=o.toTensor().as2D(t,e);if(null==n)return s;if(1===n.length)return wc(sr(s,0),[n[0],1,1]);if(2===n.length)return wc(sr(sr(s,0),0),[n[0],n[1],1,1]);if(3===n.length)return wc(sr(sr(sr(s,0),0),0),[n[0],n[1],n[2],1,1]);throw new Error(\"eye() currently supports only 1D and 2D batchShapes, but received \"+n.length+\"D.\")}});var Ec=An({multinomial_:function(t,e,n,r){void 0===r&&(r=!1);var o=gn(t,\"logits\",\"multinomial\"),a=o.size,i=o.rank;if(a<2)throw new Error(\"Error in multinomial: you need at least 2 outcomes, but got \"+a+\".\");if(i>2)throw new Error(\"Rank of probabilities must be 1 or 2, but is \"+i);n=n||Math.random();var s=1===i?o.as2D(1,-1):o,u=Lt.runKernelFunc((function(t){return t.multinomial(s,r,e,n)}),{logits2D:s});return 1===i?u.as1D():u}});var Rc=An({oneHot_:function(t,e,n,r){if(void 0===n&&(n=1),void 0===r&&(r=0),e<2)throw new Error(\"Error in oneHot: depth must be >=2, but it is \"+e);var o=gn(t,\"indices\",\"oneHot\",\"int32\"),a=o.shape.concat([e]),i={indices:o=o.flatten()},s={depth:e,onValue:n,offValue:r};return Lt.runKernelFunc((function(t,a){return a([o]),t.oneHot(o,e,n,r)}),i,null,Ar,s).reshape(a)}});var Ic=An({pad_:function(t,e,n){void 0===n&&(n=0);var r=gn(t,\"x\",\"pad\");if(0===r.rank)throw new Error(\"pad(scalar) is not defined. Pass non-scalar to pad\");var o={paddings:e,constantValue:n},a={x:r};return Lt.runKernelFunc((function(t,o){return o([r]),t.pad(r,e,n)}),a,null,Nr,o)}});var kc=An({pad1d_:function(t,e,n){return void 0===n&&(n=0),C(2===e.length,(function(){return\"Invalid number of paddings. Must be length of 2.\"})),Ic(t,[e],n)}});var Sc=An({pad2d_:function(t,e,n){return void 0===n&&(n=0),C(2===e.length&&2===e[0].length&&2===e[1].length,(function(){return\"Invalid number of paddings. Must be length of 2 each.\"})),Ic(t,e,n)}});var Ac=An({pad3d_:function(t,e,n){return void 0===n&&(n=0),C(3===e.length&&2===e[0].length&&2===e[1].length&&2===e[2].length,(function(){return\"Invalid number of paddings. Must be length of 2 each.\"})),Ic(t,e,n)}});var Tc=An({pad4d_:function(t,e,n){return void 0===n&&(n=0),C(4===e.length&&2===e[0].length&&2===e[1].length&&2===e[2].length&&2===e[3].length,(function(){return\"Invalid number of paddings. Must be length of 2 each.\"})),Ic(t,e,n)}});var Dc=An({rand_:function(t,e,n){var r=k(t),o=null;if(null==n||\"float32\"===n)o=new Float32Array(r);else if(\"int32\"===n)o=new Int32Array(r);else{if(\"bool\"!==n)throw new Error(\"Unknown data type \"+n);o=new Uint8Array(r)}for(var a=0;a<r;a++)o[a]=e();return Lt.makeTensor(o,t,n)}}),Nc=.001,Fc=.1;function _c(){return 32===Lt.backend.floatPrecision()?Nc:Fc}function Oc(t,e,n){var r=!0;if((V(t)||V(e))&&(r=!1),V(t)&&V(e)&&(r=!0),r){var o=t.constructor.name,a=e.constructor.name;if(o!==a)throw new Error(\"Arrays are of different type. Actual: \"+o+\". Expected: \"+a)}if(Array.isArray(t)&&Array.isArray(e)){var i=pn(t),s=pn(e);if(!S(i,s))throw new Error(\"Arrays have different shapes. Actual: [\"+i+\"]. Expected: [\"+s+\"]\")}var u=V(t)?t:I(t),c=V(e)?e:I(e);if(u.length!==c.length)throw new Error(\"Arrays have different lengths actual: \"+u.length+\" vs expected: \"+c.length+\".\\nActual:   \"+u+\".\\nExpected: \"+c+\".\");for(var l=0;l<c.length;++l){var h=u[l],f=c[l];if(!n(h,f))throw new Error(\"Arrays differ: actual[\"+l+\"] = \"+h+\", expected[\"+l+\"] = \"+f+\".\\nActual:   \"+u+\".\\nExpected: \"+c+\".\")}}function Mc(t,e,n){return!isFinite(t)&&!isFinite(e)||!(isNaN(t)||isNaN(e)||Math.abs(t-e)>n)}var Bc=Object.freeze({TEST_EPSILON_FLOAT16:Fc,expectArraysClose:function(t,e,n){return null==n&&(n=_c()),Oc(t,e,(function(t,e){return Mc(t,e,n)}))},testEpsilon:_c,expectPromiseToFail:function(t,e){t().then((function(){return e.fail()}),(function(){return e()}))},expectArraysEqual:function(t,e){var n=\"string\"==typeof e||\"number\"==typeof e||\"boolean\"==typeof e?[e]:e;return H(t)||H(t[0])||H(e)||H(e[0])?Oc(t,n,(function(t,e){return t==e})):Oc(t,e,(function(t,e){return Mc(t,e,0)}))},expectNumbersClose:function(t,e,n){if(null==n&&(n=_c()),!Mc(t,e,n))throw new Error(\"Numbers differ: actual === \"+t+\", expected === \"+e)},expectValuesInRange:function(t,e,n){for(var r=0;r<t.length;r++)if(t[r]<e||t[r]>n)throw new Error(\"Value out of range:\"+t[r]+\" low: \"+e+\", high: \"+n)},expectArrayBuffersEqual:function(t,e){expect(new Float32Array(t)).toEqual(new Float32Array(e))}}),Pc=function(){function t(t,e,n,r,o){this.mean=t,this.stdDev=e,this.dtype=n,this.nextVal=NaN,this.truncated=r,this.truncated&&(this.upper=this.mean+2*this.stdDev,this.lower=this.mean-2*this.stdDev);var a=o||Math.random();this.random=Yu(a.toString())}return t.prototype.nextValue=function(){if(!isNaN(this.nextVal)){var t=this.nextVal;return this.nextVal=NaN,t}for(var e,n,r=!1;!r;){var o=void 0,a=void 0,i=void 0;do{i=(o=2*this.random()-1)*o+(a=2*this.random()-1)*a}while(i>=1||0===i);var s=Math.sqrt(-2*Math.log(i)/i);e=this.mean+this.stdDev*o*s,n=this.mean+this.stdDev*a*s,this.truncated&&!this.isValidTruncated(e)||(r=!0)}return this.truncated&&!this.isValidTruncated(n)||(this.nextVal=this.convertValue(n)),this.convertValue(e)},t.prototype.convertValue=function(t){return null==this.dtype||\"float32\"===this.dtype?t:Math.round(t)},t.prototype.isValidTruncated=function(t){return t<=this.upper&&t>=this.lower},t}(),Lc=function(){function t(t,e,n,r){this.alpha=t,this.beta=1/e,this.dtype=n;var o=r||Math.random();this.randu=Yu(o.toString()),this.randn=new Pc(0,1,n,!1,this.randu()),this.d=t<1?t+2/3:t-1/3,this.c=1/Math.sqrt(9*this.d)}return t.prototype.nextValue=function(){for(var t,e,n,r,o,a;;){do{r=this.randn.nextValue(),a=1+this.c*r}while(a<=0);if(a*=a*a,e=1-.331*(t=r*r)*t,n=.5*t+this.d*(1-a+Math.log(a)),(o=this.randu())<e||Math.log(o)<n)break}return a=1/this.beta*this.d*a,this.alpha<1&&(a*=Math.pow(this.randu(),1/this.alpha)),this.convertValue(a)},t.prototype.convertValue=function(t){return\"float32\"===this.dtype?t:Math.round(t)},t}(),Wc=function(){function t(t,e,n,r){var o=this;if(void 0===t&&(t=0),void 0===e&&(e=1),this.canReturnFloat=function(){return null==o.dtype||\"float32\"===o.dtype},this.min=t,this.range=e-t,this.dtype=n,null==r&&(r=Math.random()),\"number\"==typeof r&&(r=r.toString()),!this.canReturnFloat()&&this.range<=1)throw new Error(\"The difference between \"+t+\" - \"+e+\" <= 1 and dtype is not float\");this.random=Yu(r)}return t.prototype.convertValue=function(t){return this.canReturnFloat()?t:Math.round(t)},t.prototype.nextValue=function(){return this.convertValue(this.min+this.range*this.random())},t}();var Uc=An({randomGamma_:function(t,e,n,r,o){if(void 0===n&&(n=1),void 0===r&&(r=\"float32\"),null==n&&(n=1),null==r&&(r=\"float32\"),\"float32\"!==r&&\"int32\"!==r)throw new Error(\"Unsupported data type \"+r);for(var a=new Lc(e,n,r,o),i=er(t,r),s=0;s<i.values.length;s++)i.values[s]=a.nextValue();return i.toTensor()}});var Vc=An({randomNormal_:function(t,e,n,r,o){if(void 0===e&&(e=0),void 0===n&&(n=1),null!=r&&\"bool\"===r)throw new Error(\"Unsupported data type \"+r);for(var a=new Pc(e,n,r,!1,o),i=er(t,r),s=0;s<i.values.length;s++)i.values[s]=a.nextValue();return i.toTensor()}});var zc=An({randomUniform_:function(t,e,n,r,o){void 0===e&&(e=0),void 0===n&&(n=1),void 0===r&&(r=\"float32\");for(var a=er(t,r),i=new Wc(e,n,null,o),s=0;s<a.values.length;s++)a.values[s]=i.nextValue();return a.toTensor()}});var Gc=An({square_:function(t){var e=gn(t,\"x\",\"square\"),n=[e];return Lt.runKernelFunc((function(t,n){return n([e]),t.square(e)}),{x:e},null,\"Square\",{},n,[])}});var Hc=An({squaredDifference_:function(t,e){var n,r=gn(t,\"a\",\"squaredDifference\"),o=gn(e,\"b\",\"squaredDifference\");n=Nt(r,o),r=n[0],o=n[1],Pr(r.shape,o.shape);var a={a:r,b:o},i=[r,o];return Lt.runKernelFunc((function(t,e){var n=t.squaredDifference(r,o);return e([r,o]),n}),a,(function(t,e){var n=e[0],r=e[1],o=On(2);return{a:function(){return t.mul(n.sub(r).mul(o))},b:function(){return t.mul(r.sub(n).mul(o))}}}),Er,{},i,[])}});var qc=An({truncatedNormal_:function(t,e,n,r,o){if(void 0===e&&(e=0),void 0===n&&(n=1),null!=r&&\"bool\"===r)throw new Error(\"Unsupported data type $ { dtype }\");for(var a=new Pc(e,n,r,!0,o),i=er(t,r),s=0;s<i.values.length;s++)i.values[s]=a.nextValue();return i.toTensor()}});var Kc=An({equal_:function(t,e){var n,r=gn(t,\"a\",\"equal\"),o=gn(e,\"b\",\"equal\");return n=Nt(r,o),r=n[0],o=n[1],Pr(r.shape,o.shape),Lt.runKernelFunc((function(t){return t.equal(r,o)}),{$a:r,$b:o})}}),jc=An({equalStrict_:function(t,e){var n=gn(t,\"a\",\"equalStrict\"),r=gn(e,\"b\",\"equalStrict\");return E(n.shape,r.shape,\"Error in equalStrict: \"),n.equal(r)}}),Xc=An({greater_:function(t,e){var n,r=gn(t,\"a\",\"greater\"),o=gn(e,\"b\",\"greater\");return n=Nt(r,o),r=n[0],o=n[1],Pr(r.shape,o.shape),Lt.runKernelFunc((function(t){return t.greater(r,o)}),{a:r,b:o},null,\"Greater\")}}),Yc=An({greaterEqual_:function(t,e){var n,r=gn(t,\"a\",\"greaterEqual\"),o=gn(e,\"b\",\"greaterEqual\");return n=Nt(r,o),r=n[0],o=n[1],Pr(r.shape,o.shape),Lt.runKernelFunc((function(t,e){var n=t.greaterEqual(r,o);return e([r,o]),n}),{a:r,b:o},(function(t,e){var n=e[0],r=e[1];return{a:function(){return Xn(n)},b:function(){return Xn(r)}}}),\"GreaterEqual\")}}),$c=An({greaterEqualStrict_:function(t,e){var n=gn(t,\"a\",\"greaterEqualStrict\"),r=gn(e,\"b\",\"greaterEqualStrict\");return E(n.shape,r.shape,\"Error in greaterEqualStrict: \"),n.greaterEqual(r)}}),Qc=An({greaterStrict_:function(t,e){var n=gn(t,\"a\",\"greaterStrict\"),r=gn(e,\"b\",\"greaterStrict\");return E(n.shape,r.shape,\"Error in greaterStrict: \"),n.greater(r)}}),Jc=An({less_:function(t,e){var n,r=gn(t,\"a\",\"less\"),o=gn(e,\"b\",\"less\");return n=Nt(r,o),r=n[0],o=n[1],Pr(r.shape,o.shape),Lt.runKernelFunc((function(t){return t.less(r,o)}),{a:r,b:o},null,\"Less\")}}),Zc=An({lessEqual_:function(t,e){var n,r=gn(t,\"a\",\"lessEqual\"),o=gn(e,\"b\",\"lessEqual\");return n=Nt(r,o),r=n[0],o=n[1],Pr(r.shape,o.shape),Lt.runKernelFunc((function(t,e){var n=t.lessEqual(r,o);return e([r,o]),n}),{a:r,b:o},null,\"LessEqual\")}}),tl=An({lessEqualStrict_:function(t,e){var n=gn(t,\"a\",\"lessEqualStrict\"),r=gn(e,\"b\",\"lessEqualStrict\");return E(n.shape,r.shape,\"Error in lessEqualStrict: \"),n.lessEqual(r)}}),el=An({lessStrict_:function(t,e){var n=gn(t,\"a\",\"lessStrict\"),r=gn(e,\"b\",\"lessStrict\");return E(n.shape,r.shape,\"Error in lessStrict: \"),n.less(r)}}),nl=An({notEqual_:function(t,e){var n,r=gn(t,\"a\",\"notEqual\"),o=gn(e,\"b\",\"notEqual\");return n=Nt(r,o),r=n[0],o=n[1],Pr(r.shape,o.shape),Lt.runKernelFunc((function(t){return t.notEqual(r,o)}),{a:r,b:o},null,\"NotEqual\")}}),rl=An({notEqualStrict_:function(t,e){var n=gn(t,\"a\",\"notEqualStrict\"),r=gn(e,\"b\",\"notEqualStrict\");return E(n.shape,r.shape,\"Error in notEqualStrict: \"),n.notEqual(r)}});function ol(t,e){for(var n=[],r=t;r<e;++r)n.push(r);return n}function al(t){for(var e=[],n=0;n<t.length;++n)for(var r=0;r<t[n].length;++r)e.push(t[n][r]);return e}var il=An({gather_:function(t,e,n){void 0===n&&(n=0);var r=gn(t,\"x\",\"gather\"),o=gn(e,\"indices\",\"gather\",\"int32\");n=O(n,r.shape)[0];var a=function(t,e,n){for(var r=t.shape[n],o=[],a=1,i=1,s=0;s<n;s++)o.push(t.shape[s]),a*=t.shape[s];for(s=0;s<e.rank;s++)o.push(e.shape[s]);for(s=n+1;s<t.rank;s++)o.push(t.shape[s]),i*=t.shape[s];return{batchSize:a,sliceSize:i,dimSize:r,outputShape:o}}(r,o,n);return Lt.runKernelFunc((function(t,e){var a=t.gather(r,o.flatten(),n);return e([o]),a}),{x:r,indices:o},(function(t,e){var o=e[0];return{x:function(){var e=r.shape,a=o.size,i=e.slice(0,n),s=i.length,u=e.slice(n,e.length).slice(1),c=u.length,l=ol(0,s),h=ol(s+1,s+1+c),f=al([i,[a],u]),d=t.reshape(f),p=o.reshape([a]),v=al([[s],l,h]),g=d.transpose(v),m=sl(g,p,r.shape[n]),y=Rn(v);return m=m.transpose(y)},indices:function(){return o}}}),\"Gather\",{axis:n}).reshape(a.outputShape)}}),sl=An({unsortedSegmentSum_:function(t,e,n){var r=gn(t,\"x\",\"unsortedSegmentSum\"),o=gn(e,\"segmentIds\",\"unsortedSegmentSum\",\"int32\");return C(A(n),(function(){return\"numSegments must be of dtype int\"})),Lt.runKernelFunc((function(t,e){var a=t.unsortedSegmentSum(r,o,n);return e([o]),a}),{$x:r},(function(t,e){var n=e[0];return{$x:function(){return function(t,e){for(var n=Eo(e,Xn(e)),r=il(t,n),o=Yc(e,On(0,\"int32\")),a=r.rank-o.rank,i=0;i<a;++i)o=sr(o,i+1);o=pc(o,zn(r.shape,\"bool\"));var s=Xn(r);return yc(o,r,s)}(t,n)}}}))}});var ul=function(t,e,o){return n(this,void 0,void 0,(function(){var n,a,i,s,u,c,l,h,f,d,p,v,g;return r(this,(function(r){switch(r.label){case 0:for(n=gn(t,\"tensor\",\"boolMask\"),a=gn(e,\"mask\",\"boolMask\",\"bool\"),i=null==o?0:o,s=a.rank,u=n.shape,C(s>0,(function(){return\"mask cannot be scalar\"})),E(u.slice(i,i+s),a.shape,\"mask's shape must match the first K dimensions of tensor's shape,\"),c=1,l=i;l<i+s;l++)c*=u[l];return h=u.slice(0,i).concat([c],u.slice(i+s)),f=n.reshape(h),d=a.reshape([-1]),[4,xc(d)];case 1:return p=r.sent(),v=p.squeeze([1]),g=il(f,v,i),t!==n&&n.dispose(),e!==a&&a.dispose(),v.dispose(),f.dispose(),d.dispose(),p.dispose(),[2,g]}}))}))};function cl(t,e,n,r,o,a,i){void 0===a&&(a=\"NHWC\"),C(t.length===e.rank,(function(){return\"Length of inShape (\"+t.length+\") and rank of dy (\"+e.rank+\") must match\"}));var s=t,u=e,c=!1;3===e.rank&&(c=!0,u=e.as4D(1,e.shape[0],e.shape[1],e.shape[2]),s=[1,t[0],t[1],t[2]]),C(4===s.length,(function(){return\"Error in conv2dDerInput: inShape must be length 4, but got length \"+s.length+\".\"})),C(4===u.rank,(function(){return\"Error in conv2dDerInput: dy must be rank 4, but got rank \"+u.rank})),C(4===n.rank,(function(){return\"Error in conv2dDerInput: filter must be rank 4, but got rank \"+n.rank}));var l=\"NHWC\"===a?s[3]:s[1],h=\"NHWC\"===a?u.shape[3]:u.shape[1];C(l===n.shape[2],(function(){return\"Error in conv2dDerInput: depth of input (\"+l+\") must match input depth for filter \"+n.shape[2]+\".\"})),C(h===n.shape[3],(function(){return\"Error in conv2dDerInput: depth of output (\"+h+\") must match output depth for filter \"+n.shape[3]+\".\"})),null!=i&&C(A(o),(function(){return\"Error in conv2dDerInput: pad must be an integer when using, dimRoundingMode \"+i+\" but got pad \"+o+\".\"}));var f=Ea(a),d=pa(s,n.shape,r,1,o,i,!1,f),p=Lt.runKernelFunc((function(t,e){var r=t.conv2dDerInput(u,n,d);return e([n,u]),r}),{dy4D:u,filter:n},(function(t,e){var n=e[0],s=e[1];return{dy4D:function(){return dl(t,n,r,o,a,1,i)},filter:function(){return vl(t,s,n.shape,r,o,a,i)}}}));return c?p.as3D(p.shape[1],p.shape[2],p.shape[3]):p}function ll(t){var e=function(t){return\"number\"==typeof t?[t,t,t]:2===t.length?[t[0],t[1],1]:t}(t),n=e[0],r=e[1],o=e[2];return 1===n&&1===r&&1===o}function hl(t,e,n,r,o){C(t.length===e.rank,(function(){return\"Length of inShape (\"+t.length+\") and rank of dy (\"+e.rank+\") must match\"}));var a=t,i=e,s=!1;4===e.rank&&(s=!0,i=e.as5D(1,e.shape[0],e.shape[1],e.shape[2],e.shape[3]),a=[1,t[0],t[1],t[2],t[3]]);var u=a[4],c=i.shape[4];C(5===a.length,(function(){return\"Error in conv3dDerInput: inShape must be length 5, but got length \"+a.length+\".\"})),C(5===i.rank,(function(){return\"Error in conv3dDerInput: dy must be rank 5, but got rank \"+i.rank})),C(5===n.rank,(function(){return\"Error in conv3dDerInput: filter must be rank 5, but got rank \"+n.rank})),C(u===n.shape[3],(function(){return\"Error in conv3dDerInput: depth of input (\"+u+\") must match input depth for filter \"+n.shape[3]+\".\"})),C(c===n.shape[4],(function(){return\"Error in conv3dDerInput: depth of output (\"+c+\") must match output depth for filter \"+n.shape[4]+\".\"}));var l=va(a,n.shape,r,1,o),h=Lt.runKernelFunc((function(t){return t.conv3dDerInput(i,n,l)}),{dy5D:i});return s?h.as4D(h.shape[1],h.shape[2],h.shape[3],h.shape[4]):h}var fl=An({conv1d_:function(t,e,n,r,o,a,i){void 0===o&&(o=\"NWC\"),void 0===a&&(a=1);var s=gn(t,\"x\",\"conv1d\"),u=gn(e,\"filter\",\"conv1d\"),c=s,l=!1;2===s.rank&&(l=!0,c=s.as3D(1,s.shape[0],s.shape[1])),C(3===c.rank,(function(){return\"Error in conv1d: input must be rank 3, but got rank \"+c.rank+\".\"})),C(3===u.rank,(function(){return\"Error in conv1d: filter must be rank 3, but got rank \"+u.rank+\".\"})),null!=i&&C(A(r),(function(){return\"Error in conv1d: pad must be an integer when using, dimRoundingMode \"+i+\" but got pad \"+r+\".\"})),C(c.shape[2]===u.shape[1],(function(){return\"Error in conv1d: depth of input (\"+c.shape[2]+\") must match input depth for filter \"+u.shape[1]+\".\"})),C(Ca(n,a),(function(){return\"Error in conv1D: Either stride or dilation must be 1. Got stride \"+n+\" and dilation '\"+a+\"'\"})),C(\"NWC\"===o,(function(){return\"Error in conv1d: got dataFormat of \"+o+\" but only NWC is currently supported.\"}));var h=u.as4D(1,u.shape[0],u.shape[1],u.shape[2]),f=c.as4D(c.shape[0],1,c.shape[1],c.shape[2]),d=dl(f,h,[1,n],r,\"NHWC\",[1,a],i);return l?d.as2D(d.shape[2],d.shape[3]):d.as3D(d.shape[0],d.shape[2],d.shape[3])}}),dl=An({conv2d_:function(t,e,n,r,o,a,i){void 0===o&&(o=\"NHWC\"),void 0===a&&(a=[1,1]);var s=gn(t,\"x\",\"conv2d\"),u=gn(e,\"filter\",\"conv2d\"),c=s,l=!1;3===s.rank&&(l=!0,c=s.as4D(1,s.shape[0],s.shape[1],s.shape[2])),C(4===c.rank,(function(){return\"Error in conv2d: input must be rank 4, but got rank \"+c.rank+\".\"})),C(4===u.rank,(function(){return\"Error in conv2d: filter must be rank 4, but got rank \"+u.rank+\".\"})),null!=i&&C(A(r),(function(){return\"Error in conv2d: pad must be an integer when using, dimRoundingMode \"+i+\" but got pad \"+r+\".\"}));var h=\"NHWC\"===o?c.shape[3]:c.shape[1];C(h===u.shape[2],(function(){return\"Error in conv2d: depth of input (\"+h+\") must match input depth for filter \"+u.shape[2]+\".\"})),C(Ca(n,a),(function(){return\"Error in conv2D: Either strides or dilations must be 1. Got strides \"+n+\" and dilations '\"+a+\"'\"}));var f=Ea(o),d=pa(c.shape,u.shape,n,a,r,i,!1,f),p=[u,c],v=Lt.runKernelFunc((function(t,e){var n=t.conv2d(c,u,d);return e([u,c]),n}),{x:c,filter:u},(function(t,e){var i=e,s=i[0],u=i[1];return C(wa(a),(function(){return\"Error in gradient of conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '\"+a+\"'\"})),{x:function(){return gl(u.shape,t,s,n,r,o)},filter:function(){return vl(u,t,s.shape,n,r,o)}}}),\"Conv2D\",d,p);return l?v.as3D(v.shape[1],v.shape[2],v.shape[3]):v}}),pl=An({conv3d_:function(t,e,n,r,o,a){void 0===o&&(o=\"NDHWC\"),void 0===a&&(a=[1,1,1]);var i=gn(t,\"x\",\"conv3d\"),s=gn(e,\"filter\",\"conv3d\"),u=i,c=!1;4===i.rank&&(c=!0,u=i.as5D(1,i.shape[0],i.shape[1],i.shape[2],i.shape[3])),C(5===u.rank,(function(){return\"Error in conv3d: input must be rank 5, but got rank \"+u.rank+\".\"})),C(5===s.rank,(function(){return\"Error in conv3d: filter must be rank 5, but got rank \"+s.rank+\".\"})),C(u.shape[4]===s.shape[3],(function(){return\"Error in conv3d: depth of input (\"+u.shape[4]+\") must match input depth for filter \"+s.shape[3]+\".\"})),C(function(t,e){return ll(t)||ll(e)}(n,a),(function(){return\"Error in conv3D: Either strides or dilations must be 1. Got strides \"+n+\" and dilations '\"+a+\"'\"})),C(\"NDHWC\"===o,(function(){return\"Error in conv3d: got dataFormat of \"+o+\" but only NDHWC is currently supported.\"}));var l=va(u.shape,s.shape,n,a,r),h=Lt.runKernelFunc((function(t,e){var n=t.conv3d(u,s,l);return e([u,s]),n}),{x:u,$filter:s},(function(t,e){C(ll(a),(function(){return\"Error in gradient of conv3D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '\"+a+\"'\"}));var o=e[0],i=e[1];return{x:function(){return hl(o.shape,t,i,n,r)},$filter:function(){return function(t,e,n,r,o){var a=t;4===t.rank&&(a=t.as5D(1,t.shape[0],t.shape[1],t.shape[2],t.shape[3]));var i=e;4===i.rank&&(i=e.as5D(1,e.shape[0],e.shape[1],e.shape[2],e.shape[3]));C(5===a.rank,(function(){return\"Error in conv3dDerFilter: input must be rank 5, but got shape \"+a.shape+\".\"})),C(5===i.rank,(function(){return\"Error in conv3dDerFilter: dy must be rank 5, but got shape \"+i.shape+\".\"})),C(5===n.length,(function(){return\"Error in conv3dDerFilter: filterShape must be length 5, but got \"+n+\".\"})),C(a.shape[4]===n[3],(function(){return\"Error in conv3dDerFilter: depth of input \"+a.shape[4]+\") must match input depth in filter (\"+n[3]+\".\"})),C(i.shape[4]===n[4],(function(){return\"Error in conv3dDerFilter: depth of dy (\"+i.shape[4]+\") must match output depth for filter (\"+n[4]+\").\"}));var s=va(a.shape,n,r,1,o);return Lt.runKernelFunc((function(t){return t.conv3dDerFilter(a,i,s)}),{x5D:a,dy5D:i})}(o,t,i.shape,n,r)}}}));return c?h.as4D(h.shape[1],h.shape[2],h.shape[3],h.shape[4]):h}}),vl=An({conv2dDerFilter_:function(t,e,n,r,o,a,i){void 0===a&&(a=\"NHWC\");var s=t;3===t.rank&&(s=t.as4D(1,t.shape[0],t.shape[1],t.shape[2]));var u=e;3===u.rank&&(u=e.as4D(1,e.shape[0],e.shape[1],e.shape[2])),C(4===s.rank,(function(){return\"Error in conv2dDerFilter: input must be rank 4, but got shape \"+s.shape+\".\"})),C(4===u.rank,(function(){return\"Error in conv2dDerFilter: dy must be rank 4, but got shape \"+u.shape+\".\"})),C(4===n.length,(function(){return\"Error in conv2dDerFilter: filterShape must be length 4, but got \"+n+\".\"}));var c=\"NHWC\"===a?s.shape[3]:s.shape[1],l=\"NHWC\"===a?u.shape[3]:u.shape[1];C(c===n[2],(function(){return\"Error in conv2dDerFilter: depth of input \"+c+\") must match input depth in filter (\"+n[2]+\".\"})),C(l===n[3],(function(){return\"Error in conv2dDerFilter: depth of dy (\"+l+\") must match output depth for filter (\"+n[3]+\").\"})),null!=i&&C(A(o),(function(){return\"Error in conv2dDerFilter: pad must be an integer when using, dimRoundingMode \"+i+\" but got pad \"+o+\".\"}));var h=Ea(a),f=pa(s.shape,n,r,1,o,i,!1,h);return Lt.runKernelFunc((function(t){return t.conv2dDerFilter(s,u,f)}),{x4D:s,dy4D:u})}}),gl=An({conv2dDerInput_:cl}),ml=An({depthwiseConv2d_:function(t,e,n,r,o,a,i){void 0===o&&(o=\"NHWC\"),void 0===a&&(a=[1,1]);var s=gn(t,\"x\",\"depthwiseConv2d\"),u=gn(e,\"filter\",\"depthwiseConv2d\"),c=s,l=!1;3===s.rank&&(l=!0,c=s.as4D(1,s.shape[0],s.shape[1],s.shape[2])),C(4===c.rank,(function(){return\"Error in depthwiseConv2d: input must be rank 4, but got rank \"+c.rank+\".\"})),C(4===u.rank,(function(){return\"Error in depthwiseConv2d: filter must be rank 4, but got rank \"+u.rank+\".\"})),C(c.shape[3]===u.shape[2],(function(){return\"Error in depthwiseConv2d: number of input channels (\"+c.shape[3]+\") must match the inChannels dimension in filter \"+u.shape[2]+\".\"})),null==a&&(a=[1,1]),C(Ca(n,a),(function(){return\"Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides \"+n+\" and dilations '\"+a+\"'\"})),null!=i&&C(A(r),(function(){return\"Error in depthwiseConv2d: pad must be an integer when using, dimRoundingMode \"+i+\" but got pad \"+r+\".\"}));var h=pa(c.shape,u.shape,n,a,r,i,!0),f=[c,u],d=Lt.runKernelFunc((function(t,e){var n=t.depthwiseConv2D(c,u,h);return e([c,u]),n}),{x:c,filter:u},(function(t,e){C(wa(a),(function(){return\"Error in gradient of depthwiseConv2d: dilation rates greater than 1 are not yet supported. Got dilations '\"+a+\"'\"}));var n=e[0],r=e[1];return{x:function(){return yl(n.shape,t,r,h)},filter:function(){return xl(n,t,r.shape,h)}}}),\"DepthwiseConv2dNative\",h,f);return l?d.as3D(d.shape[1],d.shape[2],d.shape[3]):d}}),yl=An({depthwiseConv2dDerInput_:function(t,e,n,r){var o=e,a=!1;3===e.rank&&(a=!0,o=e.as4D(1,e.shape[0],e.shape[1],e.shape[2]));var i=Lt.runKernelFunc((function(t){return t.depthwiseConv2DDerInput(o,n,r)}),{dy4D:o});return a?i.as3D(i.shape[1],i.shape[2],i.shape[3]):i}}),xl=An({depthwiseConv2dDerFilter_:function(t,e,n,r){var o=t;3===t.rank&&(o=t.as4D(1,t.shape[0],t.shape[1],t.shape[2]));var a=e;return 3===a.rank&&(a=e.as4D(1,e.shape[0],e.shape[1],e.shape[2])),Lt.runKernelFunc((function(t){return t.depthwiseConv2DDerFilter(o,a,r)}),{x4D:o,dy4D:a})}}),bl=An({separableConv2d_:function(t,e,n,r,o,a,i){void 0===a&&(a=[1,1]),void 0===i&&(i=\"NHWC\");var s=gn(t,\"x\",\"separableConv2d\"),u=gn(e,\"depthwiseFilter\",\"separableConv2d\"),c=gn(n,\"pointwiseFilter\",\"separableConv2d\"),l=s,h=!1;if(3===s.rank&&(h=!0,l=s.as4D(1,s.shape[0],s.shape[1],s.shape[2])),\"NCHW\"===i)throw new Error(\"separableConv2d currently does not support dataFormat NCHW; only NHWC is supported\");C(4===l.rank,(function(){return\"Error in separableConv2d: input must be rank 4, but got rank \"+l.rank+\".\"})),C(4===u.rank,(function(){return\"Error in separableConv2d: depthwise filter must be rank 4, but got rank \"+u.rank+\".\"})),C(4===c.rank,(function(){return\"Error in separableConv2d: pointwise filter must be rank 4, but got rank \"+u.rank+\".\"})),C(1===c.shape[0],(function(){return\"Error in separableConv2d: the first dimension of pointwise filter  must be 1, but got \"+c.shape[0]+\".\"})),C(1===c.shape[1],(function(){return\"Error in separableConv2d: the second dimension of pointwise filter must be 1, but got \"+c.shape[1]+\".\"}));var f=u.shape[2],d=u.shape[3];C(c.shape[2]===f*d,(function(){return\"Error in separableConv2d: the third dimension of pointwise filter must be \"+f*d+\", but got \"+c.shape[2]+\".\"}));var p=ml(l,u,r,o,i,a),v=dl(p,c,1,\"valid\",i);return h?v.as3D(v.shape[1],v.shape[2],v.shape[3]):v}}),wl=An({conv2dTranspose_:function(t,e,n,r,o,a){return cl(n,gn(t,\"x\",\"conv2dTranspose\"),gn(e,\"filter\",\"conv2dTranspose\"),r,o,\"NHWC\",a)}}),Cl=An({conv3dTranspose_:function(t,e,n,r,o){return hl(n,gn(t,\"x\",\"conv3dTranspose\"),gn(e,\"filter\",\"conv3dTranspose\"),r,o)}});var El=An({matMul_:function(t,e,n,r){var o;void 0===n&&(n=!1),void 0===r&&(r=!1);var a=gn(t,\"a\",\"matMul\"),i=gn(e,\"b\",\"matMul\");o=Nt(a,i),a=o[0],i=o[1];var s=n?a.shape[a.rank-2]:a.shape[a.rank-1],u=r?i.shape[i.rank-1]:i.shape[i.rank-2],c=n?a.shape[a.rank-1]:a.shape[a.rank-2],l=r?i.shape[i.rank-2]:i.shape[i.rank-1],h=a.shape.slice(0,-2),f=i.shape.slice(0,-2),d=k(h),p=k(f);C(a.rank>=2&&i.rank>=2&&a.rank===i.rank,(function(){return\"Error in matMul: inputs must have the same rank of at least 2, got ranks \"+a.rank+\" and \"+i.rank+\".\"})),C(S(h,f),(function(){return\"Error in matMul: outer dimensions (\"+h+\") and (\"+f+\") of Tensors with shapes \"+a.shape+\" and \"+i.shape+\" must match.\"})),C(s===u,(function(){return\"Error in matMul: inner shapes (\"+s+\") and (\"+u+\") of Tensors with shapes \"+a.shape+\" and \"+i.shape+\" and transposeA=\"+n+\" and transposeB=\"+r+\" must match.\"}));var v=a.shape.slice(0,-2).concat([c,l]),g=n?a.as3D(d,s,c):a.as3D(d,c,s),m=r?i.as3D(p,l,u):i.as3D(p,u,l),y={transposeA:n,transposeB:r};return Lt.runKernelFunc((function(t,e){var o=t.batchMatMul(g,m,n,r);return e([g,m]),o}),{a:g,b:m},(function(t,e){var o=e,a=o[0],i=o[1];return n||r?!n&&r?{a:function(){return t.matMul(i,!1,!1)},b:function(){return t.matMul(a,!0,!1)}}:n&&!r?{a:function(){return i.matMul(t,!1,!0)},b:function(){return a.matMul(t,!1,!1)}}:{a:function(){return i.matMul(t,!0,!0)},b:function(){return t.matMul(a,!0,!0)}}:{a:function(){return t.matMul(i,!1,!0)},b:function(){return a.matMul(t,!0,!1)}}}),\"BatchMatMul\",y).reshape(v)}}),Rl=An({dot_:function(t,e){var n=gn(t,\"t1\",\"dot\"),r=gn(e,\"t2\",\"dot\");C(!(1!==n.rank&&2!==n.rank||1!==r.rank&&2!==r.rank),(function(){return\"Error in dot: inputs must all be rank 1 or 2, but got ranks \"+n.rank+\" and \"+r.rank+\".\"}));var o=1===n.rank?n.size:n.shape[1],a=1===r.rank?r.size:r.shape[0];return C(o===a,(function(){return\"Error in dot: inner dimensions of inputs must match, but got \"+o+\" and \"+a+\".\"})),1===n.rank&&1===r.rank?n.as2D(1,-1).matMul(r.as2D(-1,1)).asScalar():1===n.rank&&2===r.rank?n.as2D(1,-1).matMul(r.as2D(r.shape[0],r.shape[1])).as1D():2===n.rank&&1===r.rank?n.matMul(r.as2D(-1,1)).as1D():n.matMul(r.as2D(r.shape[0],r.shape[1]))}}),Il=An({outerProduct_:function(t,e){var n=gn(t,\"v1\",\"outerProduct\"),r=gn(e,\"v2\",\"outerProduct\");return C(1===n.rank&&1===r.rank,(function(){return\"Error in outerProduct: inputs must be rank 1, but got ranks \"+n.rank+\" and \"+r.rank+\".\"})),n.as2D(-1,1).matMul(r.as2D(1,-1))}});var kl=An({reverse_:function(t,e){var n=gn(t,\"x\",\"reverse\");if(0===n.rank)return n.clone();var r=O(e,n.shape);return Lt.runKernelFunc((function(t){return t.reverse(n,r)}),{$x:n},(function(t){return{$x:function(){return t.reverse(r)}}})).reshapeAs(n)}}),Sl=An({reverse1d_:function(t){var e=gn(t,\"x\",\"reverse\");return C(1===e.rank,(function(){return\"Error in reverse1D: x must be rank 1 but got rank \"+e.rank+\".\"})),kl(e,0)}}),Al=An({reverse2d_:function(t,e){var n=gn(t,\"x\",\"reverse\");return C(2===n.rank,(function(){return\"Error in reverse2D: x must be rank 2 but got rank \"+n.rank+\".\"})),kl(n,e)}}),Tl=An({reverse3d_:function(t,e){var n=gn(t,\"x\",\"reverse\");return C(3===n.rank,(function(){return\"Error in reverse3D: x must be rank 3 but got rank \"+n.rank+\".\"})),kl(n,e)}}),Dl=An({reverse4d_:function(t,e){var n=gn(t,\"x\",\"reverse\");return C(4===n.rank,(function(){return\"Error in reverse4D: x must be rank 4 but got rank \"+n.rank+\".\"})),kl(n,e)}});function Nl(t,e,n,r,o,a){var i=gn(t,\"x\",\"maxPool\"),s=i,u=!1;3===i.rank&&(u=!0,s=i.as4D(1,i.shape[0],i.shape[1],i.shape[2])),null==r&&(r=[1,1]),C(4===s.rank,(function(){return\"Error in maxPool: input must be rank 4 but got rank \"+s.rank+\".\"})),C(Ca(n,r),(function(){return\"Error in maxPool: Either strides or dilations must be 1. Got strides \"+n+\" and dilations '\"+r+\"'\"})),null!=a&&C(A(o),(function(){return\"Error in maxPool: pad must be an integer when using, dimRoundingMode \"+a+\" but got pad \"+o+\".\"}));var c=fa(s.shape,e,n,r,o,a);if(1===c.filterWidth&&1===c.filterHeight&&S(c.inShape,c.outShape))return i.clone();var l=[s],h=Lt.runKernelFunc((function(t,e){var n=t.maxPool(s,c);return e([s,n]),n}),{x:s},(function(t,a){var i=a[0],s=a[1];return{x:function(){return function(t,e,n,r,o,a,i,s){var u=gn(t,\"dy\",\"maxPoolBackprop\"),c=gn(e,\"input\",\"maxPoolBackprop\"),l=gn(n,\"output\",\"maxPoolBackprop\");C(c.rank===u.rank,(function(){return\"Rank of input (\"+c.rank+\") does not match rank of dy (\"+u.rank+\")\"})),null==a&&(a=[1,1]);C(Ca(o,a),(function(){return\"Error in maxPoolBackProp: Either strides or dilations must be 1. Got strides \"+o+\" and dilations '\"+a+\"'\"})),C(4===u.rank,(function(){return\"Error in maxPoolBackprop: dy must be rank 4 but got rank \"+u.rank+\".\"})),C(4===c.rank,(function(){return\"Error in maxPoolBackprop: input must be rank 4 but got rank \"+c.rank+\".\"})),null!=s&&C(A(i),(function(){return\"Error in maxPoolBackprop: pad must be an integer when using, dimRoundingMode \"+s+\" but got pad \"+i+\".\"}));var h=fa(c.shape,r,o,a,i,s);return Lt.runKernelFunc((function(t){return t.maxPoolBackprop(u,c,l,h)}),{$dy:u,$input:c})}(t,i,s,e,n,r,o)}}}),\"MaxPool\",c,l);return u?h.as3D(h.shape[1],h.shape[2],h.shape[3]):h}function Fl(t,e,n,r,o,a){var i=gn(t,\"x\",\"avgPool\",\"float32\");null==r&&(r=[1,1]),C(Ca(n,r),(function(){return\"Error in avgPool: Either strides or dilations must be 1. Got strides \"+n+\" and dilations '\"+r+\"'\"}));var s=i,u=!1;3===i.rank&&(u=!0,s=i.as4D(1,i.shape[0],i.shape[1],i.shape[2])),C(4===s.rank,(function(){return\"Error in avgPool: x must be rank 4 but got rank \"+s.rank+\".\"})),null!=a&&C(A(o),(function(){return\"Error in avgPool: pad must be an integer when using, dimRoundingMode \"+a+\" but got pad \"+o+\".\"}));var c=fa(s.shape,e,n,r,o,a);if(1===c.filterWidth&&1===c.filterHeight&&S(c.inShape,c.outShape))return i.clone();var l=Lt.runKernelFunc((function(t){return t.avgPool(s,c)}),{x:s},(function(t){return{x:function(){return function(t,e,n,r,o,a){var i=gn(t,\"dy\",\"avgPoolBackprop\"),s=gn(e,\"input\",\"avgPoolBackprop\");C(s.rank===i.rank,(function(){return\"Rank of input (\"+s.rank+\") does not match rank of dy (\"+i.rank+\")\"})),null==o&&(o=[1,1]);C(Ca(r,o),(function(){return\"Error in avgPoolBackprop: Either strides or dilations must be 1. Got strides \"+r+\" and dilations '\"+o+\"'\"}));var u=s,c=i,l=!1;3===s.rank&&(l=!0,u=s.as4D(1,s.shape[0],s.shape[1],s.shape[2]),c=i.as4D(1,i.shape[0],i.shape[1],i.shape[2]));C(4===c.rank,(function(){return\"Error in avgPoolBackprop: dy must be rank 4 but got rank \"+c.rank+\".\"})),C(4===u.rank,(function(){return\"Error in avgPoolBackprop: input must be rank 4 but got rank \"+u.rank+\".\"}));var h=fa(u.shape,n,r,o,a),f=Lt.runKernelFunc((function(t){return t.avgPoolBackprop(c,u,h)}),{dy4D:c,input4D:u});if(l)return f.as3D(f.shape[1],f.shape[2],f.shape[3]);return f}(t,s,e,n,r,o)}}}),\"AvgPool\",c);return l=l.cast(i.dtype),u?l.as3D(l.shape[1],l.shape[2],l.shape[3]):l}var _l=An({maxPool_:function(t,e,n,r,o){return Nl(t,e,n,1,r,o)}}),Ol=An({avgPool_:function(t,e,n,r,o){return Fl(t,e,n,1,r,o)}}),Ml=An({pool_:function(t,e,n,r,o,a){null==o&&(o=[1,1]),null==a&&(a=1),0===r&&(r=\"valid\");var i=gn(t,\"x\",\"maxPool\"),s=i,u=!1;3===i.rank&&(u=!0,s=i.as4D(1,i.shape[0],i.shape[1],i.shape[2])),C(Ca(a,o),(function(){return\"Error in pool: Either strides or dilations must be 1. Got strides \"+a+\" and dilations '\"+o+\"'\"}));var c,l=fa(s.shape,e,a,o,r),h=[l.dilationHeight,l.dilationWidth];c=\"same\"===r?function(t,e){var n=t.map((function(t,n){return t+(t-1)*(e[n]-1)})).map((function(t){return t-1})),r=n.map((function(t){return Math.floor(t/2)})),o=n.map((function(t,e){return t-r[e]}));return n.map((function(t,e){return[r[e],o[e]]}))}([l.filterHeight,l.filterWidth],h):[[0,0],[0,0]];var f=1===h[0]&&1===h[1],d=function(t,e,n){var r=n.map((function(t){return t[0]})),o=n.map((function(t){return t[1]})),a=t.concat(r,o),i=e.map((function(t,e){return(t-a[e]%t)%t})),s=o.map((function(t,e){return t+i[e]})),u=e.map((function(t,e){return[r[e],s[e]]})),c=e.map((function(t,e){return[0,i[e]]}));return[u,c]}([l.inHeight,l.inWidth],h,c),p=d[0],v=d[1],g=f?r:\"valid\",m=f?s:cr(s,h,p),y=(\"avg\"===n?function(){return Fl(m,e,a,1,g)}:function(){return Nl(m,e,a,1,g)})(),x=f?y:rr(y,h,v);return u?x.as3D(x.shape[1],x.shape[2],x.shape[3]):x}}),Bl=An({maxPool3d_:function(t,e,n,r,o,a,i){void 0===a&&(a=\"NDHWC\");var s=gn(t,\"x\",\"maxPool3d\"),u=s,c=!1;4===s.rank&&(c=!0,u=s.as5D(1,s.shape[0],s.shape[1],s.shape[2],s.shape[3])),null==i&&(i=[1,1,1]),C(5===u.rank,(function(){return\"Error in maxPool3d: x must be rank 5 but got rank \"+u.rank+\".\"})),C(\"NDHWC\"===a,(function(){return\"Error in maxPool3d: Only NDHWC is currently supported, but got dataFormat of \"+a})),C(Ca(n,i),(function(){return\"Error in maxPool3d: Either strides or dilations must be 1. Got strides \"+n+\" and dilations '\"+i+\"'\"})),null!=o&&C(A(r),(function(){return\"Error in maxPool3d: pad must be an integer when using, dimRoundingMode \"+o+\" but got pad \"+r+\".\"}));var l=da(u.shape,e,n,i,r,o,a),h=Lt.runKernelFunc((function(t,e){var n=t.maxPool3d(u,l);return e([u,n]),n}),{x:u},(function(t,a){var s=a[0],u=a[1];return{x:function(){return function(t,e,n,r,o,a,i,s){var u=gn(t,\"dy\",\"maxPool3dBackprop\"),c=gn(e,\"input\",\"maxPool3dBackprop\"),l=gn(n,\"output\",\"maxPool3dBackprop\"),h=u,f=c,d=l,p=!1;4===c.rank&&(p=!0,h=u.as5D(1,u.shape[0],u.shape[1],u.shape[2],u.shape[3]),f=c.as5D(1,c.shape[0],c.shape[1],c.shape[2],c.shape[3]),d=l.as5D(1,l.shape[0],l.shape[1],l.shape[2],l.shape[3]));C(5===h.rank,(function(){return\"Error in maxPool3dBackprop: dy must be rank 5 but got rank \"+h.rank+\".\"})),C(5===f.rank,(function(){return\"Error in maxPool3dBackprop: input must be rank 5 but got rank \"+f.rank+\".\"})),C(5===d.rank,(function(){return\"Error in maxPool3dBackprop: output must be rank 5 but got rank \"+d.rank+\".\"})),null==a&&(a=[1,1,1]);C(Ca(o,a),(function(){return\"Error in maxPool3dBackprop: Either strides or dilations must be 1. Got strides \"+o+\" and dilations '\"+a+\"'\"})),null!=s&&C(A(i),(function(){return\"Error in maxPool3dBackprop: pad must be an integer when using, dimRoundingMode \"+s+\" but got pad \"+i+\".\"}));var v=da(f.shape,r,o,a,i,s),g=Lt.runKernelFunc((function(t){return t.maxPool3dBackprop(h,f,d,v)}),{dy5D:h,input5D:f});if(p)return g.as4D(g.shape[1],g.shape[2],g.shape[3],g.shape[4]);return g}(t,s,u,e,n,i,r,o)}}}));return c?h.as4D(h.shape[1],h.shape[2],h.shape[3],h.shape[4]):h}}),Pl=An({avgPool3d_:function(t,e,n,r,o,a,i){void 0===a&&(a=\"NDHWC\");var s=gn(t,\"x\",\"avgPool3d\",\"float32\"),u=s,c=!1;4===s.rank&&(c=!0,u=s.as5D(1,s.shape[0],s.shape[1],s.shape[2],s.shape[3])),null==i&&(i=[1,1,1]),C(5===u.rank,(function(){return\"Error in avgPool3d: x must be rank 5 but got rank \"+u.rank+\".\"})),C(\"NDHWC\"===a,(function(){return\"Error in avgPool3d: Only NDHWC is currently supported, but got dataFormat of \"+a})),C(Ca(n,i),(function(){return\"Error in avgPool3d: Either strides or dilations must be 1. Got strides \"+n+\" and dilations '\"+i+\"'\"})),null!=o&&C(A(r),(function(){return\"Error in avgPool3d: pad must be an integer when using, dimRoundingMode \"+o+\" but got pad \"+r+\".\"}));var l=da(u.shape,e,n,i,r,o,a),h=Lt.runKernelFunc((function(t){return t.avgPool3d(u,l)}),{x:u},(function(t){return{x:function(){return function(t,e,n,r,o,a,i){var s=gn(t,\"dy\",\"avgPool3dBackprop\"),u=gn(e,\"input\",\"avgPool3dBackprop\"),c=s,l=u,h=!1;4===u.rank&&(h=!0,c=s.as5D(1,s.shape[0],s.shape[1],s.shape[2],s.shape[3]),l=u.as5D(1,u.shape[0],u.shape[1],u.shape[2],u.shape[3]));C(5===c.rank,(function(){return\"Error in avgPool3dBackprop: dy must be rank 5 but got rank \"+c.rank+\".\"})),C(5===l.rank,(function(){return\"Error in avgPool3dBackprop: input must be rank 5 but got rank \"+l.rank+\".\"})),null==o&&(o=[1,1,1]);C(Ca(r,o),(function(){return\"Error in avgPool3dBackprop: Either strides or dilations must be 1. Got strides \"+r+\" and dilations '\"+o+\"'\"})),null!=i&&C(A(a),(function(){return\"Error in maxPool3dBackprop: pad must be an integer when using, dimRoundingMode \"+i+\" but got pad \"+a+\".\"}));var f=da(l.shape,n,r,o,a,i),d=Lt.runKernelFunc((function(t){return t.avgPool3dBackprop(c,l,f)}),{dy5D:c,input5D:l});if(h)return d.as4D(d.shape[1],d.shape[2],d.shape[3],d.shape[4]);return d}(t,u,e,n,i,r,o)}}}));return h=h.cast(u.dtype),c?h.as4D(h.shape[1],h.shape[2],h.shape[3],h.shape[4]):h}}),Ll=An({maxPoolWithArgmax_:function(t,e,n,r,o){void 0===o&&(o=!1);var a=gn(t,\"x\",\"maxPoolWithArgmax\"),i={filterSize:e,strides:n,pad:r,includeBatchInIndex:o},s=Lt.runKernel(\"MaxPoolWithArgmax\",{x:a},i);return{result:s[0],indexes:s[1]}}});var Wl=An({slice_:function(t,e,n){var r,o,a=gn(t,\"x\",\"slice\");if(0===a.rank)throw new Error(\"Slicing scalar is not possible\");(r=\"number\"==typeof e?[e].concat(new Array(a.rank-1).fill(0)):e.length<a.rank?e.concat(new Array(a.rank-e.length).fill(0)):e.slice()).forEach((function(t){C(-1!==t,(function(){return\"slice() does not support negative begin indexing.\"}))})),o=(o=null==n?new Array(a.rank).fill(-1):\"number\"==typeof n?[n].concat(new Array(a.rank-1).fill(-1)):n.length<a.rank?n.concat(new Array(a.rank-n.length).fill(-1)):n).map((function(t,e){return t>=0?t:(C(-1===t,(function(){return\"Negative size values should be exactly -1 but got \"+t+\" for the slice() size at index \"+e+\".\"})),a.shape[e]-r[e])})),qo(a,r,o);var i=a.shape,s={begin:r,size:o};return Lt.runKernelFunc((function(t){return t.slice(a,r,o)}),{x:a},(function(t){for(var e=[],n=0;n<t.rank;n++)e.push([r[n],i[n]-r[n]-o[n]]);return{x:function(){return Ic(t,e)}}}),\"Slice\",s)}}),Ul=An({slice1d_:function(t,e,n){var r=gn(t,\"x\",\"slice1d\");return C(1===r.rank,(function(){return\"slice1d expects a rank-1 tensor, but got a rank-\"+r.rank+\" tensor\"})),Wl(r,[e],[n])}}),Vl=An({slice2d_:function(t,e,n){var r=gn(t,\"x\",\"slice2d\");return C(2===r.rank,(function(){return\"slice2d expects a rank-2 tensor, but got a rank-\"+r.rank+\" tensor\"})),Wl(r,e,n)}}),zl=An({slice3d_:function(t,e,n){var r=gn(t,\"x\",\"slice3d\");return C(3===r.rank,(function(){return\"slice3d expects a rank-3 tensor, but got a rank-\"+r.rank+\" tensor\"})),Wl(r,e,n)}}),Gl=An({slice4d_:function(t,e,n){var r=gn(t,\"x\",\"slice4d\");return C(4===r.rank,(function(){return\"slice4d expects a rank-4 tensor, but got a rank-\"+r.rank+\" tensor\"})),Wl(r,e,n)}});function Hl(t,e,n,r,o){return e.rank<n.rank&&(e=e.reshape(wn(e.shape,r))),t.rank<n.rank&&(t=t.reshape(wn(t.shape,r))),{x:function(){var r=t.mul(n.equal(e).cast(t.dtype));return null==o?r:r.transpose(o)}}}var ql=An({all_:function(t,e,n){void 0===e&&(e=null),void 0===n&&(n=!1);var r=gn(t,\"x\",\"all\",\"bool\"),o=O(e,r.shape),a=o,i=En(a,r.rank);null!=i&&(r=r.transpose(i),a=In(a.length,r.rank));var s=Lt.runKernelFunc((function(t){return t.all(r,a)}),{$x:r});if(n){var u=wn(s.shape,o);return s.reshape(u)}return s}}),Kl=An({any_:function(t,e,n){void 0===e&&(e=null),void 0===n&&(n=!1);var r=gn(t,\"x\",\"any\",\"bool\"),o=O(e,r.shape),a=o,i=En(a,r.rank);null!=i&&(r=r.transpose(i),a=In(a.length,r.rank));var s=Lt.runKernelFunc((function(t){return t.any(r,a)}),{$x:r});if(n){var u=wn(s.shape,o);return s.reshape(u)}return s}}),jl=An({argMax_:function(t,e){void 0===e&&(e=0);var n=gn(t,\"x\",\"argMax\");null==e&&(e=0);var r=O(e,n.shape),o=En(r,n.rank);null!=o&&(n=n.transpose(o),r=In(r.length,n.rank));var a={axis:r[0]},i=[n];return Lt.runKernelFunc((function(t,e){var o=t.argMax(n,r[0]);return e([n]),o}),{x:n},(function(t,e){var n=e[0];return{x:function(){return Xn(n)}}}),\"ArgMax\",a,i)}}),Xl=An({argMin_:function(t,e){void 0===e&&(e=0);var n=gn(t,\"x\",\"argMin\");null==e&&(e=0);var r=O(e,n.shape),o=En(r,n.rank);return null!=o&&(n=n.transpose(o),r=In(r.length,n.rank)),Lt.runKernelFunc((function(t,e){var o=t.argMin(n,r[0]);return e([n]),o}),{$x:n},(function(t,e){var n=e[0];return{$x:function(){return Xn(n)}}}))}}),Yl=An({logSumExp_:function(t,e,n){void 0===e&&(e=null),void 0===n&&(n=!1);var r=gn(t,\"x\",\"logSumExp\"),o=O(e,r.shape),a=r.max(o,!0),i=r.sub(a).exp().sum(o).log(),s=a.reshape(i.shape).add(i);if(n){var u=wn(s.shape,o);return s.reshape(u)}return s}}),$l=An({max_:function(t,e,n){void 0===e&&(e=null),void 0===n&&(n=!1);var r=gn(t,\"x\",\"max\"),o=r,a=O(e,r.shape),i=a,s=En(i,r.rank);null!=s&&(r=r.transpose(s),i=In(i.length,r.rank));var u=[r],c=Lt.runKernelFunc((function(t,e){var n=t.max(r,i);return e([o,n]),n}),{x:r},(function(t,e){return Hl(t,e[1],e[0],a,s)}),\"Max\",{axes:i},u,[!0]);if(n){var l=wn(c.shape,a);c=c.reshape(l)}return c}}),Ql=An({mean_:function(t,e,n){void 0===e&&(e=null),void 0===n&&(n=!1);var r=gn(t,\"x\",\"mean\"),o=O(e,r.shape),a=k(bn(r.shape,o)[1]);return oa((function(t){var r=On(a);return{value:(r.dtype===t.dtype?t:t.cast(r.dtype)).div(r).sum(e,n),gradFunc:function(e){var n=t.shape.slice();return o.forEach((function(t){n[t]=1})),e.reshape(n).mul(zn(t.shape,\"float32\")).div(a)}}}))(r)}}),Jl=An({min_:function(t,e,n){void 0===e&&(e=null),void 0===n&&(n=!1);var r=gn(t,\"x\",\"min\"),o=r,a=O(e,r.shape),i=a,s=En(i,r.rank);null!=s&&(r=r.transpose(s),i=In(i.length,r.rank));var u=[r],c=Lt.runKernelFunc((function(t,e){var n=t.min(r,i);return e([o,n]),n}),{x:r},(function(t,e){return Hl(t,e[1],e[0],a,s)}),\"Min\",{axes:i},u,[!0]);if(n){var l=wn(c.shape,a);c=c.reshape(l)}return c}}),Zl=An({moments_:function(t,e,n){void 0===e&&(e=null),void 0===n&&(n=!1);var r=O(e,(t=gn(t,\"x\",\"moments\")).shape),o=t.mean(r,n),a=o.shape;n||(a=wn(o.shape,r));var i=t.toFloat().sub(o.reshape(a)).square();return{mean:o,variance:i.mean(r,n)}}}),th=An({sum_:function(t,e,n){void 0===e&&(e=null),void 0===n&&(n=!1);var r=gn(t,\"x\",\"sum\");\"bool\"===r.dtype&&(r=r.toInt());var o=O(e,r.shape);return oa((function(t){var e=En(o,t.rank),r=o,a=t;null!=e&&(a=t.transpose(e),r=In(r.length,t.rank));var i=function(e){var n=t.shape.slice();return o.forEach((function(t){n[t]=1})),e.reshape(n).mul(zn(t.shape,\"float32\"))},s={axes:r},u=Lt.runKernelFunc((function(t){return t.sum(a,r)}),{x:a},(function(t){return{x:function(){return i(t)}}}),\"Sum\",s);if(n){var c=wn(u.shape,o);u=u.reshape(c)}return{value:u,gradFunc:i}}))(r)}}),eh=An({prod_:function(t,e,n){void 0===e&&(e=null),void 0===n&&(n=!1);var r=gn(t,\"x\",\"prod\");\"bool\"===r.dtype&&(r=r.toInt());var o=O(e,r.shape),a=En(o,r.rank),i=o,s=r;null!=a&&(s=r.transpose(a),i=In(i.length,r.rank));var u=Lt.runKernelFunc((function(t){return t.prod(s,i)}),{permutedX:s});if(n){var c=wn(u.shape,o);u=u.reshape(c)}return u}});var nh=An({elu_:function(t){var e=gn(t,\"x\",\"elu\");return Lt.runKernelFunc((function(t,n){var r=t.elu(e);return n([r]),r}),{$x:e},(function(t,e){var n=e[0];return{$x:function(){return Lt.runKernelFunc((function(e){return e.eluDer(t,n)}),{dy:t,y:n})}}}))}}),rh=An({leakyRelu_:function(t,e){void 0===e&&(e=.2);var n=gn(t,\"x\",\"leakyRelu\");return Eo(On(e).mul(n),n)}}),oh=An({prelu_:function(t,e){var n=gn(t,\"x\",\"prelu\"),r=gn(e,\"alpha\",\"prelu\");return Lt.runKernelFunc((function(t,e){var o=t.prelu(n,r);return e([n,r]),o}),{x:n,alpha:r},(function(t,e){var n=e[0],r=e[1],o=n.greater(0);return{x:function(){return yc(o,t,t.mul(r))},alpha:function(){var e=yc(o,Xn(t),t.mul(n)),a=Br(r.shape,t.shape);return a.length>0&&(e=e.sum(a)),e.reshape(r.shape)}}}),\"Prelu\")}}),ah=An({relu_:function(t){var e=gn(t,\"x\",\"relu\");return\"bool\"===e.dtype?e.toInt():Lt.runKernelFunc((function(t,n){var r=t.relu(e);return n([e]),r}),{x:e},(function(t,e){var n=e[0];return{x:function(){return t.mulStrict(n.step().toFloat())}}}),\"Relu\")}}),ih=An({relu6_:function(t){var e=gn(t,\"x\",\"relu6\");return\"bool\"===e.dtype?e.toInt():Lt.runKernelFunc((function(t,n){var r=t.relu6(e);return n([e]),r}),{x:e},(function(t,e){var n=e[0],r=n.lessEqual(6).mul(n.step());return{x:function(){return t.mulStrict(r.toFloat())}}}),\"Relu6\")}}),sh=An({selu_:function(t){var e=gn(t,\"x\",\"selu\");return Lt.runKernelFunc((function(t,n){var r=t.selu(e);return n([e]),r}),{$x:e},(function(t,e){var n=e[0];return{$x:function(){var e=n.greater(On(0)),r=On(su),o=On(uu),a=t.mul(o),i=t.mul(r).mul(n.toFloat().exp());return yc(e,a,i)}}}))}});var uh=An({localResponseNormalization_:function(t,e,n,r,o){void 0===e&&(e=5),void 0===n&&(n=1),void 0===r&&(r=1),void 0===o&&(o=.5);var a=gn(t,\"x\",\"localResponseNormalization\");C(4===a.rank||3===a.rank,(function(){return\"Error in localResponseNormalization: x must be rank 3 or 4 but got\\n               rank \"+a.rank+\".\"})),C(A(e),(function(){return\"Error in localResponseNormalization: depthRadius must be an integer but got depthRadius \"+e+\".\"}));var i=a,s=!1;3===a.rank&&(s=!0,i=a.as4D(1,a.shape[0],a.shape[1],a.shape[2]));var u=Lt.runKernelFunc((function(t,a){var s=t.localResponseNormalization4D(i,e,n,r,o);return a([i,s]),s}),{x4D:i},(function(t,a){var i=a[0],s=a[1];return{x4D:function(){return Lt.runKernelFunc((function(a){return a.LRNGrad(t,i,s,e,n,r,o)}),{})}}}));return s?u.as3D(u.shape[1],u.shape[2],u.shape[3]):u}});var ch=An({norm_:function(t,e,n,r){void 0===e&&(e=\"euclidean\"),void 0===n&&(n=null),void 0===r&&(r=!1);var o=function t(e,n,r){void 0===r&&(r=null);if(0===e.rank)return e.abs();if(1!==e.rank&&null===r)return t(e.reshape([-1]),n,r);if(1===e.rank||\"number\"==typeof r||Array.isArray(r)&&1===r.length){if(1===n)return e.abs().sum(r);if(n===1/0)return e.abs().max(r);if(n===-1/0)return e.abs().min(r);if(\"euclidean\"===n||2===n)return e.abs().pow(On(2,\"int32\")).sum(r).sqrt();throw new Error(\"Error in norm: invalid ord value: \"+n)}if(Array.isArray(r)&&2===r.length){if(1===n)return e.abs().sum(r[0]).max(r[1]-1);if(n===1/0)return e.abs().sum(r[1]).max(r[0]);if(n===-1/0)return e.abs().sum(r[1]).min(r[0]);if(\"fro\"===n||\"euclidean\"===n)return e.square().sum(r).sqrt();throw new Error(\"Error in norm: invalid ord value: \"+n)}throw new Error(\"Error in norm: invalid axis: \"+r)}(t=gn(t,\"x\",\"norm\"),e,n),a=o.shape;if(r){var i=O(n,t.shape);a=wn(o.shape,i)}return o.reshape(a)}});var lh=An({basicLSTMCell_:function(t,e,n,r,o,a){var i=gn(t,\"forgetBias\",\"basicLSTMCell\"),s=gn(e,\"lstmKernel\",\"basicLSTMCell\"),u=gn(n,\"lstmBias\",\"basicLSTMCell\"),c=gn(r,\"data\",\"basicLSTMCell\"),l=gn(o,\"c\",\"basicLSTMCell\"),h=gn(a,\"h\",\"basicLSTMCell\"),f=c.concat(h,1).matMul(s).add(u),d=f.shape[0],p=f.shape[1]/4,v=[d,p],g=f.slice([0,0],v),m=f.slice([0,p],v),y=f.slice([0,2*p],v),x=f.slice([0,3*p],v),b=g.sigmoid().mulStrict(m.tanh()).addStrict(l.mulStrict(i.add(y).sigmoid())),w=b.tanh().mulStrict(x.sigmoid());return[b,w]}}),hh=An({multiRNNCell_:function(t,e,n,r){for(var o=gn(e,\"data\",\"multiRNNCell\"),a=mn(n,\"c\",\"multiRNNCell\"),i=mn(r,\"h\",\"multiRNNCell\"),s=o,u=[],c=0;c<t.length;c++){var l=t[c](s,a[c],i[c]);u.push(l[0]),u.push(l[1]),s=l[1]}var h=[],f=[];for(c=0;c<u.length;c+=2)h.push(u[c]),f.push(u[c+1]);return[h,f]}});var fh=An({movingAverage_:function(t,e,n,r,o){void 0===o&&(o=!0);var a=gn(t,\"v\",\"movingAverage\"),i=gn(e,\"x\",\"movingAverage\"),s=gn(n,\"decay\",\"movingAverage\");Ft(a,i),C(S(a.shape,i.shape),(function(){return\"Shape mismatch in v and x\"}));var u=On(1),c=u.sub(s),l=i.sub(a).mul(c);if(o){C(null!=r,(function(){return\"When using zeroDebias: true, step is required.\"}));var h=gn(r,\"step\",\"movingAverage\");l=l.div(u.sub(No(s,h)))}return a.add(l)}});var dh=An({stridedSlice_:function(t,e,n,r,o,a,i,s,u){if(void 0===o&&(o=0),void 0===a&&(a=0),void 0===i&&(i=0),void 0===s&&(s=0),void 0===u&&(u=0),null==r&&(r=new Array(e.length)),0!==i)throw new Error(\"ellipsis mask is not yet supported\");var c=gn(t,\"x\",\"stridedSlice\"),l=Ko(s),h=c.shape.slice();l.forEach((function(t){e[t]=0,n[t]=1,h.splice(t,0,1)})),c=c.reshape(h);for(var f=0;f<c.rank;f++)e[f]=Xo(o,e,r,c.shape,f),n[f]=Yo(a,n,r,c.shape,f),r[f]=r[f]||1;var d=Ko(u);d.forEach((function(t){n[t]=e[t]+1,r[t]=1}));var p=jo(e,n,r),v=p.filter((function(t,e){return-1===d.indexOf(e)}));return r.every((function(t){return 1===t}))?Wl(c,e,p).reshape(v):Lt.runKernelFunc((function(t){return t.stridedSlice(c,e,n,r)}),{$x:c}).reshape(v)}});var ph=An({topk_:function(t,e,n){void 0===e&&(e=1),void 0===n&&(n=!0);var r=gn(t,\"x\",\"topk\");if(0===r.rank)throw new Error(\"topk() expects the input to be of rank 1 or higher\");var o=r.shape[r.shape.length-1];if(e>o)throw new Error(\"'k' passed to topk() must be <= the last dimension (\"+o+\") but got \"+e);var a=Lt.runKernelFunc((function(t){return t.topk(r,e,n)}),{$x:r});return{values:a[0],indices:a[1]}}});var vh=An({scatterND_:function(t,e,n){var r=gn(t,\"indices\",\"scatterND\",\"int32\"),o=gn(e,\"updates\",\"scatterND\");return zo(o,r,n),Lt.runKernelFunc((function(t){return t.scatterND(r,o,n)}),{indices:r,updates:o},null,\"ScatterNd\",{shape:n})}});var gh=An({fft_:function(t){C(\"complex64\"===t.dtype,(function(){return\"The dtype for tf.spectral.fft() must be complex64 but got \"+t.dtype+\".\"}));var e=t.shape[t.shape.length-1],n=t.size/e,r=t.as2D(n,e);return Lt.runKernelFunc((function(t){return t.fft(r)}),{input:t}).reshape(t.shape)}}),mh=An({ifft_:function(t){C(\"complex64\"===t.dtype,(function(){return\"The dtype for tf.spectral.ifft() must be complex64 but got \"+t.dtype+\".\"}));var e=t.shape[t.shape.length-1],n=t.size/e,r=t.as2D(n,e);return Lt.runKernelFunc((function(t){return t.ifft(r)}),{input:t}).reshape(t.shape)}}),yh=An({rfft_:function(t,e){C(\"float32\"===t.dtype,(function(){return\"The dtype for rfft() must be real value but got \"+t.dtype}));var n,r=t.shape[t.shape.length-1],o=t.size/r;if(null!=e&&e<r){var a=t.shape.map((function(t){return 0})),i=t.shape.map((function(t){return t}));i[t.shape.length-1]=e,n=t.slice(a,i),r=e}else if(null!=e&&e>r){var s=t.shape.map((function(t){return t}));s[t.shape.length-1]=e-r,n=t.concat(Gn(s),t.shape.length-1),r=e}else n=t;var u=n.zerosLike(),c=Tn(n,u).as2D(o,r),l=gh(c),h=Math.floor(r/2)+1,f=Dn(l),d=Nn(l),p=f.split([h,r-h],f.shape.length-1),v=d.split([h,r-h],d.shape.length-1),g=n.shape.slice();return g[n.shape.length-1]=h,Tn(p[0],v[0]).reshape(g)}}),xh=An({irfft_:function(t){var e=t.shape[t.shape.length-1],n=t.size/e;if(e<=2){var r=t.as2D(n,e),o=mh(r);return Dn(o)}var a=[n,2*(e-1)],i=Dn(t).as2D(n,e),s=Nn(t).as2D(n,e),u=i.slice([0,1],[n,e-2]).reverse(1),c=s.slice([0,1],[n,e-2]).reverse(1).mul(On(-1)),l=i.concat(u,1),h=s.concat(c,1);return r=Tn(l,h).as2D(a[0],a[1]),o=mh(r),Dn(o)}}),bh=Object.freeze({fft:gh,ifft:mh,rfft:yh,irfft:xh});var wh=An({sparseToDense_:function(t,e,n,r){void 0===r&&(r=0);var o=gn(t,\"sparseIndices\",\"sparseToDense\",\"int32\"),a=gn(e,\"sparseValues\",\"sparseToDense\"),i=gn(r,\"defaultValue\",\"sparseToDense\",a.dtype);return function(t,e,n,r){if(\"int32\"!==t.dtype)throw new Error(\"tf.sparseToDense() expects the indices to be int32 type, but the dtype was \"+t.dtype+\".\");if(t.rank>2)throw new Error(\"sparseIndices should be a scalar, vector, or matrix, but got shape \"+t.shape+\".\");var o=t.rank>0?t.shape[0]:1,a=t.rank>1?t.shape[1]:1;if(n.length!==a)throw new Error(\"outputShape has incorrect number of elements:, \"+n.length+\", should be: \"+a+\".\");var i=e.size;if(0!==e.rank&&(1!==e.rank||i!==o))throw new Error(\"sparseValues has incorrect shape \"+e.shape+\", should be [] or [\"+o+\"]\");if(e.dtype!==r.dtype)throw new Error(\"sparseValues.dtype must match defaultValues.dtype\")}(o,a,n,i),Lt.runKernelFunc((function(t){return t.sparseToDense(o,a,n,i)}),{$sparseIndices:o,$sparseValues:a,$defaultValue:i})}});var Ch=An({gatherND_:function(t,e){var n=gn(e,\"indices\",\"gatherND\",\"int32\"),r=gn(t,\"x\",\"gatherND\");return Lt.runKernelFunc((function(t){return t.gatherND(r,n)}),{x:r,indices:n},null,\"GatherNd\")}});var Eh=An({diag_:function(t){var e=gn(t,\"x\",\"diag\").flatten(),n=t.shape.concat(t.shape);return Lt.runKernelFunc((function(t){return t.diag(e)}),{$x:e}).reshape(n)}});var Rh=An({dropout_:function(t,e,n,r){var o=gn(t,\"x\",\"dropout\");if(C(\"float32\"===o.dtype,(function(){return\"x has to be a floating point tensor since it's going to be scaled, but got a \"+o.dtype+\" tensor instead.\"})),C(e>=0&&e<1,(function(){return\"rate must be a float in the range [0, 1), but got \"+e+\".\"})),0===e)return t instanceof wt?o.clone():o;var a=function(t,e){if(null==e)return t.shape.slice();if(S(t.shape,e))return e;if(t.shape.length===e.length){for(var n=[],r=0;r<t.shape.length;r++)null==e[r]&&null!=t.shape[r]?n.push(t.shape[r]):n.push(e[r]);return n}return e}(o,n),i=1-e,s=zc(a,0,1,\"float32\",r).add(i).floor().div(i);return o.mul(s)}});function Ih(t,e,n){for(var r=1-t%2,o=new Float32Array(t),a=0;a<t;++a){var i=2*Math.PI*a/(t+r-1);o[a]=e-n*Math.cos(i)}return Mn(o,\"float32\")}var kh=An({hannWindow_:function(t){return Ih(t,.5,.5)}}),Sh=An({hammingWindow_:function(t){return Ih(t,.54,.46)}}),Ah=An({frame_:function(t,e,n,r,o){void 0===r&&(r=!1),void 0===o&&(o=0);for(var a=0,i=[];a+e<=t.size;)i.push(Wl(t,a,e)),a+=n;if(r)for(;a<t.size;){var s=a+e-t.size,u=Yn([Wl(t,a,e-s),Hn([s],o)]);i.push(u),a+=n}return 0===i.length?Bn([],[0,e]):Yn(i).as2D(i.length,e)}}),Th=An({stft_:function(t,e,n,r,o){var a;void 0===o&&(o=kh),null==r&&(a=e,r=Math.floor(Math.pow(2,Math.ceil(Math.log(a)/Math.log(2)))));for(var i=Ah(t,e,n),s=To(i,o(e)),u=[],c=0;c<i.shape[0];c++)u.push(yh(s.slice([c,0],[1,e]),r));return Yn(u)}}),Dh=Object.freeze({hannWindow:kh,hammingWindow:Sh,frame:Ah,stft:Th});var Nh,Fh=function(t,e,o){return void 0===o&&(o=1),n(this,void 0,void 0,(function(){var n,a,i,s,u,c,l,h,f,d,p,v,g,m;return r(this,(function(r){switch(r.label){case 0:return n=gn(t,\"predictions\",\"inTopK\"),a=gn(e,\"targets\",\"inTopK\"),C(n.rank>1,(function(){return\"inTopK() expects the predictions to be of rank 2 or higher, but got \"+n.rank})),C(n.rank-1===a.rank,(function(){return\"predictions rank should be 1 larger than targets rank, but got predictions rank \"+n.rank+\" and targets rank \"+a.rank})),E(n.shape.slice(0,n.shape.length-1),a.shape,\"predictions's shape should be align with the targets' shape, except the last dimension.\"),i=n.shape[n.shape.length-1],C(o>0&&o<=i,(function(){return\"'k' passed to inTopK() must be > 0 && <= the predictions last dimension (\"+i+\"), but got \"+o})),[4,n.data()];case 1:return s=r.sent(),[4,a.data()];case 2:for(u=r.sent(),c=[s.length/i,i],h=c[1],f=B(\"bool\",l=c[0]),d=0;d<l;d++){for(p=d*h,v=s.subarray(p,p+h),g=[],m=0;m<v.length;m++)g.push({value:v[m],index:m});for(g.sort((function(t,e){return e.value-t.value})),f[d]=0,m=0;m<o;m++)if(g[m].index===u[d]){f[d]=1;break}}return t!==n&&n.dispose(),e!==a&&a.dispose(),[2,Fn(f,a.shape,\"bool\")]}}))}))};!function(t){t[t.NONE=0]=\"NONE\",t[t.MEAN=1]=\"MEAN\",t[t.SUM=2]=\"SUM\",t[t.SUM_BY_NONZERO_WEIGHTS=3]=\"SUM_BY_NONZERO_WEIGHTS\"}(Nh||(Nh={}));var _h=An({absoluteDifference_:function(t,e,n,r){void 0===r&&(r=Nh.SUM_BY_NONZERO_WEIGHTS);var o=gn(t,\"labels\",\"absoluteDifference\"),a=gn(e,\"predictions\",\"absoluteDifference\"),i=null;null!=n&&(i=gn(n,\"weights\",\"absoluteDifference\")),E(o.shape,a.shape,\"Error in absoluteDifference: \");var s=o.sub(a).abs();return Oh(s,i,r)}}),Oh=An({computeWeightedLoss_:function(t,e,n){void 0===n&&(n=Nh.SUM_BY_NONZERO_WEIGHTS);var r=gn(t,\"losses\",\"computeWeightedLoss\"),o=null;null!=e&&(o=gn(e,\"weights\",\"computeWeightedLoss\"));var a=null==o?r:r.mul(o);if(n===Nh.NONE)return a;if(n===Nh.SUM)return a.sum();if(n===Nh.MEAN){if(null==o)return a.mean();var i=r.size/o.size,s=a.sum().div(o.sum());return i>1?s.div(On(i)):s}if(n===Nh.SUM_BY_NONZERO_WEIGHTS){if(null==o)return a.sum().div(On(r.size));var u=o.mul(zn(r.shape)).notEqual(On(0)).sum().toFloat();return a.sum().div(u)}throw Error(\"Unknown reduction: \"+n)}}),Mh=An({cosineDistance_:function(t,e,n,r,o){void 0===o&&(o=Nh.SUM_BY_NONZERO_WEIGHTS);var a=gn(t,\"labels\",\"cosineDistance\"),i=gn(e,\"predictions\",\"cosineDistance\"),s=null;null!=r&&(s=gn(r,\"weights\",\"cosineDistance\")),E(a.shape,i.shape,\"Error in cosineDistance: \");var u=On(1).sub(a.mul(i).sum(n,!0));return Oh(u,s,o)}}),Bh=An({hingeLoss_:function(t,e,n,r){void 0===r&&(r=Nh.SUM_BY_NONZERO_WEIGHTS);var o=gn(t,\"labels\",\"hingeLoss\"),a=gn(e,\"predictions\",\"hingeLoss\"),i=null;null!=n&&(i=gn(n,\"weights\",\"hingeLoss\")),E(o.shape,a.shape,\"Error in hingeLoss: \");var s=On(1);o=On(2).mul(o).sub(s);var u=s.sub(o.mul(a)).relu();return Oh(u,i,r)}}),Ph=An({huberLoss_:function(t,e,n,r,o){void 0===r&&(r=1),void 0===o&&(o=Nh.SUM_BY_NONZERO_WEIGHTS);var a=gn(t,\"labels\",\"huberLoss\"),i=gn(e,\"predictions\",\"huberLoss\"),s=null;null!=n&&(s=gn(n,\"weights\",\"huberLoss\")),E(a.shape,i.shape,\"Error in huberLoss: \");var u=On(r),c=i.sub(a).abs(),l=Io(c,u),h=c.sub(l),f=On(.5).mul(l.square()).add(u.mul(h));return Oh(f,s,o)}}),Lh=An({logLoss_:function(t,e,n,r,o){void 0===r&&(r=1e-7),void 0===o&&(o=Nh.SUM_BY_NONZERO_WEIGHTS);var a=gn(t,\"labels\",\"logLoss\"),i=gn(e,\"predictions\",\"logLoss\"),s=null;null!=n&&(s=gn(n,\"weights\",\"logLoss\")),E(a.shape,i.shape,\"Error in logLoss: \");var u=On(1),c=On(r),l=a.mul(i.add(c).log()).neg().sub(u.sub(a).mul(u.sub(i).add(c).log()));return Oh(l,s,o)}}),Wh=An({meanSquaredError_:function(t,e,n,r){void 0===r&&(r=Nh.SUM_BY_NONZERO_WEIGHTS);var o=gn(t,\"labels\",\"meanSquaredError\"),a=gn(e,\"predictions\",\"meanSquaredError\"),i=null;null!=n&&(i=gn(n,\"weights\",\"meanSquaredError\")),E(o.shape,a.shape,\"Error in meanSquaredError: \");var s=o.squaredDifference(a);return Oh(s,i,r)}}),Uh=An({sigmoidCrossEntropy_:function(t,e,n,r,o){void 0===r&&(r=0),void 0===o&&(o=Nh.SUM_BY_NONZERO_WEIGHTS);var a=gn(t,\"multiClassLabels\",\"sigmoidCrossEntropy\"),i=gn(e,\"logits\",\"sigmoidCrossEntropy\"),s=null;if(null!=n&&(s=gn(n,\"weights\",\"sigmoidCrossEntropy\")),E(a.shape,i.shape,\"Error in sigmoidCrossEntropy: \"),r>0){var u=On(r),c=On(1),l=On(.5);a=a.mul(c.sub(u)).add(l.mul(u))}var h=function(t,e){var n=gn(t,\"labels\",\"sigmoidCrossEntropyWithLogits\"),r=gn(e,\"logits\",\"sigmoidCrossEntropyWithLogits\");E(n.shape,r.shape,\"Error in sigmoidCrossEntropyWithLogits: \");var o=r.relu(),a=r.mul(n),i=r.abs().neg().exp().log1p();return o.sub(a).add(i)}(a,i);return Oh(h,s,o)}}),Vh=An({softmaxCrossEntropy_:function(t,e,n,r,o){void 0===r&&(r=0),void 0===o&&(o=Nh.SUM_BY_NONZERO_WEIGHTS);var a=gn(t,\"onehotLabels\",\"softmaxCrossEntropy\"),i=gn(e,\"logits\",\"softmaxCrossEntropy\"),s=null;if(null!=n&&(s=gn(n,\"weights\",\"softmaxCrossEntropy\")),E(a.shape,i.shape,\"Error in softmaxCrossEntropy: \"),r>0){var u=On(r),c=On(1),l=On(a.shape[1]);a=a.mul(c.sub(u)).add(u.div(l))}var h=function(t,e,n){if(void 0===n&&(n=-1),-1===n&&(n=e.rank-1),n!==e.rank-1)throw Error(\"Softmax cross entropy along a non-last dimension is not yet supported. Labels / logits was rank \"+e.rank+\" and dim was \"+n);return oa((function(t,e,r){var o=e.logSumExp([n],!0),a=e.toFloat().sub(o);r([t,a]);return{value:a.mul(t).neg().sum([n]),gradFunc:function(t,e){var r=e[0],o=e[1],a=wn(t.shape,[n]);return[t.reshape(a).mul(r.toFloat().sub(o.exp())),t.reshape(a).mul(o.exp().sub(r.toFloat()))]}}}))(t,e)}(a,i);return Oh(h,s,o)}}),zh=Object.freeze({get Reduction(){return Nh},absoluteDifference:_h,computeWeightedLoss:Oh,cosineDistance:Mh,hingeLoss:Bh,huberLoss:Ph,logLoss:Lh,meanSquaredError:Wh,sigmoidCrossEntropy:Uh,softmaxCrossEntropy:Vh});function Gh(t,e){return void 0===e&&(e=!1),Lt.tidy((function(){if(2!==t.shape.length)throw new Error(\"qr2d() requires a 2D Tensor, but got a \"+t.shape.length+\"D Tensor.\");for(var n=t.shape[0],r=t.shape[1],o=Cc(n),a=t.clone(),i=Bn([[1]],[1,1]),s=i.clone(),u=n>=r?r:n,c=function(t){var e,u=a,c=s,l=o;e=Lt.tidy((function(){var e=a.slice([t,t],[n-t,1]),u=e.norm(),c=a.slice([t,t],[1,1]),l=Bn([[-1]]).where(c.greater(0),Bn([[1]])),h=c.sub(l.mul(u)),f=e.div(h);s=1===f.shape[0]?i.clone():i.concat(f.slice([1,0],[f.shape[0]-1,f.shape[1]]),0);var d=l.matMul(h).div(u).neg(),p=a.slice([t,0],[n-t,r]),v=d.mul(s),g=s.transpose();if(0===t)a=p.sub(v.matMul(g.matMul(p)));else{var m=p.sub(v.matMul(g.matMul(p)));a=a.slice([0,0],[t,r]).concat(m,0)}var y=v.transpose(),x=o.slice([0,t],[n,o.shape[1]-t]);if(0===t)o=x.sub(x.matMul(s).matMul(y));else{var b=x.sub(x.matMul(s).matMul(y));o=o.slice([0,0],[n,t]).concat(b,1)}return[s,a,o]})),s=e[0],a=e[1],o=e[2],tn([u,c,l])},l=0;l<u;++l)c(l);return!e&&n>r&&(o=o.slice([0,0],[n,r]),a=a.slice([0,0],[r,r])),[o,a]}))}var Hh=An({bandPart_:function(t,e,n){if(e%1!=0)throw new Error(\"bandPart(): numLower must be an integer, got \"+e+\".\");if(n%1!=0)throw new Error(\"bandPart(): numUpper must be an integer, got \"+n+\".\");var r=gn(t,\"a\",\"bandPart\");if(r.rank<2)throw new Error(\"bandPart(): Rank must be at least 2, got \"+r.rank+\".\");var o=r.shape,a=r.shape.slice(-2),i=a[0],s=a[1];if(!(e<=i))throw new Error(\"bandPart(): numLower (\"+e+\") must not be greater than the number of rows (\"+i+\").\");if(!(n<=s))throw new Error(\"bandPart(): numUpper (\"+n+\") must not be greater than the number of columns (\"+s+\").\");e<0&&(e=i),n<0&&(n=s);var u=Kn(0,i,1,\"int32\").reshape([-1,1]),c=Kn(0,s,1,\"int32\"),l=Oo(u,c),h=pc(l.lessEqual(On(+e,\"int32\")),l.greaterEqual(On(-n,\"int32\"))),f=Gn([i,s],r.dtype);return hr(fr(r.reshape([-1,i,s])).map((function(t){return yc(h,t,f)}))).reshape(o)}}),qh=An({gramSchmidt_:function(t){var e;if(Array.isArray(t)){e=!1,C(null!=t&&t.length>0,(function(){return\"Gram-Schmidt process: input must not be null, undefined, or empty\"}));for(var n=t[0].shape[0],r=function(e){C(t[e].shape[0]===n,(function(){return\"Gram-Schmidt: Non-unique lengths found in the input vectors: (\"+t[e].shape[0]+\" vs. \"+n+\")\"}))},o=1;o<t.length;++o)r(o)}else e=!0,t=tr(t,t.shape[0],0).map((function(t){return lr(t,[0])}));C(t.length<=t[0].shape[0],(function(){return\"Gram-Schmidt: Number of vectors (\"+t.length+\") exceeds number of dimensions (\"+t[0].shape[0]+\").\"}));var a=[],i=t,s=function(t){a.push(Lt.tidy((function(){var e=i[t];if(t>0)for(var n=0;n<t;++n){var r=th(a[n].mulStrict(e)).mul(a[n]);e=e.sub(r)}return e.div(ch(e,\"euclidean\"))})))};for(o=0;o<t.length;++o)s(o);return e?hr(a,0):a}}),Kh=An({qr_:function(t,e){if(void 0===e&&(e=!1),t.rank<2)throw new Error(\"qr() requires input tensor to have a rank >= 2, but got rank \"+t.rank);if(2===t.rank)return Gh(t,e);var n=t.shape.slice(0,t.shape.length-2).reduce((function(t,e){return t*e})),r=fr(t.reshape([n,t.shape[t.shape.length-2],t.shape[t.shape.length-1]]),0),o=[],a=[];return r.forEach((function(t){var n=Gh(t,e),r=n[0],i=n[1];o.push(r),a.push(i)})),[hr(o,0).reshape(t.shape),hr(a,0).reshape(t.shape)]}}),jh=Object.freeze({bandPart:Hh,gramSchmidt:qh,qr:Kh});function Xh(t,e,n,r,o,a){null==r&&(r=.5),null==o&&(o=Number.NEGATIVE_INFINITY),null==a&&(a=0);var i=t.shape[0];return n=Math.min(n,i),C(0<=r&&r<=1,(function(){return\"iouThreshold must be in [0, 1], but was '\"+r+\"'\"})),C(2===t.rank,(function(){return\"boxes must be a 2D tensor, but was of rank '\"+t.rank+\"'\"})),C(4===t.shape[1],(function(){return\"boxes must have 4 columns, but 2nd dimension was \"+t.shape[1]})),C(1===e.rank,(function(){return\"scores must be a 1D tensor\"})),C(e.shape[0]===i,(function(){return\"scores has incompatible shape with boxes. Expected \"+i+\", but was \"+e.shape[0]})),C(0<=a&&a<=1,(function(){return\"softNmsSigma must be in [0, 1], but was '\"+a+\"'\"})),{maxOutputSize:n,iouThreshold:r,scoreThreshold:o,softNmsSigma:a}}var Yh=An({resizeBilinear_:function(t,e,n){void 0===n&&(n=!1);var r=gn(t,\"images\",\"resizeBilinear\");C(3===r.rank||4===r.rank,(function(){return\"Error in resizeBilinear: x must be rank 3 or 4, but got rank \"+r.rank+\".\"})),C(2===e.length,(function(){return\"Error in resizeBilinear: new shape must 2D, but got shape \"+e+\".\"}));var o=r,a=!1;3===r.rank&&(a=!0,o=r.as4D(1,r.shape[0],r.shape[1],r.shape[2]));var i=e[0],s=e[1],u=Lt.runKernelFunc((function(t,e){return e([o]),t.resizeBilinear(o,i,s,n)}),{x:o},(function(t,e){return{x:function(){return Lt.runKernelFunc((function(r){return r.resizeBilinearBackprop(t,e[0],n)}),{})}}}),\"ResizeBilinear\",{alignCorners:n,newHeight:i,newWidth:s});return a?u.as3D(u.shape[1],u.shape[2],u.shape[3]):u}}),$h=An({resizeNearestNeighbor_:function(t,e,n){void 0===n&&(n=!1);var r=gn(t,\"images\",\"resizeNearestNeighbor\");C(3===r.rank||4===r.rank,(function(){return\"Error in resizeNearestNeighbor: x must be rank 3 or 4, but got rank \"+r.rank+\".\"})),C(2===e.length,(function(){return\"Error in resizeNearestNeighbor: new shape must 2D, but got shape \"+e+\".\"})),C(\"float32\"===r.dtype||\"int32\"===r.dtype,(function(){return\"`images` must have `int32` or `float32` as dtype\"}));var o=r,a=!1;3===r.rank&&(a=!0,o=r.as4D(1,r.shape[0],r.shape[1],r.shape[2]));var i=e[0],s=e[1],u=Lt.runKernelFunc((function(t,e){return e([o]),t.resizeNearestNeighbor(o,i,s,n)}),{batchImages:o},(function(t,e){return{batchImages:function(){return Lt.runKernelFunc((function(r){return r.resizeNearestNeighborBackprop(t,e[0],n)}),{})}}}));return a?u.as3D(u.shape[1],u.shape[2],u.shape[3]):u}}),Qh=An({nonMaxSuppression_:function(t,e,n,r,o){void 0===r&&(r=.5),void 0===o&&(o=Number.NEGATIVE_INFINITY);var a=gn(t,\"boxes\",\"nonMaxSuppression\"),i=gn(e,\"scores\",\"nonMaxSuppression\"),s=Xh(a,i,n,r,o);n=s.maxOutputSize,r=s.iouThreshold,o=s.scoreThreshold;var u={maxOutputSize:n,iouThreshold:r,scoreThreshold:o};return Lt.runKernelFunc((function(t){return t.nonMaxSuppression(a,i,n,r,o)}),{boxes:a,scores:i},null,\"NonMaxSuppressionV3\",u)}}),Jh=function(t,e,o,a,i){return void 0===a&&(a=.5),void 0===i&&(i=Number.NEGATIVE_INFINITY),n(this,void 0,void 0,(function(){var n,s,u,c,l,h,f;return r(this,(function(r){switch(r.label){case 0:return n=gn(t,\"boxes\",\"nonMaxSuppressionAsync\"),s=gn(e,\"scores\",\"nonMaxSuppressionAsync\"),u=Xh(n,s,o,a,i),o=u.maxOutputSize,a=u.iouThreshold,i=u.scoreThreshold,[4,Promise.all([n.data(),s.data()])];case 1:return c=r.sent(),l=c[0],h=c[1],f=Oa(l,h,o,a,i),n!==t&&n.dispose(),s!==e&&s.dispose(),[2,f]}}))}))},Zh=An({nonMaxSuppressionWithScore_:function(t,e,n,r,o,a){void 0===r&&(r=.5),void 0===o&&(o=Number.NEGATIVE_INFINITY),void 0===a&&(a=0);var i=gn(t,\"boxes\",\"nonMaxSuppression\"),s=gn(e,\"scores\",\"nonMaxSuppression\"),u=Xh(i,s,n,r,o,a),c={maxOutputSize:n=u.maxOutputSize,iouThreshold:r=u.iouThreshold,scoreThreshold:o=u.scoreThreshold,softNmsSigma:a=u.softNmsSigma},l=Lt.runKernel(\"NonMaxSuppressionV5\",{boxes:i,scores:s},c);return{selectedIndices:l[0],selectedScores:l[1]}}}),tf=function(t,e,o,a,i,s){return void 0===a&&(a=.5),void 0===i&&(i=Number.NEGATIVE_INFINITY),void 0===s&&(s=0),n(this,void 0,void 0,(function(){var n,u,c,l,h,f,d;return r(this,(function(r){switch(r.label){case 0:return n=gn(t,\"boxes\",\"nonMaxSuppressionAsync\"),u=gn(e,\"scores\",\"nonMaxSuppressionAsync\"),c=Xh(n,u,o,a,i,s),o=c.maxOutputSize,a=c.iouThreshold,i=c.scoreThreshold,s=c.softNmsSigma,[4,Promise.all([n.data(),u.data()])];case 1:return l=r.sent(),h=l[0],f=l[1],d=Ma(h,f,o,a,i,s),n!==t&&n.dispose(),u!==e&&u.dispose(),[2,d]}}))}))},ef=An({cropAndResize_:function(t,e,n,r,o,a){var i=gn(t,\"image\",\"cropAndResize\"),s=gn(e,\"boxes\",\"cropAndResize\",\"float32\"),u=gn(n,\"boxInd\",\"cropAndResize\",\"int32\");o=o||\"bilinear\",a=a||0;var c=s.shape[0];return C(4===i.rank,(function(){return\"Error in cropAndResize: image must be rank 4,but got rank \"+i.rank+\".\"})),C(2===s.rank&&4===s.shape[1],(function(){return\"Error in cropAndResize: boxes must be have size [\"+c+\",4] but had shape \"+s.shape+\".\"})),C(1===u.rank&&u.shape[0]===c,(function(){return\"Error in cropAndResize: boxInd must be have size [\"+c+\"] but had shape \"+s.shape+\".\"})),C(2===r.length,(function(){return\"Error in cropAndResize: cropSize must be of length 2, but got length \"+r.length+\".\"})),C(r[0]>=1&&r[1]>=1,(function(){return\"cropSize must be atleast [1,1], but was \"+r})),C(\"bilinear\"===o||\"nearest\"===o,(function(){return\"method must be bilinear or nearest, but was \"+o})),Lt.runKernelFunc((function(t,e){return t.cropAndResize(i,s,u,r,o,a)}),{images:i,boxes:s,boxInd:u},null,\"CropAndResize\",{method:o,extrapolationValue:a,cropSize:r})}}),nf=Object.freeze({resizeBilinear:Yh,resizeNearestNeighbor:$h,nonMaxSuppression:Qh,nonMaxSuppressionAsync:Jh,nonMaxSuppressionWithScore:Zh,nonMaxSuppressionWithScoreAsync:tf,cropAndResize:ef}),rf=function(t,e){return!(t>0)||\"linear\"===e},of=function(t,e,n){if(null==n||\"linear\"===n)return t;if(\"relu\"===n)return t.mul(e.step());throw new Error(\"Gradient for activation \"+n+\" has not been implemented yet.\")},af=function(t,e){var n=e,r=Br(t.shape,e.shape);return r.length>0&&(n=n.sum(r)),n.reshape(t.shape)},sf=function(t,e,n){if(\"linear\"===e)return t;if(\"relu\"===e)return ah(t);if(\"elu\"===e)return nh(t);if(\"relu6\"===e)return ih(t);if(\"prelu\"===e)return oh(t,n);throw new Error(\"Unknown fused activation \"+e+\".\")};var uf=An({fusedMatMul_:function(t){var e,n=t.a,r=t.b,o=t.transposeA,a=void 0!==o&&o,i=t.transposeB,s=void 0!==i&&i,u=t.bias,c=t.activation,l=void 0===c?\"linear\":c,h=t.preluActivationWeights;if(!1===rf(Lt.state.gradientDepth,l)){var f=El(n,r,a,s);return null!=u&&(f=Or(f,u)),sf(f,l,h)}var d=gn(n,\"a\",\"fused matMul\"),p=gn(r,\"b\",\"fused matMul\");e=Nt(d,p),d=e[0],p=e[1];var v=a?d.shape[d.rank-2]:d.shape[d.rank-1],g=s?p.shape[p.rank-1]:p.shape[p.rank-2],m=a?d.shape[d.rank-1]:d.shape[d.rank-2],y=s?p.shape[p.rank-2]:p.shape[p.rank-1],x=d.shape.slice(0,-2),b=p.shape.slice(0,-2),w=k(x),E=k(b);C(d.rank>=2&&p.rank>=2&&d.rank===p.rank,(function(){return\"Error in fused matMul: inputs must have the same rank of at least 2, got ranks \"+d.rank+\" and \"+p.rank+\".\"})),C(S(x,b),(function(){return\"Error in fused matMul: outer dimensions (\"+x+\") and (\"+b+\") of Tensors with shapes \"+d.shape+\" and \"+p.shape+\" must match.\"})),C(v===g,(function(){return\"Error in fused matMul: inner shapes (\"+v+\") and (\"+g+\") of Tensors with shapes \"+d.shape+\" and \"+p.shape+\" and transposeA=\"+a+\" and transposeB=\"+s+\" must match.\"}));var R,I,A=d.shape.slice(0,-2).concat([m,y]),T=a?d.as3D(w,v,m):d.as3D(w,m,v),D=s?p.as3D(E,y,g):p.as3D(E,g,y);null!=u&&Pr(A,(R=Nt(R=gn(u,\"bias\",\"fused matMul\"),d)[0]).shape),null!=h&&(I=gn(h,\"prelu weights\",\"fused matMul\"));var N={a:T,b:D};null!=u&&(N.bias=R),null!=h&&(N.preluActivationWeights=I);var F=[T,D];return Lt.runKernelFunc((function(t,e){var n=t.fusedBatchMatMul({a:T,b:D,transposeA:a,transposeB:s,bias:R,activation:l,preluActivationWeights:I});return e([T,D,n]),n}),N,(function(t,e){var n=e[0],r=e[1],o=e[2],i=of(t,o,l),c={};return null!=u&&(c={bias:function(){return af(R,i)}}),a||s?!a&&s?Object.assign({a:function(){return i.matMul(r,!1,!1)},b:function(){return i.matMul(n,!0,!1)}},c):a&&!s?Object.assign({a:function(){return r.matMul(i,!1,!0)},b:function(){return n.matMul(i,!1,!1)}},c):Object.assign({a:function(){return r.matMul(i,!0,!0)},b:function(){return i.matMul(n,!0,!0)}},c):Object.assign({a:function(){return i.matMul(r,!1,!0)},b:function(){return n.matMul(i,!0,!1)}},c)}),\"_FusedMatMul\",{transposeA:a,transposeB:s,activation:l},F,[!0]).reshape(A)}}),cf=An({fusedConv2d_:function(t){var e=t.x,n=t.filter,r=t.strides,o=t.pad,a=t.dataFormat,i=void 0===a?\"NHWC\":a,s=t.dilations,u=void 0===s?[1,1]:s,c=t.dimRoundingMode,l=t.bias,h=t.activation,f=void 0===h?\"linear\":h,d=t.preluActivationWeights;if(f=f||\"linear\",!1===rf(Lt.state.gradientDepth,f)){var p=dl(e,n,r,o,i,u,c);return null!=l&&(p=Or(p,l)),sf(p,f,d)}var v=gn(e,\"x\",\"conv2d\"),g=gn(n,\"filter\",\"conv2d\"),m=v,y=!1;3===v.rank&&(y=!0,m=v.as4D(1,v.shape[0],v.shape[1],v.shape[2])),C(4===m.rank,(function(){return\"Error in fused conv2d: input must be rank 4, but got rank \"+m.rank+\".\"})),C(4===g.rank,(function(){return\"Error in fused conv2d: filter must be rank 4, but got rank \"+g.rank+\".\"})),null!=c&&C(A(o),(function(){return\"Error in fused conv2d: pad must be an integer when using, dimRoundingMode \"+c+\" but got pad \"+o+\".\"})),C(m.shape[3]===g.shape[2],(function(){return\"Error in conv2d: depth of input (\"+m.shape[3]+\") must match input depth for filter \"+g.shape[2]+\".\"})),C(Ca(r,u),(function(){return\"Error in conv2D: Either strides or dilations must be 1. Got strides \"+r+\" and dilations '\"+u+\"'\"})),C(\"NHWC\"===i,(function(){return\"Error in conv2d: got dataFormat of \"+i+\" but only NHWC is currently supported.\"}));var x,b,w=pa(m.shape,g.shape,r,u,o,c);null!=l&&(x=Nt(x=gn(l,\"bias\",\"fused conv2d\"),v)[0],Pr(w.outShape,x.shape)),null!=d&&(b=gn(d,\"prelu weights\",\"fused conv2d\"));var E={x:m,filter:g};null!=l&&(E.bias=x),null!=d&&(E.preluActivationWeights=b);var R=[g,m],I=Lt.runKernelFunc((function(t,e){var n=t.fusedConv2d({input:m,filter:g,convInfo:w,bias:x,activation:f,preluActivationWeights:b});return e([g,m,n]),n}),E,(function(t,e){var n=e,a=n[0],i=n[1],s=n[2],c=of(t,s,f);C(wa(u),(function(){return\"Error in gradient of fused conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '\"+u+\"'\"}));var h={};return null!=l&&(h={bias:function(){return af(x,c)}}),Object.assign({x:function(){return gl(i.shape,c,a,r,o)},filter:function(){return vl(i,c,a.shape,r,o)}},h)}),\"FusedConv2D\",{convInfo:w,activation:f},R,[!0]);return y?I.as3D(I.shape[1],I.shape[2],I.shape[3]):I}}),lf=An({fusedDepthwiseConv2d_:function(t){var e=t.x,n=t.filter,r=t.strides,o=t.pad,a=t.dataFormat,i=void 0===a?\"NHWC\":a,s=t.dilations,u=void 0===s?[1,1]:s,c=t.dimRoundingMode,l=t.bias,h=t.activation,f=void 0===h?\"linear\":h,d=t.preluActivationWeights;if(!1===rf(Lt.state.gradientDepth,f)){var p=ml(e,n,r,o,i,u,c);return null!=l&&(p=Or(p,l)),sf(p,f,d)}var v=gn(e,\"x\",\"depthwiseConv2d\"),g=gn(n,\"filter\",\"depthwiseConv2d\"),m=v,y=!1;3===v.rank&&(y=!0,m=v.as4D(1,v.shape[0],v.shape[1],v.shape[2])),C(4===m.rank,(function(){return\"Error in fused depthwiseConv2d: input must be rank 4, but got rank \"+m.rank+\".\"})),C(4===g.rank,(function(){return\"Error in fused depthwiseConv2d: filter must be rank 4, but got rank \"+g.rank+\".\"})),C(m.shape[3]===g.shape[2],(function(){return\"Error in fused depthwiseConv2d: number of input channels (\"+m.shape[3]+\") must match the inChannels dimension in filter \"+g.shape[2]+\".\"})),null==u&&(u=[1,1]),C(Ca(r,u),(function(){return\"Error in fused depthwiseConv2d: Either strides or dilations must be 1. Got strides \"+r+\" and dilations '\"+u+\"'\"})),null!=c&&C(A(o),(function(){return\"Error in fused depthwiseConv2d: pad must be an integer when using dimRoundingMode \"+c+\" but got pad \"+o+\".\"}));var x,b,w=pa(m.shape,g.shape,r,u,o,c,!0);null!=l&&(x=Nt(x=gn(l,\"bias\",\"fused conv2d\"),v)[0],Pr(w.outShape,x.shape)),null!=d&&(b=gn(d,\"prelu weights\",\"fused depthwiseConv2d\"));var E={x:m,filter:g};null!=l&&(E.bias=x),null!=d&&(E.preluActivationWeights=b);var R=[g,m],I=Lt.runKernelFunc((function(t,e){var n=t.fusedDepthwiseConv2D({input:m,filter:g,convInfo:w,bias:x,activation:f,preluActivationWeights:b});return e([g,m,n]),n}),E,(function(t,e){C(wa(u),(function(){return\"Error in gradient of fused depthwiseConv2d: dilation rates greater than 1 are not yet supported. Got dilations '\"+u+\"'\"}));var n=e[0],r=e[1],o=e[2],a=of(t,o,f),i={};return null!=l&&(i={bias:function(){return af(x,a)}}),Object.assign({x:function(){return yl(r.shape,a,n,w)},filter:function(){return xl(r,a,n.shape,w)}},i)}),\"FusedDepthwiseConv2D\",{convInfo:w,activation:f},R,[!0]);return y?I.as3D(I.shape[1],I.shape[2],I.shape[3]):I}}),hf=Object.freeze({matMul:uf,conv2d:cf,depthwiseConv2d:lf}),ff=Object.freeze({image:nf,linalg:jh,losses:zh,spectral:bh,fused:hf,signal:Dh,add:Or,addN:$u,batchNorm:nc,batchNormalization:ec,batchNorm2d:ac,batchNormalization2d:oc,batchNorm3d:uc,batchNormalization3d:sc,batchNorm4d:hc,batchNormalization4d:lc,broadcastTo:fc,clone:dc,div:Bo,divNoNan:bc,eye:Cc,multinomial:Ec,oneHot:Rc,pad:Ic,pad1d:kc,pad2d:Sc,pad3d:Ac,pad4d:Tc,rand:Dc,randomGamma:Uc,randomNormal:Vc,randomUniform:zc,square:Gc,squaredDifference:Hc,tile:wc,truncatedNormal:qc,conv1d:fl,conv2d:dl,conv3d:pl,depthwiseConv2d:ml,separableConv2d:bl,conv2dTranspose:wl,conv3dTranspose:Cl,op:An,booleanMaskAsync:ul,complex:Tn,real:Dn,imag:Nn,concat:Yn,concat1d:$n,concat2d:Qn,concat3d:Jn,concat4d:Zn,split:tr,matMul:El,dot:Rl,outerProduct:Il,reverse:kl,reverse1d:Sl,reverse2d:Al,reverse3d:Tl,reverse4d:Dl,maxPool:_l,avgPool:Ol,pool:Ml,maxPool3d:Bl,avgPool3d:Pl,maxPoolWithArgmax:Ll,slice:Wl,slice1d:Ul,slice2d:Vl,slice3d:zl,slice4d:Gl,abs:Lr,acos:Wr,acosh:Ur,asin:Vr,asinh:zr,atan:Gr,atanh:Hr,ceil:qr,clipByValue:Kr,cos:jr,cosh:Xr,erf:Yr,exp:$r,expm1:Qr,floor:Jr,log:Zr,log1p:to,logSigmoid:eo,neg:no,reciprocal:ro,round:oo,rsqrt:ao,sigmoid:io,sign:so,isNaN:uo,isInf:co,isFinite:lo,sin:ho,sinh:fo,softplus:po,sqrt:vo,step:go,tan:mo,tanh:yo,all:ql,any:Kl,argMax:jl,argMin:Xl,logSumExp:Yl,max:$l,mean:Ql,min:Jl,moments:Zl,sum:th,prod:eh,equal:Kc,equalStrict:jc,greater:Xc,greaterEqual:Yc,greaterEqualStrict:$c,greaterStrict:Qc,less:Jc,lessEqual:Zc,lessEqualStrict:tl,lessStrict:el,notEqual:nl,notEqualStrict:rl,addStrict:xo,atan2:bo,divStrict:wo,floorDiv:Co,maximum:Eo,maximumStrict:Ro,minimum:Io,minimumStrict:ko,mod:So,modStrict:Ao,mul:To,mulStrict:Do,pow:No,powStrict:Fo,squaredDifferenceStrict:_o,sub:Oo,subStrict:Mo,elu:nh,leakyRelu:rh,prelu:oh,relu:ah,relu6:ih,selu:sh,logicalAnd:pc,logicalNot:vc,logicalOr:gc,logicalXor:mc,where:yc,whereAsync:xc,buffer:er,print:nr,batchToSpaceND:rr,cast:or,cumsum:ar,depthToSpace:ir,expandDims:sr,reshape:ur,spaceToBatchND:cr,squeeze:lr,stack:hr,unstack:fr,setdiff1dAsync:dr,fill:Hn,linspace:qn,ones:zn,range:Kn,scalar:On,tensor:Fn,tensor1d:Mn,tensor2d:Bn,tensor3d:Pn,tensor4d:Ln,tensor5d:Wn,tensor6d:Un,variable:Vn,zeros:Gn,onesLike:jn,zerosLike:Xn,transpose:ua,softmax:ia,logSoftmax:sa,localResponseNormalization:uh,norm:ch,gather:il,unsortedSegmentSum:sl,basicLSTMCell:lh,multiRNNCell:hh,movingAverage:fh,stridedSlice:dh,topk:ph,scatterND:vh,fft:gh,ifft:mh,rfft:yh,irfft:xh,sparseToDense:wh,gatherND:Ch,diag:Eh,dropout:Rh,hannWindow:kh,hammingWindow:Sh,frame:Ah,stft:Th,inTopKAsync:Fh});function df(t,e){Array.isArray(t)||(t=[t]),t.forEach((function(t){null!=t&&C(\"complex64\"!==t.dtype,(function(){return e+\" does not support complex64 tensors.\"}))}))}function pf(t,e,n,r,o,a){for(var i=o.strideHeight,s=o.strideWidth,u=o.dilationHeight,c=o.dilationWidth,l=o.effectiveFilterHeight,h=o.effectiveFilterWidth,f=o.padInfo.top,d=o.padInfo.left,p=\"max\"===a?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,v=er(o.outShape,n),g=v.values,m=o.outShape[1]*o.outShape[2]*o.outShape[3],y=o.outShape[2]*o.outShape[3],x=o.outShape[3],b=0;b<o.batchSize;++b)for(var w=b*m,C=b*r[0],E=0;E<o.inChannels;++E)for(var R=0;R<o.outHeight;++R)for(var I=R*i-f,k=Math.max(0,I),S=Math.min(o.inHeight,l+I),A=w+R*y,T=0;T<o.outWidth;++T){for(var D=T*s-d,N=Math.max(0,D),F=Math.min(o.inWidth,h+D),_=p,O=0,M=0,B=k;B<S;B+=u){for(var P=C+B*r[1],L=N;L<F;L+=c){var W=t[P+L*r[2]+E];\"max\"===a&&W>_?_=W:\"avg\"===a&&(O+=W,M++)}if(isNaN(_))break}g[A+T*x+E]=\"avg\"===a?O/M:_}return v}function vf(t,e,n,r,o,a){void 0===o&&(o=!1),void 0===a&&(a=!1);for(var i=er(r.outShape,\"int32\"),s=r.strideHeight,u=r.strideWidth,c=r.dilationHeight,l=r.dilationWidth,h=r.effectiveFilterHeight,f=r.effectiveFilterWidth,d=r.padInfo.top,p=r.padInfo.left,v=er(e,n,t),g=0;g<r.batchSize;++g)for(var m=0;m<r.inChannels;++m)for(var y=0;y<r.outHeight;++y){for(var x=y*s-d,b=x;b<0;)b+=c;for(var w=Math.min(r.inHeight,h+x),C=0;C<r.outWidth;++C){for(var E=C*u-p,R=E;R<0;)R+=l;for(var I=Math.min(r.inWidth,f+E),k=Number.NEGATIVE_INFINITY,S=-1,A=b;A<w;A+=c)for(var T=A-x,D=R;D<I;D+=l){var N=D-E,F=v.get(g,A,D,m);F>k&&(k=F,S=o?a?((g*r.inHeight+A)*r.inWidth+D)*r.inChannels+m:(A*r.inWidth+D)*r.inChannels+m:T*f+N)}i.set(S,g,y,C,m)}}return i}function gf(t,e,n,r){if(\"linear\"===n)return t.linear(e);if(\"relu\"===n)return t.relu(e);if(\"elu\"===n)return t.elu(e);if(\"relu6\"===n)return t.relu6(e);if(\"prelu\"===n)return t.prelu(e,r);throw new Error(\"Activation \"+n+\" has not been implemented for the CPU backend.\")}var mf=function(t){function o(){var e=t.call(this)||this;return e.blockSize=48,e.firstUse=!0,e.data=new ca(e,Lt),e}return e(o,t),o.prototype.write=function(t,e,n){this.firstUse&&(this.firstUse=!1,i().get(\"IS_NODE\")&&dn(\"\\n============================\\nHi there 👋. Looks like you are running TensorFlow.js in Node.js. To speed things up dramatically, install our node backend, which binds to TensorFlow C++, by running npm i @tensorflow/tfjs-node, or npm i @tensorflow/tfjs-node-gpu if you have CUDA. Then call require('@tensorflow/tfjs-node'); (-gpu suffix for CUDA) at the start of your program. Visit https://github.com/tensorflow/tfjs-node for more details.\\n============================\"));var r={};return this.data.set(r,{values:t,dtype:n}),r},o.prototype.move=function(t,e,n,r){this.data.set(t,{values:e,dtype:r})},o.prototype.numDataIds=function(){return this.data.numDataIds()},o.prototype.read=function(t){return n(this,void 0,void 0,(function(){return r(this,(function(e){return[2,this.readSync(t)]}))}))},o.prototype.readSync=function(t){var e=this.data.get(t),n=e.dtype,r=e.complexTensors;return\"complex64\"===n?Aa(this.readSync(r.real.dataId),this.readSync(r.imag.dataId)):this.data.get(t).values},o.prototype.bufferSync=function(t){var e=this.readSync(t.dataId),n=e;if(\"string\"===t.dtype)try{n=e.map((function(t){return ot(t)}))}catch(t){throw new Error(\"Failed to decode encoded string bytes into utf-8\")}return er(t.shape,t.dtype,n)},o.prototype.makeOutput=function(t,e,n){var r=this.write(t,e,n);return Lt.makeTensorFromDataId(r,e,n,this)},o.prototype.disposeData=function(t){if(this.data.has(t)){var e=this.data.get(t).complexTensors;null!=e&&(e.real.dispose(),e.imag.dispose()),this.data.delete(t)}},o.prototype.time=function(t){return n(this,void 0,void 0,(function(){var e;return r(this,(function(n){return e=et(),t(),[2,{kernelMs:et()-e}]}))}))},o.prototype.memory=function(){return{unreliable:!0,reasons:[\"The reported memory is an upper bound. Due to automatic garbage collection, the true allocated memory may be less.\"]}},o.prototype.complex=function(t,e){var n=this.makeOutput(null,t.shape,\"complex64\");return this.data.get(n.dataId).complexTensors={real:Lt.keep(t.clone()),imag:Lt.keep(e.clone())},n},o.prototype.real=function(t){return this.data.get(t.dataId).complexTensors.real.clone()},o.prototype.imag=function(t){return this.data.get(t.dataId).complexTensors.imag.clone()},o.prototype.slice=function(t,e,n){if(df(t,\"slice\"),$o(t.shape,e,n)){var r=Qo(e,t.strides),o=k(n);return Fn(this.readSync(t.dataId).subarray(r,r+o),n,t.dtype)}for(var a=er(n,t.dtype),i=this.bufferSync(t),s=0;s<a.size;++s){var u=a.indexToLoc(s).map((function(t,n){return t+e[n]}));a.values[s]=i.get.apply(i,u)}return a.toTensor()},o.prototype.stridedSlice=function(t,e,n,r){df(t,\"stridedSlice\");var o=jo(e,n,r);if(o.some((function(t){return 0===t})))return Fn([],o);for(var a=er(o,t.dtype),i=this.bufferSync(t),s=0;s<a.size;s++){for(var u=a.indexToLoc(s),c=new Array(u.length),l=0;l<c.length;l++)c[l]=u[l]*r[l]+e[l];a.set.apply(a,[i.get.apply(i,c)].concat(u))}return a.toTensor()},o.prototype.diag=function(t){for(var e=this.readSync(t.dataId),n=er([t.size,t.size],t.dtype),r=n.values,o=0;o<e.length;o++)r[o*t.size+o]=e[o];return n.toTensor()},o.prototype.unstack=function(t,e){for(var n=t.shape[e],r=new Array(t.rank-1),o=0,a=0;a<t.rank;a++)a!==e&&(r[o++]=t.shape[a]);var i=new Array(t.rank).fill(0),s=t.shape.slice();s[e]=1;var u=new Array(n);for(a=0;a<u.length;a++)i[e]=a,u[a]=this.slice(t,i,s).reshape(r);return u},o.prototype.reverse=function(t,e){df(t,\"reverse\");for(var n=er(t.shape,t.dtype),r=this.bufferSync(t),o=function(o){var a=n.indexToLoc(o),i=a.slice();e.forEach((function(e){return i[e]=t.shape[e]-1-i[e]})),n.set.apply(n,[r.get.apply(r,i)].concat(a))},a=0;a<n.size;a++)o(a);return n.toTensor()},o.prototype.concat=function(t,e){var n=this;if(\"complex64\"===t[0].dtype){var r=t.map((function(t){return Dn(t)})),o=t.map((function(t){return Nn(t)}));return Tn(this.concat(r,e),this.concat(o,e))}var a=t.map((function(t){var n=k(t.shape.slice(e));return t.as2D(-1,n)})),i=Sn(a.map((function(t){return t.shape})),1),s=er(i,t[0].dtype).values;if(1===a[0].shape[0]){var u=0;a.forEach((function(t){s.set(n.readSync(t.dataId),u),u+=t.size}))}else{var c=0;a.forEach((function(t){for(var e=n.readSync(t.dataId),r=0,o=0;o<t.shape[0];++o)for(var a=o*i[1]+c,u=0;u<t.shape[1];++u)s[a+u]=e[r++];c+=t.shape[1]}))}var l=Sn(t.map((function(t){return t.shape})),e);return Fn(s,l,t[0].dtype)},o.prototype.neg=function(t){return df(t,\"neg\"),this.multiply(On(-1),t)},o.prototype.add=function(t,e){return\"complex64\"===t.dtype||\"complex64\"===e.dtype?this.broadcastedBinaryComplexOp(t.cast(\"complex64\"),e.cast(\"complex64\"),(function(t,e,n,r){return{real:t+n,imag:e+r}})):this.broadcastedBinaryOp(t,e,Tt(t.dtype,e.dtype),(function(t,e){return t+e}))},o.prototype.addN=function(t){var e=this;df(t,\"addN\");for(var n=t.map((function(t){return e.readSync(t.dataId)})),r=er(t[0].shape,t[0].dtype),o=r.values,a=0;a<t.length;a++)for(var i=n[a],s=0;s<o.length;s++)o[s]+=i[s];return r.toTensor()},o.prototype.softmax=function(t,e){var n=O([e],t.shape),r=this.max(t,n),o=wn(r.shape,n),a=this.subtract(t,r.reshape(o)),i=this.exp(a),s=this.sum(i,n).reshape(o);return Bo(i,s)},o.prototype.subtract=function(t,e){return\"complex64\"===t.dtype||\"complex64\"===e.dtype?this.broadcastedBinaryComplexOp(t.cast(\"complex64\"),e.cast(\"complex64\"),(function(t,e,n,r){return{real:t-n,imag:e-r}})):this.broadcastedBinaryOp(t,e,Tt(t.dtype,e.dtype),(function(t,e){return t-e}))},o.prototype.pow=function(t,e){return df([t,e],\"pow\"),this.broadcastedBinaryOp(t,e,t.dtype,(function(t,e){return Math.pow(t,e)}))},o.prototype.batchMatMul=function(t,e,n,r){df([t,e],\"matMul\");for(var o=n?t.shape[1]:t.shape[2],a=n?t.shape[2]:t.shape[1],i=r?e.shape[1]:e.shape[2],s=t.shape[0],u=this.readSync(t.dataId),c=this.readSync(e.dataId),l=n?[t.strides[0],1,t.strides[1]]:[t.strides[0],t.strides[1],1],h=l[0],f=l[1],d=l[2],p=r?[1,e.strides[1],e.strides[0]]:[e.strides[1],1,e.strides[0]],v=p[0],g=p[1],m=p[2],y=a*i,x=er([s,a,i],t.dtype),b=x.values,w=this.blockSize,C=0;C<s;C++)for(var E=0;E<a;E+=w)for(var R=0;R<i;R+=w)for(var I=0;I<o;I+=w)for(var k=Math.min(E+w,a),S=Math.min(R+w,i),A=Math.min(I+w,o),T=E;T<k;T++)for(var D=R;D<S;D++){for(var N=0,F=I;F<A;F++)N+=u[C*h+T*f+F*d]*c[F*v+D*g+C*m];b[C*y+(T*i+D)]+=N}return x.toTensor()},o.prototype.fusedBatchMatMul=function(t){var e=t.a,n=t.b,r=t.transposeA,o=t.transposeB,a=t.bias,i=t.activation,s=t.preluActivationWeights,u=this.batchMatMul(e,n,r,o);return a&&(u=this.add(u,a)),i&&(u=gf(this,u,i,s)),u},o.prototype.multiply=function(t,e){return\"complex64\"===t.dtype||\"complex64\"===e.dtype?this.broadcastedBinaryComplexOp(t.cast(\"complex64\"),e.cast(\"complex64\"),(function(t,e,n,r){return{real:t*n-e*r,imag:t*r+e*n}})):this.broadcastedBinaryOp(t,e,Tt(t.dtype,e.dtype),(function(t,e){return t*e}))},o.prototype.floorDiv=function(t,e){df([t,e],\"floorDiv\");return this.broadcastedBinaryOp(t,e,\"int32\",(function(t,e){return Math.floor(t/e)}))},o.prototype.sum=function(t,e){df(t,\"sum\"),Cn(\"sum\",e,t.rank);for(var n=bn(t.shape,e),r=n[0],o=n[1],a=Gn(r,Tt(t.dtype,\"int32\")),i=k(o),s=this.readSync(a.dataId),u=this.readSync(t.dataId),c=0;c<s.length;++c){for(var l=c*i,h=0,f=0;f<i;++f)h+=u[l+f];s[c]=h}return a},o.prototype.prod=function(t,e){df(t,\"sum\");for(var n=bn(t.shape,e),r=n[0],o=n[1],a=Gn(r,Tt(t.dtype,\"int32\")),i=k(o),s=this.readSync(a.dataId),u=this.readSync(t.dataId),c=0;c<s.length;++c){for(var l=c*i,h=1,f=0;f<i;++f)h*=u[l+f];s[c]=h}return a},o.prototype.unsortedSegmentSum=function(t,e,n){df(t,\"unsortedSegmentSum\");for(var r=[],o=t.rank-e.rank,a=0;a<o;++a)e=e.expandDims(a+1);for(a=0;a<n;++a){var i=On(a,\"int32\"),s=Kc(i,e).asType(\"float32\").mul(t).sum(0);r.push(s)}return hr(r)},o.prototype.argMin=function(t,e){df(t,\"argMin\");var n=[e];Cn(\"argMin\",n,t.rank);for(var r=bn(t.shape,n),o=r[0],a=r[1],i=Gn(o,\"int32\"),s=k(a),u=this.readSync(i.dataId),c=this.readSync(t.dataId),l=0;l<u.length;++l){for(var h=l*s,f=c[h],d=0,p=0;p<s;++p){var v=c[h+p];v<f&&(f=v,d=p)}u[l]=d}return i},o.prototype.argMax=function(t,e){df(t,\"argMax\");var n=[e];Cn(\"argMax\",n,t.rank);for(var r=bn(t.shape,n),o=r[0],a=r[1],i=Gn(o,\"int32\"),s=k(a),u=this.readSync(i.dataId),c=this.readSync(t.dataId),l=0;l<u.length;++l){for(var h=l*s,f=c[h],d=0,p=0;p<s;++p){var v=c[h+p];v>f&&(f=v,d=p)}u[l]=d}return i},o.prototype.cumsum=function(t,e,n,r){if(df(t,\"cumsum\"),e!==t.rank-1)throw new Error(\"backend.cumsum in CPU expects an inner-most axis=\"+(t.rank-1)+\" but got axis=\"+e);for(var o=Tt(t.dtype,\"int32\"),a=Gn(t.shape,o),i=this.readSync(a.dataId),s=this.readSync(t.dataId),u=t.shape[t.rank-1],c=r?function(t,e){return t+u-e-1}:function(t,e){return t+e},l=0;l<s.length;l+=u)for(var h=0;h<u;h++){var f=c(l,h);if(0===h)i[f]=n?0:s[f];else{var d=c(l,h-1);i[f]=n?s[d]+i[d]:s[f]+i[d]}}return a},o.prototype.equal=function(t,e){return df([t,e],\"equal\"),this.broadcastedBinaryOp(t,e,\"bool\",(function(t,e){return t===e?1:0}))},o.prototype.notEqual=function(t,e){return df([t,e],\"notEqual\"),this.broadcastedBinaryOp(t,e,\"bool\",(function(t,e){return t!==e?1:0}))},o.prototype.less=function(t,e){return df([t,e],\"less\"),this.broadcastedBinaryOp(t,e,\"bool\",(function(t,e){return t<e?1:0}))},o.prototype.lessEqual=function(t,e){return df([t,e],\"lessEqual\"),this.broadcastedBinaryOp(t,e,\"bool\",(function(t,e){return t<=e?1:0}))},o.prototype.greater=function(t,e){return df([t,e],\"greater\"),this.broadcastedBinaryOp(t,e,\"bool\",(function(t,e){return t>e?1:0}))},o.prototype.greaterEqual=function(t,e){return df([t,e],\"greaterEqual\"),this.broadcastedBinaryOp(t,e,\"bool\",(function(t,e){return t>=e?1:0}))},o.prototype.logicalNot=function(t){df(t,\"logicalNot\");for(var e=this.readSync(t.dataId),n=new Uint8Array(e.length),r=0;r<e.length;++r)n[r]=e[r]?0:1;return this.makeOutput(n,t.shape,\"bool\")},o.prototype.logicalAnd=function(t,e){return df([t,e],\"logicalAnd\"),this.broadcastedBinaryOp(t,e,\"bool\",(function(t,e){return t&&e}))},o.prototype.logicalOr=function(t,e){return df([t,e],\"logicalOr\"),this.broadcastedBinaryOp(t,e,\"bool\",(function(t,e){return t||e}))},o.prototype.select=function(t,e,n){df([t,e,n],\"select\");for(var r=this.readSync(t.dataId),o=this.readSync(e.dataId),a=this.readSync(n.dataId),i=Gn(e.shape,Tt(e.dtype,n.dtype)),s=this.readSync(i.dataId),u=0,c=0===t.rank||t.rank>1||1===e.rank?1:k(e.shape.slice(1)),l=0;l<r.length;l++)for(var h=0;h<c;h++)1===r[l]?s[u++]=o[l]:s[u++]=a[l];return i},o.prototype.where=function(t){df([t],\"where\");var e=this.readSync(t.dataId);return Ga(t.shape,e)},o.prototype.topk=function(t,e,n){return df(t,\"topk\"),za(this.readSync(t.dataId),t.shape,t.dtype,e)},o.prototype.min=function(t,e){df(t,\"min\"),Cn(\"min\",e,t.rank);for(var n=bn(t.shape,e),r=n[0],o=n[1],a=Gn(r,t.dtype),i=k(o),s=this.readSync(a.dataId),u=this.readSync(t.dataId),c=0;c<s.length;++c){for(var l=c*i,h=u[l],f=0;f<i;++f){var d=u[l+f];d<h&&(h=d)}s[c]=h}return a},o.prototype.minimum=function(t,e){return df([t,e],\"minimum\"),this.broadcastedBinaryOp(t,e,t.dtype,(function(t,e){return Math.min(t,e)}))},o.prototype.mod=function(t,e){return df([t,e],\"mod\"),this.broadcastedBinaryOp(t,e,t.dtype,(function(t,e){var n=t%e;return t<0&&e<0||t>=0&&e>=0?n:(n+e)%e}))},o.prototype.max=function(t,e){df(t,\"max\"),Cn(\"max\",e,t.rank);for(var n=bn(t.shape,e),r=n[0],o=n[1],a=Gn(r,t.dtype),i=k(o),s=this.readSync(a.dataId),u=this.readSync(t.dataId),c=0;c<s.length;++c){for(var l=c*i,h=u[l],f=0;f<i;++f){var d=u[l+f];d>h&&(h=d)}s[c]=h}return a},o.prototype.maximum=function(t,e){return df([t,e],\"maximum\"),this.broadcastedBinaryOp(t,e,t.dtype,(function(t,e){return Math.max(t,e)}))},o.prototype.all=function(t,e){df(t,\"all\"),Cn(\"all\",e,t.rank);for(var n=bn(t.shape,e),r=n[0],o=n[1],a=Gn(r,t.dtype),i=k(o),s=this.readSync(a.dataId),u=this.readSync(t.dataId),c=0;c<s.length;++c){for(var l=c*i,h=u[l],f=0;f<i;++f){var d=u[l+f];h=h&&d}s[c]=h}return a},o.prototype.any=function(t,e){df(t,\"any\"),Cn(\"any\",e,t.rank);for(var n=bn(t.shape,e),r=n[0],o=n[1],a=Gn(r,t.dtype),i=k(o),s=this.readSync(a.dataId),u=this.readSync(t.dataId),c=0;c<s.length;++c){for(var l=c*i,h=u[l],f=0;f<i;++f){var d=u[l+f];h=h||d}s[c]=h}return a},o.prototype.squaredDifference=function(t,e){return df([t,e],\"squaredDifference\"),this.broadcastedBinaryOp(t,e,t.dtype,(function(t,e){var n=t-e;return n*n}))},o.prototype.ceil=function(t){df(t,\"ceil\");for(var e=this.readSync(t.dataId),n=new Float32Array(e.length),r=0;r<e.length;++r)n[r]=Math.ceil(e[r]);return this.makeOutput(n,t.shape,\"float32\")},o.prototype.floor=function(t){df(t,\"floor\");for(var e=this.readSync(t.dataId),n=new Float32Array(e.length),r=0;r<e.length;++r)n[r]=Math.floor(e[r]);return this.makeOutput(n,t.shape,\"float32\")},o.prototype.sign=function(t){df(t,\"x\");for(var e=this.readSync(t.dataId),n=new Float32Array(e.length),r=0;r<e.length;++r)e[r]<0?n[r]=-1:e[r]>0?n[r]=1:n[r]=0;return this.makeOutput(n,t.shape,\"float32\")},o.prototype.isNaN=function(t){df(t,\"x\");for(var e=this.readSync(t.dataId),n=new Uint8Array(e.length),r=0;r<e.length;++r)Number.isNaN(e[r])&&(n[r]=1);return this.makeOutput(n,t.shape,\"bool\")},o.prototype.isInf=function(t){df(t,\"x\");for(var e=this.readSync(t.dataId),n=new Uint8Array(e.length),r=0;r<e.length;++r)Math.abs(e[r])===1/0&&(n[r]=1);return this.makeOutput(n,t.shape,\"bool\")},o.prototype.isFinite=function(t){df(t,\"x\");for(var e=this.readSync(t.dataId),n=new Uint8Array(e.length),r=0;r<e.length;++r)Number.isFinite(e[r])&&(n[r]=1);return this.makeOutput(n,t.shape,\"bool\")},o.prototype.round=function(t){df(t,\"round\");for(var e=this.readSync(t.dataId),n=new Float32Array(e.length),r=0;r<e.length;++r){var o=Math.floor(e[r]);e[r]-o<.5?n[r]=Math.floor(e[r]):e[r]-o>.5?n[r]=Math.ceil(e[r]):n[r]=o%2==0?o:o+1}return this.makeOutput(n,t.shape,\"float32\")},o.prototype.exp=function(t){df(t,\"exp\");for(var e=this.readSync(t.dataId),n=new Float32Array(e.length),r=0;r<e.length;++r)n[r]=Math.exp(e[r]);return this.makeOutput(n,t.shape,\"float32\")},o.prototype.expm1=function(t){df(t,\"expm1\");for(var e=this.readSync(t.dataId),n=new Float32Array(e.length),r=0;r<e.length;++r)n[r]=Math.expm1(e[r]);return this.makeOutput(n,t.shape,\"float32\")},o.prototype.log=function(t){df(t,\"log\");for(var e=this.readSync(t.dataId),n=new Float32Array(e.length),r=0;r<e.length;++r){var o=e[r];n[r]=Math.log(o)}return this.makeOutput(n,t.shape,\"float32\")},o.prototype.log1p=function(t){df(t,\"log1p\");for(var e=this.readSync(t.dataId),n=new Float32Array(e.length),r=0;r<e.length;++r){var o=e[r];n[r]=Math.log1p(o)}return this.makeOutput(n,t.shape,\"float32\")},o.prototype.sqrt=function(t){df(t,\"sqrt\");for(var e=this.readSync(t.dataId),n=new Float32Array(e.length),r=0;r<e.length;++r){var o=e[r];n[r]=Math.sqrt(o)}return this.makeOutput(n,t.shape,\"float32\")},o.prototype.rsqrt=function(t){df(t,\"rsqrt\");for(var e=this.readSync(t.dataId),n=new Float32Array(e.length),r=0;r<e.length;++r){var o=e[r];n[r]=1/Math.sqrt(o)}return this.makeOutput(n,t.shape,\"float32\")},o.prototype.reciprocal=function(t){df(t,\"reciprocal\");for(var e=this.readSync(t.dataId),n=new Float32Array(e.length),r=0;r<e.length;++r)n[r]=1/e[r];return this.makeOutput(n,t.shape,\"float32\")},o.prototype.linear=function(t){return t},o.prototype.relu=function(t){df(t,\"relu\");for(var e=Gn(t.shape,t.dtype),n=this.readSync(e.dataId),r=this.readSync(t.dataId),o=0;o<r.length;++o)n[o]=Math.max(0,r[o]);return e},o.prototype.relu6=function(t){df(t,\"relu\");for(var e=Gn(t.shape,t.dtype),n=this.readSync(e.dataId),r=this.readSync(t.dataId),o=0;o<r.length;++o)n[o]=Math.min(Math.max(0,r[o]),6);return e},o.prototype.prelu=function(t,e){return df([t,e],\"prelu\"),this.broadcastedBinaryOp(t,e,t.dtype,(function(t,e){return t<0?e*t:t}))},o.prototype.elu=function(t){df(t,\"elu\");for(var e=new Float32Array(t.size),n=this.readSync(t.dataId),r=0;r<n.length;++r){var o=n[r];e[r]=o>=0?o:Math.exp(o)-1}return this.makeOutput(e,t.shape,\"float32\")},o.prototype.eluDer=function(t,e){df([t,e],\"eluDer\");for(var n=new Float32Array(e.size),r=this.readSync(e.dataId),o=this.readSync(t.dataId),a=0;a<r.length;++a){var i=r[a];n[a]=i>=1?o[a]:o[a]*(i+1)}return this.makeOutput(n,e.shape,\"float32\")},o.prototype.selu=function(t){df(t,\"selu\");for(var e=su,n=uu,r=new Float32Array(t.size),o=this.readSync(t.dataId),a=0;a<o.length;++a){var i=o[a];r[a]=i>=0?n*i:e*(Math.exp(i)-1)}return this.makeOutput(r,t.shape,\"float32\")},o.prototype.clip=function(t,e,n){df(t,\"clip\");for(var r=new Float32Array(t.size),o=this.readSync(t.dataId),a=0;a<o.length;++a){var i=o[a];r[a]=i>n?n:i<e?e:i}return this.makeOutput(r,t.shape,\"float32\")},o.prototype.abs=function(t){for(var e=new Float32Array(t.size),n=this.readSync(t.dataId),r=0;r<n.length;++r)e[r]=Math.abs(n[r]);return this.makeOutput(e,t.shape,\"float32\")},o.prototype.complexAbs=function(t){for(var e=new Float32Array(t.size),n=this.readSync(t.dataId),r=0;r<t.size;++r){var o=n[2*r],a=n[2*r+1];e[r]=Math.hypot(o,a)}return this.makeOutput(e,t.shape,\"float32\")},o.prototype.int=function(t){df(t,\"int\");for(var e=new Int32Array(t.size),n=this.readSync(t.dataId),r=0;r<n.length;++r)e[r]=n[r];return this.makeOutput(e,t.shape,\"int32\")},o.prototype.sigmoid=function(t){df(t,\"sigmoid\");for(var e=new Float32Array(t.size),n=this.readSync(t.dataId),r=0;r<n.length;++r)e[r]=1/(1+Math.exp(-n[r]));return this.makeOutput(e,t.shape,\"float32\")},o.prototype.softplus=function(t){df(t,\"softplus\");for(var e=Math.log(1.1920928955078125e-7)+2,n=new Float32Array(t.size),r=this.readSync(t.dataId),o=0;o<r.length;++o){var a=r[o]>-e,i=r[o]<e,s=Math.exp(r[o]),u=void 0;u=i?s:a?r[o]:Math.log(1+s),n[o]=u}return this.makeOutput(n,t.shape,\"float32\")},o.prototype.sin=function(t){df(t,\"sin\");for(var e=new Float32Array(t.size),n=this.readSync(t.dataId),r=0;r<n.length;++r)e[r]=Math.sin(n[r]);return this.makeOutput(e,t.shape,\"float32\")},o.prototype.cos=function(t){df(t,\"cos\");for(var e=new Float32Array(t.size),n=this.readSync(t.dataId),r=0;r<n.length;++r)e[r]=Math.cos(n[r]);return this.makeOutput(e,t.shape,\"float32\")},o.prototype.tan=function(t){df(t,\"tan\");for(var e=new Float32Array(t.size),n=this.readSync(t.dataId),r=0;r<n.length;++r)e[r]=Math.tan(n[r]);return this.makeOutput(e,t.shape,\"float32\")},o.prototype.asin=function(t){df(t,\"asin\");for(var e=new Float32Array(t.size),n=this.readSync(t.dataId),r=0;r<n.length;++r)e[r]=Math.asin(n[r]);return this.makeOutput(e,t.shape,\"float32\")},o.prototype.acos=function(t){df(t,\"acos\");for(var e=new Float32Array(t.size),n=this.readSync(t.dataId),r=0;r<n.length;++r)e[r]=Math.acos(n[r]);return this.makeOutput(e,t.shape,\"float32\")},o.prototype.atan=function(t){df(t,\"atan\");for(var e=new Float32Array(t.size),n=this.readSync(t.dataId),r=0;r<n.length;++r)e[r]=Math.atan(n[r]);return this.makeOutput(e,t.shape,\"float32\")},o.prototype.atan2=function(t,e){return df([t,e],\"atan2\"),this.broadcastedBinaryOp(t,e,t.dtype,(function(t,e){return Math.atan2(t,e)}))},o.prototype.sinh=function(t){df(t,\"sinh\");for(var e=new Float32Array(t.size),n=this.readSync(t.dataId),r=0;r<n.length;++r)e[r]=Math.sinh(n[r]);return this.makeOutput(e,t.shape,\"float32\")},o.prototype.cosh=function(t){df(t,\"cosh\");for(var e=new Float32Array(t.size),n=this.readSync(t.dataId),r=0;r<n.length;++r)e[r]=Math.cosh(n[r]);return this.makeOutput(e,t.shape,\"float32\")},o.prototype.tanh=function(t){df(t,\"tanh\");for(var e=new Float32Array(t.size),n=this.readSync(t.dataId),r=0;r<n.length;++r)e[r]=T(n[r]);return this.makeOutput(e,t.shape,\"float32\")},o.prototype.asinh=function(t){df(t,\"asinh\");for(var e=new Float32Array(t.size),n=this.readSync(t.dataId),r=0;r<n.length;++r)e[r]=Math.asinh(n[r]);return this.makeOutput(e,t.shape,\"float32\")},o.prototype.acosh=function(t){df(t,\"acosh\");for(var e=new Float32Array(t.size),n=this.readSync(t.dataId),r=0;r<n.length;++r)e[r]=Math.acosh(n[r]);return this.makeOutput(e,t.shape,\"float32\")},o.prototype.atanh=function(t){df(t,\"atanh\");for(var e=new Float32Array(t.size),n=this.readSync(t.dataId),r=0;r<n.length;++r)e[r]=Math.atanh(n[r]);return this.makeOutput(e,t.shape,\"float32\")},o.prototype.erf=function(t){df(t,\"erf\");for(var e=new Float32Array(t.size),n=this.readSync(t.dataId),r=0;r<n.length;++r){var o=Math.sign(n[r]),a=Math.abs(n[r]),i=1/(1+.3275911*a);e[r]=o*(1-((((1.061405429*i-1.453152027)*i+1.421413741)*i-.284496736)*i+.254829592)*i*Math.exp(-a*a))}return this.makeOutput(e,t.shape,\"float32\")},o.prototype.step=function(t,e){void 0===e&&(e=0),df(t,\"step\");for(var n=new Float32Array(t.size),r=this.readSync(t.dataId),o=0;o<r.length;++o){var a=r[o];isNaN(a)?n[o]=NaN:n[o]=a>0?1:e}return this.makeOutput(n,t.shape,\"float32\")},o.prototype.fusedConv2d=function(t){var e=t.input,n=t.filter,r=t.convInfo,o=t.bias,a=t.activation,i=t.preluActivationWeights,s=this.conv2d(e,n,r);return o&&(s=this.add(s,o)),a&&(s=gf(this,s,a,i)),s},o.prototype.conv2d=function(t,e,n){df([t,e],\"conv2d\");for(var r=n.filterHeight,o=n.filterWidth,a=n.dilationHeight,i=n.dilationWidth,s=n.padInfo.left,u=n.padInfo.top,c=\"channelsLast\"===n.dataFormat,l=er(n.outShape,t.dtype),h=t.strides[0],f=c?t.strides[1]:t.strides[2],d=c?t.strides[2]:1,p=c?1:t.strides[1],v=l.strides[0],g=c?l.strides[1]:l.strides[2],m=c?l.strides[2]:1,y=c?1:l.strides[1],x=this.readSync(t.dataId),b=this.readSync(e.dataId),w=l.values,C=0;C<n.batchSize;++C)for(var E=C*h,R=C*v,I=0;I<n.outHeight;++I)for(var k=R+I*g,S=I*n.strideHeight-u,A=0;A<r;A++){var T=S+A*a;if(!(T<0||T>=n.inHeight))for(var D=A*e.strides[0],N=E+T*f,F=0;F<n.outWidth;++F)for(var _=k+F*m,O=F*n.strideWidth-s,M=0;M<o;M++){var B=O+M*i;if(!(B<0||B>=n.inWidth))for(var P=N+B*d,L=D+M*e.strides[1],W=0;W<n.inChannels;++W){for(var U=x[P+W*p],V=0;V<n.outChannels;++V)w[_+V*y]+=U*b[L+V];L+=n.outChannels}}}return l.toTensor()},o.prototype.conv3d=function(t,e,n){for(var r=n.filterDepth,o=n.filterHeight,a=n.filterWidth,i=n.dilationDepth,s=n.dilationHeight,u=n.dilationWidth,c=n.padInfo.front,l=n.padInfo.left,h=n.padInfo.top,f=er(n.outShape,t.dtype),d=this.readSync(t.dataId),p=this.readSync(e.dataId),v=f.values,g=0;g<n.batchSize;++g)for(var m=g*t.strides[0],y=g*f.strides[0],x=0;x<n.outDepth;++x)for(var b=y+x*f.strides[1],w=x*n.strideDepth-c,C=0;C<r;C++){var E=w+C*i;if(!(E<0||E>=n.inDepth))for(var R=C*e.strides[0],I=m+E*t.strides[1],k=0;k<n.outHeight;++k)for(var S=b+k*f.strides[2],A=k*n.strideHeight-h,T=0;T<o;T++){var D=A+T*s;if(!(D<0||D>=n.inHeight))for(var N=R+T*e.strides[1],F=I+D*t.strides[2],_=0;_<n.outWidth;++_)for(var O=S+_*n.outChannels,M=_*n.strideWidth-l,B=0;B<a;B++){var P=M+B*u;if(!(P<0||P>=n.inWidth))for(var L=N+B*e.strides[2],W=F+P*n.inChannels,U=L,V=0;V<n.inChannels;++V){for(var z=d[W+V],G=0;G<n.outChannels;++G)v[O+G]+=z*p[U+G];U+=n.outChannels}}}}return f.toTensor()},o.prototype.conv2dDerInput=function(t,e,n){df([t,e],\"conv2dDerInput\");for(var r=er(n.inShape,\"float32\"),o=r.values,a=this.readSync(t.dataId),i=this.readSync(e.dataId),s=e.strides,u=s[0],c=s[1],l=s[2],h=n.batchSize,f=n.filterHeight,d=n.filterWidth,p=n.inChannels,v=n.inHeight,g=n.inWidth,m=n.outChannels,y=n.outHeight,x=n.outWidth,b=n.strideHeight,w=n.strideWidth,C=n.dataFormat,E=f-1-n.padInfo.top,R=d-1-n.padInfo.left,I=\"channelsLast\"===C,k=r.strides[0],S=I?r.strides[1]:r.strides[2],A=I?r.strides[2]:1,T=I?1:r.strides[1],D=t.strides[0],N=I?t.strides[1]:t.strides[2],F=I?t.strides[2]:1,_=I?1:t.strides[1],O=0;O<h;++O)for(var M=0;M<p;++M)for(var B=0;B<v;++B)for(var P=B-E,L=Math.max(0,Math.ceil(P/b)),W=Math.min(y,(f+P)/b),U=0;U<g;++U){for(var V=U-R,z=Math.max(0,Math.ceil(V/w)),G=Math.min(x,(d+V)/w),H=0,q=L;q<W;++q)for(var K=q*b-P,j=z;j<G;++j)for(var X=D*O+N*q+F*j,Y=u*(f-1-K)+c*(d-1-(j*w-V))+l*M,$=0;$<m;++$){H+=a[X+_*$]*i[Y+$]}o[k*O+S*B+A*U+T*M]=H}return r.toTensor()},o.prototype.conv3dDerInput=function(t,e,n){for(var r=er(n.inShape,\"float32\"),o=r.values,a=r.strides,i=a[0],s=a[1],u=a[2],c=a[3],l=this.readSync(t.dataId),h=t.strides,f=h[0],d=h[1],p=h[2],v=h[3],g=this.readSync(e.dataId),m=e.strides,y=m[0],x=m[1],b=m[2],w=m[3],C=n.batchSize,E=n.filterDepth,R=n.filterHeight,I=n.filterWidth,k=n.inChannels,S=n.inDepth,A=n.inHeight,T=n.inWidth,D=n.outChannels,N=n.outDepth,F=n.outHeight,_=n.outWidth,O=n.strideDepth,M=n.strideHeight,B=n.strideWidth,P=E-1-n.padInfo.front,L=R-1-n.padInfo.top,W=I-1-n.padInfo.left,U=0;U<C;++U)for(var V=0;V<k;++V)for(var z=0;z<S;++z)for(var G=z-P,H=Math.max(0,Math.ceil(G/O)),q=Math.min(N,(E+G)/O),K=0;K<A;++K)for(var j=K-L,X=Math.max(0,Math.ceil(j/M)),Y=Math.min(F,(R+j)/M),$=0;$<T;++$){for(var Q=$-W,J=Math.max(0,Math.ceil(Q/B)),Z=Math.min(_,(I+Q)/B),tt=0,et=H;et<q;++et)for(var nt=et*O-G,rt=X;rt<Y;++rt)for(var ot=rt*M-j,at=J;at<Z;++at)for(var it=f*U+d*et+p*rt+v*at,st=y*(E-1-nt)+x*(R-1-ot)+b*(I-1-(at*B-Q))+w*V,ut=0;ut<D;++ut){tt+=l[it+ut]*g[st+ut]}o[i*U+s*z+u*K+c*$+V]=tt}return r.toTensor()},o.prototype.conv2dDerFilter=function(t,e,n){df([t,e],\"conv2dDerFilter\");for(var r=n.strideHeight,o=n.strideWidth,a=n.filterHeight,i=n.filterWidth,s=\"channelsLast\"===n.dataFormat,u=er(n.filterShape,\"float32\"),c=n.padInfo.left,l=n.padInfo.top,h=this.bufferSync(t),f=this.bufferSync(e),d=0;d<a;++d)for(var p=Math.max(0,Math.ceil((l-d)/r)),v=Math.min(n.outHeight,(n.inHeight+l-d)/r),g=0;g<i;++g)for(var m=Math.max(0,Math.ceil((c-g)/o)),y=Math.min(n.outWidth,(n.inWidth+c-g)/o),x=0;x<n.inChannels;++x)for(var b=0;b<n.outChannels;++b){for(var w=0,C=0;C<n.batchSize;++C)for(var E=p;E<v;++E)for(var R=d+E*r-l,I=m;I<y;++I){var k=g+I*o-c;w+=s?h.get(C,R,k,x)*f.get(C,E,I,b):h.get(C,x,R,k)*f.get(C,b,E,I)}u.set(w,d,g,x,b)}return u.toTensor()},o.prototype.conv3dDerFilter=function(t,e,n){for(var r=n.strideDepth,o=n.strideHeight,a=n.strideWidth,i=n.filterDepth,s=n.filterHeight,u=n.filterWidth,c=er(n.filterShape,\"float32\"),l=c.values,h=c.strides,f=h[0],d=h[1],p=h[2],v=h[3],g=this.readSync(e.dataId),m=e.strides,y=m[0],x=m[1],b=m[2],w=m[3],C=this.readSync(t.dataId),E=t.strides,R=E[0],I=E[1],k=E[2],S=E[3],A=n.padInfo.front,T=n.padInfo.left,D=n.padInfo.top,N=0;N<i;++N)for(var F=Math.max(0,Math.ceil((A-N)/r)),_=Math.min(n.outDepth,(n.inDepth+A-N)/r),O=N*f,M=0;M<s;++M)for(var B=Math.max(0,Math.ceil((D-M)/o)),P=Math.min(n.outHeight,(n.inHeight+D-M)/o),L=M*d+O,W=0;W<u;++W)for(var U=Math.max(0,Math.ceil((T-W)/a)),V=Math.min(n.outWidth,(n.inWidth+T-W)/a),z=W*p+L,G=0;G<n.inChannels;++G)for(var H=G*v+z,q=0;q<n.outChannels;++q){for(var K=0,j=0;j<n.batchSize;++j)for(var X=j*R,Y=j*y,$=F;$<_;++$)for(var Q=(N+$*r-A)*I+X,J=$*x+Y,Z=B;Z<P;++Z)for(var tt=(M+Z*o-D)*k+Q,et=Z*b+J,nt=U;nt<V;++nt){var rt=nt*w+et;K+=C[(W+nt*a-T)*S+tt+G]*g[rt+q]}l[H+q]=K}return c.toTensor()},o.prototype.fusedDepthwiseConv2D=function(t){var e=t.input,n=t.filter,r=t.convInfo,o=t.bias,a=t.activation,i=t.preluActivationWeights,s=this.depthwiseConv2D(e,n,r);return o&&(s=this.add(s,o)),a&&(s=gf(this,s,a,i)),s},o.prototype.depthwiseConv2D=function(t,e,n){df([t,e],\"depthwiseConv2D\");for(var r=n.filterHeight,o=n.filterWidth,a=n.dilationHeight,i=n.dilationWidth,s=n.padInfo.left,u=n.padInfo.top,c=n.outChannels/n.inChannels,l=er(n.outShape,t.dtype),h=this.readSync(t.dataId),f=this.readSync(e.dataId),d=l.values,p=0;p<n.batchSize;++p)for(var v=p*t.strides[0],g=p*l.strides[0],m=0;m<n.outHeight;++m)for(var y=g+m*l.strides[1],x=m*n.strideHeight-s,b=0;b<r;++b){var w=x+b*a;if(!(w<0||w>=n.inHeight))for(var C=b*e.strides[0],E=v+w*t.strides[1],R=0;R<n.outWidth;++R)for(var I=y+R*l.strides[2],k=R*n.strideWidth-u,S=0;S<o;++S){var A=k+S*i;if(!(A<0||A>=n.inWidth))for(var T=C+S*e.strides[1],D=E+A*n.inChannels,N=I,F=T,_=0;_<n.inChannels;++_){for(var O=h[D+_],M=0;M<c;++M)d[N+M]+=O*f[F+M];N+=c,F+=c}}}return l.toTensor()},o.prototype.depthwiseConv2DDerInput=function(t,e,n){df([t,e],\"depthwiseConv2DDerInput\");for(var r=er(n.inShape,\"float32\"),o=r.values,a=r.strides,i=a[0],s=a[1],u=a[2],c=this.readSync(t.dataId),l=t.strides,h=l[0],f=l[1],d=l[2],p=this.readSync(e.dataId),v=e.strides,g=v[0],m=v[1],y=v[2],x=n.batchSize,b=n.filterHeight,w=n.filterWidth,C=n.inChannels,E=n.inHeight,R=n.inWidth,I=n.outChannels,k=n.outHeight,S=n.outWidth,A=n.strideHeight,T=n.strideWidth,D=b-1-n.padInfo.top,N=w-1-n.padInfo.left,F=I/C,_=0;_<x;++_)for(var O=0;O<C;++O)for(var M=0;M<E;++M)for(var B=M-D,P=Math.max(0,Math.ceil(B/A)),L=Math.min(k,(b+B)/A),W=0;W<R;++W){for(var U=W-N,V=Math.max(0,Math.ceil(U/T)),z=Math.min(S,(w+U)/T),G=0,H=P;H<L;++H)for(var q=H*A-B,K=V;K<z;++K)for(var j=h*_+f*H+d*K,X=g*(b-1-q)+m*(w-1-(K*T-U))+y*O,Y=0;Y<F;++Y){G+=c[j+(O*F+Y)]*p[X+Y]}o[i*_+s*M+u*W+O]=G}return r.toTensor()},o.prototype.depthwiseConv2DDerFilter=function(t,e,n){df([t,e],\"depthwiseConv2DDerFilter\");for(var r=n.strideHeight,o=n.strideWidth,a=n.filterHeight,i=n.filterWidth,s=er(n.filterShape,\"float32\"),u=n.padInfo.left,c=n.padInfo.top,l=n.outChannels/n.inChannels,h=this.bufferSync(t),f=this.bufferSync(e),d=0;d<a;++d)for(var p=Math.max(0,Math.ceil((c-d)/r)),v=Math.min(n.outHeight,(n.inHeight+c-d)/r),g=0;g<i;++g)for(var m=Math.max(0,Math.ceil((u-g)/o)),y=Math.min(n.outWidth,(n.inWidth+u-g)/o),x=0;x<n.outChannels;++x){for(var b=Math.trunc(x/l),w=x%l,C=0,E=0;E<n.batchSize;++E)for(var R=p;R<v;++R)for(var I=d+R*r-c,k=m;k<y;++k){var S=g+k*o-u;C+=h.get(E,I,S,b)*f.get(E,R,k,x)}s.set(C,d,g,b,w)}return s.toTensor()},o.prototype.tile=function(t,e){return df(t,\"tile\"),Va(this.bufferSync(t),e)},o.prototype.pad=function(t,e,n){df(t,\"pad\");var r=e.map((function(e,n){return e[0]+t.shape[n]+e[1]})),o=e.map((function(t){return t[0]})),a=this.bufferSync(t),i=er(r,t.dtype);0!==n&&i.values.fill(n);for(var s=0;s<t.size;s++){var u=a.indexToLoc(s),c=u.map((function(t,e){return t+o[e]}));i.set.apply(i,[a.get.apply(a,u)].concat(c))}return i.toTensor()},o.prototype.gather=function(t,e,n){df([t,e],\"gather\");var r=t.shape.slice(),o=this.readSync(e.dataId);r[n]=o.length;for(var a=er(r,t.dtype),i=this.bufferSync(t),s=0;s<a.size;++s){var u=a.indexToLoc(s),c=u.slice();c[n]=o[u[n]];var l=i.locToIndex(c);a.values[s]=i.values[l]}return a.toTensor()},o.prototype.batchToSpaceND=function(t,e,n){df([t],\"batchToSpaceND\");var r=e.reduce((function(t,e){return t*e})),o=pr(t.shape,e,r),a=vr(o.length,e.length),i=gr(t.shape,e,r),s=mr(n,e.length),u=yr(i,n,e.length);return ua(t.reshape(o),a).reshape(i).slice(s,u)},o.prototype.spaceToBatchND=function(t,e,n){df([t],\"spaceToBatchND\");var r=e.reduce((function(t,e){return t*e})),o=[[0,0]];o.push.apply(o,n);for(var a=1+e.length;a<t.shape.length;++a)o.push([0,0]);var i=t.pad(o),s=pr(i.shape,e,r,!1),u=vr(s.length,e.length,!1),c=gr(i.shape,e,r,!1);return ua(i.reshape(s),u).reshape(c)},o.prototype.maxPool=function(t,e){return df(t,\"maxPool\"),pf(this.readSync(t.dataId),t.shape,t.dtype,t.strides,e,\"max\").toTensor()},o.prototype.maxPoolBackprop=function(t,e,n,r){df([e,n],\"maxPoolBackprop\");for(var o=this.readSync(e.dataId),a=er(r.outShape,e.dtype,vf(o,e.shape,e.dtype,r).values),i=r.strideHeight,s=r.strideWidth,u=r.dilationHeight,c=r.dilationWidth,l=r.effectiveFilterHeight,h=r.effectiveFilterWidth,f=h-1-r.padInfo.left,d=l-1-r.padInfo.top,p=er(e.shape,\"float32\"),v=this.bufferSync(t),g=0;g<r.batchSize;++g)for(var m=0;m<r.inChannels;++m)for(var y=0;y<r.inHeight;++y)for(var x=0;x<r.inWidth;++x){for(var b=y-d,w=x-f,C=0,E=0;E<l;E+=u){var R=(b+E)/i;if(!(R<0||R>=r.outHeight||Math.floor(R)!==R))for(var I=0;I<h;I+=c){var k=(w+I)/s;if(!(k<0||k>=r.outWidth||Math.floor(k)!==k)){var S=l*h-1-a.get(g,R,k,m)===E*h+I?1:0;if(0!==S)C+=v.get(g,R,k,m)*S}}}p.set(C,g,y,x,m)}return p.toTensor()},o.prototype.avgPoolBackprop=function(t,e,n){df([t,e],\"avgPoolBackprop\");for(var r=n.strideHeight,o=n.strideWidth,a=n.filterHeight,i=n.filterWidth,s=n.dilationHeight,u=n.dilationWidth,c=n.effectiveFilterHeight,l=n.effectiveFilterWidth,h=l-1-n.padInfo.left,f=c-1-n.padInfo.top,d=er(e.shape,\"float32\"),p=1/(a*i),v=this.bufferSync(t),g=0;g<n.batchSize;++g)for(var m=0;m<n.inChannels;++m)for(var y=0;y<n.inHeight;++y)for(var x=0;x<n.inWidth;++x){for(var b=y-f,w=x-h,C=0,E=0;E<c;E+=s){var R=(b+E)/r;if(!(R<0||R>=n.outHeight||Math.floor(R)!==R))for(var I=0;I<l;I+=u){var k=(w+I)/o;if(!(k<0||k>=n.outWidth||Math.floor(k)!==k))C+=v.get(g,R,k,m)}}d.set(C*p,g,y,x,m)}return d.toTensor()},o.prototype.pool3d=function(t,e,n){df(t,\"pool3d\");for(var r=e.strideDepth,o=e.strideHeight,a=e.strideWidth,i=e.dilationDepth,s=e.dilationHeight,u=e.dilationWidth,c=e.effectiveFilterDepth,l=e.effectiveFilterHeight,h=e.effectiveFilterWidth,f=e.padInfo.front,d=e.padInfo.top,p=e.padInfo.left,v=\"max\"===n?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,g=this.readSync(t.dataId),m=er(e.outShape,t.dtype),y=m.values,x=e.outShape[1]*e.outShape[2]*e.outShape[3]*e.outShape[4],b=e.outShape[2]*e.outShape[3]*e.outShape[4],w=e.outShape[3]*e.outShape[4],C=e.outShape[4],E=0;E<e.batchSize;++E)for(var R=E*x,I=E*t.strides[0],k=0;k<e.inChannels;++k)for(var S=0;S<e.outDepth;++S){for(var A=S*r-f,T=A;T<0;)T+=i;for(var D=Math.min(e.inDepth,c+A),N=R+S*b,F=0;F<e.outHeight;++F){for(var _=F*o-d,O=_;O<0;)O+=s;for(var M=Math.min(e.inHeight,l+_),B=N+F*w,P=0;P<e.outWidth;++P){for(var L=P*a-p,W=L;W<0;)W+=u;for(var U=Math.min(e.inWidth,h+L),V=B+P*C,z=v,G=0,H=0,q=T;q<D;q+=i){for(var K=I+q*t.strides[1],j=O;j<M;j+=s){for(var X=K+j*t.strides[2],Y=W;Y<U;Y+=u){var $=g[X+Y*t.strides[3]+k];if(\"max\"===n&&$>z?z=$:\"avg\"===n&&(G+=$,H++),isNaN(z))break}if(isNaN(z))break}if(isNaN(z))break}y[V+k]=\"avg\"===n?G/H:z}}}return m.toTensor()},o.prototype.avgPool3d=function(t,e){return df(t,\"avgPool3d\"),this.pool3d(t,e,\"avg\").toFloat()},o.prototype.avgPool3dBackprop=function(t,e,n){df([t,e],\"avgPool3dBackprop\");for(var r=n.strideDepth,o=n.strideHeight,a=n.strideWidth,i=n.filterDepth,s=n.filterHeight,u=n.filterWidth,c=n.dilationDepth,l=n.dilationHeight,h=n.dilationWidth,f=n.effectiveFilterDepth,d=n.effectiveFilterHeight,p=n.effectiveFilterWidth,v=f-1-n.padInfo.front,g=p-1-n.padInfo.left,m=d-1-n.padInfo.top,y=er(e.shape,\"float32\"),x=1/(i*s*u),b=this.bufferSync(t),w=0;w<n.batchSize;++w)for(var C=0;C<n.inChannels;++C)for(var E=0;E<n.inDepth;++E)for(var R=0;R<n.inHeight;++R)for(var I=0;I<n.inWidth;++I){for(var k=E-v,S=R-m,A=I-g,T=0,D=0;D<f;D+=c){var N=(k+D)/r;if(!(N<0||N>=n.outDepth||Math.floor(N)!==N))for(var F=0;F<d;F+=l){var _=(S+F)/o;if(!(_<0||_>=n.outHeight||Math.floor(_)!==_))for(var O=0;O<p;O+=h){var M=(A+O)/a;if(!(M<0||M>=n.outWidth||Math.floor(M)!==M))T+=b.get(w,N,_,M,C)}}}y.set(T*x,w,E,R,I,C)}return y.toTensor()},o.prototype.maxPool3d=function(t,e){return df(t,\"maxPool3d\"),this.pool3d(t,e,\"max\").toFloat()},o.prototype.maxPool3dPositions=function(t,e){for(var n=er(e.outShape,\"int32\"),r=e.strideDepth,o=e.strideHeight,a=e.strideWidth,i=e.dilationDepth,s=e.dilationHeight,u=e.dilationWidth,c=e.effectiveFilterDepth,l=e.effectiveFilterHeight,h=e.effectiveFilterWidth,f=e.padInfo.front,d=e.padInfo.top,p=e.padInfo.left,v=this.bufferSync(t),g=0;g<e.batchSize;++g)for(var m=0;m<e.inChannels;++m)for(var y=0;y<e.outDepth;++y){for(var x=y*r-f,b=x;b<0;)b+=i;for(var w=Math.min(e.inDepth,c+x),C=0;C<e.outHeight;++C){for(var E=C*o-d,R=E;R<0;)R+=s;for(var I=Math.min(e.inHeight,l+E),k=0;k<e.outWidth;++k){for(var S=k*a-p,A=S;A<0;)A+=u;for(var T=Math.min(e.inWidth,h+S),D=Number.NEGATIVE_INFINITY,N=-1,F=b;F<w;F+=i)for(var _=F-x,O=R;O<I;O+=s)for(var M=O-E,B=A;B<T;B+=u){var P=B-S,L=v.get(g,F,O,B,m);L>=D&&(D=L,N=_*l*h+M*l+P)}n.set(N,g,y,C,k,m)}}}return n.toTensor()},o.prototype.maxPool3dBackprop=function(t,e,n,r){df([e,n],\"maxPool3dBackprop\");for(var o=this.maxPool3dPositions(e,r),a=r.strideDepth,i=r.strideHeight,s=r.strideWidth,u=r.dilationDepth,c=r.dilationHeight,l=r.dilationWidth,h=r.effectiveFilterDepth,f=r.effectiveFilterHeight,d=r.effectiveFilterWidth,p=h-1-r.padInfo.front,v=d-1-r.padInfo.left,g=f-1-r.padInfo.top,m=er(e.shape,\"float32\"),y=this.bufferSync(o),x=this.bufferSync(t),b=0;b<r.batchSize;++b)for(var w=0;w<r.inChannels;++w)for(var C=0;C<r.inDepth;++C)for(var E=0;E<r.inHeight;++E)for(var R=0;R<r.inWidth;++R){for(var I=C-p,k=E-g,S=R-v,A=0,T=0;T<h;T+=u){var D=(I+T)/a;if(!(D<0||D>=r.outDepth||Math.floor(D)!==D))for(var N=0;N<f;N+=c){var F=(k+N)/i;if(!(F<0||F>=r.outHeight||Math.floor(F)!==F))for(var _=0;_<d;_+=l){var O=(S+_)/s;if(!(O<0||O>=r.outWidth||Math.floor(O)!==O)){var M=h*f*d-1-y.get(b,D,F,O,w)===T*f*d+N*d+_?1:0;if(0!==M)A+=x.get(b,D,F,O,w)*M}}}}m.set(A,b,C,E,R,w)}return m.toTensor()},o.prototype.cast=function(t,e){return Ra(t,e,this)},o.prototype.reshape=function(t,e){return Ia(t,e)},o.prototype.avgPool=function(t,e){return df(t,\"avgPool\"),df(t,\"maxPool\"),pf(this.readSync(t.dataId),t.shape,t.dtype,t.strides,e,\"avg\").toTensor().toFloat()},o.prototype.resizeBilinear=function(t,e,n,r){df(t,\"resizeBilinear\");for(var o=t.shape,a=o[0],i=o[1],s=o[2],u=o[3],c=this.readSync(t.dataId),l=new Float32Array(k([a,e,n,u])),h=[r&&e>1?i-1:i,r&&n>1?s-1:s],f=[r&&e>1?e-1:e,r&&n>1?n-1:n],d=0,p=h[0]/f[0],v=h[1]/f[1],g=0;g<a;g++)for(var m=0;m<e;m++)for(var y=p*m,x=Math.floor(y),b=y-x,w=Math.min(i-1,Math.ceil(y)),C=g*t.strides[0]+x*t.strides[1],E=g*t.strides[0]+w*t.strides[1],R=0;R<n;R++)for(var I=v*R,S=Math.floor(I),A=I-S,T=Math.min(s-1,Math.ceil(I)),D=C+S*t.strides[2],N=E+S*t.strides[2],F=C+T*t.strides[2],_=E+T*t.strides[2],O=0;O<u;O++){var M=c[D+O],B=c[N+O],P=M+(c[F+O]-M)*A,L=P+(B+(c[_+O]-B)*A-P)*b;l[d++]=L}return Fn(l,[a,e,n,u])},o.prototype.resizeBilinearBackprop=function(t,e,n){df([t,e],\"resizeBilinearBackprop\");for(var r=e.shape,o=r[0],a=r[1],i=r[2],s=r[3],u=t.shape,c=u[1],l=u[2],h=new Float32Array(o*a*i*s),f=[n&&c>1?a-1:a,n&&l>1?i-1:i],d=[n&&c>1?c-1:c,n&&l>1?l-1:l],p=f[0]/d[0],v=f[1]/d[1],g=this.readSync(t.dataId),m=0,y=0;y<o;y++)for(var x=y*e.strides[0],b=0;b<c;b++)for(var w=b*p,C=Math.floor(w),E=Math.min(Math.ceil(w),a-1),R=x+C*e.strides[1],I=x+E*e.strides[1],k=w-C,S=1-k,A=0;A<l;A++)for(var T=A*v,D=Math.floor(T),N=Math.min(Math.ceil(T),i-1),F=T-D,_=1-F,O=R+D*e.strides[2],M=R+N*e.strides[2],B=I+D*e.strides[2],P=I+N*e.strides[2],L=S*_,W=S*F,U=k*_,V=k*F,z=0;z<s;z++){var G=g[m++];h[O+z]+=G*L,h[M+z]+=G*W,h[B+z]+=G*U,h[P+z]+=G*V}return Ln(h,[o,i,a,s],e.dtype)},o.prototype.resizeNearestNeighbor=function(t,e,n,r){df(t,\"resizeNearestNeighbor\");for(var o=t.shape,a=o[0],i=o[1],s=o[2],u=o[3],c=this.readSync(t.dataId),l=new Float32Array(a*e*n*u),h=[r&&e>1?i-1:i,r&&n>1?s-1:s],f=[r&&e>1?e-1:e,r&&n>1?n-1:n],d=h[0]/f[0],p=h[1]/f[1],v=0,g=0;g<a;g++)for(var m=g*t.strides[0],y=0;y<e;y++)for(var x=d*y,b=m+Math.min(i-1,r?Math.round(x):Math.floor(x))*t.strides[1],w=0;w<n;w++)for(var C=p*w,E=b+Math.min(s-1,r?Math.round(C):Math.floor(C))*t.strides[2],R=0;R<u;R++){var I=c[E+R];l[v++]=I}return Fn(l,[a,e,n,u],t.dtype)},o.prototype.resizeNearestNeighborBackprop=function(t,e,n){df([t,e],\"resizeNearestNeighborBackprop\");for(var r=e.shape,o=r[0],a=r[1],i=r[2],s=r[3],u=t.shape,c=u[1],l=u[2],h=new Float32Array(o*a*i*s),f=this.readSync(t.dataId),d=[n&&c>1?a-1:a,n&&l>1?i-1:i],p=[n&&c>1?c-1:c,n&&l>1?l-1:l],v=d[0]/p[0],g=d[1]/p[1],m=1/v,y=1/g,x=2*Math.ceil(m)+2,b=2*Math.ceil(y)+2,w=0;w<o;w++)for(var C=w*e.strides[0],E=0;E<a;E++)for(var R=C+E*e.strides[1],I=Math.floor(E*m),k=Math.floor(I-x/2),S=0;S<i;S++)for(var A=R+S*e.strides[2],T=Math.floor(S*y),D=Math.floor(T-b/2),N=0;N<s;N++){for(var F=0,_=0;_<x;_++){var O=_+k;if(!(O<0||O>=c)){var M=C+O*t.strides[1],B=O*v;if(E===Math.min(a-1,n?Math.round(B):Math.floor(B)))for(var P=0;P<b;P++){var L=P+D;if(!(L<0||L>=l)){var W=M+L*t.strides[2],U=L*g;S===Math.min(i-1,n?Math.round(U):Math.floor(U))&&(F+=f[W+N])}}}}h[A+N]=F}return Ln(h,e.shape,e.dtype)},o.prototype.batchNormalization=function(t,e,n,r,o,a){df([t,e,n,o,a],\"batchNorm\");for(var i=this.readSync(t.dataId),s=this.readSync(e.dataId),u=this.readSync(n.dataId),c=o?this.readSync(o.dataId):new Float32Array([1]),l=a?this.readSync(a.dataId):new Float32Array([0]),h=new Float32Array(i.length),f=l.length,d=c.length,p=u.length,v=s.length,g=0,m=0,y=0,x=0,b=0;b<i.length;++b)h[b]=l[g++]+(i[b]-s[m++])*c[y++]/Math.sqrt(u[x++]+r),g>=f&&(g=0),m>=v&&(m=0),y>=d&&(y=0),x>=p&&(x=0);return Ln(h,t.shape)},o.prototype.localResponseNormalization4D=function(t,e,n,r,o){df(t,\"localResponseNormalization4D\");var a=t.shape[3],i=a-1,s=this.readSync(t.dataId),u=t.size,c=new Float32Array(u);function l(t){for(var n=t%a,r=t-n+Math.max(0,n-e),o=t-n+Math.min(n+e,i),u=0;r<=o;r++){var c=s[r];u+=c*c}return u}for(var h=0;h<u;h++){var f=l(h),d=s[h]*Math.pow(n+r*f,-o);c[h]=d}return Ln(c,t.shape)},o.prototype.LRNGrad=function(t,e,n,r,o,a,i){df(t,\"LRNGrad\");for(var s=t.shape[3],u=this.readSync(t.dataId),c=this.readSync(e.dataId),l=this.readSync(n.dataId),h=new Float32Array(t.size),f=t.size,d=0;d<f;d++){for(var p=d%s,v=d-p+Math.max(0,p-r),g=d-p+Math.min(s,p+r+1),m=0,y=v;y<g;y++)m+=Math.pow(c[y],2);m=a*m+o;for(y=v;y<g;y++){var x=-2*a*i*c[y]*l[d]/m;d===y&&(x+=Math.pow(m,-i)),x*=u[d],h[y]+=x}}return Ln(h,t.shape)},o.prototype.multinomial=function(t,e,n,r){df(t,\"multinomial\");for(var o=e?t:ia(t),a=o.shape[0],i=o.shape[1],s=Gn([a,n],\"int32\"),u=this.readSync(s.dataId),c=this.readSync(o.dataId),l=0;l<a;++l){var h=l*i,f=new Float32Array(i-1);f[0]=c[h];for(var d=1;d<f.length;++d)f[d]=f[d-1]+c[h+d];for(var p=Yu(r.toString()),v=l*n,g=0;g<n;++g){var m=p();u[v+g]=f.length;for(var y=0;y<f.length;y++)if(m<f[y]){u[v+g]=y;break}}}return s},o.prototype.oneHot=function(t,e,n,r){df(t,\"oneHot\");var o=new Float32Array(t.size*e);o.fill(r);for(var a=this.readSync(t.dataId),i=0;i<t.size;++i)a[i]>=0&&a[i]<e&&(o[i*e+a[i]]=n);return Bn(o,[t.size,e],\"int32\")},o.prototype.nonMaxSuppression=function(t,e,n,r,o){return df(t,\"nonMaxSuppression\"),Oa(this.readSync(t.dataId),this.readSync(e.dataId),n,r,o)},o.prototype.fft=function(t){return this.fftBatch(t,!1)},o.prototype.ifft=function(t){return this.fftBatch(t,!0)},o.prototype.fftBatch=function(t,e){for(var n=t.shape[0],r=t.shape[1],o=er(t.shape,\"float32\"),a=er(t.shape,\"float32\"),i=Dn(t).as2D(n,r),s=Nn(t).as2D(n,r),u=0;u<n;u++)for(var c=i.slice([u,0],[1,r]),l=s.slice([u,0],[1,r]),h=Tn(c,l),f=this.readSync(this.fftImpl(h,e).dataId),d=0;d<r;d++){var p=Ta(f,d);o.values[u*r+d]=p.real,a.values[u*r+d]=p.imag}return Tn(o.toTensor(),a.toTensor()).as2D(n,r)},o.prototype.fftImpl=function(t,e){var n=t.as1D(),r=n.size;if(this.isExponentOf2(r)){var o=this.fftRadix2(n,r,e).as2D(t.shape[0],t.shape[1]);return e&&(o=Tn(Dn(o).div(On(r)),Nn(o).div(On(r)))),o}var a=this.readSync(t.dataId),i=function(t){for(var e=new Float32Array(t.length/2),n=new Float32Array(t.length/2),r=0;r<t.length;r+=2)e[r/2]=t[r],n[r/2]=t[r+1];return{real:e,imag:n}}(this.fourierTransformByMatmul(a,r,e));return Tn(i.real,i.imag).as2D(t.shape[0],t.shape[1])},o.prototype.isExponentOf2=function(t){return 0==(t&t-1)},o.prototype.fftRadix2=function(t,e,n){if(1===e)return t;var r=this.readSync(t.dataId),o=e/2,a=function(t){for(var e=Math.ceil(t.length/4),n=new Float32Array(e),r=new Float32Array(e),o=0;o<t.length;o+=4)n[Math.floor(o/4)]=t[o],r[Math.floor(o/4)]=t[o+1];return{real:n,imag:r}}(r),i=Tn(a.real,a.imag).as1D(),s=function(t){for(var e=Math.floor(t.length/4),n=new Float32Array(e),r=new Float32Array(e),o=2;o<t.length;o+=4)n[Math.floor(o/4)]=t[o],r[Math.floor(o/4)]=t[o+1];return{real:n,imag:r}}(r),u=Tn(s.real,s.imag).as1D();i=this.fftRadix2(i,o,n),u=this.fftRadix2(u,o,n);var c=function(t,e){for(var n=new Float32Array(t/2),r=new Float32Array(t/2),o=0;o<Math.ceil(t/2);o++){var a=(e?2:-2)*Math.PI*(o/t);n[o]=Math.cos(a),r[o]=Math.sin(a)}return{real:n,imag:r}}(e,n),l=Tn(c.real,c.imag).mul(u),h=i.add(l),f=i.sub(l),d=Dn(h).concat(Dn(f)),p=Nn(h).concat(Nn(f));return Tn(d,p).as1D()},o.prototype.fourierTransformByMatmul=function(t,e,n){for(var r=new Float32Array(2*e),o=0;o<e;o++){for(var a=0,i=0,s=0;s<e;s++){var u=Na(o*s,e,n),c=Ta(t,s);a+=c.real*u.real-c.imag*u.imag,i+=c.real*u.imag+c.imag*u.real}n&&(a/=e,i/=e),Da(r,a,i,o)}return r},o.prototype.depthToSpace=function(t,e,n){C(\"NHWC\"===n,(function(){return\"Only NHWC dataFormat supported on CPU for depthToSpace. Got \"+n})),C(e>1,(function(){return\"blockSize should be > 1 for depthToSpace, but was: \"+e}));for(var r=t.shape[0],o=t.shape[1],a=t.shape[2],i=t.shape[3],s=o*e,u=a*e,c=i/(e*e),l=this.readSync(t.dataId),h=new Float32Array(r*s*u*c),f=0,d=0;d<r;++d)for(var p=0;p<s;++p)for(var v=Math.floor(p/e),g=p%e,m=0;m<u;++m)for(var y=Math.floor(m/e),x=(g*e+m%e)*c,b=0;b<c;++b){var w=b+x+i*(y+a*(v+o*d));h[f++]=l[w]}return Ln(h,[r,s,u,c])},o.prototype.broadcastedBinaryOp=function(t,e,n,r){var o=Pr(t.shape,e.shape),a=er(o,n),i=this.readSync(t.dataId),s=this.readSync(e.dataId),u=Mr(t.shape,o),c=Mr(e.shape,o),l=a.values;if(u.length+c.length===0)for(var h=0;h<l.length;++h)l[h]=r(i[h%i.length],s[h%s.length]);else{var f=this.bufferSync(t),d=this.bufferSync(e),p=function(n){var o=a.indexToLoc(n),h=o.slice(-t.rank);u.forEach((function(t){return h[t]=0}));var p=f.locToIndex(h),v=o.slice(-e.rank);c.forEach((function(t){return v[t]=0}));var g=d.locToIndex(v);l[n]=r(i[p],s[g])};for(h=0;h<l.length;++h)p(h)}return a.toTensor()},o.prototype.broadcastedBinaryComplexOp=function(t,e,n){var r=Pr(t.shape,e.shape),o=er(r,\"float32\"),a=er(r,\"float32\"),i=this.readSync(t.dataId),s=this.readSync(e.dataId),u=Mr(t.shape,r),c=Mr(e.shape,r),l=o.values,h=a.values;if(u.length+c.length===0)for(var f=0;f<l.length;f++){var d=f%i.length,p=f%s.length,v=n(i[2*d],i[2*d+1],s[2*p],s[2*p+1]);l[f]=v.real,h[f]=v.imag}else{var g=this.bufferSync(this.data.get(t.dataId).complexTensors.real),m=this.bufferSync(this.data.get(e.dataId).complexTensors.real),y=function(r){var a=o.indexToLoc(r),f=a.slice(-t.rank);u.forEach((function(t){return f[t]=0}));var d=g.locToIndex(f),p=a.slice(-e.rank);c.forEach((function(t){return p[t]=0}));var v=m.locToIndex(p),y=n(i[2*d],i[2*d+1],s[2*v],s[2*v+1]);l[r]=y.real,h[r]=y.imag};for(f=0;f<l.length;f++)y(f)}return this.complex(o.toTensor(),a.toTensor())},o.prototype.split=function(t,e,n){return Ua(t,e,n)},o.prototype.dispose=function(){},o.prototype.floatPrecision=function(){return 32},o.prototype.epsilon=function(){return 1e-7},o.prototype.cropAndResize=function(t,e,n,r,o,a){for(var i=t.shape,s=i[0],u=i[1],c=i[2],l=i[3],h=e.shape[0],f=r[0],d=r[1],p=er([h,f,d,l],\"float32\"),v=this.readSync(e.dataId),g=this.readSync(n.dataId),m=this.readSync(t.dataId),y=t.strides,x=p.strides,b=0;b<h;b++){var w=4*b,C=v[w],E=v[w+1],R=v[w+2],I=v[w+3],k=g[b];if(!(k>=s))for(var S=f>1?(R-C)*(u-1)/(f-1):0,A=d>1?(I-E)*(c-1)/(d-1):0,T=0;T<f;T++){var D=f>1?C*(u-1)+T*S:.5*(C+R)*(u-1);if(D<0||D>u-1)for(var N=0;N<d;N++)for(var F=0;F<l;F++){var _=F+N*x[2]+T*x[1]+b*x[0];p.values[_]=a}else if(\"bilinear\"===o){var O=Math.floor(D),M=Math.ceil(D),B=D-O;for(N=0;N<d;N++){if((q=d>1?E*(c-1)+N*A:.5*(E+I)*(c-1))<0||q>c-1)for(F=0;F<l;F++){_=F+N*x[2]+T*x[1]+b*x[0];p.values[_]=a}else{var P=Math.floor(q),L=Math.ceil(q),W=q-P;for(F=0;F<l;F++){var U=m[_=F+P*y[2]+O*y[1]+k*y[0]],V=m[_=F+L*y[2]+O*y[1]+k*y[0]],z=m[_=F+P*y[2]+M*y[1]+k*y[0]],G=U+(V-U)*W,H=z+(m[_=F+L*y[2]+M*y[1]+k*y[0]]-z)*W;_=F+N*x[2]+T*x[1]+b*x[0],p.values[_]=G+(H-G)*B}}}}else for(N=0;N<d;++N){var q;if((q=d>1?E*(c-1)+N*A:.5*(E+I)*(c-1))<0||q>c-1)for(F=0;F<l;F++){_=F+N*x[2]+T*x[1]+b*x[0];p.values[_]=a}else{var K=Math.round(q),j=Math.round(D);for(F=0;F<l;F++){var X=F+K*y[2]+j*y[1]+k*y[0],Y=F+N*x[2]+T*x[1]+b*x[0];p.values[Y]=m[X]}}}}}return p.toTensor()},o.prototype.sparseToDense=function(t,e,n,r){var o=Go(0,t,n),a=o.sliceRank,i=o.numUpdates,s=o.sliceSize,u=o.strides,c=o.outputSize;return this.scatter(t,e,n,c,s,i,a,u,r,!1)},o.prototype.gatherND=function(t,e){var n=e.shape,r=n[n.length-1],o=Po(t,e),a=o[0],i=o[1],s=o[2],u=o[3];if(0===i)return Fn([],a,t.dtype);for(var c=new mt([i,s],t.dtype),l=this.readSync(e.dataId),h=this.readSync(t.dataId),f=0;f<i;f++){for(var d=[],p=0,v=0;v<r;v++){var g=l[f*r+v];p+=g*u[v],d.push(g)}if(p<0||p>=t.size/s)throw new Error(\"Invalid indices: \"+d+\" does not index into \"+t.shape);for(var m=0;m<s;m++)c.values[f*s+m]=h[p*s+m]}return c.toTensor().reshape(a)},o.prototype.scatterND=function(t,e,n){var r=Go(0,t,n),o=r.sliceRank,a=r.numUpdates,i=r.sliceSize,s=r.strides,u=r.outputSize,c=On(0);return this.scatter(t,e,n,u,i,a,o,s,c,!0)},o.prototype.fill=function(t,e,n){var r=P(n=n||j(e),k(t));return r.fill(e),Lt.makeTensor(r,t,n,this)},o.prototype.onesLike=function(t){if(\"string\"===t.dtype)throw new Error(\"onesLike is not supported for string tensors\");return this.fill(t.shape,1,t.dtype)},o.prototype.zerosLike=function(t){var e=P(t.dtype,k(t.shape));return this.makeOutput(e,t.shape,t.dtype)},o.prototype.linspace=function(t,e,n){return ka(t,e,n)},o.prototype.scatter=function(t,e,n,r,o,a,i,s,u,c){var l=[r/o,o],h=this.readSync(t.dataId),f=this.readSync(e.dataId);if(0===r)return Fn([],n,e.dtype);var d=new mt(l,e.dtype);d.values.fill(this.readSync(u.dataId)[0]);for(var p=0;p<a;p++){for(var v=[],g=0,m=0;m<i;m++){var y=h[p*i+m];v.push(y),g+=y*s[m]}if(g<0||g>=r/o)throw new Error(\"Invalid indices: \"+v+\" does not index into \"+n);for(var x=0;x<o;x++)c?d.values[g*o+x]+=f[p*o+x]:d.values[g*o+x]=0===e.rank?f[0]:f[p*o+x]}return d.toTensor().reshape(n)},o}(la);function yf(t,e){return{kernelName:t,backendName:\"cpu\",kernelFunc:function(n){var r=n.inputs,o=n.backend,a=r,i=a.a,s=a.b,u=o;df([i,s],t);var c=u.data.get(i.dataId).values,l=u.data.get(s.dataId).values,h=e(i.shape,s.shape,c,l,i.dtype),f=h[0],d=h[1];return{dataId:u.write(f,d,i.dtype),shape:d,dtype:i.dtype}}}}function xf(t){return function(e,n,r,o,a){var i=Pr(e,n),s=i.length,u=$(i),c=B(a,k(i)),l=e.length,h=n.length,f=$(e),d=$(n),p=Mr(e,i),v=Mr(n,i);if(p.length+v.length===0)for(var g=0;g<c.length;++g)c[g]=t(r[g%r.length],o[g%o.length]);else{var m=function(e){var n=it(e,s,u),a=n.slice(-l);p.forEach((function(t){return a[t]=0}));var i=at(a,l,f),g=n.slice(-h);v.forEach((function(t){return g[t]=0}));var m=at(g,h,d);c[e]=t(r[i],o[m])};for(g=0;g<c.length;++g)m(g)}return[c,i]}}Lt.registerBackend(\"cpu\",(function(){return new mf}),1);var bf=xf((function(t,e){return t/e})),wf=yf(wr,bf);var Cf={kernelName:\"MaxPoolWithArgmax\",backendName:\"cpu\",kernelFunc:function(t){var e=t.inputs,n=t.attrs,r=t.backend,o=e.x,a=n,i=a.filterSize,s=a.strides,u=a.pad,c=a.includeBatchInIndex,l=r;df(o,\"MaxPoolWithArgmax\");var h=l.data.get(o.dataId).values,f=fa(o.shape,i,s,[1,1],u),d=function(t,e,n,r,o){var a=pf(t,0,n,$(e),o,\"max\"),i=vf(t,e,n,o,!0,r);return[a.values,i.values]}(h,o.shape,o.dtype,c,f),p=d[0],v=d[1],g=l.write(p,f.outShape,o.dtype),m=l.write(v,f.outShape,o.dtype);return[{dataId:g,shape:f.outShape,dtype:o.dtype},{dataId:m,shape:f.outShape,dtype:\"int32\"}]}},Ef={kernelName:\"NonMaxSuppressionV5\",backendName:\"cpu\",kernelFunc:function(t){var e=t.inputs,n=t.backend,r=t.attrs,o=e,a=o.boxes,i=o.scores,s=r,u=s.maxOutputSize,c=s.iouThreshold,l=s.scoreThreshold,h=s.softNmsSigma,f=n;df(a,\"NonMaxSuppressionWithScore\");var d=Ma(f.data.get(a.dataId).values,f.data.get(i.dataId).values,u,c,l,h);return[d.selectedIndices,d.selectedScores]}},Rf={kernelName:\"Square\",backendName:\"cpu\",kernelFunc:function(t){var e=t.inputs,n=t.backend,r=e.x,o=n;df(r,\"square\");for(var a=o.data.get(r.dataId).values,i=new Float32Array(a.length),s=0;s<a.length;++s){var u=a[s];i[s]=u*u}return{dataId:o.write(i,r.shape,r.dtype),shape:r.shape,dtype:r.dtype}}},If=xf((function(t,e){var n=t-e;return n*n}));function kf(t,e,n,r,o){for(var a=k(e),i=e.length,s=$(e),u=$(o),c=B(n,k(o)),l=0;l<a;++l){for(var h=it(l,i,s),f=new Array(h.length),d=0;d<f.length;d++)f[d]=h[r[d]];c[at(f,i,u)]=t[l]}return c}for(var Sf=0,Af=[Ef,Rf,yf(Er,If),wf,{kernelName:\"Transpose\",backendName:\"cpu\",kernelFunc:function(t){var e=t.inputs,n=t.attrs,r=t.backend,o=e.x,a=n.perm,i=r;df(o,\"transpose\");for(var s=o.shape.length,u=new Array(s),c=0;c<u.length;c++)u[c]=o.shape[a[c]];var l=kf(i.data.get(o.dataId).values,o.shape,o.dtype,a,u);return{dataId:i.write(l,u,o.dtype),shape:u,dtype:o.dtype}}},Cf];Sf<Af.length;Sf++){d(Af[Sf])}var Tf,Df=function(t){this.variableNames=[\"A\"];var e=Ya(),n=t[0],r=t[1];this.outputShape=t,this.userCode=\"\\n      void main() {\\n        ivec3 coords = getOutputCoords();\\n        int texR = coords[0];\\n        int texC = coords[1];\\n        int depth = coords[2];\\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(\"+r+\".0, \"+n+\".0);\\n\\n        vec4 values = \"+e.texture2D+\"(A, uv);\\n        float value;\\n        if (depth == 0) {\\n          value = values.r;\\n        } else if (depth == 1) {\\n          value = values.g;\\n        } else if (depth == 2) {\\n          value = values.b;\\n        } else if (depth == 3) {\\n          value = values.a;\\n        }\\n\\n        setOutput(floor(value * 255.0 + 0.5));\\n      }\\n    \"},Nf=function(t){this.variableNames=[\"A\"],this.packedInputs=!1,this.packedOutput=!0;var e=Ya(),n=t[0],r=t[1];this.outputShape=t,this.userCode=\"\\n      void main() {\\n        ivec3 coords = getOutputCoords();\\n        int texR = coords[0];\\n        int texC = coords[1];\\n        int depth = coords[2];\\n\\n        vec4 result = vec4(0.);\\n\\n        for(int row=0; row<=1; row++) {\\n          for(int col=0; col<=1; col++) {\\n            texC = coords[1] + row;\\n            depth = coords[2] + col;\\n\\n            vec2 uv = (vec2(texC, texR) + halfCR) /\\n                       vec2(\"+r+\".0, \"+n+\".0);\\n            vec4 values = \"+e.texture2D+\"(A, uv);\\n            float value;\\n            if (depth == 0) {\\n              value = values.r;\\n            } else if (depth == 1) {\\n              value = values.g;\\n            } else if (depth == 2) {\\n              value = values.b;\\n            } else if (depth == 3) {\\n              value = values.a;\\n            }\\n\\n            result[row * 2 + col] = floor(value * 255.0 + 0.5);\\n          }\\n        }\\n\\n        \"+e.output+\" = result;\\n      }\\n    \"};var Ff=function(t,e){this.variableNames=[\"A\"];for(var n=new Array(t.length),r=0;r<n.length;r++)n[r]=t[e[r]];this.outputShape=n,this.rank=n.length;var o=ui(this.rank),a=function(t){var e=t.length;if(e>6)throw Error(\"Transpose for rank \"+e+\" is not yet supported\");for(var n=[\"resRC.x\",\"resRC.y\",\"resRC.z\",\"resRC.w\",\"resRC.u\",\"resRC.v\"],r=new Array(e),o=0;o<t.length;o++)r[t[o]]=n[o];return r.join()}(e);this.userCode=\"\\n    void main() {\\n      \"+o+\" resRC = getOutputCoords();\\n      setOutput(getA(\"+a+\"));\\n    }\\n    \"};var _f=function(t,e){this.variableNames=[\"A\"],this.packedInputs=!0,this.packedOutput=!0;for(var n=new Array(t.length),r=0;r<n.length;r++)n[r]=t[e[r]];if(this.outputShape=n,this.rank=n.length,this.rank>6)throw Error(\"Packed transpose for rank \"+this.rank+\" is not yet supported.\");var o=ui(this.rank),a=ja(\"rc\",this.rank),i=new Array(this.rank);for(r=0;r<e.length;r++)i[e[r]]=a[r];var s=\"vec2(\"+i.slice(-2).join()+\")\",u=\"++\"+a[this.rank-1]+\" < \"+n[this.rank-1],c=\"getChannel(getA(\"+i.join()+\"), \"+s+\")\";this.userCode=\"\\n    void main() {\\n      \"+o+\" rc = getOutputCoords();\\n      vec4 result = vec4(0.);\\n      result[0] = \"+c+\";\\n      if(\"+u+\") {\\n        result[1] = \"+c+\";\\n      }\\n      --\"+a[this.rank-1]+\";\\n      if(++\"+a[this.rank-2]+\" < \"+n[this.rank-2]+\") {\\n        result[2] = \"+c+\";\\n        if(\"+u+\") {\\n          result[3] = \"+c+\";\\n        }\\n      }\\n      setOutput(result);\\n    }\\n    \"};for(var Of=0,Mf=[{kernelName:\"FromPixels\",backendName:\"webgl\",kernelFunc:function(t){var e=t.inputs,n=t.backend,r=t.attrs,o=e.pixels,a=r.numChannels,s=\"undefined\"!=typeof HTMLVideoElement&&o instanceof HTMLVideoElement,u=\"undefined\"!=typeof HTMLImageElement&&o instanceof HTMLImageElement,c=s?[o.videoWidth,o.videoHeight]:[o.width,o.height],l=c[0],h=c[1],f=[h,l],d=[h,l,a];(u||s)&&(null==Tf&&(Tf=document.createElement(\"canvas\").getContext(\"2d\")),Tf.canvas.width=l,Tf.canvas.height=h,Tf.drawImage(o,0,0,l,h),o=Tf.canvas);var p=n.makeTensorInfo(f,\"int32\");n.texData.get(p.dataId).usage=zt.PIXELS,n.gpgpu.uploadPixelDataToTexture(n.getTexture(p.dataId),o);var v=i().getBool(\"WEBGL_PACK\")?new Nf(d):new Df(d),g=n.runWebGLProgram(v,[p],\"int32\");return n.disposeData(p.dataId),g}},{kernelName:wr,backendName:\"webgl\",kernelFunc:function(t){var e=t.inputs,n=t.backend,r=e;return function(t,e,n){var r=new Ri(Ci,t.shape,e.shape);return i().getBool(\"WEBGL_PACK_BINARY_OPERATIONS\")&&(r=new Si(Ii,t.shape,e.shape,!0)),n.runWebGLProgram(r,[t,e],\"float32\")}(r.a,r.b,n)}},{kernelName:\"NonMaxSuppressionV5\",backendName:\"webgl\",kernelFunc:function(t){var e=t.inputs,n=t.backend,r=t.attrs;dn(\"tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead\");var o=e,a=o.boxes,i=o.scores,s=r,u=s.maxOutputSize,c=s.iouThreshold,l=s.scoreThreshold,h=s.softNmsSigma,f=n,d=Ma(f.readSync(a.dataId),f.readSync(i.dataId),u,c,l,h);return[d.selectedIndices,d.selectedScores]}},{kernelName:\"Square\",backendName:\"webgl\",kernelFunc:function(t){var e=t.inputs,n=t.backend,r=e.x,o=n,a=new cu(r.shape,\"return x * x;\");return o.runWebGLProgram(a,[r],r.dtype)}},{kernelName:Er,backendName:\"webgl\",kernelFunc:function(t){var e=t.inputs,n=t.backend,r=e,o=r.a,a=r.b,s=n,u=i().getBool(\"WEBGL_PACK_BINARY_OPERATIONS\")?new Si(\"return (a - b) * (a - b);\",o.shape,a.shape):new Ri(\"return (a - b) * (a - b);\",o.shape,a.shape);return s.compileAndRun(u,[o,a])}},{kernelName:\"Transpose\",backendName:\"webgl\",kernelFunc:function(t){for(var e,n=t.inputs,r=t.attrs,o=t.backend,a=n.x,s=r.perm,u=o,c=a.shape.length,l=new Array(c),h=0;h<l.length;h++)l[h]=a.shape[s[h]];if(u.shouldExecuteOnCPU([a])){var f=kf(u.texData.get(a.dataId).values,a.shape,a.dtype,s,l);e=u.makeTensorInfo(l,a.dtype),u.texData.get(e.dataId).values=f}else e=function(t,e,n){var r=i().getBool(\"WEBGL_PACK_ARRAY_OPERATIONS\")?new _f(t.shape,e):new Ff(t.shape,e);return n.runWebGLProgram(r,[t],t.dtype)}(a,s,u);return e}},{kernelName:\"MaxPoolWithArgmax\",backendName:\"webgl\",kernelFunc:function(t){var e=t.inputs,n=t.attrs,r=t.backend,o=e.x,a=n,i=a.filterSize,s=a.strides,u=a.pad,c=a.includeBatchInIndex,l=r;C(4===o.shape.length,(function(){return\"Error in maxPool: input must be rank 4 but got rank \"+o.shape.length+\".\"}));var h=[1,1];C(Ca(s,h),(function(){return\"Error in maxPool: Either strides or dilations must be 1. Got strides \"+s+\" and dilations '\"+h+\"'\"}));var f=fa(o.shape,i,s,h,u),d=function(t,e,n,r){var o=new Ws(n,\"max\",!1),a=r.runWebGLProgram(o,[t],\"float32\");return o=new Ws(n,\"max\",!0,!0,e),[a,r.runWebGLProgram(o,[t],\"float32\")]}(o,c,f,l);return[d[0],d[1]]}}];Of<Mf.length;Of++){d(Mf[Of])}for(var Bf=0,Pf=[{kernelName:xr,inputsToSave:[\"a\",\"b\"],gradFunc:function(t,e){var n=e[0],r=e[1],o=Pr(n.shape,r.shape);return{a:function(){var e=t,r=Br(n.shape,o);return r.length>0&&(e=e.sum(r)),e.reshape(n.shape)},b:function(){var e=t,n=Br(r.shape,o);return n.length>0&&(e=e.sum(n)),e.reshape(r.shape)}}}},{kernelName:\"AddN\",saveAllInputs:!0,gradFunc:function(t,e){var n={};return e.forEach((function(e,r){n[r]=function(){return t.clone()}})),n}},{kernelName:Sr,gradFunc:function(t,e,n){for(var r=n,o=r.inputShape,a=r.shape,i=Array.from(a),s=o.length-1;s>=0;s--)if(o[s]===a[s])i[s]=1;else if(1!==o[s])throw new Error(\"broadcastTo(): [\"+o+\"] cannot be broadcast to [\"+a+\"].\");var u=[];for(s=0;s<i.length;s++)i[s]>1&&u.push(s);return{x:function(){return t.sum(u,!0)}}}},{kernelName:wr,inputsToSave:[\"a\",\"b\"],gradFunc:function(t,e){var n=e[0],r=e[1],o=Pr(n.shape,r.shape);return{a:function(){var e=Bo(t,r.toFloat()),a=Br(n.shape,o);return a.length>0?th(e,a).reshape(n.shape):e},b:function(){var e=t.mul(n.toFloat()),a=Br(r.shape,o);a.length>0&&(e=th(e,a).reshape(r.shape));var i=Gc(r);return no(Bo(e,i.toFloat()))}}}},{kernelName:\"FusedBatchNorm\",inputsToSave:[\"x\",\"mean\",\"variance\",\"scale\"],gradFunc:function(t,e,n){var r=n.varianceEpsilon,o=e[0],a=e[1],i=e[2],s=e[3],u=Ju(o),c=null==s?On(1):s,l=Br(a.shape,u.shape),h=[];if(1===a.rank){for(var f=0;f<u.shape.length-1;++f)h.push(u.shape[f]);h.push(1)}var d=Oo(o,a),p=To(t,c),v=ao(Or(i,On(r))),g=To(To(To(v,v),v),On(-.5));return{x:function(){return 1===a.rank?ur(To(To(t,wc(v.as4D(1,1,1,a.shape[0]),h)),c),o.shape):ur(To(To(t,v),c),o.shape)},mean:function(){var t=To(To(v,On(-1)),p);return 1===a.rank&&(t=th(t,l)),ur(t,a.shape)},variance:function(){var t=To(To(g,d),p);return 1===a.rank&&(t=th(t,l)),ur(t,a.shape)},scale:function(){var e=To(d,v),n=To(t,e);return 1===a.rank&&(n=th(n,l)),ur(n,a.shape)},offset:function(){var e=t;return 1===a.rank&&(e=th(e,l)),ur(e,a.shape)}}}},{kernelName:Tr,gradFunc:function(t){return{x:function(){return t.toFloat()}}}},{kernelName:Ar,inputsToSave:[\"indices\"],gradFunc:function(t,e){var n=e[0];return{indices:function(){return Gn(n.shape,\"float32\")}}}},{kernelName:Nr,inputsToSave:[\"x\"],gradFunc:function(t,e,n){var r=e[0],o=n.paddings.map((function(t){return t[0]}));return{x:function(){return t.slice(o,r.shape)}}}},{kernelName:\"Square\",inputsToSave:[\"x\"],gradFunc:function(t,e){var n=e[0];return{x:function(){return t.mul(n.toFloat().mul(2))}}}},{kernelName:Er,inputsToSave:[\"a\",\"b\"],gradFunc:function(t,e){var n=e[0],r=e[1],o=On(2);return{a:function(){return To(t,To(o,Oo(n,r)))},b:function(){return To(t,To(o,Oo(r,n)))}}}},{kernelName:Dr,inputsToSave:[\"x\"],gradFunc:function(t,e,n){var r=e[0],o=n.reps;return{x:function(){var e=Xn(r);if(1===r.rank)for(var n=0;n<o[0];++n)e=e.add(t.slice([n*r.shape[0]],[r.shape[0]]));else if(2===r.rank)for(n=0;n<o[0];++n)for(var a=0;a<o[1];++a)e=e.add(t.slice([n*r.shape[0],a*r.shape[1]],[r.shape[0],r.shape[1]]));else if(3===r.rank)for(n=0;n<o[0];++n)for(a=0;a<o[1];++a)for(var i=0;i<o[2];++i)e=e.add(t.slice([n*r.shape[0],a*r.shape[1],i*r.shape[2]],[r.shape[0],r.shape[1],r.shape[2]]));else{if(4!==r.rank)throw new Error(\"Gradient for tile operation is not implemented for rank-\"+r.rank+\" tensors yet.\");for(n=0;n<o[0];++n)for(a=0;a<o[1];++a)for(i=0;i<o[2];++i)for(var s=0;s<o[3];++s)e=e.add(t.slice([n*r.shape[0],a*r.shape[1],i*r.shape[2],s*r.shape[3]],[r.shape[0],r.shape[1],r.shape[2],r.shape[3]]))}return e}}}},{kernelName:\"Transpose\",gradFunc:function(t,e,n){var r=Rn(n.perm);return{x:function(){return ua(t,r)}}}}];Bf<Pf.length;Bf++){p(Pf[Bf])}var Lf=function(){function t(){}return t.prototype.fetch=function(t,e){return fetch(t,e)},t.prototype.now=function(){return performance.now()},t.prototype.encode=function(t,e){if(\"utf-8\"!==e&&\"utf8\"!==e)throw new Error(\"Browser's encoder only supports utf-8, but got \"+e);return null==this.textEncoder&&(this.textEncoder=new TextEncoder),this.textEncoder.encode(t)},t.prototype.decode=function(t,e){return new TextDecoder(e).decode(t)},t}();i().get(\"IS_BROWSER\")&&i().setPlatform(\"browser\",new Lf);var Wf,Uf=function(){return require(\"node-fetch\")},Vf=function(){function t(){this.util=require(\"util\"),this.textEncoder=new this.util.TextEncoder}return t.prototype.fetch=function(t,e){return null!=i().global.fetch?i().global.fetch(t,e):(null==Wf&&(Wf=Uf()),Wf(t,e))},t.prototype.now=function(){var t=process.hrtime();return 1e3*t[0]+t[1]/1e6},t.prototype.encode=function(t,e){if(\"utf-8\"!==e&&\"utf8\"!==e)throw new Error(\"Node built-in encoder only supports utf-8, but got \"+e);return this.textEncoder.encode(t)},t.prototype.decode=function(t,e){return 0===t.length?\"\":new this.util.TextDecoder(e).decode(t)},t}();i().get(\"IS_NODE\")&&i().setPlatform(\"node\",new Vf);var zf={float32:4,int32:4,uint16:2,uint8:1,bool:1},Gf=4;function Hf(t,e){for(var n={},r=0,o=function(e){var o=e.name,a=e.dtype,i=e.shape,s=k(i),u=void 0;if(\"quantization\"in e){var c=e.quantization;if(\"uint8\"!==c.dtype&&\"uint16\"!==c.dtype)throw new Error(\"Weight \"+e.name+\" has unknown quantization dtype \"+c.dtype+\". Supported quantization dtypes are: 'uint8' and 'uint16'.\");var l=zf[c.dtype],h=t.slice(r,r+s*l),f=\"uint8\"===c.dtype?new Uint8Array(h):new Uint16Array(h);if(\"float32\"===a)u=Float32Array.from(f,(function(t){return t*c.scale+c.min}));else{if(\"int32\"!==a)throw new Error(\"Unsupported dtype in weight '\"+o+\"': \"+a);u=Int32Array.from(f,(function(t){return Math.round(t*c.scale+c.min)}))}r+=s*l}else if(\"string\"===a){var d=k(e.shape);u=[];for(var p=0;p<d;p++){var v=new Uint32Array(t.slice(r,r+Gf))[0];r+=Gf;var g=new Uint8Array(t.slice(r,r+v));u.push(g),r+=v}}else{var m=zf[a];h=t.slice(r,r+s*m);if(\"float32\"===a)u=new Float32Array(h);else if(\"int32\"===a)u=new Int32Array(h);else{if(\"bool\"!==a)throw new Error(\"Unsupported dtype in weight '\"+o+\"': \"+a);u=new Uint8Array(h)}r+=s*m}n[o]=Fn(u,i,a)},a=0,i=e;a<i.length;a++){o(i[a])}return n}function qf(t){if(null===t)throw new Error(\"Invalid input value: \"+JSON.stringify(t));var e=0,n=[];t.forEach((function(t){if(e+=t.byteLength,n.push(t.byteLength===t.buffer.byteLength?t:new t.constructor(t)),!(t instanceof Float32Array||t instanceof Int32Array||t instanceof Uint8Array))throw new Error(\"Unsupported TypedArray subtype: \"+t.constructor.name)}));var r=new Uint8Array(e),o=0;return n.forEach((function(t){r.set(new Uint8Array(t.buffer),o),o+=t.byteLength})),r.buffer}var Kf=\"undefined\"!=typeof Buffer&&(\"undefined\"==typeof Blob||\"undefined\"==typeof atob||\"undefined\"==typeof btoa);function jf(t){return Kf?Buffer.byteLength(t):new Blob([t]).size}function Xf(t){var e=0;t.forEach((function(t){e+=t.byteLength}));var n=new Uint8Array(e),r=0;return t.forEach((function(t){n.set(new Uint8Array(t),r),r+=t.byteLength})),n.buffer}function Yf(t){for(t=t.trim();t.endsWith(\"/\");)t=t.slice(0,t.length-1);var e=t.split(\"/\");return e[e.length-1]}function $f(t){if(t.modelTopology instanceof ArrayBuffer)throw new Error(\"Expected JSON model topology, received ArrayBuffer.\");return{dateSaved:new Date,modelTopologyType:\"JSON\",modelTopologyBytes:null==t.modelTopology?0:jf(JSON.stringify(t.modelTopology)),weightSpecsBytes:null==t.weightSpecs?0:jf(JSON.stringify(t.weightSpecs)),weightDataBytes:null==t.weightData?0:t.weightData.byteLength}}var Qf=function(){function t(){this.saveRouters=[],this.loadRouters=[]}return t.getInstance=function(){return null==t.instance&&(t.instance=new t),t.instance},t.registerSaveRouter=function(e){t.getInstance().saveRouters.push(e)},t.registerLoadRouter=function(e){t.getInstance().loadRouters.push(e)},t.getSaveHandlers=function(e){return t.getHandlers(e,\"save\")},t.getLoadHandlers=function(e,n){return t.getHandlers(e,\"load\",n)},t.getHandlers=function(e,n,r){var o=[];return(\"load\"===n?t.getInstance().loadRouters:t.getInstance().saveRouters).forEach((function(t){var n=t(e,r);null!==n&&o.push(n)})),o},t}(),Jf=\"://\",Zf=function(){function t(){this.managers={}}return t.getInstance=function(){return null==t.instance&&(t.instance=new t),t.instance},t.registerManager=function(e,n){C(null!=e,(function(){return\"scheme must not be undefined or null.\"})),e.endsWith(Jf)&&(e=e.slice(0,e.indexOf(Jf))),C(e.length>0,(function(){return\"scheme must not be an empty string.\"}));var r=t.getInstance();C(null==r.managers[e],(function(){return\"A model store manager is already registered for scheme '\"+e+\"'.\"})),r.managers[e]=n},t.getManager=function(t){var e=this.getInstance().managers[t];if(null==e)throw new Error(\"Cannot find model manager for scheme '\"+t+\"'\");return e},t.getSchemes=function(){return Object.keys(this.getInstance().managers)},t}();function td(t){if(-1===t.indexOf(Jf))throw new Error(\"The url string provided does not contain a scheme. Supported schemes are: \"+Zf.getSchemes().join(\",\"));return{scheme:t.split(Jf)[0],path:t.split(Jf)[1]}}function ed(t,e,o){return void 0===o&&(o=!1),n(this,void 0,void 0,(function(){var n,a,i,s,u,c,l,h,f;return r(this,(function(r){switch(r.label){case 0:return C(t!==e,(function(){return\"Old path and new path are the same: '\"+t+\"'\"})),C((n=Qf.getLoadHandlers(t)).length>0,(function(){return\"Copying failed because no load handler is found for source URL \"+t+\".\"})),C(n.length<2,(function(){return\"Copying failed because more than one (\"+n.length+\") load handlers for source URL \"+t+\".\"})),a=n[0],C((i=Qf.getSaveHandlers(e)).length>0,(function(){return\"Copying failed because no save handler is found for destination URL \"+e+\".\"})),C(i.length<2,(function(){return\"Copying failed because more than one (\"+n.length+\") save handlers for destination URL \"+e+\".\"})),s=i[0],u=td(t).scheme,c=td(t).path,l=u===td(t).scheme,[4,a.load()];case 1:return h=r.sent(),o&&l?[4,Zf.getManager(u).removeModel(c)]:[3,3];case 2:r.sent(),r.label=3;case 3:return[4,s.save(h)];case 4:return f=r.sent(),!o||l?[3,6]:[4,Zf.getManager(u).removeModel(c)];case 5:r.sent(),r.label=6;case 6:return[2,f.modelArtifactsInfo]}}))}))}var nd=\"models_store\",rd=\"model_info_store\";function od(){if(!i().getBool(\"IS_BROWSER\"))throw new Error(\"Failed to obtain IndexedDB factory because the current environmentis not a web browser.\");var t=window||self,e=t.indexedDB||t.mozIndexedDB||t.webkitIndexedDB||t.msIndexedDB||t.shimIndexedDB;if(null==e)throw new Error(\"The current browser does not appear to support IndexedDB.\");return e}function ad(t){var e=t.result;e.createObjectStore(nd,{keyPath:\"modelPath\"}),e.createObjectStore(rd,{keyPath:\"modelPath\"})}var id=function(){function t(t){if(this.indexedDB=od(),null==t||!t)throw new Error(\"For IndexedDB, modelPath must not be null, undefined or empty.\");this.modelPath=t}return t.prototype.save=function(t){return n(this,void 0,void 0,(function(){return r(this,(function(e){if(t.modelTopology instanceof ArrayBuffer)throw new Error(\"BrowserLocalStorage.save() does not support saving model topology in binary formats yet.\");return[2,this.databaseAction(this.modelPath,t)]}))}))},t.prototype.load=function(){return n(this,void 0,void 0,(function(){return r(this,(function(t){return[2,this.databaseAction(this.modelPath)]}))}))},t.prototype.databaseAction=function(t,e){var n=this;return new Promise((function(t,r){var o=n.indexedDB.open(\"tensorflowjs\",1);o.onupgradeneeded=function(){return ad(o)},o.onsuccess=function(){var a=o.result;if(null==e){var i=a.transaction(nd,\"readonly\"),s=i.objectStore(nd).get(n.modelPath);s.onsuccess=function(){if(null==s.result)return a.close(),r(new Error(\"Cannot find model with path '\"+n.modelPath+\"' in IndexedDB.\"));t(s.result.modelArtifacts)},s.onerror=function(t){return a.close(),r(s.error)},i.oncomplete=function(){return a.close()}}else{var u,c=$f(e),l=a.transaction(rd,\"readwrite\"),h=l.objectStore(rd),f=h.put({modelPath:n.modelPath,modelArtifactsInfo:c});f.onsuccess=function(){var o=(u=a.transaction(nd,\"readwrite\")).objectStore(nd).put({modelPath:n.modelPath,modelArtifacts:e,modelArtifactsInfo:c});o.onsuccess=function(){return t({modelArtifactsInfo:c})},o.onerror=function(t){var e=(h=l.objectStore(rd)).delete(n.modelPath);e.onsuccess=function(){return a.close(),r(o.error)},e.onerror=function(t){return a.close(),r(o.error)}}},f.onerror=function(t){return a.close(),r(f.error)},l.oncomplete=function(){null==u?a.close():u.oncomplete=function(){return a.close()}}}},o.onerror=function(t){return r(o.error)}}))},t.URL_SCHEME=\"indexeddb://\",t}(),sd=function(t){return i().getBool(\"IS_BROWSER\")&&!Array.isArray(t)&&t.startsWith(id.URL_SCHEME)?(e=t.slice(id.URL_SCHEME.length),new id(e)):null;var e};Qf.registerSaveRouter(sd),Qf.registerLoadRouter(sd);var ud=function(){function t(){this.indexedDB=od()}return t.prototype.listModels=function(){return n(this,void 0,void 0,(function(){var t=this;return r(this,(function(e){return[2,new Promise((function(e,n){var r=t.indexedDB.open(\"tensorflowjs\",1);r.onupgradeneeded=function(){return ad(r)},r.onsuccess=function(){var t=r.result,o=t.transaction(rd,\"readonly\"),a=o.objectStore(rd).getAll();a.onsuccess=function(){for(var t={},n=0,r=a.result;n<r.length;n++){var o=r[n];t[o.modelPath]=o.modelArtifactsInfo}e(t)},a.onerror=function(e){return t.close(),n(a.error)},o.oncomplete=function(){return t.close()}},r.onerror=function(t){return n(r.error)}}))]}))}))},t.prototype.removeModel=function(t){return n(this,void 0,void 0,(function(){var e=this;return r(this,(function(n){var r;return t=(r=t).startsWith(id.URL_SCHEME)?r.slice(id.URL_SCHEME.length):r,[2,new Promise((function(n,r){var o=e.indexedDB.open(\"tensorflowjs\",1);o.onupgradeneeded=function(){return ad(o)},o.onsuccess=function(){var e,a=o.result,i=a.transaction(rd,\"readwrite\"),s=i.objectStore(rd),u=s.get(t);u.onsuccess=function(){if(null==u.result)return a.close(),r(new Error(\"Cannot find model with path '\"+t+\"' in IndexedDB.\"));var o=s.delete(t),i=function(){var o=(e=a.transaction(nd,\"readwrite\")).objectStore(nd).delete(t);o.onsuccess=function(){return n(u.result.modelArtifactsInfo)},o.onerror=function(t){return r(u.error)}};o.onsuccess=i,o.onerror=function(t){return i(),a.close(),r(u.error)}},u.onerror=function(t){return a.close(),r(u.error)},i.oncomplete=function(){null==e?a.close():e.oncomplete=function(){return a.close()}}},o.onerror=function(t){return r(o.error)}}))]}))}))},t}();if(i().getBool(\"IS_BROWSER\"))try{Zf.registerManager(id.URL_SCHEME,new ud)}catch(t){}var cd=\"/\",ld=\"tensorflowjs_models\",hd=\"info\",fd=\"model_topology\",dd=\"weight_specs\",pd=\"weight_data\",vd=\"model_metadata\";function gd(t){return{info:[ld,t,hd].join(cd),topology:[ld,t,fd].join(cd),weightSpecs:[ld,t,dd].join(cd),weightData:[ld,t,pd].join(cd),modelMetadata:[ld,t,vd].join(cd)}}function md(t){var e=t.split(cd);if(e.length<3)throw new Error(\"Invalid key format: \"+t);return e.slice(1,e.length-1).join(cd)}var yd=function(){function t(t){if(!i().getBool(\"IS_BROWSER\")||\"undefined\"==typeof window||void 0===window.localStorage)throw new Error(\"The current environment does not support local storage.\");if(this.LS=window.localStorage,null==t||!t)throw new Error(\"For local storage, modelPath must not be null, undefined or empty.\");this.modelPath=t,this.keys=gd(this.modelPath)}return t.prototype.save=function(t){return n(this,void 0,void 0,(function(){var e,n,o;return r(this,(function(r){if(t.modelTopology instanceof ArrayBuffer)throw new Error(\"BrowserLocalStorage.save() does not support saving model topology in binary formats yet.\");e=JSON.stringify(t.modelTopology),n=JSON.stringify(t.weightSpecs),o=$f(t);try{return this.LS.setItem(this.keys.info,JSON.stringify(o)),this.LS.setItem(this.keys.topology,e),this.LS.setItem(this.keys.weightSpecs,n),this.LS.setItem(this.keys.weightData,function(t){if(Kf)return Buffer.from(t).toString(\"base64\");for(var e=new Uint8Array(t),n=\"\",r=0,o=e.length;r<o;r++)n+=String.fromCharCode(e[r]);return btoa(n)}(t.weightData)),this.LS.setItem(this.keys.modelMetadata,JSON.stringify({format:t.format,generatedBy:t.generatedBy,convertedBy:t.convertedBy,userDefinedMetadata:t.userDefinedMetadata})),[2,{modelArtifactsInfo:o}]}catch(t){throw this.LS.removeItem(this.keys.info),this.LS.removeItem(this.keys.topology),this.LS.removeItem(this.keys.weightSpecs),this.LS.removeItem(this.keys.weightData),this.LS.removeItem(this.keys.modelMetadata),new Error(\"Failed to save model '\"+this.modelPath+\"' to local storage: size quota being exceeded is a possible cause of this failure: modelTopologyBytes=\"+o.modelTopologyBytes+\", weightSpecsBytes=\"+o.weightSpecsBytes+\", weightDataBytes=\"+o.weightDataBytes+\".\")}return[2]}))}))},t.prototype.load=function(){return n(this,void 0,void 0,(function(){var t,e,n,o,a,i,s;return r(this,(function(r){if(null==(t=JSON.parse(this.LS.getItem(this.keys.info))))throw new Error(\"In local storage, there is no model with name '\"+this.modelPath+\"'\");if(\"JSON\"!==t.modelTopologyType)throw new Error(\"BrowserLocalStorage does not support loading non-JSON model topology yet.\");if(e={},null==(n=JSON.parse(this.LS.getItem(this.keys.topology))))throw new Error(\"In local storage, the topology of model '\"+this.modelPath+\"' is missing.\");if(e.modelTopology=n,null==(o=JSON.parse(this.LS.getItem(this.keys.weightSpecs))))throw new Error(\"In local storage, the weight specs of model '\"+this.modelPath+\"' are missing.\");if(e.weightSpecs=o,null!=(a=this.LS.getItem(this.keys.modelMetadata))&&(i=JSON.parse(a),e.format=i.format,e.generatedBy=i.generatedBy,e.convertedBy=i.convertedBy,e.userDefinedMetadata=i.userDefinedMetadata),null==(s=this.LS.getItem(this.keys.weightData)))throw new Error(\"In local storage, the binary weight values of model '\"+this.modelPath+\"' are missing.\");return e.weightData=function(t){if(Kf){var e=Buffer.from(t,\"base64\");return e.buffer.slice(e.byteOffset,e.byteOffset+e.byteLength)}for(var n=atob(t),r=new Uint8Array(n.length),o=0;o<n.length;++o)r.set([n.charCodeAt(o)],o);return r.buffer}(s),[2,e]}))}))},t.URL_SCHEME=\"localstorage://\",t}(),xd=function(t){return i().getBool(\"IS_BROWSER\")&&!Array.isArray(t)&&t.startsWith(yd.URL_SCHEME)?(e=t.slice(yd.URL_SCHEME.length),new yd(e)):null;var e};Qf.registerSaveRouter(xd),Qf.registerLoadRouter(xd);var bd=function(){function t(){C(i().getBool(\"IS_BROWSER\"),(function(){return\"Current environment is not a web browser\"})),C(\"undefined\"==typeof window||void 0!==window.localStorage,(function(){return\"Current browser does not appear to support localStorage\"})),this.LS=window.localStorage}return t.prototype.listModels=function(){return n(this,void 0,void 0,(function(){var t,e,n,o,a,i;return r(this,(function(r){for(t={},e=ld+cd,n=cd+hd,o=0;o<this.LS.length;++o)(a=this.LS.key(o)).startsWith(e)&&a.endsWith(n)&&(i=md(a),t[i]=JSON.parse(this.LS.getItem(a)));return[2,t]}))}))},t.prototype.removeModel=function(t){return n(this,void 0,void 0,(function(){var e,n;return r(this,(function(r){var o;if(t=(o=t).startsWith(yd.URL_SCHEME)?o.slice(yd.URL_SCHEME.length):o,e=gd(t),null==this.LS.getItem(e.info))throw new Error(\"Cannot find model at path '\"+t+\"'\");return n=JSON.parse(this.LS.getItem(e.info)),this.LS.removeItem(e.info),this.LS.removeItem(e.topology),this.LS.removeItem(e.weightSpecs),this.LS.removeItem(e.weightData),[2,n]}))}))},t}();if(i().getBool(\"IS_BROWSER\"))try{Zf.registerManager(yd.URL_SCHEME,new bd)}catch(t){}var wd=\"model\",Cd=\".json\",Ed=\".weights.bin\";function Rd(t){return new Promise((function(t){return setTimeout(t)})).then(t)}var Id=function(){function t(e){if(!i().getBool(\"IS_BROWSER\"))throw new Error(\"browserDownloads() cannot proceed because the current environment is not a browser.\");e.startsWith(t.URL_SCHEME)&&(e=e.slice(t.URL_SCHEME.length)),null!=e&&0!==e.length||(e=wd),this.modelTopologyFileName=e+Cd,this.weightDataFileName=e+Ed}return t.prototype.save=function(t){return n(this,void 0,void 0,(function(){var e,n,o,a,i,s;return r(this,(function(r){switch(r.label){case 0:if(\"undefined\"==typeof document)throw new Error(\"Browser downloads are not supported in this environment since `document` is not present\");if(e=window.URL.createObjectURL(new Blob([t.weightData],{type:\"application/octet-stream\"})),!(t.modelTopology instanceof ArrayBuffer))return[3,1];throw new Error(\"BrowserDownloads.save() does not support saving model topology in binary formats yet.\");case 1:return n=[{paths:[\"./\"+this.weightDataFileName],weights:t.weightSpecs}],o={modelTopology:t.modelTopology,format:t.format,generatedBy:t.generatedBy,convertedBy:t.convertedBy,weightsManifest:n},a=window.URL.createObjectURL(new Blob([JSON.stringify(o)],{type:\"application/json\"})),(i=null==this.jsonAnchor?document.createElement(\"a\"):this.jsonAnchor).download=this.modelTopologyFileName,i.href=a,[4,Rd((function(){return i.dispatchEvent(new MouseEvent(\"click\"))}))];case 2:return r.sent(),null==t.weightData?[3,4]:((s=null==this.weightDataAnchor?document.createElement(\"a\"):this.weightDataAnchor).download=this.weightDataFileName,s.href=e,[4,Rd((function(){return s.dispatchEvent(new MouseEvent(\"click\"))}))]);case 3:r.sent(),r.label=4;case 4:return[2,{modelArtifactsInfo:$f(t)}]}}))}))},t.URL_SCHEME=\"downloads://\",t}(),kd=function(){function t(t){if(null==t||t.length<1)throw new Error(\"When calling browserFiles, at least 1 file is required, but received \"+t);this.files=t}return t.prototype.load=function(){return n(this,void 0,void 0,(function(){var t,e,n=this;return r(this,(function(r){return t=this.files[0],e=this.files.slice(1),[2,new Promise((function(r,o){var a=new FileReader;a.onload=function(a){var i=JSON.parse(a.target.result),s=i.modelTopology;if(null!=s){0===e.length&&r({modelTopology:s});var u=i.weightsManifest;if(null!=u){var c;try{c=n.checkManifestAndWeightFiles(u,e)}catch(t){return void o(t)}var l=[],h=[],f=[];u.forEach((function(t){t.paths.forEach((function(t){h.push(t),f.push(null)})),l.push.apply(l,t.weights)})),u.forEach((function(t){t.paths.forEach((function(t){var e=new FileReader;e.onload=function(e){var n=e.target.result,o=h.indexOf(t);f[o]=n,-1===f.indexOf(null)&&r({modelTopology:s,weightSpecs:l,weightData:Xf(f),format:i.format,generatedBy:i.generatedBy,convertedBy:i.convertedBy,userDefinedMetadata:i.userDefinedMetadata})},e.onerror=function(e){return o(\"Failed to weights data from file of path '\"+t+\"'.\")},e.readAsArrayBuffer(c[t])}))}))}else o(new Error(\"weightManifest field is missing from file \"+t.name))}else o(new Error(\"modelTopology field is missing from file \"+t.name))},a.onerror=function(e){return o(\"Failed to read model topology and weights manifest JSON from file '\"+t.name+\"'. BrowserFiles supports loading Keras-style tf.Model artifacts only.\")},a.readAsText(t)}))]}))}))},t.prototype.checkManifestAndWeightFiles=function(t,e){for(var n=[],r=e.map((function(t){return Yf(t.name)})),o={},a=0,i=t;a<i.length;a++){i[a].paths.forEach((function(t){var a=Yf(t);if(-1!==n.indexOf(a))throw new Error(\"Duplicate file basename found in weights manifest: '\"+a+\"'\");if(n.push(a),-1===r.indexOf(a))throw new Error(\"Weight file with basename '\"+a+\"' is not provided.\");o[t]=e[r.indexOf(a)]}))}if(n.length!==e.length)throw new Error(\"Mismatch in the number of files in weights manifest (\"+n.length+\") and the number of weight files provided (\"+e.length+\").\");return o},t}();function Sd(t,e,n,r){!function(t){C(null!=t&&Array.isArray(t)&&t.length>0,(function(){return\"promises must be a none empty array\"}))}(t),function(t,e){C(t>=0&&t<=1,(function(){return\"Progress fraction must be in range [0, 1], but got startFraction \"+t})),C(e>=0&&e<=1,(function(){return\"Progress fraction must be in range [0, 1], but got endFraction \"+e})),C(e>=t,(function(){return\"startFraction must be no more than endFraction, but got startFraction \"+t+\" and endFraction \"+e}))}(n=null==n?0:n,r=null==r?1:r);var o=0;return Promise.all(t.map((function(a){return a.then((function(a){var i=n+ ++o/t.length*(r-n);return e(i),a})),a})))}function Ad(t,e){return n(this,void 0,void 0,(function(){var n,o,a,s,u,c,l,h,f;return r(this,(function(r){switch(r.label){case 0:return null==e&&(e={}),n=null==e.fetchFunc?i().platform.fetch:e.fetchFunc,o=t.map((function(t){return n(t,e.requestInit,{isBinary:!0})})),a=0,s=.5,null!=e.onProgress?[3,2]:[4,Promise.all(o)];case 1:return u=r.sent(),[3,4];case 2:return[4,Sd(o,e.onProgress,a,s)];case 3:u=r.sent(),r.label=4;case 4:return c=u.map((function(t){return t.arrayBuffer()})),l=.5,h=1,null!=e.onProgress?[3,6]:[4,Promise.all(c)];case 5:return f=r.sent(),[3,8];case 6:return[4,Sd(c,e.onProgress,l,h)];case 7:f=r.sent(),r.label=8;case 8:return[2,f]}}))}))}function Td(t){var e=this;return function(o,a,i){return void 0===a&&(a=\"\"),n(e,void 0,void 0,(function(){var e,n,s,u,c,l,h,f,d,p;return r(this,(function(r){switch(r.label){case 0:if(e=o.map((function(){return!1})),n={},s=null!=i?i.map((function(){return!1})):[],u=[],o.forEach((function(t,r){var o=0;t.weights.forEach((function(t){var a=\"quantization\"in t?t.quantization.dtype:t.dtype,c=zf[a]*k(t.shape),l=function(){e[r]=!0,null==n[r]&&(n[r]=[]),n[r].push({manifestEntry:t,groupOffset:o,sizeBytes:c})};null!=i?i.forEach((function(e,n){e===t.name&&(l(),s[n]=!0)})):l(),u.push(t.name),o+=c}))})),!s.every((function(t){return t})))throw c=i.filter((function(t,e){return!s[e]})),new Error(\"Could not find weights in manifest with names: \"+c.join(\", \")+\". \\nManifest JSON has weights with names: \"+u.join(\", \")+\".\");return l=e.reduce((function(t,e,n){return e&&t.push(n),t}),[]),h=[],l.forEach((function(t){o[t].paths.forEach((function(t){var e=a+(a.endsWith(\"/\")?\"\":\"/\")+t;h.push(e)}))})),[4,t(h)];case 1:return f=r.sent(),d={},p=0,l.forEach((function(t){for(var e=o[t].paths.length,r=0,a=0;a<e;a++)r+=f[p+a].byteLength;for(var i=new ArrayBuffer(r),s=new Uint8Array(i),u=0,c=0;c<e;c++){var l=new Uint8Array(f[p+c]);s.set(l,u),u+=l.byteLength}n[t].forEach((function(t){var e=Hf(i.slice(t.groupOffset,t.groupOffset+t.sizeBytes),[t.manifestEntry]);for(var n in e)d[n]=e[n]})),p+=e})),[2,d]}}))}))}}Qf.registerSaveRouter((function(t){return i().getBool(\"IS_BROWSER\")&&!Array.isArray(t)&&t.startsWith(Id.URL_SCHEME)?function(t){void 0===t&&(t=\"model\");return new Id(t)}(t.slice(Id.URL_SCHEME.length)):null}));var Dd=function(){function t(t,e){if(this.DEFAULT_METHOD=\"POST\",null==e&&(e={}),this.weightPathPrefix=e.weightPathPrefix,this.onProgress=e.onProgress,null!=e.fetchFunc?(C(\"function\"==typeof e.fetchFunc,(function(){return\"Must pass a function that matches the signature of `fetch` (see https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)\"})),this.fetch=e.fetchFunc):this.fetch=i().platform.fetch,C(null!=t&&t.length>0,(function(){return\"URL path for http must not be null, undefined or empty.\"})),Array.isArray(t)&&C(2===t.length,(function(){return\"URL paths for http must have a length of 2, (actual length is \"+t.length+\").\"})),this.path=t,null!=e.requestInit&&null!=e.requestInit.body)throw new Error(\"requestInit is expected to have no pre-existing body, but has one.\");this.requestInit=e.requestInit||{}}return t.prototype.save=function(t){return n(this,void 0,void 0,(function(){var e,n,o,a;return r(this,(function(r){switch(r.label){case 0:if(t.modelTopology instanceof ArrayBuffer)throw new Error(\"BrowserHTTPRequest.save() does not support saving model topology in binary formats yet.\");return(e=Object.assign({method:this.DEFAULT_METHOD},this.requestInit)).body=new FormData,n=[{paths:[\"./model.weights.bin\"],weights:t.weightSpecs}],o={modelTopology:t.modelTopology,format:t.format,generatedBy:t.generatedBy,convertedBy:t.convertedBy,userDefinedMetadata:t.userDefinedMetadata,weightsManifest:n},e.body.append(\"model.json\",new Blob([JSON.stringify(o)],{type:\"application/json\"}),\"model.json\"),null!=t.weightData&&e.body.append(\"model.weights.bin\",new Blob([t.weightData],{type:\"application/octet-stream\"}),\"model.weights.bin\"),[4,this.fetch(this.path,e)];case 1:if((a=r.sent()).ok)return[2,{modelArtifactsInfo:$f(t),responses:[a]}];throw new Error(\"BrowserHTTPRequest.save() failed due to HTTP response status \"+a.status+\".\")}}))}))},t.prototype.load=function(){return n(this,void 0,void 0,(function(){var t,e,n,o,a,i,s,u,c,l,h,f;return r(this,(function(r){switch(r.label){case 0:return[4,this.fetch(this.path,this.requestInit)];case 1:if(!(t=r.sent()).ok)throw new Error(\"Request to \"+this.path+\" failed with status code \"+t.status+\". Please verify this URL points to the model JSON of the model to load.\");r.label=2;case 2:return r.trys.push([2,4,,5]),[4,t.json()];case 3:return e=r.sent(),[3,5];case 4:throw r.sent(),n=\"Failed to parse model JSON of response from \"+this.path+\".\",this.path.endsWith(\".pb\")?n+=\" Your path contains a .pb file extension. Support for .pb models have been removed in TensorFlow.js 1.0 in favor of .json models. You can re-convert your Python TensorFlow model using the TensorFlow.js 1.0 conversion scripts or you can convert your.pb models with the 'pb2json'NPM script in the tensorflow/tfjs-converter repository.\":n+=\" Please make sure the server is serving valid JSON for this request.\",new Error(n);case 5:if(o=e.modelTopology,a=e.weightsManifest,i=e.generatedBy,s=e.convertedBy,u=e.format,c=e.userDefinedMetadata,null==o&&null==a)throw new Error(\"The JSON from HTTP path \"+this.path+\" contains neither model topology or manifest for weights.\");return null==a?[3,7]:[4,this.loadWeights(a)];case 6:f=r.sent(),l=f[0],h=f[1],r.label=7;case 7:return[2,{modelTopology:o,weightSpecs:l,weightData:h,userDefinedMetadata:c,generatedBy:i,convertedBy:s,format:u}]}}))}))},t.prototype.loadWeights=function(t){return n(this,void 0,void 0,(function(){var e,n,o,a,i,s,u,c,l,h,f;return r(this,(function(r){switch(r.label){case 0:for(e=Array.isArray(this.path)?this.path[1]:this.path,n=function(t){var e=t.lastIndexOf(\"/\"),n=t.lastIndexOf(\"?\"),r=t.substring(0,e),o=n>e?t.substring(n):\"\";return[r+\"/\",o]}(e),o=n[0],a=n[1],i=this.weightPathPrefix||o,s=[],u=0,c=t;u<c.length;u++)l=c[u],s.push.apply(s,l.weights);return h=[],t.forEach((function(t){t.paths.forEach((function(t){h.push(i+t+a)}))})),[4,Ad(h,{requestInit:this.requestInit,fetchFunc:this.fetch,onProgress:this.onProgress})];case 1:return f=r.sent(),[2,[s,Xf(f)]]}}))}))},t.URL_SCHEME_REGEX=/^https?:\\/\\//,t}();function Nd(t){return null!=t.match(Dd.URL_SCHEME_REGEX)}var Fd=function(t,e){if(\"undefined\"==typeof fetch)return null;return(Array.isArray(t)?t.every((function(t){return Nd(t)})):Nd(t))?_d(t,{onProgress:e}):null};function _d(t,e){return new Dd(t,e)}Qf.registerSaveRouter(Fd),Qf.registerLoadRouter(Fd);var Od=function(){function t(t){this.modelArtifacts=t}return t.prototype.load=function(){return n(this,void 0,void 0,(function(){return r(this,(function(t){return[2,this.modelArtifacts]}))}))},t}(),Md=function(){function t(t){this.saveHandler=t}return t.prototype.save=function(t){return n(this,void 0,void 0,(function(){return r(this,(function(e){return[2,this.saveHandler(t)]}))}))},t}();var Bd=Object.freeze({browserFiles:function(t){return new kd(t)},browserHTTPRequest:function(t,e){return _d(t,e)},concatenateArrayBuffers:Xf,decodeWeights:Hf,encodeWeights:function(t,e){return n(this,void 0,void 0,(function(){var o,a,i,s,u,c=this;return r(this,(function(l){switch(l.label){case 0:for(o=[],a=[],i=Array.isArray(t)?t.map((function(t){return t.name})):Object.keys(t),s=function(s){var u=i[s],l=Array.isArray(t)?t[s].tensor:t[u];if(\"float32\"!==l.dtype&&\"int32\"!==l.dtype&&\"bool\"!==l.dtype&&\"string\"!==l.dtype)throw new Error(\"Unsupported dtype in weight '\"+u+\"': \"+l.dtype);var h={name:u,shape:l.shape,dtype:l.dtype};if(\"string\"===l.dtype){var f=new Promise((function(t){return n(c,void 0,void 0,(function(){var e,n,o,a,i,s,u;return r(this,(function(r){switch(r.label){case 0:return[4,l.bytes()];case 1:for(e=r.sent(),n=e.reduce((function(t,e){return t+e.length}),0)+Gf*e.length,o=new Uint8Array(n),a=0,i=0;i<e.length;i++)s=e[i],u=new Uint8Array(new Uint32Array([s.length]).buffer),o.set(u,a),a+=Gf,o.set(s,a),a+=s.length;return t(o),[2]}}))}))}));a.push(f)}else a.push(l.data());null!=e&&(h.group=e),o.push(h)},u=0;u<i.length;++u)s(u);return[4,Promise.all(a)];case 1:return[2,{data:qf(l.sent()),specs:o}]}}))}))},fromMemory:function(t,e,n,r){return 1===arguments.length?null!=t.modelTopology||null!=t.weightSpecs?new Od(t):(console.warn(\"Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release.\"),new Od({modelTopology:t})):(console.warn(\"Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release.\"),new Od({modelTopology:t,weightSpecs:e,weightData:n,trainingConfig:r}))},getLoadHandlers:function(t,e){return Qf.getLoadHandlers(t,e)},getModelArtifactsInfoForJSON:$f,getSaveHandlers:function(t){return Qf.getSaveHandlers(t)},http:_d,isHTTPScheme:Nd,loadWeights:function(t,e,o,a){return void 0===e&&(e=\"\"),n(this,void 0,void 0,(function(){return r(this,(function(n){return[2,Td((function(t){return Ad(t,{requestInit:a})}))(t,e,o)]}))}))},registerLoadRouter:function(t){return Qf.registerLoadRouter(t)},registerSaveRouter:function(t){return Qf.registerSaveRouter(t)},weightsLoaderFactory:Td,withSaveHandler:function(t){return new Md(t)},copyModel:function(t,e){return n(this,void 0,void 0,(function(){return r(this,(function(n){return!1,[2,ed(t,e,!1)]}))}))},listModels:function(){return n(this,void 0,void 0,(function(){var t,e,n,o,a,i,s;return r(this,(function(r){switch(r.label){case 0:t=Zf.getSchemes(),e={},n=0,o=t,r.label=1;case 1:return n<o.length?(a=o[n],[4,Zf.getManager(a).listModels()]):[3,4];case 2:for(s in i=r.sent())e[a+Jf+s]=i[s];r.label=3;case 3:return n++,[3,1];case 4:return[2,e]}}))}))},moveModel:function(t,e){return n(this,void 0,void 0,(function(){return r(this,(function(n){return!0,[2,ed(t,e,!0)]}))}))},removeModel:function(t){return n(this,void 0,void 0,(function(){var e;return r(this,(function(n){return e=td(t),[2,Zf.getManager(e.scheme).removeModel(e.path)]}))}))}});var Pd,Ld=An({confusionMatrix_:function(t,e,n){var r=gn(t,\"labels\",\"confusionMatrix\"),o=gn(e,\"predictions\",\"confusionMatrix\");C(null==n||n>0&&Number.isInteger(n),(function(){return\"If provided, numClasses must be a positive integer, but got \"+n})),C(1===r.rank,(function(){return\"Expected the rank of labels to be 1, but got \"+r.rank})),C(1===o.rank,(function(){return\"Expected the rank of predictions to be 1, but got \"+o.rank})),C(r.shape[0]===o.shape[0],(function(){return\"Mismatch in the number of examples: \"+r.shape[0]+\" vs. \"+o.shape[0]+\". Labels and predictions should have the same number of elements.\"})),C(n>0&&Number.isInteger(n),(function(){return\"numClasses is required to be a positive integer, but got \"+n}));var a=Rc(r.asType(\"int32\"),n),i=Rc(o.asType(\"int32\"),n);return a.transpose().matMul(i).asType(\"int32\")}}),Wd=Object.freeze({confusionMatrix:Ld});var Ud=An({fromPixels_:function(t,e){if(void 0===e&&(e=3),e>4)throw new Error(\"Cannot construct Tensor with more than 4 channels from pixels.\");if(null==t)throw new Error(\"pixels passed to tf.browser.fromPixels() can not be null\");var n=!1,r=!1,o=!1,a=!1,i=!1;if(t.data instanceof Uint8Array)n=!0;else if(\"undefined\"!=typeof ImageData&&t instanceof ImageData)r=!0;else if(\"undefined\"!=typeof HTMLVideoElement&&t instanceof HTMLVideoElement)o=!0;else if(\"undefined\"!=typeof HTMLImageElement&&t instanceof HTMLImageElement)a=!0;else{if(null==t.getContext)throw new Error(\"pixels passed to tf.browser.fromPixels() must be either an HTMLVideoElement, HTMLImageElement, HTMLCanvasElement, ImageData in browser, or OffscreenCanvas, ImageData in webworker or {data: Uint32Array, width: number, height: number}, but was \"+t.constructor.name);i=!0}if(o){if(o&&t.readyState<2)throw new Error(\"The video element has not loaded data yet. Please wait for `loadeddata` event on the <video> element.\")}if(null!=l(\"FromPixels\",Lt.backendName))return Lt.runKernel(\"FromPixels\",{pixels:t},{numChannels:e});var s,u,c=o?[t.videoWidth,t.videoHeight]:[t.width,t.height],h=c[0],f=c[1];if(i?s=t.getContext(\"2d\").getImageData(0,0,h,f).data:r||n?s=t.data:(a||o)&&(null==Pd&&(Pd=document.createElement(\"canvas\").getContext(\"2d\")),Pd.canvas.width=h,Pd.canvas.height=f,Pd.drawImage(t,0,0,h,f),s=Pd.getImageData(0,0,h,f).data),4===e)u=new Int32Array(s);else{var d=h*f;u=new Int32Array(d*e);for(var p=0;p<d;p++)for(var v=0;v<e;++v)u[p*e+v]=s[4*p+v]}return Pn(u,[f,h,e],\"int32\")}}),Vd=Object.freeze({toPixels:function(t,e){return n(this,void 0,void 0,(function(){var n,o,a,i,s,u,c,l,h,f,d,p,v,g,m,y,x,b,w,C,E,R,I;return r(this,(function(r){switch(r.label){case 0:if(n=gn(t,\"img\",\"toPixels\"),t instanceof wt||(n=n.toInt()),2!==n.rank&&3!==n.rank)throw new Error(\"toPixels only supports rank 2 or 3 tensors, got rank \"+n.rank+\".\");if(o=n.shape.slice(0,2),a=o[0],i=o[1],(s=2===n.rank?1:n.shape[2])>4||2===s)throw new Error(\"toPixels only supports depth of size 1, 3 or 4 but got \"+s);return[4,n.data()];case 1:return u=r.sent(),c=n.min(),l=n.max(),[4,Promise.all([c.data(),l.data()])];case 2:if(h=r.sent(),f=h[0],d=h[1],p=f[0],v=d[0],c.dispose(),l.dispose(),\"float32\"===n.dtype){if(p<0||v>1)throw new Error(\"Tensor values for a float32 Tensor must be in the range [0 - 1] but got range [\"+p+\" - \"+v+\"].\")}else{if(\"int32\"!==n.dtype)throw new Error(\"Unsupported type for toPixels: \"+n.dtype+\". Please use float32 or int32 tensors.\");if(p<0||v>255)throw new Error(\"Tensor values for a int32 Tensor must be in the range [0 - 255] but got range [\"+p+\" - \"+v+\"].\")}for(g=\"float32\"===n.dtype?255:1,m=new Uint8ClampedArray(i*a*4),y=0;y<a*i;++y)x=void 0,b=void 0,w=void 0,C=void 0,1===s?(x=u[y]*g,b=u[y]*g,w=u[y]*g,C=255):3===s?(x=u[3*y]*g,b=u[3*y+1]*g,w=u[3*y+2]*g,C=255):4===s&&(x=u[4*y]*g,b=u[4*y+1]*g,w=u[4*y+2]*g,C=u[4*y+3]*g),m[(E=4*y)+0]=Math.round(x),m[E+1]=Math.round(b),m[E+2]=Math.round(w),m[E+3]=Math.round(C);return null!=e&&(e.width=i,e.height=a,R=e.getContext(\"2d\"),I=new ImageData(m,i,a),R.putImageData(I,0,0)),n!==t&&n.dispose(),[2,m]}}))}))},fromPixels:Ud}),zd=function(){function t(){}return t.prototype.getClassName=function(){return this.constructor.className},t.fromConfig=function(t,e){return new t(e)},t}(),Gd=function(){function t(){this.classNameMap={}}return t.getMap=function(){return null==t.instance&&(t.instance=new t),t.instance},t.register=function(e){t.getMap().classNameMap[e.className]=[e,e.fromConfig]},t}();function Hd(t){C(null!=t.className,(function(){return\"Class being registered does not have the static className property defined.\"})),C(\"string\"==typeof t.className,(function(){return\"className is required to be a string, but got type \"+typeof t.className})),C(t.className.length>0,(function(){return\"Class being registered has an empty-string as its className, which is disallowed.\"})),Gd.register(t)}var qd=Object.freeze({Serializable:zd,SerializationMap:Gd,registerClass:Hd}),Kd=\"1.7.4\";var jd=Object.freeze({gpgpu_util:Rs,webgl_util:Ge,forceHalfFloat:function(){i().set(\"WEBGL_FORCE_F16_TEXTURES\",!0)},MathBackendWebGL:Uu,setWebGLContext:Kt,GPGPUContext:Is}),Xd=function(t){function o(){return null!==t&&t.apply(this,arguments)||this}return e(o,t),o.prototype.minimize=function(t,e,n){void 0===e&&(e=!1);var r=this.computeGradients(t,n),o=r.value,a=r.grads;if(null!=n){var i=n.map((function(t){return{name:t.name,tensor:a[t.name]}}));this.applyGradients(i)}else this.applyGradients(a);return tn(a),e?o:(o.dispose(),null)},Object.defineProperty(o.prototype,\"iterations\",{get:function(){return null==this.iterations_&&(this.iterations_=0),this.iterations_},enumerable:!0,configurable:!0}),o.prototype.incrementIterations=function(){this.iterations_=this.iterations+1},o.prototype.computeGradients=function(t,e){return ra(t,e)},o.prototype.dispose=function(){null!=this.iterations_&&tn(this.iterations_)},o.prototype.saveIterations=function(){return n(this,void 0,void 0,(function(){return r(this,(function(t){return null==this.iterations_&&(this.iterations_=0),[2,{name:\"iter\",tensor:On(this.iterations_,\"int32\")}]}))}))},o.prototype.getWeights=function(){return n(this,void 0,void 0,(function(){return r(this,(function(t){throw new Error(\"getWeights() is not implemented for this optimizer yet.\")}))}))},o.prototype.setWeights=function(t){return n(this,void 0,void 0,(function(){return r(this,(function(t){throw new Error(\"setWeights() is not implemented for this optimizer class \"+this.getClassName())}))}))},o.prototype.extractIterations=function(t){return n(this,void 0,void 0,(function(){var e;return r(this,(function(n){switch(n.label){case 0:return e=this,[4,t[0].tensor.data()];case 1:return e.iterations_=n.sent()[0],[2,t.slice(1)]}}))}))},o}(zd);Object.defineProperty(Xd,Symbol.hasInstance,{value:function(t){return null!=t.minimize&&null!=t.computeGradients&&null!=t.applyGradients}});var Yd=function(t){function o(e,n,r){void 0===r&&(r=null);var o=t.call(this)||this;return o.learningRate=e,o.rho=n,o.epsilon=r,o.accumulatedGrads=[],o.accumulatedUpdates=[],null==r&&(o.epsilon=Lt.backend.epsilon()),o}return e(o,t),o.prototype.applyGradients=function(t){var e=this;(Array.isArray(t)?t.map((function(t){return t.name})):Object.keys(t)).forEach((function(n,r){var o=Lt.registeredVariables[n];null==e.accumulatedGrads[r]&&(e.accumulatedGrads[r]={originalName:n+\"/accum_grad\",variable:Ze((function(){return Xn(o).variable(!1)}))}),null==e.accumulatedUpdates[r]&&(e.accumulatedUpdates[r]={originalName:n+\"/accum_var\",variable:Ze((function(){return Xn(o).variable(!1)}))});var a=Array.isArray(t)?t[r].tensor:t[n];if(null!=a){var i=e.accumulatedGrads[r].variable,s=e.accumulatedUpdates[r].variable;Ze((function(){var t=i.mul(e.rho).add(a.square().mul(1-e.rho)),n=s.add(e.epsilon).sqrt().div(i.add(e.epsilon).sqrt()).mul(a),r=s.mul(e.rho).add(n.square().mul(1-e.rho));i.assign(t),s.assign(r);var u=n.mul(-e.learningRate).add(o);o.assign(u)}))}})),this.incrementIterations()},o.prototype.dispose=function(){null!=this.accumulatedUpdates&&(tn(this.accumulatedGrads.map((function(t){return t.variable}))),tn(this.accumulatedUpdates.map((function(t){return t.variable}))))},o.prototype.getWeights=function(){return n(this,void 0,void 0,(function(){var t;return r(this,(function(e){switch(e.label){case 0:return t=this.accumulatedGrads.concat(this.accumulatedUpdates),[4,this.saveIterations()];case 1:return[2,[e.sent()].concat(t.map((function(t){return{name:t.originalName,tensor:t.variable}})))]}}))}))},o.prototype.setWeights=function(t){return n(this,void 0,void 0,(function(){var e;return r(this,(function(n){switch(n.label){case 0:return[4,this.extractIterations(t)];case 1:return t=n.sent(),e=t.length/2,!1,this.accumulatedGrads=t.slice(0,e).map((function(t){return{originalName:t.name,variable:t.tensor.variable(!1)}})),this.accumulatedUpdates=t.slice(e,2*e).map((function(t){return{originalName:t.name,variable:t.tensor.variable(!1)}})),[2]}}))}))},o.prototype.getConfig=function(){return{learningRate:this.learningRate,rho:this.rho,epsilon:this.epsilon}},o.fromConfig=function(t,e){return new t(e.learningRate,e.rho,e.epsilon)},o.className=\"Adadelta\",o}(Xd);Hd(Yd);var $d=function(t){function o(e,n){void 0===n&&(n=.1);var r=t.call(this)||this;return r.learningRate=e,r.initialAccumulatorValue=n,r.accumulatedGrads=[],r}return e(o,t),o.prototype.applyGradients=function(t){var e=this;(Array.isArray(t)?t.map((function(t){return t.name})):Object.keys(t)).forEach((function(n,r){var o=Lt.registeredVariables[n];if(null==e.accumulatedGrads[r]){e.accumulatedGrads[r]={originalName:n+\"/accumulator\",variable:Ze((function(){return Hn(o.shape,e.initialAccumulatorValue).variable(!1)}))}}var a=Array.isArray(t)?t[r].tensor:t[n];if(null!=a){var i=e.accumulatedGrads[r].variable;Ze((function(){var t=i.add(a.square());i.assign(t);var n=a.div(t.add(Lt.backend.epsilon()).sqrt()).mul(-e.learningRate).add(o);o.assign(n)}))}})),this.incrementIterations()},o.prototype.dispose=function(){null!=this.accumulatedGrads&&tn(this.accumulatedGrads.map((function(t){return t.variable})))},o.prototype.getWeights=function(){return n(this,void 0,void 0,(function(){return r(this,(function(t){switch(t.label){case 0:return[4,this.saveIterations()];case 1:return[2,[t.sent()].concat(this.accumulatedGrads.map((function(t){return{name:t.originalName,tensor:t.variable}})))]}}))}))},o.prototype.setWeights=function(t){return n(this,void 0,void 0,(function(){return r(this,(function(e){switch(e.label){case 0:return[4,this.extractIterations(t)];case 1:return t=e.sent(),!1,this.accumulatedGrads=t.map((function(t){return{originalName:t.name,variable:t.tensor.variable(!1)}})),[2]}}))}))},o.prototype.getConfig=function(){return{learningRate:this.learningRate,initialAccumulatorValue:this.initialAccumulatorValue}},o.fromConfig=function(t,e){return new t(e.learningRate,e.initialAccumulatorValue)},o.className=\"Adagrad\",o}(Xd);Hd($d);var Qd=function(t){function o(e,n,r,o){void 0===o&&(o=null);var a=t.call(this)||this;return a.learningRate=e,a.beta1=n,a.beta2=r,a.epsilon=o,a.accumulatedFirstMoment=[],a.accumulatedSecondMoment=[],Ze((function(){a.accBeta1=On(n).variable(),a.accBeta2=On(r).variable()})),null==o&&(a.epsilon=Lt.backend.epsilon()),a}return e(o,t),o.prototype.applyGradients=function(t){var e=this,n=Array.isArray(t)?t.map((function(t){return t.name})):Object.keys(t);Ze((function(){var r=Oo(1,e.accBeta1),o=Oo(1,e.accBeta2);n.forEach((function(n,a){var i=Lt.registeredVariables[n];null==e.accumulatedFirstMoment[a]&&(e.accumulatedFirstMoment[a]={originalName:n+\"/m\",variable:Ze((function(){return Xn(i).variable(!1)}))}),null==e.accumulatedSecondMoment[a]&&(e.accumulatedSecondMoment[a]={originalName:n+\"/v\",variable:Ze((function(){return Xn(i).variable(!1)}))});var s=Array.isArray(t)?t[a].tensor:t[n];if(null!=s){var u=e.accumulatedFirstMoment[a].variable,c=e.accumulatedSecondMoment[a].variable,l=u.mul(e.beta1).add(s.mul(1-e.beta1)),h=c.mul(e.beta2).add(s.square().mul(1-e.beta2)),f=l.div(r),d=h.div(o);u.assign(l),c.assign(h);var p=f.div(d.sqrt().add(e.epsilon)).mul(-e.learningRate).add(i);i.assign(p)}})),e.accBeta1.assign(e.accBeta1.mul(e.beta1)),e.accBeta2.assign(e.accBeta2.mul(e.beta2))})),this.incrementIterations()},o.prototype.dispose=function(){this.accBeta1.dispose(),this.accBeta2.dispose(),null!=this.accumulatedFirstMoment&&tn(this.accumulatedFirstMoment.map((function(t){return t.variable}))),null!=this.accumulatedSecondMoment&&tn(this.accumulatedSecondMoment.map((function(t){return t.variable})))},o.prototype.getWeights=function(){return n(this,void 0,void 0,(function(){var t;return r(this,(function(e){switch(e.label){case 0:return t=this.accumulatedFirstMoment.concat(this.accumulatedSecondMoment),[4,this.saveIterations()];case 1:return[2,[e.sent()].concat(t.map((function(t){return{name:t.originalName,tensor:t.variable}})))]}}))}))},o.prototype.setWeights=function(t){return n(this,void 0,void 0,(function(){var e,n=this;return r(this,(function(r){switch(r.label){case 0:return[4,this.extractIterations(t)];case 1:return t=r.sent(),Ze((function(){n.accBeta1.assign(No(n.beta1,n.iterations_+1)),n.accBeta2.assign(No(n.beta2,n.iterations_+1))})),e=t.length/2,!1,this.accumulatedFirstMoment=t.slice(0,e).map((function(t){return{originalName:t.name,variable:t.tensor.variable(!1)}})),this.accumulatedSecondMoment=t.slice(e,2*e).map((function(t){return{originalName:t.name,variable:t.tensor.variable(!1)}})),[2]}}))}))},o.prototype.getConfig=function(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon}},o.fromConfig=function(t,e){return new t(e.learningRate,e.beta1,e.beta2,e.epsilon)},o.className=\"Adam\",o}(Xd);Hd(Qd);var Jd=function(t){function o(e,n,r,o,a){void 0===o&&(o=null),void 0===a&&(a=0);var i=t.call(this)||this;return i.learningRate=e,i.beta1=n,i.beta2=r,i.epsilon=o,i.decay=a,i.accumulatedFirstMoment=[],i.accumulatedWeightedInfNorm=[],Ze((function(){i.iteration=On(0).variable(),i.accBeta1=On(n).variable()})),null==o&&(i.epsilon=Lt.backend.epsilon()),i}return e(o,t),o.prototype.applyGradients=function(t){var e=this,n=Array.isArray(t)?t.map((function(t){return t.name})):Object.keys(t);Ze((function(){var r=Oo(1,e.accBeta1),o=Bo(-e.learningRate,e.iteration.mul(e.decay).add(1));n.forEach((function(n,a){var i=Lt.registeredVariables[n];null==e.accumulatedFirstMoment[a]&&(e.accumulatedFirstMoment[a]={originalName:n+\"/m\",variable:Xn(i).variable(!1)}),null==e.accumulatedWeightedInfNorm[a]&&(e.accumulatedWeightedInfNorm[a]={originalName:n+\"/v\",variable:Xn(i).variable(!1)});var s=Array.isArray(t)?t[a].tensor:t[n];if(null!=s){var u=e.accumulatedFirstMoment[a].variable,c=e.accumulatedWeightedInfNorm[a].variable,l=u.mul(e.beta1).add(s.mul(1-e.beta1)),h=c.mul(e.beta2),f=s.abs(),d=h.maximum(f);u.assign(l),c.assign(d);var p=o.div(r).mul(l.div(d.add(e.epsilon))).add(i);i.assign(p)}})),e.iteration.assign(e.iteration.add(1)),e.accBeta1.assign(e.accBeta1.mul(e.beta1))})),this.incrementIterations()},o.prototype.dispose=function(){this.accBeta1.dispose(),this.iteration.dispose(),null!=this.accumulatedFirstMoment&&tn(this.accumulatedFirstMoment.map((function(t){return t.variable}))),null!=this.accumulatedWeightedInfNorm&&tn(this.accumulatedWeightedInfNorm.map((function(t){return t.variable})))},o.prototype.getWeights=function(){return n(this,void 0,void 0,(function(){return r(this,(function(t){throw new Error(\"getWeights() is not implemented for Adamax yet.\")}))}))},o.prototype.setWeights=function(t){return n(this,void 0,void 0,(function(){return r(this,(function(t){throw new Error(\"setWeights() is not implemented for Adamax yet.\")}))}))},o.prototype.getConfig=function(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon,decay:this.decay}},o.fromConfig=function(t,e){return new t(e.learningRate,e.beta1,e.beta2,e.epsilon,e.decay)},o.className=\"Adamax\",o}(Xd);Hd(Jd);var Zd=function(t){function o(e){var n=t.call(this)||this;return n.learningRate=e,n.setLearningRate(e),n}return e(o,t),o.prototype.applyGradients=function(t){var e=this;(Array.isArray(t)?t.map((function(t){return t.name})):Object.keys(t)).forEach((function(n,r){var o=Array.isArray(t)?t[r].tensor:t[n];if(null!=o){var a=Lt.registeredVariables[n];Ze((function(){var t=e.c.mul(o).add(a);a.assign(t)}))}})),this.incrementIterations()},o.prototype.setLearningRate=function(t){this.learningRate=t,null!=this.c&&this.c.dispose(),this.c=en(On(-t))},o.prototype.dispose=function(){this.c.dispose()},o.prototype.getWeights=function(){return n(this,void 0,void 0,(function(){return r(this,(function(t){switch(t.label){case 0:return[4,this.saveIterations()];case 1:return[2,[t.sent()]]}}))}))},o.prototype.setWeights=function(t){return n(this,void 0,void 0,(function(){return r(this,(function(e){switch(e.label){case 0:return[4,this.extractIterations(t)];case 1:if(0!==(t=e.sent()).length)throw new Error(\"SGD optimizer does not have settable weights.\");return[2]}}))}))},o.prototype.getConfig=function(){return{learningRate:this.learningRate}},o.fromConfig=function(t,e){return new t(e.learningRate)},o.className=\"SGD\",o}(Xd);Hd(Zd);var tp=function(t){function o(e,n,r){void 0===r&&(r=!1);var o=t.call(this,e)||this;return o.learningRate=e,o.momentum=n,o.useNesterov=r,o.accumulations=[],o.m=On(o.momentum),o}return e(o,t),o.prototype.applyGradients=function(t){var e=this;(Array.isArray(t)?t.map((function(t){return t.name})):Object.keys(t)).forEach((function(n,r){var o=Lt.registeredVariables[n];if(null==e.accumulations[r]){e.accumulations[r]={originalName:n+\"/momentum\",variable:Ze((function(){return Xn(o).variable(!1)}))}}var a=e.accumulations[r].variable,i=Array.isArray(t)?t[r].tensor:t[n];null!=i&&Ze((function(){var t,n=e.m.mul(a).add(i);t=e.useNesterov?e.c.mul(i.add(n.mul(e.m))).add(o):e.c.mul(n).add(o),a.assign(n),o.assign(t)}))})),this.incrementIterations()},o.prototype.dispose=function(){this.m.dispose(),null!=this.accumulations&&tn(this.accumulations.map((function(t){return t.variable})))},o.prototype.setMomentum=function(t){this.momentum=t},o.prototype.getWeights=function(){return n(this,void 0,void 0,(function(){return r(this,(function(t){switch(t.label){case 0:return[4,this.saveIterations()];case 1:return[2,[t.sent()].concat(this.accumulations.map((function(t){return{name:t.originalName,tensor:t.variable}})))]}}))}))},o.prototype.setWeights=function(t){return n(this,void 0,void 0,(function(){return r(this,(function(e){switch(e.label){case 0:return[4,this.extractIterations(t)];case 1:return t=e.sent(),!1,this.accumulations=t.map((function(t){return{originalName:t.name,variable:t.tensor.variable(!1)}})),[2]}}))}))},o.prototype.getConfig=function(){return{learningRate:this.learningRate,momentum:this.momentum,useNesterov:this.useNesterov}},o.fromConfig=function(t,e){return new t(e.learningRate,e.momentum,e.useNesterov)},o.className=\"Momentum\",o}(Zd);Hd(tp);var ep=function(t){function o(e,n,r,o,a){void 0===n&&(n=.9),void 0===r&&(r=0),void 0===o&&(o=null),void 0===a&&(a=!1);var i=t.call(this)||this;if(i.learningRate=e,i.decay=n,i.momentum=r,i.epsilon=o,i.accumulatedMeanSquares=[],i.accumulatedMoments=[],i.accumulatedMeanGrads=[],i.centered=a,null==o&&(i.epsilon=Lt.backend.epsilon()),null==e)throw new Error(\"learningRate for RMSPropOptimizer must be defined.\");return i}return e(o,t),o.prototype.applyGradients=function(t){var e=this;(Array.isArray(t)?t.map((function(t){return t.name})):Object.keys(t)).forEach((function(n,r){var o=Lt.registeredVariables[n];null==e.accumulatedMeanSquares[r]&&(e.accumulatedMeanSquares[r]={originalName:n+\"/rms\",variable:Ze((function(){return Xn(o).variable(!1)}))}),null==e.accumulatedMoments[r]&&(e.accumulatedMoments[r]={originalName:n+\"/momentum\",variable:Ze((function(){return Xn(o).variable(!1)}))}),null==e.accumulatedMeanGrads[r]&&e.centered&&(e.accumulatedMeanGrads[r]={originalName:n+\"/mg\",variable:Ze((function(){return Xn(o).variable(!1)}))});var a=Array.isArray(t)?t[r].tensor:t[n];if(null!=a){var i=e.accumulatedMeanSquares[r].variable,s=e.accumulatedMoments[r].variable;Ze((function(){var t=i.mul(e.decay).add(a.square().mul(1-e.decay));if(e.centered){var n=e.accumulatedMeanGrads[r].variable,u=n.mul(e.decay).add(a.mul(1-e.decay)),c=s.mul(e.momentum).add(a.mul(e.learningRate).div(t.sub(u.square().add(e.epsilon)).sqrt()));i.assign(t),n.assign(u),s.assign(c);var l=o.sub(c);o.assign(l)}else{var h=i.mul(e.decay).add(a.square().mul(1-e.decay));c=s.mul(e.momentum).add(a.mul(e.learningRate).div(h.add(e.epsilon).sqrt()));i.assign(h),s.assign(c);l=o.sub(c);o.assign(l)}}))}})),this.incrementIterations()},o.prototype.dispose=function(){null!=this.accumulatedMeanSquares&&tn(this.accumulatedMeanSquares.map((function(t){return t.variable}))),null!=this.accumulatedMeanGrads&&this.centered&&tn(this.accumulatedMeanGrads.map((function(t){return t.variable}))),null!=this.accumulatedMoments&&tn(this.accumulatedMoments.map((function(t){return t.variable})))},o.prototype.getWeights=function(){return n(this,void 0,void 0,(function(){var t;return r(this,(function(e){switch(e.label){case 0:return t=this.accumulatedMeanSquares.concat(this.accumulatedMoments),this.centered&&t.push.apply(t,this.accumulatedMeanGrads),[4,this.saveIterations()];case 1:return[2,[e.sent()].concat(t.map((function(t){return{name:t.originalName,tensor:t.variable}})))]}}))}))},o.prototype.setWeights=function(t){return n(this,void 0,void 0,(function(){var e;return r(this,(function(n){switch(n.label){case 0:return[4,this.extractIterations(t)];case 1:return t=n.sent(),e=this.centered?t.length/3:t.length/2,!1,this.accumulatedMeanSquares=t.slice(0,e).map((function(t){return{originalName:t.name,variable:t.tensor.variable(!1)}})),this.accumulatedMoments=t.slice(e,2*e).map((function(t){return{originalName:t.name,variable:t.tensor.variable(!1)}})),this.centered&&(this.accumulatedMeanGrads=t.slice(2*e,3*e).map((function(t){return{originalName:t.name,variable:t.tensor.variable(!1)}}))),[2]}}))}))},o.prototype.getConfig=function(){return{learningRate:this.learningRate,decay:this.decay,momentum:this.momentum,epsilon:this.epsilon,centered:this.centered}},o.fromConfig=function(t,e){return new t(e.learningRate,e.decay,e.momentum,e.epsilon,e.centered)},o.className=\"RMSProp\",o}(Xd);Hd(ep);var np=function(){function t(){}return t.sgd=function(t){return new Zd(t)},t.momentum=function(t,e,n){return void 0===n&&(n=!1),new tp(t,e,n)},t.rmsprop=function(t,e,n,r,o){return void 0===e&&(e=.9),void 0===n&&(n=0),void 0===r&&(r=null),void 0===o&&(o=!1),new ep(t,e,n,r,o)},t.adam=function(t,e,n,r){return void 0===t&&(t=.001),void 0===e&&(e=.9),void 0===n&&(n=.999),void 0===r&&(r=null),new Qd(t,e,n,r)},t.adadelta=function(t,e,n){return void 0===t&&(t=.001),void 0===e&&(e=.95),void 0===n&&(n=null),new Yd(t,e,n)},t.adamax=function(t,e,n,r,o){return void 0===t&&(t=.002),void 0===e&&(e=.9),void 0===n&&(n=.999),void 0===r&&(r=null),void 0===o&&(o=0),new Jd(t,e,n,r,o)},t.adagrad=function(t,e){return void 0===e&&(e=.1),new $d(t,e)},t}(),rp={sgd:np.sgd,momentum:np.momentum,adadelta:np.adadelta,adagrad:np.adagrad,rmsprop:np.rmsprop,adamax:np.adamax,adam:np.adam},op=\"undefined\"!=typeof requestAnimationFrame?requestAnimationFrame:\"undefined\"!=typeof setImmediate?setImmediate:function(t){return t()};function ap(){return new Promise((function(t){return op((function(){return t()}))}))}wt.prototype.add=function(t){return Or(this,t)},wt.prototype.broadcastTo=function(t){return fc(this,t)},wt.prototype.div=function(t){return Bo(this,t)},wt.prototype.divNoNan=function(t){return bc(this,t)},wt.prototype.squaredDifference=function(t){return Hc(this,t)},wt.prototype.tile=function(t){return wc(this,t)},wt.prototype.oneHot=function(t,e,n){return void 0===e&&(e=1),void 0===n&&(n=0),Rc(this,t,e,n)},wt.prototype.transpose=function(t){return ua(this,t)},wt.prototype.pad=function(t,e){return Ic(this,t,e)},wt.prototype.batchNorm=function(t,e,n,r,o){return nc(this,t,e,n,r,o)},xt=ff;export{Yd as AdadeltaOptimizer,$d as AdagradOptimizer,Qd as AdamOptimizer,Jd as AdamaxOptimizer,xr as Add,br as AddN,Sr as BroadcastTo,ca as DataStorage,wr as Div,s as ENV,o as Environment,Fr as FromPixels,Cr as FusedBatchNorm,Tr as Identity,la as KernelBackend,_r as MaxPoolWithArgmax,tp as MomentumOptimizer,kr as NonMaxSuppressionV5,Ar as OneHot,Xd as Optimizer,Nr as PadV2,ep as RMSPropOptimizer,Ct as Rank,Nh as Reduction,Zd as SGDOptimizer,Rr as Square,Er as SquaredDifference,wt as Tensor,mt as TensorBuffer,Dr as Tile,Ir as Transpose,St as Variable,Lr as abs,Wr as acos,Ur as acosh,Or as add,$u as addN,xo as addStrict,ql as all,Kl as any,jl as argMax,Xl as argMin,Vr as asin,zr as asinh,Gr as atan,bo as atan2,Hr as atanh,Ol as avgPool,Pl as avgPool3d,hn as backend,Sa as backend_util,lh as basicLSTMCell,nc as batchNorm,ac as batchNorm2d,uc as batchNorm3d,hc as batchNorm4d,ec as batchNormalization,oc as batchNormalization2d,sc as batchNormalization3d,lc as batchNormalization4d,rr as batchToSpaceND,ul as booleanMaskAsync,fc as broadcastTo,Vd as browser,er as buffer,or as cast,qr as ceil,Kr as clipByValue,dc as clone,Tn as complex,Yn as concat,$n as concat1d,Qn as concat2d,Jn as concat3d,Zn as concat4d,fl as conv1d,dl as conv2d,wl as conv2dTranspose,pl as conv3d,Cl as conv3dTranspose,jr as cos,Xr as cosh,ar as cumsum,oa as customGrad,Xe as deprecationWarn,ir as depthToSpace,ml as depthwiseConv2d,Eh as diag,je as disableDeprecationWarnings,tn as dispose,Ye as disposeVariables,Bo as div,bc as divNoNan,wo as divStrict,Rl as dot,Rh as dropout,nh as elu,Ke as enableDebugMode,qe as enableProdMode,$e as engine,i as env,Kc as equal,jc as equalStrict,Yr as erf,$r as exp,sr as expandDims,Qr as expm1,Cc as eye,gh as fft,Hn as fill,un as findBackend,cn as findBackendFactory,Jr as floor,Co as floorDiv,Ah as frame,hf as fused,il as gather,Ch as gatherND,Lo as gather_util,an as getBackend,h as getGradient,l as getKernel,f as getKernelsForBackend,Zo as grad,ta as grads,Xc as greater,Yc as greaterEqual,$c as greaterEqualStrict,Qc as greaterStrict,Sh as hammingWindow,kh as hannWindow,mh as ifft,Nn as imag,nf as image,Fh as inTopKAsync,Bd as io,xh as irfft,lo as isFinite,co as isInf,uo as isNaN,en as keep,rh as leakyRelu,Jc as less,Zc as lessEqual,tl as lessEqualStrict,el as lessStrict,jh as linalg,qn as linspace,uh as localResponseNormalization,Zr as log,to as log1p,eo as logSigmoid,sa as logSoftmax,Yl as logSumExp,pc as logicalAnd,vc as logicalNot,gc as logicalOr,mc as logicalXor,zh as losses,El as matMul,Wd as math,$l as max,_l as maxPool,Bl as maxPool3d,Ll as maxPoolWithArgmax,Eo as maximum,Ro as maximumStrict,Ql as mean,Qe as memory,Jl as min,Io as minimum,ko as minimumStrict,So as mod,Ao as modStrict,Zl as moments,fh as movingAverage,To as mul,Do as mulStrict,hh as multiRNNCell,Ec as multinomial,no as neg,ap as nextFrame,ch as norm,nl as notEqual,rl as notEqualStrict,Rc as oneHot,zn as ones,jn as onesLike,An as op,Il as outerProduct,Ic as pad,kc as pad1d,Sc as pad2d,Ac as pad3d,Tc as pad4d,Ml as pool,No as pow,Fo as powStrict,oh as prelu,nr as print,eh as prod,Je as profile,Dc as rand,Uc as randomGamma,Vc as randomNormal,zc as randomUniform,Kn as range,on as ready,Dn as real,ro as reciprocal,ln as registerBackend,p as registerGradient,d as registerKernel,ah as relu,ih as relu6,sn as removeBackend,ur as reshape,kl as reverse,Sl as reverse1d,Al as reverse2d,Tl as reverse3d,Dl as reverse4d,yh as rfft,oo as round,ao as rsqrt,On as scalar,vh as scatterND,Ho as scatter_util,sh as selu,bl as separableConv2d,qd as serialization,rn as setBackend,fn as setPlatform,dr as setdiff1dAsync,io as sigmoid,so as sign,Dh as signal,ho as sin,fo as sinh,Wl as slice,Ul as slice1d,Vl as slice2d,zl as slice3d,Gl as slice4d,Jo as slice_util,ia as softmax,po as softplus,cr as spaceToBatchND,wh as sparseToDense,bh as spectral,tr as split,vo as sqrt,Gc as square,Hc as squaredDifference,_o as squaredDifferenceStrict,lr as squeeze,hr as stack,go as step,Th as stft,dh as stridedSlice,Oo as sub,Mo as subStrict,th as sum,Dt as sumOutType,mo as tan,yo as tanh,Fn as tensor,Mn as tensor1d,Bn as tensor2d,Pn as tensor3d,Ln as tensor4d,Wn as tensor5d,Un as tensor6d,Mt as tensor_util,Bc as test_util,Ze as tidy,wc as tile,nn as time,ph as topk,rp as train,ua as transpose,qc as truncatedNormal,g as unregisterGradient,v as unregisterKernel,sl as unsortedSegmentSum,fr as unstack,st as util,ea as valueAndGrad,na as valueAndGrads,Vn as variable,ra as variableGrads,Kd as version_core,jd as webgl,yc as where,xc as whereAsync,Gn as zeros,Xn as zerosLike};\n//# sourceMappingURL=tf-core.esm.js.map\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport{env,concat,slice,stack,tensor,tidy,unstack,util,io,Tensor,add,addN,mod,mul,div,divNoNan,floorDiv,sub,minimum,maximum,pow,squaredDifference,abs,acos,acosh,asin,asinh,atan,atan2,atanh,ceil,complex,cos,cosh,elu,erf,exp,expm1,floor,log,log1p,imag,neg,reciprocal,real,relu,round,selu,sigmoid,sin,sign,sinh,softplus,sqrt,square,tanh,tan,clipByValue,rsqrt,prod,leakyRelu,prelu,scalar,conv1d,conv2d,fused,conv2dTranspose,depthwiseConv2d,conv3d,avgPool,maxPool,maxPoolWithArgmax,avgPool3d,maxPool3d,fill,linspace,multinomial,oneHot,ones,onesLike,randomUniform,range,truncatedNormal,zeros,zerosLike,image,whereAsync,setdiff1dAsync,topk,tensor1d,equal,notEqual,greater,greaterEqual,less,lessEqual,logicalAnd,logicalNot,logicalOr,where,matMul,transpose,batchNorm,localResponseNormalization,softmax,logSoftmax,sparseToDense,max,mean,min,sum,all,any,argMax,argMin,gather,reverse,stridedSlice,tile,split,scatterND,gatherND,fft,ifft,rfft,irfft,cast,expandDims,squeeze,reshape,pad,spaceToBatchND,batchToSpaceND,depthToSpace}from\"@tensorflow/tfjs-core\";var DataType,SaverDef,__assign=function(){return(__assign=Object.assign||function(e){for(var t,a=1,r=arguments.length;a<r;a++)for(var n in t=arguments[a])Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e}).apply(this,arguments)};function __awaiter(e,t,a,r){return new(a||(a=Promise))(function(n,s){function o(e){try{u(r.next(e))}catch(e){s(e)}}function p(e){try{u(r.throw(e))}catch(e){s(e)}}function u(e){e.done?n(e.value):new a(function(t){t(e.value)}).then(o,p)}u((r=r.apply(e,t||[])).next())})}function __generator(e,t){var a,r,n,s,o={label:0,sent:function(){if(1&n[0])throw n[1];return n[1]},trys:[],ops:[]};return s={next:p(0),throw:p(1),return:p(2)},\"function\"==typeof Symbol&&(s[Symbol.iterator]=function(){return this}),s;function p(s){return function(p){return function(s){if(a)throw new TypeError(\"Generator is already executing.\");for(;o;)try{if(a=1,r&&(n=2&s[0]?r.return:s[0]?r.throw||((n=r.return)&&n.call(r),0):r.next)&&!(n=n.call(r,s[1])).done)return n;switch(r=0,n&&(s=[2&s[0],n.value]),s[0]){case 0:case 1:n=s;break;case 4:return o.label++,{value:s[1],done:!1};case 5:o.label++,r=s[1],s=[0];continue;case 7:s=o.ops.pop(),o.trys.pop();continue;default:if(!(n=(n=o.trys).length>0&&n[n.length-1])&&(6===s[0]||2===s[0])){o=0;continue}if(3===s[0]&&(!n||s[1]>n[0]&&s[1]<n[3])){o.label=s[1];break}if(6===s[0]&&o.label<n[1]){o.label=n[1],n=s;break}if(n&&o.label<n[2]){o.label=n[2],o.ops.push(s);break}n[2]&&o.ops.pop(),o.trys.pop();continue}s=t.call(e,o)}catch(e){s=[6,e],r=0}finally{a=n=0}if(5&s[0])throw s[1];return{value:s[0]?s[1]:void 0,done:!0}}([s,p])}}}!function(e){e[e.DT_INVALID=0]=\"DT_INVALID\",e[e.DT_FLOAT=1]=\"DT_FLOAT\",e[e.DT_DOUBLE=2]=\"DT_DOUBLE\",e[e.DT_INT32=3]=\"DT_INT32\",e[e.DT_UINT8=4]=\"DT_UINT8\",e[e.DT_INT16=5]=\"DT_INT16\",e[e.DT_INT8=6]=\"DT_INT8\",e[e.DT_STRING=7]=\"DT_STRING\",e[e.DT_COMPLEX64=8]=\"DT_COMPLEX64\",e[e.DT_INT64=9]=\"DT_INT64\",e[e.DT_BOOL=10]=\"DT_BOOL\",e[e.DT_QINT8=11]=\"DT_QINT8\",e[e.DT_QUINT8=12]=\"DT_QUINT8\",e[e.DT_QINT32=13]=\"DT_QINT32\",e[e.DT_BFLOAT16=14]=\"DT_BFLOAT16\",e[e.DT_FLOAT_REF=101]=\"DT_FLOAT_REF\",e[e.DT_DOUBLE_REF=102]=\"DT_DOUBLE_REF\",e[e.DT_INT32_REF=103]=\"DT_INT32_REF\",e[e.DT_UINT8_REF=104]=\"DT_UINT8_REF\",e[e.DT_INT16_REF=105]=\"DT_INT16_REF\",e[e.DT_INT8_REF=106]=\"DT_INT8_REF\",e[e.DT_STRING_REF=107]=\"DT_STRING_REF\",e[e.DT_COMPLEX64_REF=108]=\"DT_COMPLEX64_REF\",e[e.DT_INT64_REF=109]=\"DT_INT64_REF\",e[e.DT_BOOL_REF=110]=\"DT_BOOL_REF\",e[e.DT_QINT8_REF=111]=\"DT_QINT8_REF\",e[e.DT_QUINT8_REF=112]=\"DT_QUINT8_REF\",e[e.DT_QINT32_REF=113]=\"DT_QINT32_REF\",e[e.DT_BFLOAT16_REF=114]=\"DT_BFLOAT16_REF\"}(DataType||(DataType={})),function(e){!function(e){e[e.LEGACY=0]=\"LEGACY\",e[e.V1=1]=\"V1\",e[e.V2=2]=\"V2\"}(e.CheckpointFormatVersion||(e.CheckpointFormatVersion={}))}(SaverDef||(SaverDef={}));var CUSTOM_OPS={};function registerOp(e,t){var a={tfOpName:e,category:\"custom\",inputs:[],attrs:[],customExecutor:t};CUSTOM_OPS[e]=a}function getRegisteredOp(e){return CUSTOM_OPS[e]}function deregisterOp(e){delete CUSTOM_OPS[e]}function getParamValue(e,t,a,r){var n=t.inputParams[e];if(n&&void 0!==n.inputIndexStart){var s=n.inputIndexStart,o=0===n.inputIndexEnd?void 0:void 0===n.inputIndexEnd?s+1:n.inputIndexEnd;if(\"tensor\"===n.type)return getTensor(t.inputNames[n.inputIndexStart],a,r);if(\"tensors\"===n.type)return t.inputNames.slice(s,o).map(function(e){return getTensor(e,a,r)});var p=Array.prototype.slice.call(getTensor(t.inputNames.slice(s)[0],a,r).dataSync());return\"number\"===n.type?p[0]:p}var u=t.attrParams[e];return u&&u.value}function getTensor(e,t,a){var r=parseNodeName(e),n=r[0],s=r[1],o=a.currentContextIds.find(function(e){return!!t[getNodeNameWithContextId(n,e)]});return void 0!==o?t[getNodeNameWithContextId(n,o)][s]:void 0}function getTensorsForCurrentContenxt(e,t,a){return t[getNodeNameWithContextId(e,a.currentContextId)]}function getNodeNameAndIndex(e,t){var a=parseNodeName(e),r=a[0],n=a[1];return[getNodeNameWithContextId(r,t&&t.currentContextId),n]}function getNodeNameWithContextId(e,t){return t?e+\"-\"+t:e}function parseNodeName(e){var t=e.lastIndexOf(\":\");return-1===t?[e,0]:[e.substring(0,t),Number(e.substring(t+1))]}function split$1(e,t){for(var a=[],r=0;r<e.length;r+=t)a.push(e.slice(r,r+t));return a}var json=[{tfOpName:\"Add\",category:\"arithmetic\",inputs:[{start:0,name:\"a\",type:\"tensor\"},{start:1,name:\"b\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"AddV2\",category:\"arithmetic\",inputs:[{start:0,name:\"a\",type:\"tensor\"},{start:1,name:\"b\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"AddN\",category:\"arithmetic\",inputs:[{start:0,end:0,name:\"tensors\",type:\"tensors\"}]},{tfOpName:\"BiasAdd\",category:\"arithmetic\",inputs:[{start:0,name:\"a\",type:\"tensor\"},{start:1,name:\"b\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Sub\",category:\"arithmetic\",inputs:[{start:0,name:\"a\",type:\"tensor\"},{start:1,name:\"b\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"RealDiv\",category:\"arithmetic\",inputs:[{start:0,name:\"a\",type:\"tensor\"},{start:1,name:\"b\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Div\",category:\"arithmetic\",inputs:[{start:0,name:\"a\",type:\"tensor\"},{start:1,name:\"b\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"DivNoNan\",category:\"arithmetic\",inputs:[{start:0,name:\"a\",type:\"tensor\"},{start:1,name:\"b\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"FloorDiv\",category:\"arithmetic\",inputs:[{start:0,name:\"a\",type:\"tensor\"},{start:1,name:\"b\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Mul\",category:\"arithmetic\",inputs:[{start:0,name:\"a\",type:\"tensor\"},{start:1,name:\"b\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Maximum\",category:\"arithmetic\",inputs:[{start:0,name:\"a\",type:\"tensor\"},{start:1,name:\"b\",type:\"tensor\"}]},{tfOpName:\"Minimum\",category:\"arithmetic\",inputs:[{start:0,name:\"a\",type:\"tensor\"},{start:1,name:\"b\",type:\"tensor\"}]},{tfOpName:\"Pow\",category:\"arithmetic\",inputs:[{start:0,name:\"a\",type:\"tensor\"},{start:1,name:\"b\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"SquaredDifference\",category:\"arithmetic\",inputs:[{start:0,name:\"a\",type:\"tensor\"},{start:1,name:\"b\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Mod\",category:\"arithmetic\",inputs:[{start:0,name:\"a\",type:\"tensor\"},{start:1,name:\"b\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"FloorMod\",category:\"arithmetic\",inputs:[{start:0,name:\"a\",type:\"tensor\"},{start:1,name:\"b\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]}],arithmetic=Object.freeze({json:json}),json$1=[{tfOpName:\"Abs\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Acos\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Asin\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Atan\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Atan2\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"y\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Ceil\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"ClipByValue\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"clip_value_min\",name:\"clipValueMin\",type:\"number\"},{tfName:\"clip_value_max\",name:\"clipValueMax\",type:\"number\"}]},{tfOpName:\"Complex\",category:\"basic_math\",inputs:[{start:0,name:\"real\",type:\"tensor\"},{start:1,name:\"imag\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"ComplexAbs\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Cos\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Cosh\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Elu\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Exp\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Floor\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Log\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Imag\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0},{tfName:\"Tout\",name:\"outputType\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Neg\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Real\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0},{tfName:\"Tout\",name:\"outputType\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Prelu\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"alpha\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Relu\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Relu6\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0},{tfName:\"clipValueMin\",name:\"clipValueMin\",type:\"number\",defaultValue:0},{tfName:\"clipValueMax\",name:\"clipValueMax\",type:\"number\",defaultValue:6}]},{tfOpName:\"Selu\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Sigmoid\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Sin\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Sinh\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Sqrt\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Rsqrt\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Square\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Tan\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Tanh\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Sign\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Round\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Expm1\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Log1p\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Reciprocal\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Softplus\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Asinh\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Acosh\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Atanh\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Erf\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Prod\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"axes\",type:\"number[]\"}],attrs:[{tfName:\"keep_dims\",name:\"keepDims\",type:\"bool\",notSupported:!0},{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"LeakyRelu\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"alpha\",name:\"alpha\",type:\"number\",defaultValue:.2},{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]}],basicMath=Object.freeze({json:json$1}),json$2=[{tfOpName:\"LoopCond\",category:\"control\",inputs:[{start:0,name:\"pred\",type:\"tensor\"}]},{tfOpName:\"Switch\",category:\"control\",inputs:[{start:0,name:\"data\",type:\"tensor\"},{start:1,name:\"pred\",type:\"tensor\"}]},{tfOpName:\"Merge\",category:\"control\",inputs:[{start:0,end:0,name:\"tensors\",type:\"tensors\"}]},{tfOpName:\"Enter\",category:\"control\",inputs:[{start:0,name:\"tensor\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0},{tfName:\"frame_name\",name:\"frameName\",type:\"string\"},{tfName:\"is_constant\",name:\"isConstant\",type:\"bool\"}]},{tfOpName:\"Exit\",category:\"control\",inputs:[{start:0,name:\"tensor\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"NextIteration\",category:\"control\",inputs:[{start:0,name:\"tensor\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"TensorArrayV3\",category:\"control\",inputs:[{start:0,name:\"size\",type:\"number\"}],attrs:[{tfName:\"dtype\",name:\"dtype\",type:\"dtype\"},{tfName:\"element_shape\",name:\"elementShape\",type:\"shape\"},{tfName:\"dynamic_size\",name:\"dynamicSize\",type:\"bool\"},{tfName:\"clear_after_read\",name:\"clearAfterRead\",type:\"bool\"},{tfName:\"identical_element_shapes\",name:\"identicalElementShapes\",type:\"bool\"},{tfName:\"tensor_array_name\",name:\"name\",type:\"string\"}]},{tfOpName:\"TensorArrayWriteV3\",category:\"control\",inputs:[{start:0,name:\"tensorArrayId\",type:\"number\"},{start:1,name:\"index\",type:\"number\"},{start:2,name:\"tensor\",type:\"tensor\"},{start:3,name:\"flowIn\",type:\"number\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"TensorArrayReadV3\",category:\"control\",inputs:[{start:0,name:\"tensorArrayId\",type:\"number\"},{start:1,name:\"index\",type:\"number\"},{start:2,name:\"flowIn\",type:\"number\"}],attrs:[{tfName:\"dtype\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"TensorArrayGatherV3\",category:\"control\",inputs:[{start:0,name:\"tensorArrayId\",type:\"number\"},{start:1,name:\"indices\",type:\"number[]\"},{start:2,name:\"flowIn\",type:\"number\"}],attrs:[{tfName:\"dtype\",name:\"dtype\",type:\"dtype\"},{tfName:\"element_shape\",name:\"elementShape\",type:\"shape\"}]},{tfOpName:\"TensorArrayScatterV3\",category:\"control\",inputs:[{start:0,name:\"tensorArrayId\",type:\"number\"},{start:1,name:\"indices\",type:\"number[]\"},{start:2,name:\"tensor\",type:\"tensor\"},{start:3,name:\"flowIn\",type:\"number\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\"}]},{tfOpName:\"TensorArrayConcatV3\",category:\"control\",inputs:[{start:0,name:\"tensorArrayId\",type:\"number\"},{start:1,name:\"flowIn\",type:\"number\"}],attrs:[{tfName:\"dtype\",name:\"dtype\",type:\"dtype\"},{tfName:\"element_shape_except0\",name:\"elementShapeExcept0\",type:\"shape\",notSupported:!0}]},{tfOpName:\"TensorArraySplitV3\",category:\"control\",inputs:[{start:0,name:\"tensorArrayId\",type:\"number\"},{start:1,name:\"tensor\",type:\"tensor\"},{start:2,name:\"lengths\",type:\"number[]\"},{start:3,name:\"flowIn\",type:\"number\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\"}]},{tfOpName:\"TensorArraySizeV3\",category:\"control\",inputs:[{start:0,name:\"tensorArrayId\",type:\"number\"},{start:1,name:\"flowIn\",type:\"number\"}]},{tfOpName:\"TensorArrayCloseV3\",category:\"control\",inputs:[{start:0,name:\"tensorArrayId\",type:\"number\"}]}],control=Object.freeze({json:json$2}),json$3=[{tfOpName:\"AvgPool\",category:\"convolution\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"strides\",name:\"strides\",type:\"number[]\"},{tfName:\"padding\",name:\"pad\",type:\"string\"},{tfName:\"data_format\",name:\"dataFormat\",type:\"string\",notSupported:!0},{tfName:\"ksize\",name:\"kernelSize\",type:\"number[]\"},{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"MaxPool\",category:\"convolution\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"strides\",name:\"strides\",type:\"number[]\"},{tfName:\"padding\",name:\"pad\",type:\"string\"},{tfName:\"data_format\",name:\"dataFormat\",type:\"string\",notSupported:!0},{tfName:\"ksize\",name:\"kernelSize\",type:\"number[]\"},{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"MaxPoolWithArgmax\",category:\"convolution\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"strides\",name:\"strides\",type:\"number[]\"},{tfName:\"padding\",name:\"pad\",type:\"string\"},{tfName:\"ksize\",name:\"kernelSize\",type:\"number[]\"},{tfName:\"include_batch_in_index\",name:\"includeBatchInIndex\",type:\"bool\"},{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"AvgPool3D\",category:\"convolution\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"strides\",name:\"strides\",type:\"number[]\"},{tfName:\"padding\",name:\"pad\",type:\"string\"},{tfName:\"data_format\",name:\"dataFormat\",type:\"string\",notSupported:!0},{tfName:\"ksize\",name:\"kernelSize\",type:\"number[]\"},{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"MaxPool3D\",category:\"convolution\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"strides\",name:\"strides\",type:\"number[]\"},{tfName:\"padding\",name:\"pad\",type:\"string\"},{tfName:\"data_format\",name:\"dataFormat\",type:\"string\",notSupported:!0},{tfName:\"ksize\",name:\"kernelSize\",type:\"number[]\"},{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Conv1D\",category:\"convolution\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"filter\",type:\"tensor\"}],attrs:[{tfName:\"stride\",name:\"stride\",type:\"number\"},{tfName:\"padding\",name:\"pad\",type:\"string\"},{tfName:\"data_format\",name:\"dataFormat\",type:\"string\",defaultValue:\"NWC\"},{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0},{tfName:\"dilation\",name:\"dilation\",type:\"number\",defaultValue:1}]},{tfOpName:\"Conv2D\",category:\"convolution\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"filter\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0},{tfName:\"strides\",name:\"strides\",type:\"number[]\"},{tfName:\"padding\",name:\"pad\",type:\"string\"},{tfName:\"useCudnnOnGpu\",name:\"useCudnnOnGpu\",type:\"bool\"},{tfName:\"data_format\",name:\"dataFormat\",type:\"string\",defaultValue:\"NHWC\"},{tfName:\"dilations\",name:\"dilations\",type:\"number[]\"}]},{tfOpName:\"_FusedConv2D\",category:\"convolution\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"filter\",type:\"tensor\"},{start:2,end:0,name:\"args\",type:\"tensors\"}],attrs:[{tfName:\"num_args\",name:\"numArgs\",type:\"number\"},{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0},{tfName:\"strides\",name:\"strides\",type:\"number[]\"},{tfName:\"padding\",name:\"pad\",type:\"string\"},{tfName:\"explicit_paddings\",name:\"explicitPaddings\",type:\"number[]\",defaultValue:[]},{tfName:\"use_cudnn_on_gpu\",name:\"useCudnnOnGpu\",type:\"bool\",defaultValue:!0},{tfName:\"data_format\",name:\"dataFormat\",type:\"string\",defaultValue:\"NHWC\"},{tfName:\"dilations\",name:\"dilations\",type:\"number[]\",defaultValue:[1,1,1,1]},{tfName:\"fused_ops\",name:\"fusedOps\",type:\"string[]\",defaultValue:[]},{tfName:\"epsilon\",name:\"epsilon\",type:\"number\",defaultValue:1e-4}]},{tfOpName:\"Conv2DBackpropInput\",category:\"convolution\",inputs:[{start:2,name:\"x\",type:\"tensor\"},{start:1,name:\"filter\",type:\"tensor\"},{start:0,name:\"outputShape\",type:\"number[]\"}],attrs:[{tfName:\"strides\",name:\"strides\",type:\"number[]\"},{tfName:\"padding\",name:\"pad\",type:\"string\"},{tfName:\"data_format\",name:\"dataFormat\",type:\"string\",notSupported:!0}]},{tfOpName:\"DepthwiseConv2d\",category:\"convolution\",inputs:[{start:0,name:\"input\",type:\"tensor\"},{start:1,name:\"filter\",type:\"tensor\"}],attrs:[{tfName:\"strides\",name:\"strides\",type:\"number[]\"},{tfName:\"padding\",name:\"pad\",type:\"string\"},{tfName:\"data_format\",name:\"dataFormat\",type:\"string\",defaultValue:\"NHWC\"},{tfName:\"dilations\",name:\"dilations\",type:\"number[]\"}]},{tfOpName:\"DepthwiseConv2dNative\",category:\"convolution\",inputs:[{start:0,name:\"input\",type:\"tensor\"},{start:1,name:\"filter\",type:\"tensor\"}],attrs:[{tfName:\"strides\",name:\"strides\",type:\"number[]\"},{tfName:\"padding\",name:\"pad\",type:\"string\"},{tfName:\"data_format\",name:\"dataFormat\",type:\"string\",defaultValue:\"NHWC\"},{tfName:\"dilations\",name:\"dilations\",type:\"number[]\"}]},{tfOpName:\"FusedDepthwiseConv2dNative\",category:\"convolution\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"filter\",type:\"tensor\"},{start:2,end:0,name:\"args\",type:\"tensors\"}],attrs:[{tfName:\"num_args\",name:\"numArgs\",type:\"number\"},{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0},{tfName:\"strides\",name:\"strides\",type:\"number[]\"},{tfName:\"padding\",name:\"pad\",type:\"string\"},{tfName:\"data_format\",name:\"dataFormat\",type:\"string\",defaultValue:\"NHWC\"},{tfName:\"dilations\",name:\"dilations\",type:\"number[]\",defaultValue:[1,1,1,1]},{tfName:\"fused_ops\",name:\"fusedOps\",type:\"string[]\",defaultValue:[]}]},{tfOpName:\"Conv3D\",category:\"convolution\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"filter\",type:\"tensor\"}],attrs:[{tfName:\"strides\",name:\"strides\",type:\"number[]\"},{tfName:\"padding\",name:\"pad\",type:\"string\"},{tfName:\"data_format\",name:\"dataFormat\",type:\"string\",defaultValue:\"NHWC\"},{tfName:\"dilations\",name:\"dilations\",type:\"number[]\"}]}],convolution=Object.freeze({json:json$3}),json$4=[{tfOpName:\"Fill\",category:\"creation\",inputs:[{start:0,name:\"shape\",type:\"number[]\"},{start:1,name:\"value\",type:\"number\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\"}]},{tfOpName:\"LinSpace\",category:\"creation\",inputs:[{start:0,name:\"start\",type:\"number\"},{start:1,name:\"stop\",type:\"number\"},{start:2,name:\"num\",type:\"number\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"OneHot\",category:\"creation\",inputs:[{start:0,name:\"indices\",type:\"tensor\"},{start:1,name:\"depth\",type:\"number\"},{start:2,name:\"onValue\",type:\"number\",defaultValue:1},{start:3,name:\"offValue\",type:\"number\",defaultValue:0}],attrs:[{tfName:\"axis\",name:\"axis\",type:\"number\",notSupported:!0},{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Ones\",category:\"creation\",inputs:[{start:0,name:\"shape\",type:\"number[]\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\"}]},{tfOpName:\"OnesLike\",category:\"creation\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"dtype\",name:\"dtype\",type:\"dtype\"}]},{tfOpName:\"RandomUniform\",category:\"creation\",inputs:[{start:0,name:\"shape\",type:\"number[]\"}],attrs:[{tfName:\"minval\",name:\"minval\",type:\"number\",defaultValue:0},{tfName:\"maxval\",name:\"maxval\",type:\"number\",defaultValue:1},{tfName:\"dtype\",name:\"dtype\",type:\"dtype\"},{tfName:\"seed\",name:\"seed\",type:\"number\",defaultValue:0},{tfName:\"seed2\",name:\"seed2\",type:\"number\",defaultValue:0,notSupported:!0},{tfName:\"T\",name:\"T\",type:\"number\",notSupported:!0}]},{tfOpName:\"Range\",category:\"creation\",inputs:[{start:0,name:\"start\",type:\"number\"},{start:1,name:\"stop\",type:\"number\"},{start:2,name:\"step\",type:\"number\",defaultValue:0}],attrs:[{tfName:\"Tidx\",name:\"dtype\",type:\"dtype\"}]},{tfOpName:\"TruncatedNormal\",category:\"creation\",inputs:[{start:0,name:\"shape\",type:\"number[]\"}],attrs:[{tfName:\"means\",name:\"mean\",type:\"number\",defaultValue:0},{tfName:\"stddev\",name:\"stdDev\",type:\"number\",defaultValue:1},{tfName:\"seed\",name:\"seed\",type:\"number\"},{tfName:\"seed2\",name:\"seed2\",type:\"number\",defaultValue:0,notSupported:!0},{tfName:\"dtype\",name:\"dtype\",type:\"dtype\"},{tfName:\"T\",name:\"T\",type:\"number\",notSupported:!0}]},{tfOpName:\"Zeros\",category:\"creation\",inputs:[{start:0,name:\"shape\",type:\"number[]\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\"}]},{tfOpName:\"ZerosLike\",category:\"creation\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\"}]},{tfOpName:\"Multinomial\",category:\"creation\",inputs:[{start:0,name:\"logits\",type:\"tensor\"},{start:1,name:\"numSamples\",type:\"number\"}],attrs:[{tfName:\"seed\",name:\"seed\",type:\"number\"},{tfName:\"seed2\",name:\"seed2\",type:\"number\"},{tfName:\"T\",name:\"dtype\",type:\"dtype\"},{tfName:\"output_dtype\",name:\"output_dtype\",type:\"dtype\"}]}],creation=Object.freeze({json:json$4}),json$5=[{tfOpName:\"NonMaxSuppressionV2\",category:\"dynamic\",inputs:[{start:0,name:\"boxes\",type:\"tensor\"},{start:1,name:\"scores\",type:\"tensor\"},{start:2,name:\"maxOutputSize\",type:\"number\"},{start:3,name:\"iouThreshold\",type:\"number\"}]},{tfOpName:\"NonMaxSuppressionV3\",category:\"dynamic\",inputs:[{start:0,name:\"boxes\",type:\"tensor\"},{start:1,name:\"scores\",type:\"tensor\"},{start:2,name:\"maxOutputSize\",type:\"number\"},{start:3,name:\"iouThreshold\",type:\"number\"},{start:4,name:\"scoreThreshold\",type:\"number\"}]},{tfOpName:\"NonMaxSuppressionV5\",category:\"dynamic\",inputs:[{start:0,name:\"boxes\",type:\"tensor\"},{start:1,name:\"scores\",type:\"tensor\"},{start:2,name:\"maxOutputSize\",type:\"number\"},{start:3,name:\"iouThreshold\",type:\"number\"},{start:4,name:\"scoreThreshold\",type:\"number\"},{start:5,name:\"softNmsSigma\",type:\"number\"}]},{tfOpName:\"Where\",category:\"dynamic\",inputs:[{start:0,name:\"condition\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"ListDiff\",category:\"dynamic\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"y\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]}],dynamic=Object.freeze({json:json$5}),json$6=[{tfOpName:\"TopKV2\",category:\"evaluation\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"k\",type:\"number\"}],attrs:[{tfName:\"sorted\",name:\"sorted\",type:\"bool\"}]}],evaluation=Object.freeze({json:json$6}),json$7=[{tfOpName:\"PlaceholderWithDefault\",category:\"graph\",inputs:[{start:0,name:\"default\",type:\"tensor\"}],attrs:[{tfName:\"shape\",name:\"shape\",type:\"shape\"},{tfName:\"dtype\",name:\"dtype\",type:\"dtype\"}]},{tfOpName:\"Placeholder\",category:\"graph\",attrs:[{tfName:\"shape\",name:\"shape\",type:\"shape\"},{tfName:\"dtype\",name:\"dtype\",type:\"dtype\"}]},{tfOpName:\"Const\",category:\"graph\"},{tfOpName:\"Identity\",category:\"graph\",inputs:[{start:0,name:\"x\",type:\"tensor\"}]},{tfOpName:\"IdentityN\",category:\"graph\",inputs:[{start:0,end:0,name:\"x\",type:\"tensors\"}]},{tfOpName:\"Snapshot\",category:\"graph\",inputs:[{start:0,name:\"x\",type:\"tensor\"}]},{tfOpName:\"Rank\",category:\"graph\",inputs:[{start:0,name:\"x\",type:\"tensor\"}]},{tfOpName:\"Size\",category:\"graph\",inputs:[{start:0,name:\"x\",type:\"tensor\"}]},{tfOpName:\"Shape\",category:\"graph\",inputs:[{start:0,name:\"x\",type:\"tensor\"}]},{tfOpName:\"ShapeN\",category:\"graph\",inputs:[{start:0,end:0,name:\"x\",type:\"tensors\"}]},{tfOpName:\"Print\",category:\"graph\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"data\",type:\"tensors\"}],attrs:[{tfName:\"message\",name:\"message\",type:\"string\"},{tfName:\"first_n\",name:\"firstN\",type:\"number\",notSupported:!0},{tfName:\"summarize\",name:\"summarize\",type:\"number\",defaultValue:3}]},{tfOpName:\"NoOp\",category:\"graph\",inputs:[]},{tfOpName:\"StopGradient\",category:\"graph\",inputs:[{start:0,name:\"x\",type:\"tensor\"}]},{tfOpName:\"FakeQuantWithMinMaxVars\",category:\"graph\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"min\",name:\"min\",type:\"number\"},{tfName:\"max\",name:\"max\",type:\"number\"}]}],graph=Object.freeze({json:json$7}),json$8=[{tfOpName:\"ResizeBilinear\",category:\"image\",inputs:[{start:0,name:\"images\",type:\"tensor\"},{start:1,name:\"size\",type:\"number[]\"}],attrs:[{tfName:\"align_corners\",name:\"alignCorners\",type:\"bool\"},{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"ResizeNearestNeighbor\",category:\"image\",inputs:[{start:0,name:\"images\",type:\"tensor\"},{start:1,name:\"size\",type:\"number[]\"}],attrs:[{tfName:\"align_corners\",name:\"alignCorners\",type:\"bool\"},{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"CropAndResize\",category:\"image\",inputs:[{start:0,name:\"image\",type:\"tensor\"},{start:1,name:\"boxes\",type:\"tensor\"},{start:2,name:\"boxInd\",type:\"tensor\"},{start:3,name:\"cropSize\",type:\"number[]\"}],attrs:[{tfName:\"method\",name:\"method\",type:\"string\"},{tfName:\"extrapolation_value\",name:\"extrapolationValue\",type:\"number\"}]}],image$1=Object.freeze({json:json$8}),json$9=[{tfOpName:\"Equal\",category:\"logical\",inputs:[{start:0,name:\"a\",type:\"tensor\"},{start:1,name:\"b\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"NotEqual\",category:\"logical\",inputs:[{start:0,name:\"a\",type:\"tensor\"},{start:1,name:\"b\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Greater\",category:\"logical\",inputs:[{start:0,name:\"a\",type:\"tensor\"},{start:1,name:\"b\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"GreaterEqual\",category:\"logical\",inputs:[{start:0,name:\"a\",type:\"tensor\"},{start:1,name:\"b\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Less\",category:\"logical\",inputs:[{start:0,name:\"a\",type:\"tensor\"},{start:1,name:\"b\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"LessEqual\",category:\"logical\",inputs:[{start:0,name:\"a\",type:\"tensor\"},{start:1,name:\"b\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"LogicalAnd\",category:\"logical\",inputs:[{start:0,name:\"a\",type:\"tensor\"},{start:1,name:\"b\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"LogicalNot\",category:\"logical\",inputs:[{start:0,name:\"a\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"LogicalOr\",category:\"logical\",inputs:[{start:0,name:\"a\",type:\"tensor\"},{start:1,name:\"b\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Select\",category:\"logical\",inputs:[{start:0,name:\"condition\",type:\"tensor\"},{start:1,name:\"a\",type:\"tensor\"},{start:2,name:\"b\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"SelectV2\",category:\"logical\",inputs:[{start:0,name:\"condition\",type:\"tensor\"},{start:1,name:\"a\",type:\"tensor\"},{start:2,name:\"b\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]}],logical=Object.freeze({json:json$9}),json$10=[{tfOpName:\"_FusedMatMul\",category:\"matrices\",inputs:[{start:0,name:\"a\",type:\"tensor\"},{start:1,name:\"b\",type:\"tensor\"},{start:2,end:0,name:\"args\",type:\"tensors\"}],attrs:[{tfName:\"num_args\",name:\"numArgs\",type:\"number\"},{tfName:\"fused_ops\",name:\"fusedOps\",type:\"string[]\",defaultValue:[]},{tfName:\"epsilon\",name:\"epsilon\",type:\"number\",defaultValue:1e-4},{tfName:\"transpose_a\",name:\"transposeA\",type:\"bool\",defaultValue:!1},{tfName:\"transpose_b\",name:\"transposeB\",type:\"bool\",defaultValue:!1},{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"MatMul\",category:\"matrices\",inputs:[{start:0,name:\"a\",type:\"tensor\"},{start:1,name:\"b\",type:\"tensor\"}],attrs:[{tfName:\"transpose_a\",name:\"transposeA\",type:\"bool\",defaultValue:!1},{tfName:\"transpose_b\",name:\"transposeB\",type:\"bool\",defaultValue:!1},{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"BatchMatMul\",category:\"matrices\",inputs:[{start:0,name:\"a\",type:\"tensor\"},{start:1,name:\"b\",type:\"tensor\"}],attrs:[{tfName:\"adj_x\",name:\"transposeA\",type:\"bool\",defaultValue:!1},{tfName:\"adj_y\",name:\"transposeB\",type:\"bool\",defaultValue:!1},{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"BatchMatMulV2\",category:\"matrices\",inputs:[{start:0,name:\"a\",type:\"tensor\"},{start:1,name:\"b\",type:\"tensor\"}],attrs:[{tfName:\"adj_x\",name:\"transposeA\",type:\"bool\",defaultValue:!1},{tfName:\"adj_y\",name:\"transposeB\",type:\"bool\",defaultValue:!1},{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Transpose\",category:\"matrices\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"perm\",type:\"number[]\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]}],matrices=Object.freeze({json:json$10}),json$11=[{tfOpName:\"FusedBatchNorm\",category:\"normalization\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"scale\",type:\"tensor\"},{start:2,name:\"offset\",type:\"tensor\"},{start:3,name:\"mean\",type:\"tensor\"},{start:4,name:\"variance\",type:\"tensor\"}],attrs:[{tfName:\"epsilon\",name:\"epsilon\",type:\"number\",defaultValue:.001},{tfName:\"data_format\",name:\"dataFormat\",type:\"string\",notSupported:!0}]},{tfOpName:\"FusedBatchNormV2\",category:\"normalization\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"scale\",type:\"tensor\"},{start:2,name:\"offset\",type:\"tensor\"},{start:3,name:\"mean\",type:\"tensor\"},{start:4,name:\"variance\",type:\"tensor\"}],attrs:[{tfName:\"epsilon\",name:\"epsilon\",type:\"number\",defaultValue:.001},{tfName:\"data_format\",name:\"dataFormat\",type:\"string\",notSupported:!0}]},{tfOpName:\"FusedBatchNormV3\",category:\"normalization\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"scale\",type:\"tensor\"},{start:2,name:\"offset\",type:\"tensor\"},{start:3,name:\"mean\",type:\"tensor\"},{start:4,name:\"variance\",type:\"tensor\"}],attrs:[{tfName:\"epsilon\",name:\"epsilon\",type:\"number\",defaultValue:.001},{tfName:\"data_format\",name:\"dataFormat\",type:\"string\",notSupported:!0}]},{tfOpName:\"LRN\",category:\"normalization\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"depth_radius\",name:\"radius\",type:\"number\",defaultValue:5},{tfName:\"bias\",name:\"bias\",type:\"number\",defaultValue:1},{tfName:\"alpha\",name:\"alpha\",type:\"number\",defaultValue:1},{tfName:\"beta\",name:\"beta\",type:\"number\",defaultValue:.5}]},{tfOpName:\"Softmax\",category:\"normalization\",inputs:[{start:0,name:\"x\",type:\"tensor\"}]},{tfOpName:\"LogSoftmax\",category:\"normalization\",inputs:[{start:0,name:\"x\",type:\"tensor\"}]},{tfOpName:\"SparseToDense\",category:\"normalization\",inputs:[{start:0,name:\"sparseIndices\",type:\"tensor\"},{start:1,name:\"outputShape\",type:\"number[]\"},{start:2,name:\"sparseValues\",type:\"tensor\"},{start:3,name:\"defaultValue\",type:\"tensor\"}],attrs:[{tfName:\"validate_indices\",name:\"validateIndices\",type:\"bool\",defaultValue:!0,notSupported:!0}]}],normalization=Object.freeze({json:json$11}),json$12=[{tfOpName:\"Max\",category:\"reduction\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"axis\",type:\"number[]\"}],attrs:[{tfName:\"keep_dims\",name:\"keepDims\",type:\"bool\"}]},{tfOpName:\"Mean\",category:\"reduction\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"axis\",type:\"number[]\"}],attrs:[{tfName:\"keep_dims\",name:\"keepDims\",type:\"bool\"}]},{tfOpName:\"Min\",category:\"reduction\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"axis\",type:\"number[]\"}],attrs:[{tfName:\"keep_dims\",name:\"keepDims\",type:\"bool\"}]},{tfOpName:\"Sum\",category:\"reduction\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"axis\",type:\"number[]\"}],attrs:[{tfName:\"keep_dims\",name:\"keepDims\",type:\"bool\"}]},{tfOpName:\"All\",category:\"reduction\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"axis\",type:\"number[]\"}],attrs:[{tfName:\"keep_dims\",name:\"keepDims\",type:\"bool\"}]},{tfOpName:\"Any\",category:\"reduction\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"axis\",type:\"number[]\"}],attrs:[{tfName:\"keep_dims\",name:\"keepDims\",type:\"bool\"}]},{tfOpName:\"ArgMax\",category:\"reduction\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"axis\",type:\"number\"}]},{tfOpName:\"ArgMin\",category:\"reduction\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"axis\",type:\"number\"}]},{tfOpName:\"Prod\",category:\"reduction\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"axis\",type:\"number[]\"}],attrs:[{tfName:\"keep_dims\",name:\"keepDims\",type:\"bool\"}]}],reduction=Object.freeze({json:json$12}),json$13=[{tfOpName:\"ConcatV2\",category:\"slice_join\",inputs:[{start:0,end:-1,name:\"tensors\",type:\"tensors\"},{start:-1,name:\"axis\",type:\"number\"}],attrs:[{tfName:\"N\",name:\"n\",type:\"number\",defaultValue:2}]},{tfOpName:\"Concat\",category:\"slice_join\",inputs:[{start:1,end:0,name:\"tensors\",type:\"tensors\"},{start:0,name:\"axis\",type:\"number\"}],attrs:[{tfName:\"N\",name:\"n\",type:\"number\",defaultValue:2}]},{tfOpName:\"GatherV2\",category:\"slice_join\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"indices\",type:\"tensor\"},{start:2,name:\"axis\",type:\"number\",defaultValue:0}]},{tfOpName:\"Gather\",category:\"slice_join\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"indices\",type:\"tensor\"}],attrs:[{tfName:\"axis\",name:\"axis\",type:\"number\",defaultValue:0},{tfName:\"validate_indices\",name:\"validateIndices\",type:\"bool\",notSupported:!0}]},{tfOpName:\"Reverse\",category:\"slice_join\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"dims\",type:\"bool\",notSupported:!0}]},{tfOpName:\"ReverseV2\",category:\"slice_join\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"axis\",type:\"number[]\"}]},{tfOpName:\"Slice\",category:\"slice_join\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"begin\",type:\"number[]\"},{start:2,name:\"size\",type:\"number[]\"}]},{tfOpName:\"StridedSlice\",category:\"slice_join\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"begin\",type:\"number[]\"},{start:2,name:\"end\",type:\"number[]\"},{start:3,name:\"strides\",type:\"number[]\"}],attrs:[{tfName:\"begin_mask\",name:\"beginMask\",type:\"number\",defaultValue:0},{tfName:\"end_mask\",name:\"endMask\",type:\"number\",defaultValue:0},{tfName:\"new_axis_mask\",name:\"newAxisMask\",type:\"number\",defaultValue:0},{tfName:\"ellipsis_mask\",name:\"ellipsisMask\",type:\"number\",defaultValue:0},{tfName:\"shrink_axis_mask\",name:\"shrinkAxisMask\",type:\"number\",defaultValue:0}]},{tfOpName:\"Pack\",category:\"slice_join\",inputs:[{start:0,end:0,name:\"tensors\",type:\"tensors\"}],attrs:[{tfName:\"axis\",name:\"axis\",type:\"number\",defaultValue:0}]},{tfOpName:\"Unpack\",category:\"slice_join\",inputs:[{start:0,name:\"tensor\",type:\"tensor\"}],attrs:[{tfName:\"axis\",name:\"axis\",type:\"number\",defaultValue:0},{tfName:\"num\",name:\"num\",type:\"number\",defaultValue:0,notSupported:!0}]},{tfOpName:\"Tile\",category:\"slice_join\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"reps\",type:\"number[]\"}]},{tfOpName:\"Split\",category:\"slice_join\",inputs:[{start:0,name:\"axis\",type:\"number\",defaultValue:0},{start:1,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"num_split\",name:\"numOrSizeSplits\",type:\"number\",defaultValue:1}]},{tfOpName:\"SplitV\",category:\"slice_join\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"numOrSizeSplits\",type:\"number[]\"},{start:2,name:\"axis\",type:\"number\",defaultValue:0}]},{tfOpName:\"ScatterNd\",category:\"slice_join\",inputs:[{start:0,name:\"indices\",type:\"tensor\"},{start:1,name:\"values\",type:\"tensor\"},{start:2,name:\"shape\",type:\"number[]\"}]},{tfOpName:\"GatherNd\",category:\"slice_join\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"indices\",type:\"tensor\"}]},{tfOpName:\"SparseToDense\",category:\"slice_join\",inputs:[{start:0,name:\"sparseIndices\",type:\"tensor\"},{start:1,name:\"outputShape\",type:\"number[]\"},{start:2,name:\"sparseValues\",type:\"tensor\"},{start:3,name:\"defaultValue\",type:\"tensor\"}],attrs:[{tfName:\"validate_indices\",name:\"validateIndices\",type:\"bool\",defaultValue:!1,notSupported:!0}]}],sliceJoin=Object.freeze({json:json$13}),json$14=[{tfOpName:\"FFT\",category:\"spectral\",inputs:[{start:0,name:\"x\",type:\"tensor\"}]},{tfOpName:\"IFFT\",category:\"spectral\",inputs:[{start:0,name:\"x\",type:\"tensor\"}]},{tfOpName:\"RFFT\",category:\"spectral\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"fft_length\",type:\"number\",notSupported:!0}]},{tfOpName:\"IRFFT\",category:\"spectral\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"fft_length\",type:\"number\",notSupported:!0}]}],spectral=Object.freeze({json:json$14}),json$15=[{tfOpName:\"Cast\",category:\"transformation\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"SrcT\",name:\"sdtype\",type:\"dtype\",notSupported:!0},{tfName:\"DstT\",name:\"dtype\",type:\"dtype\"}]},{tfOpName:\"ExpandDims\",category:\"transformation\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"axis\",type:\"number\"}]},{tfOpName:\"Pad\",category:\"transformation\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"padding\",type:\"number[]\"}],attrs:[{tfName:\"constant_value\",name:\"constantValue\",type:\"number\",defaultValue:0}]},{tfOpName:\"PadV2\",category:\"transformation\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"padding\",type:\"number[]\"},{start:2,name:\"constantValue\",type:\"number\",defaultValue:0}]},{tfOpName:\"Reshape\",category:\"transformation\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"shape\",type:\"number[]\"}]},{tfOpName:\"Squeeze\",category:\"transformation\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"axis\",tfDeprecatedName:\"squeeze_dims\",name:\"axis\",type:\"number[]\"}]},{tfOpName:\"SpaceToBatchND\",category:\"transformation\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"blockShape\",type:\"number[]\"},{start:2,name:\"paddings\",type:\"number[]\"}]},{tfOpName:\"BatchToSpaceND\",category:\"transformation\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"blockShape\",type:\"number[]\"},{start:2,name:\"crops\",type:\"number[]\"}]},{tfOpName:\"DepthToSpace\",category:\"transformation\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"block_size\",name:\"blockSize\",type:\"number\"},{tfName:\"data_format\",name:\"dataFormat\",type:\"string\"}]}],transformation=Object.freeze({json:json$15}),OperationMapper=function(){function e(){var e=[arithmetic,basicMath,control,convolution,creation,dynamic,evaluation,logical,image$1,graph,matrices,normalization,reduction,sliceJoin,spectral,transformation],t=[].concat.apply([],e.map(function(e){return e.json}));this.opMappers=t.reduce(function(e,t){return e[t.tfOpName]=t,e},{})}return Object.defineProperty(e,\"Instance\",{get:function(){return this._instance||(this._instance=new this)},enumerable:!0,configurable:!0}),e.prototype.transformGraph=function(e,t){var a=this;void 0===t&&(t={});var r=[],n=[],s=e.node.reduce(function(e,t){return e[t.name]=a.mapNode(t),t.op.startsWith(\"Placeholder\")&&r.push(e[t.name]),\"Const\"===t.op&&n.push(e[t.name]),e},{}),o=[],p=[],u={},i={};null!=t&&(u=this.mapSignatureEntries(t.inputs),i=this.mapSignatureEntries(t.outputs));var m=Object.keys(s);return m.forEach(function(e){var t=s[e];t.inputNames.forEach(function(e){var a=getNodeNameAndIndex(e)[0];t.inputs.push(s[a]),s[a].children.push(t)})}),0===Object.keys(i).length?m.forEach(function(e){var t=s[e];0===t.children.length&&p.push(t)}):Object.keys(i).forEach(function(e){var t=getNodeNameAndIndex(e)[0],a=s[t];null!=a&&(a.signatureKey=i[e],p.push(a))}),Object.keys(u).length>0?Object.keys(u).forEach(function(e){var t=getNodeNameAndIndex(e)[0],a=s[t];a&&(a.signatureKey=u[e],o.push(a))}):o=r,{nodes:s,inputs:o,outputs:p,weights:n,placeholders:r,signature:t}},e.prototype.mapSignatureEntries=function(e){return Object.keys(e||{}).reduce(function(t,a){return t[e[a].name]=a,t},{})},e.prototype.mapNode=function(e){var t=getRegisteredOp(e.op)||this.opMappers[e.op]||{};null==e.attr&&(e.attr={});var a={name:e.name,op:e.op,category:t.category,inputNames:(e.input||[]).map(function(e){return e.startsWith(\"^\")?e.substr(1):e}),inputs:[],children:[],inputParams:{},attrParams:{},rawAttrs:e.attr};return null!=t.inputs&&(a.inputParams=t.inputs.reduce(function(e,t){return e[t.name]={type:t.type,inputIndexStart:t.start,inputIndexEnd:t.end},e},{})),null!=t.attrs&&(a.attrParams=t.attrs.reduce(function(t,a){var r=a.type,n=void 0;switch(a.type){case\"string\":void 0===(n=getStringParam(e.attr,a.tfName,a.defaultValue))&&a.tfDeprecatedName&&(n=getStringParam(e.attr,a.tfDeprecatedName,a.defaultValue));break;case\"string[]\":void 0===(n=getStringArrayParam(e.attr,a.tfName,a.defaultValue))&&a.tfDeprecatedName&&(n=getStringArrayParam(e.attr,a.tfDeprecatedName,a.defaultValue));break;case\"number\":void 0===(n=getNumberParam(e.attr,a.tfName,a.defaultValue||0))&&a.tfDeprecatedName&&(n=getNumberParam(e.attr,a.tfDeprecatedName,a.defaultValue));break;case\"number[]\":void 0===(n=getNumericArrayParam(e.attr,a.tfName,a.defaultValue))&&a.tfDeprecatedName&&(n=getNumericArrayParam(e.attr,a.tfDeprecatedName,a.defaultValue));break;case\"bool\":void 0===(n=getBoolParam(e.attr,a.tfName,a.defaultValue))&&a.tfDeprecatedName&&(n=getBoolParam(e.attr,a.tfDeprecatedName,a.defaultValue));break;case\"bool[]\":void 0===(n=getBoolArrayParam(e.attr,a.tfName,a.defaultValue))&&a.tfDeprecatedName&&(n=getBoolArrayParam(e.attr,a.tfDeprecatedName,a.defaultValue));break;case\"shape\":void 0===(n=getTensorShapeParam(e.attr,a.tfName,a.defaultValue))&&a.tfDeprecatedName&&(n=getTensorShapeParam(e.attr,a.tfDeprecatedName,a.defaultValue));break;case\"shape[]\":void 0===(n=getTensorShapeArrayParam(e.attr,a.tfName,a.defaultValue))&&a.tfDeprecatedName&&(n=getTensorShapeArrayParam(e.attr,a.tfDeprecatedName,a.defaultValue));break;case\"dtype\":void 0===(n=getDtypeParam(e.attr,a.tfName,a.defaultValue))&&a.tfDeprecatedName&&(n=getDtypeParam(e.attr,a.tfDeprecatedName,a.defaultValue));break;case\"dtype[]\":void 0===(n=getDtypeArrayParam(e.attr,a.tfName,a.defaultValue))&&a.tfDeprecatedName&&(n=getDtypeArrayParam(e.attr,a.tfDeprecatedName,a.defaultValue));break;case\"tensor\":case\"tensors\":break;default:throw new Error(\"Unsupported param type: \"+a.type+\" for op: \"+e.op)}return t[a.name]={value:n,type:r},t},{})),a},e}();function decodeBase64(e){var t=env().global;if(void 0!==t.atob)return t.atob(e);if(\"undefined\"!=typeof Buffer)return new Buffer(e,\"base64\").toString();throw new Error(\"Unable to decode base64 in this environment. Missing built-in atob() or Buffer()\")}function parseStringParam(e,t){var a=Array.isArray(e)?String.fromCharCode.apply(null,e):decodeBase64(e);return t?a:a.toLowerCase()}function getStringParam(e,t,a,r){void 0===r&&(r=!1);var n=e[t];return null!=n?parseStringParam(n.s,r):a}function getBoolParam(e,t,a){var r=e[t];return r?r.b:a}function getNumberParam(e,t,a){var r=e[t]||{},n=null!=r.i?r.i:null!=r.f?r.f:a;return\"number\"==typeof n?n:parseInt(n,10)}function parseDtypeParam(e){switch(\"string\"==typeof e&&(e=DataType[e]),e){case DataType.DT_FLOAT:return\"float32\";case DataType.DT_INT32:case DataType.DT_INT64:case DataType.DT_INT8:case DataType.DT_UINT8:return\"int32\";case DataType.DT_BOOL:return\"bool\";case DataType.DT_DOUBLE:return\"float32\";case DataType.DT_STRING:return\"string\";default:return null}}function getDtypeParam(e,t,a){var r=e[t];return r&&r.type?parseDtypeParam(r.type):a}function getDtypeArrayParam(e,t,a){var r=e[t];return r&&r.list&&r.list.type?r.list.type.map(function(e){return parseDtypeParam(e)}):a}function parseTensorShapeParam(e){if(!e.unknownRank)return null!=e.dim?e.dim.map(function(e){return\"number\"==typeof e.size?e.size:parseInt(e.size,10)}):[]}function getTensorShapeParam(e,t,a){var r=e[t];return r&&r.shape?parseTensorShapeParam(r.shape):a}function getNumericArrayParam(e,t,a){var r=e[t];return r?((r.list.f&&r.list.f.length?r.list.f:r.list.i)||[]).map(function(e){return\"number\"==typeof e?e:parseInt(e,10)}):a}function getStringArrayParam(e,t,a,r){void 0===r&&(r=!1);var n=e[t];return n&&n.list&&n.list.s?n.list.s.map(function(e){return parseStringParam(e,r)}):a}function getTensorShapeArrayParam(e,t,a){var r=e[t];return r&&r.list&&r.list.shape?r.list.shape.map(function(e){return parseTensorShapeParam(e)}):a}function getBoolArrayParam(e,t,a){var r=e[t];return r&&r.list&&r.list.b?r.list.b:a}var NodeValueImpl=function(){function e(e,t,a){var r=this;this.node=e,this.tensorMap=t,this.context=a,this.inputs=[],this.attrs={},this.inputs=e.inputNames.map(function(e){return r.getInput(e)}),null!=e.rawAttrs&&(this.attrs=Object.keys(e.rawAttrs).reduce(function(e,t){return e[t]=r.getAttr(t),e},{}))}return e.prototype.getInput=function(e){return getTensor(e,this.tensorMap,this.context)},e.prototype.getAttr=function(e,t){var a=this.node.rawAttrs[e];if(null!=a.tensor)return getTensor(e,this.tensorMap,this.context);if(null!=a.i||null!=a.f)return getNumberParam(this.node.rawAttrs,e,t);if(null!=a.s)return getStringParam(this.node.rawAttrs,e,t);if(null!=a.b)return getBoolParam(this.node.rawAttrs,e,t);if(null!=a.shape)return getTensorShapeParam(this.node.rawAttrs,e,t);if(null!=a.type)return getDtypeParam(this.node.rawAttrs,e,t);if(null!=a.list){if(null!=a.list.i||null!=a.list.f)return getNumericArrayParam(this.node.rawAttrs,e,t);if(null!=a.list.s)return getStringArrayParam(this.node.rawAttrs,e,t);if(null!=a.list.shape)return getTensorShapeArrayParam(this.node.rawAttrs,e,t);if(null!=a.list.b)return getBoolArrayParam(this.node.rawAttrs,e,t);if(null!=a.list.type)return getDtypeArrayParam(this.node.rawAttrs,e,t)}return t},e}(),executeOp=function(e,t,a){switch(e.op){case\"BiasAdd\":case\"AddV2\":case\"Add\":return[add(getParamValue(\"a\",e,t,a),getParamValue(\"b\",e,t,a))];case\"AddN\":return[addN(getParamValue(\"tensors\",e,t,a))];case\"FloorMod\":case\"Mod\":return[mod(getParamValue(\"a\",e,t,a),getParamValue(\"b\",e,t,a))];case\"Mul\":return[mul(getParamValue(\"a\",e,t,a),getParamValue(\"b\",e,t,a))];case\"RealDiv\":case\"Div\":return[div(getParamValue(\"a\",e,t,a),getParamValue(\"b\",e,t,a))];case\"DivNoNan\":return[divNoNan(getParamValue(\"a\",e,t,a),getParamValue(\"b\",e,t,a))];case\"FloorDiv\":return[floorDiv(getParamValue(\"a\",e,t,a),getParamValue(\"b\",e,t,a))];case\"Sub\":return[sub(getParamValue(\"a\",e,t,a),getParamValue(\"b\",e,t,a))];case\"Minimum\":return[minimum(getParamValue(\"a\",e,t,a),getParamValue(\"b\",e,t,a))];case\"Maximum\":return[maximum(getParamValue(\"a\",e,t,a),getParamValue(\"b\",e,t,a))];case\"Pow\":return[pow(getParamValue(\"a\",e,t,a),getParamValue(\"b\",e,t,a))];case\"SquaredDifference\":return[squaredDifference(getParamValue(\"a\",e,t,a),getParamValue(\"b\",e,t,a))];default:throw TypeError(\"Node type \"+e.op+\" is not implemented\")}},executeOp$1=function(e,t,a){switch(e.op){case\"Abs\":case\"ComplexAbs\":return[abs(getParamValue(\"x\",e,t,a))];case\"Acos\":return[acos(getParamValue(\"x\",e,t,a))];case\"Acosh\":return[acosh(getParamValue(\"x\",e,t,a))];case\"Asin\":return[asin(getParamValue(\"x\",e,t,a))];case\"Asinh\":return[asinh(getParamValue(\"x\",e,t,a))];case\"Atan\":return[atan(getParamValue(\"x\",e,t,a))];case\"Atan2\":return[atan2(getParamValue(\"x\",e,t,a),getParamValue(\"y\",e,t,a))];case\"Atanh\":return[atanh(getParamValue(\"x\",e,t,a))];case\"Ceil\":return[ceil(getParamValue(\"x\",e,t,a))];case\"Complex\":return[complex(getParamValue(\"real\",e,t,a),getParamValue(\"imag\",e,t,a))];case\"Cos\":return[cos(getParamValue(\"x\",e,t,a))];case\"Cosh\":return[cosh(getParamValue(\"x\",e,t,a))];case\"Elu\":return[elu(getParamValue(\"x\",e,t,a))];case\"Erf\":return[erf(getParamValue(\"x\",e,t,a))];case\"Exp\":return[exp(getParamValue(\"x\",e,t,a))];case\"Expm1\":return[expm1(getParamValue(\"x\",e,t,a))];case\"Floor\":return[floor(getParamValue(\"x\",e,t,a))];case\"Log\":return[log(getParamValue(\"x\",e,t,a))];case\"Log1p\":return[log1p(getParamValue(\"x\",e,t,a))];case\"Imag\":return[imag(getParamValue(\"x\",e,t,a))];case\"Neg\":return[neg(getParamValue(\"x\",e,t,a))];case\"Reciprocal\":return[reciprocal(getParamValue(\"x\",e,t,a))];case\"Real\":return[real(getParamValue(\"x\",e,t,a))];case\"Relu\":return[relu(getParamValue(\"x\",e,t,a))];case\"Round\":return[round(getParamValue(\"x\",e,t,a))];case\"Selu\":return[selu(getParamValue(\"x\",e,t,a))];case\"Sigmoid\":return[sigmoid(getParamValue(\"x\",e,t,a))];case\"Sin\":return[sin(getParamValue(\"x\",e,t,a))];case\"Sign\":return[sign(getParamValue(\"x\",e,t,a))];case\"Sinh\":return[sinh(getParamValue(\"x\",e,t,a))];case\"Softplus\":return[softplus(getParamValue(\"x\",e,t,a))];case\"Sqrt\":return[sqrt(getParamValue(\"x\",e,t,a))];case\"Square\":return[square(getParamValue(\"x\",e,t,a))];case\"Tanh\":return[tanh(getParamValue(\"x\",e,t,a))];case\"Tan\":return[tan(getParamValue(\"x\",e,t,a))];case\"Relu6\":case\"ClipByValue\":return[clipByValue(getParamValue(\"x\",e,t,a),getParamValue(\"clipValueMin\",e,t,a),getParamValue(\"clipValueMax\",e,t,a))];case\"Rsqrt\":return[rsqrt(getTensor(e.inputNames[0],t,a))];case\"Prod\":return[prod(getParamValue(\"x\",e,t,a),getParamValue(\"axes\",e,t,a))];case\"LeakyRelu\":return[leakyRelu(getParamValue(\"x\",e,t,a),getParamValue(\"alpha\",e,t,a))];case\"Prelu\":return[prelu(getParamValue(\"x\",e,t,a),getParamValue(\"alpha\",e,t,a))];default:throw TypeError(\"Node type \"+e.op+\" is not implemented\")}},TensorArray=function(){function e(t,a,r,n,s,o,p){this.name=t,this.dtype=a,this.maxSize=r,this.elementShape=n,this.identicalElementShapes=s,this.dynamicSize=o,this.clearAfterRead=p,this.tensors=[],this.closed_=!1,this.id=e.nextId++}return Object.defineProperty(e.prototype,\"closed\",{get:function(){return this.closed_},enumerable:!0,configurable:!0}),e.prototype.clearAndClose=function(){this.tensors.forEach(function(e){return e.tensor.dispose()}),this.tensors=[],this.closed_=!0},e.prototype.size=function(){return this.tensors.length},e.prototype.read=function(e){if(this.closed_)throw new Error(\"TensorArray \"+this.name+\" has already been closed.\");if(e<0||e>=this.tensors.length)throw new Error(\"Tried to read from index \"+e+\", but array size is: \"+this.tensors.length);var t=this.tensors[e];if(t.cleared)throw new Error(\"TensorArray \"+this.name+\": Could not read index \"+e+\" twice because it was cleared after a previous read (perhaps try setting clear_after_read = false?).\");return this.clearAfterRead&&(t.cleared=!0),t.read=!0,t.tensor},e.prototype.readMany=function(e){var t=this;return e.map(function(e){return t.read(e)})},e.prototype.write=function(e,t){if(this.closed_)throw new Error(\"TensorArray \"+this.name+\" has already been closed.\");if(e<0||!this.dynamicSize&&e>=this.maxSize)throw new Error(\"Tried to write to index \"+e+\", but array is not resizeable and size is: \"+this.maxSize);var a=this.tensors[e]||{};if(t.dtype!==this.dtype)throw new Error(\"TensorArray \"+this.name+\": Could not write to TensorArray index \"+e+\",\\n          because the value dtype is \"+t.dtype+\", but TensorArray dtype is \"+this.dtype+\".\");if(0!==this.size()||null!=this.elementShape&&0!==this.elementShape.length||(this.elementShape=t.shape),this.assertShapesMatchAllowUndefinedSize(this.elementShape,t.shape,\"TensorArray \"+this.name+\": Could not write to TensorArray index \"+e+\".\"),a&&a.read)throw new Error(\"TensorArray \"+this.name+\": Could not write to TensorArray index \"+e+\", because it has already been read.\");if(a&&a.written)throw new Error(\"TensorArray \"+this.name+\": Could not write to TensorArray index \"+e+\", because it has already been written.\");a.tensor=t,a.written=!0,this.tensors[e]=a},e.prototype.writeMany=function(e,t){var a=this;if(e.length!==t.length)throw new Error(\"TensorArray \"+this.name+\": could not write multiple tensors,because the index size: \"+e.length+\" is not the same as tensors size: \"+t.length+\".\");e.forEach(function(e,r){return a.write(e,t[r])})},e.prototype.gather=function(e,t){if(t&&t!==this.dtype)throw new Error(\"TensorArray dtype is \"+this.dtype+\" but gather requested dtype \"+t);if(!e){e=[];for(var a=0;a<this.size();a++)e.push(a)}if(0===e.length)return tensor([],[0].concat(this.elementShape));var r=this.readMany(e);return this.assertShapesMatchAllowUndefinedSize(this.elementShape,r[0].shape,\"TensorArray shape mismatch: \"),stack(r,0)},e.prototype.concat=function(e){if(e&&e!==this.dtype)throw new Error(\"TensorArray dtype is \"+this.dtype+\" but concat requested dtype \"+e);if(0===this.size())return tensor([],[0].concat(this.elementShape));for(var t=[],a=0;a<this.size();a++)t.push(a);var r=this.readMany(t);return this.assertShapesMatchAllowUndefinedSize(this.elementShape,r[0].shape,\"TensorArray shape mismatch: tensor array shape (\"+this.elementShape+\") vs first tensor shape (\"+r[0].shape+\")\"),concat(r,0)},e.prototype.scatter=function(e,t){if(t.dtype!==this.dtype)throw new Error(\"TensorArray dtype is \"+this.dtype+\" but tensor has dtype \"+t.dtype);if(e.length!==t.shape[0])throw new Error(\"Expected len(indices) == tensor.shape[0], but saw: \"+e.length+\" vs. \"+t.shape[0]);var a=Math.max.apply(Math,e);if(!this.dynamicSize&&a>=this.maxSize)throw new Error(\"Max index must be < array size (\"+a+\"  vs. \"+this.maxSize+\")\");this.writeMany(e,unstack(t,0))},e.prototype.split=function(e,t){var a=this;if(t.dtype!==this.dtype)throw new Error(\"TensorArray dtype is \"+this.dtype+\" but tensor has dtype \"+t.dtype);var r=0,n=e.map(function(e){return r+=e});if(r!==t.shape[0])throw new Error(\"Expected sum of lengths to be equal to\\n          tensor.shape[0], but sum of lengths is\\n        \"+r+\", and tensor's shape is: \"+t.shape);if(!this.dynamicSize&&e.length!==this.maxSize)throw new Error(\"TensorArray's size is not equal to the size of lengths (\"+this.maxSize+\" vs. \"+e.length+\"), and the TensorArray is not marked as dynamically resizeable\");var s=0===r?0:t.size/r,o=[];tidy(function(){t=t.reshape([1,r,s]);for(var p=0;p<e.length;++p){var u=[0,0===p?0:n[p-1],0],i=[1,e[p],s];o[p]=slice(t,u,i).reshape(a.elementShape)}return o});for(var p=[],u=0;u<e.length;u++)p[u]=u;this.writeMany(p,o)},e.prototype.assertShapesMatchAllowUndefinedSize=function(e,t,a){void 0===a&&(a=\"\"),util.assert(this.shapesEqualAllowUndefinedSize(e,t),function(){return a+\" Shapes \"+e+\" and \"+t+\" must match\"})},e.prototype.shapesEqualAllowUndefinedSize=function(e,t){if(e.length!==t.length)return!1;for(var a=0;a<e.length;a++)if(-1!==e[a]&&-1!==t[a]&&e[a]!==t[a])return!1;return!0},e.nextId=0,e}(),_this=void 0,executeOp$2=function(e,t,a){return __awaiter(_this,void 0,void 0,function(){var r,n,s,o,p,u,i,m,l,c,d,y,f,g,h,N,x,V,b,P,T,v,O,S,_,w,A,D,E,I,M,C,k,z,F;return __generator(this,function(j){switch(j.label){case 0:switch(e.op){case\"LoopCond\":return[3,1];case\"Switch\":return[3,2];case\"Merge\":return[3,4];case\"Enter\":return[3,5];case\"Exit\":return[3,6];case\"NextIteration\":return[3,7];case\"TensorArrayV3\":return[3,8];case\"TensorArrayWriteV3\":return[3,9];case\"TensorArrayReadV3\":return[3,10];case\"TensorArrayGatherV3\":return[3,11];case\"TensorArrayScatterV3\":return[3,12];case\"TensorArrayConcatV3\":return[3,13];case\"TensorArraySplitV3\":return[3,14];case\"TensorArraySizeV3\":return[3,15];case\"TensorArrayCloseV3\":return[3,16]}return[3,17];case 1:return[2,[getParamValue(\"pred\",e,t,a).clone()]];case 2:return r=getParamValue(\"pred\",e,t,a),n=getParamValue(\"data\",e,t,a),[4,r.data()];case 3:return[2,j.sent()[0]?[void 0,n.clone()]:[n.clone(),void 0]];case 4:return[2,(s=e.inputNames.find(function(e){return void 0!==getTensor(e,t,a)}))?[getTensor(s,t,a).clone()]:void 0];case 5:return o=getParamValue(\"frameName\",e,t,a),p=getParamValue(\"tensor\",e,t,a),a.enterFrame(o),[2,[p.clone()]];case 6:return u=getParamValue(\"tensor\",e,t,a),a.exitFrame(),[2,[u.clone()]];case 7:return i=getParamValue(\"tensor\",e,t,a),a.nextIteration(),[2,[i.clone()]];case 8:return m=getParamValue(\"size\",e,t,a),l=getParamValue(\"dtype\",e,t,a),c=getParamValue(\"elementShape\",e,t,a),d=getParamValue(\"dynamicSize\",e,t,a),y=getParamValue(\"clearAfterRead\",e,t,a),f=getParamValue(\"identicalElementShapes\",e,t,a),g=getParamValue(\"name\",e,t,a),h=new TensorArray(g,l,m,c,f,d,y),a.addTensorArray(h),[2,[scalar(h.id),scalar(1)]];case 9:return N=getParamValue(\"tensorArrayId\",e,t,a),x=getParamValue(\"index\",e,t,a),V=getParamValue(\"tensor\",e,t,a),a.getTensorArray(N).write(x,V),[2,[scalar(1)]];case 10:return b=getParamValue(\"tensorArrayId\",e,t,a),P=getParamValue(\"index\",e,t,a),[2,[a.getTensorArray(b).read(P)]];case 11:return T=getParamValue(\"tensorArrayId\",e,t,a),v=getParamValue(\"indices\",e,t,a),O=getParamValue(\"dtype\",e,t,a),[2,[a.getTensorArray(T).gather(v,O)]];case 12:return S=getParamValue(\"tensorArrayId\",e,t,a),_=getParamValue(\"indices\",e,t,a),w=getParamValue(\"tensor\",e,t,a),a.getTensorArray(S).scatter(_,w),[2,[scalar(1)]];case 13:return A=getParamValue(\"tensorArrayId\",e,t,a),D=a.getTensorArray(A),E=getParamValue(\"dtype\",e,t,a),[2,[D.concat(E)]];case 14:return I=getParamValue(\"tensorArrayId\",e,t,a),M=getParamValue(\"tensor\",e,t,a),C=getParamValue(\"lengths\",e,t,a),a.getTensorArray(I).split(C,M),[2,[scalar(1)]];case 15:return k=getParamValue(\"tensorArrayId\",e,t,a),z=a.getTensorArray(k),[2,[scalar(z.size(),\"int32\")]];case 16:return F=getParamValue(\"tensorArrayId\",e,t,a),a.getTensorArray(F).clearAndClose(),[2,[scalar(0)]];case 17:throw TypeError(\"Node type \"+e.op+\" is not implemented\")}})})},executeOp$3=function(e,t,a){switch(e.op){case\"Conv1D\":var r=getParamValue(\"stride\",e,t,a),n=getParamValue(\"pad\",e,t,a),s=getParamValue(\"dataFormat\",e,t,a).toUpperCase(),o=getParamValue(\"dilation\",e,t,a);return[conv1d(getParamValue(\"x\",e,t,a),getParamValue(\"filter\",e,t,a),r,n,s,o)];case\"Conv2D\":r=getParamValue(\"strides\",e,t,a),n=getParamValue(\"pad\",e,t,a),s=getParamValue(\"dataFormat\",e,t,a).toUpperCase();var p=getParamValue(\"dilations\",e,t,a);return[conv2d(getParamValue(\"x\",e,t,a),getParamValue(\"filter\",e,t,a),[r[1],r[2]],n,s,[p[1],p[2]])];case\"_FusedConv2D\":case\"FusedDepthwiseConv2dNative\":var u=getParamValue(\"fusedOps\",e,t,a),i=u[0],m=u[1],l=\"biasadd\"===i,c=\"prelu\"===m,d=\"fusedbatchnorm\"===i,y=getParamValue(\"numArgs\",e,t,a);if(l){if(c&&2!==y)throw new Error(\"FusedConv2d and DepthwiseConv2d with BiasAdd and Prelu must have two extra arguments: bias and alpha.\");if(!c&&1!==y)throw new Error(\"FusedConv2d and DepthwiseConv2d with BiasAdd must have one extra argument: bias.\")}if(d)throw new Error(\"FusedConv2d and DepthwiseConv2d with FusedBatchNorm is not supported.\");r=getParamValue(\"strides\",e,t,a),n=getParamValue(\"pad\",e,t,a),s=getParamValue(\"dataFormat\",e,t,a).toUpperCase(),p=getParamValue(\"dilations\",e,t,a);var f=getParamValue(\"args\",e,t,a),g=f[0],h=f[1];return[(\"_FusedConv2D\"===e.op?fused.conv2d:fused.depthwiseConv2d)({x:getParamValue(\"x\",e,t,a),filter:getParamValue(\"filter\",e,t,a),strides:[r[1],r[2]],pad:n,dataFormat:s,dilations:[p[1],p[2]],bias:g,activation:m,preluActivationWeights:h})];case\"Conv2DBackpropInput\":case\"Conv2dTranspose\":var N=getParamValue(\"outputShape\",e,t,a);r=getParamValue(\"strides\",e,t,a),n=getParamValue(\"pad\",e,t,a);return[conv2dTranspose(getParamValue(\"x\",e,t,a),getParamValue(\"filter\",e,t,a),N,[r[1],r[2]],n)];case\"DepthwiseConv2dNative\":case\"DepthwiseConv2d\":r=getParamValue(\"strides\",e,t,a),n=getParamValue(\"pad\",e,t,a),p=getParamValue(\"dilations\",e,t,a),s=getParamValue(\"dataFormat\",e,t,a).toUpperCase();return[depthwiseConv2d(getParamValue(\"input\",e,t,a),getParamValue(\"filter\",e,t,a),[r[1],r[2]],n,s,[p[1],p[2]])];case\"Conv3D\":r=getParamValue(\"strides\",e,t,a),n=getParamValue(\"pad\",e,t,a),s=getParamValue(\"dataFormat\",e,t,a).toUpperCase(),p=getParamValue(\"dilations\",e,t,a);return[conv3d(getParamValue(\"x\",e,t,a),getParamValue(\"filter\",e,t,a),[r[1],r[2],r[3]],n,s,[p[1],p[2],p[3]])];case\"AvgPool\":r=getParamValue(\"strides\",e,t,a),n=getParamValue(\"pad\",e,t,a);var x=getParamValue(\"kernelSize\",e,t,a);return[avgPool(getParamValue(\"x\",e,t,a),[x[1],x[2]],[r[1],r[2]],n)];case\"MaxPool\":r=getParamValue(\"strides\",e,t,a),n=getParamValue(\"pad\",e,t,a),x=getParamValue(\"kernelSize\",e,t,a);return[maxPool(getParamValue(\"x\",e,t,a),[x[1],x[2]],[r[1],r[2]],n)];case\"MaxPoolWithArgmax\":r=getParamValue(\"strides\",e,t,a),n=getParamValue(\"pad\",e,t,a),x=getParamValue(\"kernelSize\",e,t,a);var V=getParamValue(\"includeBatchInIndex\",e,t,a),b=maxPoolWithArgmax(getParamValue(\"x\",e,t,a),[x[1],x[2]],[r[1],r[2]],n,V);return[b.result,b.indexes];case\"AvgPool3D\":r=getParamValue(\"strides\",e,t,a),n=getParamValue(\"pad\",e,t,a),x=getParamValue(\"kernelSize\",e,t,a);return[avgPool3d(getParamValue(\"x\",e,t,a),[x[1],x[2],x[3]],[r[1],r[2],r[3]],n)];case\"MaxPool3D\":r=getParamValue(\"strides\",e,t,a),n=getParamValue(\"pad\",e,t,a),x=getParamValue(\"kernelSize\",e,t,a);return[maxPool3d(getParamValue(\"x\",e,t,a),[x[1],x[2],x[3]],[r[1],r[2],r[3]],n)];default:throw TypeError(\"Node type \"+e.op+\" is not implemented\")}},executeOp$4=function(e,t,a){switch(e.op){case\"Fill\":var r=getParamValue(\"shape\",e,t,a),n=getParamValue(\"dtype\",e,t,a),s=getParamValue(\"value\",e,t,a);return[fill(r,s,n)];case\"LinSpace\":var o=getParamValue(\"start\",e,t,a),p=getParamValue(\"stop\",e,t,a),u=getParamValue(\"num\",e,t,a);return[linspace(o,p,u)];case\"Multinomial\":var i=getParamValue(\"logits\",e,t,a),m=getParamValue(\"numSamples\",e,t,a),l=getParamValue(\"seed\",e,t,a);return[multinomial(i,m,l)];case\"OneHot\":var c=getParamValue(\"indices\",e,t,a),d=getParamValue(\"depth\",e,t,a),y=getParamValue(\"onValue\",e,t,a),f=getParamValue(\"offValue\",e,t,a);return[oneHot(c,d,y,f)];case\"Ones\":return[ones(getParamValue(\"shape\",e,t,a),getParamValue(\"dtype\",e,t,a))];case\"OnesLike\":return[onesLike(getParamValue(\"x\",e,t,a))];case\"RandomUniform\":return[randomUniform(getParamValue(\"shape\",e,t,a),getParamValue(\"minval\",e,t,a),getParamValue(\"maxval\",e,t,a),getParamValue(\"dtype\",e,t,a))];case\"Range\":o=getParamValue(\"start\",e,t,a);var g=getParamValue(\"stop\",e,t,a),h=getParamValue(\"step\",e,t,a);return[range(o,g,h,getParamValue(\"dtype\",e,t,a))];case\"TruncatedNormal\":r=getParamValue(\"shape\",e,t,a);var N=getParamValue(\"mean\",e,t,a),x=getParamValue(\"stdDev\",e,t,a);l=getParamValue(\"seed\",e,t,a);return[truncatedNormal(r,N,x,getParamValue(\"dtype\",e,t,a),l)];case\"Zeros\":return[zeros(getParamValue(\"shape\",e,t,a),getParamValue(\"dtype\",e,t,a))];case\"ZerosLike\":return[zerosLike(getParamValue(\"x\",e,t,a))];default:throw TypeError(\"Node type \"+e.op+\" is not implemented\")}},_this$1=void 0,executeOp$5=function(e,t,a){return __awaiter(_this$1,void 0,void 0,function(){var r,n,s,o,p,u,i,m;return __generator(this,function(l){switch(l.label){case 0:switch(e.op){case\"NonMaxSuppressionV5\":case\"NonMaxSuppressionV3\":case\"NonMaxSuppressionV2\":return[3,1];case\"Where\":return[3,5];case\"ListDiff\":return[3,7]}return[3,8];case 1:return r=getParamValue(\"boxes\",e,t,a),n=getParamValue(\"scores\",e,t,a),s=getParamValue(\"maxOutputSize\",e,t,a),o=getParamValue(\"iouThreshold\",e,t,a),p=getParamValue(\"scoreThreshold\",e,t,a),\"NonMaxSuppressionV5\"!==e.op?[3,3]:(u=getParamValue(\"softNmsSigma\",e,t,a),[4,image.nonMaxSuppressionWithScoreAsync(r,n,s,o,p,u)]);case 2:return[2,[(m=l.sent()).selectedIndices,m.selectedScores]];case 3:return[4,image.nonMaxSuppressionAsync(r,n,s,o,p)];case 4:return[2,[l.sent()]];case 5:return i=getParamValue(\"condition\",e,t,a).asType(\"bool\"),[4,whereAsync(i)];case 6:return m=[l.sent()],i.dispose(),[2,m];case 7:return[2,setdiff1dAsync(getParamValue(\"x\",e,t,a),getParamValue(\"y\",e,t,a))];case 8:throw TypeError(\"Node type \"+e.op+\" is not implemented\")}})})},executeOp$6=function(e,t,a){switch(e.op){case\"TopKV2\":var r=getParamValue(\"x\",e,t,a),n=getParamValue(\"k\",e,t,a),s=getParamValue(\"sorted\",e,t,a),o=topk(r,n,s);return[o.values,o.indices];default:throw TypeError(\"Node type \"+e.op+\" is not implemented\")}},executeOp$7=function(e,t,a){switch(e.op){case\"Const\":return t[e.name];case\"PlaceholderWithDefault\":var r=getParamValue(\"default\",e,t,a);return[getTensor(e.name,t,a)||r];case\"Placeholder\":return[getTensor(e.name,t,a)];case\"Identity\":case\"StopGradient\":case\"FakeQuantWithMinMaxVars\":return[getParamValue(\"x\",e,t,a).clone()];case\"IdentityN\":return getParamValue(\"x\",e,t,a).map(function(e){return e.clone()});case\"Snapshot\":return[getParamValue(\"x\",e,t,a).clone()];case\"Shape\":return[tensor1d(getParamValue(\"x\",e,t,a).shape,\"int32\")];case\"ShapeN\":return getParamValue(\"x\",e,t,a).map(function(e){return tensor1d(e.shape)});case\"Size\":return[scalar(getParamValue(\"x\",e,t,a).size,\"int32\")];case\"Rank\":return[scalar(getParamValue(\"x\",e,t,a).rank,\"int32\")];case\"NoOp\":return[scalar(1)];case\"Print\":var n=getParamValue(\"x\",e,t,a),s=getParamValue(\"data\",e,t,a),o=getParamValue(\"message\",e,t,a),p=getParamValue(\"summarize\",e,t,a);console.warn(\"The graph has a tf.print() operation,usually used for debugging, which slows down performance.\"),console.log(o);for(var u=0;u<s.length;u++)console.log(Array.prototype.slice.call(s[u].dataSync()).slice(0,p));return[n];default:throw TypeError(\"Node type \"+e.op+\" is not implemented\")}},executeOp$8=function(e,t,a){switch(e.op){case\"ResizeBilinear\":var r=getParamValue(\"images\",e,t,a),n=getParamValue(\"size\",e,t,a),s=getParamValue(\"alignCorners\",e,t,a);return[image.resizeBilinear(r,[n[0],n[1]],s)];case\"ResizeNearestNeighbor\":r=getParamValue(\"images\",e,t,a),n=getParamValue(\"size\",e,t,a),s=getParamValue(\"alignCorners\",e,t,a);return[image.resizeNearestNeighbor(r,[n[0],n[1]],s)];case\"CropAndResize\":var o=getParamValue(\"image\",e,t,a),p=getParamValue(\"boxes\",e,t,a),u=getParamValue(\"boxInd\",e,t,a),i=getParamValue(\"cropSize\",e,t,a),m=getParamValue(\"method\",e,t,a),l=getParamValue(\"extrapolationValue\",e,t,a);return[image.cropAndResize(o,p,u,i,m,l)];default:throw TypeError(\"Node type \"+e.op+\" is not implemented\")}},executeOp$9=function(e,t,a){switch(e.op){case\"Equal\":return[equal(getParamValue(\"a\",e,t,a),getParamValue(\"b\",e,t,a))];case\"NotEqual\":return[notEqual(getParamValue(\"a\",e,t,a),getParamValue(\"b\",e,t,a))];case\"Greater\":return[greater(getParamValue(\"a\",e,t,a),getParamValue(\"b\",e,t,a))];case\"GreaterEqual\":return[greaterEqual(getParamValue(\"a\",e,t,a),getParamValue(\"b\",e,t,a))];case\"Less\":return[less(getParamValue(\"a\",e,t,a),getParamValue(\"b\",e,t,a))];case\"LessEqual\":return[lessEqual(getParamValue(\"a\",e,t,a),getParamValue(\"b\",e,t,a))];case\"LogicalAnd\":return[logicalAnd(getParamValue(\"a\",e,t,a),getParamValue(\"b\",e,t,a))];case\"LogicalNot\":return[logicalNot(getParamValue(\"a\",e,t,a))];case\"LogicalOr\":return[logicalOr(getParamValue(\"a\",e,t,a),getParamValue(\"b\",e,t,a))];case\"Select\":case\"SelectV2\":return[where(getParamValue(\"condition\",e,t,a),getParamValue(\"a\",e,t,a),getParamValue(\"b\",e,t,a))];default:throw TypeError(\"Node type \"+e.op+\" is not implemented\")}},executeOp$10=function(e,t,a){switch(e.op){case\"BatchMatMul\":case\"BatchMatMulV2\":case\"MatMul\":return[matMul(getParamValue(\"a\",e,t,a),getParamValue(\"b\",e,t,a),getParamValue(\"transposeA\",e,t,a),getParamValue(\"transposeB\",e,t,a))];case\"Transpose\":return[transpose(getParamValue(\"x\",e,t,a),getParamValue(\"perm\",e,t,a))];case\"_FusedMatMul\":var r=getParamValue(\"fusedOps\",e,t,a),n=r[0],s=r[1],o=\"biasadd\"===n,p=\"prelu\"===s,u=getParamValue(\"numArgs\",e,t,a);if(o){if(p&&2!==u)throw new Error(\"Fused MatMul with BiasAdd and Prelu must have two extra arguments: bias and alpha.\");if(!p&&1!==u)throw new Error(\"Fused MatMul with BiasAdd must have one extra argument: bias.\")}var i=getParamValue(\"args\",e,t,a),m=i[0],l=i[1];return[fused.matMul({a:getParamValue(\"a\",e,t,a),b:getParamValue(\"b\",e,t,a),transposeA:getParamValue(\"transposeA\",e,t,a),transposeB:getParamValue(\"transposeB\",e,t,a),bias:m,activation:s,preluActivationWeights:l})];default:throw TypeError(\"Node type \"+e.op+\" is not implemented\")}},executeOp$11=function(e,t,a){switch(e.op){case\"FusedBatchNorm\":case\"FusedBatchNormV2\":case\"FusedBatchNormV3\":return[batchNorm(getParamValue(\"x\",e,t,a),getParamValue(\"mean\",e,t,a),getParamValue(\"variance\",e,t,a),getParamValue(\"offset\",e,t,a),getParamValue(\"scale\",e,t,a),getParamValue(\"epsilon\",e,t,a))];case\"LRN\":return[localResponseNormalization(getParamValue(\"x\",e,t,a),getParamValue(\"radius\",e,t,a),getParamValue(\"bias\",e,t,a),getParamValue(\"alpha\",e,t,a),getParamValue(\"beta\",e,t,a))];case\"Softmax\":return[softmax(getParamValue(\"x\",e,t,a))];case\"LogSoftmax\":return[logSoftmax(getParamValue(\"x\",e,t,a))];case\"SparseToDense\":return[sparseToDense(getParamValue(\"sparseIndices\",e,t,a),getParamValue(\"outputShape\",e,t,a),getParamValue(\"sparseValues\",e,t,a),getParamValue(\"defaultValue\",e,t,a))];default:throw TypeError(\"Node type \"+e.op+\" is not implemented\")}},executeOp$12=function(e,t,a){switch(e.op){case\"Max\":var r=getParamValue(\"axis\",e,t,a),n=getParamValue(\"keepDims\",e,t,a);return[max(getParamValue(\"x\",e,t,a),r,n)];case\"Mean\":r=getParamValue(\"axis\",e,t,a),n=getParamValue(\"keepDims\",e,t,a);return[mean(getParamValue(\"x\",e,t,a),r,n)];case\"Min\":r=getParamValue(\"axis\",e,t,a),n=getParamValue(\"keepDims\",e,t,a);return[min(getParamValue(\"x\",e,t,a),r,n)];case\"Sum\":r=getParamValue(\"axis\",e,t,a),n=getParamValue(\"keepDims\",e,t,a);return[sum(getParamValue(\"x\",e,t,a),r,n)];case\"All\":r=getParamValue(\"axis\",e,t,a),n=getParamValue(\"keepDims\",e,t,a);return[all(getParamValue(\"x\",e,t,a),r,n)];case\"Any\":r=getParamValue(\"axis\",e,t,a),n=getParamValue(\"keepDims\",e,t,a);return[any(getParamValue(\"x\",e,t,a),r,n)];case\"ArgMax\":r=getParamValue(\"axis\",e,t,a);return[argMax(getParamValue(\"x\",e,t,a),r)];case\"ArgMin\":r=getParamValue(\"axis\",e,t,a);return[argMin(getParamValue(\"x\",e,t,a),r)];case\"Prod\":r=getParamValue(\"axis\",e,t,a),n=getParamValue(\"keepDims\",e,t,a);return[prod(getParamValue(\"x\",e,t,a),r,n)];default:throw TypeError(\"Node type \"+e.op+\" is not implemented\")}},executeOp$13=function(e,t,a){switch(e.op){case\"ConcatV2\":case\"Concat\":var r=getParamValue(\"n\",e,t,a),n=getParamValue(\"axis\",e,t,a),s=getParamValue(\"tensors\",e,t,a);return s=s.slice(0,r),[concat(s,n)];case\"GatherV2\":case\"Gather\":n=getParamValue(\"axis\",e,t,a);var o=getParamValue(\"x\",e,t,a),p=getParamValue(\"indices\",e,t,a);return[gather(o,p.asType(\"int32\"),n)];case\"ReverseV2\":case\"Reverse\":n=getParamValue(\"axis\",e,t,a),o=getParamValue(\"x\",e,t,a);return[reverse(o,n)];case\"Slice\":var u=getParamValue(\"begin\",e,t,a),i=getParamValue(\"size\",e,t,a);return[slice(getParamValue(\"x\",e,t,a),u,i)];case\"StridedSlice\":u=getParamValue(\"begin\",e,t,a);var m=getParamValue(\"end\",e,t,a),l=getParamValue(\"strides\",e,t,a),c=getParamValue(\"beginMask\",e,t,a),d=getParamValue(\"endMask\",e,t,a),y=getParamValue(\"ellipsisMask\",e,t,a),f=getParamValue(\"newAxisMask\",e,t,a),g=getParamValue(\"shrinkAxisMask\",e,t,a),h=getParamValue(\"x\",e,t,a);if(1===u.length&&h.shape.length>1)for(var N=1;N<h.shape.length;N++)u.push(0),m.push(h.shape[N]),l.push(l[0]);return[stridedSlice(h,u,m,l,c,d,y,f,g)];case\"Pack\":return tidy(function(){var r=getParamValue(\"axis\",e,t,a),n=getParamValue(\"tensors\",e,t,a),s=n[0].shape,o=n[0].squeeze().shape,p=n.map(function(e){var t=util.arraysEqual(e.shape,s);if(!t&&!util.arraysEqual(e.squeeze().shape,o))throw new Error(\"the input tensors shape does not match\");return t?e:e.reshape(s)});return[stack(p,r)]});case\"Unpack\":return tidy(function(){var r=getParamValue(\"axis\",e,t,a),n=getParamValue(\"tensor\",e,t,a);return unstack(n,r)});case\"Tile\":var x=getParamValue(\"reps\",e,t,a);return[tile(getParamValue(\"x\",e,t,a),x)];case\"Split\":case\"SplitV\":n=getParamValue(\"axis\",e,t,a);var V=getParamValue(\"numOrSizeSplits\",e,t,a);return split(getParamValue(\"x\",e,t,a),V,n);case\"ScatterNd\":p=getParamValue(\"indices\",e,t,a);var b=getParamValue(\"values\",e,t,a),P=getParamValue(\"shape\",e,t,a);return[scatterND(p,b,P)];case\"GatherNd\":var T=getParamValue(\"x\",e,t,a);p=getParamValue(\"indices\",e,t,a);return[gatherND(T,p)];case\"SparseToDense\":p=getParamValue(\"sparseIndices\",e,t,a),P=getParamValue(\"outputShape\",e,t,a);var v=getParamValue(\"sparseValues\",e,t,a),O=getParamValue(\"defaultValue\",e,t,a);return[sparseToDense(p,v,P,v.dtype===O.dtype?O:O.asType(v.dtype))];default:throw TypeError(\"Node type \"+e.op+\" is not implemented\")}},executeOp$14=function(e,t,a){switch(e.op){case\"FFT\":return[fft(getParamValue(\"x\",e,t,a))];case\"IFFT\":return[ifft(getParamValue(\"x\",e,t,a))];case\"RFFT\":return[rfft(getParamValue(\"x\",e,t,a))];case\"IRFFT\":return[irfft(getParamValue(\"x\",e,t,a))];default:throw TypeError(\"Node type \"+e.op+\" is not implemented\")}},executeOp$15=function(e,t,a){switch(e.op){case\"Cast\":return[cast(getParamValue(\"x\",e,t,a),getParamValue(\"dtype\",e,t,a))];case\"ExpandDims\":var r=getParamValue(\"axis\",e,t,a);return[expandDims(getParamValue(\"x\",e,t,a),r)];case\"Squeeze\":r=getParamValue(\"axis\",e,t,a);return[squeeze(getParamValue(\"x\",e,t,a),r)];case\"Reshape\":return[reshape(getParamValue(\"x\",e,t,a),getParamValue(\"shape\",e,t,a))];case\"PadV2\":case\"Pad\":return[pad(getParamValue(\"x\",e,t,a),split$1(getParamValue(\"padding\",e,t,a),2),getParamValue(\"constantValue\",e,t,a))];case\"SpaceToBatchND\":var n=getParamValue(\"blockShape\",e,t,a),s=split$1(getParamValue(\"paddings\",e,t,a),2);return[spaceToBatchND(getParamValue(\"x\",e,t,a),n,s)];case\"BatchToSpaceND\":n=getParamValue(\"blockShape\",e,t,a);var o=split$1(getParamValue(\"crops\",e,t,a),2);return[batchToSpaceND(getParamValue(\"x\",e,t,a),n,o)];case\"DepthToSpace\":var p=getParamValue(\"blockSize\",e,t,a),u=getParamValue(\"dataFormat\",e,t,a).toUpperCase();return[depthToSpace(getParamValue(\"x\",e,t,a),p,u)];default:throw TypeError(\"Node type \"+e.op+\" is not implemented\")}};function executeOp$16(e,t,a){var r=function(e,t,a){switch(e.category){case\"arithmetic\":return tidy(function(){return executeOp(e,t,a)});case\"basic_math\":return tidy(function(){return executeOp$1(e,t,a)});case\"control\":return executeOp$2(e,t,a);case\"convolution\":return tidy(function(){return executeOp$3(e,t,a)});case\"creation\":return tidy(function(){return executeOp$4(e,t,a)});case\"dynamic\":return executeOp$5(e,t,a);case\"evaluation\":return tidy(function(){return executeOp$6(e,t,a)});case\"image\":return tidy(function(){return executeOp$8(e,t,a)});case\"graph\":return tidy(function(){return executeOp$7(e,t,a)});case\"logical\":return tidy(function(){return executeOp$9(e,t,a)});case\"matrices\":return tidy(function(){return executeOp$10(e,t,a)});case\"normalization\":return tidy(function(){return executeOp$11(e,t,a)});case\"reduction\":return tidy(function(){return executeOp$12(e,t,a)});case\"slice_join\":return tidy(function(){return executeOp$13(e,t,a)});case\"spectral\":return tidy(function(){return executeOp$14(e,t,a)});case\"transformation\":return tidy(function(){return executeOp$15(e,t,a)});case\"custom\":var r=getRegisteredOp(e.op);if(r&&r.customExecutor)return r.customExecutor(new NodeValueImpl(e,t,a));throw TypeError(\"Custom op \"+e.op+\" is not registered.\");default:throw TypeError(\"Unknown op '\"+e.op+\"'. File an issue at https://github.com/tensorflow/tfjs/issues so we can add it, or register a custom execution with tf.registerOp()\")}}(e,t,a);return r instanceof Promise?r.then(function(e){return[].concat(e)}):[].concat(r)}var ExecutionContext=function(){function e(e,t){this.weightMap=e,this.tensorArrayMap=t,this.rootContext={id:0,frameName:\"\",iterationId:0},this.contexts=[this.rootContext],this.lastId=0,this.generateCurrentContextIds()}return e.prototype.newFrame=function(e,t){return{id:e,frameName:t,iterationId:0}},Object.defineProperty(e.prototype,\"currentContext\",{get:function(){return this.contexts},set:function(e){this.contexts!==e&&(this.contexts=e,this.generateCurrentContextIds())},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,\"currentContextId\",{get:function(){return this._currentContextIds[0]},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,\"currentContextIds\",{get:function(){return this._currentContextIds},enumerable:!0,configurable:!0}),e.prototype.generateCurrentContextIds=function(){for(var e=[],t=0;t<this.contexts.length-1;t++){var a=this.contexts.slice(0,this.contexts.length-t);e.push(this.contextIdforContexts(a))}e.push(\"\"),this._currentContextIds=e},e.prototype.contextIdforContexts=function(e){return e?e.map(function(e){return 0===e.id&&0===e.iterationId?\"\":e.frameName+\"-\"+e.iterationId}).join(\"/\"):\"\"},e.prototype.enterFrame=function(e){this.contexts&&(this.lastId++,this.contexts=this.contexts.slice(),this.contexts.push(this.newFrame(this.lastId,e)),this._currentContextIds.unshift(this.contextIdforContexts(this.contexts)))},e.prototype.exitFrame=function(){if(!(this.contexts&&this.contexts.length>1))throw new Error(\"Cannot exit frame, the context is empty\");this.contexts=this.contexts.slice(),this.contexts.splice(-1),this.currentContextIds.shift()},e.prototype.nextIteration=function(){if(!(this.contexts&&this.contexts.length>0))throw new Error(\"Cannot increase frame iteration, the context is empty\");this.contexts=this.contexts.slice(),this.lastId++;var e=Object.assign({},this.contexts[this.contexts.length-1]);e.iterationId+=1,e.id=this.lastId,this.contexts.splice(-1,1,e),this._currentContextIds.splice(0,1,this.contextIdforContexts(this.contexts))},e.prototype.getWeight=function(e){return this.weightMap[e]},e.prototype.addTensorArray=function(e){this.tensorArrayMap[e.id]=e},e.prototype.getTensorArray=function(e){return this.tensorArrayMap[e]},e}();function getExecutionSubgraph(e,t,a){for(var r=new Set,n=[],s=null,o=null,p=new Set,u=Object.keys(e).map(function(e){return parseNodeName(e)[0]}),i=t.slice();i.length>0;){var m=i.pop();(isControlFlow(m)||isDynamicShape(m))&&null==s&&(o=(s=m).children.map(function(e){return e.name}).filter(function(e){return r.has(e)})),r.add(m.name),null==a[m.name]&&(-1===u.indexOf(m.name)&&(0!==m.inputs.length?m.inputs.forEach(function(e){p.has(e.name)||(p.add(e.name),i.push(e))}):n.push(m.name)))}return{inputs:e,outputs:t,usedNodes:r,missingInputs:n,dynamicNode:s,syncInputs:o}}function getNodesInTopologicalOrder(e,t,a){var r=a.usedNodes,n=a.inputs,s=[];Object.keys(n).map(function(e){return parseNodeName(e)[0]}).map(function(t){return e.nodes[t]}).forEach(function(e){r.has(e.name)&&s.push(e)}),e.weights.forEach(function(e){r.has(e.name)&&s.push(e)});for(var o=new Set,p=[];s.length>0;){var u=s.pop();o.add(u.name),t[u.name]||p.push(u),u.children.forEach(function(e){!o.has(e.name)&&r.has(e.name)&&e.inputs.every(function(e){return o.has(e.name)})&&s.push(e)})}return p}var CONTROL_FLOW_OPS=[\"Switch\",\"Merge\",\"Enter\",\"Exit\",\"NextIteration\"],DYNAMIC_SHAPE_OPS=[\"NonMaxSuppressionV2\",\"NonMaxSuppressionV3\",\"NonMaxSuppressionV5\",\"Where\"];function isControlFlow(e){return CONTROL_FLOW_OPS.indexOf(e.op)>=0}function isDynamicShape(e){return DYNAMIC_SHAPE_OPS.indexOf(e.op)>=0}var GraphExecutor=function(){function e(e){this.graph=e,this.compiledMap=new Map,this._weightMap={},this.SEPERATOR=\",\",this._outputs=e.outputs,this._inputs=e.inputs,this._signature=e.signature}return Object.defineProperty(e.prototype,\"weightMap\",{get:function(){return this._weightMap},set:function(e){var t=Object.keys(e).map(function(t){return e[t].map(function(e){return e.id})});this.weightIds=[].concat.apply([],t),this._weightMap=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,\"inputs\",{get:function(){return this._inputs.map(function(e){return{name:e.name,shape:e.attrParams.shape?e.attrParams.shape.value:void 0,dtype:e.attrParams.dtype?e.attrParams.dtype.value:void 0}})},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,\"outputs\",{get:function(){return this._outputs.map(function(e){return{name:e.name,shape:e.attrParams.shape?e.attrParams.shape.value:void 0,dtype:e.attrParams.dtype?e.attrParams.dtype.value:void 0}})},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,\"inputNodes\",{get:function(){return this._inputs.map(function(e){return e.signatureKey||e.name})},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,\"outputNodes\",{get:function(){return this._outputs.map(function(e){return e.signatureKey||e.name})},enumerable:!0,configurable:!0}),e.prototype.getCompilationKey=function(e,t){var a=e.map(function(e){return e.name}).sort(),r=t.map(function(e){return e.name}).sort();return a.join(this.SEPERATOR)+\"--\"+r.join(this.SEPERATOR)},e.prototype.compile=function(e,t){var a=getExecutionSubgraph(e,t,this.weightMap),r=a.missingInputs,n=a.dynamicNode,s=a.syncInputs;if(null!=n)throw new Error(\"This execution contains the node '\"+n.name+\"', which has the dynamic op '\"+n.op+\"'. Please use model.executeAsync() instead. Alternatively, to avoid the dynamic ops, specify the inputs [\"+s+\"]\");if(r.length>0){var o=t.map(function(e){return e.name}),p=Object.keys(e);throw new Error(\"Cannot compute the outputs [\"+o+\"] from the provided inputs [\"+p+\"]. Missing the following inputs: [\"+r+\"]\")}return getNodesInTopologicalOrder(this.graph,this.weightMap,a)},e.prototype.execute=function(e,t){var a=this;e=this.mapInputs(e);var r=Object.keys(e).sort();this.checkInputs(e),this.checkInputShapeAndType(e),t=this.mapOutputs(t),this.checkOutputs(t);var n=r.map(function(e){return a.graph.nodes[parseNodeName(e)[0]]}),s=t.map(function(e){return a.graph.nodes[parseNodeName(e)[0]]}),o=this.getCompilationKey(n,s),p=this.compiledMap.get(o);null==p&&(p=this.compile(e,s),this.compiledMap.set(o,p));var u={};return tidy(function(){var r=new ExecutionContext(a._weightMap,u),n=__assign({},a.weightMap);Object.keys(e).forEach(function(t){var a=parseNodeName(t),r=a[0],s=[];s[a[1]]=e[t],n[r]=s});for(var s=a.getFrozenTensorIds(n),o={},i=0;i<p.length;i++){var m=p[i];if(!n[m.name]){var l=executeOp$16(m,n,r);if(l instanceof Promise)throw new Error(\"The execution of the op '\"+m.op+\"' returned a promise. Please use model.executeAsync() instead.\");n[m.name]=l,a.checkTensorForDisposal(m.name,m,n,r,s,t,o)}}return t.map(function(e){return getTensor(e,n,r)})})},e.prototype.getFrozenTensorIds=function(e){var t=[].concat.apply([],Object.keys(e).map(function(t){return e[t]}).map(function(e){return e.map(function(e){return e.id})}));return new Set(t)},e.prototype.checkTensorForDisposal=function(e,t,a,r,n,s,o){\"control\"!==t.category&&-1===s.indexOf(e)&&(a[e].forEach(function(e){null!=e&&(o[e.id]=(o[e.id]||0)+t.children.length)}),t.inputs.forEach(function(e){if(\"control\"!==e.category){var t=getTensorsForCurrentContenxt(e.name,a,r);null!=t&&t.forEach(function(e){if(e&&!n.has(e.id)){var t=o[e.id];1===t?(e.dispose(),delete o[e.id]):null!=t&&o[e.id]--}})}}))},e.prototype.executeAsync=function(e,t){return __awaiter(this,void 0,void 0,function(){var a,r,n,s,o,p,u=this;return __generator(this,function(i){switch(i.label){case 0:return e=this.mapInputs(e),this.checkInputs(e),this.checkInputShapeAndType(e),t=this.mapOutputs(t),this.checkOutputs(t),a={},r=new ExecutionContext(this._weightMap,a),[4,this.executeWithControlFlow(e,r,t)];case 1:return n=i.sent(),s=t.map(function(e){return getTensor(e,n,r)}),o=new Set(s.map(function(e){return e.id})),p=new Set(Object.keys(e).map(function(t){return e[t].id})),Object.keys(n).forEach(function(e){n[e].forEach(function(e){!e||e.isDisposed||o.has(e.id)||p.has(e.id)||-1!==u.weightIds.indexOf(e.id)||e.dispose()})}),[2,s]}})})},e.prototype.executeWithControlFlow=function(e,t,a){return __awaiter(this,void 0,void 0,function(){var r,n,s,o,p,u,i,m,l,c,d,y,f,g,h,N,x=this;return __generator(this,function(V){switch(V.label){case 0:r=Object.keys(e),n=r.map(function(e){return x.graph.nodes[parseNodeName(e)[0]]}),s=a.map(function(e){return x.graph.nodes[parseNodeName(e)[0]]}),o=getExecutionSubgraph(e,s,this.weightMap),p=o.usedNodes,u=o.missingInputs,i=o.dynamicNode,m=o.syncInputs,l=n.concat(this.graph.weights).map(function(e){return{node:e,contexts:t.currentContext}}),c=__assign({},this.weightMap),Object.keys(e).forEach(function(t){var a=parseNodeName(t),r=a[0],n=[];n[a[1]]=e[t],c[r]=n}),d={},y=this.getFrozenTensorIds(c),f={},V.label=1;case 1:return l.length>0?(g=this.processStack(n,l,t,c,f,y,a,d,p),[4,Promise.all(g)]):[3,3];case 2:return V.sent(),[3,1];case 3:if(null==i&&console.warn(\"This model execution did not contain any nodes with control flow or dynamic output shapes. You can use model.execute() instead.\"),(h=s.filter(function(e){return!isControlFlow(e)&&!getTensor(e.name,c,t)}).map(function(e){return e.name})).length>0)throw N=\"\",null!=i&&(N=\"Alternatively, to avoid the dynamic ops, use model.execute() and specify the inputs [\"+m+\"]\"),new Error(\"Cannot compute the outputs [\"+h+\"] from the provided inputs [\"+r+\"]. Consider providing the following inputs: [\"+u+\"]. \"+N);return[2,c]}})})},e.prototype.processStack=function(e,t,a,r,n,s,o,p,u){for(var i=this,m=[],l=function(){var l=t.pop();a.currentContext=l.contexts;var d=\"\";if(\"Enter\"===l.node.op&&getParamValue(\"isConstant\",l.node,r,a)&&(d=getNodeNameAndIndex(l.node.name,a)[0]),-1===e.indexOf(l.node)){var y=executeOp$16(l.node,r,a);d||(d=getNodeNameAndIndex(l.node.name,a)[0]);var f=a.currentContext;y instanceof Promise?m.push(y.then(function(e){return r[d]=e,a.currentContext=f,i.checkTensorForDisposal(d,l.node,r,a,s,o,p),i.processChildNodes(l.node,t,a,r,n,u),e})):(r[d]=y,c.checkTensorForDisposal(d,l.node,r,a,s,o,p),c.processChildNodes(l.node,t,a,r,n,u))}else c.processChildNodes(l.node,t,a,r,n,u)},c=this;t.length>0;)l();return m},e.prototype.processChildNodes=function(e,t,a,r,n,s){e.children.forEach(function(e){var o=getNodeNameAndIndex(e.name,a)[0];!n[o]&&s.has(e.name)&&(\"Merge\"===e.op?e.inputNames.some(function(e){return!!getTensor(e,r,a)})&&(n[o]=!0,t.push({contexts:a.currentContext,node:e})):e.inputNames.every(function(e){return!!getTensor(e,r,a)})&&(n[o]=!0,t.push({contexts:a.currentContext,node:e})))})},e.prototype.dispose=function(){var e=this;Object.keys(this.weightMap).forEach(function(t){return e.weightMap[t].forEach(function(e){return e.dispose()})})},e.prototype.checkInputShapeAndType=function(e){var t=this;Object.keys(e).forEach(function(a){var r=e[a],n=parseNodeName(a)[0],s=t.graph.nodes[n];if(s.attrParams.shape&&s.attrParams.shape.value){var o=s.attrParams.shape.value,p=o.length===r.shape.length&&r.shape.every(function(e,t){return-1===o[t]||o[t]===e});util.assert(p,function(){return\"The shape of dict['\"+s.name+\"'] provided in model.execute(dict) must be [\"+o+\"], but was [\"+r.shape+\"]\"})}s.attrParams.dtype&&s.attrParams.dtype.value&&util.assert(r.dtype===s.attrParams.dtype.value,function(){return\"The dtype of dict['\"+s.name+\"'] provided in model.execute(dict) must be \"+s.attrParams.dtype.value+\", but was \"+r.dtype})})},e.prototype.mapInputs=function(e){var t={};for(var a in e){if(null!=this._signature&&null!=this._signature.inputs&&null!=this._signature.inputs[a])t[this._signature.inputs[a].name]=e[a];else t[a]=e[a]}return t},e.prototype.checkInputs=function(e){var t=this,a=Object.keys(e).filter(function(e){var a=parseNodeName(e)[0];return null==t.graph.nodes[a]});if(a.length>0)throw new Error(\"The dict provided in model.execute(dict) has keys: [\"+a+\"] that are not part of graph\")},e.prototype.mapOutputs=function(e){var t=this;return e.map(function(e){return null!=t._signature&&null!=t._signature.outputs&&null!=t._signature.outputs[e]?t._signature.outputs[e].name:e},{})},e.prototype.checkOutputs=function(e){var t=this;e.forEach(function(e){var a=parseNodeName(e)[0];if(!t.graph.nodes[a])throw new Error(\"The output '\"+e+\"' is not found in the graph\")})},e}(),TFHUB_SEARCH_PARAM=\"?tfjs-format=file\",DEFAULT_MODEL_NAME=\"model.json\",GraphModel=function(){function e(e,t){void 0===t&&(t={}),this.modelUrl=e,this.loadOptions=t,this.version=\"n/a\",null==t&&(this.loadOptions={})}return Object.defineProperty(e.prototype,\"modelVersion\",{get:function(){return this.version},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,\"inputNodes\",{get:function(){return this.executor.inputNodes},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,\"outputNodes\",{get:function(){return this.executor.outputNodes},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,\"inputs\",{get:function(){return this.executor.inputs},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,\"outputs\",{get:function(){return this.executor.outputs},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,\"weights\",{get:function(){return this.executor.weightMap},enumerable:!0,configurable:!0}),e.prototype.findIOHandler=function(){var e=this.modelUrl;if(null!=e.load)this.handler=e;else if(null!=this.loadOptions.requestInit)this.handler=io.browserHTTPRequest(e,this.loadOptions);else{var t=io.getLoadHandlers(e,this.loadOptions.onProgress);if(0===t.length)t.push(io.browserHTTPRequest(e,this.loadOptions));else if(t.length>1)throw new Error(\"Found more than one (\"+t.length+\") load handlers for URL '\"+[e]+\"'\");this.handler=t[0]}},e.prototype.load=function(){return __awaiter(this,void 0,void 0,function(){var e,t,a,r;return __generator(this,function(n){switch(n.label){case 0:if(this.findIOHandler(),null==this.handler.load)throw new Error(\"Cannot proceed with model loading because the IOHandler provided does not have the `load` method implemented.\");return e=this,[4,this.handler.load()];case 1:return e.artifacts=n.sent(),t=this.artifacts.modelTopology,a={},null!=this.artifacts.userDefinedMetadata&&(a=this.artifacts.userDefinedMetadata.signature),this.version=t.versions.producer+\".\"+t.versions.minConsumer,r=io.decodeWeights(this.artifacts.weightData,this.artifacts.weightSpecs),this.executor=new GraphExecutor(OperationMapper.Instance.transformGraph(t,a)),this.executor.weightMap=this.convertTensorMapToTensorsMap(r),[2,!0]}})})},e.prototype.save=function(e,t){return __awaiter(this,void 0,void 0,function(){var t;return __generator(this,function(a){if(\"string\"==typeof e){if(0===(t=io.getSaveHandlers(e)).length)throw new Error(\"Cannot find any save handlers for URL '\"+e+\"'\");if(t.length>1)throw new Error(\"Found more than one (\"+t.length+\") save handlers for URL '\"+e+\"'\");e=t[0]}if(null==e.save)throw new Error(\"GraphModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.\");return[2,e.save(this.artifacts)]})})},e.prototype.predict=function(e,t){return this.execute(e,this.outputNodes)},e.prototype.normalizeInputs=function(e){if(!(e instanceof Tensor||Array.isArray(e)))return e;if((e=Array.isArray(e)?e:[e]).length!==this.inputNodes.length)throw new Error(\"Input tensor count mismatch,the graph model has \"+this.inputNodes.length+\" placeholders, while there are \"+e.length+\" input tensors.\");return this.inputNodes.reduce(function(t,a,r){return t[a]=e[r],t},{})},e.prototype.normalizeOutputs=function(e){return e=e||this.outputNodes,Array.isArray(e)?e:[e]},e.prototype.execute=function(e,t){e=this.normalizeInputs(e),t=this.normalizeOutputs(t);var a=this.executor.execute(e,t);return a.length>1?a:a[0]},e.prototype.executeAsync=function(e,t){return __awaiter(this,void 0,void 0,function(){var a;return __generator(this,function(r){switch(r.label){case 0:return e=this.normalizeInputs(e),t=this.normalizeOutputs(t),[4,this.executor.executeAsync(e,t)];case 1:return[2,(a=r.sent()).length>1?a:a[0]]}})})},e.prototype.convertTensorMapToTensorsMap=function(e){return Object.keys(e).reduce(function(t,a){return t[a]=[e[a]],t},{})},e.prototype.dispose=function(){this.executor.dispose()},e}();function loadGraphModel(e,t){return void 0===t&&(t={}),__awaiter(this,void 0,void 0,function(){var a;return __generator(this,function(r){switch(r.label){case 0:if(null==e)throw new Error(\"modelUrl in loadGraphModel() cannot be null. Please provide a url or an IOHandler that loads the model\");return null==t&&(t={}),t.fromTFHub&&null==e.load&&(e.endsWith(\"/\")||(e+=\"/\"),e=\"\"+e+DEFAULT_MODEL_NAME+TFHUB_SEARCH_PARAM),[4,(a=new GraphModel(e,t)).load()];case 1:return r.sent(),[2,a]}})})}var version=\"1.7.4\";export{GraphModel,loadGraphModel,deregisterOp,registerOp,version as version_converter};\n//# sourceMappingURL=tf-converter.esm.js.map\n","/**\n    * @license\n    * Copyright 2020 Google LLC. All Rights Reserved.\n    * Licensed under the Apache License, Version 2.0 (the \"License\");\n    * you may not use this file except in compliance with the License.\n    * You may obtain a copy of the License at\n    *\n    * http://www.apache.org/licenses/LICENSE-2.0\n    *\n    * Unless required by applicable law or agreed to in writing, software\n    * distributed under the License is distributed on an \"AS IS\" BASIS,\n    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    * See the License for the specific language governing permissions and\n    * limitations under the License.\n    * =============================================================================\n    */\nimport{util,Tensor,tidy,browser,tensor2d,tensor1d,slice,add,div,mul,sub,concat2d,env,sigmoid,image,getBackend,reshape,backend,buffer}from\"@tensorflow/tfjs-core\";import{loadGraphModel}from\"@tensorflow/tfjs-converter\";function getBoxSize(t){return[Math.abs(t.endPoint[0]-t.startPoint[0]),Math.abs(t.endPoint[1]-t.startPoint[1])]}function getBoxCenter(t){return[t.startPoint[0]+(t.endPoint[0]-t.startPoint[0])/2,t.startPoint[1]+(t.endPoint[1]-t.startPoint[1])/2]}function cutBoxFromImageAndResize(t,n,e){const o=n.shape[1],s=n.shape[2],i=[[t.startPoint[1]/o,t.startPoint[0]/s,t.endPoint[1]/o,t.endPoint[0]/s]];return image.cropAndResize(n,i,[0],e)}function scaleBoxCoordinates(t,n){return{startPoint:[t.startPoint[0]*n[0],t.startPoint[1]*n[1]],endPoint:[t.endPoint[0]*n[0],t.endPoint[1]*n[1]],palmLandmarks:t.palmLandmarks.map(t=>{return[t[0]*n[0],t[1]*n[1]]})}}function enlargeBox(t,n=1.5){const e=getBoxCenter(t),o=getBoxSize(t),s=[n*o[0]/2,n*o[1]/2];return{startPoint:[e[0]-s[0],e[1]-s[1]],endPoint:[e[0]+s[0],e[1]+s[1]],palmLandmarks:t.palmLandmarks}}function squarifyBox(t){const n=getBoxCenter(t),e=getBoxSize(t),o=Math.max(...e)/2;return{startPoint:[n[0]-o,n[1]-o],endPoint:[n[0]+o,n[1]+o],palmLandmarks:t.palmLandmarks}}function shiftBox(t,n){const e=[t.endPoint[0]-t.startPoint[0],t.endPoint[1]-t.startPoint[1]],o=[e[0]*n[0],e[1]*n[1]];return{startPoint:[t.startPoint[0]+o[0],t.startPoint[1]+o[1]],endPoint:[t.endPoint[0]+o[0],t.endPoint[1]+o[1]],palmLandmarks:t.palmLandmarks}}class HandDetector{constructor(t,n,e,o,s,i){this.model=t,this.width=n,this.height=e,this.iouThreshold=s,this.scoreThreshold=i,this.anchors=o.map(t=>[t.x_center,t.y_center]),this.anchorsTensor=tensor2d(this.anchors),this.inputSizeTensor=tensor1d([n,e]),this.doubleInputSizeTensor=tensor1d([2*n,2*e])}normalizeBoxes(t){return tidy(()=>{const n=slice(t,[0,0],[-1,2]),e=slice(t,[0,2],[-1,2]),o=add(div(n,this.inputSizeTensor),this.anchorsTensor),s=div(e,this.doubleInputSizeTensor),i=mul(sub(o,s),this.inputSizeTensor),r=mul(add(o,s),this.inputSizeTensor);return concat2d([i,r],1)})}normalizeLandmarks(t,n){return tidy(()=>{const e=add(div(t.reshape([-1,7,2]),this.inputSizeTensor),this.anchors[n]);return mul(e,this.inputSizeTensor)})}getBoundingBoxes(t){return tidy(()=>{const n=mul(sub(t,.5),2),e=env().get(\"WEBGL_PACK_DEPTHWISECONV\");env().set(\"WEBGL_PACK_DEPTHWISECONV\",!0);const o=this.model.predict(n).squeeze();env().set(\"WEBGL_PACK_DEPTHWISECONV\",e);const s=sigmoid(slice(o,[0,0],[-1,1])).squeeze(),i=slice(o,[0,1],[-1,4]),r=this.normalizeBoxes(i),a=console.warn;console.warn=(()=>{});const d=image.nonMaxSuppression(r,s,1,this.iouThreshold,this.scoreThreshold).arraySync();if(console.warn=a,0===d.length)return null;const u=d[0],c=slice(r,[u,0],[1,-1]),h=slice(o,[u,5],[1,14]);return{boxes:c,palmLandmarks:this.normalizeLandmarks(h,u).reshape([-1,2])}})}estimateHandBounds(t){const n=t.shape[1],e=t.shape[2],o=tidy(()=>t.resizeBilinear([this.width,this.height]).div(255)),s=this.getBoundingBoxes(o);if(null===s)return o.dispose(),null;const i=s.boxes.arraySync(),r=i[0].slice(0,2),a=i[0].slice(2,4),d=s.palmLandmarks.arraySync();return o.dispose(),s.boxes.dispose(),s.palmLandmarks.dispose(),scaleBoxCoordinates({startPoint:r,endPoint:a,palmLandmarks:d},[e/this.width,n/this.height])}}const MESH_ANNOTATIONS={thumb:[1,2,3,4],indexFinger:[5,6,7,8],middleFinger:[9,10,11,12],ringFinger:[13,14,15,16],pinky:[17,18,19,20],palmBase:[0]};function rotate(t,n,e,o){const s=backend(),i=buffer(t.shape,t.dtype),[r,a,d,u]=t.shape,c=d*(\"number\"==typeof o?o:o[0]),h=a*(\"number\"==typeof o?o:o[1]),l=Math.sin(-n),m=Math.cos(-n),p=s.readSync(t.dataId);for(let t=0;t<r;t++)for(let n=0;n<a;n++)for(let o=0;o<d;o++)for(let s=0;s<u;s++){const f=[r,n,o,s],_=f[2],P=f[1];let g=(_-c)*m-(P-h)*l,M=(_-c)*l+(P-h)*m;g=Math.round(g+c),M=Math.round(M+h);let T=e;if(\"number\"!=typeof e&&(T=3===s?255:e[s]),g>=0&&g<d&&M>=0&&M<a){T=p[t*d*a*u+M*(d*u)+g*u+s]}const I=t*d*a*u+n*(d*u)+o*u+s;i.values[I]=T}return i.toTensor()}function rotate$1(t,n,e,o){const s=t.shape,i=s[1],r=s[2],a=Math.sin(n),d=Math.cos(n),u=Math.floor(r*(\"number\"==typeof o?o:o[0])),c=Math.floor(i*(\"number\"==typeof o?o:o[1]));let h=\"\";const l={variableNames:[\"Image\"],outputShape:s,userCode:`\\n      void main() {\\n        ivec4 coords = getOutputCoords();\\n        int x = coords[2];\\n        int y = coords[1];\\n        int coordX = int(float(x - ${u}) * ${d} -\\n          float(y - ${c}) * ${a});\\n        int coordY = int(float(x - ${u}) * ${a} +\\n          float(y - ${c}) * ${d});\\n        coordX = int(coordX + ${u});\\n        coordY = int(coordY + ${c});\\n\\n        ${h=\"number\"==typeof e?`float outputValue = ${e.toFixed(2)};`:`\\n      vec3 fill = vec3(${e.join(\",\")});\\n      float outputValue = fill[coords[3]];`}\\n\\n        if(coordX > 0 && coordX < ${r} && coordY > 0 && coordY < ${i}) {\\n          outputValue = getImage(coords[0], coordY, coordX, coords[3]);\\n        }\\n\\n      setOutput(outputValue);\\n    }`};return backend().compileAndRun(l,[t])}function normalizeRadians(t){return t-2*Math.PI*Math.floor((t+Math.PI)/(2*Math.PI))}function computeRotation(t,n){return normalizeRadians(Math.PI/2-Math.atan2(-(n[1]-t[1]),n[0]-t[0]))}const buildTranslationMatrix=(t,n)=>[[1,0,t],[0,1,n],[0,0,1]];function dot(t,n){let e=0;for(let o=0;o<t.length;o++)e+=t[o]*n[o];return e}function getColumnFrom2DArr(t,n){const e=[];for(let o=0;o<t.length;o++)e.push(t[o][n]);return e}function multiplyTransformMatrices(t,n){const e=[],o=t.length;for(let s=0;s<o;s++){e.push([]);for(let i=0;i<o;i++)e[s].push(dot(t[s],getColumnFrom2DArr(n,i)))}return e}function buildRotationMatrix(t,n){const e=Math.cos(t),o=Math.sin(t),s=[[e,-o,0],[o,e,0],[0,0,1]];return multiplyTransformMatrices(multiplyTransformMatrices(buildTranslationMatrix(n[0],n[1]),s),buildTranslationMatrix(-n[0],-n[1]))}function invertTransformMatrix(t){const n=[[t[0][0],t[1][0]],[t[0][1],t[1][1]]],e=[t[0][2],t[1][2]],o=[-dot(n[0],e),-dot(n[1],e)];return[n[0].concat(o[0]),n[1].concat(o[1]),[0,0,1]]}function rotatePoint(t,n){return[dot(t,n[0]),dot(t,n[1])]}const UPDATE_REGION_OF_INTEREST_IOU_THRESHOLD=.8,PALM_BOX_SHIFT_VECTOR=[0,-.4],PALM_BOX_ENLARGE_FACTOR=3,HAND_BOX_SHIFT_VECTOR=[0,-.1],HAND_BOX_ENLARGE_FACTOR=1.65,PALM_LANDMARK_IDS=[0,5,9,13,17,1,2],PALM_LANDMARKS_INDEX_OF_PALM_BASE=0,PALM_LANDMARKS_INDEX_OF_MIDDLE_FINGER_BASE=2;class HandPipeline{constructor(t,n,e,o,s,i){this.regionsOfInterest=[],this.runsWithoutHandDetector=0,this.boundingBoxDetector=t,this.meshDetector=n,this.maxContinuousChecks=s,this.detectionConfidence=i,this.meshWidth=e,this.meshHeight=o,this.maxHandsNumber=1}getBoxForPalmLandmarks(t,n){const e=t.map(t=>{return rotatePoint([...t,1],n)});return enlargeBox(squarifyBox(shiftBox(this.calculateLandmarksBoundingBox(e),PALM_BOX_SHIFT_VECTOR)),PALM_BOX_ENLARGE_FACTOR)}getBoxForHandLandmarks(t){const n=enlargeBox(squarifyBox(shiftBox(this.calculateLandmarksBoundingBox(t),HAND_BOX_SHIFT_VECTOR)),HAND_BOX_ENLARGE_FACTOR),e=[];for(let n=0;n<PALM_LANDMARK_IDS.length;n++)e.push(t[PALM_LANDMARK_IDS[n]].slice(0,2));return n.palmLandmarks=e,n}transformRawCoords(t,n,e,o){const s=getBoxSize(n),i=[s[0]/this.meshWidth,s[1]/this.meshHeight],r=t.map(t=>[i[0]*(t[0]-this.meshWidth/2),i[1]*(t[1]-this.meshHeight/2),t[2]]),a=buildRotationMatrix(e,[0,0]),d=r.map(t=>{return[...rotatePoint(t,a),t[2]]}),u=invertTransformMatrix(o),c=[...getBoxCenter(n),1],h=[dot(c,u[0]),dot(c,u[1])];return d.map(t=>[t[0]+h[0],t[1]+h[1],t[2]])}async estimateHand(t){const n=this.shouldUpdateRegionsOfInterest();if(!0===n){const n=this.boundingBoxDetector.estimateHandBounds(t);if(null===n)return t.dispose(),this.regionsOfInterest=[],null;this.updateRegionsOfInterest(n,!0),this.runsWithoutHandDetector=0}else this.runsWithoutHandDetector++;const e=this.regionsOfInterest[0],o=computeRotation(e.palmLandmarks[PALM_LANDMARKS_INDEX_OF_PALM_BASE],e.palmLandmarks[PALM_LANDMARKS_INDEX_OF_MIDDLE_FINGER_BASE]),s=getBoxCenter(e),i=[s[0]/t.shape[2],s[1]/t.shape[1]];let r;const a=getBackend();if(\"webgl\"===a)r=rotate$1(t,o,0,i);else{if(\"cpu\"!==a)throw new Error(`Handpose is not yet supported by the ${a} `+\"backend - rotation kernel is not defined.\");r=rotate(t,o,0,i)}const d=buildRotationMatrix(-o,s);let u;const c=cutBoxFromImageAndResize(u=!0===n?this.getBoxForPalmLandmarks(e.palmLandmarks,d):e,r,[this.meshWidth,this.meshHeight]),h=c.div(255);c.dispose(),r.dispose();const l=env().get(\"WEBGL_PACK_DEPTHWISECONV\");env().set(\"WEBGL_PACK_DEPTHWISECONV\",!0);const[m,p]=this.meshDetector.predict(h);env().set(\"WEBGL_PACK_DEPTHWISECONV\",l),h.dispose();const f=m.dataSync()[0];if(m.dispose(),f<this.detectionConfidence)return p.dispose(),this.regionsOfInterest=[],null;const _=reshape(p,[-1,3]),P=_.arraySync();p.dispose(),_.dispose();const g=this.transformRawCoords(P,u,o,d),M=this.getBoxForHandLandmarks(g);return this.updateRegionsOfInterest(M,!1),{landmarks:g,handInViewConfidence:f,boundingBox:{topLeft:M.startPoint,bottomRight:M.endPoint}}}calculateLandmarksBoundingBox(t){const n=t.map(t=>t[0]),e=t.map(t=>t[1]);return{startPoint:[Math.min(...n),Math.min(...e)],endPoint:[Math.max(...n),Math.max(...e)]}}updateRegionsOfInterest(t,n){if(n)this.regionsOfInterest=[t];else{const n=this.regionsOfInterest[0];let e=0;if(null!=n&&null!=n.startPoint){const[o,s]=t.startPoint,[i,r]=t.endPoint,[a,d]=n.startPoint,[u,c]=n.endPoint,h=Math.max(o,a),l=Math.max(s,d),m=(Math.min(i,u)-h)*(Math.min(r,c)-l);e=m/((i-o)*(r-s)+(u-a)*(c-s)-m)}this.regionsOfInterest[0]=e>UPDATE_REGION_OF_INTEREST_IOU_THRESHOLD?n:t}}shouldUpdateRegionsOfInterest(){return this.regionsOfInterest.length!==this.maxHandsNumber||this.runsWithoutHandDetector>=this.maxContinuousChecks}}async function loadHandDetectorModel(){return loadGraphModel(\"https://tfhub.dev/mediapipe/tfjs-model/handdetector/1/default/1\",{fromTFHub:!0})}const MESH_MODEL_INPUT_WIDTH=256,MESH_MODEL_INPUT_HEIGHT=256;async function loadHandPoseModel(){return loadGraphModel(\"https://tfhub.dev/mediapipe/tfjs-model/handskeleton/1/default/1\",{fromTFHub:!0})}async function loadAnchors(){return util.fetch(\"https://tfhub.dev/mediapipe/tfjs-model/handskeleton/1/default/1/anchors.json?tfjs-format=file\").then(t=>t.json())}async function load({maxContinuousChecks:t=1/0,detectionConfidence:n=.8,iouThreshold:e=.3,scoreThreshold:o=.5}={}){const[s,i,r]=await Promise.all([loadAnchors(),loadHandDetectorModel(),loadHandPoseModel()]),a=new HandDetector(i,MESH_MODEL_INPUT_WIDTH,MESH_MODEL_INPUT_HEIGHT,s,e,o),d=new HandPipeline(a,r,MESH_MODEL_INPUT_WIDTH,MESH_MODEL_INPUT_HEIGHT,t,n);return new HandPose(d)}function getInputTensorDimensions(t){return t instanceof Tensor?[t.shape[0],t.shape[1]]:[t.height,t.width]}function flipHandHorizontal(t,n){const{handInViewConfidence:e,landmarks:o,boundingBox:s}=t;return{handInViewConfidence:e,landmarks:o.map(t=>[n-1-t[0],t[1],t[2]]),boundingBox:{topLeft:[n-1-s.topLeft[0],s.topLeft[1]],bottomRight:[n-1-s.bottomRight[0],s.bottomRight[1]]}}}class HandPose{constructor(t){this.pipeline=t}static getAnnotations(){return MESH_ANNOTATIONS}async estimateHands(t,n=!1){const[,e]=getInputTensorDimensions(t),o=tidy(()=>(t instanceof Tensor||(t=browser.fromPixels(t)),t.toFloat().expandDims(0))),s=await this.pipeline.estimateHand(o);if(o.dispose(),null===s)return[];let i=s;!0===n&&(i=flipHandHorizontal(s,e));const r={};for(const t of Object.keys(MESH_ANNOTATIONS))r[t]=MESH_ANNOTATIONS[t].map(t=>i.landmarks[t]);return[{handInViewConfidence:i.handInViewConfidence,boundingBox:i.boundingBox,landmarks:i.landmarks,annotations:r}]}}export{load,HandPose};\n","import { ArgumentType, BlockType, Extension, Block, DefineBlock, Environment, ExtensionMenuDisplayDetails, RuntimeEvent } from \"$common\";\n\nimport Video from '../../../packages/scratch-vm/src/io/video';\n// import Runtime from '../../../packages/scratch-vm/src/engine/runtime';\n// import type RenderedTarget from '../../../packages/scratch-vm/src/sprites/rendered-target';\nimport * as handpose from '../../../packages/scratch-vm/node_modules/@tensorflow-models/handpose';\n\n/**\n * States the video sensing activity can be set to.\n * @readonly\n * @enum {string}\n */\nconst VideoState = {\n  /** Video turned off. */\n  OFF: 0,\n\n  /** Video turned on with default y axis mirroring. */\n  ON: 1,\n\n  /** Video turned on without default y axis mirroring. */\n  ON_FLIPPED: 2\n};\n\n/**\n * \n */\ntype Details = {\n  name: \"Hand Sensing\",\n  description: \"Sense hand movement with the camera.\",\n  /**\n   * IMPORTANT! Place your icon image (typically a png) in the same directory as this index.ts file\n   */\n  iconURL: \"Typescript_logo.png\",  //REPLACE WITH ORIGINAL ICON\n  /**\n   * IMPORTANT! Place your inset icon image (typically an svg) in the same directory as this index.ts file\n   * NOTE: This icon will also appear on all of your extension's blocks\n   */\n  insetIconURL: \"typescript-logo.svg\"   //REPLACE WITH ORIGINAL INSET ICON\n};\n\n/**\n * \n */\ntype Blocks = {\n  goToHandPartBlock(handPart: string, fingerPart: number): void; \n  // these video blocks are present in a few different extensions, perhaps making a file just for these?\n  videoToggleBlock(state: number): void;   \n  setVideoTransparencyBlock(transparency: number): void;\n};\n\n\nexport default class PoseHand extends Extension<Details, Blocks> {\n  /**\n   * @summary A field to demonstrate how Typescript Class fields work\n   * @link https://www.typescriptlang.org/docs/handbook/2/classes.html#fields\n   */\n  \n  handPoseState;\n  firstInstall: boolean;\n  _handModel;\n  globalVideoState: number;\n  globalVideoTransparency: number;\n\n  /**\n   * Acts like class PoseHand's constructor (instead of a child class constructor)\n   * @param env \n   */\n  init(env: Environment) {\n\n    this.runtime = env.runtime;\n    const EXTENSION_ID = 'PoseHand';\n\n    /*\n    this.runtime.registerPeripheralExtension(EXTENSION_ID, this);\n    this.runtime.connectPeripheral(EXTENSION_ID, 0);\n    this.runtime.emit(this.runtime.constructor.PERIPHERAL_CONNECTED);\n    */\n\n    /**\n     * A flag to determine if this extension has been installed in a project.\n     * It is set to false the first time getInfo is run.\n     * @type {boolean}\n     */\n    this.firstInstall = true;\n    \n    if (this.runtime.ioDevices) {\n      //console.log('check 1');\n        this.runtime.on(RuntimeEvent.ProjectLoaded, this.projectStarted.bind(this));\n        this.runtime.on(RuntimeEvent.ProjectRunStart, this.reset.bind(this));\n        this._loop();\n    }\n  }\n\n  /**\n   * Dimensions the video stream is analyzed at after its rendered to the\n   * sample canvas.\n   * @type {Array.<number>}\n   */\n  static get DIMENSIONS () {\n      return [480, 360];\n  }\n\n  tfCoordsToScratch({x, y, z}) {\n    return {x: x - 250, y: 200 - y};\n  }\n\n  /**\n   * Get the latest values for video transparency and state,\n   * and set the video device to use them.\n   */\n  projectStarted () {\n    this.setVideoTransparency(this.globalVideoTransparency);\n    this.videoToggle(this.globalVideoState);\n  }\n\n  /**\n   * init() does something with this? Don't know if this is important to keep still.\n   */\n  reset () {\n  }\n\n  /**\n   * Checks if something is connected ???\n   * @returns {boolean} true if connected, false if not connected\n   */\n  isConnected() {\n    return !!this.handPoseState && this.handPoseState.length > 0;\n  }\n\n  /**\n   * \n   */\n  async _loop () {\n    while (true) {\n        const frame = this.runtime.ioDevices.video.getFrame({\n            format: Video.FORMAT_IMAGE_DATA,\n            dimensions: PoseHand.DIMENSIONS\n        });\n\n        const time = +new Date();\n        if (frame) {\n          //console.log('check 2');\n            this.handPoseState = await this.estimateHandPoseOnImage(frame);\n            /*\n            if (this.isConnected()) {\n                this.runtime.emit(this.runtime.constructor.PERIPHERAL_CONNECTED);\n            } else {\n                this.runtime.emit(this.runtime.constructor.PERIPHERAL_DISCONNECTED);\n            }\n            */\n        }\n        const estimateThrottleTimeout = (+new Date() - time) / 4;\n        await new Promise(r => setTimeout(r, estimateThrottleTimeout));\n    }\n  }\n  \n  /**\n   * @param imageElement\n   * @returns {Promise<AnnotatedPrediction[]>}\n   */\n  async estimateHandPoseOnImage(imageElement) {\n    const handModel = await this.getLoadedHandModel();\n    return await handModel.estimateHands(imageElement, {\n        flipHorizontal: false\n    });\n  }\n\n  async getLoadedHandModel() {\n    if (!this._handModel) {\n        //console.log('check 3');\n        this._handModel = await handpose.load();\n    }\n    return this._handModel;\n  }\n\n  /**\n   * Turns the video camera off/on/on and flipped\n   * @param state \n   */\n  videoToggle (state: number) {\n    if (state === VideoState.OFF) {\n      this.runtime.ioDevices.video.disableVideo();\n    } \n    else {\n      this.runtime.ioDevices.video.enableVideo();\n      // Mirror if state is ON. Do not mirror if state is ON_FLIPPED.\n      this.runtime.ioDevices.video.mirror = (state === VideoState.ON);\n    }\n  }\n\n  /**\n   * \n   * @param transparency \n   */\n  setVideoTransparency (transparency: number) {\n    const trans = Math.max(Math.min(transparency,100), 0);\n    this.runtime.ioDevices.video.setPreviewGhost(trans);\n  }\n\n  /**\n   * \n   * @returns  \n   */\n  defineBlocks(): PoseHand[\"BlockDefinitions\"] {\n    \n    /**\n     * Sets up the extension's video\n     */\n    if (this.firstInstall) {\n      this.globalVideoState = VideoState.ON;\n      this.globalVideoTransparency = 50;\n      this.projectStarted();\n      this.firstInstall = false;\n      this._handModel = null;\n    }\n    \n    const fingerOptions = \n    [{text: \"thumb\", value: \"thumb\"}, {text: \"index finger\", value: \"indexFinger\"},\n    {text: \"middle finger\", value: \"middleFinger\"}, {text: \"ring finger\", value: \"ringFinger\"}, {text: \"pinky finger\", value: \"pinky\"}];\n\n    const partOfFingerOptions = [{text: \"tip\", value: 3}, {text: \"first knuckle\", value: 2},\n    {text: \"second knuckle\", value: 1}, {text: \"base\", value: 0}];\n\n    type DefineGoToHandPart = DefineBlock<PoseHand, Blocks[\"goToHandPartBlock\"]>;\n    const goToHandPartBlock: DefineGoToHandPart = () => ({\n      type: BlockType.Command,\n      args: [{type: ArgumentType.String, \n              options: {acceptsReporters: true, \n                        items: fingerOptions, \n                        handler: (part: string) => {\n                          console.log(part);\n                          if ([\"thumb\",\"indexFinger\",\"middleFinger\",\"ringFinger\",\"pinky\"].indexOf(part) != -1){\n                            return part;\n                          }\n                          else return \"thumb\";\n                        }\n                       }\n              }, \n             {type: ArgumentType.Number, \n              options: {acceptsReporters: true, \n                        items: partOfFingerOptions, \n                        handler: (part: number) => {\n                          return Math.max(Math.min(part, 3), 0)\n                        }\n                       }\n             }],\n      text: (handPart: string, fingerPart: number) => `go to ${handPart} ${fingerPart}`,\n      operation: (handPart, fingerPart, util) => { \n\n        // console.log(this.handPoseState);\n        \n        if (this.isConnected()) {\n          //console.log('last check');\n          const [x, y, z] = this.handPoseState[0].annotations[handPart][fingerPart];\n          const {x: scratchX, y: scratchY} = this.tfCoordsToScratch({x, y, z});\n          (util.target as any).setXY(scratchX, scratchY, false); \n        }\n      }\n    });\n\n    type DefineVideoToggle = DefineBlock<PoseHand, Blocks[\"videoToggleBlock\"]>;\n    const videoToggleBlock: DefineVideoToggle = () => ({\n      type: BlockType.Command,\n      arg: {type: ArgumentType.Number, \n            options: {acceptsReporters: true, \n                      items: [{text: 'off', value: 0}, {text: 'on', value: 1}, {text: 'on and flipped', value: 2}],\n                      handler: (x: number) => {\n                        return Math.min(Math.max(x, 0), 2);\n                      }\n                     }\n           },\n      text: (state: number) => `turn video ${state}`,\n      operation: (state) => {\n        this.videoToggle(state);\n      }\n    });\n\n    type DefineSetVideoTransparency = DefineBlock<PoseHand, Blocks[\"setVideoTransparencyBlock\"]>;\n    const setVideoTransparencyBlock: DefineSetVideoTransparency = () => ({\n      type: BlockType.Command,\n      arg: {type: ArgumentType.Number, defaultValue: 50},\n      text: (transparency) => `set video transparency to ${transparency}`,\n      operation: (transparency) => {\n        this.setVideoTransparency(transparency);\n      }\n    });\n\n    return {\n      goToHandPartBlock,\n      videoToggleBlock,\n      setVideoTransparencyBlock\n    }\n  }\n}\n\n\n\n"],"names":["poseprg95grphand","exports","$common","StageLayering","BACKGROUND_LAYER","VIDEO_LAYER","PEN_LAYER","SPRITE_LAYER","LAYER_GROUPS","Video","constructor","runtime","this","provider","_skinId","_drawable","_ghost","_forceTransparentPreview","FORMAT_IMAGE_DATA","FORMAT_CANVAS","DIMENSIONS","ORDER","setProvider","enableVideo","then","_setupPreview","disableVideo","_disablePreview","getFrame","dimensions","mirror","format","cacheTimeout","_frameCacheTimeout","setPreviewGhost","ghost","renderer","updateDrawableEffect","updateBitmapSkin","ImageData","updateDrawableVisible","_renderPreviewFrame","createBitmapSkin","createDrawable","updateDrawableSkinId","clearTimeout","_renderPreviewTimeout","setTimeout","currentStepTime","imageData","requestRedraw","videoReady","postData","forceTransparentPreview","video","t","e","n","Object","setPrototypeOf","__proto__","Array","hasOwnProperty","r","prototype","create","Promise","o","a","i","u","next","s","throw","done","value","apply","label","sent","trys","ops","return","Symbol","iterator","TypeError","call","pop","length","push","global","flags","flagRegistry","urlFlags","populateURLFlags","setPlatform","platform","console","warn","platformName","registerFlag","evaluationFn","setHook","set","get","evaluateFlag","getNumber","getBool","getFlags","defineProperty","enumerable","configurable","Error","setFlags","assign","reset","location","search","replace","arguments","join","tfjsflags","split","forEach","toLowerCase","decodeURIComponent","Map","c","l","m","h","f","entries","d","kernelName","backendName","has","p","y","Math","random","x","max","min","b","w","C","E","S","R","I","isArray","V","k","A","T","tanh","exp","D","ceil","sqrt","N","repeat","F","_","slice","O","map","concat","every","M","sort","newShape","keptDims","B","Float32Array","Int32Array","Uint8Array","P","L","isNaN","isFinite","W","U","z","G","H","String","q","K","j","X","Y","$","Q","round","J","reduce","Z","tt","et","now","nt","Number","isInteger","rt","encode","ot","decode","at","it","floor","st","freeze","shuffle","clamp","nearestLargerEven","sum","randUniform","distSquared","assert","assertShapesMatch","assertNonNull","flatten","sizeFromShape","isScalarShape","arraysEqual","isInt","sizeToSquarishShape","createShuffledIndices","Uint32Array","rightPad","repeatedTry","inferFromImplicitShape","parseAxisParam","squeezeShape","getTypedArrayFromDType","getArrayFromDType","checkConversionForErrors","isValidDtype","hasEncodingLoss","isTypedArray","bytesPerElement","bytesFromStringArray","isString","isBoolean","isNumber","inferDtype","isFunction","nearestDivisor","computeStrides","toTypedArray","toNestedArray","makeOnesTypedArray","makeZerosTypedArray","assertNonNegativeIntegerDimensions","fetch","encodeString","decodeString","locToIndex","indexToLoc","ut","backendTimer","logger","ct","profileKernel","time","data","dtype","getExtraProfileInfo","logKernelProfile","kernelMs","error","rank","size","shape","toString","log","pt","parseFloat","toFixed","vt","gt","mt","values","strides","toTensor","yt","makeTensor","xt","bt","wt","kept","isDisposedInternal","dataId","id","rankType","throwIfDisposed","as1D","asScalar","reshape","as2D","as3D","as4D","as5D","asType","cast","buffer","bufferSync","dataSync","array","arraySync","read","readSync","bytes","dispose","isDisposed","disposeTensor","toFloat","toInt","toBool","print","reshapeAs","expandDims","cumsum","squeeze","clone","fill","from","v","g","dt","gather","matMul","dot","norm","reverse","stack","unstack","batchNormalization","batchNorm","all","any","logSumExp","prod","mean","argMin","argMax","addStrict","atan2","sub","subStrict","pow","powStrict","mul","mulStrict","floorDiv","divStrict","minimum","minimumStrict","maximum","maximumStrict","mod","modStrict","squaredDifferenceStrict","notEqual","notEqualStrict","less","lessStrict","equal","equalStrict","lessEqual","lessEqualStrict","greater","greaterStrict","greaterEqual","greaterEqualStrict","logicalAnd","logicalOr","logicalNot","logicalXor","where","neg","sign","isInf","expm1","log1p","rsqrt","square","reciprocal","abs","clipByValue","relu","relu6","elu","selu","leakyRelu","prelu","sigmoid","logSigmoid","softplus","zerosLike","onesLike","sin","cos","tan","asin","acos","atan","sinh","cosh","asinh","acosh","atanh","erf","step","softmax","logSoftmax","resizeBilinear","image","resizeNearestNeighbor","conv1d","conv2d","conv2dTranspose","depthwiseConv2D","depthwiseConv2d","separableConv2d","avgPool","maxPool","localResponseNormalization","pool","variable","makeVariable","unsortedSegmentSum","batchToSpaceND","spaceToBatchND","topk","stridedSlice","depthToSpace","fft","spectral","ifft","rfft","irfft","hasInstance","Ct","Et","Rt","It","kt","St","trainable","name","incRef","disposeVariable","Function","R0","R1","R2","R3","R4","R5","R6","float32","int32","bool","complex64","Ot","At","Tt","Dt","Nt","Ft","_t","add","Set","makeTypesMatch","assertTypesMatch","isTensorInList","some","getTensorsInContainer","Bt","registeredVariables","nextTapeNodeId","numBytes","numTensors","numStringTensors","numDataBuffers","gradientDepth","kernelDepth","scopeStack","numDataMovesStack","nextScopeId","tensorInfo","WeakMap","profiling","activeProfile","newBytes","newTensors","peakBytes","kernels","result","Pt","ENV","registry","registryFactory","pendingBackendInitId","state","ready","pendingBackendInit","backendInstance","getSortedBackends","initializeBackend","success","setBackend","initializeBackendsAndReturnBest","asyncInit","backendNames","keys","findBackend","findBackendFactory","factory","registerBackend","priority","setupRegisteredKernels","profiler","setupFunc","disposeRegisteredKernels","disposeFunc","resolve","catch","message","removeBackend","moveData","backend","disposeData","move","shouldCheckForMemLeaks","tidy","scopedRun","startScope","endScope","nextTensorId","nextVariableId","makeTensorFromDataId","addTapeNode","activeScope","runKernel","runKernelFunc","checkKernelForMemLeak","numDataIds","isTapeOn","kernelFunc","inputs","attrs","getTensorsForGradient","filter","saveTensorsForBackwardMode","keep","bytesAdded","totalBytesSnapshot","tensorsAdded","totalTensorsSnapshot","inputShapes","outputShapes","inputsToSave","outputsToSave","saveAllInputs","write","refCount","track","delete","disposeVariables","memory","unreliable","reasons","profile","outputs","saved","gradFunc","gradient","activeTape","startTape","endTape","scopeId","gradients","Lt","grads","customGrad","wallMs","window","process","self","_tfengine","Wt","document","WorkerGlobalScope","Ut","versions","node","navigator","userAgent","test","vendor","Vt","zt","Gt","Ht","qt","alpha","antialias","premultipliedAlpha","preserveDrawingBuffer","depth","stencil","failIfMajorPerformanceCaveat","Kt","jt","OffscreenCanvas","createElement","addEventListener","preventDefault","getContext","isContextLost","disable","DEPTH_TEST","STENCIL_TEST","BLEND","DITHER","POLYGON_OFFSET_FILL","SAMPLE_COVERAGE","enable","SCISSOR_TEST","CULL_FACE","cullFace","BACK","Xt","Yt","$t","Qt","R32F","R16F","RGBA16F","RGBA32F","RED","HALF_FLOAT","FLOAT","RGBA","HALF_FLOAT_OES","internalFormatFloat","internalFormatHalfFloat","internalFormatPackedHalfFloat","internalFormatPackedFloat","textureFormatFloat","downloadTextureFormat","downloadUnpackNumChannels","defaultNumChannels","textureTypeHalfFloat","textureTypeFloat","Jt","getError","NO_ERROR","ne","DENSE","SHARED_BATCH","RENDER","UPLOAD","PIXELS","DOWNLOAD","UNPACKED_FLOAT16","UNPACKED_FLOAT32","PACKED_4X1_UNSIGNED_BYTE","PACKED_2X2_FLOAT32","PACKED_2X2_FLOAT16","ee","INVALID_ENUM","INVALID_VALUE","INVALID_OPERATION","INVALID_FRAMEBUFFER_OPERATION","OUT_OF_MEMORY","CONTEXT_LOST_WEBGL","re","ke","getExtension","oe","createShader","VERTEX_SHADER","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","ae","FRAGMENT_SHADER","ue","exec","ie","se","ce","createProgram","le","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","he","validateProgram","VALIDATE_STATUS","fe","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","STATIC_DRAW","de","ELEMENT_ARRAY_BUFFER","pe","createTexture","ve","ge","createFramebuffer","me","getAttribLocation","vertexAttribPointer","enableVertexAttribArray","ye","Se","activeTexture","TEXTURE0","bindTexture","TEXTURE_2D","xe","getUniformLocation","be","we","uniform1i","Ce","bindFramebuffer","FRAMEBUFFER","framebufferTexture2D","COLOR_ATTACHMENT0","Ee","Re","checkFramebufferStatus","FRAMEBUFFER_COMPLETE","Ie","FRAMEBUFFER_INCOMPLETE_ATTACHMENT","FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT","FRAMEBUFFER_INCOMPLETE_DIMENSIONS","FRAMEBUFFER_UNSUPPORTED","MAX_COMBINED_TEXTURE_IMAGE_UNITS","Ae","Te","De","Ne","Fe","_e","Oe","getParameter","MAX_TEXTURE_SIZE","Me","MAX_TEXTURE_IMAGE_UNITS","Be","Pe","Le","We","Ve","Ue","texImage2D","deleteTexture","deleteFramebuffer","ze","fenceSync","Ge","callAndCheck","canBeRepresented","getWebGLErrorMessage","getExtensionOrThrow","createVertexShader","createFragmentShader","createStaticVertexBuffer","createStaticIndexBuffer","getNumChannels","validateTextureSize","bindVertexBufferToProgramAttribute","bindTextureUnit","unbindTextureUnit","getProgramUniformLocationOrThrow","getProgramUniformLocation","bindTextureToProgramUniformSampler","bindCanvasToFramebuffer","viewport","canvas","width","height","scissor","bindColorTextureToFramebuffer","unbindColorTextureFromFramebuffer","validateFramebuffer","getFramebufferErrorMessage","getBatchDim","getRowsCols","getShapeAs3D","getTextureShapeFromLogicalShape","isReshapeFree","getWebGLMaxTextureSize","resetMaxTextureSize","resetMaxTexturesInShader","getMaxTexturesInShader","getWebGLDisjointQueryTimerVersion","hasExtension","isWebGLVersionEnabled","isCapableOfRenderingToFloatTexture","isDownloadFloatTextureEnabled","isWebGLFenceEnabled","He","Xe","Ze","tn","hn","dn","pn","vn","gn","indexOf","mn","yn","xn","bn","wn","Cn","En","Rn","In","kn","Sn","An","endsWith","substring","opera","substr","Tn","complex_","complex","$real","$imag","Dn","real_","real","$input","Nn","imag_","imag","Fn","_n","On","Mn","Bn","Pn","Ln","zn","Gn","Hn","qn","linspace","Kn","jn","onesLike_","Xn","zerosLike_","Yn","concat_","axis","tr","$n","concat1d_","Qn","concat2d_","Jn","concat3d_","Zn","concat4d_","split_","$x","er","rr","batchToSpaceND_","or","cast_","ar","cumsum_","transpose","permutedX","ir","depthToSpace_","sr","expandDims_","splice","ur","reshape_","cr","spaceToBatchND_","lr","squeeze_","hr","stack_","fr","unstack_","dr","pr","vr","gr","mr","yr","wr","Er","Sr","Ar","Tr","Dr","Nr","Or","add_","Mr","unshift","Br","Pr","Lr","abs_","complexAbs","Wr","acos_","Ur","acosh_","Vr","asin_","zr","asinh_","Gr","atan_","div","Hr","atanh_","qr","ceil_","Kr","clipByValue_","clip","jr","cos_","Xr","cosh_","Yr","erf_","PI","$r","exp_","Qr","expm1_","Jr","floor_","Zr","log_","to","log1p_","eo","logSigmoid_","no","neg_","ro","reciprocal_","oo","round_","ao","rsqrt_","io","sigmoid_","so","sign_","uo","isNaN_","co","isInf_","lo","isFinite_","ho","sin_","fo","sinh_","po","softplus_","vo","sqrt_","go","step_","mo","tan_","yo","tanh_","xo","addStrict_","bo","atan2_","$a","$b","wo","divStrict_","Co","floorDiv_","Eo","maximum_","Ro","maximumStrict_","Io","minimum_","ko","minimumStrict_","So","mod_","Ao","modStrict_","To","mul_","multiply","Do","mulStrict_","No","pow_","Fo","powStrict_","_o","squaredDifferenceStrict_","squaredDifference","Oo","sub_","subtract","Mo","subStrict_","Bo","div_","realDivide","Po","prepareAndValidate","Uo","Vo","zo","Go","sliceRank","numUpdates","sliceSize","outputSize","qo","Ko","jo","Xo","MIN_SAFE_INTEGER","MAX_SAFE_INTEGER","Yo","$o","Qo","oa","validateUpdateShape","validateInput","calculateShapes","assertParamsValid","maskToAxes","computeOutShape","startForAxis","stopForAxis","isSliceContinous","computeFlatOffset","ia","softmax_","logits","dim","sa","logSoftmax_","ua","transpose_","perm","ca","dataMover","dataIdsCount","la","ha","floatPrecision","epsilon","batchMatMul","fusedBatchMatMul","transposeA","transposeB","bias","activation","preluActivationWeights","addN","select","eluDer","int","fusedConv2d","input","convInfo","conv2dDerInput","conv2dDerFilter","fusedDepthwiseConv2D","depthwiseConv2DDerInput","depthwiseConv2DDerFilter","conv3d","conv3dDerInput","conv3dDerFilter","maxPoolBackprop","avgPoolBackprop","avgPool3d","avgPool3dBackprop","maxPool3d","maxPool3dBackprop","tile","pad","gatherND","scatterND","resizeBilinearBackprop","resizeNearestNeighborBackprop","localResponseNormalization4D","LRNGrad","multinomial","oneHot","nonMaxSuppression","cropAndResize","sparseToDense","diag","fa","ma","pa","da","ya","va","xa","top","bottom","left","right","type","ga","ba","padInfo","outHeight","outWidth","batchSize","dataFormat","inHeight","inWidth","inChannels","outChannels","strideHeight","strideWidth","filterHeight","filterWidth","effectiveFilterHeight","effectiveFilterWidth","dilationHeight","dilationWidth","inShape","outShape","filterShape","front","back","outDepth","inDepth","strideDepth","filterDepth","effectiveFilterDepth","dilationDepth","wa","Ca","Ea","Ra","Ia","ka","Aa","Ta","Da","Na","Fa","_a","Oa","Ba","selectedIndices","Ma","numValidOutputs","selectedScores","score","boxIndex","suppressBeginIndex","Wa","Pa","La","subarray","Ua","Va","za","index","Ga","castTensor","reshapeTensor","linspaceImpl","upcastType","axesAreInnerMostDims","combineLocations","computeOutAndReduceShapes","expandShapeToKeepDim","assertAxesAreInnerMostDims","getAxesPermutation","getUndoAxesPermutation","getInnerMostAxes","getBroadcastDims","getReductionAxes","assertAndGetBroadcastShape","assertParamsConsistent","computePool2DInfo","computePool3DInfo","computeConv2DInfo","computeConv3DInfo","computeDefaultPad","tupleValuesAreOne","eitherStridesOrDilationsAreOne","convertConv2DDataFormat","PARALLELIZE_THRESHOLD","computeOptimalWindowSize","Ha","outputShape","variableNames","userCode","qa","packedInputs","packedOutput","Ka","windowSize","inSize","ja","Xa","Ya","version","attribute","varyingVs","varyingFs","texture2D","output","defineOutput","defineSpecialNaN","defineSpecialInf","defineRound","Qa","Ja","Za","shapeInfo","logicalShape","isUniform","ei","ti","charAt","toUpperCase","ui","texShape","flatOffset","ni","ri","oi","isPacked","ai","ii","si","ci","li","JSON","parse","stringify","hi","fi","di","pi","vi","yi","xi","bi","wi","Ei","Ri","ki","Si","supportsBroadcasting","Ai","getCustomSetupFunc","minLoc","getUniformLocationNoThrow","maxLoc","gl","uniform1f","Ti","Di","Ni","Fi","_i","Oi","Mi","Bi","Pi","Li","Wi","Ui","Vi","zi","Gi","Hi","qi","Ki","ji","outPackingScheme","Xi","Yi","blockSize","getHeightCoordString","getWidthCoordString","getDepthCoordString","getOutputDepthSize","getInputSamplingString","$i","Qi","outTexUsage","Ji","Zi","ts","rs","os","valueLoc","as","is","sliceDim","ss","us","cs","Uint16Array","ls","texParameteri","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","TEXTURE_MIN_FILTER","NEAREST","TEXTURE_MAG_FILTER","hs","fs","ds","UNSIGNED_BYTE","ps","vs","gs","ms","ys","xs","PIXEL_PACK_BUFFER","STREAM_READ","readPixels","bs","getBufferSubData","ws","Cs","Es","Rs","createVertexBuffer","createIndexBuffer","createFloat32MatrixTexture","createFloat16MatrixTexture","createUnsignedBytesMatrixTexture","createPackedMatrixTexture","createFloat16PackedMatrixTexture","bindVertexProgramAttributeStreams","uploadDenseMatrixToTexture","uploadPixelDataToTexture","createBufferFromOutputTexture","downloadFloat32MatrixFromBuffer","downloadByteEncodedFloatMatrixFromOutputTexture","downloadPackedMatrixFromBuffer","downloadMatrixFromPackedOutputTexture","Is","outputTexture","program","disposed","vertexAttrsAreBound","itemsToPoll","textureFloatExtension","debug","textureHalfFloatExtension","colorBufferFloatExtension","colorBufferHalfFloatExtension","vertexBuffer","indexBuffer","framebuffer","textureConfig","finish","deleteBuffer","deleteMatrixTexture","downloadMatrixDriver","createBufferFromTexture","bindTextureToFrameBuffer","unbindTextureToFrameBuffer","createAndWaitForFence","createFence","pollFence","SYNC_GPU_COMMANDS_COMPLETE","flush","clientWaitSync","ALREADY_SIGNALED","CONDITION_SATISFIED","beginQuery","endQuery","isQueryAvailable","query","isFencePassed","downloadMatrixFromPackedTexture","attachShader","setProgram","deleteProgram","useProgram","getAttributeLocation","setInputMatrixTexture","throwIfNoProgram","setOutputMatrixTexture","setOutputMatrixTextureDriver","setOutputPackedMatrixTexture","setOutputMatrixWriteRegion","setOutputMatrixWriteRegionDriver","setOutputPackedMatrixWriteRegion","debugValidate","executeProgram","drawElements","TRIANGLES","UNSIGNED_SHORT","blockUntilAllProgramsCompleted","getQueryTimerExtension","disjointQueryTimerExtension","getQueryTimerExtensionWebGL2","getQueryTimerExtensionWebGL1","createQuery","TIME_ELAPSED_EXT","createQueryEXT","beginQueryEXT","endQueryEXT","waitForQueryAndGetTime","getQueryTime","getQueryParameter","QUERY_RESULT","getQueryObjectEXT","QUERY_RESULT_EXT","QUERY_RESULT_AVAILABLE","disjoint","GPU_DISJOINT_EXT","QUERY_RESULT_AVAILABLE_EXT","addItemToPoll","pollItems","isDoneFn","resolveFn","ks","texData","Ss","As","Ts","depthRadius","beta","Ds","Ns","Fs","_s","Os","seedLoc","Ms","Bs","Ps","Ls","Ws","Us","Vs","zs","Gs","Hs","qs","Ks","js","Xs","Ys","$s","Qs","numSegments","Js","Zs","tu","startLoc","uniform1iv","eu","nu","ru","gpgpu","numUsedTextures","numFreeTextures","freeTextures","logEnabled","usedTextures","acquireTexture","ou","au","shift","releaseTexture","getNumUsedTextures","getNumFreeTextures","iu","su","uu","cu","lu","fu","du","pu","vu","gu","mu","yu","xu","bu","wu","Cu","Eu","Ru","Iu","ku","Su","Au","Tu","Du","Fu","_u","Ou","Mu","Bu","Pu","Lu","Uu","pendingRead","pendingDisposal","WeakSet","dataRefCount","numBytesInGPU","uploadWaitMs","downloadWaitMs","warnedAboutMemory","pendingDeletes","binaryCache","gpgpuCreatedLocally","textureManager","numMBBeforeWarning","screen","devicePixelRatio","cpuBackend","checkNumericalProblems","usage","complexTensors","runWebGLProgram","convertAndCacheOnCPU","activeTimers","getValuesFromTexture","texture","programTimersStack","startTimer","startMs","endMs","endTimer","releaseGPUData","origDataId","computeBytes","getTexture","uploadToGPU","getDataInfo","getCPUBackend","shouldExecuteOnCPU","getGPGPUContext","makeOutput","compileAndRun","shallowSlice","packedUnaryOp","makeComplexComponentTensorInfo","packedBinaryOp","argReduce","argReducePacked","segOpCompute","argMinMaxReduce","complexSeparableBinaryOp","conv2dByMatMul","conv2dWithIm2Row","packedReshape","fftImpl","makeTensorInfo","unpackTensor","packTensor","uniformValues","getAndSaveBinary","source","webGLProgram","uniformLocations","inShapeInfos","outShapeInfo","infLoc","nanLoc","NaN","uniform1fv","getTextureManager","HTMLCanvasElement","remove","floatPrecisionValue","Vu","zu","charCodeAt","s0","s1","s2","double","quick","alea","Gu","xor128","Hu","xorwow","qu","Date","xorshift7","Ku","xor4096","ju","tychei","Xu","entropy","randomBytes","crypto","msCrypto","getRandomValues","plugins","pass","fromCharCode","require","Yu","$u","addN_","Qu","Ju","Zu","scale","offset","variance","varianceEpsilon","tc","ec","batchNormalization_","nc","batchNorm_","rc","oc","batchNormalization2d_","ac","batchNorm2d_","ic","sc","batchNormalization3d_","uc","batchNorm3d_","cc","lc","batchNormalization4d_","hc","batchNorm4d_","fc","broadcastTo_","inputShape","dc","clone_","pc","logicalAnd_","vc","logicalNot_","gc","logicalOr_","mc","logicalXor_","yc","where_","$condition","xc","bc","divNoNan_","wc","tile_","reps","Cc","eye_","Ec","multinomial_","logits2D","Rc","oneHot_","indices","onValue","offValue","Ic","pad_","paddings","constantValue","kc","pad1d_","Sc","pad2d_","Ac","pad3d_","Tc","pad4d_","Dc","rand_","_c","Oc","Mc","TEST_EPSILON_FLOAT16","expectArraysClose","testEpsilon","expectPromiseToFail","fail","expectArraysEqual","expectNumbersClose","expectValuesInRange","expectArrayBuffersEqual","expect","toEqual","Pc","stdDev","nextVal","truncated","upper","lower","nextValue","isValidTruncated","convertValue","Lc","randu","randn","Wc","canReturnFloat","range","Uc","randomGamma_","Vc","randomNormal_","zc","randomUniform_","Gc","square_","Hc","squaredDifference_","qc","truncatedNormal_","Kc","equal_","jc","equalStrict_","Xc","greater_","Yc","greaterEqual_","$c","greaterEqualStrict_","Qc","greaterStrict_","Jc","less_","Zc","lessEqual_","tl","lessEqualStrict_","el","lessStrict_","nl","notEqual_","rl","notEqualStrict_","ol","al","il","gather_","dimSize","sl","unsortedSegmentSum_","cl","dy4D","dl","vl","ll","hl","dy5D","fl","conv1d_","conv2d_","pl","conv3d_","$filter","x5D","conv2dDerFilter_","x4D","conv2dDerInput_","ml","depthwiseConv2d_","yl","xl","depthwiseConv2dDerInput_","depthwiseConv2dDerFilter_","bl","separableConv2d_","wl","conv2dTranspose_","Cl","conv3dTranspose_","El","matMul_","Rl","dot_","Il","outerProduct_","kl","reverse_","Sl","reverse1d_","Al","reverse2d_","Tl","reverse3d_","Dl","reverse4d_","Nl","$dy","Fl","input4D","_l","maxPool_","Ol","avgPool_","Ml","pool_","Bl","maxPool3d_","input5D","Pl","avgPool3d_","Ll","maxPoolWithArgmax_","filterSize","includeBatchInIndex","indexes","Wl","slice_","begin","Ul","slice1d_","Vl","slice2d_","zl","slice3d_","Gl","slice4d_","Hl","ql","all_","Kl","any_","jl","argMax_","Xl","argMin_","Yl","logSumExp_","$l","max_","axes","Ql","mean_","Jl","min_","Zl","moments_","th","sum_","eh","prod_","nh","elu_","dy","rh","leakyRelu_","oh","prelu_","ah","relu_","ih","relu6_","sh","selu_","uh","localResponseNormalization_","ch","norm_","lh","basicLSTMCell_","hh","multiRNNCell_","fh","movingAverage_","dh","stridedSlice_","ph","topk_","vh","scatterND_","updates","gh","fft_","mh","ifft_","yh","rfft_","xh","irfft_","bh","wh","sparseToDense_","$sparseIndices","$sparseValues","$defaultValue","Ch","gatherND_","Eh","diag_","Rh","dropout_","Ih","Nh","kh","hannWindow_","Sh","hammingWindow_","Ah","frame_","Th","stft_","Dh","hannWindow","hammingWindow","frame","stft","NONE","MEAN","SUM","SUM_BY_NONZERO_WEIGHTS","_h","absoluteDifference_","Oh","computeWeightedLoss_","Mh","cosineDistance_","Bh","hingeLoss_","Ph","huberLoss_","Lh","logLoss_","Wh","meanSquaredError_","Uh","sigmoidCrossEntropy_","Vh","softmaxCrossEntropy_","zh","Reduction","absoluteDifference","computeWeightedLoss","cosineDistance","hingeLoss","huberLoss","logLoss","meanSquaredError","sigmoidCrossEntropy","softmaxCrossEntropy","Gh","Hh","bandPart_","qh","gramSchmidt_","Kh","qr_","jh","bandPart","gramSchmidt","Xh","NEGATIVE_INFINITY","maxOutputSize","iouThreshold","scoreThreshold","softNmsSigma","Yh","resizeBilinear_","alignCorners","newHeight","newWidth","$h","resizeNearestNeighbor_","batchImages","Qh","nonMaxSuppression_","boxes","scores","Zh","nonMaxSuppressionWithScore_","ef","cropAndResize_","images","boxInd","method","extrapolationValue","cropSize","nf","nonMaxSuppressionAsync","nonMaxSuppressionWithScore","nonMaxSuppressionWithScoreAsync","rf","of","af","sf","uf","fusedMatMul_","cf","fusedConv2d_","dilations","dimRoundingMode","lf","fusedDepthwiseConv2d_","hf","ff","linalg","losses","fused","signal","batchNorm2d","batchNormalization2d","batchNorm3d","batchNormalization3d","batchNorm4d","batchNormalization4d","broadcastTo","divNoNan","eye","pad1d","pad2d","pad3d","pad4d","rand","randomGamma","randomNormal","randomUniform","truncatedNormal","conv3dTranspose","op","booleanMaskAsync","concat1d","concat2d","concat3d","concat4d","outerProduct","reverse1d","reverse2d","reverse3d","reverse4d","maxPoolWithArgmax","slice1d","slice2d","slice3d","slice4d","moments","whereAsync","setdiff1dAsync","ones","scalar","tensor","tensor1d","tensor2d","tensor3d","tensor4d","tensor5d","tensor6d","zeros","basicLSTMCell","multiRNNCell","movingAverage","dropout","inTopKAsync","df","pf","POSITIVE_INFINITY","vf","gf","linear","mf","firstUse","broadcastedBinaryComplexOp","broadcastedBinaryOp","hypot","trunc","pool3d","maxPool3dPositions","fftBatch","isExponentOf2","fftRadix2","fourierTransformByMatmul","scatter","yf","xf","bf","wf","Cf","Ef","Rf","If","kf","Sf","Af","Tf","Df","Nf","Ff","_f","Of","Mf","pixels","numChannels","HTMLVideoElement","HTMLImageElement","videoWidth","videoHeight","drawImage","Bf","Pf","Lf","performance","textEncoder","TextEncoder","TextDecoder","Wf","Vf","util","hrtime","zf","uint16","uint8","Hf","quantization","qf","byteLength","Kf","Buffer","Blob","atob","btoa","jf","Xf","Yf","trim","$f","modelTopology","ArrayBuffer","dateSaved","modelTopologyType","modelTopologyBytes","weightSpecsBytes","weightSpecs","weightDataBytes","weightData","Qf","saveRouters","loadRouters","getInstance","instance","registerSaveRouter","registerLoadRouter","getSaveHandlers","getHandlers","getLoadHandlers","Jf","Zf","managers","registerManager","getManager","getSchemes","td","scheme","path","ed","load","removeModel","save","modelArtifactsInfo","nd","rd","od","indexedDB","mozIndexedDB","webkitIndexedDB","msIndexedDB","shimIndexedDB","ad","createObjectStore","keyPath","modelPath","databaseAction","open","onupgradeneeded","onsuccess","transaction","objectStore","close","modelArtifacts","onerror","oncomplete","put","URL_SCHEME","sd","startsWith","ud","listModels","getAll","cd","ld","hd","fd","dd","pd","vd","gd","info","topology","modelMetadata","md","yd","localStorage","LS","setItem","generatedBy","convertedBy","userDefinedMetadata","removeItem","getItem","byteOffset","xd","bd","key","Rd","Id","modelTopologyFileName","weightDataFileName","URL","createObjectURL","paths","weights","weightsManifest","jsonAnchor","download","href","dispatchEvent","MouseEvent","weightDataAnchor","kd","files","FileReader","onload","target","checkManifestAndWeightFiles","readAsArrayBuffer","readAsText","Sd","Ad","fetchFunc","requestInit","isBinary","onProgress","arrayBuffer","Td","manifestEntry","groupOffset","sizeBytes","Dd","DEFAULT_METHOD","weightPathPrefix","body","FormData","append","ok","responses","status","json","loadWeights","lastIndexOf","URL_SCHEME_REGEX","Nd","match","Fd","_d","Pd","Od","Md","saveHandler","Bd","browserFiles","browserHTTPRequest","concatenateArrayBuffers","decodeWeights","encodeWeights","group","specs","fromMemory","trainingConfig","getModelArtifactsInfoForJSON","http","isHTTPScheme","weightsLoaderFactory","withSaveHandler","copyModel","moveModel","Ld","confusionMatrix_","confusionMatrix","Ud","fromPixels_","readyState","getImageData","Vd","toPixels","Uint8ClampedArray","putImageData","fromPixels","zd","getClassName","className","fromConfig","Gd","classNameMap","getMap","register","Hd","Serializable","SerializationMap","registerClass","gpgpu_util","webgl_util","forceHalfFloat","MathBackendWebGL","setWebGLContext","GPGPUContext","Xd","minimize","computeGradients","applyGradients","iterations_","incrementIterations","iterations","ra","saveIterations","getWeights","setWeights","extractIterations","Yd","learningRate","rho","accumulatedGrads","accumulatedUpdates","originalName","getConfig","$d","initialAccumulatorValue","Qd","beta1","beta2","accumulatedFirstMoment","accumulatedSecondMoment","accBeta1","accBeta2","Jd","decay","accumulatedWeightedInfNorm","iteration","Zd","setLearningRate","en","tp","momentum","useNesterov","accumulations","setMomentum","ep","accumulatedMeanSquares","accumulatedMoments","accumulatedMeanGrads","centered","requestAnimationFrame","setImmediate","DataType","SaverDef","__assign","__awaiter","__generator","DT_INVALID","DT_FLOAT","DT_DOUBLE","DT_INT32","DT_UINT8","DT_INT16","DT_INT8","DT_STRING","DT_COMPLEX64","DT_INT64","DT_BOOL","DT_QINT8","DT_QUINT8","DT_QINT32","DT_BFLOAT16","DT_FLOAT_REF","DT_DOUBLE_REF","DT_INT32_REF","DT_UINT8_REF","DT_INT16_REF","DT_INT8_REF","DT_STRING_REF","DT_COMPLEX64_REF","DT_INT64_REF","DT_BOOL_REF","DT_QINT8_REF","DT_QUINT8_REF","DT_QINT32_REF","DT_BFLOAT16_REF","LEGACY","V1","V2","CheckpointFormatVersion","CUSTOM_OPS","getRegisteredOp","getParamValue","inputParams","inputIndexStart","inputIndexEnd","getTensor","inputNames","attrParams","parseNodeName","currentContextIds","find","getNodeNameWithContextId","getNodeNameAndIndex","currentContextId","split$1","arithmetic","tfOpName","category","start","tfName","notSupported","end","basicMath","defaultValue","control","convolution","creation","dynamic","evaluation","graph","image$1","logical","matrices","normalization","reduction","sliceJoin","transformation","tfDeprecatedName","OperationMapper","opMappers","_instance","transformGraph","mapNode","mapSignatureEntries","children","signatureKey","nodes","placeholders","signature","attr","rawAttrs","getStringParam","getStringArrayParam","getNumberParam","getNumericArrayParam","getBoolParam","getBoolArrayParam","getTensorShapeParam","getTensorShapeArrayParam","getDtypeParam","getDtypeArrayParam","parseStringParam","env","decodeBase64","parseInt","parseDtypeParam","list","parseTensorShapeParam","unknownRank","NodeValueImpl","tensorMap","context","getInput","getAttr","TensorArray","maxSize","elementShape","identicalElementShapes","dynamicSize","clearAfterRead","tensors","closed_","nextId","clearAndClose","cleared","readMany","assertShapesMatchAllowUndefinedSize","written","writeMany","shapesEqualAllowUndefinedSize","executeOp$16","executeOp","executeOp$1","enterFrame","exitFrame","nextIteration","addTensorArray","getTensorArray","executeOp$2","executeOp$3","executeOp$4","executeOp$5","executeOp$6","executeOp$8","executeOp$7","executeOp$9","executeOp$10","executeOp$11","executeOp$12","executeOp$13","executeOp$14","executeOp$15","customExecutor","ExecutionContext","weightMap","tensorArrayMap","rootContext","frameName","iterationId","contexts","lastId","generateCurrentContextIds","newFrame","_currentContextIds","contextIdforContexts","getWeight","getExecutionSubgraph","isControlFlow","isDynamicShape","usedNodes","missingInputs","dynamicNode","syncInputs","CONTROL_FLOW_OPS","DYNAMIC_SHAPE_OPS","GraphExecutor","compiledMap","_weightMap","SEPERATOR","_outputs","_inputs","_signature","weightIds","getCompilationKey","compile","getNodesInTopologicalOrder","execute","mapInputs","checkInputs","checkInputShapeAndType","mapOutputs","checkOutputs","getFrozenTensorIds","checkTensorForDisposal","getTensorsForCurrentContenxt","executeAsync","executeWithControlFlow","currentContext","processStack","processChildNodes","GraphModel","modelUrl","loadOptions","executor","inputNodes","outputNodes","findIOHandler","handler","artifacts","producer","minConsumer","Instance","convertTensorMapToTensorsMap","predict","normalizeInputs","Tensor","normalizeOutputs","loadGraphModel","fromTFHub","getBoxSize","endPoint","startPoint","getBoxCenter","enlargeBox","palmLandmarks","squarifyBox","shiftBox","HandDetector","model","anchors","x_center","y_center","anchorsTensor","inputSizeTensor","doubleInputSizeTensor","normalizeBoxes","normalizeLandmarks","getBoundingBoxes","estimateHandBounds","scaleBoxCoordinates","MESH_ANNOTATIONS","thumb","indexFinger","middleFinger","ringFinger","pinky","palmBase","computeRotation","normalizeRadians","buildTranslationMatrix","getColumnFrom2DArr","multiplyTransformMatrices","buildRotationMatrix","rotatePoint","PALM_BOX_SHIFT_VECTOR","HAND_BOX_SHIFT_VECTOR","PALM_LANDMARK_IDS","HandPipeline","regionsOfInterest","runsWithoutHandDetector","boundingBoxDetector","meshDetector","maxContinuousChecks","detectionConfidence","meshWidth","meshHeight","maxHandsNumber","getBoxForPalmLandmarks","calculateLandmarksBoundingBox","getBoxForHandLandmarks","transformRawCoords","invertTransformMatrix","async","shouldUpdateRegionsOfInterest","updateRegionsOfInterest","rotate$1","rotate","cutBoxFromImageAndResize","landmarks","handInViewConfidence","boundingBox","topLeft","bottomRight","loadHandDetectorModel","loadHandPoseModel","loadAnchors","HandPose","pipeline","static","getInputTensorDimensions","browser","estimateHand","flipHandHorizontal","annotations","VideoState","PoseHand","Extension","internal_getCodeGenArgs","blockIconURI","init","firstInstall","ioDevices","on","RuntimeEvent","ProjectLoaded","projectStarted","bind","ProjectRunStart","_loop","tfCoordsToScratch","setVideoTransparency","globalVideoTransparency","videoToggle","globalVideoState","isConnected","handPoseState","estimateHandPoseOnImage","estimateThrottleTimeout","imageElement","handModel","getLoadedHandModel","estimateHands","flipHorizontal","_handModel","handpose.load","transparency","trans","defineBlocks","fingerOptions","text","partOfFingerOptions","goToHandPartBlock","BlockType","Command","args","ArgumentType","options","acceptsReporters","items","part","handPart","fingerPart","operation","scratchX","scratchY","setXY","videoToggleBlock","arg","setVideoTransparencyBlock","ExtensionFramework"],"mappings":"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"}