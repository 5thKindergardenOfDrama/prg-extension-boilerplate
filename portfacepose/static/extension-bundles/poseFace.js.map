{"version":3,"file":"poseFace.js","sources":["../../../../extensions/src/poseFace/index.ts"],"sourcesContent":["import { ArgumentType, BlockType, Extension, Block, DefineBlock, Environment, ExtensionMenuDisplayDetails } from \"$common\";\n\n\n/**\n * States what the video sensing activity can be set to.\n */\nconst VideoState = {\n  /** Video turned off. */\n  OFF: 0,\n\n  /** Video turned on with default y axis mirroring. */\n  ON: 1,\n\n  /** Video turned on without default y axis mirroring. */\n  ON_FLIPPED: 2\n} as const;\n\n/**\n * Contains details about the Face Sensing extension\n */\ntype Details = {\n  name: \"Face Sensing\",\n  description: \"Sense face movement with the camera.\",\n  iconURL: \"pose-face.png\",\n  insetIconURL: \"pose-face-small.svg\"\n};\n\n/**\n * Contains descriptions of the blocks of the Block Sensing extension\n */\ntype Blocks = {\n  goToFacePartCommand(facePart: number): void;\n  whenExpressionDetectedHat(expression: string): boolean;\n  amountOfExpressionDetectedReport(expression: string): number;\n  isExpressionReport(expression: string): boolean;\n  whenFeelingDetectedHat(feeling: string): boolean;\n  levelOfFeelingReport(feeling: string): number;\n  isFeelingReport(feeling: string): boolean;\n  // these video blocks are present in a few different extensions, perhaps making a file just for these?\n  videoToggleBlock(state: number): void;\n  setVideoTransparencyBlock(transparency: number): void;\n}\n\n\nexport default class PoseFace extends Extension<Details, Blocks> {\n\n  /**\n   * The current video state\n   * @type {number}\n   */\n  globalVideoState: number;\n\n  /**\n   * The current transparency of the video\n   * @type {number}\n   */\n  globalVideoTransparency: number;\n\n\n  init(env: Environment) {\n\n  }\n\n\n  /**\n   * Turns the video camera off/on/on and flipped. This is called in the operation of videoToggleBlock\n   * @param state \n   */\n  videoToggle(state: number) {\n    if (state === VideoState.OFF) return this.runtime.ioDevices.video.disableVideo();\n\n    this.runtime.ioDevices.video.enableVideo();\n    // Mirror if state is ON. Do not mirror if state is ON_FLIPPED.\n    this.runtime.ioDevices.video.mirror = (state === VideoState.ON);\n  }\n\n  /**\n   * Sets the video's transparency. This is called in the operation of setVideoTransparencyBlock\n   * @param transparency \n   */\n  setVideoTransparency(transparency: number) {\n    const trans = Math.max(Math.min(transparency, 100), 0);\n    this.runtime.ioDevices.video.setPreviewGhost(trans);\n  }\n\n  /**\n   * Sets up the default settings for the extension. Gives information related to each of the extension's blocks\n   * @returns The extension's blocks\n   */\n  defineBlocks(): PoseFace[\"BlockDefinitions\"] {\n\n    /**\n     * Sets up the extension's default video settings\n     */\n    this.globalVideoState = VideoState.ON;\n    this.globalVideoTransparency = 50;\n    // this.projectStarted();\n    // this._bodyModel = null;\n\n\n    // FACE PART Block\n\n    const faceParts = [\n      { text: 'left ear', value: 0 },\n      { text: 'left chin', value: 1 },\n      { text: 'chin', value: 2 },\n      { text: 'right chin', value: 3 },\n      { text: 'right ear', value: 4 },\n      { text: 'left outer eyebrow', value: 5 },\n      { text: 'left eyebrow', value: 6 },\n      { text: 'left inner eyebrow', value: 7 },\n      { text: 'right inner eyebrow', value: 8 },\n      { text: 'right eyebrow', value: 9 },\n      { text: 'right outer eyebrow', value: 10 },\n      { text: 'nose bridge', value: 11 },\n      { text: 'nose tip', value: 12 },\n      { text: 'left nostril', value: 13 },\n      { text: 'nose tip', value: 14 },\n      { text: 'right nostril', value: 15 },\n      { text: 'left outer eye crease', value: 16 },\n      { text: 'left inner eye crease', value: 17 },\n      { text: 'right inner eye crease', value: 18 },\n      { text: 'right outer eye crease', value: 19 },\n      { text: 'left mouth crease', value: 20 },\n      { text: 'left upper lip point', value: 21 },\n      { text: 'upper lip', value: 22 },\n      { text: 'right upper lip point', value: 23 },\n      { text: 'right mouth crease', value: 24 },\n      { text: 'right lower lip point', value: 25 },\n      { text: 'lower lip', value: 26 },\n      { text: 'left lower lip point', value: 27 },\n      { text: 'upper lip bottom', value: 28 },\n      { text: 'lower lip top', value: 29 },\n      { text: 'left upper eyelid', value: 30 },\n      { text: 'left lower eyelid', value: 31 },\n      { text: 'right upper eyelid', value: 32 },\n      { text: 'right lower eyelid', value: 33 }\n    ];\n\n    type DefineGoToFacePart = DefineBlock<PoseFace, Blocks[\"goToFacePartCommand\"]>;\n    const goToFacePartCommand: DefineGoToFacePart = () => ({\n      type: BlockType.Command,\n      arg: {\n        type: ArgumentType.Number,\n        options: {\n          acceptsReporters: true,\n          items: faceParts,\n          handler: (part: number) => {\n            return Math.min(Math.max(part, 0), 33);\n          }\n        }\n      },\n      text: (part: number) => `go to ${part}`,\n      operation: (part: number, util) => {\n        console.log(part);\n\n      }\n    });\n\n    // EXPRESSION BLOCKS\n\n    const expressions = [\n      { text: 'smile', value: 'smile' },\n      { text: 'mouth open', value: 'mouthOpen' },\n      { text: 'eye closure', value: 'eyeClosure' },\n      { text: 'eyebrow raise', value: 'browRaise' },\n      { text: 'whistling', value: 'lipPucker' },\n      { text: 'eye widening', value: 'eyeWiden' },\n      // {text:'innerBrowRaise', value: 'innerBrowRaise'},\n      { text: 'eyebrow furrow', value: 'browFurrow' },\n      { text: 'nose wrinkle', value: 'noseWrinkle' },\n      { text: 'upper lip raise', value: 'upperLipRaise' },\n      { text: 'lip corner pull', value: 'lipCornerDepressor' },\n      { text: 'chin raise', value: 'chinRaise' },\n      // {text:'lip press', value:  'lipPress'},\n      // {text:'lip suck', value:  'lipSuck'},\n      { text: 'smirk', value: 'smirk' },\n      { text: 'attention', value: 'attention' },\n      { text: 'eyelid tighten', value: 'lidTighten' },\n      { text: 'jaw drop', value: 'jawDrop' },\n      { text: 'cheek dimple', value: 'dimpler' },\n      { text: 'cheek raise', value: 'cheekRaise' },\n      { text: 'lip stretch', value: 'lipStretch' }\n    ];\n    const handlerExpressions = expressions.map(expression => expression.value);\n\n    type DefineExpressDetect = DefineBlock<PoseFace, Blocks[\"whenExpressionDetectedHat\"]>;\n    const whenExpressionDetectedHat: DefineExpressDetect = () => ({\n      type: BlockType.Hat,\n      arg: {\n        type: ArgumentType.String,\n        options: {\n          acceptsReporters: true,\n          items: expressions,\n          handler: (expression: string) => {\n            return handlerExpressions.includes(expression) ? expression : 'smile';\n          }\n        }\n      },\n      text: (expression: string) => `when ${expression} detected`,\n      operation: (expression: string, util) => {\n        return true;\n      }\n    });\n\n    type DefineAmountExpress = DefineBlock<PoseFace, Blocks[\"amountOfExpressionDetectedReport\"]>;\n    const amountOfExpressionDetectedReport: DefineAmountExpress = () => ({\n      type: BlockType.Reporter,\n      arg: {\n        type: ArgumentType.String,\n        options: {\n          acceptsReporters: true,\n          items: expressions,\n          handler: (expression: string) => {\n            return handlerExpressions.includes(expression) ? expression : 'smile';\n          }\n        }\n      },\n      text: (expression: string) => `amount of ${expression}`,\n      operation: (expression: string, util) => {\n        return 0;\n      }\n    });\n\n    type DefineExpressReport = DefineBlock<PoseFace, Blocks[\"isExpressionReport\"]>;\n    const isExpressionReport: DefineExpressReport = () => ({\n      type: BlockType.Reporter,\n      arg: {\n        type: ArgumentType.String,\n        options: {\n          acceptsReporters: true,\n          items: expressions,\n          handler: (expression: string) => {\n            return handlerExpressions.includes(expression) ? expression : 'smile';\n          }\n        }\n      },\n      text: (expression: string) => `expressing ${expression}`,\n      operation: (expression: string, util) => {\n        return true;\n      }\n    });\n\n    // EMOTION BLOCKS\n\n    const emotions = [\n      { text: 'joyful', value: 'joy' },\n      { text: 'sad', value: 'sadness' },\n      { text: 'disgusted', value: 'disgust' },\n      { text: 'angry', value: 'anger' },\n      { text: 'fearful', value: 'fear' }\n    ];\n    const handlerEmotionsShort = emotions.map(emotion => emotion.value);\n\n    const emotions2 = [\n      { text: 'contempt', value: 'contempt' },\n      { text: 'surprise', value: 'surprise' },\n      { text: 'valence', value: 'valence' },\n      { text: 'engagement', value: 'engagement' }\n    ];\n    const allEmotionValues = emotions.concat(emotions2).map(emotion => emotion.value);\n\n    type DefineFeelingDetect = DefineBlock<PoseFace, Blocks[\"whenFeelingDetectedHat\"]>;\n    const whenFeelingDetectedHat: DefineFeelingDetect = () => ({\n      type: BlockType.Hat,\n      arg: {\n        type: ArgumentType.String,\n        options: {\n          acceptsReporters: true,\n          items: emotions,\n          handler: (emotion: string) => {\n            return handlerEmotionsShort.includes(emotion) ? emotion : 'joy';\n          }\n        }\n      },\n      text: (emotion: string) => `when ${emotion} feeling detected`,\n      operation: (emotion: string, util) => {\n        return true;\n      }\n    });\n\n    type DefineLevelFeeling = DefineBlock<PoseFace, Blocks[\"levelOfFeelingReport\"]>;\n    const levelOfFeelingReport: DefineLevelFeeling = () => ({\n      type: BlockType.Reporter,\n      arg: {\n        type: ArgumentType.String,\n        options: {\n          acceptsReporters: true,\n          items: allEmotionValues,\n          handler: (emotion: string) => {\n            return allEmotionValues.includes(emotion) ? emotion : 'joy';\n          }\n        }\n      },\n      text: (emotion: string) => `level of ${emotion}`,\n      operation: (emotion: string, util) => {\n        return 0;\n      }\n    });\n\n    type DefineIsFeeling = DefineBlock<PoseFace, Blocks[\"isFeelingReport\"]>;\n    const isFeelingReport: DefineIsFeeling = () => ({\n      type: BlockType.Reporter,\n      arg: {\n        type: ArgumentType.String,\n        options: {\n          acceptsReporters: true,\n          items: emotions,\n          handler: (emotion: string) => {\n            return handlerEmotionsShort.includes(emotion) ? emotion : 'joy';\n          }\n        }\n      },\n      text: (emotion: string) => `feeling ${emotion}`,\n      operation: (emotion: string, util) => {\n        return true;\n      }\n    });\n\n    // VIDEO BLOCKS\n\n    type DefineVideoToggle = DefineBlock<PoseFace, Blocks[\"videoToggleBlock\"]>;\n    const videoToggleBlock: DefineVideoToggle = () => ({\n      type: BlockType.Command,\n      arg: {\n        type: ArgumentType.Number,\n        options: {\n          acceptsReporters: true,\n          items: [{ text: 'off', value: VideoState.OFF }, { text: 'on', value: VideoState.ON }, { text: 'on and flipped', value: VideoState.ON_FLIPPED }],\n          handler: (video_state: number) => {\n            return Math.min(Math.max(video_state, VideoState.OFF), VideoState.ON_FLIPPED);\n          }\n        }\n      },\n      text: (video_state: number) => `turn video ${video_state}`,\n      operation: (video_state: number) => {\n        this.videoToggle(video_state);\n      }\n    });\n\n    type DefineSetVideoTransparency = DefineBlock<PoseFace, Blocks[\"setVideoTransparencyBlock\"]>;\n    const setVideoTransparencyBlock: DefineSetVideoTransparency = () => ({\n      type: BlockType.Command,\n      arg: { type: ArgumentType.Number, defaultValue: 50 },\n      text: (transparency: number) => `set video transparency to ${transparency}`,\n      operation: (transparency: number) => {\n        this.setVideoTransparency(transparency);\n      }\n    });\n\n    return {\n      goToFacePartCommand,\n      whenExpressionDetectedHat,\n      amountOfExpressionDetectedReport,\n      isExpressionReport,\n      whenFeelingDetectedHat,\n      levelOfFeelingReport,\n      isFeelingReport,\n      videoToggleBlock,\n      setVideoTransparencyBlock\n    }\n  }\n}\n"],"names":["poseFace","exports","$common","VideoState","PoseFace","Extension","internal_getCodeGenArgs","id","name","blockIconURI","init","env","videoToggle","state","this","runtime","ioDevices","video","disableVideo","enableVideo","mirror","setVideoTransparency","transparency","trans","Math","max","min","setPreviewGhost","defineBlocks","globalVideoState","globalVideoTransparency","faceParts","text","value","expressions","handlerExpressions","map","expression","emotions","handlerEmotionsShort","emotion","allEmotionValues","concat","goToFacePartCommand","type","BlockType","Command","arg","ArgumentType","Number","options","acceptsReporters","items","handler","part","operation","util","console","log","whenExpressionDetectedHat","Hat","String","includes","amountOfExpressionDetectedReport","Reporter","isExpressionReport","whenFeelingDetectedHat","levelOfFeelingReport","isFeelingReport","videoToggleBlock","video_state","setVideoTransparencyBlock","defaultValue"],"mappings":"AAGA,IAAAA,SAAA,SAAAC,EAAAC,GAAA,aAGA,MAAAC,EAEA,EAFAA,EAKA,EALAA,EAQA,EA8BA,MAAAC,UAAAC,EAAAA,UACAC,0BAAA,MAAA,CAAAC,GAAA,WAAAC,KAAA,eAAAC,aAAA,ysKAAA,CAgBAC,KAAAC,GAEA,CAOAC,YAAAC,GACA,GAAAA,IAAAV,EAAA,OAAAW,KAAAC,QAAAC,UAAAC,MAAAC,eAEAJ,KAAAC,QAAAC,UAAAC,MAAAE,cAEAL,KAAAC,QAAAC,UAAAC,MAAAG,OAAAP,IAAAV,CACA,CAMAkB,qBAAAC,GACA,MAAAC,EAAAC,KAAAC,IAAAD,KAAAE,IAAAJ,EAAA,KAAA,GACAR,KAAAC,QAAAC,UAAAC,MAAAU,gBAAAJ,EACA,CAMAK,eAKAd,KAAAe,iBAAA1B,EACAW,KAAAgB,wBAAA,GAOA,MAAAC,EAAA,CACA,CAAAC,KAAA,WAAAC,MAAA,GACA,CAAAD,KAAA,YAAAC,MAAA,GACA,CAAAD,KAAA,OAAAC,MAAA,GACA,CAAAD,KAAA,aAAAC,MAAA,GACA,CAAAD,KAAA,YAAAC,MAAA,GACA,CAAAD,KAAA,qBAAAC,MAAA,GACA,CAAAD,KAAA,eAAAC,MAAA,GACA,CAAAD,KAAA,qBAAAC,MAAA,GACA,CAAAD,KAAA,sBAAAC,MAAA,GACA,CAAAD,KAAA,gBAAAC,MAAA,GACA,CAAAD,KAAA,sBAAAC,MAAA,IACA,CAAAD,KAAA,cAAAC,MAAA,IACA,CAAAD,KAAA,WAAAC,MAAA,IACA,CAAAD,KAAA,eAAAC,MAAA,IACA,CAAAD,KAAA,WAAAC,MAAA,IACA,CAAAD,KAAA,gBAAAC,MAAA,IACA,CAAAD,KAAA,wBAAAC,MAAA,IACA,CAAAD,KAAA,wBAAAC,MAAA,IACA,CAAAD,KAAA,yBAAAC,MAAA,IACA,CAAAD,KAAA,yBAAAC,MAAA,IACA,CAAAD,KAAA,oBAAAC,MAAA,IACA,CAAAD,KAAA,uBAAAC,MAAA,IACA,CAAAD,KAAA,YAAAC,MAAA,IACA,CAAAD,KAAA,wBAAAC,MAAA,IACA,CAAAD,KAAA,qBAAAC,MAAA,IACA,CAAAD,KAAA,wBAAAC,MAAA,IACA,CAAAD,KAAA,YAAAC,MAAA,IACA,CAAAD,KAAA,uBAAAC,MAAA,IACA,CAAAD,KAAA,mBAAAC,MAAA,IACA,CAAAD,KAAA,gBAAAC,MAAA,IACA,CAAAD,KAAA,oBAAAC,MAAA,IACA,CAAAD,KAAA,oBAAAC,MAAA,IACA,CAAAD,KAAA,qBAAAC,MAAA,IACA,CAAAD,KAAA,qBAAAC,MAAA,KAyBAC,EAAA,CACA,CAAAF,KAAA,QAAAC,MAAA,SACA,CAAAD,KAAA,aAAAC,MAAA,aACA,CAAAD,KAAA,cAAAC,MAAA,cACA,CAAAD,KAAA,gBAAAC,MAAA,aACA,CAAAD,KAAA,YAAAC,MAAA,aACA,CAAAD,KAAA,eAAAC,MAAA,YAEA,CAAAD,KAAA,iBAAAC,MAAA,cACA,CAAAD,KAAA,eAAAC,MAAA,eACA,CAAAD,KAAA,kBAAAC,MAAA,iBACA,CAAAD,KAAA,kBAAAC,MAAA,sBACA,CAAAD,KAAA,aAAAC,MAAA,aAGA,CAAAD,KAAA,QAAAC,MAAA,SACA,CAAAD,KAAA,YAAAC,MAAA,aACA,CAAAD,KAAA,iBAAAC,MAAA,cACA,CAAAD,KAAA,WAAAC,MAAA,WACA,CAAAD,KAAA,eAAAC,MAAA,WACA,CAAAD,KAAA,cAAAC,MAAA,cACA,CAAAD,KAAA,cAAAC,MAAA,eAEAE,EAAAD,EAAAE,KAAAC,GAAAA,EAAAJ,QA6DAK,EAAA,CACA,CAAAN,KAAA,SAAAC,MAAA,OACA,CAAAD,KAAA,MAAAC,MAAA,WACA,CAAAD,KAAA,YAAAC,MAAA,WACA,CAAAD,KAAA,QAAAC,MAAA,SACA,CAAAD,KAAA,UAAAC,MAAA,SAEAM,EAAAD,EAAAF,KAAAI,GAAAA,EAAAP,QAQAQ,EAAAH,EAAAI,OANA,CACA,CAAAV,KAAA,WAAAC,MAAA,YACA,CAAAD,KAAA,WAAAC,MAAA,YACA,CAAAD,KAAA,UAAAC,MAAA,WACA,CAAAD,KAAA,aAAAC,MAAA,gBAEAG,KAAAI,GAAAA,EAAAP,QA0FA,MAAA,CACAU,oBAnNA,KAAA,CACAC,KAAAC,EAAAA,UAAAC,QACAC,IAAA,CACAH,KAAAI,EAAAA,aAAAC,OACAC,QAAA,CACAC,kBAAA,EACAC,MAAArB,EACAsB,QAAAC,GACA9B,KAAAE,IAAAF,KAAAC,IAAA6B,EAAA,GAAA,MAIAtB,KAAAsB,GAAA,SAAAA,IACAC,UAAA,CAAAD,EAAAE,KACAC,QAAAC,IAAAJ,EAAA,IAsMAK,0BArKA,KAAA,CACAf,KAAAC,EAAAA,UAAAe,IACAb,IAAA,CACAH,KAAAI,EAAAA,aAAAa,OACAX,QAAA,CACAC,kBAAA,EACAC,MAAAlB,EACAmB,QAAAhB,GACAF,EAAA2B,SAAAzB,GAAAA,EAAA,UAIAL,KAAAK,GAAA,QAAAA,aACAkB,UAAA,CAAAlB,EAAAmB,KACA,IAwJAO,iCAnJA,KAAA,CACAnB,KAAAC,EAAAA,UAAAmB,SACAjB,IAAA,CACAH,KAAAI,EAAAA,aAAAa,OACAX,QAAA,CACAC,kBAAA,EACAC,MAAAlB,EACAmB,QAAAhB,GACAF,EAAA2B,SAAAzB,GAAAA,EAAA,UAIAL,KAAAK,GAAA,aAAAA,IACAkB,UAAA,CAAAlB,EAAAmB,IACA,IAsIAS,mBAjIA,KAAA,CACArB,KAAAC,EAAAA,UAAAmB,SACAjB,IAAA,CACAH,KAAAI,EAAAA,aAAAa,OACAX,QAAA,CACAC,kBAAA,EACAC,MAAAlB,EACAmB,QAAAhB,GACAF,EAAA2B,SAAAzB,GAAAA,EAAA,UAIAL,KAAAK,GAAA,cAAAA,IACAkB,UAAA,CAAAlB,EAAAmB,KACA,IAoHAU,uBA5FA,KAAA,CACAtB,KAAAC,EAAAA,UAAAe,IACAb,IAAA,CACAH,KAAAI,EAAAA,aAAAa,OACAX,QAAA,CACAC,kBAAA,EACAC,MAAAd,EACAe,QAAAb,GACAD,EAAAuB,SAAAtB,GAAAA,EAAA,QAIAR,KAAAQ,GAAA,QAAAA,qBACAe,UAAA,CAAAf,EAAAgB,KACA,IA+EAW,qBA1EA,KAAA,CACAvB,KAAAC,EAAAA,UAAAmB,SACAjB,IAAA,CACAH,KAAAI,EAAAA,aAAAa,OACAX,QAAA,CACAC,kBAAA,EACAC,MAAAX,EACAY,QAAAb,GACAC,EAAAqB,SAAAtB,GAAAA,EAAA,QAIAR,KAAAQ,GAAA,YAAAA,IACAe,UAAA,CAAAf,EAAAgB,IACA,IA6DAY,gBAxDA,KAAA,CACAxB,KAAAC,EAAAA,UAAAmB,SACAjB,IAAA,CACAH,KAAAI,EAAAA,aAAAa,OACAX,QAAA,CACAC,kBAAA,EACAC,MAAAd,EACAe,QAAAb,GACAD,EAAAuB,SAAAtB,GAAAA,EAAA,QAIAR,KAAAQ,GAAA,WAAAA,IACAe,UAAA,CAAAf,EAAAgB,KACA,IA2CAa,iBApCA,KAAA,CACAzB,KAAAC,EAAAA,UAAAC,QACAC,IAAA,CACAH,KAAAI,EAAAA,aAAAC,OACAC,QAAA,CACAC,kBAAA,EACAC,MAAA,CAAA,CAAApB,KAAA,MAAAC,MAAA9B,GAAA,CAAA6B,KAAA,KAAAC,MAAA9B,GAAA,CAAA6B,KAAA,iBAAAC,MAAA9B,IACAkD,QAAAiB,GACA9C,KAAAE,IAAAF,KAAAC,IAAA6C,EAAAnE,GAAAA,KAIA6B,KAAAsC,GAAA,cAAAA,IACAf,UAAAe,IACAxD,KAAAF,YAAA0D,EAAA,IAuBAC,0BAlBA,KAAA,CACA3B,KAAAC,EAAAA,UAAAC,QACAC,IAAA,CAAAH,KAAAI,EAAAA,aAAAC,OAAAuB,aAAA,IACAxC,KAAAV,GAAA,6BAAAA,IACAiC,UAAAjC,IACAR,KAAAO,qBAAAC,EAAA,IAeA,0EAxWA"}