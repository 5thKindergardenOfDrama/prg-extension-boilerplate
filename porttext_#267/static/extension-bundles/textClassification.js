var textClassification=function(e,t){"use strict";function n(e,t,n,o,a,s){function i(e){if(void 0!==e&&"function"!=typeof e)throw new TypeError("Function expected");return e}for(var c,r=o.kind,l="getter"===r?"get":"setter"===r?"set":"value",u=!t&&e?o.static?e:e.prototype:null,d=t||(u?Object.getOwnPropertyDescriptor(u,o.name):{}),p=!1,g=n.length-1;g>=0;g--){var m={};for(var T in o)m[T]="access"===T?{}:o[T];for(var T in o.access)m.access[T]=o.access[T];m.addInitializer=function(e){if(p)throw new TypeError("Cannot add initializers after decoration has completed");s.push(i(e||null))};var f=(0,n[g])("accessor"===r?{get:d.get,set:d.set}:d[l],m);if("accessor"===r){if(void 0===f)continue;if(null===f||"object"!=typeof f)throw new TypeError("Object expected");(c=i(f.get))&&(d.get=c),(c=i(f.set))&&(d.set=c),(c=i(f.init))&&a.push(c)}else(c=i(f))&&("field"===r?a.push(c):d[l]=c)}u&&Object.defineProperty(u,o.name,d),p=!0}const o={id:"textClassification",name:"Text Classification",blocks:[{opcode:"ifTextMatchesClass",text:"[TEXT] matches [CLASS_NAME] ?",blockType:"Boolean",arguments:{TEXT:{type:"string",defaultValue:"Enter text or answer block"},CLASS_NAME:{type:"string",menu:"model_classes",defaultValue:""}}},{opcode:"getModelPrediction",text:"predict class for [TEXT]",blockType:"reporter",arguments:{TEXT:{type:"string",defaultValue:"Enter text or answer block"}}},{opcode:"getModelConfidence",text:"Confidence of predict class for [TEXT]",blockType:"reporter",arguments:{TEXT:{type:"string",defaultValue:"Enter text or answer block"}}},{opcode:"confidenceTrue",text:"probability that [TEXT] is [LABEL]",blockType:"reporter",arguments:{TEXT:{type:"string",defaultValue:"TEXT"},LABEL:{type:"string",defaultValue:"toxicity",menu:"toxicitylabels"}}},{opcode:"sentimentScore",text:"Sentiment Score for [TEXT]",blockType:"reporter",arguments:{TEXT:{type:"string",defaultValue:"TEXT"}}},{opcode:"speakText",text:"speak [TEXT]",blockType:"command",arguments:{TEXT:{type:"string",defaultValue:"Hello"}}},{opcode:"askSpeechRecognition",text:"speak [PROMPT] then listen for response",blockType:"command",arguments:{PROMPT:{type:"string",defaultValue:"How are you?"}}},{opcode:"getRecognizedSpeech",text:"response",blockType:"reporter"},{opcode:"setVoice",text:"set voice to [VOICE]",blockType:"command",arguments:{VOICE:{type:"string",menu:"voices",defaultValue:"SQUEAK"}}},{opcode:"onHeardSound",text:"when heard sound > [THRESHOLD]",blockType:"hat",arguments:{THRESHOLD:{type:"number",defaultValue:10}}}],menus:{voices:{acceptReporters:!0,items:[{text:"squeak",value:"SQUEAK"},{text:"tenor",value:"TENOR"},{text:"alto",value:"ALTO"},{text:"giant",value:"GIANT"}]},model_classes:{acceptReporters:!1,items:"getLabels"},toxicitylabels:{items:[{value:"toxicity",text:"toxic"},{value:"severe_toxicity",text:"severely toxic"},{value:"identity_attack",text:"an identity-based attack"},{value:"insult",text:"insulting"},{value:"threat",text:"threatening"},{value:"obscene",text:"profanity"}],acceptReporters:!0}}},a=t.legacy(o);t.legacy(o,{incrementalDevelopment:!0});const{legacyBlock:s}=a.for(),i={name:"Text Classification"};var c=(()=>{var e;let a,c,r,l,u,d,p,g,m,T,f=[];return e=class extends(t.extension(i,"legacySupport")){constructor(){super(...arguments),this.labels=void function(e,t,n){for(var o=arguments.length>2,a=0;a<t.length;a++)n=o?t[a].call(e,n):t[a].call(e)}(this,f)}init(e){}getLegacyInfo(){return o}ifTextMatchesClass(e,t){return!0}getModelPrediction(e){return""}getModelConfidence(e){return 0}confidenceTrue(e,t){return 0}sentimentScore(e){return 0}speakText(e){}askSpeechRecognition(e){}getRecognizedSpeech(){return""}setVoice(e){}onHeardSound(e){return!0}},a=[s.ifTextMatchesClass((e=>({argumentMethods:{1:{getItems:()=>e.labels}}})))],c=[s.getModelPrediction()],r=[s.getModelConfidence()],l=[s.confidenceTrue({argumentMethods:{1:{handler:e=>{const t=o.menus.toxicitylabels.items;return t.some((({value:t})=>t===e))?e:t[0].value}}}})],u=[s.sentimentScore()],d=[s.speakText()],p=[s.askSpeechRecognition()],g=[s.getRecognizedSpeech()],m=[s.setVoice({argumentMethods:{0:{handler:e=>{const t=o.menus.voices.items;return t.some((({value:t})=>t===e))?e:t[0].value}}}})],T=[s.onHeardSound()],n(e,null,a,{kind:"method",name:"ifTextMatchesClass",static:!1,private:!1,access:{has:e=>"ifTextMatchesClass"in e,get:e=>e.ifTextMatchesClass}},null,f),n(e,null,c,{kind:"method",name:"getModelPrediction",static:!1,private:!1,access:{has:e=>"getModelPrediction"in e,get:e=>e.getModelPrediction}},null,f),n(e,null,r,{kind:"method",name:"getModelConfidence",static:!1,private:!1,access:{has:e=>"getModelConfidence"in e,get:e=>e.getModelConfidence}},null,f),n(e,null,l,{kind:"method",name:"confidenceTrue",static:!1,private:!1,access:{has:e=>"confidenceTrue"in e,get:e=>e.confidenceTrue}},null,f),n(e,null,u,{kind:"method",name:"sentimentScore",static:!1,private:!1,access:{has:e=>"sentimentScore"in e,get:e=>e.sentimentScore}},null,f),n(e,null,d,{kind:"method",name:"speakText",static:!1,private:!1,access:{has:e=>"speakText"in e,get:e=>e.speakText}},null,f),n(e,null,p,{kind:"method",name:"askSpeechRecognition",static:!1,private:!1,access:{has:e=>"askSpeechRecognition"in e,get:e=>e.askSpeechRecognition}},null,f),n(e,null,g,{kind:"method",name:"getRecognizedSpeech",static:!1,private:!1,access:{has:e=>"getRecognizedSpeech"in e,get:e=>e.getRecognizedSpeech}},null,f),n(e,null,m,{kind:"method",name:"setVoice",static:!1,private:!1,access:{has:e=>"setVoice"in e,get:e=>e.setVoice}},null,f),n(e,null,T,{kind:"method",name:"onHeardSound",static:!1,private:!1,access:{has:e=>"onHeardSound"in e,get:e=>e.onHeardSound}},null,f),e})();return e.Extension=c,Object.defineProperty(e,"__esModule",{value:!0}),e}({},ExtensionFramework);//# sourceMappingURL=textClassification.js.map
