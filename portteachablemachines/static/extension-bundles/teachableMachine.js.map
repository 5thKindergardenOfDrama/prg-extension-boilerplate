{"version":3,"file":"teachableMachine.js","sources":["../../../../extensions/src/teachableMachine/index.ts"],"sourcesContent":["import { ArgumentType, BlockType, Extension, Block, DefineBlock, Environment, ExtensionMenuDisplayDetails } from \"$common\";\n\n/**\n * @summary This type describes how your extension will display in the extensions menu. \n * @description Like all Typescript type declarations, it looks and acts a lot like a javascript object. \n * It will be passed as the first generic argument to the Extension class that your specific extension `extends`\n * (see the class defintion below for more information on extending the Extension base class). \n * @see ExtensionMenuDisplayDetails for all possible display menu properties.\n * @link https://www.typescriptlang.org/docs/handbook/2/objects.html Learn more about object types! (This is specifically a 'type alias')\n * @link https://www.typescriptlang.org/docs/handbook/2/generics.html Learn more about generics! \n */\ntype Details = {\n  name: \"Teachable Machine\",\n  description: \"Use your Teachable Machine models in your Scratch project!\"\n  iconURL: \"teachable-machine-blocks.png\",\n  insetIconURL: \"teachable-machine-blocks-small.svg\"\n};\n\n/**\n * @summary This type describes all of the blocks your extension will/does implement. \n * @description As you can see, each block is represented as a function.\n * In typescript, you can specify a function in either of the following ways (and which you choose is a matter of preference):\n * - Arrow syntax: `nameOfFunction: (argument1Name: argument1Type, argument2Name: argument2Type, ...etc...) => returnType;`\n * - 'Method' syntax: `nameOfFunction(argument1Name: argument1Type, argument2Name: argument2Type, ...etc...): returnType;`\n * \n * The three included functions demonstrate some of the most common types of blocks: commands, reporters, and hats.\n * - Command functions/blocks take 0 or more arguments, and return nothing (indicated by the use of a `void` return type). \n * - Reporter functions/blocks also take 0 or more arguments, but they must return a value (likely a `string` or `number`).\n * - Hat functions/blocks also take 0 or more arguments, but they must return a boolean value.\n * \n * Feel free to delete these once you're ready to implement your own blocks.\n * \n * This type will be passed as the second generic argument to the Extension class that your specific extension 'extends'\n * (see the class defintion below for more information on extending the Extension base class). \n * @link https://www.typescriptlang.org/docs/handbook/2/functions.html Learn more about function types!\n * @link https://www.typescriptlang.org/docs/handbook/2/objects.html Learn more about object types! (This is specifically a 'type alias')\n * @link https://www.typescriptlang.org/docs/handbook/2/generics.html Learn more about generics! \n */\ntype Blocks = {\n  exampleCommand(exampleString: string, exampleNumber: number): void;\n  exampleReporter: () => number;\n  exampleHat(condition: boolean): boolean;\n}\n\n/**\n * @summary This is the class responsible for implementing the functionality of your blocks.\n * @description You'll notice that this class `extends` (or 'inherits') from the base `Extension` class.\n * \n * Hover over `Extension` to get a more in depth explanation of the base class, and what it means to `extend it`.\n */\nexport default class ExtensionNameGoesHere extends Extension<Details, Blocks> {\n  /**\n   * @summary A field to demonstrate how Typescript Class fields work\n   * @link https://www.typescriptlang.org/docs/handbook/2/classes.html#fields\n   */\n  exampleField: number;\n\n  init(env: Environment) {\n    this.exampleField = 0;\n  }\n\n  // All example definitions below are syntactically equivalent, \n  // and which you use is just a matter of preference.\n  defineBlocks(): ExtensionNameGoesHere[\"BlockDefinitions\"] {\n\n    type DefineExampleCommand = DefineBlock<ExtensionNameGoesHere, Blocks[\"exampleCommand\"]>;\n    const exampleCommand: DefineExampleCommand = () => ({\n      type: BlockType.Command,\n      args: [ArgumentType.String, { type: ArgumentType.Number, defaultValue: 789 }],\n      text: (exampleString, exampleNumber) => `This is where the blocks display text goes, with arguments --> ${exampleString} and ${exampleNumber}`,\n      operation: (exampleString, exampleNumber, util) => {\n        alert(`This is a command! Here's what it received: ${exampleString} and ${exampleNumber}`); // Replace with what the block should do! \n        console.log(util.stackFrame.isLoop); // just an example of using the BlockUtility\n      }\n    });\n\n    return {\n      exampleCommand,\n\n      exampleReporter: function (self: ExtensionNameGoesHere): Block<ExtensionNameGoesHere, Blocks[\"exampleReporter\"]> {\n        return {\n          type: BlockType.Reporter,\n          text: \"This increments an internal field and then reports it's value\",\n          operation: () => {\n            return ++self.exampleField;\n          }\n        }\n      },\n\n      exampleHat: pickFromOptions\n    }\n  }\n}\n\ntype WithOptionsBlock = Blocks[\"exampleHat\"];\nconst pickFromOptions = (): Block<ExtensionNameGoesHere, WithOptionsBlock> => ({\n  type: BlockType.Hat,\n  arg: { type: ArgumentType.Boolean, options: [{ text: 'Yes', value: true }, { text: 'No', value: false }] },\n  text: (argument1) => `Should the below block execute? ${argument1}`,\n  operation: function (argument1) {\n    return argument1;\n  }\n});"],"names":["teachableMachine","exports","$common","ExtensionNameGoesHere","Extension","internal_getCodeGenArgs","id","name","blockIconURI","init","env","this","exampleField","defineBlocks","exampleCommand","type","BlockType","Command","args","ArgumentType","String","Number","defaultValue","text","exampleString","exampleNumber","operation","util","alert","console","log","stackFrame","isLoop","exampleReporter","self","Reporter","exampleHat","pickFromOptions","Hat","arg","Boolean","options","value","argument1"],"mappings":"AAEA,IAAAA,iBAAA,SAAAC,EAAAC,GAAA,aAgDA,MAAAC,UAAAC,EAAAA,UACAC,0BAAA,MAAA,CAAAC,GAAA,mBAAAC,KAAA,oBAAAC,aAAA,ymVAAA,CAQAC,KAAAC,GACAC,KAAAC,aAAA,CACA,CAIAC,eAaA,MAAA,CACAC,eAXA,KAAA,CACAC,KAAAC,EAAAA,UAAAC,QACAC,KAAA,CAAAC,eAAAC,OAAA,CAAAL,KAAAI,EAAAA,aAAAE,OAAAC,aAAA,MACAC,KAAA,CAAAC,EAAAC,IAAA,qEAAAD,SAAAC,IACAC,UAAA,CAAAF,EAAAC,EAAAE,KACAC,MAAA,+CAAAJ,SAAAC,KACAI,QAAAC,IAAAH,EAAAI,WAAAC,OAAA,IAOAC,gBAAA,SAAAC,GACA,MAAA,CACAnB,KAAAC,EAAAA,UAAAmB,SACAZ,KAAA,gEACAG,UAAA,MACAQ,EAAAtB,aAGA,EAEAwB,WAAAC,EAEA,EAIA,MAAAA,EAAA,KAAA,CACAtB,KAAAC,EAAAA,UAAAsB,IACAC,IAAA,CAAAxB,KAAAI,EAAAA,aAAAqB,QAAAC,QAAA,CAAA,CAAAlB,KAAA,MAAAmB,OAAA,GAAA,CAAAnB,KAAA,KAAAmB,OAAA,KACAnB,KAAAoB,GAAA,mCAAAA,IACAjB,UAAA,SAAAiB,GACA,OAAAA,6EApGA"}